
steering-motor-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007164  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000384  08007338  08007338  00008338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076bc  080076bc  000091d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076bc  080076bc  000086bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076c4  080076c4  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076c4  080076c4  000086c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076c8  080076c8  000086c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080076cc  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000304  200001d4  080078a0  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  080078a0  000094d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c1f6  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e3b  00000000  00000000  000153fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  00017238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000989  00000000  00000000  00017ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b49  00000000  00000000  00018831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e446  00000000  00000000  0001b37a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2da0  00000000  00000000  000297c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fc560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004394  00000000  00000000  000fc5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00100938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001d4 	.word	0x200001d4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800731c 	.word	0x0800731c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001d8 	.word	0x200001d8
 800020c:	0800731c 	.word	0x0800731c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <HAL_CAN_RxFifo0MsgPendingCallback>:
uint8_t TxData[8];
uint8_t RxData[8];
int datacheck = 0;

// putting some CAN receiving code here //
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 8000f1c:	4b08      	ldr	r3, [pc, #32]	@ (8000f40 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 8000f1e:	4a09      	ldr	r2, [pc, #36]	@ (8000f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f20:	2100      	movs	r1, #0
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f001 f9a2 	bl	800226c <HAL_CAN_GetRxMessage>
	if (RxHeader.DLC == 2) {
 8000f28:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8000f2a:	691b      	ldr	r3, [r3, #16]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d102      	bne.n	8000f36 <HAL_CAN_RxFifo0MsgPendingCallback+0x22>
		datacheck = 1;
 8000f30:	4b05      	ldr	r3, [pc, #20]	@ (8000f48 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8000f32:	2201      	movs	r2, #1
 8000f34:	601a      	str	r2, [r3, #0]
	}
}
 8000f36:	bf00      	nop
 8000f38:	3708      	adds	r7, #8
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000378 	.word	0x20000378
 8000f44:	20000350 	.word	0x20000350
 8000f48:	20000380 	.word	0x20000380

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f000 fe05 	bl	8001b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 f869 	bl	800102c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5a:	f000 faab 	bl	80014b4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000f5e:	f000 f967 	bl	8001230 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f62:	f000 f9b9 	bl	80012d8 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000f66:	f000 fa05 	bl	8001374 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000f6a:	f000 f911 	bl	8001190 <MX_TIM1_Init>
  MX_CAN2_Init();
 8000f6e:	f000 f8bd 	bl	80010ec <MX_CAN2_Init>

  /* USER CODE BEGIN 2 */
  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000f72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f76:	4826      	ldr	r0, [pc, #152]	@ (8001010 <main+0xc4>)
 8000f78:	f001 ffaf 	bl	8002eda <HAL_GPIO_TogglePin>
//  double goal = 1.07;
//  printf("goal %f\r\n");
//  setPIDGoalA(goal);

  /* CAN initialization below */
  HAL_CAN_Start(&hcan2);
 8000f7c:	4825      	ldr	r0, [pc, #148]	@ (8001014 <main+0xc8>)
 8000f7e:	f001 f861 	bl	8002044 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f82:	2102      	movs	r1, #2
 8000f84:	4823      	ldr	r0, [pc, #140]	@ (8001014 <main+0xc8>)
 8000f86:	f001 fa93 	bl	80024b0 <HAL_CAN_ActivateNotification>
  TxHeader.DLC = 2;
 8000f8a:	4b23      	ldr	r3, [pc, #140]	@ (8001018 <main+0xcc>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	611a      	str	r2, [r3, #16]
  TxHeader.ExtId = 0;
 8000f90:	4b21      	ldr	r3, [pc, #132]	@ (8001018 <main+0xcc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	605a      	str	r2, [r3, #4]
  TxHeader.IDE = CAN_ID_STD;
 8000f96:	4b20      	ldr	r3, [pc, #128]	@ (8001018 <main+0xcc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  TxHeader.RTR = CAN_RTR_DATA;
 8000f9c:	4b1e      	ldr	r3, [pc, #120]	@ (8001018 <main+0xcc>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  TxHeader.StdId = 0x466;
 8000fa2:	4b1d      	ldr	r3, [pc, #116]	@ (8001018 <main+0xcc>)
 8000fa4:	f240 4266 	movw	r2, #1126	@ 0x466
 8000fa8:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
//	  print("%d\n\r", );
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000faa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fae:	4818      	ldr	r0, [pc, #96]	@ (8001010 <main+0xc4>)
 8000fb0:	f001 ff93 	bl	8002eda <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000fb4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fb8:	f000 fe44 	bl	8001c44 <HAL_Delay>

	  TxData[0] = 100;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	@ (800101c <main+0xd0>)
 8000fbe:	2264      	movs	r2, #100	@ 0x64
 8000fc0:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 10;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	@ (800101c <main+0xd0>)
 8000fc4:	220a      	movs	r2, #10
 8000fc6:	705a      	strb	r2, [r3, #1]



	  HAL_CAN_AddTxMessage(&hcan2, &TxHeader, TxData, &TxMailbox);
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <main+0xd4>)
 8000fca:	4a14      	ldr	r2, [pc, #80]	@ (800101c <main+0xd0>)
 8000fcc:	4912      	ldr	r1, [pc, #72]	@ (8001018 <main+0xcc>)
 8000fce:	4811      	ldr	r0, [pc, #68]	@ (8001014 <main+0xc8>)
 8000fd0:	f001 f87c 	bl	80020cc <HAL_CAN_AddTxMessage>



	  if (datacheck) {
 8000fd4:	4b13      	ldr	r3, [pc, #76]	@ (8001024 <main+0xd8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0e6      	beq.n	8000faa <main+0x5e>
		  for(int i = 0; i < RxData[1]; i++) {
 8000fdc:	2300      	movs	r3, #0
 8000fde:	607b      	str	r3, [r7, #4]
 8000fe0:	e00c      	b.n	8000ffc <main+0xb0>
			  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000fe2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000fe6:	480a      	ldr	r0, [pc, #40]	@ (8001010 <main+0xc4>)
 8000fe8:	f001 ff77 	bl	8002eda <HAL_GPIO_TogglePin>
			  HAL_Delay(RxData[0]);
 8000fec:	4b0e      	ldr	r3, [pc, #56]	@ (8001028 <main+0xdc>)
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f000 fe27 	bl	8001c44 <HAL_Delay>
		  for(int i = 0; i < RxData[1]; i++) {
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	607b      	str	r3, [r7, #4]
 8000ffc:	4b0a      	ldr	r3, [pc, #40]	@ (8001028 <main+0xdc>)
 8000ffe:	785b      	ldrb	r3, [r3, #1]
 8001000:	461a      	mov	r2, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4293      	cmp	r3, r2
 8001006:	dbec      	blt.n	8000fe2 <main+0x96>
		  }
		  datacheck = 0;
 8001008:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <main+0xd8>)
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800100e:	e7cc      	b.n	8000faa <main+0x5e>
 8001010:	40020800 	.word	0x40020800
 8001014:	200001f0 	.word	0x200001f0
 8001018:	20000338 	.word	0x20000338
 800101c:	20000370 	.word	0x20000370
 8001020:	2000036c 	.word	0x2000036c
 8001024:	20000380 	.word	0x20000380
 8001028:	20000378 	.word	0x20000378

0800102c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b094      	sub	sp, #80	@ 0x50
 8001030:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	2234      	movs	r2, #52	@ 0x34
 8001038:	2100      	movs	r1, #0
 800103a:	4618      	mov	r0, r3
 800103c:	f004 fa47 	bl	80054ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001050:	2300      	movs	r3, #0
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	4b23      	ldr	r3, [pc, #140]	@ (80010e4 <SystemClock_Config+0xb8>)
 8001056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001058:	4a22      	ldr	r2, [pc, #136]	@ (80010e4 <SystemClock_Config+0xb8>)
 800105a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800105e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001060:	4b20      	ldr	r3, [pc, #128]	@ (80010e4 <SystemClock_Config+0xb8>)
 8001062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800106c:	2300      	movs	r3, #0
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	4b1d      	ldr	r3, [pc, #116]	@ (80010e8 <SystemClock_Config+0xbc>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001078:	4a1b      	ldr	r2, [pc, #108]	@ (80010e8 <SystemClock_Config+0xbc>)
 800107a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800107e:	6013      	str	r3, [r2, #0]
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <SystemClock_Config+0xbc>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001088:	603b      	str	r3, [r7, #0]
 800108a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800108c:	2302      	movs	r3, #2
 800108e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001090:	2301      	movs	r3, #1
 8001092:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001094:	2310      	movs	r3, #16
 8001096:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001098:	2300      	movs	r3, #0
 800109a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800109c:	f107 031c 	add.w	r3, r7, #28
 80010a0:	4618      	mov	r0, r3
 80010a2:	f002 fa49 	bl	8003538 <HAL_RCC_OscConfig>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80010ac:	f000 fa83 	bl	80015b6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010b0:	230f      	movs	r3, #15
 80010b2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010b8:	2300      	movs	r3, #0
 80010ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010bc:	2300      	movs	r3, #0
 80010be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010c0:	2300      	movs	r3, #0
 80010c2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010c4:	f107 0308 	add.w	r3, r7, #8
 80010c8:	2100      	movs	r1, #0
 80010ca:	4618      	mov	r0, r3
 80010cc:	f001 ff20 	bl	8002f10 <HAL_RCC_ClockConfig>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <SystemClock_Config+0xae>
  {
    Error_Handler();
 80010d6:	f000 fa6e 	bl	80015b6 <Error_Handler>
  }
}
 80010da:	bf00      	nop
 80010dc:	3750      	adds	r7, #80	@ 0x50
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40007000 	.word	0x40007000

080010ec <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_CAN2_Init+0x9c>)
 80010f4:	4a25      	ldr	r2, [pc, #148]	@ (800118c <MX_CAN2_Init+0xa0>)
 80010f6:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <MX_CAN2_Init+0x9c>)
 80010fa:	2210      	movs	r2, #16
 80010fc:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001104:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_1TQ;
 800110a:	4b1f      	ldr	r3, [pc, #124]	@ (8001188 <MX_CAN2_Init+0x9c>)
 800110c:	2200      	movs	r2, #0
 800110e:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001110:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001112:	2200      	movs	r2, #0
 8001114:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8001116:	4b1c      	ldr	r3, [pc, #112]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001118:	2200      	movs	r2, #0
 800111a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800111c:	4b1a      	ldr	r3, [pc, #104]	@ (8001188 <MX_CAN2_Init+0x9c>)
 800111e:	2200      	movs	r2, #0
 8001120:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8001122:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001124:	2200      	movs	r2, #0
 8001126:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8001128:	4b17      	ldr	r3, [pc, #92]	@ (8001188 <MX_CAN2_Init+0x9c>)
 800112a:	2200      	movs	r2, #0
 800112c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800112e:	4b16      	ldr	r3, [pc, #88]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001130:	2200      	movs	r2, #0
 8001132:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8001134:	4b14      	ldr	r3, [pc, #80]	@ (8001188 <MX_CAN2_Init+0x9c>)
 8001136:	2200      	movs	r2, #0
 8001138:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800113a:	4813      	ldr	r0, [pc, #76]	@ (8001188 <MX_CAN2_Init+0x9c>)
 800113c:	f000 fda6 	bl	8001c8c <HAL_CAN_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_CAN2_Init+0x5e>
  {
    Error_Handler();
 8001146:	f000 fa36 	bl	80015b6 <Error_Handler>
  /* USER CODE BEGIN CAN2_Init 2 */


  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 800114a:	2301      	movs	r3, #1
 800114c:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 10;
 800114e:	230a      	movs	r3, #10
 8001150:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0x103<<5;
 8001156:	f242 0360 	movw	r3, #8288	@ 0x2060
 800115a:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0x7FF<<5;
 8001160:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8001164:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0x0000;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800116a:	2300      	movs	r3, #0
 800116c:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800116e:	2301      	movs	r3, #1
 8001170:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 0;
 8001172:	2300      	movs	r3, #0
 8001174:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan2, &canfilterconfig);
 8001176:	463b      	mov	r3, r7
 8001178:	4619      	mov	r1, r3
 800117a:	4803      	ldr	r0, [pc, #12]	@ (8001188 <MX_CAN2_Init+0x9c>)
 800117c:	f000 fe82 	bl	8001e84 <HAL_CAN_ConfigFilter>

  /* USER CODE END CAN2_Init 2 */

}
 8001180:	bf00      	nop
 8001182:	3728      	adds	r7, #40	@ 0x28
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	200001f0 	.word	0x200001f0
 800118c:	40006800 	.word	0x40006800

08001190 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b086      	sub	sp, #24
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0308 	add.w	r3, r7, #8
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	463b      	mov	r3, r7
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011ac:	4b1e      	ldr	r3, [pc, #120]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011ae:	4a1f      	ldr	r2, [pc, #124]	@ (800122c <MX_TIM1_Init+0x9c>)
 80011b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011b4:	220f      	movs	r2, #15
 80011b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80011be:	4b1a      	ldr	r3, [pc, #104]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011c0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80011c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011c6:	4b18      	ldr	r3, [pc, #96]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011cc:	4b16      	ldr	r3, [pc, #88]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011d2:	4b15      	ldr	r3, [pc, #84]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011da:	f002 fc4b 	bl	8003a74 <HAL_TIM_Base_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80011e4:	f000 f9e7 	bl	80015b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011ee:	f107 0308 	add.w	r3, r7, #8
 80011f2:	4619      	mov	r1, r3
 80011f4:	480c      	ldr	r0, [pc, #48]	@ (8001228 <MX_TIM1_Init+0x98>)
 80011f6:	f002 ff3d 	bl	8004074 <HAL_TIM_ConfigClockSource>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001200:	f000 f9d9 	bl	80015b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001204:	2300      	movs	r3, #0
 8001206:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001208:	2300      	movs	r3, #0
 800120a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800120c:	463b      	mov	r3, r7
 800120e:	4619      	mov	r1, r3
 8001210:	4805      	ldr	r0, [pc, #20]	@ (8001228 <MX_TIM1_Init+0x98>)
 8001212:	f003 fb1f 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800121c:	f000 f9cb 	bl	80015b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001220:	bf00      	nop
 8001222:	3718      	adds	r7, #24
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	20000218 	.word	0x20000218
 800122c:	40010000 	.word	0x40010000

08001230 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	@ 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	@ 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f004 f945 	bl	80054ce <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800124c:	4b21      	ldr	r3, [pc, #132]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800124e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001252:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001254:	4b1f      	ldr	r3, [pc, #124]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1e      	ldr	r3, [pc, #120]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001260:	4b1c      	ldr	r3, [pc, #112]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001262:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001266:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b1a      	ldr	r3, [pc, #104]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126e:	4b19      	ldr	r3, [pc, #100]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001274:	2303      	movs	r3, #3
 8001276:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001278:	2300      	movs	r3, #0
 800127a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127c:	2301      	movs	r3, #1
 800127e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001280:	2300      	movs	r3, #0
 8001282:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001288:	2300      	movs	r3, #0
 800128a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128c:	2301      	movs	r3, #1
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	480d      	ldr	r0, [pc, #52]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 80012a0:	f002 fc90 	bl	8003bc4 <HAL_TIM_Encoder_Init>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80012aa:	f000 f984 	bl	80015b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	@ (80012d4 <MX_TIM2_Init+0xa4>)
 80012bc:	f003 faca 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80012c6:	f000 f976 	bl	80015b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ca:	bf00      	nop
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	20000260 	.word	0x20000260

080012d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	@ (800136c <MX_TIM5_Init+0x94>)
 80012f6:	4a1e      	ldr	r2, [pc, #120]	@ (8001370 <MX_TIM5_Init+0x98>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	@ (800136c <MX_TIM5_Init+0x94>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	@ (800136c <MX_TIM5_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001306:	4b19      	ldr	r3, [pc, #100]	@ (800136c <MX_TIM5_Init+0x94>)
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	@ (800136c <MX_TIM5_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	@ (800136c <MX_TIM5_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	@ (800136c <MX_TIM5_Init+0x94>)
 800131c:	f002 fbaa 	bl	8003a74 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001326:	f000 f946 	bl	80015b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	@ (800136c <MX_TIM5_Init+0x94>)
 8001338:	f002 fe9c 	bl	8004074 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 f938 	bl	80015b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	@ (800136c <MX_TIM5_Init+0x94>)
 8001354:	f003 fa7e 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800135e:	f000 f92a 	bl	80015b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	200002a8 	.word	0x200002a8
 8001370:	40000c00 	.word	0x40000c00

08001374 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b096      	sub	sp, #88	@ 0x58
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001392:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001396:	2200      	movs	r2, #0
 8001398:	601a      	str	r2, [r3, #0]
 800139a:	605a      	str	r2, [r3, #4]
 800139c:	609a      	str	r2, [r3, #8]
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	611a      	str	r2, [r3, #16]
 80013a2:	615a      	str	r2, [r3, #20]
 80013a4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2220      	movs	r2, #32
 80013aa:	2100      	movs	r1, #0
 80013ac:	4618      	mov	r0, r3
 80013ae:	f004 f88e 	bl	80054ce <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80013b2:	4b3e      	ldr	r3, [pc, #248]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013b4:	4a3e      	ldr	r2, [pc, #248]	@ (80014b0 <MX_TIM8_Init+0x13c>)
 80013b6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 80013b8:	4b3c      	ldr	r3, [pc, #240]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013ba:	220f      	movs	r2, #15
 80013bc:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013be:	4b3b      	ldr	r3, [pc, #236]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80013c4:	4b39      	ldr	r3, [pc, #228]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013c6:	2263      	movs	r2, #99	@ 0x63
 80013c8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ca:	4b38      	ldr	r3, [pc, #224]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80013d0:	4b36      	ldr	r3, [pc, #216]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b35      	ldr	r3, [pc, #212]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80013dc:	4833      	ldr	r0, [pc, #204]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013de:	f002 fb49 	bl	8003a74 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 80013e8:	f000 f8e5 	bl	80015b6 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80013f2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013f6:	4619      	mov	r1, r3
 80013f8:	482c      	ldr	r0, [pc, #176]	@ (80014ac <MX_TIM8_Init+0x138>)
 80013fa:	f002 fe3b 	bl	8004074 <HAL_TIM_ConfigClockSource>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 8001404:	f000 f8d7 	bl	80015b6 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001408:	4828      	ldr	r0, [pc, #160]	@ (80014ac <MX_TIM8_Init+0x138>)
 800140a:	f002 fb82 	bl	8003b12 <HAL_TIM_PWM_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001414:	f000 f8cf 	bl	80015b6 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001418:	2300      	movs	r3, #0
 800141a:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001420:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001424:	4619      	mov	r1, r3
 8001426:	4821      	ldr	r0, [pc, #132]	@ (80014ac <MX_TIM8_Init+0x138>)
 8001428:	f003 fa14 	bl	8004854 <HAL_TIMEx_MasterConfigSynchronization>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 8001432:	f000 f8c0 	bl	80015b6 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001436:	2360      	movs	r3, #96	@ 0x60
 8001438:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800143e:	2300      	movs	r3, #0
 8001440:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001442:	2300      	movs	r3, #0
 8001444:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001446:	2300      	movs	r3, #0
 8001448:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800144a:	2300      	movs	r3, #0
 800144c:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001456:	2200      	movs	r2, #0
 8001458:	4619      	mov	r1, r3
 800145a:	4814      	ldr	r0, [pc, #80]	@ (80014ac <MX_TIM8_Init+0x138>)
 800145c:	f002 fd48 	bl	8003ef0 <HAL_TIM_PWM_ConfigChannel>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 8001466:	f000 f8a6 	bl	80015b6 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800147e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001482:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	4619      	mov	r1, r3
 800148c:	4807      	ldr	r0, [pc, #28]	@ (80014ac <MX_TIM8_Init+0x138>)
 800148e:	f003 fa5d 	bl	800494c <HAL_TIMEx_ConfigBreakDeadTime>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001498:	f000 f88d 	bl	80015b6 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800149c:	4803      	ldr	r0, [pc, #12]	@ (80014ac <MX_TIM8_Init+0x138>)
 800149e:	f000 f9c1 	bl	8001824 <HAL_TIM_MspPostInit>

}
 80014a2:	bf00      	nop
 80014a4:	3758      	adds	r7, #88	@ 0x58
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002f0 	.word	0x200002f0
 80014b0:	40010400 	.word	0x40010400

080014b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	@ 0x28
 80014b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b31      	ldr	r3, [pc, #196]	@ (8001594 <MX_GPIO_Init+0xe0>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d2:	4a30      	ldr	r2, [pc, #192]	@ (8001594 <MX_GPIO_Init+0xe0>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014da:	4b2e      	ldr	r3, [pc, #184]	@ (8001594 <MX_GPIO_Init+0xe0>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001594 <MX_GPIO_Init+0xe0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ee:	4a29      	ldr	r2, [pc, #164]	@ (8001594 <MX_GPIO_Init+0xe0>)
 80014f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f6:	4b27      	ldr	r3, [pc, #156]	@ (8001594 <MX_GPIO_Init+0xe0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	2300      	movs	r3, #0
 8001504:	60bb      	str	r3, [r7, #8]
 8001506:	4b23      	ldr	r3, [pc, #140]	@ (8001594 <MX_GPIO_Init+0xe0>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150a:	4a22      	ldr	r2, [pc, #136]	@ (8001594 <MX_GPIO_Init+0xe0>)
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	6313      	str	r3, [r2, #48]	@ 0x30
 8001512:	4b20      	ldr	r3, [pc, #128]	@ (8001594 <MX_GPIO_Init+0xe0>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	4b1c      	ldr	r3, [pc, #112]	@ (8001594 <MX_GPIO_Init+0xe0>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001526:	4a1b      	ldr	r2, [pc, #108]	@ (8001594 <MX_GPIO_Init+0xe0>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	6313      	str	r3, [r2, #48]	@ 0x30
 800152e:	4b19      	ldr	r3, [pc, #100]	@ (8001594 <MX_GPIO_Init+0xe0>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	607b      	str	r3, [r7, #4]
 8001538:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800153a:	2200      	movs	r2, #0
 800153c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001540:	4815      	ldr	r0, [pc, #84]	@ (8001598 <MX_GPIO_Init+0xe4>)
 8001542:	f001 fcb1 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 8001546:	2200      	movs	r2, #0
 8001548:	2180      	movs	r1, #128	@ 0x80
 800154a:	4814      	ldr	r0, [pc, #80]	@ (800159c <MX_GPIO_Init+0xe8>)
 800154c:	f001 fcac 	bl	8002ea8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001550:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 0314 	add.w	r3, r7, #20
 8001566:	4619      	mov	r1, r3
 8001568:	480b      	ldr	r0, [pc, #44]	@ (8001598 <MX_GPIO_Init+0xe4>)
 800156a:	f001 fb09 	bl	8002b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIR_Pin */
  GPIO_InitStruct.Pin = DIR_Pin;
 800156e:	2380      	movs	r3, #128	@ 0x80
 8001570:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001572:	2301      	movs	r3, #1
 8001574:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DIR_GPIO_Port, &GPIO_InitStruct);
 800157e:	f107 0314 	add.w	r3, r7, #20
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_GPIO_Init+0xe8>)
 8001586:	f001 fafb 	bl	8002b80 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800158a:	bf00      	nop
 800158c:	3728      	adds	r7, #40	@ 0x28
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020800 	.word	0x40020800
 800159c:	40020000 	.word	0x40020000

080015a0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  *   None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
//  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);

  return ch;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr

080015b6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ba:	b672      	cpsid	i
}
 80015bc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015be:	bf00      	nop
 80015c0:	e7fd      	b.n	80015be <Error_Handler+0x8>
	...

080015c4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	607b      	str	r3, [r7, #4]
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_MspInit+0x4c>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <HAL_MspInit+0x4c>)
 80015d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_MspInit+0x4c>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	603b      	str	r3, [r7, #0]
 80015ea:	4b09      	ldr	r3, [pc, #36]	@ (8001610 <HAL_MspInit+0x4c>)
 80015ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ee:	4a08      	ldr	r2, [pc, #32]	@ (8001610 <HAL_MspInit+0x4c>)
 80015f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80015f6:	4b06      	ldr	r3, [pc, #24]	@ (8001610 <HAL_MspInit+0x4c>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001602:	bf00      	nop
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800

08001614 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	@ 0x28
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN2)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a28      	ldr	r2, [pc, #160]	@ (80016d4 <HAL_CAN_MspInit+0xc0>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d14a      	bne.n	80016cc <HAL_CAN_MspInit+0xb8>
  {
    /* USER CODE BEGIN CAN2_MspInit 0 */

    /* USER CODE END CAN2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	613b      	str	r3, [r7, #16]
 800163a:	4b27      	ldr	r3, [pc, #156]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800163e:	4a26      	ldr	r2, [pc, #152]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001640:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001644:	6413      	str	r3, [r2, #64]	@ 0x40
 8001646:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800164e:	613b      	str	r3, [r7, #16]
 8001650:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	60fb      	str	r3, [r7, #12]
 8001656:	4b20      	ldr	r3, [pc, #128]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	4a1f      	ldr	r2, [pc, #124]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 800165c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001660:	6413      	str	r3, [r2, #64]	@ 0x40
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	60fb      	str	r3, [r7, #12]
 800166c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	60bb      	str	r3, [r7, #8]
 8001672:	4b19      	ldr	r3, [pc, #100]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	4a18      	ldr	r2, [pc, #96]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001678:	f043 0302 	orr.w	r3, r3, #2
 800167c:	6313      	str	r3, [r2, #48]	@ 0x30
 800167e:	4b16      	ldr	r3, [pc, #88]	@ (80016d8 <HAL_CAN_MspInit+0xc4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
 8001688:	68bb      	ldr	r3, [r7, #8]
    /**CAN2 GPIO Configuration
    PB12     ------> CAN2_RX
    PB13     ------> CAN2_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800168a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800168e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	2302      	movs	r3, #2
 8001692:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001694:	2300      	movs	r3, #0
 8001696:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001698:	2303      	movs	r3, #3
 800169a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800169c:	2309      	movs	r3, #9
 800169e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a0:	f107 0314 	add.w	r3, r7, #20
 80016a4:	4619      	mov	r1, r3
 80016a6:	480d      	ldr	r0, [pc, #52]	@ (80016dc <HAL_CAN_MspInit+0xc8>)
 80016a8:	f001 fa6a 	bl	8002b80 <HAL_GPIO_Init>

    /* CAN2 interrupt Init */
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 80016ac:	2200      	movs	r2, #0
 80016ae:	2100      	movs	r1, #0
 80016b0:	2040      	movs	r0, #64	@ 0x40
 80016b2:	f001 fa2e 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80016b6:	2040      	movs	r0, #64	@ 0x40
 80016b8:	f001 fa47 	bl	8002b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80016bc:	2200      	movs	r2, #0
 80016be:	2100      	movs	r1, #0
 80016c0:	2041      	movs	r0, #65	@ 0x41
 80016c2:	f001 fa26 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80016c6:	2041      	movs	r0, #65	@ 0x41
 80016c8:	f001 fa3f 	bl	8002b4a <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN2_MspInit 1 */

  }

}
 80016cc:	bf00      	nop
 80016ce:	3728      	adds	r7, #40	@ 0x28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	40006800 	.word	0x40006800
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a26      	ldr	r2, [pc, #152]	@ (8001788 <HAL_TIM_Base_MspInit+0xa8>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d10e      	bne.n	8001710 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6453      	str	r3, [r2, #68]	@ 0x44
 8001702:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	617b      	str	r3, [r7, #20]
 800170c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 800170e:	e036      	b.n	800177e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM5)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a1e      	ldr	r2, [pc, #120]	@ (8001790 <HAL_TIM_Base_MspInit+0xb0>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d10e      	bne.n	8001738 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
 800171e:	4b1b      	ldr	r3, [pc, #108]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a1a      	ldr	r2, [pc, #104]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	613b      	str	r3, [r7, #16]
 8001734:	693b      	ldr	r3, [r7, #16]
}
 8001736:	e022      	b.n	800177e <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM8)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a15      	ldr	r2, [pc, #84]	@ (8001794 <HAL_TIM_Base_MspInit+0xb4>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d11d      	bne.n	800177e <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	4b11      	ldr	r3, [pc, #68]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174a:	4a10      	ldr	r2, [pc, #64]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	6453      	str	r3, [r2, #68]	@ 0x44
 8001752:	4b0e      	ldr	r3, [pc, #56]	@ (800178c <HAL_TIM_Base_MspInit+0xac>)
 8001754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800175e:	2200      	movs	r2, #0
 8001760:	2100      	movs	r1, #0
 8001762:	202b      	movs	r0, #43	@ 0x2b
 8001764:	f001 f9d5 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001768:	202b      	movs	r0, #43	@ 0x2b
 800176a:	f001 f9ee 	bl	8002b4a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800176e:	2200      	movs	r2, #0
 8001770:	2100      	movs	r1, #0
 8001772:	202c      	movs	r0, #44	@ 0x2c
 8001774:	f001 f9cd 	bl	8002b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001778:	202c      	movs	r0, #44	@ 0x2c
 800177a:	f001 f9e6 	bl	8002b4a <HAL_NVIC_EnableIRQ>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40010000 	.word	0x40010000
 800178c:	40023800 	.word	0x40023800
 8001790:	40000c00 	.word	0x40000c00
 8001794:	40010400 	.word	0x40010400

08001798 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b08a      	sub	sp, #40	@ 0x28
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a0:	f107 0314 	add.w	r3, r7, #20
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017b8:	d12b      	bne.n	8001812 <HAL_TIM_Encoder_MspInit+0x7a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	613b      	str	r3, [r7, #16]
 80017be:	4b17      	ldr	r3, [pc, #92]	@ (800181c <HAL_TIM_Encoder_MspInit+0x84>)
 80017c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c2:	4a16      	ldr	r2, [pc, #88]	@ (800181c <HAL_TIM_Encoder_MspInit+0x84>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ca:	4b14      	ldr	r3, [pc, #80]	@ (800181c <HAL_TIM_Encoder_MspInit+0x84>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	613b      	str	r3, [r7, #16]
 80017d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]
 80017da:	4b10      	ldr	r3, [pc, #64]	@ (800181c <HAL_TIM_Encoder_MspInit+0x84>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017de:	4a0f      	ldr	r2, [pc, #60]	@ (800181c <HAL_TIM_Encoder_MspInit+0x84>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e6:	4b0d      	ldr	r3, [pc, #52]	@ (800181c <HAL_TIM_Encoder_MspInit+0x84>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80017f2:	2303      	movs	r3, #3
 80017f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001802:	2301      	movs	r3, #1
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001806:	f107 0314 	add.w	r3, r7, #20
 800180a:	4619      	mov	r1, r3
 800180c:	4804      	ldr	r0, [pc, #16]	@ (8001820 <HAL_TIM_Encoder_MspInit+0x88>)
 800180e:	f001 f9b7 	bl	8002b80 <HAL_GPIO_Init>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	@ 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000

08001824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 030c 	add.w	r3, r7, #12
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <HAL_TIM_MspPostInit+0x68>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d11d      	bne.n	8001882 <HAL_TIM_MspPostInit+0x5e>
  {
    /* USER CODE BEGIN TIM8_MspPostInit 0 */

    /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60bb      	str	r3, [r7, #8]
 800184a:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <HAL_TIM_MspPostInit+0x6c>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a10      	ldr	r2, [pc, #64]	@ (8001890 <HAL_TIM_MspPostInit+0x6c>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <HAL_TIM_MspPostInit+0x6c>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0301 	and.w	r3, r3, #1
 800185e:	60bb      	str	r3, [r7, #8]
 8001860:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PA5     ------> TIM8_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001862:	2320      	movs	r3, #32
 8001864:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001866:	2302      	movs	r3, #2
 8001868:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186e:	2300      	movs	r3, #0
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001872:	2303      	movs	r3, #3
 8001874:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	@ (8001894 <HAL_TIM_MspPostInit+0x70>)
 800187e:	f001 f97f 	bl	8002b80 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM8_MspPostInit 1 */

    /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8001882:	bf00      	nop
 8001884:	3720      	adds	r7, #32
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40010400 	.word	0x40010400
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000

08001898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800189c:	bf00      	nop
 800189e:	e7fd      	b.n	800189c <NMI_Handler+0x4>

080018a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018a4:	bf00      	nop
 80018a6:	e7fd      	b.n	80018a4 <HardFault_Handler+0x4>

080018a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018ac:	bf00      	nop
 80018ae:	e7fd      	b.n	80018ac <MemManage_Handler+0x4>

080018b0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <UsageFault_Handler+0x4>

080018c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr

080018ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018ce:	b480      	push	{r7}
 80018d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018dc:	b480      	push	{r7}
 80018de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018ee:	f000 f989 	bl	8001c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTickFunction();
 80018f2:	f000 f903 	bl	8001afc <SysTickFunction>
  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001900:	4802      	ldr	r0, [pc, #8]	@ (800190c <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001902:	f002 fa05 	bl	8003d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002f0 	.word	0x200002f0

08001910 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001914:	4802      	ldr	r0, [pc, #8]	@ (8001920 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001916:	f002 f9fb 	bl	8003d10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200002f0 	.word	0x200002f0

08001924 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupt.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001928:	4802      	ldr	r0, [pc, #8]	@ (8001934 <CAN2_RX0_IRQHandler+0x10>)
 800192a:	f000 fde7 	bl	80024fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200001f0 	.word	0x200001f0

08001938 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800193c:	4802      	ldr	r0, [pc, #8]	@ (8001948 <CAN2_RX1_IRQHandler+0x10>)
 800193e:	f000 fddd 	bl	80024fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200001f0 	.word	0x200001f0

0800194c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return 1;
 8001950:	2301      	movs	r3, #1
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <_kill>:

int _kill(int pid, int sig)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001966:	f003 fe05 	bl	8005574 <__errno>
 800196a:	4603      	mov	r3, r0
 800196c:	2216      	movs	r2, #22
 800196e:	601a      	str	r2, [r3, #0]
  return -1;
 8001970:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001974:	4618      	mov	r0, r3
 8001976:	3708      	adds	r7, #8
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}

0800197c <_exit>:

void _exit (int status)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001984:	f04f 31ff 	mov.w	r1, #4294967295
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f7ff ffe7 	bl	800195c <_kill>
  while (1) {}    /* Make sure we hang here */
 800198e:	bf00      	nop
 8001990:	e7fd      	b.n	800198e <_exit+0x12>

08001992 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b086      	sub	sp, #24
 8001996:	af00      	add	r7, sp, #0
 8001998:	60f8      	str	r0, [r7, #12]
 800199a:	60b9      	str	r1, [r7, #8]
 800199c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	e00a      	b.n	80019ba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019a4:	f3af 8000 	nop.w
 80019a8:	4601      	mov	r1, r0
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	b2ca      	uxtb	r2, r1
 80019b2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	3301      	adds	r3, #1
 80019b8:	617b      	str	r3, [r7, #20]
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	dbf0      	blt.n	80019a4 <_read+0x12>
  }

  return len;
 80019c2:	687b      	ldr	r3, [r7, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}

080019cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b086      	sub	sp, #24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d8:	2300      	movs	r3, #0
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	e009      	b.n	80019f2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	1c5a      	adds	r2, r3, #1
 80019e2:	60ba      	str	r2, [r7, #8]
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fdda 	bl	80015a0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	3301      	adds	r3, #1
 80019f0:	617b      	str	r3, [r7, #20]
 80019f2:	697a      	ldr	r2, [r7, #20]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	dbf1      	blt.n	80019de <_write+0x12>
  }
  return len;
 80019fa:	687b      	ldr	r3, [r7, #4]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <_close>:

int _close(int file)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a2c:	605a      	str	r2, [r3, #4]
  return 0;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_isatty>:

int _isatty(int file)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a44:	2301      	movs	r3, #1
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr

08001a52 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b085      	sub	sp, #20
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	60f8      	str	r0, [r7, #12]
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a74:	4a14      	ldr	r2, [pc, #80]	@ (8001ac8 <_sbrk+0x5c>)
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <_sbrk+0x60>)
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a80:	4b13      	ldr	r3, [pc, #76]	@ (8001ad0 <_sbrk+0x64>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d102      	bne.n	8001a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a88:	4b11      	ldr	r3, [pc, #68]	@ (8001ad0 <_sbrk+0x64>)
 8001a8a:	4a12      	ldr	r2, [pc, #72]	@ (8001ad4 <_sbrk+0x68>)
 8001a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <_sbrk+0x64>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4413      	add	r3, r2
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	429a      	cmp	r2, r3
 8001a9a:	d207      	bcs.n	8001aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a9c:	f003 fd6a 	bl	8005574 <__errno>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8001aaa:	e009      	b.n	8001ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001aac:	4b08      	ldr	r3, [pc, #32]	@ (8001ad0 <_sbrk+0x64>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ab2:	4b07      	ldr	r3, [pc, #28]	@ (8001ad0 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	4a05      	ldr	r2, [pc, #20]	@ (8001ad0 <_sbrk+0x64>)
 8001abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001abe:	68fb      	ldr	r3, [r7, #12]
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3718      	adds	r7, #24
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20020000 	.word	0x20020000
 8001acc:	00000400 	.word	0x00000400
 8001ad0:	20000384 	.word	0x20000384
 8001ad4:	200004d8 	.word	0x200004d8

08001ad8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001adc:	4b06      	ldr	r3, [pc, #24]	@ (8001af8 <SystemInit+0x20>)
 8001ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae2:	4a05      	ldr	r2, [pc, #20]	@ (8001af8 <SystemInit+0x20>)
 8001ae4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ae8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <SysTickFunction>:
#include "main.h"
#include "pid.h"
#include "encoder.h"
#include "stdio.h"
float i=0;
void SysTickFunction(void) {
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
//			|| getRightEncoderCounts() < -31000 || getLeftEncoderCounts() < -31000) {
//		int16_t difference = getRightEncoderCounts() - getLeftEncoderCounts();
//		resetEncoders();
//		TIM1->CNT = (int16_t) difference;
//	}
}
 8001b00:	bf00      	nop
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b10:	f7ff ffe2 	bl	8001ad8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b14:	480c      	ldr	r0, [pc, #48]	@ (8001b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b16:	490d      	ldr	r1, [pc, #52]	@ (8001b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b18:	4a0d      	ldr	r2, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b1c:	e002      	b.n	8001b24 <LoopCopyDataInit>

08001b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b22:	3304      	adds	r3, #4

08001b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b28:	d3f9      	bcc.n	8001b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b30:	e001      	b.n	8001b36 <LoopFillZerobss>

08001b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b34:	3204      	adds	r2, #4

08001b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b38:	d3fb      	bcc.n	8001b32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001b3a:	f003 fd21 	bl	8005580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b3e:	f7ff fa05 	bl	8000f4c <main>
  bx  lr    
 8001b42:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001b50:	080076cc 	.word	0x080076cc
  ldr r2, =_sbss
 8001b54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001b58:	200004d8 	.word	0x200004d8

08001b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b5c:	e7fe      	b.n	8001b5c <ADC_IRQHandler>
	...

08001b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba0 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba0 <HAL_Init+0x40>)
 8001b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <HAL_Init+0x40>)
 8001b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a07      	ldr	r2, [pc, #28]	@ (8001ba0 <HAL_Init+0x40>)
 8001b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b88:	2003      	movs	r0, #3
 8001b8a:	f000 ffb7 	bl	8002afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b8e:	200f      	movs	r0, #15
 8001b90:	f000 f808 	bl	8001ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b94:	f7ff fd16 	bl	80015c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40023c00 	.word	0x40023c00

08001ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b082      	sub	sp, #8
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bac:	4b12      	ldr	r3, [pc, #72]	@ (8001bf8 <HAL_InitTick+0x54>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_InitTick+0x58>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f000 ffcf 	bl	8002b66 <HAL_SYSTICK_Config>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e00e      	b.n	8001bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b0f      	cmp	r3, #15
 8001bd6:	d80a      	bhi.n	8001bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bd8:	2200      	movs	r2, #0
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001be0:	f000 ff97 	bl	8002b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be4:	4a06      	ldr	r2, [pc, #24]	@ (8001c00 <HAL_InitTick+0x5c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bea:	2300      	movs	r3, #0
 8001bec:	e000      	b.n	8001bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	20000008 	.word	0x20000008
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c08:	4b06      	ldr	r3, [pc, #24]	@ (8001c24 <HAL_IncTick+0x20>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_IncTick+0x24>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4413      	add	r3, r2
 8001c14:	4a04      	ldr	r2, [pc, #16]	@ (8001c28 <HAL_IncTick+0x24>)
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	20000008 	.word	0x20000008
 8001c28:	20000388 	.word	0x20000388

08001c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_GetTick+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000388 	.word	0x20000388

08001c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c4c:	f7ff ffee 	bl	8001c2c <HAL_GetTick>
 8001c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c5c:	d005      	beq.n	8001c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c88 <HAL_Delay+0x44>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	461a      	mov	r2, r3
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	4413      	add	r3, r2
 8001c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c6a:	bf00      	nop
 8001c6c:	f7ff ffde 	bl	8001c2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d8f7      	bhi.n	8001c6c <HAL_Delay+0x28>
  {
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	3710      	adds	r7, #16
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	bf00      	nop
 8001c88:	20000008 	.word	0x20000008

08001c8c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d101      	bne.n	8001c9e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e0ed      	b.n	8001e7a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d102      	bne.n	8001cb0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fcb2 	bl	8001614 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cc0:	f7ff ffb4 	bl	8001c2c <HAL_GetTick>
 8001cc4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cc6:	e012      	b.n	8001cee <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cc8:	f7ff ffb0 	bl	8001c2c <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b0a      	cmp	r3, #10
 8001cd4:	d90b      	bls.n	8001cee <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cda:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2205      	movs	r2, #5
 8001ce6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e0c5      	b.n	8001e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0e5      	beq.n	8001cc8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f022 0202 	bic.w	r2, r2, #2
 8001d0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d0c:	f7ff ff8e 	bl	8001c2c <HAL_GetTick>
 8001d10:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d12:	e012      	b.n	8001d3a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d14:	f7ff ff8a 	bl	8001c2c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b0a      	cmp	r3, #10
 8001d20:	d90b      	bls.n	8001d3a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2205      	movs	r2, #5
 8001d32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e09f      	b.n	8001e7a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d1e5      	bne.n	8001d14 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	7e1b      	ldrb	r3, [r3, #24]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d108      	bne.n	8001d62 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d5e:	601a      	str	r2, [r3, #0]
 8001d60:	e007      	b.n	8001d72 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d70:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	7e5b      	ldrb	r3, [r3, #25]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d108      	bne.n	8001d8c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	e007      	b.n	8001d9c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	7e9b      	ldrb	r3, [r3, #26]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d108      	bne.n	8001db6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0220 	orr.w	r2, r2, #32
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	e007      	b.n	8001dc6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f022 0220 	bic.w	r2, r2, #32
 8001dc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	7edb      	ldrb	r3, [r3, #27]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d108      	bne.n	8001de0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f022 0210 	bic.w	r2, r2, #16
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	e007      	b.n	8001df0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0210 	orr.w	r2, r2, #16
 8001dee:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	7f1b      	ldrb	r3, [r3, #28]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d108      	bne.n	8001e0a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0208 	orr.w	r2, r2, #8
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	e007      	b.n	8001e1a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0208 	bic.w	r2, r2, #8
 8001e18:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	7f5b      	ldrb	r3, [r3, #29]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d108      	bne.n	8001e34 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f042 0204 	orr.w	r2, r2, #4
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0204 	bic.w	r2, r2, #4
 8001e42:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689a      	ldr	r2, [r3, #8]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	691b      	ldr	r3, [r3, #16]
 8001e52:	431a      	orrs	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	695b      	ldr	r3, [r3, #20]
 8001e58:	ea42 0103 	orr.w	r1, r2, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
	...

08001e84 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e9c:	7cfb      	ldrb	r3, [r7, #19]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d003      	beq.n	8001eaa <HAL_CAN_ConfigFilter+0x26>
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	f040 80be 	bne.w	8002026 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001eaa:	4b65      	ldr	r3, [pc, #404]	@ (8002040 <HAL_CAN_ConfigFilter+0x1bc>)
 8001eac:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001eb4:	f043 0201 	orr.w	r2, r3, #1
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ebe:	697b      	ldr	r3, [r7, #20]
 8001ec0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001ec4:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed8:	021b      	lsls	r3, r3, #8
 8001eda:	431a      	orrs	r2, r3
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2201      	movs	r2, #1
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	43db      	mvns	r3, r3
 8001efc:	401a      	ands	r2, r3
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	69db      	ldr	r3, [r3, #28]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d123      	bne.n	8001f54 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	43db      	mvns	r3, r3
 8001f16:	401a      	ands	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	68db      	ldr	r3, [r3, #12]
 8001f22:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f2e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	3248      	adds	r2, #72	@ 0x48
 8001f34:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f48:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f4a:	6979      	ldr	r1, [r7, #20]
 8001f4c:	3348      	adds	r3, #72	@ 0x48
 8001f4e:	00db      	lsls	r3, r3, #3
 8001f50:	440b      	add	r3, r1
 8001f52:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	69db      	ldr	r3, [r3, #28]
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d122      	bne.n	8001fa2 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	431a      	orrs	r2, r3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f7c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	3248      	adds	r2, #72	@ 0x48
 8001f82:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	68db      	ldr	r3, [r3, #12]
 8001f90:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f96:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f98:	6979      	ldr	r1, [r7, #20]
 8001f9a:	3348      	adds	r3, #72	@ 0x48
 8001f9c:	00db      	lsls	r3, r3, #3
 8001f9e:	440b      	add	r3, r1
 8001fa0:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	699b      	ldr	r3, [r3, #24]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d109      	bne.n	8001fbe <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43db      	mvns	r3, r3
 8001fb4:	401a      	ands	r2, r3
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001fbc:	e007      	b.n	8001fce <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d109      	bne.n	8001fea <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001fe8:	e007      	b.n	8001ffa <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d107      	bne.n	8002012 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	431a      	orrs	r2, r3
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002018:	f023 0201 	bic.w	r2, r3, #1
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002022:	2300      	movs	r3, #0
 8002024:	e006      	b.n	8002034 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800202a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
  }
}
 8002034:	4618      	mov	r0, r3
 8002036:	371c      	adds	r7, #28
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr
 8002040:	40006400 	.word	0x40006400

08002044 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b084      	sub	sp, #16
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d12e      	bne.n	80020b6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2202      	movs	r2, #2
 800205c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f022 0201 	bic.w	r2, r2, #1
 800206e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002070:	f7ff fddc 	bl	8001c2c <HAL_GetTick>
 8002074:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002076:	e012      	b.n	800209e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002078:	f7ff fdd8 	bl	8001c2c <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b0a      	cmp	r3, #10
 8002084:	d90b      	bls.n	800209e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2205      	movs	r2, #5
 8002096:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e012      	b.n	80020c4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1e5      	bne.n	8002078 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80020b2:	2300      	movs	r3, #0
 80020b4:	e006      	b.n	80020c4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ba:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
  }
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	3710      	adds	r7, #16
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
 80020d8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020e0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ea:	7ffb      	ldrb	r3, [r7, #31]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d003      	beq.n	80020f8 <HAL_CAN_AddTxMessage+0x2c>
 80020f0:	7ffb      	ldrb	r3, [r7, #31]
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	f040 80ad 	bne.w	8002252 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10a      	bne.n	8002118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002108:	2b00      	cmp	r3, #0
 800210a:	d105      	bne.n	8002118 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8095 	beq.w	8002242 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	0e1b      	lsrs	r3, r3, #24
 800211c:	f003 0303 	and.w	r3, r3, #3
 8002120:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002122:	2201      	movs	r2, #1
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10d      	bne.n	8002150 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800213e:	68f9      	ldr	r1, [r7, #12]
 8002140:	6809      	ldr	r1, [r1, #0]
 8002142:	431a      	orrs	r2, r3
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	3318      	adds	r3, #24
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	440b      	add	r3, r1
 800214c:	601a      	str	r2, [r3, #0]
 800214e:	e00f      	b.n	8002170 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800215a:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002160:	68f9      	ldr	r1, [r7, #12]
 8002162:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002164:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	3318      	adds	r3, #24
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	440b      	add	r3, r1
 800216e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6819      	ldr	r1, [r3, #0]
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3318      	adds	r3, #24
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	440b      	add	r3, r1
 8002180:	3304      	adds	r3, #4
 8002182:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	7d1b      	ldrb	r3, [r3, #20]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d111      	bne.n	80021b0 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	3318      	adds	r3, #24
 8002194:	011b      	lsls	r3, r3, #4
 8002196:	4413      	add	r3, r2
 8002198:	3304      	adds	r3, #4
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	6811      	ldr	r1, [r2, #0]
 80021a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3318      	adds	r3, #24
 80021a8:	011b      	lsls	r3, r3, #4
 80021aa:	440b      	add	r3, r1
 80021ac:	3304      	adds	r3, #4
 80021ae:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3307      	adds	r3, #7
 80021b4:	781b      	ldrb	r3, [r3, #0]
 80021b6:	061a      	lsls	r2, r3, #24
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3306      	adds	r3, #6
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3305      	adds	r3, #5
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	021b      	lsls	r3, r3, #8
 80021ca:	4313      	orrs	r3, r2
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	3204      	adds	r2, #4
 80021d0:	7812      	ldrb	r2, [r2, #0]
 80021d2:	4610      	mov	r0, r2
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	6811      	ldr	r1, [r2, #0]
 80021d8:	ea43 0200 	orr.w	r2, r3, r0
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	011b      	lsls	r3, r3, #4
 80021e0:	440b      	add	r3, r1
 80021e2:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80021e6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	3303      	adds	r3, #3
 80021ec:	781b      	ldrb	r3, [r3, #0]
 80021ee:	061a      	lsls	r2, r3, #24
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3302      	adds	r3, #2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	041b      	lsls	r3, r3, #16
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	3301      	adds	r3, #1
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	4313      	orrs	r3, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	7812      	ldrb	r2, [r2, #0]
 8002208:	4610      	mov	r0, r2
 800220a:	68fa      	ldr	r2, [r7, #12]
 800220c:	6811      	ldr	r1, [r2, #0]
 800220e:	ea43 0200 	orr.w	r2, r3, r0
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	440b      	add	r3, r1
 8002218:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 800221c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	3318      	adds	r3, #24
 8002226:	011b      	lsls	r3, r3, #4
 8002228:	4413      	add	r3, r2
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68fa      	ldr	r2, [r7, #12]
 800222e:	6811      	ldr	r1, [r2, #0]
 8002230:	f043 0201 	orr.w	r2, r3, #1
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	3318      	adds	r3, #24
 8002238:	011b      	lsls	r3, r3, #4
 800223a:	440b      	add	r3, r1
 800223c:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800223e:	2300      	movs	r3, #0
 8002240:	e00e      	b.n	8002260 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002246:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e006      	b.n	8002260 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
  }
}
 8002260:	4618      	mov	r0, r3
 8002262:	3724      	adds	r7, #36	@ 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800226c:	b480      	push	{r7}
 800226e:	b087      	sub	sp, #28
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
 8002278:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002280:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002282:	7dfb      	ldrb	r3, [r7, #23]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d003      	beq.n	8002290 <HAL_CAN_GetRxMessage+0x24>
 8002288:	7dfb      	ldrb	r3, [r7, #23]
 800228a:	2b02      	cmp	r3, #2
 800228c:	f040 8103 	bne.w	8002496 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d10e      	bne.n	80022b4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d116      	bne.n	80022d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e0f7      	b.n	80024a4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	f003 0303 	and.w	r3, r3, #3
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d107      	bne.n	80022d2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e0e8      	b.n	80024a4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	331b      	adds	r3, #27
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	4413      	add	r3, r2
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 0204 	and.w	r2, r3, #4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10c      	bne.n	800230a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	331b      	adds	r3, #27
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	4413      	add	r3, r2
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0d5b      	lsrs	r3, r3, #21
 8002300:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e00b      	b.n	8002322 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	331b      	adds	r3, #27
 8002312:	011b      	lsls	r3, r3, #4
 8002314:	4413      	add	r3, r2
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	08db      	lsrs	r3, r3, #3
 800231a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	331b      	adds	r3, #27
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	4413      	add	r3, r2
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0202 	and.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	331b      	adds	r3, #27
 8002340:	011b      	lsls	r3, r3, #4
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0308 	and.w	r3, r3, #8
 800234c:	2b00      	cmp	r3, #0
 800234e:	d003      	beq.n	8002358 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2208      	movs	r2, #8
 8002354:	611a      	str	r2, [r3, #16]
 8002356:	e00b      	b.n	8002370 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	331b      	adds	r3, #27
 8002360:	011b      	lsls	r3, r3, #4
 8002362:	4413      	add	r3, r2
 8002364:	3304      	adds	r3, #4
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 020f 	and.w	r2, r3, #15
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681a      	ldr	r2, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	331b      	adds	r3, #27
 8002378:	011b      	lsls	r3, r3, #4
 800237a:	4413      	add	r3, r2
 800237c:	3304      	adds	r3, #4
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0a1b      	lsrs	r3, r3, #8
 8002382:	b2da      	uxtb	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	331b      	adds	r3, #27
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	3304      	adds	r3, #4
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	0c1b      	lsrs	r3, r3, #16
 800239a:	b29a      	uxth	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	b2da      	uxtb	r2, r3
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	011b      	lsls	r3, r3, #4
 80023be:	4413      	add	r3, r2
 80023c0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	0a1a      	lsrs	r2, r3, #8
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	3301      	adds	r3, #1
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681a      	ldr	r2, [r3, #0]
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	4413      	add	r3, r2
 80023da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	0c1a      	lsrs	r2, r3, #16
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	3302      	adds	r3, #2
 80023e6:	b2d2      	uxtb	r2, r2
 80023e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	4413      	add	r3, r2
 80023f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	0e1a      	lsrs	r2, r3, #24
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	3303      	adds	r3, #3
 8002400:	b2d2      	uxtb	r2, r2
 8002402:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	011b      	lsls	r3, r3, #4
 800240c:	4413      	add	r3, r2
 800240e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	3304      	adds	r3, #4
 8002418:	b2d2      	uxtb	r2, r2
 800241a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681a      	ldr	r2, [r3, #0]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	4413      	add	r3, r2
 8002426:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	0a1a      	lsrs	r2, r3, #8
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	3305      	adds	r3, #5
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681a      	ldr	r2, [r3, #0]
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	011b      	lsls	r3, r3, #4
 800243e:	4413      	add	r3, r2
 8002440:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0c1a      	lsrs	r2, r3, #16
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	3306      	adds	r3, #6
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	011b      	lsls	r3, r3, #4
 8002458:	4413      	add	r3, r2
 800245a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	0e1a      	lsrs	r2, r3, #24
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	3307      	adds	r3, #7
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d108      	bne.n	8002482 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68da      	ldr	r2, [r3, #12]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0220 	orr.w	r2, r2, #32
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	e007      	b.n	8002492 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f042 0220 	orr.w	r2, r2, #32
 8002490:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002492:	2300      	movs	r3, #0
 8002494:	e006      	b.n	80024a4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
  }
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024c2:	7bfb      	ldrb	r3, [r7, #15]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d002      	beq.n	80024ce <HAL_CAN_ActivateNotification+0x1e>
 80024c8:	7bfb      	ldrb	r3, [r7, #15]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d109      	bne.n	80024e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6959      	ldr	r1, [r3, #20]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024de:	2300      	movs	r3, #0
 80024e0:	e006      	b.n	80024f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
  }
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b08a      	sub	sp, #40	@ 0x28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002504:	2300      	movs	r3, #0
 8002506:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002538:	6a3b      	ldr	r3, [r7, #32]
 800253a:	f003 0301 	and.w	r3, r3, #1
 800253e:	2b00      	cmp	r3, #0
 8002540:	d07c      	beq.n	800263c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b00      	cmp	r3, #0
 800254a:	d023      	beq.n	8002594 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2201      	movs	r2, #1
 8002552:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	f003 0302 	and.w	r3, r3, #2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d003      	beq.n	8002566 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f983 	bl	800286a <HAL_CAN_TxMailbox0CompleteCallback>
 8002564:	e016      	b.n	8002594 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d004      	beq.n	800257a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002576:	627b      	str	r3, [r7, #36]	@ 0x24
 8002578:	e00c      	b.n	8002594 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d004      	beq.n	800258e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002586:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800258a:	627b      	str	r3, [r7, #36]	@ 0x24
 800258c:	e002      	b.n	8002594 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 f989 	bl	80028a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259a:	2b00      	cmp	r3, #0
 800259c:	d024      	beq.n	80025e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f963 	bl	800287e <HAL_CAN_TxMailbox1CompleteCallback>
 80025b8:	e016      	b.n	80025e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d004      	beq.n	80025ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80025cc:	e00c      	b.n	80025e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d004      	beq.n	80025e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025de:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e0:	e002      	b.n	80025e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f969 	bl	80028ba <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025e8:	69bb      	ldr	r3, [r7, #24]
 80025ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d024      	beq.n	800263c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025fc:	69bb      	ldr	r3, [r7, #24]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f943 	bl	8002892 <HAL_CAN_TxMailbox2CompleteCallback>
 800260c:	e016      	b.n	800263c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002620:	e00c      	b.n	800263c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d004      	beq.n	8002636 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002632:	627b      	str	r3, [r7, #36]	@ 0x24
 8002634:	e002      	b.n	800263c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f949 	bl	80028ce <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800263c:	6a3b      	ldr	r3, [r7, #32]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f003 0310 	and.w	r3, r3, #16
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002652:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002656:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2210      	movs	r2, #16
 800265e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	f003 0304 	and.w	r3, r3, #4
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0308 	and.w	r3, r3, #8
 8002670:	2b00      	cmp	r3, #0
 8002672:	d006      	beq.n	8002682 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2208      	movs	r2, #8
 800267a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f000 f930 	bl	80028e2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002682:	6a3b      	ldr	r3, [r7, #32]
 8002684:	f003 0302 	and.w	r3, r3, #2
 8002688:	2b00      	cmp	r3, #0
 800268a:	d009      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68db      	ldr	r3, [r3, #12]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f7fe fc3a 	bl	8000f14 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80026a0:	6a3b      	ldr	r3, [r7, #32]
 80026a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d00c      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0310 	and.w	r3, r3, #16
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d007      	beq.n	80026c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026ba:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2210      	movs	r2, #16
 80026c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00b      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	f003 0308 	and.w	r3, r3, #8
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d006      	beq.n	80026e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2208      	movs	r2, #8
 80026de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f000 f912 	bl	800290a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026e6:	6a3b      	ldr	r3, [r7, #32]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d009      	beq.n	8002704 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d002      	beq.n	8002704 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f8f9 	bl	80028f6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00b      	beq.n	8002726 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	f003 0310 	and.w	r3, r3, #16
 8002714:	2b00      	cmp	r3, #0
 8002716:	d006      	beq.n	8002726 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	2210      	movs	r2, #16
 800271e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	f000 f8fc 	bl	800291e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00b      	beq.n	8002748 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	f003 0308 	and.w	r3, r3, #8
 8002736:	2b00      	cmp	r3, #0
 8002738:	d006      	beq.n	8002748 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2208      	movs	r2, #8
 8002740:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f8f5 	bl	8002932 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002748:	6a3b      	ldr	r3, [r7, #32]
 800274a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d07b      	beq.n	800284a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	2b00      	cmp	r3, #0
 800275a:	d072      	beq.n	8002842 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002772:	f043 0301 	orr.w	r3, r3, #1
 8002776:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002778:	6a3b      	ldr	r3, [r7, #32]
 800277a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800277e:	2b00      	cmp	r3, #0
 8002780:	d008      	beq.n	8002794 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002788:	2b00      	cmp	r3, #0
 800278a:	d003      	beq.n	8002794 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800278c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278e:	f043 0302 	orr.w	r3, r3, #2
 8002792:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800279a:	2b00      	cmp	r3, #0
 800279c:	d008      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d003      	beq.n	80027b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027aa:	f043 0304 	orr.w	r3, r3, #4
 80027ae:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027b0:	6a3b      	ldr	r3, [r7, #32]
 80027b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d043      	beq.n	8002842 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d03e      	beq.n	8002842 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027ca:	2b60      	cmp	r3, #96	@ 0x60
 80027cc:	d02b      	beq.n	8002826 <HAL_CAN_IRQHandler+0x32a>
 80027ce:	2b60      	cmp	r3, #96	@ 0x60
 80027d0:	d82e      	bhi.n	8002830 <HAL_CAN_IRQHandler+0x334>
 80027d2:	2b50      	cmp	r3, #80	@ 0x50
 80027d4:	d022      	beq.n	800281c <HAL_CAN_IRQHandler+0x320>
 80027d6:	2b50      	cmp	r3, #80	@ 0x50
 80027d8:	d82a      	bhi.n	8002830 <HAL_CAN_IRQHandler+0x334>
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d019      	beq.n	8002812 <HAL_CAN_IRQHandler+0x316>
 80027de:	2b40      	cmp	r3, #64	@ 0x40
 80027e0:	d826      	bhi.n	8002830 <HAL_CAN_IRQHandler+0x334>
 80027e2:	2b30      	cmp	r3, #48	@ 0x30
 80027e4:	d010      	beq.n	8002808 <HAL_CAN_IRQHandler+0x30c>
 80027e6:	2b30      	cmp	r3, #48	@ 0x30
 80027e8:	d822      	bhi.n	8002830 <HAL_CAN_IRQHandler+0x334>
 80027ea:	2b10      	cmp	r3, #16
 80027ec:	d002      	beq.n	80027f4 <HAL_CAN_IRQHandler+0x2f8>
 80027ee:	2b20      	cmp	r3, #32
 80027f0:	d005      	beq.n	80027fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027f2:	e01d      	b.n	8002830 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f6:	f043 0308 	orr.w	r3, r3, #8
 80027fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027fc:	e019      	b.n	8002832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002800:	f043 0310 	orr.w	r3, r3, #16
 8002804:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002806:	e014      	b.n	8002832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800280a:	f043 0320 	orr.w	r3, r3, #32
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002810:	e00f      	b.n	8002832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002814:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002818:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800281a:	e00a      	b.n	8002832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800281c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002822:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002824:	e005      	b.n	8002832 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800282c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800282e:	e000      	b.n	8002832 <HAL_CAN_IRQHandler+0x336>
            break;
 8002830:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002840:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2204      	movs	r2, #4
 8002848:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800284a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800284c:	2b00      	cmp	r3, #0
 800284e:	d008      	beq.n	8002862 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	f000 f872 	bl	8002946 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002862:	bf00      	nop
 8002864:	3728      	adds	r7, #40	@ 0x28
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002872:	bf00      	nop
 8002874:	370c      	adds	r7, #12
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr

0800287e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800287e:	b480      	push	{r7}
 8002880:	b083      	sub	sp, #12
 8002882:	af00      	add	r7, sp, #0
 8002884:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002890:	4770      	bx	lr

08002892 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr

080028f6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028fe:	bf00      	nop
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr

0800290a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4907      	ldr	r1, [pc, #28]	@ (80029f8 <__NVIC_EnableIRQ+0x38>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	e000e100 	.word	0xe000e100

080029fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	6039      	str	r1, [r7, #0]
 8002a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	db0a      	blt.n	8002a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	b2da      	uxtb	r2, r3
 8002a14:	490c      	ldr	r1, [pc, #48]	@ (8002a48 <__NVIC_SetPriority+0x4c>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	0112      	lsls	r2, r2, #4
 8002a1c:	b2d2      	uxtb	r2, r2
 8002a1e:	440b      	add	r3, r1
 8002a20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a24:	e00a      	b.n	8002a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	4908      	ldr	r1, [pc, #32]	@ (8002a4c <__NVIC_SetPriority+0x50>)
 8002a2c:	79fb      	ldrb	r3, [r7, #7]
 8002a2e:	f003 030f 	and.w	r3, r3, #15
 8002a32:	3b04      	subs	r3, #4
 8002a34:	0112      	lsls	r2, r2, #4
 8002a36:	b2d2      	uxtb	r2, r2
 8002a38:	440b      	add	r3, r1
 8002a3a:	761a      	strb	r2, [r3, #24]
}
 8002a3c:	bf00      	nop
 8002a3e:	370c      	adds	r7, #12
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000e100 	.word	0xe000e100
 8002a4c:	e000ed00 	.word	0xe000ed00

08002a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b089      	sub	sp, #36	@ 0x24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	f1c3 0307 	rsb	r3, r3, #7
 8002a6a:	2b04      	cmp	r3, #4
 8002a6c:	bf28      	it	cs
 8002a6e:	2304      	movcs	r3, #4
 8002a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	3304      	adds	r3, #4
 8002a76:	2b06      	cmp	r3, #6
 8002a78:	d902      	bls.n	8002a80 <NVIC_EncodePriority+0x30>
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	3b03      	subs	r3, #3
 8002a7e:	e000      	b.n	8002a82 <NVIC_EncodePriority+0x32>
 8002a80:	2300      	movs	r3, #0
 8002a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a84:	f04f 32ff 	mov.w	r2, #4294967295
 8002a88:	69bb      	ldr	r3, [r7, #24]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	43da      	mvns	r2, r3
 8002a90:	68bb      	ldr	r3, [r7, #8]
 8002a92:	401a      	ands	r2, r3
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a98:	f04f 31ff 	mov.w	r1, #4294967295
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002aa2:	43d9      	mvns	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa8:	4313      	orrs	r3, r2
         );
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3724      	adds	r7, #36	@ 0x24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac8:	d301      	bcc.n	8002ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aca:	2301      	movs	r3, #1
 8002acc:	e00f      	b.n	8002aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ace:	4a0a      	ldr	r2, [pc, #40]	@ (8002af8 <SysTick_Config+0x40>)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ad6:	210f      	movs	r1, #15
 8002ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8002adc:	f7ff ff8e 	bl	80029fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <SysTick_Config+0x40>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ae6:	4b04      	ldr	r3, [pc, #16]	@ (8002af8 <SysTick_Config+0x40>)
 8002ae8:	2207      	movs	r2, #7
 8002aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	4618      	mov	r0, r3
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	e000e010 	.word	0xe000e010

08002afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	f7ff ff29 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b0a:	bf00      	nop
 8002b0c:	3708      	adds	r7, #8
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b086      	sub	sp, #24
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	4603      	mov	r3, r0
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
 8002b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b24:	f7ff ff3e 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6978      	ldr	r0, [r7, #20]
 8002b30:	f7ff ff8e 	bl	8002a50 <NVIC_EncodePriority>
 8002b34:	4602      	mov	r2, r0
 8002b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff ff5d 	bl	80029fc <__NVIC_SetPriority>
}
 8002b42:	bf00      	nop
 8002b44:	3718      	adds	r7, #24
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b082      	sub	sp, #8
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	4603      	mov	r3, r0
 8002b52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f7ff ff31 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ffa2 	bl	8002ab8 <SysTick_Config>
 8002b74:	4603      	mov	r3, r0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3708      	adds	r7, #8
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bd80      	pop	{r7, pc}
	...

08002b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	@ 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b92:	2300      	movs	r3, #0
 8002b94:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b96:	2300      	movs	r3, #0
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	e165      	b.n	8002e68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	69fb      	ldr	r3, [r7, #28]
 8002ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	697a      	ldr	r2, [r7, #20]
 8002bac:	4013      	ands	r3, r2
 8002bae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	f040 8154 	bne.w	8002e62 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d005      	beq.n	8002bd2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d130      	bne.n	8002c34 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	2203      	movs	r2, #3
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	69ba      	ldr	r2, [r7, #24]
 8002be6:	4013      	ands	r3, r2
 8002be8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	69ba      	ldr	r2, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c08:	2201      	movs	r2, #1
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c10:	43db      	mvns	r3, r3
 8002c12:	69ba      	ldr	r2, [r7, #24]
 8002c14:	4013      	ands	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	091b      	lsrs	r3, r3, #4
 8002c1e:	f003 0201 	and.w	r2, r3, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f003 0303 	and.w	r3, r3, #3
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d017      	beq.n	8002c70 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	2203      	movs	r2, #3
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	689a      	ldr	r2, [r3, #8]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b02      	cmp	r3, #2
 8002c7a:	d123      	bne.n	8002cc4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	08da      	lsrs	r2, r3, #3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	3208      	adds	r2, #8
 8002c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c88:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	f003 0307 	and.w	r3, r3, #7
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	220f      	movs	r2, #15
 8002c94:	fa02 f303 	lsl.w	r3, r2, r3
 8002c98:	43db      	mvns	r3, r3
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691a      	ldr	r2, [r3, #16]
 8002ca4:	69fb      	ldr	r3, [r7, #28]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	009b      	lsls	r3, r3, #2
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	69ba      	ldr	r2, [r7, #24]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	08da      	lsrs	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	3208      	adds	r2, #8
 8002cbe:	69b9      	ldr	r1, [r7, #24]
 8002cc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	2203      	movs	r2, #3
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 0203 	and.w	r2, r3, #3
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	f000 80ae 	beq.w	8002e62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d06:	2300      	movs	r3, #0
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	4b5d      	ldr	r3, [pc, #372]	@ (8002e80 <HAL_GPIO_Init+0x300>)
 8002d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002e80 <HAL_GPIO_Init+0x300>)
 8002d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d16:	4b5a      	ldr	r3, [pc, #360]	@ (8002e80 <HAL_GPIO_Init+0x300>)
 8002d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d22:	4a58      	ldr	r2, [pc, #352]	@ (8002e84 <HAL_GPIO_Init+0x304>)
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	089b      	lsrs	r3, r3, #2
 8002d28:	3302      	adds	r3, #2
 8002d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	f003 0303 	and.w	r3, r3, #3
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	220f      	movs	r2, #15
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	43db      	mvns	r3, r3
 8002d40:	69ba      	ldr	r2, [r7, #24]
 8002d42:	4013      	ands	r3, r2
 8002d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a4f      	ldr	r2, [pc, #316]	@ (8002e88 <HAL_GPIO_Init+0x308>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d025      	beq.n	8002d9a <HAL_GPIO_Init+0x21a>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a4e      	ldr	r2, [pc, #312]	@ (8002e8c <HAL_GPIO_Init+0x30c>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d01f      	beq.n	8002d96 <HAL_GPIO_Init+0x216>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a4d      	ldr	r2, [pc, #308]	@ (8002e90 <HAL_GPIO_Init+0x310>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d019      	beq.n	8002d92 <HAL_GPIO_Init+0x212>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4c      	ldr	r2, [pc, #304]	@ (8002e94 <HAL_GPIO_Init+0x314>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d013      	beq.n	8002d8e <HAL_GPIO_Init+0x20e>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4b      	ldr	r2, [pc, #300]	@ (8002e98 <HAL_GPIO_Init+0x318>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00d      	beq.n	8002d8a <HAL_GPIO_Init+0x20a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4a      	ldr	r2, [pc, #296]	@ (8002e9c <HAL_GPIO_Init+0x31c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <HAL_GPIO_Init+0x206>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a49      	ldr	r2, [pc, #292]	@ (8002ea0 <HAL_GPIO_Init+0x320>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d101      	bne.n	8002d82 <HAL_GPIO_Init+0x202>
 8002d7e:	2306      	movs	r3, #6
 8002d80:	e00c      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d82:	2307      	movs	r3, #7
 8002d84:	e00a      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d86:	2305      	movs	r3, #5
 8002d88:	e008      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	e006      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e004      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d92:	2302      	movs	r3, #2
 8002d94:	e002      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d96:	2301      	movs	r3, #1
 8002d98:	e000      	b.n	8002d9c <HAL_GPIO_Init+0x21c>
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	69fa      	ldr	r2, [r7, #28]
 8002d9e:	f002 0203 	and.w	r2, r2, #3
 8002da2:	0092      	lsls	r2, r2, #2
 8002da4:	4093      	lsls	r3, r2
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dac:	4935      	ldr	r1, [pc, #212]	@ (8002e84 <HAL_GPIO_Init+0x304>)
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	089b      	lsrs	r3, r3, #2
 8002db2:	3302      	adds	r3, #2
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dba:	4b3a      	ldr	r3, [pc, #232]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	43db      	mvns	r3, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d003      	beq.n	8002dde <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002dde:	4a31      	ldr	r2, [pc, #196]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002de0:	69bb      	ldr	r3, [r7, #24]
 8002de2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de4:	4b2f      	ldr	r3, [pc, #188]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e08:	4a26      	ldr	r2, [pc, #152]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e0e:	4b25      	ldr	r3, [pc, #148]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d003      	beq.n	8002e32 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e5c:	4a11      	ldr	r2, [pc, #68]	@ (8002ea4 <HAL_GPIO_Init+0x324>)
 8002e5e:	69bb      	ldr	r3, [r7, #24]
 8002e60:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	3301      	adds	r3, #1
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b0f      	cmp	r3, #15
 8002e6c:	f67f ae96 	bls.w	8002b9c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	3724      	adds	r7, #36	@ 0x24
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	40023800 	.word	0x40023800
 8002e84:	40013800 	.word	0x40013800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	40020400 	.word	0x40020400
 8002e90:	40020800 	.word	0x40020800
 8002e94:	40020c00 	.word	0x40020c00
 8002e98:	40021000 	.word	0x40021000
 8002e9c:	40021400 	.word	0x40021400
 8002ea0:	40021800 	.word	0x40021800
 8002ea4:	40013c00 	.word	0x40013c00

08002ea8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	807b      	strh	r3, [r7, #2]
 8002eb4:	4613      	mov	r3, r2
 8002eb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002eb8:	787b      	ldrb	r3, [r7, #1]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ebe:	887a      	ldrh	r2, [r7, #2]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ec4:	e003      	b.n	8002ece <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ec6:	887b      	ldrh	r3, [r7, #2]
 8002ec8:	041a      	lsls	r2, r3, #16
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	619a      	str	r2, [r3, #24]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr

08002eda <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002eec:	887a      	ldrh	r2, [r7, #2]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	041a      	lsls	r2, r3, #16
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	43d9      	mvns	r1, r3
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	400b      	ands	r3, r1
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	619a      	str	r2, [r3, #24]
}
 8002f02:	bf00      	nop
 8002f04:	3714      	adds	r7, #20
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0cc      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f24:	4b68      	ldr	r3, [pc, #416]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 030f 	and.w	r3, r3, #15
 8002f2c:	683a      	ldr	r2, [r7, #0]
 8002f2e:	429a      	cmp	r2, r3
 8002f30:	d90c      	bls.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f32:	4b65      	ldr	r3, [pc, #404]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	b2d2      	uxtb	r2, r2
 8002f38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3a:	4b63      	ldr	r3, [pc, #396]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	683a      	ldr	r2, [r7, #0]
 8002f44:	429a      	cmp	r2, r3
 8002f46:	d001      	beq.n	8002f4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0b8      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d020      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d005      	beq.n	8002f70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f64:	4b59      	ldr	r3, [pc, #356]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	4a58      	ldr	r2, [pc, #352]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002f6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d005      	beq.n	8002f88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f7c:	4b53      	ldr	r3, [pc, #332]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	4a52      	ldr	r2, [pc, #328]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002f86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b50      	ldr	r3, [pc, #320]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	494d      	ldr	r1, [pc, #308]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d044      	beq.n	8003030 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d107      	bne.n	8002fbe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fae:	4b47      	ldr	r3, [pc, #284]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d119      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e07f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d003      	beq.n	8002fce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002fca:	2b03      	cmp	r3, #3
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fce:	4b3f      	ldr	r3, [pc, #252]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d109      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fde:	4b3b      	ldr	r3, [pc, #236]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0302 	and.w	r3, r3, #2
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e067      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002fee:	4b37      	ldr	r3, [pc, #220]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 0203 	bic.w	r2, r3, #3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	4934      	ldr	r1, [pc, #208]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003000:	f7fe fe14 	bl	8001c2c <HAL_GetTick>
 8003004:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003006:	e00a      	b.n	800301e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003008:	f7fe fe10 	bl	8001c2c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003016:	4293      	cmp	r3, r2
 8003018:	d901      	bls.n	800301e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e04f      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	4b2b      	ldr	r3, [pc, #172]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f003 020c 	and.w	r2, r3, #12
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	429a      	cmp	r2, r3
 800302e:	d1eb      	bne.n	8003008 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003030:	4b25      	ldr	r3, [pc, #148]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 030f 	and.w	r3, r3, #15
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d20c      	bcs.n	8003058 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800303e:	4b22      	ldr	r3, [pc, #136]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	b2d2      	uxtb	r2, r2
 8003044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003046:	4b20      	ldr	r3, [pc, #128]	@ (80030c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	683a      	ldr	r2, [r7, #0]
 8003050:	429a      	cmp	r2, r3
 8003052:	d001      	beq.n	8003058 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e032      	b.n	80030be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	2b00      	cmp	r3, #0
 8003062:	d008      	beq.n	8003076 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003064:	4b19      	ldr	r3, [pc, #100]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4916      	ldr	r1, [pc, #88]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003072:	4313      	orrs	r3, r2
 8003074:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0308 	and.w	r3, r3, #8
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003082:	4b12      	ldr	r3, [pc, #72]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	691b      	ldr	r3, [r3, #16]
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	490e      	ldr	r1, [pc, #56]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 8003092:	4313      	orrs	r3, r2
 8003094:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003096:	f000 f821 	bl	80030dc <HAL_RCC_GetSysClockFreq>
 800309a:	4602      	mov	r2, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x1bc>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 030f 	and.w	r3, r3, #15
 80030a6:	490a      	ldr	r1, [pc, #40]	@ (80030d0 <HAL_RCC_ClockConfig+0x1c0>)
 80030a8:	5ccb      	ldrb	r3, [r1, r3]
 80030aa:	fa22 f303 	lsr.w	r3, r2, r3
 80030ae:	4a09      	ldr	r2, [pc, #36]	@ (80030d4 <HAL_RCC_ClockConfig+0x1c4>)
 80030b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80030b2:	4b09      	ldr	r3, [pc, #36]	@ (80030d8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4618      	mov	r0, r3
 80030b8:	f7fe fd74 	bl	8001ba4 <HAL_InitTick>

  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3710      	adds	r7, #16
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40023c00 	.word	0x40023c00
 80030cc:	40023800 	.word	0x40023800
 80030d0:	08007338 	.word	0x08007338
 80030d4:	20000000 	.word	0x20000000
 80030d8:	20000004 	.word	0x20000004

080030dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80030e0:	b0ae      	sub	sp, #184	@ 0xb8
 80030e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80030e4:	2300      	movs	r3, #0
 80030e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80030ea:	2300      	movs	r3, #0
 80030ec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003102:	4bcb      	ldr	r3, [pc, #812]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f003 030c 	and.w	r3, r3, #12
 800310a:	2b0c      	cmp	r3, #12
 800310c:	f200 8204 	bhi.w	8003518 <HAL_RCC_GetSysClockFreq+0x43c>
 8003110:	a201      	add	r2, pc, #4	@ (adr r2, 8003118 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003116:	bf00      	nop
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003519 	.word	0x08003519
 8003120:	08003519 	.word	0x08003519
 8003124:	08003519 	.word	0x08003519
 8003128:	08003155 	.word	0x08003155
 800312c:	08003519 	.word	0x08003519
 8003130:	08003519 	.word	0x08003519
 8003134:	08003519 	.word	0x08003519
 8003138:	0800315d 	.word	0x0800315d
 800313c:	08003519 	.word	0x08003519
 8003140:	08003519 	.word	0x08003519
 8003144:	08003519 	.word	0x08003519
 8003148:	0800334d 	.word	0x0800334d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800314c:	4bb9      	ldr	r3, [pc, #740]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x358>)
 800314e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003152:	e1e5      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003154:	4bb7      	ldr	r3, [pc, #732]	@ (8003434 <HAL_RCC_GetSysClockFreq+0x358>)
 8003156:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800315a:	e1e1      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800315c:	4bb4      	ldr	r3, [pc, #720]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003164:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003168:	4bb1      	ldr	r3, [pc, #708]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d071      	beq.n	8003258 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003174:	4bae      	ldr	r3, [pc, #696]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	099b      	lsrs	r3, r3, #6
 800317a:	2200      	movs	r2, #0
 800317c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003180:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003184:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003190:	2300      	movs	r3, #0
 8003192:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003196:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800319a:	4622      	mov	r2, r4
 800319c:	462b      	mov	r3, r5
 800319e:	f04f 0000 	mov.w	r0, #0
 80031a2:	f04f 0100 	mov.w	r1, #0
 80031a6:	0159      	lsls	r1, r3, #5
 80031a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031ac:	0150      	lsls	r0, r2, #5
 80031ae:	4602      	mov	r2, r0
 80031b0:	460b      	mov	r3, r1
 80031b2:	4621      	mov	r1, r4
 80031b4:	1a51      	subs	r1, r2, r1
 80031b6:	6439      	str	r1, [r7, #64]	@ 0x40
 80031b8:	4629      	mov	r1, r5
 80031ba:	eb63 0301 	sbc.w	r3, r3, r1
 80031be:	647b      	str	r3, [r7, #68]	@ 0x44
 80031c0:	f04f 0200 	mov.w	r2, #0
 80031c4:	f04f 0300 	mov.w	r3, #0
 80031c8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80031cc:	4649      	mov	r1, r9
 80031ce:	018b      	lsls	r3, r1, #6
 80031d0:	4641      	mov	r1, r8
 80031d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031d6:	4641      	mov	r1, r8
 80031d8:	018a      	lsls	r2, r1, #6
 80031da:	4641      	mov	r1, r8
 80031dc:	1a51      	subs	r1, r2, r1
 80031de:	63b9      	str	r1, [r7, #56]	@ 0x38
 80031e0:	4649      	mov	r1, r9
 80031e2:	eb63 0301 	sbc.w	r3, r3, r1
 80031e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031e8:	f04f 0200 	mov.w	r2, #0
 80031ec:	f04f 0300 	mov.w	r3, #0
 80031f0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80031f4:	4649      	mov	r1, r9
 80031f6:	00cb      	lsls	r3, r1, #3
 80031f8:	4641      	mov	r1, r8
 80031fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80031fe:	4641      	mov	r1, r8
 8003200:	00ca      	lsls	r2, r1, #3
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	4603      	mov	r3, r0
 8003208:	4622      	mov	r2, r4
 800320a:	189b      	adds	r3, r3, r2
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
 800320e:	462b      	mov	r3, r5
 8003210:	460a      	mov	r2, r1
 8003212:	eb42 0303 	adc.w	r3, r2, r3
 8003216:	637b      	str	r3, [r7, #52]	@ 0x34
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	f04f 0300 	mov.w	r3, #0
 8003220:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003224:	4629      	mov	r1, r5
 8003226:	028b      	lsls	r3, r1, #10
 8003228:	4621      	mov	r1, r4
 800322a:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800322e:	4621      	mov	r1, r4
 8003230:	028a      	lsls	r2, r1, #10
 8003232:	4610      	mov	r0, r2
 8003234:	4619      	mov	r1, r3
 8003236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800323a:	2200      	movs	r2, #0
 800323c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003240:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003244:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003248:	f7fd fcce 	bl	8000be8 <__aeabi_uldivmod>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4613      	mov	r3, r2
 8003252:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003256:	e067      	b.n	8003328 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003258:	4b75      	ldr	r3, [pc, #468]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	099b      	lsrs	r3, r3, #6
 800325e:	2200      	movs	r2, #0
 8003260:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003264:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003268:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800326c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003272:	2300      	movs	r3, #0
 8003274:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003276:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800327a:	4622      	mov	r2, r4
 800327c:	462b      	mov	r3, r5
 800327e:	f04f 0000 	mov.w	r0, #0
 8003282:	f04f 0100 	mov.w	r1, #0
 8003286:	0159      	lsls	r1, r3, #5
 8003288:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800328c:	0150      	lsls	r0, r2, #5
 800328e:	4602      	mov	r2, r0
 8003290:	460b      	mov	r3, r1
 8003292:	4621      	mov	r1, r4
 8003294:	1a51      	subs	r1, r2, r1
 8003296:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003298:	4629      	mov	r1, r5
 800329a:	eb63 0301 	sbc.w	r3, r3, r1
 800329e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80032a0:	f04f 0200 	mov.w	r2, #0
 80032a4:	f04f 0300 	mov.w	r3, #0
 80032a8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80032ac:	4649      	mov	r1, r9
 80032ae:	018b      	lsls	r3, r1, #6
 80032b0:	4641      	mov	r1, r8
 80032b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b6:	4641      	mov	r1, r8
 80032b8:	018a      	lsls	r2, r1, #6
 80032ba:	4641      	mov	r1, r8
 80032bc:	ebb2 0a01 	subs.w	sl, r2, r1
 80032c0:	4649      	mov	r1, r9
 80032c2:	eb63 0b01 	sbc.w	fp, r3, r1
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80032d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80032d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032da:	4692      	mov	sl, r2
 80032dc:	469b      	mov	fp, r3
 80032de:	4623      	mov	r3, r4
 80032e0:	eb1a 0303 	adds.w	r3, sl, r3
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	462b      	mov	r3, r5
 80032e8:	eb4b 0303 	adc.w	r3, fp, r3
 80032ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80032ee:	f04f 0200 	mov.w	r2, #0
 80032f2:	f04f 0300 	mov.w	r3, #0
 80032f6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80032fa:	4629      	mov	r1, r5
 80032fc:	028b      	lsls	r3, r1, #10
 80032fe:	4621      	mov	r1, r4
 8003300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003304:	4621      	mov	r1, r4
 8003306:	028a      	lsls	r2, r1, #10
 8003308:	4610      	mov	r0, r2
 800330a:	4619      	mov	r1, r3
 800330c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003310:	2200      	movs	r2, #0
 8003312:	673b      	str	r3, [r7, #112]	@ 0x70
 8003314:	677a      	str	r2, [r7, #116]	@ 0x74
 8003316:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800331a:	f7fd fc65 	bl	8000be8 <__aeabi_uldivmod>
 800331e:	4602      	mov	r2, r0
 8003320:	460b      	mov	r3, r1
 8003322:	4613      	mov	r3, r2
 8003324:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003328:	4b41      	ldr	r3, [pc, #260]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	f003 0303 	and.w	r3, r3, #3
 8003332:	3301      	adds	r3, #1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800333a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800333e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800334a:	e0e9      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800334c:	4b38      	ldr	r3, [pc, #224]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003354:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003358:	4b35      	ldr	r3, [pc, #212]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d069      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x35c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003364:	4b32      	ldr	r3, [pc, #200]	@ (8003430 <HAL_RCC_GetSysClockFreq+0x354>)
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	099b      	lsrs	r3, r3, #6
 800336a:	2200      	movs	r2, #0
 800336c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800336e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003370:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	663b      	str	r3, [r7, #96]	@ 0x60
 8003378:	2300      	movs	r3, #0
 800337a:	667b      	str	r3, [r7, #100]	@ 0x64
 800337c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003380:	4622      	mov	r2, r4
 8003382:	462b      	mov	r3, r5
 8003384:	f04f 0000 	mov.w	r0, #0
 8003388:	f04f 0100 	mov.w	r1, #0
 800338c:	0159      	lsls	r1, r3, #5
 800338e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003392:	0150      	lsls	r0, r2, #5
 8003394:	4602      	mov	r2, r0
 8003396:	460b      	mov	r3, r1
 8003398:	4621      	mov	r1, r4
 800339a:	1a51      	subs	r1, r2, r1
 800339c:	61b9      	str	r1, [r7, #24]
 800339e:	4629      	mov	r1, r5
 80033a0:	eb63 0301 	sbc.w	r3, r3, r1
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	f04f 0300 	mov.w	r3, #0
 80033ae:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80033b2:	4659      	mov	r1, fp
 80033b4:	018b      	lsls	r3, r1, #6
 80033b6:	4651      	mov	r1, sl
 80033b8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033bc:	4651      	mov	r1, sl
 80033be:	018a      	lsls	r2, r1, #6
 80033c0:	4651      	mov	r1, sl
 80033c2:	ebb2 0801 	subs.w	r8, r2, r1
 80033c6:	4659      	mov	r1, fp
 80033c8:	eb63 0901 	sbc.w	r9, r3, r1
 80033cc:	f04f 0200 	mov.w	r2, #0
 80033d0:	f04f 0300 	mov.w	r3, #0
 80033d4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033d8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033dc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033e0:	4690      	mov	r8, r2
 80033e2:	4699      	mov	r9, r3
 80033e4:	4623      	mov	r3, r4
 80033e6:	eb18 0303 	adds.w	r3, r8, r3
 80033ea:	613b      	str	r3, [r7, #16]
 80033ec:	462b      	mov	r3, r5
 80033ee:	eb49 0303 	adc.w	r3, r9, r3
 80033f2:	617b      	str	r3, [r7, #20]
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	f04f 0300 	mov.w	r3, #0
 80033fc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003400:	4629      	mov	r1, r5
 8003402:	028b      	lsls	r3, r1, #10
 8003404:	4621      	mov	r1, r4
 8003406:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800340a:	4621      	mov	r1, r4
 800340c:	028a      	lsls	r2, r1, #10
 800340e:	4610      	mov	r0, r2
 8003410:	4619      	mov	r1, r3
 8003412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003416:	2200      	movs	r2, #0
 8003418:	65bb      	str	r3, [r7, #88]	@ 0x58
 800341a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800341c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003420:	f7fd fbe2 	bl	8000be8 <__aeabi_uldivmod>
 8003424:	4602      	mov	r2, r0
 8003426:	460b      	mov	r3, r1
 8003428:	4613      	mov	r3, r2
 800342a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800342e:	e063      	b.n	80034f8 <HAL_RCC_GetSysClockFreq+0x41c>
 8003430:	40023800 	.word	0x40023800
 8003434:	00f42400 	.word	0x00f42400
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003438:	4b3d      	ldr	r3, [pc, #244]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x454>)
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	099b      	lsrs	r3, r3, #6
 800343e:	2200      	movs	r2, #0
 8003440:	4618      	mov	r0, r3
 8003442:	4611      	mov	r1, r2
 8003444:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003448:	653b      	str	r3, [r7, #80]	@ 0x50
 800344a:	2300      	movs	r3, #0
 800344c:	657b      	str	r3, [r7, #84]	@ 0x54
 800344e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8003452:	4642      	mov	r2, r8
 8003454:	464b      	mov	r3, r9
 8003456:	f04f 0000 	mov.w	r0, #0
 800345a:	f04f 0100 	mov.w	r1, #0
 800345e:	0159      	lsls	r1, r3, #5
 8003460:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003464:	0150      	lsls	r0, r2, #5
 8003466:	4602      	mov	r2, r0
 8003468:	460b      	mov	r3, r1
 800346a:	4641      	mov	r1, r8
 800346c:	1a51      	subs	r1, r2, r1
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	4649      	mov	r1, r9
 8003472:	eb63 0301 	sbc.w	r3, r3, r1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003484:	4659      	mov	r1, fp
 8003486:	018b      	lsls	r3, r1, #6
 8003488:	4651      	mov	r1, sl
 800348a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800348e:	4651      	mov	r1, sl
 8003490:	018a      	lsls	r2, r1, #6
 8003492:	4651      	mov	r1, sl
 8003494:	1a54      	subs	r4, r2, r1
 8003496:	4659      	mov	r1, fp
 8003498:	eb63 0501 	sbc.w	r5, r3, r1
 800349c:	f04f 0200 	mov.w	r2, #0
 80034a0:	f04f 0300 	mov.w	r3, #0
 80034a4:	00eb      	lsls	r3, r5, #3
 80034a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034aa:	00e2      	lsls	r2, r4, #3
 80034ac:	4614      	mov	r4, r2
 80034ae:	461d      	mov	r5, r3
 80034b0:	4643      	mov	r3, r8
 80034b2:	18e3      	adds	r3, r4, r3
 80034b4:	603b      	str	r3, [r7, #0]
 80034b6:	464b      	mov	r3, r9
 80034b8:	eb45 0303 	adc.w	r3, r5, r3
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	f04f 0300 	mov.w	r3, #0
 80034c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ca:	4629      	mov	r1, r5
 80034cc:	028b      	lsls	r3, r1, #10
 80034ce:	4621      	mov	r1, r4
 80034d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034d4:	4621      	mov	r1, r4
 80034d6:	028a      	lsls	r2, r1, #10
 80034d8:	4610      	mov	r0, r2
 80034da:	4619      	mov	r1, r3
 80034dc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80034e0:	2200      	movs	r2, #0
 80034e2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034e4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80034e6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80034ea:	f7fd fb7d 	bl	8000be8 <__aeabi_uldivmod>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4613      	mov	r3, r2
 80034f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80034f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x454>)
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	0f1b      	lsrs	r3, r3, #28
 80034fe:	f003 0307 	and.w	r3, r3, #7
 8003502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8003506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800350a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800350e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003512:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003516:	e003      	b.n	8003520 <HAL_RCC_GetSysClockFreq+0x444>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b06      	ldr	r3, [pc, #24]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x458>)
 800351a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800351e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8003524:	4618      	mov	r0, r3
 8003526:	37b8      	adds	r7, #184	@ 0xb8
 8003528:	46bd      	mov	sp, r7
 800352a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352e:	bf00      	nop
 8003530:	40023800 	.word	0x40023800
 8003534:	00f42400 	.word	0x00f42400

08003538 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d101      	bne.n	800354a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e28d      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	f000 8083 	beq.w	800365e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003558:	4b94      	ldr	r3, [pc, #592]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f003 030c 	and.w	r3, r3, #12
 8003560:	2b04      	cmp	r3, #4
 8003562:	d019      	beq.n	8003598 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003564:	4b91      	ldr	r3, [pc, #580]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 030c 	and.w	r3, r3, #12
        || \
 800356c:	2b08      	cmp	r3, #8
 800356e:	d106      	bne.n	800357e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003570:	4b8e      	ldr	r3, [pc, #568]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003578:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800357c:	d00c      	beq.n	8003598 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800357e:	4b8b      	ldr	r3, [pc, #556]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8003586:	2b0c      	cmp	r3, #12
 8003588:	d112      	bne.n	80035b0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800358a:	4b88      	ldr	r3, [pc, #544]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003592:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003596:	d10b      	bne.n	80035b0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003598:	4b84      	ldr	r3, [pc, #528]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d05b      	beq.n	800365c <HAL_RCC_OscConfig+0x124>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d157      	bne.n	800365c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e25a      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035b8:	d106      	bne.n	80035c8 <HAL_RCC_OscConfig+0x90>
 80035ba:	4b7c      	ldr	r3, [pc, #496]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a7b      	ldr	r2, [pc, #492]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e01d      	b.n	8003604 <HAL_RCC_OscConfig+0xcc>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035d0:	d10c      	bne.n	80035ec <HAL_RCC_OscConfig+0xb4>
 80035d2:	4b76      	ldr	r3, [pc, #472]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a75      	ldr	r2, [pc, #468]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035dc:	6013      	str	r3, [r2, #0]
 80035de:	4b73      	ldr	r3, [pc, #460]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a72      	ldr	r2, [pc, #456]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035e8:	6013      	str	r3, [r2, #0]
 80035ea:	e00b      	b.n	8003604 <HAL_RCC_OscConfig+0xcc>
 80035ec:	4b6f      	ldr	r3, [pc, #444]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a6e      	ldr	r2, [pc, #440]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	4b6c      	ldr	r3, [pc, #432]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a6b      	ldr	r2, [pc, #428]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80035fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360c:	f7fe fb0e 	bl	8001c2c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fb0a 	bl	8001c2c <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e21f      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003626:	4b61      	ldr	r3, [pc, #388]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d0f0      	beq.n	8003614 <HAL_RCC_OscConfig+0xdc>
 8003632:	e014      	b.n	800365e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003634:	f7fe fafa 	bl	8001c2c <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800363a:	e008      	b.n	800364e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800363c:	f7fe faf6 	bl	8001c2c <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b64      	cmp	r3, #100	@ 0x64
 8003648:	d901      	bls.n	800364e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e20b      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800364e:	4b57      	ldr	r3, [pc, #348]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1f0      	bne.n	800363c <HAL_RCC_OscConfig+0x104>
 800365a:	e000      	b.n	800365e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800365c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d06f      	beq.n	800374a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800366a:	4b50      	ldr	r3, [pc, #320]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800366c:	689b      	ldr	r3, [r3, #8]
 800366e:	f003 030c 	and.w	r3, r3, #12
 8003672:	2b00      	cmp	r3, #0
 8003674:	d017      	beq.n	80036a6 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003676:	4b4d      	ldr	r3, [pc, #308]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
        || \
 800367e:	2b08      	cmp	r3, #8
 8003680:	d105      	bne.n	800368e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003682:	4b4a      	ldr	r3, [pc, #296]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d00b      	beq.n	80036a6 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800368e:	4b47      	ldr	r3, [pc, #284]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d11c      	bne.n	80036d4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800369a:	4b44      	ldr	r3, [pc, #272]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d116      	bne.n	80036d4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036a6:	4b41      	ldr	r3, [pc, #260]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_RCC_OscConfig+0x186>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	2b01      	cmp	r3, #1
 80036b8:	d001      	beq.n	80036be <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e1d3      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036be:	4b3b      	ldr	r3, [pc, #236]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	4937      	ldr	r1, [pc, #220]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036d2:	e03a      	b.n	800374a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d020      	beq.n	800371e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80036dc:	4b34      	ldr	r3, [pc, #208]	@ (80037b0 <HAL_RCC_OscConfig+0x278>)
 80036de:	2201      	movs	r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e2:	f7fe faa3 	bl	8001c2c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036e8:	e008      	b.n	80036fc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ea:	f7fe fa9f 	bl	8001c2c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	2b02      	cmp	r3, #2
 80036f6:	d901      	bls.n	80036fc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80036f8:	2303      	movs	r3, #3
 80036fa:	e1b4      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036fc:	4b2b      	ldr	r3, [pc, #172]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b00      	cmp	r3, #0
 8003706:	d0f0      	beq.n	80036ea <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003708:	4b28      	ldr	r3, [pc, #160]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	691b      	ldr	r3, [r3, #16]
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	4925      	ldr	r1, [pc, #148]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003718:	4313      	orrs	r3, r2
 800371a:	600b      	str	r3, [r1, #0]
 800371c:	e015      	b.n	800374a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800371e:	4b24      	ldr	r3, [pc, #144]	@ (80037b0 <HAL_RCC_OscConfig+0x278>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003724:	f7fe fa82 	bl	8001c2c <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800372c:	f7fe fa7e 	bl	8001c2c <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e193      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800373e:	4b1b      	ldr	r3, [pc, #108]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1f0      	bne.n	800372c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f003 0308 	and.w	r3, r3, #8
 8003752:	2b00      	cmp	r3, #0
 8003754:	d036      	beq.n	80037c4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	695b      	ldr	r3, [r3, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d016      	beq.n	800378c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800375e:	4b15      	ldr	r3, [pc, #84]	@ (80037b4 <HAL_RCC_OscConfig+0x27c>)
 8003760:	2201      	movs	r2, #1
 8003762:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fa62 	bl	8001c2c <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800376c:	f7fe fa5e 	bl	8001c2c <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b02      	cmp	r3, #2
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e173      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800377e:	4b0b      	ldr	r3, [pc, #44]	@ (80037ac <HAL_RCC_OscConfig+0x274>)
 8003780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d0f0      	beq.n	800376c <HAL_RCC_OscConfig+0x234>
 800378a:	e01b      	b.n	80037c4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800378c:	4b09      	ldr	r3, [pc, #36]	@ (80037b4 <HAL_RCC_OscConfig+0x27c>)
 800378e:	2200      	movs	r2, #0
 8003790:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fe fa4b 	bl	8001c2c <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003798:	e00e      	b.n	80037b8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800379a:	f7fe fa47 	bl	8001c2c <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d907      	bls.n	80037b8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e15c      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
 80037ac:	40023800 	.word	0x40023800
 80037b0:	42470000 	.word	0x42470000
 80037b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037b8:	4b8a      	ldr	r3, [pc, #552]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80037ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1ea      	bne.n	800379a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 8097 	beq.w	8003900 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80037d2:	2300      	movs	r3, #0
 80037d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037d6:	4b83      	ldr	r3, [pc, #524]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037e2:	2300      	movs	r3, #0
 80037e4:	60bb      	str	r3, [r7, #8]
 80037e6:	4b7f      	ldr	r3, [pc, #508]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80037e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ea:	4a7e      	ldr	r2, [pc, #504]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80037ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037f2:	4b7c      	ldr	r3, [pc, #496]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80037f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037fe:	2301      	movs	r3, #1
 8003800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003802:	4b79      	ldr	r3, [pc, #484]	@ (80039e8 <HAL_RCC_OscConfig+0x4b0>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800380a:	2b00      	cmp	r3, #0
 800380c:	d118      	bne.n	8003840 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800380e:	4b76      	ldr	r3, [pc, #472]	@ (80039e8 <HAL_RCC_OscConfig+0x4b0>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a75      	ldr	r2, [pc, #468]	@ (80039e8 <HAL_RCC_OscConfig+0x4b0>)
 8003814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800381a:	f7fe fa07 	bl	8001c2c <HAL_GetTick>
 800381e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003820:	e008      	b.n	8003834 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003822:	f7fe fa03 	bl	8001c2c <HAL_GetTick>
 8003826:	4602      	mov	r2, r0
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	2b02      	cmp	r3, #2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e118      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003834:	4b6c      	ldr	r3, [pc, #432]	@ (80039e8 <HAL_RCC_OscConfig+0x4b0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383c:	2b00      	cmp	r3, #0
 800383e:	d0f0      	beq.n	8003822 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d106      	bne.n	8003856 <HAL_RCC_OscConfig+0x31e>
 8003848:	4b66      	ldr	r3, [pc, #408]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800384a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384c:	4a65      	ldr	r2, [pc, #404]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800384e:	f043 0301 	orr.w	r3, r3, #1
 8003852:	6713      	str	r3, [r2, #112]	@ 0x70
 8003854:	e01c      	b.n	8003890 <HAL_RCC_OscConfig+0x358>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b05      	cmp	r3, #5
 800385c:	d10c      	bne.n	8003878 <HAL_RCC_OscConfig+0x340>
 800385e:	4b61      	ldr	r3, [pc, #388]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 8003860:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003862:	4a60      	ldr	r2, [pc, #384]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	6713      	str	r3, [r2, #112]	@ 0x70
 800386a:	4b5e      	ldr	r3, [pc, #376]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800386c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386e:	4a5d      	ldr	r2, [pc, #372]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 8003870:	f043 0301 	orr.w	r3, r3, #1
 8003874:	6713      	str	r3, [r2, #112]	@ 0x70
 8003876:	e00b      	b.n	8003890 <HAL_RCC_OscConfig+0x358>
 8003878:	4b5a      	ldr	r3, [pc, #360]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387c:	4a59      	ldr	r2, [pc, #356]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800387e:	f023 0301 	bic.w	r3, r3, #1
 8003882:	6713      	str	r3, [r2, #112]	@ 0x70
 8003884:	4b57      	ldr	r3, [pc, #348]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 8003886:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003888:	4a56      	ldr	r2, [pc, #344]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800388a:	f023 0304 	bic.w	r3, r3, #4
 800388e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d015      	beq.n	80038c4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe f9c8 	bl	8001c2c <HAL_GetTick>
 800389c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038a0:	f7fe f9c4 	bl	8001c2c <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e0d7      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038b6:	4b4b      	ldr	r3, [pc, #300]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ee      	beq.n	80038a0 <HAL_RCC_OscConfig+0x368>
 80038c2:	e014      	b.n	80038ee <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c4:	f7fe f9b2 	bl	8001c2c <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038cc:	f7fe f9ae 	bl	8001c2c <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e0c1      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e2:	4b40      	ldr	r3, [pc, #256]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80038e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d1ee      	bne.n	80038cc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ee:	7dfb      	ldrb	r3, [r7, #23]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d105      	bne.n	8003900 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038f4:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	4a3a      	ldr	r2, [pc, #232]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80038fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	f000 80ad 	beq.w	8003a64 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800390a:	4b36      	ldr	r3, [pc, #216]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	f003 030c 	and.w	r3, r3, #12
 8003912:	2b08      	cmp	r3, #8
 8003914:	d060      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	2b02      	cmp	r3, #2
 800391c:	d145      	bne.n	80039aa <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800391e:	4b33      	ldr	r3, [pc, #204]	@ (80039ec <HAL_RCC_OscConfig+0x4b4>)
 8003920:	2200      	movs	r2, #0
 8003922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003924:	f7fe f982 	bl	8001c2c <HAL_GetTick>
 8003928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392a:	e008      	b.n	800393e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800392c:	f7fe f97e 	bl	8001c2c <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	2b02      	cmp	r3, #2
 8003938:	d901      	bls.n	800393e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e093      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	4b29      	ldr	r3, [pc, #164]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f0      	bne.n	800392c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	69da      	ldr	r2, [r3, #28]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a1b      	ldr	r3, [r3, #32]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003958:	019b      	lsls	r3, r3, #6
 800395a:	431a      	orrs	r2, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003960:	085b      	lsrs	r3, r3, #1
 8003962:	3b01      	subs	r3, #1
 8003964:	041b      	lsls	r3, r3, #16
 8003966:	431a      	orrs	r2, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	061b      	lsls	r3, r3, #24
 800396e:	431a      	orrs	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003974:	071b      	lsls	r3, r3, #28
 8003976:	491b      	ldr	r1, [pc, #108]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 8003978:	4313      	orrs	r3, r2
 800397a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800397c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <HAL_RCC_OscConfig+0x4b4>)
 800397e:	2201      	movs	r2, #1
 8003980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003982:	f7fe f953 	bl	8001c2c <HAL_GetTick>
 8003986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003988:	e008      	b.n	800399c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398a:	f7fe f94f 	bl	8001c2c <HAL_GetTick>
 800398e:	4602      	mov	r2, r0
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	1ad3      	subs	r3, r2, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d901      	bls.n	800399c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e064      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399c:	4b11      	ldr	r3, [pc, #68]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0f0      	beq.n	800398a <HAL_RCC_OscConfig+0x452>
 80039a8:	e05c      	b.n	8003a64 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039aa:	4b10      	ldr	r3, [pc, #64]	@ (80039ec <HAL_RCC_OscConfig+0x4b4>)
 80039ac:	2200      	movs	r2, #0
 80039ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b0:	f7fe f93c 	bl	8001c2c <HAL_GetTick>
 80039b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b6:	e008      	b.n	80039ca <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b8:	f7fe f938 	bl	8001c2c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	2b02      	cmp	r3, #2
 80039c4:	d901      	bls.n	80039ca <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e04d      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039ca:	4b06      	ldr	r3, [pc, #24]	@ (80039e4 <HAL_RCC_OscConfig+0x4ac>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1f0      	bne.n	80039b8 <HAL_RCC_OscConfig+0x480>
 80039d6:	e045      	b.n	8003a64 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	699b      	ldr	r3, [r3, #24]
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d107      	bne.n	80039f0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e040      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
 80039e4:	40023800 	.word	0x40023800
 80039e8:	40007000 	.word	0x40007000
 80039ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a70 <HAL_RCC_OscConfig+0x538>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d030      	beq.n	8003a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d129      	bne.n	8003a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d122      	bne.n	8003a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a20:	4013      	ands	r3, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d119      	bne.n	8003a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a36:	085b      	lsrs	r3, r3, #1
 8003a38:	3b01      	subs	r3, #1
 8003a3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d10f      	bne.n	8003a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d107      	bne.n	8003a60 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a5a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d001      	beq.n	8003a64 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e000      	b.n	8003a66 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003a64:	2300      	movs	r3, #0
}
 8003a66:	4618      	mov	r0, r3
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800

08003a74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e041      	b.n	8003b0a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d106      	bne.n	8003aa0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7fd fe20 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2202      	movs	r2, #2
 8003aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3304      	adds	r3, #4
 8003ab0:	4619      	mov	r1, r3
 8003ab2:	4610      	mov	r0, r2
 8003ab4:	f000 fbd8 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2201      	movs	r2, #1
 8003acc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2201      	movs	r2, #1
 8003adc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2201      	movs	r2, #1
 8003af4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b08:	2300      	movs	r3, #0
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d101      	bne.n	8003b24 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e041      	b.n	8003ba8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d106      	bne.n	8003b3e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f839 	bl	8003bb0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2202      	movs	r2, #2
 8003b42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	3304      	adds	r3, #4
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4610      	mov	r0, r2
 8003b52:	f000 fb89 	bl	8004268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2201      	movs	r2, #1
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2201      	movs	r2, #1
 8003b8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b086      	sub	sp, #24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
 8003bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d101      	bne.n	8003bd8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e097      	b.n	8003d08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bde:	b2db      	uxtb	r3, r3
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d106      	bne.n	8003bf2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fd fdd3 	bl	8001798 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	6812      	ldr	r2, [r2, #0]
 8003c04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003c08:	f023 0307 	bic.w	r3, r3, #7
 8003c0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	3304      	adds	r3, #4
 8003c16:	4619      	mov	r1, r3
 8003c18:	4610      	mov	r0, r2
 8003c1a:	f000 fb25 	bl	8004268 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6a1b      	ldr	r3, [r3, #32]
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	697a      	ldr	r2, [r7, #20]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c46:	f023 0303 	bic.w	r3, r3, #3
 8003c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	699b      	ldr	r3, [r3, #24]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	4313      	orrs	r3, r2
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003c64:	f023 030c 	bic.w	r3, r3, #12
 8003c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003c74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68da      	ldr	r2, [r3, #12]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	69db      	ldr	r3, [r3, #28]
 8003c7e:	021b      	lsls	r3, r3, #8
 8003c80:	4313      	orrs	r3, r2
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	011a      	lsls	r2, r3, #4
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	031b      	lsls	r3, r3, #12
 8003c94:	4313      	orrs	r3, r2
 8003c96:	693a      	ldr	r2, [r7, #16]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003ca2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685a      	ldr	r2, [r3, #4]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	011b      	lsls	r3, r3, #4
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	697a      	ldr	r2, [r7, #20]
 8003cc4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2201      	movs	r2, #1
 8003cea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d06:	2300      	movs	r3, #0
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68db      	ldr	r3, [r3, #12]
 8003d1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	f003 0302 	and.w	r3, r3, #2
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d020      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f003 0302 	and.w	r3, r3, #2
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d01b      	beq.n	8003d74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f06f 0202 	mvn.w	r2, #2
 8003d44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2201      	movs	r2, #1
 8003d4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d003      	beq.n	8003d62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 fa65 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 8003d60:	e005      	b.n	8003d6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa57 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d68:	6878      	ldr	r0, [r7, #4]
 8003d6a:	f000 fa68 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f003 0304 	and.w	r3, r3, #4
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d020      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d01b      	beq.n	8003dc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f06f 0204 	mvn.w	r2, #4
 8003d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fa3f 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 8003dac:	e005      	b.n	8003dba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 fa31 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f000 fa42 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	f003 0308 	and.w	r3, r3, #8
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d020      	beq.n	8003e0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	f003 0308 	and.w	r3, r3, #8
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d01b      	beq.n	8003e0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f06f 0208 	mvn.w	r2, #8
 8003ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2204      	movs	r2, #4
 8003de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	f003 0303 	and.w	r3, r3, #3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 fa19 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 8003df8:	e005      	b.n	8003e06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fa0b 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 fa1c 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	f003 0310 	and.w	r3, r3, #16
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d020      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f003 0310 	and.w	r3, r3, #16
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d01b      	beq.n	8003e58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f06f 0210 	mvn.w	r2, #16
 8003e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d003      	beq.n	8003e46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f9f3 	bl	800422a <HAL_TIM_IC_CaptureCallback>
 8003e44:	e005      	b.n	8003e52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f9e5 	bl	8004216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 f9f6 	bl	800423e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f003 0301 	and.w	r3, r3, #1
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d00c      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d007      	beq.n	8003e7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f06f 0201 	mvn.w	r2, #1
 8003e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 f9c3 	bl	8004202 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00c      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d007      	beq.n	8003ea0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fdb2 	bl	8004a04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00c      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d007      	beq.n	8003ec4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f9c7 	bl	8004252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	f003 0320 	and.w	r3, r3, #32
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d00c      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f06f 0220 	mvn.w	r2, #32
 8003ee0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 fd84 	bl	80049f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ee8:	bf00      	nop
 8003eea:	3710      	adds	r7, #16
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}

08003ef0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b086      	sub	sp, #24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60f8      	str	r0, [r7, #12]
 8003ef8:	60b9      	str	r1, [r7, #8]
 8003efa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	e0ae      	b.n	800406c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2201      	movs	r2, #1
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b0c      	cmp	r3, #12
 8003f1a:	f200 809f 	bhi.w	800405c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003f1e:	a201      	add	r2, pc, #4	@ (adr r2, 8003f24 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f24:	08003f59 	.word	0x08003f59
 8003f28:	0800405d 	.word	0x0800405d
 8003f2c:	0800405d 	.word	0x0800405d
 8003f30:	0800405d 	.word	0x0800405d
 8003f34:	08003f99 	.word	0x08003f99
 8003f38:	0800405d 	.word	0x0800405d
 8003f3c:	0800405d 	.word	0x0800405d
 8003f40:	0800405d 	.word	0x0800405d
 8003f44:	08003fdb 	.word	0x08003fdb
 8003f48:	0800405d 	.word	0x0800405d
 8003f4c:	0800405d 	.word	0x0800405d
 8003f50:	0800405d 	.word	0x0800405d
 8003f54:	0800401b 	.word	0x0800401b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68b9      	ldr	r1, [r7, #8]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f000 fa2e 	bl	80043c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	699a      	ldr	r2, [r3, #24]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0208 	orr.w	r2, r2, #8
 8003f72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	699a      	ldr	r2, [r3, #24]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f022 0204 	bic.w	r2, r2, #4
 8003f82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6999      	ldr	r1, [r3, #24]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	691a      	ldr	r2, [r3, #16]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	619a      	str	r2, [r3, #24]
      break;
 8003f96:	e064      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68b9      	ldr	r1, [r7, #8]
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fa7e 	bl	80044a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699a      	ldr	r2, [r3, #24]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003fb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6999      	ldr	r1, [r3, #24]
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	691b      	ldr	r3, [r3, #16]
 8003fce:	021a      	lsls	r2, r3, #8
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	619a      	str	r2, [r3, #24]
      break;
 8003fd8:	e043      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 fad3 	bl	800458c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	69da      	ldr	r2, [r3, #28]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f042 0208 	orr.w	r2, r2, #8
 8003ff4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	69da      	ldr	r2, [r3, #28]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f022 0204 	bic.w	r2, r2, #4
 8004004:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	69d9      	ldr	r1, [r3, #28]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	691a      	ldr	r2, [r3, #16]
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	430a      	orrs	r2, r1
 8004016:	61da      	str	r2, [r3, #28]
      break;
 8004018:	e023      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	4618      	mov	r0, r3
 8004022:	f000 fb27 	bl	8004674 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	69da      	ldr	r2, [r3, #28]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004034:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	69da      	ldr	r2, [r3, #28]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004044:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	69d9      	ldr	r1, [r3, #28]
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	691b      	ldr	r3, [r3, #16]
 8004050:	021a      	lsls	r2, r3, #8
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	430a      	orrs	r2, r1
 8004058:	61da      	str	r2, [r3, #28]
      break;
 800405a:	e002      	b.n	8004062 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	75fb      	strb	r3, [r7, #23]
      break;
 8004060:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800406a:	7dfb      	ldrb	r3, [r7, #23]
}
 800406c:	4618      	mov	r0, r3
 800406e:	3718      	adds	r7, #24
 8004070:	46bd      	mov	sp, r7
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800407e:	2300      	movs	r3, #0
 8004080:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004088:	2b01      	cmp	r3, #1
 800408a:	d101      	bne.n	8004090 <HAL_TIM_ConfigClockSource+0x1c>
 800408c:	2302      	movs	r3, #2
 800408e:	e0b4      	b.n	80041fa <HAL_TIM_ConfigClockSource+0x186>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2201      	movs	r2, #1
 8004094:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80040ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80040b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68ba      	ldr	r2, [r7, #8]
 80040be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040c8:	d03e      	beq.n	8004148 <HAL_TIM_ConfigClockSource+0xd4>
 80040ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040ce:	f200 8087 	bhi.w	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040d2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040d6:	f000 8086 	beq.w	80041e6 <HAL_TIM_ConfigClockSource+0x172>
 80040da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040de:	d87f      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e0:	2b70      	cmp	r3, #112	@ 0x70
 80040e2:	d01a      	beq.n	800411a <HAL_TIM_ConfigClockSource+0xa6>
 80040e4:	2b70      	cmp	r3, #112	@ 0x70
 80040e6:	d87b      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040e8:	2b60      	cmp	r3, #96	@ 0x60
 80040ea:	d050      	beq.n	800418e <HAL_TIM_ConfigClockSource+0x11a>
 80040ec:	2b60      	cmp	r3, #96	@ 0x60
 80040ee:	d877      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f0:	2b50      	cmp	r3, #80	@ 0x50
 80040f2:	d03c      	beq.n	800416e <HAL_TIM_ConfigClockSource+0xfa>
 80040f4:	2b50      	cmp	r3, #80	@ 0x50
 80040f6:	d873      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 80040f8:	2b40      	cmp	r3, #64	@ 0x40
 80040fa:	d058      	beq.n	80041ae <HAL_TIM_ConfigClockSource+0x13a>
 80040fc:	2b40      	cmp	r3, #64	@ 0x40
 80040fe:	d86f      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004100:	2b30      	cmp	r3, #48	@ 0x30
 8004102:	d064      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 8004104:	2b30      	cmp	r3, #48	@ 0x30
 8004106:	d86b      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004108:	2b20      	cmp	r3, #32
 800410a:	d060      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 800410c:	2b20      	cmp	r3, #32
 800410e:	d867      	bhi.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004110:	2b00      	cmp	r3, #0
 8004112:	d05c      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 8004114:	2b10      	cmp	r3, #16
 8004116:	d05a      	beq.n	80041ce <HAL_TIM_ConfigClockSource+0x15a>
 8004118:	e062      	b.n	80041e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800412a:	f000 fb73 	bl	8004814 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800413c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	609a      	str	r2, [r3, #8]
      break;
 8004146:	e04f      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004158:	f000 fb5c 	bl	8004814 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800416a:	609a      	str	r2, [r3, #8]
      break;
 800416c:	e03c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800417a:	461a      	mov	r2, r3
 800417c:	f000 fad0 	bl	8004720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	2150      	movs	r1, #80	@ 0x50
 8004186:	4618      	mov	r0, r3
 8004188:	f000 fb29 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 800418c:	e02c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800419a:	461a      	mov	r2, r3
 800419c:	f000 faef 	bl	800477e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	2160      	movs	r1, #96	@ 0x60
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fb19 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80041ac:	e01c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80041ba:	461a      	mov	r2, r3
 80041bc:	f000 fab0 	bl	8004720 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2140      	movs	r1, #64	@ 0x40
 80041c6:	4618      	mov	r0, r3
 80041c8:	f000 fb09 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80041cc:	e00c      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4619      	mov	r1, r3
 80041d8:	4610      	mov	r0, r2
 80041da:	f000 fb00 	bl	80047de <TIM_ITRx_SetConfig>
      break;
 80041de:	e003      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	73fb      	strb	r3, [r7, #15]
      break;
 80041e4:	e000      	b.n	80041e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80041e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2200      	movs	r2, #0
 80041f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80041f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004202:	b480      	push	{r7}
 8004204:	b083      	sub	sp, #12
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800420a:	bf00      	nop
 800420c:	370c      	adds	r7, #12
 800420e:	46bd      	mov	sp, r7
 8004210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004214:	4770      	bx	lr

08004216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800421e:	bf00      	nop
 8004220:	370c      	adds	r7, #12
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800422a:	b480      	push	{r7}
 800422c:	b083      	sub	sp, #12
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004232:	bf00      	nop
 8004234:	370c      	adds	r7, #12
 8004236:	46bd      	mov	sp, r7
 8004238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423c:	4770      	bx	lr

0800423e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800423e:	b480      	push	{r7}
 8004240:	b083      	sub	sp, #12
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	4a46      	ldr	r2, [pc, #280]	@ (8004394 <TIM_Base_SetConfig+0x12c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d013      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004286:	d00f      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	4a43      	ldr	r2, [pc, #268]	@ (8004398 <TIM_Base_SetConfig+0x130>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d00b      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a42      	ldr	r2, [pc, #264]	@ (800439c <TIM_Base_SetConfig+0x134>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d007      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a41      	ldr	r2, [pc, #260]	@ (80043a0 <TIM_Base_SetConfig+0x138>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d003      	beq.n	80042a8 <TIM_Base_SetConfig+0x40>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	4a40      	ldr	r2, [pc, #256]	@ (80043a4 <TIM_Base_SetConfig+0x13c>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d108      	bne.n	80042ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	4a35      	ldr	r2, [pc, #212]	@ (8004394 <TIM_Base_SetConfig+0x12c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d02b      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c8:	d027      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4a32      	ldr	r2, [pc, #200]	@ (8004398 <TIM_Base_SetConfig+0x130>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d023      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	4a31      	ldr	r2, [pc, #196]	@ (800439c <TIM_Base_SetConfig+0x134>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d01f      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a30      	ldr	r2, [pc, #192]	@ (80043a0 <TIM_Base_SetConfig+0x138>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d01b      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a2f      	ldr	r2, [pc, #188]	@ (80043a4 <TIM_Base_SetConfig+0x13c>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d017      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a2e      	ldr	r2, [pc, #184]	@ (80043a8 <TIM_Base_SetConfig+0x140>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d013      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	4a2d      	ldr	r2, [pc, #180]	@ (80043ac <TIM_Base_SetConfig+0x144>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d00f      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a2c      	ldr	r2, [pc, #176]	@ (80043b0 <TIM_Base_SetConfig+0x148>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00b      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4a2b      	ldr	r2, [pc, #172]	@ (80043b4 <TIM_Base_SetConfig+0x14c>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d007      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	4a2a      	ldr	r2, [pc, #168]	@ (80043b8 <TIM_Base_SetConfig+0x150>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d003      	beq.n	800431a <TIM_Base_SetConfig+0xb2>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a29      	ldr	r2, [pc, #164]	@ (80043bc <TIM_Base_SetConfig+0x154>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d108      	bne.n	800432c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	4313      	orrs	r3, r2
 8004338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	689a      	ldr	r2, [r3, #8]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a10      	ldr	r2, [pc, #64]	@ (8004394 <TIM_Base_SetConfig+0x12c>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d003      	beq.n	8004360 <TIM_Base_SetConfig+0xf8>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a12      	ldr	r2, [pc, #72]	@ (80043a4 <TIM_Base_SetConfig+0x13c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d103      	bne.n	8004368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691a      	ldr	r2, [r3, #16]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2201      	movs	r2, #1
 800436c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	f003 0301 	and.w	r3, r3, #1
 8004376:	2b01      	cmp	r3, #1
 8004378:	d105      	bne.n	8004386 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f023 0201 	bic.w	r2, r3, #1
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	611a      	str	r2, [r3, #16]
  }
}
 8004386:	bf00      	nop
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800
 80043b4:	40001800 	.word	0x40001800
 80043b8:	40001c00 	.word	0x40001c00
 80043bc:	40002000 	.word	0x40002000

080043c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	f023 0201 	bic.w	r2, r3, #1
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f023 0302 	bic.w	r3, r3, #2
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a20      	ldr	r2, [pc, #128]	@ (8004498 <TIM_OC1_SetConfig+0xd8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d003      	beq.n	8004424 <TIM_OC1_SetConfig+0x64>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a1f      	ldr	r2, [pc, #124]	@ (800449c <TIM_OC1_SetConfig+0xdc>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10c      	bne.n	800443e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	f023 0308 	bic.w	r3, r3, #8
 800442a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f023 0304 	bic.w	r3, r3, #4
 800443c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	4a15      	ldr	r2, [pc, #84]	@ (8004498 <TIM_OC1_SetConfig+0xd8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d003      	beq.n	800444e <TIM_OC1_SetConfig+0x8e>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	4a14      	ldr	r2, [pc, #80]	@ (800449c <TIM_OC1_SetConfig+0xdc>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d111      	bne.n	8004472 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004454:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	699b      	ldr	r3, [r3, #24]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	685a      	ldr	r2, [r3, #4]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	621a      	str	r2, [r3, #32]
}
 800448c:	bf00      	nop
 800448e:	371c      	adds	r7, #28
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr
 8004498:	40010000 	.word	0x40010000
 800449c:	40010400 	.word	0x40010400

080044a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	f023 0210 	bic.w	r2, r3, #16
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	021b      	lsls	r3, r3, #8
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	f023 0320 	bic.w	r3, r3, #32
 80044ea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	697a      	ldr	r2, [r7, #20]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a22      	ldr	r2, [pc, #136]	@ (8004584 <TIM_OC2_SetConfig+0xe4>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d003      	beq.n	8004508 <TIM_OC2_SetConfig+0x68>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a21      	ldr	r2, [pc, #132]	@ (8004588 <TIM_OC2_SetConfig+0xe8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d10d      	bne.n	8004524 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800450e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	011b      	lsls	r3, r3, #4
 8004516:	697a      	ldr	r2, [r7, #20]
 8004518:	4313      	orrs	r3, r2
 800451a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004522:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4a17      	ldr	r2, [pc, #92]	@ (8004584 <TIM_OC2_SetConfig+0xe4>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d003      	beq.n	8004534 <TIM_OC2_SetConfig+0x94>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a16      	ldr	r2, [pc, #88]	@ (8004588 <TIM_OC2_SetConfig+0xe8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d113      	bne.n	800455c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800453a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004542:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	695b      	ldr	r3, [r3, #20]
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	693a      	ldr	r2, [r7, #16]
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	699b      	ldr	r3, [r3, #24]
 8004554:	009b      	lsls	r3, r3, #2
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	4313      	orrs	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	693a      	ldr	r2, [r7, #16]
 8004560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685a      	ldr	r2, [r3, #4]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	697a      	ldr	r2, [r7, #20]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40010000 	.word	0x40010000
 8004588:	40010400 	.word	0x40010400

0800458c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6a1b      	ldr	r3, [r3, #32]
 80045a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	021b      	lsls	r3, r3, #8
 80045dc:	697a      	ldr	r2, [r7, #20]
 80045de:	4313      	orrs	r3, r2
 80045e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a21      	ldr	r2, [pc, #132]	@ (800466c <TIM_OC3_SetConfig+0xe0>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d003      	beq.n	80045f2 <TIM_OC3_SetConfig+0x66>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a20      	ldr	r2, [pc, #128]	@ (8004670 <TIM_OC3_SetConfig+0xe4>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d10d      	bne.n	800460e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80045f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	021b      	lsls	r3, r3, #8
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800460c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a16      	ldr	r2, [pc, #88]	@ (800466c <TIM_OC3_SetConfig+0xe0>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d003      	beq.n	800461e <TIM_OC3_SetConfig+0x92>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a15      	ldr	r2, [pc, #84]	@ (8004670 <TIM_OC3_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d113      	bne.n	8004646 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800462c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	699b      	ldr	r3, [r3, #24]
 800463e:	011b      	lsls	r3, r3, #4
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	4313      	orrs	r3, r2
 8004644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	621a      	str	r2, [r3, #32]
}
 8004660:	bf00      	nop
 8004662:	371c      	adds	r7, #28
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	40010000 	.word	0x40010000
 8004670:	40010400 	.word	0x40010400

08004674 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004674:	b480      	push	{r7}
 8004676:	b087      	sub	sp, #28
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6a1b      	ldr	r3, [r3, #32]
 8004682:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80046a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80046aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	021b      	lsls	r3, r3, #8
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80046be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	031b      	lsls	r3, r3, #12
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	4a12      	ldr	r2, [pc, #72]	@ (8004718 <TIM_OC4_SetConfig+0xa4>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d003      	beq.n	80046dc <TIM_OC4_SetConfig+0x68>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a11      	ldr	r2, [pc, #68]	@ (800471c <TIM_OC4_SetConfig+0xa8>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d109      	bne.n	80046f0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80046e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	695b      	ldr	r3, [r3, #20]
 80046e8:	019b      	lsls	r3, r3, #6
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	4313      	orrs	r3, r2
 80046ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	697a      	ldr	r2, [r7, #20]
 80046f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	68fa      	ldr	r2, [r7, #12]
 80046fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	621a      	str	r2, [r3, #32]
}
 800470a:	bf00      	nop
 800470c:	371c      	adds	r7, #28
 800470e:	46bd      	mov	sp, r7
 8004710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004714:	4770      	bx	lr
 8004716:	bf00      	nop
 8004718:	40010000 	.word	0x40010000
 800471c:	40010400 	.word	0x40010400

08004720 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1b      	ldr	r3, [r3, #32]
 8004730:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	f023 0201 	bic.w	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	699b      	ldr	r3, [r3, #24]
 8004742:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800474a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	f023 030a 	bic.w	r3, r3, #10
 800475c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800475e:	697a      	ldr	r2, [r7, #20]
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	621a      	str	r2, [r3, #32]
}
 8004772:	bf00      	nop
 8004774:	371c      	adds	r7, #28
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800477e:	b480      	push	{r7}
 8004780:	b087      	sub	sp, #28
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f023 0210 	bic.w	r2, r3, #16
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	031b      	lsls	r3, r3, #12
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80047ba:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	011b      	lsls	r3, r3, #4
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	621a      	str	r2, [r3, #32]
}
 80047d2:	bf00      	nop
 80047d4:	371c      	adds	r7, #28
 80047d6:	46bd      	mov	sp, r7
 80047d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047dc:	4770      	bx	lr

080047de <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047de:	b480      	push	{r7}
 80047e0:	b085      	sub	sp, #20
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
 80047e6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	689b      	ldr	r3, [r3, #8]
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047f4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	f043 0307 	orr.w	r3, r3, #7
 8004800:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	609a      	str	r2, [r3, #8]
}
 8004808:	bf00      	nop
 800480a:	3714      	adds	r7, #20
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004814:	b480      	push	{r7}
 8004816:	b087      	sub	sp, #28
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	607a      	str	r2, [r7, #4]
 8004820:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800482e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	021a      	lsls	r2, r3, #8
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	431a      	orrs	r2, r3
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	4313      	orrs	r3, r2
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	4313      	orrs	r3, r2
 8004840:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	697a      	ldr	r2, [r7, #20]
 8004846:	609a      	str	r2, [r3, #8]
}
 8004848:	bf00      	nop
 800484a:	371c      	adds	r7, #28
 800484c:	46bd      	mov	sp, r7
 800484e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004852:	4770      	bx	lr

08004854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004864:	2b01      	cmp	r3, #1
 8004866:	d101      	bne.n	800486c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004868:	2302      	movs	r3, #2
 800486a:	e05a      	b.n	8004922 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2202      	movs	r2, #2
 8004878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004892:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	4313      	orrs	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a21      	ldr	r2, [pc, #132]	@ (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d022      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048b8:	d01d      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1d      	ldr	r2, [pc, #116]	@ (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d018      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a1b      	ldr	r2, [pc, #108]	@ (8004938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d013      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a1a      	ldr	r2, [pc, #104]	@ (800493c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d00e      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a18      	ldr	r2, [pc, #96]	@ (8004940 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d009      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a17      	ldr	r2, [pc, #92]	@ (8004944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a15      	ldr	r2, [pc, #84]	@ (8004948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d10c      	bne.n	8004910 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	68ba      	ldr	r2, [r7, #8]
 8004904:	4313      	orrs	r3, r2
 8004906:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	40010000 	.word	0x40010000
 8004934:	40000400 	.word	0x40000400
 8004938:	40000800 	.word	0x40000800
 800493c:	40000c00 	.word	0x40000c00
 8004940:	40010400 	.word	0x40010400
 8004944:	40014000 	.word	0x40014000
 8004948:	40001800 	.word	0x40001800

0800494c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
 8004954:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004956:	2300      	movs	r3, #0
 8004958:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d101      	bne.n	8004968 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004964:	2302      	movs	r3, #2
 8004966:	e03d      	b.n	80049e4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	68db      	ldr	r3, [r3, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	4313      	orrs	r3, r2
 800498a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	4313      	orrs	r3, r2
 8004998:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	695b      	ldr	r3, [r3, #20]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	69db      	ldr	r3, [r3, #28]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68fa      	ldr	r2, [r7, #12]
 80049d8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049e2:	2300      	movs	r3, #0
}
 80049e4:	4618      	mov	r0, r3
 80049e6:	3714      	adds	r7, #20
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <__cvt>:
 8004a18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a1c:	ec57 6b10 	vmov	r6, r7, d0
 8004a20:	2f00      	cmp	r7, #0
 8004a22:	460c      	mov	r4, r1
 8004a24:	4619      	mov	r1, r3
 8004a26:	463b      	mov	r3, r7
 8004a28:	bfbb      	ittet	lt
 8004a2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004a2e:	461f      	movlt	r7, r3
 8004a30:	2300      	movge	r3, #0
 8004a32:	232d      	movlt	r3, #45	@ 0x2d
 8004a34:	700b      	strb	r3, [r1, #0]
 8004a36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004a38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004a3c:	4691      	mov	r9, r2
 8004a3e:	f023 0820 	bic.w	r8, r3, #32
 8004a42:	bfbc      	itt	lt
 8004a44:	4632      	movlt	r2, r6
 8004a46:	4616      	movlt	r6, r2
 8004a48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a4c:	d005      	beq.n	8004a5a <__cvt+0x42>
 8004a4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004a52:	d100      	bne.n	8004a56 <__cvt+0x3e>
 8004a54:	3401      	adds	r4, #1
 8004a56:	2102      	movs	r1, #2
 8004a58:	e000      	b.n	8004a5c <__cvt+0x44>
 8004a5a:	2103      	movs	r1, #3
 8004a5c:	ab03      	add	r3, sp, #12
 8004a5e:	9301      	str	r3, [sp, #4]
 8004a60:	ab02      	add	r3, sp, #8
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	ec47 6b10 	vmov	d0, r6, r7
 8004a68:	4653      	mov	r3, sl
 8004a6a:	4622      	mov	r2, r4
 8004a6c:	f000 fe38 	bl	80056e0 <_dtoa_r>
 8004a70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004a74:	4605      	mov	r5, r0
 8004a76:	d119      	bne.n	8004aac <__cvt+0x94>
 8004a78:	f019 0f01 	tst.w	r9, #1
 8004a7c:	d00e      	beq.n	8004a9c <__cvt+0x84>
 8004a7e:	eb00 0904 	add.w	r9, r0, r4
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	4630      	mov	r0, r6
 8004a88:	4639      	mov	r1, r7
 8004a8a:	f7fc f83d 	bl	8000b08 <__aeabi_dcmpeq>
 8004a8e:	b108      	cbz	r0, 8004a94 <__cvt+0x7c>
 8004a90:	f8cd 900c 	str.w	r9, [sp, #12]
 8004a94:	2230      	movs	r2, #48	@ 0x30
 8004a96:	9b03      	ldr	r3, [sp, #12]
 8004a98:	454b      	cmp	r3, r9
 8004a9a:	d31e      	bcc.n	8004ada <__cvt+0xc2>
 8004a9c:	9b03      	ldr	r3, [sp, #12]
 8004a9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004aa0:	1b5b      	subs	r3, r3, r5
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	b004      	add	sp, #16
 8004aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004ab0:	eb00 0904 	add.w	r9, r0, r4
 8004ab4:	d1e5      	bne.n	8004a82 <__cvt+0x6a>
 8004ab6:	7803      	ldrb	r3, [r0, #0]
 8004ab8:	2b30      	cmp	r3, #48	@ 0x30
 8004aba:	d10a      	bne.n	8004ad2 <__cvt+0xba>
 8004abc:	2200      	movs	r2, #0
 8004abe:	2300      	movs	r3, #0
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	f7fc f820 	bl	8000b08 <__aeabi_dcmpeq>
 8004ac8:	b918      	cbnz	r0, 8004ad2 <__cvt+0xba>
 8004aca:	f1c4 0401 	rsb	r4, r4, #1
 8004ace:	f8ca 4000 	str.w	r4, [sl]
 8004ad2:	f8da 3000 	ldr.w	r3, [sl]
 8004ad6:	4499      	add	r9, r3
 8004ad8:	e7d3      	b.n	8004a82 <__cvt+0x6a>
 8004ada:	1c59      	adds	r1, r3, #1
 8004adc:	9103      	str	r1, [sp, #12]
 8004ade:	701a      	strb	r2, [r3, #0]
 8004ae0:	e7d9      	b.n	8004a96 <__cvt+0x7e>

08004ae2 <__exponent>:
 8004ae2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ae4:	2900      	cmp	r1, #0
 8004ae6:	bfba      	itte	lt
 8004ae8:	4249      	neglt	r1, r1
 8004aea:	232d      	movlt	r3, #45	@ 0x2d
 8004aec:	232b      	movge	r3, #43	@ 0x2b
 8004aee:	2909      	cmp	r1, #9
 8004af0:	7002      	strb	r2, [r0, #0]
 8004af2:	7043      	strb	r3, [r0, #1]
 8004af4:	dd29      	ble.n	8004b4a <__exponent+0x68>
 8004af6:	f10d 0307 	add.w	r3, sp, #7
 8004afa:	461d      	mov	r5, r3
 8004afc:	270a      	movs	r7, #10
 8004afe:	461a      	mov	r2, r3
 8004b00:	fbb1 f6f7 	udiv	r6, r1, r7
 8004b04:	fb07 1416 	mls	r4, r7, r6, r1
 8004b08:	3430      	adds	r4, #48	@ 0x30
 8004b0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004b0e:	460c      	mov	r4, r1
 8004b10:	2c63      	cmp	r4, #99	@ 0x63
 8004b12:	f103 33ff 	add.w	r3, r3, #4294967295
 8004b16:	4631      	mov	r1, r6
 8004b18:	dcf1      	bgt.n	8004afe <__exponent+0x1c>
 8004b1a:	3130      	adds	r1, #48	@ 0x30
 8004b1c:	1e94      	subs	r4, r2, #2
 8004b1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004b22:	1c41      	adds	r1, r0, #1
 8004b24:	4623      	mov	r3, r4
 8004b26:	42ab      	cmp	r3, r5
 8004b28:	d30a      	bcc.n	8004b40 <__exponent+0x5e>
 8004b2a:	f10d 0309 	add.w	r3, sp, #9
 8004b2e:	1a9b      	subs	r3, r3, r2
 8004b30:	42ac      	cmp	r4, r5
 8004b32:	bf88      	it	hi
 8004b34:	2300      	movhi	r3, #0
 8004b36:	3302      	adds	r3, #2
 8004b38:	4403      	add	r3, r0
 8004b3a:	1a18      	subs	r0, r3, r0
 8004b3c:	b003      	add	sp, #12
 8004b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004b40:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004b44:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004b48:	e7ed      	b.n	8004b26 <__exponent+0x44>
 8004b4a:	2330      	movs	r3, #48	@ 0x30
 8004b4c:	3130      	adds	r1, #48	@ 0x30
 8004b4e:	7083      	strb	r3, [r0, #2]
 8004b50:	70c1      	strb	r1, [r0, #3]
 8004b52:	1d03      	adds	r3, r0, #4
 8004b54:	e7f1      	b.n	8004b3a <__exponent+0x58>
	...

08004b58 <_printf_float>:
 8004b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b5c:	b08d      	sub	sp, #52	@ 0x34
 8004b5e:	460c      	mov	r4, r1
 8004b60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004b64:	4616      	mov	r6, r2
 8004b66:	461f      	mov	r7, r3
 8004b68:	4605      	mov	r5, r0
 8004b6a:	f000 fcb9 	bl	80054e0 <_localeconv_r>
 8004b6e:	6803      	ldr	r3, [r0, #0]
 8004b70:	9304      	str	r3, [sp, #16]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb fb9c 	bl	80002b0 <strlen>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b7c:	f8d8 3000 	ldr.w	r3, [r8]
 8004b80:	9005      	str	r0, [sp, #20]
 8004b82:	3307      	adds	r3, #7
 8004b84:	f023 0307 	bic.w	r3, r3, #7
 8004b88:	f103 0208 	add.w	r2, r3, #8
 8004b8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004b90:	f8d4 b000 	ldr.w	fp, [r4]
 8004b94:	f8c8 2000 	str.w	r2, [r8]
 8004b98:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004ba0:	9307      	str	r3, [sp, #28]
 8004ba2:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ba6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004baa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bae:	4b9c      	ldr	r3, [pc, #624]	@ (8004e20 <_printf_float+0x2c8>)
 8004bb0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bb4:	f7fb ffda 	bl	8000b6c <__aeabi_dcmpun>
 8004bb8:	bb70      	cbnz	r0, 8004c18 <_printf_float+0xc0>
 8004bba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bbe:	4b98      	ldr	r3, [pc, #608]	@ (8004e20 <_printf_float+0x2c8>)
 8004bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8004bc4:	f7fb ffb4 	bl	8000b30 <__aeabi_dcmple>
 8004bc8:	bb30      	cbnz	r0, 8004c18 <_printf_float+0xc0>
 8004bca:	2200      	movs	r2, #0
 8004bcc:	2300      	movs	r3, #0
 8004bce:	4640      	mov	r0, r8
 8004bd0:	4649      	mov	r1, r9
 8004bd2:	f7fb ffa3 	bl	8000b1c <__aeabi_dcmplt>
 8004bd6:	b110      	cbz	r0, 8004bde <_printf_float+0x86>
 8004bd8:	232d      	movs	r3, #45	@ 0x2d
 8004bda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004bde:	4a91      	ldr	r2, [pc, #580]	@ (8004e24 <_printf_float+0x2cc>)
 8004be0:	4b91      	ldr	r3, [pc, #580]	@ (8004e28 <_printf_float+0x2d0>)
 8004be2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004be6:	bf8c      	ite	hi
 8004be8:	4690      	movhi	r8, r2
 8004bea:	4698      	movls	r8, r3
 8004bec:	2303      	movs	r3, #3
 8004bee:	6123      	str	r3, [r4, #16]
 8004bf0:	f02b 0304 	bic.w	r3, fp, #4
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	f04f 0900 	mov.w	r9, #0
 8004bfa:	9700      	str	r7, [sp, #0]
 8004bfc:	4633      	mov	r3, r6
 8004bfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004c00:	4621      	mov	r1, r4
 8004c02:	4628      	mov	r0, r5
 8004c04:	f000 f9d2 	bl	8004fac <_printf_common>
 8004c08:	3001      	adds	r0, #1
 8004c0a:	f040 808d 	bne.w	8004d28 <_printf_float+0x1d0>
 8004c0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004c12:	b00d      	add	sp, #52	@ 0x34
 8004c14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c18:	4642      	mov	r2, r8
 8004c1a:	464b      	mov	r3, r9
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	4649      	mov	r1, r9
 8004c20:	f7fb ffa4 	bl	8000b6c <__aeabi_dcmpun>
 8004c24:	b140      	cbz	r0, 8004c38 <_printf_float+0xe0>
 8004c26:	464b      	mov	r3, r9
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	bfbc      	itt	lt
 8004c2c:	232d      	movlt	r3, #45	@ 0x2d
 8004c2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004c32:	4a7e      	ldr	r2, [pc, #504]	@ (8004e2c <_printf_float+0x2d4>)
 8004c34:	4b7e      	ldr	r3, [pc, #504]	@ (8004e30 <_printf_float+0x2d8>)
 8004c36:	e7d4      	b.n	8004be2 <_printf_float+0x8a>
 8004c38:	6863      	ldr	r3, [r4, #4]
 8004c3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004c3e:	9206      	str	r2, [sp, #24]
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	d13b      	bne.n	8004cbc <_printf_float+0x164>
 8004c44:	2306      	movs	r3, #6
 8004c46:	6063      	str	r3, [r4, #4]
 8004c48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	6022      	str	r2, [r4, #0]
 8004c50:	9303      	str	r3, [sp, #12]
 8004c52:	ab0a      	add	r3, sp, #40	@ 0x28
 8004c54:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004c58:	ab09      	add	r3, sp, #36	@ 0x24
 8004c5a:	9300      	str	r3, [sp, #0]
 8004c5c:	6861      	ldr	r1, [r4, #4]
 8004c5e:	ec49 8b10 	vmov	d0, r8, r9
 8004c62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004c66:	4628      	mov	r0, r5
 8004c68:	f7ff fed6 	bl	8004a18 <__cvt>
 8004c6c:	9b06      	ldr	r3, [sp, #24]
 8004c6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c70:	2b47      	cmp	r3, #71	@ 0x47
 8004c72:	4680      	mov	r8, r0
 8004c74:	d129      	bne.n	8004cca <_printf_float+0x172>
 8004c76:	1cc8      	adds	r0, r1, #3
 8004c78:	db02      	blt.n	8004c80 <_printf_float+0x128>
 8004c7a:	6863      	ldr	r3, [r4, #4]
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	dd41      	ble.n	8004d04 <_printf_float+0x1ac>
 8004c80:	f1aa 0a02 	sub.w	sl, sl, #2
 8004c84:	fa5f fa8a 	uxtb.w	sl, sl
 8004c88:	3901      	subs	r1, #1
 8004c8a:	4652      	mov	r2, sl
 8004c8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004c90:	9109      	str	r1, [sp, #36]	@ 0x24
 8004c92:	f7ff ff26 	bl	8004ae2 <__exponent>
 8004c96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004c98:	1813      	adds	r3, r2, r0
 8004c9a:	2a01      	cmp	r2, #1
 8004c9c:	4681      	mov	r9, r0
 8004c9e:	6123      	str	r3, [r4, #16]
 8004ca0:	dc02      	bgt.n	8004ca8 <_printf_float+0x150>
 8004ca2:	6822      	ldr	r2, [r4, #0]
 8004ca4:	07d2      	lsls	r2, r2, #31
 8004ca6:	d501      	bpl.n	8004cac <_printf_float+0x154>
 8004ca8:	3301      	adds	r3, #1
 8004caa:	6123      	str	r3, [r4, #16]
 8004cac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d0a2      	beq.n	8004bfa <_printf_float+0xa2>
 8004cb4:	232d      	movs	r3, #45	@ 0x2d
 8004cb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004cba:	e79e      	b.n	8004bfa <_printf_float+0xa2>
 8004cbc:	9a06      	ldr	r2, [sp, #24]
 8004cbe:	2a47      	cmp	r2, #71	@ 0x47
 8004cc0:	d1c2      	bne.n	8004c48 <_printf_float+0xf0>
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1c0      	bne.n	8004c48 <_printf_float+0xf0>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e7bd      	b.n	8004c46 <_printf_float+0xee>
 8004cca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004cce:	d9db      	bls.n	8004c88 <_printf_float+0x130>
 8004cd0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004cd4:	d118      	bne.n	8004d08 <_printf_float+0x1b0>
 8004cd6:	2900      	cmp	r1, #0
 8004cd8:	6863      	ldr	r3, [r4, #4]
 8004cda:	dd0b      	ble.n	8004cf4 <_printf_float+0x19c>
 8004cdc:	6121      	str	r1, [r4, #16]
 8004cde:	b913      	cbnz	r3, 8004ce6 <_printf_float+0x18e>
 8004ce0:	6822      	ldr	r2, [r4, #0]
 8004ce2:	07d0      	lsls	r0, r2, #31
 8004ce4:	d502      	bpl.n	8004cec <_printf_float+0x194>
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	440b      	add	r3, r1
 8004cea:	6123      	str	r3, [r4, #16]
 8004cec:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004cee:	f04f 0900 	mov.w	r9, #0
 8004cf2:	e7db      	b.n	8004cac <_printf_float+0x154>
 8004cf4:	b913      	cbnz	r3, 8004cfc <_printf_float+0x1a4>
 8004cf6:	6822      	ldr	r2, [r4, #0]
 8004cf8:	07d2      	lsls	r2, r2, #31
 8004cfa:	d501      	bpl.n	8004d00 <_printf_float+0x1a8>
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	e7f4      	b.n	8004cea <_printf_float+0x192>
 8004d00:	2301      	movs	r3, #1
 8004d02:	e7f2      	b.n	8004cea <_printf_float+0x192>
 8004d04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004d0a:	4299      	cmp	r1, r3
 8004d0c:	db05      	blt.n	8004d1a <_printf_float+0x1c2>
 8004d0e:	6823      	ldr	r3, [r4, #0]
 8004d10:	6121      	str	r1, [r4, #16]
 8004d12:	07d8      	lsls	r0, r3, #31
 8004d14:	d5ea      	bpl.n	8004cec <_printf_float+0x194>
 8004d16:	1c4b      	adds	r3, r1, #1
 8004d18:	e7e7      	b.n	8004cea <_printf_float+0x192>
 8004d1a:	2900      	cmp	r1, #0
 8004d1c:	bfd4      	ite	le
 8004d1e:	f1c1 0202 	rsble	r2, r1, #2
 8004d22:	2201      	movgt	r2, #1
 8004d24:	4413      	add	r3, r2
 8004d26:	e7e0      	b.n	8004cea <_printf_float+0x192>
 8004d28:	6823      	ldr	r3, [r4, #0]
 8004d2a:	055a      	lsls	r2, r3, #21
 8004d2c:	d407      	bmi.n	8004d3e <_printf_float+0x1e6>
 8004d2e:	6923      	ldr	r3, [r4, #16]
 8004d30:	4642      	mov	r2, r8
 8004d32:	4631      	mov	r1, r6
 8004d34:	4628      	mov	r0, r5
 8004d36:	47b8      	blx	r7
 8004d38:	3001      	adds	r0, #1
 8004d3a:	d12b      	bne.n	8004d94 <_printf_float+0x23c>
 8004d3c:	e767      	b.n	8004c0e <_printf_float+0xb6>
 8004d3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d42:	f240 80dd 	bls.w	8004f00 <_printf_float+0x3a8>
 8004d46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f7fb fedb 	bl	8000b08 <__aeabi_dcmpeq>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	d033      	beq.n	8004dbe <_printf_float+0x266>
 8004d56:	4a37      	ldr	r2, [pc, #220]	@ (8004e34 <_printf_float+0x2dc>)
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4631      	mov	r1, r6
 8004d5c:	4628      	mov	r0, r5
 8004d5e:	47b8      	blx	r7
 8004d60:	3001      	adds	r0, #1
 8004d62:	f43f af54 	beq.w	8004c0e <_printf_float+0xb6>
 8004d66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004d6a:	4543      	cmp	r3, r8
 8004d6c:	db02      	blt.n	8004d74 <_printf_float+0x21c>
 8004d6e:	6823      	ldr	r3, [r4, #0]
 8004d70:	07d8      	lsls	r0, r3, #31
 8004d72:	d50f      	bpl.n	8004d94 <_printf_float+0x23c>
 8004d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d78:	4631      	mov	r1, r6
 8004d7a:	4628      	mov	r0, r5
 8004d7c:	47b8      	blx	r7
 8004d7e:	3001      	adds	r0, #1
 8004d80:	f43f af45 	beq.w	8004c0e <_printf_float+0xb6>
 8004d84:	f04f 0900 	mov.w	r9, #0
 8004d88:	f108 38ff 	add.w	r8, r8, #4294967295
 8004d8c:	f104 0a1a 	add.w	sl, r4, #26
 8004d90:	45c8      	cmp	r8, r9
 8004d92:	dc09      	bgt.n	8004da8 <_printf_float+0x250>
 8004d94:	6823      	ldr	r3, [r4, #0]
 8004d96:	079b      	lsls	r3, r3, #30
 8004d98:	f100 8103 	bmi.w	8004fa2 <_printf_float+0x44a>
 8004d9c:	68e0      	ldr	r0, [r4, #12]
 8004d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004da0:	4298      	cmp	r0, r3
 8004da2:	bfb8      	it	lt
 8004da4:	4618      	movlt	r0, r3
 8004da6:	e734      	b.n	8004c12 <_printf_float+0xba>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4652      	mov	r2, sl
 8004dac:	4631      	mov	r1, r6
 8004dae:	4628      	mov	r0, r5
 8004db0:	47b8      	blx	r7
 8004db2:	3001      	adds	r0, #1
 8004db4:	f43f af2b 	beq.w	8004c0e <_printf_float+0xb6>
 8004db8:	f109 0901 	add.w	r9, r9, #1
 8004dbc:	e7e8      	b.n	8004d90 <_printf_float+0x238>
 8004dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	dc39      	bgt.n	8004e38 <_printf_float+0x2e0>
 8004dc4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e34 <_printf_float+0x2dc>)
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4631      	mov	r1, r6
 8004dca:	4628      	mov	r0, r5
 8004dcc:	47b8      	blx	r7
 8004dce:	3001      	adds	r0, #1
 8004dd0:	f43f af1d 	beq.w	8004c0e <_printf_float+0xb6>
 8004dd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004dd8:	ea59 0303 	orrs.w	r3, r9, r3
 8004ddc:	d102      	bne.n	8004de4 <_printf_float+0x28c>
 8004dde:	6823      	ldr	r3, [r4, #0]
 8004de0:	07d9      	lsls	r1, r3, #31
 8004de2:	d5d7      	bpl.n	8004d94 <_printf_float+0x23c>
 8004de4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004de8:	4631      	mov	r1, r6
 8004dea:	4628      	mov	r0, r5
 8004dec:	47b8      	blx	r7
 8004dee:	3001      	adds	r0, #1
 8004df0:	f43f af0d 	beq.w	8004c0e <_printf_float+0xb6>
 8004df4:	f04f 0a00 	mov.w	sl, #0
 8004df8:	f104 0b1a 	add.w	fp, r4, #26
 8004dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dfe:	425b      	negs	r3, r3
 8004e00:	4553      	cmp	r3, sl
 8004e02:	dc01      	bgt.n	8004e08 <_printf_float+0x2b0>
 8004e04:	464b      	mov	r3, r9
 8004e06:	e793      	b.n	8004d30 <_printf_float+0x1d8>
 8004e08:	2301      	movs	r3, #1
 8004e0a:	465a      	mov	r2, fp
 8004e0c:	4631      	mov	r1, r6
 8004e0e:	4628      	mov	r0, r5
 8004e10:	47b8      	blx	r7
 8004e12:	3001      	adds	r0, #1
 8004e14:	f43f aefb 	beq.w	8004c0e <_printf_float+0xb6>
 8004e18:	f10a 0a01 	add.w	sl, sl, #1
 8004e1c:	e7ee      	b.n	8004dfc <_printf_float+0x2a4>
 8004e1e:	bf00      	nop
 8004e20:	7fefffff 	.word	0x7fefffff
 8004e24:	0800734c 	.word	0x0800734c
 8004e28:	08007348 	.word	0x08007348
 8004e2c:	08007354 	.word	0x08007354
 8004e30:	08007350 	.word	0x08007350
 8004e34:	08007358 	.word	0x08007358
 8004e38:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e3a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e3e:	4553      	cmp	r3, sl
 8004e40:	bfa8      	it	ge
 8004e42:	4653      	movge	r3, sl
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	4699      	mov	r9, r3
 8004e48:	dc36      	bgt.n	8004eb8 <_printf_float+0x360>
 8004e4a:	f04f 0b00 	mov.w	fp, #0
 8004e4e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e52:	f104 021a 	add.w	r2, r4, #26
 8004e56:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004e58:	9306      	str	r3, [sp, #24]
 8004e5a:	eba3 0309 	sub.w	r3, r3, r9
 8004e5e:	455b      	cmp	r3, fp
 8004e60:	dc31      	bgt.n	8004ec6 <_printf_float+0x36e>
 8004e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e64:	459a      	cmp	sl, r3
 8004e66:	dc3a      	bgt.n	8004ede <_printf_float+0x386>
 8004e68:	6823      	ldr	r3, [r4, #0]
 8004e6a:	07da      	lsls	r2, r3, #31
 8004e6c:	d437      	bmi.n	8004ede <_printf_float+0x386>
 8004e6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e70:	ebaa 0903 	sub.w	r9, sl, r3
 8004e74:	9b06      	ldr	r3, [sp, #24]
 8004e76:	ebaa 0303 	sub.w	r3, sl, r3
 8004e7a:	4599      	cmp	r9, r3
 8004e7c:	bfa8      	it	ge
 8004e7e:	4699      	movge	r9, r3
 8004e80:	f1b9 0f00 	cmp.w	r9, #0
 8004e84:	dc33      	bgt.n	8004eee <_printf_float+0x396>
 8004e86:	f04f 0800 	mov.w	r8, #0
 8004e8a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004e8e:	f104 0b1a 	add.w	fp, r4, #26
 8004e92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e94:	ebaa 0303 	sub.w	r3, sl, r3
 8004e98:	eba3 0309 	sub.w	r3, r3, r9
 8004e9c:	4543      	cmp	r3, r8
 8004e9e:	f77f af79 	ble.w	8004d94 <_printf_float+0x23c>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	465a      	mov	r2, fp
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4628      	mov	r0, r5
 8004eaa:	47b8      	blx	r7
 8004eac:	3001      	adds	r0, #1
 8004eae:	f43f aeae 	beq.w	8004c0e <_printf_float+0xb6>
 8004eb2:	f108 0801 	add.w	r8, r8, #1
 8004eb6:	e7ec      	b.n	8004e92 <_printf_float+0x33a>
 8004eb8:	4642      	mov	r2, r8
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	d1c2      	bne.n	8004e4a <_printf_float+0x2f2>
 8004ec4:	e6a3      	b.n	8004c0e <_printf_float+0xb6>
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	4631      	mov	r1, r6
 8004eca:	4628      	mov	r0, r5
 8004ecc:	9206      	str	r2, [sp, #24]
 8004ece:	47b8      	blx	r7
 8004ed0:	3001      	adds	r0, #1
 8004ed2:	f43f ae9c 	beq.w	8004c0e <_printf_float+0xb6>
 8004ed6:	9a06      	ldr	r2, [sp, #24]
 8004ed8:	f10b 0b01 	add.w	fp, fp, #1
 8004edc:	e7bb      	b.n	8004e56 <_printf_float+0x2fe>
 8004ede:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ee2:	4631      	mov	r1, r6
 8004ee4:	4628      	mov	r0, r5
 8004ee6:	47b8      	blx	r7
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d1c0      	bne.n	8004e6e <_printf_float+0x316>
 8004eec:	e68f      	b.n	8004c0e <_printf_float+0xb6>
 8004eee:	9a06      	ldr	r2, [sp, #24]
 8004ef0:	464b      	mov	r3, r9
 8004ef2:	4442      	add	r2, r8
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4628      	mov	r0, r5
 8004ef8:	47b8      	blx	r7
 8004efa:	3001      	adds	r0, #1
 8004efc:	d1c3      	bne.n	8004e86 <_printf_float+0x32e>
 8004efe:	e686      	b.n	8004c0e <_printf_float+0xb6>
 8004f00:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004f04:	f1ba 0f01 	cmp.w	sl, #1
 8004f08:	dc01      	bgt.n	8004f0e <_printf_float+0x3b6>
 8004f0a:	07db      	lsls	r3, r3, #31
 8004f0c:	d536      	bpl.n	8004f7c <_printf_float+0x424>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4642      	mov	r2, r8
 8004f12:	4631      	mov	r1, r6
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b8      	blx	r7
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f43f ae78 	beq.w	8004c0e <_printf_float+0xb6>
 8004f1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f22:	4631      	mov	r1, r6
 8004f24:	4628      	mov	r0, r5
 8004f26:	47b8      	blx	r7
 8004f28:	3001      	adds	r0, #1
 8004f2a:	f43f ae70 	beq.w	8004c0e <_printf_float+0xb6>
 8004f2e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004f32:	2200      	movs	r2, #0
 8004f34:	2300      	movs	r3, #0
 8004f36:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f3a:	f7fb fde5 	bl	8000b08 <__aeabi_dcmpeq>
 8004f3e:	b9c0      	cbnz	r0, 8004f72 <_printf_float+0x41a>
 8004f40:	4653      	mov	r3, sl
 8004f42:	f108 0201 	add.w	r2, r8, #1
 8004f46:	4631      	mov	r1, r6
 8004f48:	4628      	mov	r0, r5
 8004f4a:	47b8      	blx	r7
 8004f4c:	3001      	adds	r0, #1
 8004f4e:	d10c      	bne.n	8004f6a <_printf_float+0x412>
 8004f50:	e65d      	b.n	8004c0e <_printf_float+0xb6>
 8004f52:	2301      	movs	r3, #1
 8004f54:	465a      	mov	r2, fp
 8004f56:	4631      	mov	r1, r6
 8004f58:	4628      	mov	r0, r5
 8004f5a:	47b8      	blx	r7
 8004f5c:	3001      	adds	r0, #1
 8004f5e:	f43f ae56 	beq.w	8004c0e <_printf_float+0xb6>
 8004f62:	f108 0801 	add.w	r8, r8, #1
 8004f66:	45d0      	cmp	r8, sl
 8004f68:	dbf3      	blt.n	8004f52 <_printf_float+0x3fa>
 8004f6a:	464b      	mov	r3, r9
 8004f6c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004f70:	e6df      	b.n	8004d32 <_printf_float+0x1da>
 8004f72:	f04f 0800 	mov.w	r8, #0
 8004f76:	f104 0b1a 	add.w	fp, r4, #26
 8004f7a:	e7f4      	b.n	8004f66 <_printf_float+0x40e>
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	4642      	mov	r2, r8
 8004f80:	e7e1      	b.n	8004f46 <_printf_float+0x3ee>
 8004f82:	2301      	movs	r3, #1
 8004f84:	464a      	mov	r2, r9
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	f43f ae3e 	beq.w	8004c0e <_printf_float+0xb6>
 8004f92:	f108 0801 	add.w	r8, r8, #1
 8004f96:	68e3      	ldr	r3, [r4, #12]
 8004f98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004f9a:	1a5b      	subs	r3, r3, r1
 8004f9c:	4543      	cmp	r3, r8
 8004f9e:	dcf0      	bgt.n	8004f82 <_printf_float+0x42a>
 8004fa0:	e6fc      	b.n	8004d9c <_printf_float+0x244>
 8004fa2:	f04f 0800 	mov.w	r8, #0
 8004fa6:	f104 0919 	add.w	r9, r4, #25
 8004faa:	e7f4      	b.n	8004f96 <_printf_float+0x43e>

08004fac <_printf_common>:
 8004fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fb0:	4616      	mov	r6, r2
 8004fb2:	4698      	mov	r8, r3
 8004fb4:	688a      	ldr	r2, [r1, #8]
 8004fb6:	690b      	ldr	r3, [r1, #16]
 8004fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	bfb8      	it	lt
 8004fc0:	4613      	movlt	r3, r2
 8004fc2:	6033      	str	r3, [r6, #0]
 8004fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fc8:	4607      	mov	r7, r0
 8004fca:	460c      	mov	r4, r1
 8004fcc:	b10a      	cbz	r2, 8004fd2 <_printf_common+0x26>
 8004fce:	3301      	adds	r3, #1
 8004fd0:	6033      	str	r3, [r6, #0]
 8004fd2:	6823      	ldr	r3, [r4, #0]
 8004fd4:	0699      	lsls	r1, r3, #26
 8004fd6:	bf42      	ittt	mi
 8004fd8:	6833      	ldrmi	r3, [r6, #0]
 8004fda:	3302      	addmi	r3, #2
 8004fdc:	6033      	strmi	r3, [r6, #0]
 8004fde:	6825      	ldr	r5, [r4, #0]
 8004fe0:	f015 0506 	ands.w	r5, r5, #6
 8004fe4:	d106      	bne.n	8004ff4 <_printf_common+0x48>
 8004fe6:	f104 0a19 	add.w	sl, r4, #25
 8004fea:	68e3      	ldr	r3, [r4, #12]
 8004fec:	6832      	ldr	r2, [r6, #0]
 8004fee:	1a9b      	subs	r3, r3, r2
 8004ff0:	42ab      	cmp	r3, r5
 8004ff2:	dc26      	bgt.n	8005042 <_printf_common+0x96>
 8004ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ff8:	6822      	ldr	r2, [r4, #0]
 8004ffa:	3b00      	subs	r3, #0
 8004ffc:	bf18      	it	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	0692      	lsls	r2, r2, #26
 8005002:	d42b      	bmi.n	800505c <_printf_common+0xb0>
 8005004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005008:	4641      	mov	r1, r8
 800500a:	4638      	mov	r0, r7
 800500c:	47c8      	blx	r9
 800500e:	3001      	adds	r0, #1
 8005010:	d01e      	beq.n	8005050 <_printf_common+0xa4>
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	6922      	ldr	r2, [r4, #16]
 8005016:	f003 0306 	and.w	r3, r3, #6
 800501a:	2b04      	cmp	r3, #4
 800501c:	bf02      	ittt	eq
 800501e:	68e5      	ldreq	r5, [r4, #12]
 8005020:	6833      	ldreq	r3, [r6, #0]
 8005022:	1aed      	subeq	r5, r5, r3
 8005024:	68a3      	ldr	r3, [r4, #8]
 8005026:	bf0c      	ite	eq
 8005028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800502c:	2500      	movne	r5, #0
 800502e:	4293      	cmp	r3, r2
 8005030:	bfc4      	itt	gt
 8005032:	1a9b      	subgt	r3, r3, r2
 8005034:	18ed      	addgt	r5, r5, r3
 8005036:	2600      	movs	r6, #0
 8005038:	341a      	adds	r4, #26
 800503a:	42b5      	cmp	r5, r6
 800503c:	d11a      	bne.n	8005074 <_printf_common+0xc8>
 800503e:	2000      	movs	r0, #0
 8005040:	e008      	b.n	8005054 <_printf_common+0xa8>
 8005042:	2301      	movs	r3, #1
 8005044:	4652      	mov	r2, sl
 8005046:	4641      	mov	r1, r8
 8005048:	4638      	mov	r0, r7
 800504a:	47c8      	blx	r9
 800504c:	3001      	adds	r0, #1
 800504e:	d103      	bne.n	8005058 <_printf_common+0xac>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005058:	3501      	adds	r5, #1
 800505a:	e7c6      	b.n	8004fea <_printf_common+0x3e>
 800505c:	18e1      	adds	r1, r4, r3
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	2030      	movs	r0, #48	@ 0x30
 8005062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005066:	4422      	add	r2, r4
 8005068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800506c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005070:	3302      	adds	r3, #2
 8005072:	e7c7      	b.n	8005004 <_printf_common+0x58>
 8005074:	2301      	movs	r3, #1
 8005076:	4622      	mov	r2, r4
 8005078:	4641      	mov	r1, r8
 800507a:	4638      	mov	r0, r7
 800507c:	47c8      	blx	r9
 800507e:	3001      	adds	r0, #1
 8005080:	d0e6      	beq.n	8005050 <_printf_common+0xa4>
 8005082:	3601      	adds	r6, #1
 8005084:	e7d9      	b.n	800503a <_printf_common+0x8e>
	...

08005088 <_printf_i>:
 8005088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800508c:	7e0f      	ldrb	r7, [r1, #24]
 800508e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005090:	2f78      	cmp	r7, #120	@ 0x78
 8005092:	4691      	mov	r9, r2
 8005094:	4680      	mov	r8, r0
 8005096:	460c      	mov	r4, r1
 8005098:	469a      	mov	sl, r3
 800509a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800509e:	d807      	bhi.n	80050b0 <_printf_i+0x28>
 80050a0:	2f62      	cmp	r7, #98	@ 0x62
 80050a2:	d80a      	bhi.n	80050ba <_printf_i+0x32>
 80050a4:	2f00      	cmp	r7, #0
 80050a6:	f000 80d1 	beq.w	800524c <_printf_i+0x1c4>
 80050aa:	2f58      	cmp	r7, #88	@ 0x58
 80050ac:	f000 80b8 	beq.w	8005220 <_printf_i+0x198>
 80050b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050b8:	e03a      	b.n	8005130 <_printf_i+0xa8>
 80050ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050be:	2b15      	cmp	r3, #21
 80050c0:	d8f6      	bhi.n	80050b0 <_printf_i+0x28>
 80050c2:	a101      	add	r1, pc, #4	@ (adr r1, 80050c8 <_printf_i+0x40>)
 80050c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050c8:	08005121 	.word	0x08005121
 80050cc:	08005135 	.word	0x08005135
 80050d0:	080050b1 	.word	0x080050b1
 80050d4:	080050b1 	.word	0x080050b1
 80050d8:	080050b1 	.word	0x080050b1
 80050dc:	080050b1 	.word	0x080050b1
 80050e0:	08005135 	.word	0x08005135
 80050e4:	080050b1 	.word	0x080050b1
 80050e8:	080050b1 	.word	0x080050b1
 80050ec:	080050b1 	.word	0x080050b1
 80050f0:	080050b1 	.word	0x080050b1
 80050f4:	08005233 	.word	0x08005233
 80050f8:	0800515f 	.word	0x0800515f
 80050fc:	080051ed 	.word	0x080051ed
 8005100:	080050b1 	.word	0x080050b1
 8005104:	080050b1 	.word	0x080050b1
 8005108:	08005255 	.word	0x08005255
 800510c:	080050b1 	.word	0x080050b1
 8005110:	0800515f 	.word	0x0800515f
 8005114:	080050b1 	.word	0x080050b1
 8005118:	080050b1 	.word	0x080050b1
 800511c:	080051f5 	.word	0x080051f5
 8005120:	6833      	ldr	r3, [r6, #0]
 8005122:	1d1a      	adds	r2, r3, #4
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	6032      	str	r2, [r6, #0]
 8005128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800512c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005130:	2301      	movs	r3, #1
 8005132:	e09c      	b.n	800526e <_printf_i+0x1e6>
 8005134:	6833      	ldr	r3, [r6, #0]
 8005136:	6820      	ldr	r0, [r4, #0]
 8005138:	1d19      	adds	r1, r3, #4
 800513a:	6031      	str	r1, [r6, #0]
 800513c:	0606      	lsls	r6, r0, #24
 800513e:	d501      	bpl.n	8005144 <_printf_i+0xbc>
 8005140:	681d      	ldr	r5, [r3, #0]
 8005142:	e003      	b.n	800514c <_printf_i+0xc4>
 8005144:	0645      	lsls	r5, r0, #25
 8005146:	d5fb      	bpl.n	8005140 <_printf_i+0xb8>
 8005148:	f9b3 5000 	ldrsh.w	r5, [r3]
 800514c:	2d00      	cmp	r5, #0
 800514e:	da03      	bge.n	8005158 <_printf_i+0xd0>
 8005150:	232d      	movs	r3, #45	@ 0x2d
 8005152:	426d      	negs	r5, r5
 8005154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005158:	4858      	ldr	r0, [pc, #352]	@ (80052bc <_printf_i+0x234>)
 800515a:	230a      	movs	r3, #10
 800515c:	e011      	b.n	8005182 <_printf_i+0xfa>
 800515e:	6821      	ldr	r1, [r4, #0]
 8005160:	6833      	ldr	r3, [r6, #0]
 8005162:	0608      	lsls	r0, r1, #24
 8005164:	f853 5b04 	ldr.w	r5, [r3], #4
 8005168:	d402      	bmi.n	8005170 <_printf_i+0xe8>
 800516a:	0649      	lsls	r1, r1, #25
 800516c:	bf48      	it	mi
 800516e:	b2ad      	uxthmi	r5, r5
 8005170:	2f6f      	cmp	r7, #111	@ 0x6f
 8005172:	4852      	ldr	r0, [pc, #328]	@ (80052bc <_printf_i+0x234>)
 8005174:	6033      	str	r3, [r6, #0]
 8005176:	bf14      	ite	ne
 8005178:	230a      	movne	r3, #10
 800517a:	2308      	moveq	r3, #8
 800517c:	2100      	movs	r1, #0
 800517e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005182:	6866      	ldr	r6, [r4, #4]
 8005184:	60a6      	str	r6, [r4, #8]
 8005186:	2e00      	cmp	r6, #0
 8005188:	db05      	blt.n	8005196 <_printf_i+0x10e>
 800518a:	6821      	ldr	r1, [r4, #0]
 800518c:	432e      	orrs	r6, r5
 800518e:	f021 0104 	bic.w	r1, r1, #4
 8005192:	6021      	str	r1, [r4, #0]
 8005194:	d04b      	beq.n	800522e <_printf_i+0x1a6>
 8005196:	4616      	mov	r6, r2
 8005198:	fbb5 f1f3 	udiv	r1, r5, r3
 800519c:	fb03 5711 	mls	r7, r3, r1, r5
 80051a0:	5dc7      	ldrb	r7, [r0, r7]
 80051a2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051a6:	462f      	mov	r7, r5
 80051a8:	42bb      	cmp	r3, r7
 80051aa:	460d      	mov	r5, r1
 80051ac:	d9f4      	bls.n	8005198 <_printf_i+0x110>
 80051ae:	2b08      	cmp	r3, #8
 80051b0:	d10b      	bne.n	80051ca <_printf_i+0x142>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	07df      	lsls	r7, r3, #31
 80051b6:	d508      	bpl.n	80051ca <_printf_i+0x142>
 80051b8:	6923      	ldr	r3, [r4, #16]
 80051ba:	6861      	ldr	r1, [r4, #4]
 80051bc:	4299      	cmp	r1, r3
 80051be:	bfde      	ittt	le
 80051c0:	2330      	movle	r3, #48	@ 0x30
 80051c2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051c6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051ca:	1b92      	subs	r2, r2, r6
 80051cc:	6122      	str	r2, [r4, #16]
 80051ce:	f8cd a000 	str.w	sl, [sp]
 80051d2:	464b      	mov	r3, r9
 80051d4:	aa03      	add	r2, sp, #12
 80051d6:	4621      	mov	r1, r4
 80051d8:	4640      	mov	r0, r8
 80051da:	f7ff fee7 	bl	8004fac <_printf_common>
 80051de:	3001      	adds	r0, #1
 80051e0:	d14a      	bne.n	8005278 <_printf_i+0x1f0>
 80051e2:	f04f 30ff 	mov.w	r0, #4294967295
 80051e6:	b004      	add	sp, #16
 80051e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	f043 0320 	orr.w	r3, r3, #32
 80051f2:	6023      	str	r3, [r4, #0]
 80051f4:	4832      	ldr	r0, [pc, #200]	@ (80052c0 <_printf_i+0x238>)
 80051f6:	2778      	movs	r7, #120	@ 0x78
 80051f8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80051fc:	6823      	ldr	r3, [r4, #0]
 80051fe:	6831      	ldr	r1, [r6, #0]
 8005200:	061f      	lsls	r7, r3, #24
 8005202:	f851 5b04 	ldr.w	r5, [r1], #4
 8005206:	d402      	bmi.n	800520e <_printf_i+0x186>
 8005208:	065f      	lsls	r7, r3, #25
 800520a:	bf48      	it	mi
 800520c:	b2ad      	uxthmi	r5, r5
 800520e:	6031      	str	r1, [r6, #0]
 8005210:	07d9      	lsls	r1, r3, #31
 8005212:	bf44      	itt	mi
 8005214:	f043 0320 	orrmi.w	r3, r3, #32
 8005218:	6023      	strmi	r3, [r4, #0]
 800521a:	b11d      	cbz	r5, 8005224 <_printf_i+0x19c>
 800521c:	2310      	movs	r3, #16
 800521e:	e7ad      	b.n	800517c <_printf_i+0xf4>
 8005220:	4826      	ldr	r0, [pc, #152]	@ (80052bc <_printf_i+0x234>)
 8005222:	e7e9      	b.n	80051f8 <_printf_i+0x170>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	f023 0320 	bic.w	r3, r3, #32
 800522a:	6023      	str	r3, [r4, #0]
 800522c:	e7f6      	b.n	800521c <_printf_i+0x194>
 800522e:	4616      	mov	r6, r2
 8005230:	e7bd      	b.n	80051ae <_printf_i+0x126>
 8005232:	6833      	ldr	r3, [r6, #0]
 8005234:	6825      	ldr	r5, [r4, #0]
 8005236:	6961      	ldr	r1, [r4, #20]
 8005238:	1d18      	adds	r0, r3, #4
 800523a:	6030      	str	r0, [r6, #0]
 800523c:	062e      	lsls	r6, r5, #24
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	d501      	bpl.n	8005246 <_printf_i+0x1be>
 8005242:	6019      	str	r1, [r3, #0]
 8005244:	e002      	b.n	800524c <_printf_i+0x1c4>
 8005246:	0668      	lsls	r0, r5, #25
 8005248:	d5fb      	bpl.n	8005242 <_printf_i+0x1ba>
 800524a:	8019      	strh	r1, [r3, #0]
 800524c:	2300      	movs	r3, #0
 800524e:	6123      	str	r3, [r4, #16]
 8005250:	4616      	mov	r6, r2
 8005252:	e7bc      	b.n	80051ce <_printf_i+0x146>
 8005254:	6833      	ldr	r3, [r6, #0]
 8005256:	1d1a      	adds	r2, r3, #4
 8005258:	6032      	str	r2, [r6, #0]
 800525a:	681e      	ldr	r6, [r3, #0]
 800525c:	6862      	ldr	r2, [r4, #4]
 800525e:	2100      	movs	r1, #0
 8005260:	4630      	mov	r0, r6
 8005262:	f7fa ffd5 	bl	8000210 <memchr>
 8005266:	b108      	cbz	r0, 800526c <_printf_i+0x1e4>
 8005268:	1b80      	subs	r0, r0, r6
 800526a:	6060      	str	r0, [r4, #4]
 800526c:	6863      	ldr	r3, [r4, #4]
 800526e:	6123      	str	r3, [r4, #16]
 8005270:	2300      	movs	r3, #0
 8005272:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005276:	e7aa      	b.n	80051ce <_printf_i+0x146>
 8005278:	6923      	ldr	r3, [r4, #16]
 800527a:	4632      	mov	r2, r6
 800527c:	4649      	mov	r1, r9
 800527e:	4640      	mov	r0, r8
 8005280:	47d0      	blx	sl
 8005282:	3001      	adds	r0, #1
 8005284:	d0ad      	beq.n	80051e2 <_printf_i+0x15a>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	079b      	lsls	r3, r3, #30
 800528a:	d413      	bmi.n	80052b4 <_printf_i+0x22c>
 800528c:	68e0      	ldr	r0, [r4, #12]
 800528e:	9b03      	ldr	r3, [sp, #12]
 8005290:	4298      	cmp	r0, r3
 8005292:	bfb8      	it	lt
 8005294:	4618      	movlt	r0, r3
 8005296:	e7a6      	b.n	80051e6 <_printf_i+0x15e>
 8005298:	2301      	movs	r3, #1
 800529a:	4632      	mov	r2, r6
 800529c:	4649      	mov	r1, r9
 800529e:	4640      	mov	r0, r8
 80052a0:	47d0      	blx	sl
 80052a2:	3001      	adds	r0, #1
 80052a4:	d09d      	beq.n	80051e2 <_printf_i+0x15a>
 80052a6:	3501      	adds	r5, #1
 80052a8:	68e3      	ldr	r3, [r4, #12]
 80052aa:	9903      	ldr	r1, [sp, #12]
 80052ac:	1a5b      	subs	r3, r3, r1
 80052ae:	42ab      	cmp	r3, r5
 80052b0:	dcf2      	bgt.n	8005298 <_printf_i+0x210>
 80052b2:	e7eb      	b.n	800528c <_printf_i+0x204>
 80052b4:	2500      	movs	r5, #0
 80052b6:	f104 0619 	add.w	r6, r4, #25
 80052ba:	e7f5      	b.n	80052a8 <_printf_i+0x220>
 80052bc:	0800735a 	.word	0x0800735a
 80052c0:	0800736b 	.word	0x0800736b

080052c4 <std>:
 80052c4:	2300      	movs	r3, #0
 80052c6:	b510      	push	{r4, lr}
 80052c8:	4604      	mov	r4, r0
 80052ca:	e9c0 3300 	strd	r3, r3, [r0]
 80052ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052d2:	6083      	str	r3, [r0, #8]
 80052d4:	8181      	strh	r1, [r0, #12]
 80052d6:	6643      	str	r3, [r0, #100]	@ 0x64
 80052d8:	81c2      	strh	r2, [r0, #14]
 80052da:	6183      	str	r3, [r0, #24]
 80052dc:	4619      	mov	r1, r3
 80052de:	2208      	movs	r2, #8
 80052e0:	305c      	adds	r0, #92	@ 0x5c
 80052e2:	f000 f8f4 	bl	80054ce <memset>
 80052e6:	4b0d      	ldr	r3, [pc, #52]	@ (800531c <std+0x58>)
 80052e8:	6263      	str	r3, [r4, #36]	@ 0x24
 80052ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005320 <std+0x5c>)
 80052ec:	62a3      	str	r3, [r4, #40]	@ 0x28
 80052ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <std+0x60>)
 80052f0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80052f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005328 <std+0x64>)
 80052f4:	6323      	str	r3, [r4, #48]	@ 0x30
 80052f6:	4b0d      	ldr	r3, [pc, #52]	@ (800532c <std+0x68>)
 80052f8:	6224      	str	r4, [r4, #32]
 80052fa:	429c      	cmp	r4, r3
 80052fc:	d006      	beq.n	800530c <std+0x48>
 80052fe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005302:	4294      	cmp	r4, r2
 8005304:	d002      	beq.n	800530c <std+0x48>
 8005306:	33d0      	adds	r3, #208	@ 0xd0
 8005308:	429c      	cmp	r4, r3
 800530a:	d105      	bne.n	8005318 <std+0x54>
 800530c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005314:	f000 b958 	b.w	80055c8 <__retarget_lock_init_recursive>
 8005318:	bd10      	pop	{r4, pc}
 800531a:	bf00      	nop
 800531c:	08005449 	.word	0x08005449
 8005320:	0800546b 	.word	0x0800546b
 8005324:	080054a3 	.word	0x080054a3
 8005328:	080054c7 	.word	0x080054c7
 800532c:	2000038c 	.word	0x2000038c

08005330 <stdio_exit_handler>:
 8005330:	4a02      	ldr	r2, [pc, #8]	@ (800533c <stdio_exit_handler+0xc>)
 8005332:	4903      	ldr	r1, [pc, #12]	@ (8005340 <stdio_exit_handler+0x10>)
 8005334:	4803      	ldr	r0, [pc, #12]	@ (8005344 <stdio_exit_handler+0x14>)
 8005336:	f000 b869 	b.w	800540c <_fwalk_sglue>
 800533a:	bf00      	nop
 800533c:	2000000c 	.word	0x2000000c
 8005340:	08006f01 	.word	0x08006f01
 8005344:	2000001c 	.word	0x2000001c

08005348 <cleanup_stdio>:
 8005348:	6841      	ldr	r1, [r0, #4]
 800534a:	4b0c      	ldr	r3, [pc, #48]	@ (800537c <cleanup_stdio+0x34>)
 800534c:	4299      	cmp	r1, r3
 800534e:	b510      	push	{r4, lr}
 8005350:	4604      	mov	r4, r0
 8005352:	d001      	beq.n	8005358 <cleanup_stdio+0x10>
 8005354:	f001 fdd4 	bl	8006f00 <_fflush_r>
 8005358:	68a1      	ldr	r1, [r4, #8]
 800535a:	4b09      	ldr	r3, [pc, #36]	@ (8005380 <cleanup_stdio+0x38>)
 800535c:	4299      	cmp	r1, r3
 800535e:	d002      	beq.n	8005366 <cleanup_stdio+0x1e>
 8005360:	4620      	mov	r0, r4
 8005362:	f001 fdcd 	bl	8006f00 <_fflush_r>
 8005366:	68e1      	ldr	r1, [r4, #12]
 8005368:	4b06      	ldr	r3, [pc, #24]	@ (8005384 <cleanup_stdio+0x3c>)
 800536a:	4299      	cmp	r1, r3
 800536c:	d004      	beq.n	8005378 <cleanup_stdio+0x30>
 800536e:	4620      	mov	r0, r4
 8005370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005374:	f001 bdc4 	b.w	8006f00 <_fflush_r>
 8005378:	bd10      	pop	{r4, pc}
 800537a:	bf00      	nop
 800537c:	2000038c 	.word	0x2000038c
 8005380:	200003f4 	.word	0x200003f4
 8005384:	2000045c 	.word	0x2000045c

08005388 <global_stdio_init.part.0>:
 8005388:	b510      	push	{r4, lr}
 800538a:	4b0b      	ldr	r3, [pc, #44]	@ (80053b8 <global_stdio_init.part.0+0x30>)
 800538c:	4c0b      	ldr	r4, [pc, #44]	@ (80053bc <global_stdio_init.part.0+0x34>)
 800538e:	4a0c      	ldr	r2, [pc, #48]	@ (80053c0 <global_stdio_init.part.0+0x38>)
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	4620      	mov	r0, r4
 8005394:	2200      	movs	r2, #0
 8005396:	2104      	movs	r1, #4
 8005398:	f7ff ff94 	bl	80052c4 <std>
 800539c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80053a0:	2201      	movs	r2, #1
 80053a2:	2109      	movs	r1, #9
 80053a4:	f7ff ff8e 	bl	80052c4 <std>
 80053a8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80053ac:	2202      	movs	r2, #2
 80053ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053b2:	2112      	movs	r1, #18
 80053b4:	f7ff bf86 	b.w	80052c4 <std>
 80053b8:	200004c4 	.word	0x200004c4
 80053bc:	2000038c 	.word	0x2000038c
 80053c0:	08005331 	.word	0x08005331

080053c4 <__sfp_lock_acquire>:
 80053c4:	4801      	ldr	r0, [pc, #4]	@ (80053cc <__sfp_lock_acquire+0x8>)
 80053c6:	f000 b900 	b.w	80055ca <__retarget_lock_acquire_recursive>
 80053ca:	bf00      	nop
 80053cc:	200004cd 	.word	0x200004cd

080053d0 <__sfp_lock_release>:
 80053d0:	4801      	ldr	r0, [pc, #4]	@ (80053d8 <__sfp_lock_release+0x8>)
 80053d2:	f000 b8fb 	b.w	80055cc <__retarget_lock_release_recursive>
 80053d6:	bf00      	nop
 80053d8:	200004cd 	.word	0x200004cd

080053dc <__sinit>:
 80053dc:	b510      	push	{r4, lr}
 80053de:	4604      	mov	r4, r0
 80053e0:	f7ff fff0 	bl	80053c4 <__sfp_lock_acquire>
 80053e4:	6a23      	ldr	r3, [r4, #32]
 80053e6:	b11b      	cbz	r3, 80053f0 <__sinit+0x14>
 80053e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053ec:	f7ff bff0 	b.w	80053d0 <__sfp_lock_release>
 80053f0:	4b04      	ldr	r3, [pc, #16]	@ (8005404 <__sinit+0x28>)
 80053f2:	6223      	str	r3, [r4, #32]
 80053f4:	4b04      	ldr	r3, [pc, #16]	@ (8005408 <__sinit+0x2c>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d1f5      	bne.n	80053e8 <__sinit+0xc>
 80053fc:	f7ff ffc4 	bl	8005388 <global_stdio_init.part.0>
 8005400:	e7f2      	b.n	80053e8 <__sinit+0xc>
 8005402:	bf00      	nop
 8005404:	08005349 	.word	0x08005349
 8005408:	200004c4 	.word	0x200004c4

0800540c <_fwalk_sglue>:
 800540c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005410:	4607      	mov	r7, r0
 8005412:	4688      	mov	r8, r1
 8005414:	4614      	mov	r4, r2
 8005416:	2600      	movs	r6, #0
 8005418:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800541c:	f1b9 0901 	subs.w	r9, r9, #1
 8005420:	d505      	bpl.n	800542e <_fwalk_sglue+0x22>
 8005422:	6824      	ldr	r4, [r4, #0]
 8005424:	2c00      	cmp	r4, #0
 8005426:	d1f7      	bne.n	8005418 <_fwalk_sglue+0xc>
 8005428:	4630      	mov	r0, r6
 800542a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800542e:	89ab      	ldrh	r3, [r5, #12]
 8005430:	2b01      	cmp	r3, #1
 8005432:	d907      	bls.n	8005444 <_fwalk_sglue+0x38>
 8005434:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005438:	3301      	adds	r3, #1
 800543a:	d003      	beq.n	8005444 <_fwalk_sglue+0x38>
 800543c:	4629      	mov	r1, r5
 800543e:	4638      	mov	r0, r7
 8005440:	47c0      	blx	r8
 8005442:	4306      	orrs	r6, r0
 8005444:	3568      	adds	r5, #104	@ 0x68
 8005446:	e7e9      	b.n	800541c <_fwalk_sglue+0x10>

08005448 <__sread>:
 8005448:	b510      	push	{r4, lr}
 800544a:	460c      	mov	r4, r1
 800544c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005450:	f000 f86c 	bl	800552c <_read_r>
 8005454:	2800      	cmp	r0, #0
 8005456:	bfab      	itete	ge
 8005458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800545a:	89a3      	ldrhlt	r3, [r4, #12]
 800545c:	181b      	addge	r3, r3, r0
 800545e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005462:	bfac      	ite	ge
 8005464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005466:	81a3      	strhlt	r3, [r4, #12]
 8005468:	bd10      	pop	{r4, pc}

0800546a <__swrite>:
 800546a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800546e:	461f      	mov	r7, r3
 8005470:	898b      	ldrh	r3, [r1, #12]
 8005472:	05db      	lsls	r3, r3, #23
 8005474:	4605      	mov	r5, r0
 8005476:	460c      	mov	r4, r1
 8005478:	4616      	mov	r6, r2
 800547a:	d505      	bpl.n	8005488 <__swrite+0x1e>
 800547c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005480:	2302      	movs	r3, #2
 8005482:	2200      	movs	r2, #0
 8005484:	f000 f840 	bl	8005508 <_lseek_r>
 8005488:	89a3      	ldrh	r3, [r4, #12]
 800548a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800548e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005492:	81a3      	strh	r3, [r4, #12]
 8005494:	4632      	mov	r2, r6
 8005496:	463b      	mov	r3, r7
 8005498:	4628      	mov	r0, r5
 800549a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800549e:	f000 b857 	b.w	8005550 <_write_r>

080054a2 <__sseek>:
 80054a2:	b510      	push	{r4, lr}
 80054a4:	460c      	mov	r4, r1
 80054a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054aa:	f000 f82d 	bl	8005508 <_lseek_r>
 80054ae:	1c43      	adds	r3, r0, #1
 80054b0:	89a3      	ldrh	r3, [r4, #12]
 80054b2:	bf15      	itete	ne
 80054b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054be:	81a3      	strheq	r3, [r4, #12]
 80054c0:	bf18      	it	ne
 80054c2:	81a3      	strhne	r3, [r4, #12]
 80054c4:	bd10      	pop	{r4, pc}

080054c6 <__sclose>:
 80054c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054ca:	f000 b80d 	b.w	80054e8 <_close_r>

080054ce <memset>:
 80054ce:	4402      	add	r2, r0
 80054d0:	4603      	mov	r3, r0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d100      	bne.n	80054d8 <memset+0xa>
 80054d6:	4770      	bx	lr
 80054d8:	f803 1b01 	strb.w	r1, [r3], #1
 80054dc:	e7f9      	b.n	80054d2 <memset+0x4>
	...

080054e0 <_localeconv_r>:
 80054e0:	4800      	ldr	r0, [pc, #0]	@ (80054e4 <_localeconv_r+0x4>)
 80054e2:	4770      	bx	lr
 80054e4:	20000158 	.word	0x20000158

080054e8 <_close_r>:
 80054e8:	b538      	push	{r3, r4, r5, lr}
 80054ea:	4d06      	ldr	r5, [pc, #24]	@ (8005504 <_close_r+0x1c>)
 80054ec:	2300      	movs	r3, #0
 80054ee:	4604      	mov	r4, r0
 80054f0:	4608      	mov	r0, r1
 80054f2:	602b      	str	r3, [r5, #0]
 80054f4:	f7fc fa86 	bl	8001a04 <_close>
 80054f8:	1c43      	adds	r3, r0, #1
 80054fa:	d102      	bne.n	8005502 <_close_r+0x1a>
 80054fc:	682b      	ldr	r3, [r5, #0]
 80054fe:	b103      	cbz	r3, 8005502 <_close_r+0x1a>
 8005500:	6023      	str	r3, [r4, #0]
 8005502:	bd38      	pop	{r3, r4, r5, pc}
 8005504:	200004c8 	.word	0x200004c8

08005508 <_lseek_r>:
 8005508:	b538      	push	{r3, r4, r5, lr}
 800550a:	4d07      	ldr	r5, [pc, #28]	@ (8005528 <_lseek_r+0x20>)
 800550c:	4604      	mov	r4, r0
 800550e:	4608      	mov	r0, r1
 8005510:	4611      	mov	r1, r2
 8005512:	2200      	movs	r2, #0
 8005514:	602a      	str	r2, [r5, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	f7fc fa9b 	bl	8001a52 <_lseek>
 800551c:	1c43      	adds	r3, r0, #1
 800551e:	d102      	bne.n	8005526 <_lseek_r+0x1e>
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	b103      	cbz	r3, 8005526 <_lseek_r+0x1e>
 8005524:	6023      	str	r3, [r4, #0]
 8005526:	bd38      	pop	{r3, r4, r5, pc}
 8005528:	200004c8 	.word	0x200004c8

0800552c <_read_r>:
 800552c:	b538      	push	{r3, r4, r5, lr}
 800552e:	4d07      	ldr	r5, [pc, #28]	@ (800554c <_read_r+0x20>)
 8005530:	4604      	mov	r4, r0
 8005532:	4608      	mov	r0, r1
 8005534:	4611      	mov	r1, r2
 8005536:	2200      	movs	r2, #0
 8005538:	602a      	str	r2, [r5, #0]
 800553a:	461a      	mov	r2, r3
 800553c:	f7fc fa29 	bl	8001992 <_read>
 8005540:	1c43      	adds	r3, r0, #1
 8005542:	d102      	bne.n	800554a <_read_r+0x1e>
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	b103      	cbz	r3, 800554a <_read_r+0x1e>
 8005548:	6023      	str	r3, [r4, #0]
 800554a:	bd38      	pop	{r3, r4, r5, pc}
 800554c:	200004c8 	.word	0x200004c8

08005550 <_write_r>:
 8005550:	b538      	push	{r3, r4, r5, lr}
 8005552:	4d07      	ldr	r5, [pc, #28]	@ (8005570 <_write_r+0x20>)
 8005554:	4604      	mov	r4, r0
 8005556:	4608      	mov	r0, r1
 8005558:	4611      	mov	r1, r2
 800555a:	2200      	movs	r2, #0
 800555c:	602a      	str	r2, [r5, #0]
 800555e:	461a      	mov	r2, r3
 8005560:	f7fc fa34 	bl	80019cc <_write>
 8005564:	1c43      	adds	r3, r0, #1
 8005566:	d102      	bne.n	800556e <_write_r+0x1e>
 8005568:	682b      	ldr	r3, [r5, #0]
 800556a:	b103      	cbz	r3, 800556e <_write_r+0x1e>
 800556c:	6023      	str	r3, [r4, #0]
 800556e:	bd38      	pop	{r3, r4, r5, pc}
 8005570:	200004c8 	.word	0x200004c8

08005574 <__errno>:
 8005574:	4b01      	ldr	r3, [pc, #4]	@ (800557c <__errno+0x8>)
 8005576:	6818      	ldr	r0, [r3, #0]
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	20000018 	.word	0x20000018

08005580 <__libc_init_array>:
 8005580:	b570      	push	{r4, r5, r6, lr}
 8005582:	4d0d      	ldr	r5, [pc, #52]	@ (80055b8 <__libc_init_array+0x38>)
 8005584:	4c0d      	ldr	r4, [pc, #52]	@ (80055bc <__libc_init_array+0x3c>)
 8005586:	1b64      	subs	r4, r4, r5
 8005588:	10a4      	asrs	r4, r4, #2
 800558a:	2600      	movs	r6, #0
 800558c:	42a6      	cmp	r6, r4
 800558e:	d109      	bne.n	80055a4 <__libc_init_array+0x24>
 8005590:	4d0b      	ldr	r5, [pc, #44]	@ (80055c0 <__libc_init_array+0x40>)
 8005592:	4c0c      	ldr	r4, [pc, #48]	@ (80055c4 <__libc_init_array+0x44>)
 8005594:	f001 fec2 	bl	800731c <_init>
 8005598:	1b64      	subs	r4, r4, r5
 800559a:	10a4      	asrs	r4, r4, #2
 800559c:	2600      	movs	r6, #0
 800559e:	42a6      	cmp	r6, r4
 80055a0:	d105      	bne.n	80055ae <__libc_init_array+0x2e>
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
 80055a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80055a8:	4798      	blx	r3
 80055aa:	3601      	adds	r6, #1
 80055ac:	e7ee      	b.n	800558c <__libc_init_array+0xc>
 80055ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b2:	4798      	blx	r3
 80055b4:	3601      	adds	r6, #1
 80055b6:	e7f2      	b.n	800559e <__libc_init_array+0x1e>
 80055b8:	080076c4 	.word	0x080076c4
 80055bc:	080076c4 	.word	0x080076c4
 80055c0:	080076c4 	.word	0x080076c4
 80055c4:	080076c8 	.word	0x080076c8

080055c8 <__retarget_lock_init_recursive>:
 80055c8:	4770      	bx	lr

080055ca <__retarget_lock_acquire_recursive>:
 80055ca:	4770      	bx	lr

080055cc <__retarget_lock_release_recursive>:
 80055cc:	4770      	bx	lr

080055ce <quorem>:
 80055ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055d2:	6903      	ldr	r3, [r0, #16]
 80055d4:	690c      	ldr	r4, [r1, #16]
 80055d6:	42a3      	cmp	r3, r4
 80055d8:	4607      	mov	r7, r0
 80055da:	db7e      	blt.n	80056da <quorem+0x10c>
 80055dc:	3c01      	subs	r4, #1
 80055de:	f101 0814 	add.w	r8, r1, #20
 80055e2:	00a3      	lsls	r3, r4, #2
 80055e4:	f100 0514 	add.w	r5, r0, #20
 80055e8:	9300      	str	r3, [sp, #0]
 80055ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80055ee:	9301      	str	r3, [sp, #4]
 80055f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80055f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055f8:	3301      	adds	r3, #1
 80055fa:	429a      	cmp	r2, r3
 80055fc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005600:	fbb2 f6f3 	udiv	r6, r2, r3
 8005604:	d32e      	bcc.n	8005664 <quorem+0x96>
 8005606:	f04f 0a00 	mov.w	sl, #0
 800560a:	46c4      	mov	ip, r8
 800560c:	46ae      	mov	lr, r5
 800560e:	46d3      	mov	fp, sl
 8005610:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005614:	b298      	uxth	r0, r3
 8005616:	fb06 a000 	mla	r0, r6, r0, sl
 800561a:	0c02      	lsrs	r2, r0, #16
 800561c:	0c1b      	lsrs	r3, r3, #16
 800561e:	fb06 2303 	mla	r3, r6, r3, r2
 8005622:	f8de 2000 	ldr.w	r2, [lr]
 8005626:	b280      	uxth	r0, r0
 8005628:	b292      	uxth	r2, r2
 800562a:	1a12      	subs	r2, r2, r0
 800562c:	445a      	add	r2, fp
 800562e:	f8de 0000 	ldr.w	r0, [lr]
 8005632:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005636:	b29b      	uxth	r3, r3
 8005638:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800563c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005640:	b292      	uxth	r2, r2
 8005642:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005646:	45e1      	cmp	r9, ip
 8005648:	f84e 2b04 	str.w	r2, [lr], #4
 800564c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005650:	d2de      	bcs.n	8005610 <quorem+0x42>
 8005652:	9b00      	ldr	r3, [sp, #0]
 8005654:	58eb      	ldr	r3, [r5, r3]
 8005656:	b92b      	cbnz	r3, 8005664 <quorem+0x96>
 8005658:	9b01      	ldr	r3, [sp, #4]
 800565a:	3b04      	subs	r3, #4
 800565c:	429d      	cmp	r5, r3
 800565e:	461a      	mov	r2, r3
 8005660:	d32f      	bcc.n	80056c2 <quorem+0xf4>
 8005662:	613c      	str	r4, [r7, #16]
 8005664:	4638      	mov	r0, r7
 8005666:	f001 f97d 	bl	8006964 <__mcmp>
 800566a:	2800      	cmp	r0, #0
 800566c:	db25      	blt.n	80056ba <quorem+0xec>
 800566e:	4629      	mov	r1, r5
 8005670:	2000      	movs	r0, #0
 8005672:	f858 2b04 	ldr.w	r2, [r8], #4
 8005676:	f8d1 c000 	ldr.w	ip, [r1]
 800567a:	fa1f fe82 	uxth.w	lr, r2
 800567e:	fa1f f38c 	uxth.w	r3, ip
 8005682:	eba3 030e 	sub.w	r3, r3, lr
 8005686:	4403      	add	r3, r0
 8005688:	0c12      	lsrs	r2, r2, #16
 800568a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800568e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005692:	b29b      	uxth	r3, r3
 8005694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005698:	45c1      	cmp	r9, r8
 800569a:	f841 3b04 	str.w	r3, [r1], #4
 800569e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80056a2:	d2e6      	bcs.n	8005672 <quorem+0xa4>
 80056a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80056a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056ac:	b922      	cbnz	r2, 80056b8 <quorem+0xea>
 80056ae:	3b04      	subs	r3, #4
 80056b0:	429d      	cmp	r5, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	d30b      	bcc.n	80056ce <quorem+0x100>
 80056b6:	613c      	str	r4, [r7, #16]
 80056b8:	3601      	adds	r6, #1
 80056ba:	4630      	mov	r0, r6
 80056bc:	b003      	add	sp, #12
 80056be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c2:	6812      	ldr	r2, [r2, #0]
 80056c4:	3b04      	subs	r3, #4
 80056c6:	2a00      	cmp	r2, #0
 80056c8:	d1cb      	bne.n	8005662 <quorem+0x94>
 80056ca:	3c01      	subs	r4, #1
 80056cc:	e7c6      	b.n	800565c <quorem+0x8e>
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	3b04      	subs	r3, #4
 80056d2:	2a00      	cmp	r2, #0
 80056d4:	d1ef      	bne.n	80056b6 <quorem+0xe8>
 80056d6:	3c01      	subs	r4, #1
 80056d8:	e7ea      	b.n	80056b0 <quorem+0xe2>
 80056da:	2000      	movs	r0, #0
 80056dc:	e7ee      	b.n	80056bc <quorem+0xee>
	...

080056e0 <_dtoa_r>:
 80056e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	69c7      	ldr	r7, [r0, #28]
 80056e6:	b097      	sub	sp, #92	@ 0x5c
 80056e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80056ec:	ec55 4b10 	vmov	r4, r5, d0
 80056f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80056f2:	9107      	str	r1, [sp, #28]
 80056f4:	4681      	mov	r9, r0
 80056f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80056f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80056fa:	b97f      	cbnz	r7, 800571c <_dtoa_r+0x3c>
 80056fc:	2010      	movs	r0, #16
 80056fe:	f000 fe09 	bl	8006314 <malloc>
 8005702:	4602      	mov	r2, r0
 8005704:	f8c9 001c 	str.w	r0, [r9, #28]
 8005708:	b920      	cbnz	r0, 8005714 <_dtoa_r+0x34>
 800570a:	4ba9      	ldr	r3, [pc, #676]	@ (80059b0 <_dtoa_r+0x2d0>)
 800570c:	21ef      	movs	r1, #239	@ 0xef
 800570e:	48a9      	ldr	r0, [pc, #676]	@ (80059b4 <_dtoa_r+0x2d4>)
 8005710:	f001 fcd0 	bl	80070b4 <__assert_func>
 8005714:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005718:	6007      	str	r7, [r0, #0]
 800571a:	60c7      	str	r7, [r0, #12]
 800571c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005720:	6819      	ldr	r1, [r3, #0]
 8005722:	b159      	cbz	r1, 800573c <_dtoa_r+0x5c>
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	604a      	str	r2, [r1, #4]
 8005728:	2301      	movs	r3, #1
 800572a:	4093      	lsls	r3, r2
 800572c:	608b      	str	r3, [r1, #8]
 800572e:	4648      	mov	r0, r9
 8005730:	f000 fee6 	bl	8006500 <_Bfree>
 8005734:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
 800573c:	1e2b      	subs	r3, r5, #0
 800573e:	bfb9      	ittee	lt
 8005740:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005744:	9305      	strlt	r3, [sp, #20]
 8005746:	2300      	movge	r3, #0
 8005748:	6033      	strge	r3, [r6, #0]
 800574a:	9f05      	ldr	r7, [sp, #20]
 800574c:	4b9a      	ldr	r3, [pc, #616]	@ (80059b8 <_dtoa_r+0x2d8>)
 800574e:	bfbc      	itt	lt
 8005750:	2201      	movlt	r2, #1
 8005752:	6032      	strlt	r2, [r6, #0]
 8005754:	43bb      	bics	r3, r7
 8005756:	d112      	bne.n	800577e <_dtoa_r+0x9e>
 8005758:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800575a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800575e:	6013      	str	r3, [r2, #0]
 8005760:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005764:	4323      	orrs	r3, r4
 8005766:	f000 855a 	beq.w	800621e <_dtoa_r+0xb3e>
 800576a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800576c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80059cc <_dtoa_r+0x2ec>
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 855c 	beq.w	800622e <_dtoa_r+0xb4e>
 8005776:	f10a 0303 	add.w	r3, sl, #3
 800577a:	f000 bd56 	b.w	800622a <_dtoa_r+0xb4a>
 800577e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005782:	2200      	movs	r2, #0
 8005784:	ec51 0b17 	vmov	r0, r1, d7
 8005788:	2300      	movs	r3, #0
 800578a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800578e:	f7fb f9bb 	bl	8000b08 <__aeabi_dcmpeq>
 8005792:	4680      	mov	r8, r0
 8005794:	b158      	cbz	r0, 80057ae <_dtoa_r+0xce>
 8005796:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005798:	2301      	movs	r3, #1
 800579a:	6013      	str	r3, [r2, #0]
 800579c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800579e:	b113      	cbz	r3, 80057a6 <_dtoa_r+0xc6>
 80057a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80057a2:	4b86      	ldr	r3, [pc, #536]	@ (80059bc <_dtoa_r+0x2dc>)
 80057a4:	6013      	str	r3, [r2, #0]
 80057a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80059d0 <_dtoa_r+0x2f0>
 80057aa:	f000 bd40 	b.w	800622e <_dtoa_r+0xb4e>
 80057ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80057b2:	aa14      	add	r2, sp, #80	@ 0x50
 80057b4:	a915      	add	r1, sp, #84	@ 0x54
 80057b6:	4648      	mov	r0, r9
 80057b8:	f001 f984 	bl	8006ac4 <__d2b>
 80057bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80057c0:	9002      	str	r0, [sp, #8]
 80057c2:	2e00      	cmp	r6, #0
 80057c4:	d078      	beq.n	80058b8 <_dtoa_r+0x1d8>
 80057c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80057cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80057d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80057d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80057dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80057e0:	4619      	mov	r1, r3
 80057e2:	2200      	movs	r2, #0
 80057e4:	4b76      	ldr	r3, [pc, #472]	@ (80059c0 <_dtoa_r+0x2e0>)
 80057e6:	f7fa fd6f 	bl	80002c8 <__aeabi_dsub>
 80057ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8005998 <_dtoa_r+0x2b8>)
 80057ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057f0:	f7fa ff22 	bl	8000638 <__aeabi_dmul>
 80057f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80059a0 <_dtoa_r+0x2c0>)
 80057f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fa:	f7fa fd67 	bl	80002cc <__adddf3>
 80057fe:	4604      	mov	r4, r0
 8005800:	4630      	mov	r0, r6
 8005802:	460d      	mov	r5, r1
 8005804:	f7fa feae 	bl	8000564 <__aeabi_i2d>
 8005808:	a367      	add	r3, pc, #412	@ (adr r3, 80059a8 <_dtoa_r+0x2c8>)
 800580a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580e:	f7fa ff13 	bl	8000638 <__aeabi_dmul>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4620      	mov	r0, r4
 8005818:	4629      	mov	r1, r5
 800581a:	f7fa fd57 	bl	80002cc <__adddf3>
 800581e:	4604      	mov	r4, r0
 8005820:	460d      	mov	r5, r1
 8005822:	f7fb f9b9 	bl	8000b98 <__aeabi_d2iz>
 8005826:	2200      	movs	r2, #0
 8005828:	4607      	mov	r7, r0
 800582a:	2300      	movs	r3, #0
 800582c:	4620      	mov	r0, r4
 800582e:	4629      	mov	r1, r5
 8005830:	f7fb f974 	bl	8000b1c <__aeabi_dcmplt>
 8005834:	b140      	cbz	r0, 8005848 <_dtoa_r+0x168>
 8005836:	4638      	mov	r0, r7
 8005838:	f7fa fe94 	bl	8000564 <__aeabi_i2d>
 800583c:	4622      	mov	r2, r4
 800583e:	462b      	mov	r3, r5
 8005840:	f7fb f962 	bl	8000b08 <__aeabi_dcmpeq>
 8005844:	b900      	cbnz	r0, 8005848 <_dtoa_r+0x168>
 8005846:	3f01      	subs	r7, #1
 8005848:	2f16      	cmp	r7, #22
 800584a:	d852      	bhi.n	80058f2 <_dtoa_r+0x212>
 800584c:	4b5d      	ldr	r3, [pc, #372]	@ (80059c4 <_dtoa_r+0x2e4>)
 800584e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005856:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800585a:	f7fb f95f 	bl	8000b1c <__aeabi_dcmplt>
 800585e:	2800      	cmp	r0, #0
 8005860:	d049      	beq.n	80058f6 <_dtoa_r+0x216>
 8005862:	3f01      	subs	r7, #1
 8005864:	2300      	movs	r3, #0
 8005866:	9310      	str	r3, [sp, #64]	@ 0x40
 8005868:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800586a:	1b9b      	subs	r3, r3, r6
 800586c:	1e5a      	subs	r2, r3, #1
 800586e:	bf45      	ittet	mi
 8005870:	f1c3 0301 	rsbmi	r3, r3, #1
 8005874:	9300      	strmi	r3, [sp, #0]
 8005876:	2300      	movpl	r3, #0
 8005878:	2300      	movmi	r3, #0
 800587a:	9206      	str	r2, [sp, #24]
 800587c:	bf54      	ite	pl
 800587e:	9300      	strpl	r3, [sp, #0]
 8005880:	9306      	strmi	r3, [sp, #24]
 8005882:	2f00      	cmp	r7, #0
 8005884:	db39      	blt.n	80058fa <_dtoa_r+0x21a>
 8005886:	9b06      	ldr	r3, [sp, #24]
 8005888:	970d      	str	r7, [sp, #52]	@ 0x34
 800588a:	443b      	add	r3, r7
 800588c:	9306      	str	r3, [sp, #24]
 800588e:	2300      	movs	r3, #0
 8005890:	9308      	str	r3, [sp, #32]
 8005892:	9b07      	ldr	r3, [sp, #28]
 8005894:	2b09      	cmp	r3, #9
 8005896:	d863      	bhi.n	8005960 <_dtoa_r+0x280>
 8005898:	2b05      	cmp	r3, #5
 800589a:	bfc4      	itt	gt
 800589c:	3b04      	subgt	r3, #4
 800589e:	9307      	strgt	r3, [sp, #28]
 80058a0:	9b07      	ldr	r3, [sp, #28]
 80058a2:	f1a3 0302 	sub.w	r3, r3, #2
 80058a6:	bfcc      	ite	gt
 80058a8:	2400      	movgt	r4, #0
 80058aa:	2401      	movle	r4, #1
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d863      	bhi.n	8005978 <_dtoa_r+0x298>
 80058b0:	e8df f003 	tbb	[pc, r3]
 80058b4:	2b375452 	.word	0x2b375452
 80058b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80058bc:	441e      	add	r6, r3
 80058be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80058c2:	2b20      	cmp	r3, #32
 80058c4:	bfc1      	itttt	gt
 80058c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80058ca:	409f      	lslgt	r7, r3
 80058cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80058d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80058d4:	bfd6      	itet	le
 80058d6:	f1c3 0320 	rsble	r3, r3, #32
 80058da:	ea47 0003 	orrgt.w	r0, r7, r3
 80058de:	fa04 f003 	lslle.w	r0, r4, r3
 80058e2:	f7fa fe2f 	bl	8000544 <__aeabi_ui2d>
 80058e6:	2201      	movs	r2, #1
 80058e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80058ec:	3e01      	subs	r6, #1
 80058ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80058f0:	e776      	b.n	80057e0 <_dtoa_r+0x100>
 80058f2:	2301      	movs	r3, #1
 80058f4:	e7b7      	b.n	8005866 <_dtoa_r+0x186>
 80058f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80058f8:	e7b6      	b.n	8005868 <_dtoa_r+0x188>
 80058fa:	9b00      	ldr	r3, [sp, #0]
 80058fc:	1bdb      	subs	r3, r3, r7
 80058fe:	9300      	str	r3, [sp, #0]
 8005900:	427b      	negs	r3, r7
 8005902:	9308      	str	r3, [sp, #32]
 8005904:	2300      	movs	r3, #0
 8005906:	930d      	str	r3, [sp, #52]	@ 0x34
 8005908:	e7c3      	b.n	8005892 <_dtoa_r+0x1b2>
 800590a:	2301      	movs	r3, #1
 800590c:	9309      	str	r3, [sp, #36]	@ 0x24
 800590e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005910:	eb07 0b03 	add.w	fp, r7, r3
 8005914:	f10b 0301 	add.w	r3, fp, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	9303      	str	r3, [sp, #12]
 800591c:	bfb8      	it	lt
 800591e:	2301      	movlt	r3, #1
 8005920:	e006      	b.n	8005930 <_dtoa_r+0x250>
 8005922:	2301      	movs	r3, #1
 8005924:	9309      	str	r3, [sp, #36]	@ 0x24
 8005926:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005928:	2b00      	cmp	r3, #0
 800592a:	dd28      	ble.n	800597e <_dtoa_r+0x29e>
 800592c:	469b      	mov	fp, r3
 800592e:	9303      	str	r3, [sp, #12]
 8005930:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005934:	2100      	movs	r1, #0
 8005936:	2204      	movs	r2, #4
 8005938:	f102 0514 	add.w	r5, r2, #20
 800593c:	429d      	cmp	r5, r3
 800593e:	d926      	bls.n	800598e <_dtoa_r+0x2ae>
 8005940:	6041      	str	r1, [r0, #4]
 8005942:	4648      	mov	r0, r9
 8005944:	f000 fd9c 	bl	8006480 <_Balloc>
 8005948:	4682      	mov	sl, r0
 800594a:	2800      	cmp	r0, #0
 800594c:	d142      	bne.n	80059d4 <_dtoa_r+0x2f4>
 800594e:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <_dtoa_r+0x2e8>)
 8005950:	4602      	mov	r2, r0
 8005952:	f240 11af 	movw	r1, #431	@ 0x1af
 8005956:	e6da      	b.n	800570e <_dtoa_r+0x2e>
 8005958:	2300      	movs	r3, #0
 800595a:	e7e3      	b.n	8005924 <_dtoa_r+0x244>
 800595c:	2300      	movs	r3, #0
 800595e:	e7d5      	b.n	800590c <_dtoa_r+0x22c>
 8005960:	2401      	movs	r4, #1
 8005962:	2300      	movs	r3, #0
 8005964:	9307      	str	r3, [sp, #28]
 8005966:	9409      	str	r4, [sp, #36]	@ 0x24
 8005968:	f04f 3bff 	mov.w	fp, #4294967295
 800596c:	2200      	movs	r2, #0
 800596e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005972:	2312      	movs	r3, #18
 8005974:	920c      	str	r2, [sp, #48]	@ 0x30
 8005976:	e7db      	b.n	8005930 <_dtoa_r+0x250>
 8005978:	2301      	movs	r3, #1
 800597a:	9309      	str	r3, [sp, #36]	@ 0x24
 800597c:	e7f4      	b.n	8005968 <_dtoa_r+0x288>
 800597e:	f04f 0b01 	mov.w	fp, #1
 8005982:	f8cd b00c 	str.w	fp, [sp, #12]
 8005986:	465b      	mov	r3, fp
 8005988:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800598c:	e7d0      	b.n	8005930 <_dtoa_r+0x250>
 800598e:	3101      	adds	r1, #1
 8005990:	0052      	lsls	r2, r2, #1
 8005992:	e7d1      	b.n	8005938 <_dtoa_r+0x258>
 8005994:	f3af 8000 	nop.w
 8005998:	636f4361 	.word	0x636f4361
 800599c:	3fd287a7 	.word	0x3fd287a7
 80059a0:	8b60c8b3 	.word	0x8b60c8b3
 80059a4:	3fc68a28 	.word	0x3fc68a28
 80059a8:	509f79fb 	.word	0x509f79fb
 80059ac:	3fd34413 	.word	0x3fd34413
 80059b0:	08007389 	.word	0x08007389
 80059b4:	080073a0 	.word	0x080073a0
 80059b8:	7ff00000 	.word	0x7ff00000
 80059bc:	08007359 	.word	0x08007359
 80059c0:	3ff80000 	.word	0x3ff80000
 80059c4:	080074f0 	.word	0x080074f0
 80059c8:	080073f8 	.word	0x080073f8
 80059cc:	08007385 	.word	0x08007385
 80059d0:	08007358 	.word	0x08007358
 80059d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80059d8:	6018      	str	r0, [r3, #0]
 80059da:	9b03      	ldr	r3, [sp, #12]
 80059dc:	2b0e      	cmp	r3, #14
 80059de:	f200 80a1 	bhi.w	8005b24 <_dtoa_r+0x444>
 80059e2:	2c00      	cmp	r4, #0
 80059e4:	f000 809e 	beq.w	8005b24 <_dtoa_r+0x444>
 80059e8:	2f00      	cmp	r7, #0
 80059ea:	dd33      	ble.n	8005a54 <_dtoa_r+0x374>
 80059ec:	4b9c      	ldr	r3, [pc, #624]	@ (8005c60 <_dtoa_r+0x580>)
 80059ee:	f007 020f 	and.w	r2, r7, #15
 80059f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059f6:	ed93 7b00 	vldr	d7, [r3]
 80059fa:	05f8      	lsls	r0, r7, #23
 80059fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8005a00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005a04:	d516      	bpl.n	8005a34 <_dtoa_r+0x354>
 8005a06:	4b97      	ldr	r3, [pc, #604]	@ (8005c64 <_dtoa_r+0x584>)
 8005a08:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a10:	f7fa ff3c 	bl	800088c <__aeabi_ddiv>
 8005a14:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a18:	f004 040f 	and.w	r4, r4, #15
 8005a1c:	2603      	movs	r6, #3
 8005a1e:	4d91      	ldr	r5, [pc, #580]	@ (8005c64 <_dtoa_r+0x584>)
 8005a20:	b954      	cbnz	r4, 8005a38 <_dtoa_r+0x358>
 8005a22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005a26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a2a:	f7fa ff2f 	bl	800088c <__aeabi_ddiv>
 8005a2e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a32:	e028      	b.n	8005a86 <_dtoa_r+0x3a6>
 8005a34:	2602      	movs	r6, #2
 8005a36:	e7f2      	b.n	8005a1e <_dtoa_r+0x33e>
 8005a38:	07e1      	lsls	r1, r4, #31
 8005a3a:	d508      	bpl.n	8005a4e <_dtoa_r+0x36e>
 8005a3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005a40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005a44:	f7fa fdf8 	bl	8000638 <__aeabi_dmul>
 8005a48:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005a4c:	3601      	adds	r6, #1
 8005a4e:	1064      	asrs	r4, r4, #1
 8005a50:	3508      	adds	r5, #8
 8005a52:	e7e5      	b.n	8005a20 <_dtoa_r+0x340>
 8005a54:	f000 80af 	beq.w	8005bb6 <_dtoa_r+0x4d6>
 8005a58:	427c      	negs	r4, r7
 8005a5a:	4b81      	ldr	r3, [pc, #516]	@ (8005c60 <_dtoa_r+0x580>)
 8005a5c:	4d81      	ldr	r5, [pc, #516]	@ (8005c64 <_dtoa_r+0x584>)
 8005a5e:	f004 020f 	and.w	r2, r4, #15
 8005a62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005a6e:	f7fa fde3 	bl	8000638 <__aeabi_dmul>
 8005a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005a76:	1124      	asrs	r4, r4, #4
 8005a78:	2300      	movs	r3, #0
 8005a7a:	2602      	movs	r6, #2
 8005a7c:	2c00      	cmp	r4, #0
 8005a7e:	f040 808f 	bne.w	8005ba0 <_dtoa_r+0x4c0>
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1d3      	bne.n	8005a2e <_dtoa_r+0x34e>
 8005a86:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005a88:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 8094 	beq.w	8005bba <_dtoa_r+0x4da>
 8005a92:	4b75      	ldr	r3, [pc, #468]	@ (8005c68 <_dtoa_r+0x588>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	4620      	mov	r0, r4
 8005a98:	4629      	mov	r1, r5
 8005a9a:	f7fb f83f 	bl	8000b1c <__aeabi_dcmplt>
 8005a9e:	2800      	cmp	r0, #0
 8005aa0:	f000 808b 	beq.w	8005bba <_dtoa_r+0x4da>
 8005aa4:	9b03      	ldr	r3, [sp, #12]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	f000 8087 	beq.w	8005bba <_dtoa_r+0x4da>
 8005aac:	f1bb 0f00 	cmp.w	fp, #0
 8005ab0:	dd34      	ble.n	8005b1c <_dtoa_r+0x43c>
 8005ab2:	4620      	mov	r0, r4
 8005ab4:	4b6d      	ldr	r3, [pc, #436]	@ (8005c6c <_dtoa_r+0x58c>)
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fdbd 	bl	8000638 <__aeabi_dmul>
 8005abe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005ac2:	f107 38ff 	add.w	r8, r7, #4294967295
 8005ac6:	3601      	adds	r6, #1
 8005ac8:	465c      	mov	r4, fp
 8005aca:	4630      	mov	r0, r6
 8005acc:	f7fa fd4a 	bl	8000564 <__aeabi_i2d>
 8005ad0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ad4:	f7fa fdb0 	bl	8000638 <__aeabi_dmul>
 8005ad8:	4b65      	ldr	r3, [pc, #404]	@ (8005c70 <_dtoa_r+0x590>)
 8005ada:	2200      	movs	r2, #0
 8005adc:	f7fa fbf6 	bl	80002cc <__adddf3>
 8005ae0:	4605      	mov	r5, r0
 8005ae2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005ae6:	2c00      	cmp	r4, #0
 8005ae8:	d16a      	bne.n	8005bc0 <_dtoa_r+0x4e0>
 8005aea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005aee:	4b61      	ldr	r3, [pc, #388]	@ (8005c74 <_dtoa_r+0x594>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	f7fa fbe9 	bl	80002c8 <__aeabi_dsub>
 8005af6:	4602      	mov	r2, r0
 8005af8:	460b      	mov	r3, r1
 8005afa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005afe:	462a      	mov	r2, r5
 8005b00:	4633      	mov	r3, r6
 8005b02:	f7fb f829 	bl	8000b58 <__aeabi_dcmpgt>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	f040 8298 	bne.w	800603c <_dtoa_r+0x95c>
 8005b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b10:	462a      	mov	r2, r5
 8005b12:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005b16:	f7fb f801 	bl	8000b1c <__aeabi_dcmplt>
 8005b1a:	bb38      	cbnz	r0, 8005b6c <_dtoa_r+0x48c>
 8005b1c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8005b20:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005b24:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f2c0 8157 	blt.w	8005dda <_dtoa_r+0x6fa>
 8005b2c:	2f0e      	cmp	r7, #14
 8005b2e:	f300 8154 	bgt.w	8005dda <_dtoa_r+0x6fa>
 8005b32:	4b4b      	ldr	r3, [pc, #300]	@ (8005c60 <_dtoa_r+0x580>)
 8005b34:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005b38:	ed93 7b00 	vldr	d7, [r3]
 8005b3c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	ed8d 7b00 	vstr	d7, [sp]
 8005b44:	f280 80e5 	bge.w	8005d12 <_dtoa_r+0x632>
 8005b48:	9b03      	ldr	r3, [sp, #12]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	f300 80e1 	bgt.w	8005d12 <_dtoa_r+0x632>
 8005b50:	d10c      	bne.n	8005b6c <_dtoa_r+0x48c>
 8005b52:	4b48      	ldr	r3, [pc, #288]	@ (8005c74 <_dtoa_r+0x594>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	ec51 0b17 	vmov	r0, r1, d7
 8005b5a:	f7fa fd6d 	bl	8000638 <__aeabi_dmul>
 8005b5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b62:	f7fa ffef 	bl	8000b44 <__aeabi_dcmpge>
 8005b66:	2800      	cmp	r0, #0
 8005b68:	f000 8266 	beq.w	8006038 <_dtoa_r+0x958>
 8005b6c:	2400      	movs	r4, #0
 8005b6e:	4625      	mov	r5, r4
 8005b70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b72:	4656      	mov	r6, sl
 8005b74:	ea6f 0803 	mvn.w	r8, r3
 8005b78:	2700      	movs	r7, #0
 8005b7a:	4621      	mov	r1, r4
 8005b7c:	4648      	mov	r0, r9
 8005b7e:	f000 fcbf 	bl	8006500 <_Bfree>
 8005b82:	2d00      	cmp	r5, #0
 8005b84:	f000 80bd 	beq.w	8005d02 <_dtoa_r+0x622>
 8005b88:	b12f      	cbz	r7, 8005b96 <_dtoa_r+0x4b6>
 8005b8a:	42af      	cmp	r7, r5
 8005b8c:	d003      	beq.n	8005b96 <_dtoa_r+0x4b6>
 8005b8e:	4639      	mov	r1, r7
 8005b90:	4648      	mov	r0, r9
 8005b92:	f000 fcb5 	bl	8006500 <_Bfree>
 8005b96:	4629      	mov	r1, r5
 8005b98:	4648      	mov	r0, r9
 8005b9a:	f000 fcb1 	bl	8006500 <_Bfree>
 8005b9e:	e0b0      	b.n	8005d02 <_dtoa_r+0x622>
 8005ba0:	07e2      	lsls	r2, r4, #31
 8005ba2:	d505      	bpl.n	8005bb0 <_dtoa_r+0x4d0>
 8005ba4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ba8:	f7fa fd46 	bl	8000638 <__aeabi_dmul>
 8005bac:	3601      	adds	r6, #1
 8005bae:	2301      	movs	r3, #1
 8005bb0:	1064      	asrs	r4, r4, #1
 8005bb2:	3508      	adds	r5, #8
 8005bb4:	e762      	b.n	8005a7c <_dtoa_r+0x39c>
 8005bb6:	2602      	movs	r6, #2
 8005bb8:	e765      	b.n	8005a86 <_dtoa_r+0x3a6>
 8005bba:	9c03      	ldr	r4, [sp, #12]
 8005bbc:	46b8      	mov	r8, r7
 8005bbe:	e784      	b.n	8005aca <_dtoa_r+0x3ea>
 8005bc0:	4b27      	ldr	r3, [pc, #156]	@ (8005c60 <_dtoa_r+0x580>)
 8005bc2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005bc4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bc8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bcc:	4454      	add	r4, sl
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	d054      	beq.n	8005c7c <_dtoa_r+0x59c>
 8005bd2:	4929      	ldr	r1, [pc, #164]	@ (8005c78 <_dtoa_r+0x598>)
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	f7fa fe59 	bl	800088c <__aeabi_ddiv>
 8005bda:	4633      	mov	r3, r6
 8005bdc:	462a      	mov	r2, r5
 8005bde:	f7fa fb73 	bl	80002c8 <__aeabi_dsub>
 8005be2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005be6:	4656      	mov	r6, sl
 8005be8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bec:	f7fa ffd4 	bl	8000b98 <__aeabi_d2iz>
 8005bf0:	4605      	mov	r5, r0
 8005bf2:	f7fa fcb7 	bl	8000564 <__aeabi_i2d>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005bfe:	f7fa fb63 	bl	80002c8 <__aeabi_dsub>
 8005c02:	3530      	adds	r5, #48	@ 0x30
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005c0c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c10:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c14:	f7fa ff82 	bl	8000b1c <__aeabi_dcmplt>
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	d172      	bne.n	8005d02 <_dtoa_r+0x622>
 8005c1c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c20:	4911      	ldr	r1, [pc, #68]	@ (8005c68 <_dtoa_r+0x588>)
 8005c22:	2000      	movs	r0, #0
 8005c24:	f7fa fb50 	bl	80002c8 <__aeabi_dsub>
 8005c28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005c2c:	f7fa ff76 	bl	8000b1c <__aeabi_dcmplt>
 8005c30:	2800      	cmp	r0, #0
 8005c32:	f040 80b4 	bne.w	8005d9e <_dtoa_r+0x6be>
 8005c36:	42a6      	cmp	r6, r4
 8005c38:	f43f af70 	beq.w	8005b1c <_dtoa_r+0x43c>
 8005c3c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005c40:	4b0a      	ldr	r3, [pc, #40]	@ (8005c6c <_dtoa_r+0x58c>)
 8005c42:	2200      	movs	r2, #0
 8005c44:	f7fa fcf8 	bl	8000638 <__aeabi_dmul>
 8005c48:	4b08      	ldr	r3, [pc, #32]	@ (8005c6c <_dtoa_r+0x58c>)
 8005c4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c4e:	2200      	movs	r2, #0
 8005c50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c54:	f7fa fcf0 	bl	8000638 <__aeabi_dmul>
 8005c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c5c:	e7c4      	b.n	8005be8 <_dtoa_r+0x508>
 8005c5e:	bf00      	nop
 8005c60:	080074f0 	.word	0x080074f0
 8005c64:	080074c8 	.word	0x080074c8
 8005c68:	3ff00000 	.word	0x3ff00000
 8005c6c:	40240000 	.word	0x40240000
 8005c70:	401c0000 	.word	0x401c0000
 8005c74:	40140000 	.word	0x40140000
 8005c78:	3fe00000 	.word	0x3fe00000
 8005c7c:	4631      	mov	r1, r6
 8005c7e:	4628      	mov	r0, r5
 8005c80:	f7fa fcda 	bl	8000638 <__aeabi_dmul>
 8005c84:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8005c88:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005c8a:	4656      	mov	r6, sl
 8005c8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c90:	f7fa ff82 	bl	8000b98 <__aeabi_d2iz>
 8005c94:	4605      	mov	r5, r0
 8005c96:	f7fa fc65 	bl	8000564 <__aeabi_i2d>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ca2:	f7fa fb11 	bl	80002c8 <__aeabi_dsub>
 8005ca6:	3530      	adds	r5, #48	@ 0x30
 8005ca8:	f806 5b01 	strb.w	r5, [r6], #1
 8005cac:	4602      	mov	r2, r0
 8005cae:	460b      	mov	r3, r1
 8005cb0:	42a6      	cmp	r6, r4
 8005cb2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005cb6:	f04f 0200 	mov.w	r2, #0
 8005cba:	d124      	bne.n	8005d06 <_dtoa_r+0x626>
 8005cbc:	4baf      	ldr	r3, [pc, #700]	@ (8005f7c <_dtoa_r+0x89c>)
 8005cbe:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8005cc2:	f7fa fb03 	bl	80002cc <__adddf3>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cce:	f7fa ff43 	bl	8000b58 <__aeabi_dcmpgt>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d163      	bne.n	8005d9e <_dtoa_r+0x6be>
 8005cd6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8005cda:	49a8      	ldr	r1, [pc, #672]	@ (8005f7c <_dtoa_r+0x89c>)
 8005cdc:	2000      	movs	r0, #0
 8005cde:	f7fa faf3 	bl	80002c8 <__aeabi_dsub>
 8005ce2:	4602      	mov	r2, r0
 8005ce4:	460b      	mov	r3, r1
 8005ce6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cea:	f7fa ff17 	bl	8000b1c <__aeabi_dcmplt>
 8005cee:	2800      	cmp	r0, #0
 8005cf0:	f43f af14 	beq.w	8005b1c <_dtoa_r+0x43c>
 8005cf4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005cf6:	1e73      	subs	r3, r6, #1
 8005cf8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005cfa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005cfe:	2b30      	cmp	r3, #48	@ 0x30
 8005d00:	d0f8      	beq.n	8005cf4 <_dtoa_r+0x614>
 8005d02:	4647      	mov	r7, r8
 8005d04:	e03b      	b.n	8005d7e <_dtoa_r+0x69e>
 8005d06:	4b9e      	ldr	r3, [pc, #632]	@ (8005f80 <_dtoa_r+0x8a0>)
 8005d08:	f7fa fc96 	bl	8000638 <__aeabi_dmul>
 8005d0c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005d10:	e7bc      	b.n	8005c8c <_dtoa_r+0x5ac>
 8005d12:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8005d16:	4656      	mov	r6, sl
 8005d18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	4629      	mov	r1, r5
 8005d20:	f7fa fdb4 	bl	800088c <__aeabi_ddiv>
 8005d24:	f7fa ff38 	bl	8000b98 <__aeabi_d2iz>
 8005d28:	4680      	mov	r8, r0
 8005d2a:	f7fa fc1b 	bl	8000564 <__aeabi_i2d>
 8005d2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d32:	f7fa fc81 	bl	8000638 <__aeabi_dmul>
 8005d36:	4602      	mov	r2, r0
 8005d38:	460b      	mov	r3, r1
 8005d3a:	4620      	mov	r0, r4
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005d42:	f7fa fac1 	bl	80002c8 <__aeabi_dsub>
 8005d46:	f806 4b01 	strb.w	r4, [r6], #1
 8005d4a:	9d03      	ldr	r5, [sp, #12]
 8005d4c:	eba6 040a 	sub.w	r4, r6, sl
 8005d50:	42a5      	cmp	r5, r4
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	d133      	bne.n	8005dc0 <_dtoa_r+0x6e0>
 8005d58:	f7fa fab8 	bl	80002cc <__adddf3>
 8005d5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d60:	4604      	mov	r4, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	f7fa fef8 	bl	8000b58 <__aeabi_dcmpgt>
 8005d68:	b9c0      	cbnz	r0, 8005d9c <_dtoa_r+0x6bc>
 8005d6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	4629      	mov	r1, r5
 8005d72:	f7fa fec9 	bl	8000b08 <__aeabi_dcmpeq>
 8005d76:	b110      	cbz	r0, 8005d7e <_dtoa_r+0x69e>
 8005d78:	f018 0f01 	tst.w	r8, #1
 8005d7c:	d10e      	bne.n	8005d9c <_dtoa_r+0x6bc>
 8005d7e:	9902      	ldr	r1, [sp, #8]
 8005d80:	4648      	mov	r0, r9
 8005d82:	f000 fbbd 	bl	8006500 <_Bfree>
 8005d86:	2300      	movs	r3, #0
 8005d88:	7033      	strb	r3, [r6, #0]
 8005d8a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d8c:	3701      	adds	r7, #1
 8005d8e:	601f      	str	r7, [r3, #0]
 8005d90:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f000 824b 	beq.w	800622e <_dtoa_r+0xb4e>
 8005d98:	601e      	str	r6, [r3, #0]
 8005d9a:	e248      	b.n	800622e <_dtoa_r+0xb4e>
 8005d9c:	46b8      	mov	r8, r7
 8005d9e:	4633      	mov	r3, r6
 8005da0:	461e      	mov	r6, r3
 8005da2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005da6:	2a39      	cmp	r2, #57	@ 0x39
 8005da8:	d106      	bne.n	8005db8 <_dtoa_r+0x6d8>
 8005daa:	459a      	cmp	sl, r3
 8005dac:	d1f8      	bne.n	8005da0 <_dtoa_r+0x6c0>
 8005dae:	2230      	movs	r2, #48	@ 0x30
 8005db0:	f108 0801 	add.w	r8, r8, #1
 8005db4:	f88a 2000 	strb.w	r2, [sl]
 8005db8:	781a      	ldrb	r2, [r3, #0]
 8005dba:	3201      	adds	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
 8005dbe:	e7a0      	b.n	8005d02 <_dtoa_r+0x622>
 8005dc0:	4b6f      	ldr	r3, [pc, #444]	@ (8005f80 <_dtoa_r+0x8a0>)
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f7fa fc38 	bl	8000638 <__aeabi_dmul>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	2300      	movs	r3, #0
 8005dcc:	4604      	mov	r4, r0
 8005dce:	460d      	mov	r5, r1
 8005dd0:	f7fa fe9a 	bl	8000b08 <__aeabi_dcmpeq>
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	d09f      	beq.n	8005d18 <_dtoa_r+0x638>
 8005dd8:	e7d1      	b.n	8005d7e <_dtoa_r+0x69e>
 8005dda:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ddc:	2a00      	cmp	r2, #0
 8005dde:	f000 80ea 	beq.w	8005fb6 <_dtoa_r+0x8d6>
 8005de2:	9a07      	ldr	r2, [sp, #28]
 8005de4:	2a01      	cmp	r2, #1
 8005de6:	f300 80cd 	bgt.w	8005f84 <_dtoa_r+0x8a4>
 8005dea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005dec:	2a00      	cmp	r2, #0
 8005dee:	f000 80c1 	beq.w	8005f74 <_dtoa_r+0x894>
 8005df2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005df6:	9c08      	ldr	r4, [sp, #32]
 8005df8:	9e00      	ldr	r6, [sp, #0]
 8005dfa:	9a00      	ldr	r2, [sp, #0]
 8005dfc:	441a      	add	r2, r3
 8005dfe:	9200      	str	r2, [sp, #0]
 8005e00:	9a06      	ldr	r2, [sp, #24]
 8005e02:	2101      	movs	r1, #1
 8005e04:	441a      	add	r2, r3
 8005e06:	4648      	mov	r0, r9
 8005e08:	9206      	str	r2, [sp, #24]
 8005e0a:	f000 fc2d 	bl	8006668 <__i2b>
 8005e0e:	4605      	mov	r5, r0
 8005e10:	b166      	cbz	r6, 8005e2c <_dtoa_r+0x74c>
 8005e12:	9b06      	ldr	r3, [sp, #24]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	dd09      	ble.n	8005e2c <_dtoa_r+0x74c>
 8005e18:	42b3      	cmp	r3, r6
 8005e1a:	9a00      	ldr	r2, [sp, #0]
 8005e1c:	bfa8      	it	ge
 8005e1e:	4633      	movge	r3, r6
 8005e20:	1ad2      	subs	r2, r2, r3
 8005e22:	9200      	str	r2, [sp, #0]
 8005e24:	9a06      	ldr	r2, [sp, #24]
 8005e26:	1af6      	subs	r6, r6, r3
 8005e28:	1ad3      	subs	r3, r2, r3
 8005e2a:	9306      	str	r3, [sp, #24]
 8005e2c:	9b08      	ldr	r3, [sp, #32]
 8005e2e:	b30b      	cbz	r3, 8005e74 <_dtoa_r+0x794>
 8005e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80c6 	beq.w	8005fc4 <_dtoa_r+0x8e4>
 8005e38:	2c00      	cmp	r4, #0
 8005e3a:	f000 80c0 	beq.w	8005fbe <_dtoa_r+0x8de>
 8005e3e:	4629      	mov	r1, r5
 8005e40:	4622      	mov	r2, r4
 8005e42:	4648      	mov	r0, r9
 8005e44:	f000 fcc8 	bl	80067d8 <__pow5mult>
 8005e48:	9a02      	ldr	r2, [sp, #8]
 8005e4a:	4601      	mov	r1, r0
 8005e4c:	4605      	mov	r5, r0
 8005e4e:	4648      	mov	r0, r9
 8005e50:	f000 fc20 	bl	8006694 <__multiply>
 8005e54:	9902      	ldr	r1, [sp, #8]
 8005e56:	4680      	mov	r8, r0
 8005e58:	4648      	mov	r0, r9
 8005e5a:	f000 fb51 	bl	8006500 <_Bfree>
 8005e5e:	9b08      	ldr	r3, [sp, #32]
 8005e60:	1b1b      	subs	r3, r3, r4
 8005e62:	9308      	str	r3, [sp, #32]
 8005e64:	f000 80b1 	beq.w	8005fca <_dtoa_r+0x8ea>
 8005e68:	9a08      	ldr	r2, [sp, #32]
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	4648      	mov	r0, r9
 8005e6e:	f000 fcb3 	bl	80067d8 <__pow5mult>
 8005e72:	9002      	str	r0, [sp, #8]
 8005e74:	2101      	movs	r1, #1
 8005e76:	4648      	mov	r0, r9
 8005e78:	f000 fbf6 	bl	8006668 <__i2b>
 8005e7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005e7e:	4604      	mov	r4, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	f000 81d8 	beq.w	8006236 <_dtoa_r+0xb56>
 8005e86:	461a      	mov	r2, r3
 8005e88:	4601      	mov	r1, r0
 8005e8a:	4648      	mov	r0, r9
 8005e8c:	f000 fca4 	bl	80067d8 <__pow5mult>
 8005e90:	9b07      	ldr	r3, [sp, #28]
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	4604      	mov	r4, r0
 8005e96:	f300 809f 	bgt.w	8005fd8 <_dtoa_r+0x8f8>
 8005e9a:	9b04      	ldr	r3, [sp, #16]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8097 	bne.w	8005fd0 <_dtoa_r+0x8f0>
 8005ea2:	9b05      	ldr	r3, [sp, #20]
 8005ea4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f040 8093 	bne.w	8005fd4 <_dtoa_r+0x8f4>
 8005eae:	9b05      	ldr	r3, [sp, #20]
 8005eb0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005eb4:	0d1b      	lsrs	r3, r3, #20
 8005eb6:	051b      	lsls	r3, r3, #20
 8005eb8:	b133      	cbz	r3, 8005ec8 <_dtoa_r+0x7e8>
 8005eba:	9b00      	ldr	r3, [sp, #0]
 8005ebc:	3301      	adds	r3, #1
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	9b06      	ldr	r3, [sp, #24]
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	9306      	str	r3, [sp, #24]
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	9308      	str	r3, [sp, #32]
 8005eca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 81b8 	beq.w	8006242 <_dtoa_r+0xb62>
 8005ed2:	6923      	ldr	r3, [r4, #16]
 8005ed4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005ed8:	6918      	ldr	r0, [r3, #16]
 8005eda:	f000 fb79 	bl	80065d0 <__hi0bits>
 8005ede:	f1c0 0020 	rsb	r0, r0, #32
 8005ee2:	9b06      	ldr	r3, [sp, #24]
 8005ee4:	4418      	add	r0, r3
 8005ee6:	f010 001f 	ands.w	r0, r0, #31
 8005eea:	f000 8082 	beq.w	8005ff2 <_dtoa_r+0x912>
 8005eee:	f1c0 0320 	rsb	r3, r0, #32
 8005ef2:	2b04      	cmp	r3, #4
 8005ef4:	dd73      	ble.n	8005fde <_dtoa_r+0x8fe>
 8005ef6:	9b00      	ldr	r3, [sp, #0]
 8005ef8:	f1c0 001c 	rsb	r0, r0, #28
 8005efc:	4403      	add	r3, r0
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	9b06      	ldr	r3, [sp, #24]
 8005f02:	4403      	add	r3, r0
 8005f04:	4406      	add	r6, r0
 8005f06:	9306      	str	r3, [sp, #24]
 8005f08:	9b00      	ldr	r3, [sp, #0]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	dd05      	ble.n	8005f1a <_dtoa_r+0x83a>
 8005f0e:	9902      	ldr	r1, [sp, #8]
 8005f10:	461a      	mov	r2, r3
 8005f12:	4648      	mov	r0, r9
 8005f14:	f000 fcba 	bl	800688c <__lshift>
 8005f18:	9002      	str	r0, [sp, #8]
 8005f1a:	9b06      	ldr	r3, [sp, #24]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	dd05      	ble.n	8005f2c <_dtoa_r+0x84c>
 8005f20:	4621      	mov	r1, r4
 8005f22:	461a      	mov	r2, r3
 8005f24:	4648      	mov	r0, r9
 8005f26:	f000 fcb1 	bl	800688c <__lshift>
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d061      	beq.n	8005ff6 <_dtoa_r+0x916>
 8005f32:	9802      	ldr	r0, [sp, #8]
 8005f34:	4621      	mov	r1, r4
 8005f36:	f000 fd15 	bl	8006964 <__mcmp>
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	da5b      	bge.n	8005ff6 <_dtoa_r+0x916>
 8005f3e:	2300      	movs	r3, #0
 8005f40:	9902      	ldr	r1, [sp, #8]
 8005f42:	220a      	movs	r2, #10
 8005f44:	4648      	mov	r0, r9
 8005f46:	f000 fafd 	bl	8006544 <__multadd>
 8005f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f4c:	9002      	str	r0, [sp, #8]
 8005f4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f000 8177 	beq.w	8006246 <_dtoa_r+0xb66>
 8005f58:	4629      	mov	r1, r5
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	220a      	movs	r2, #10
 8005f5e:	4648      	mov	r0, r9
 8005f60:	f000 faf0 	bl	8006544 <__multadd>
 8005f64:	f1bb 0f00 	cmp.w	fp, #0
 8005f68:	4605      	mov	r5, r0
 8005f6a:	dc6f      	bgt.n	800604c <_dtoa_r+0x96c>
 8005f6c:	9b07      	ldr	r3, [sp, #28]
 8005f6e:	2b02      	cmp	r3, #2
 8005f70:	dc49      	bgt.n	8006006 <_dtoa_r+0x926>
 8005f72:	e06b      	b.n	800604c <_dtoa_r+0x96c>
 8005f74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005f76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f7a:	e73c      	b.n	8005df6 <_dtoa_r+0x716>
 8005f7c:	3fe00000 	.word	0x3fe00000
 8005f80:	40240000 	.word	0x40240000
 8005f84:	9b03      	ldr	r3, [sp, #12]
 8005f86:	1e5c      	subs	r4, r3, #1
 8005f88:	9b08      	ldr	r3, [sp, #32]
 8005f8a:	42a3      	cmp	r3, r4
 8005f8c:	db09      	blt.n	8005fa2 <_dtoa_r+0x8c2>
 8005f8e:	1b1c      	subs	r4, r3, r4
 8005f90:	9b03      	ldr	r3, [sp, #12]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f6bf af30 	bge.w	8005df8 <_dtoa_r+0x718>
 8005f98:	9b00      	ldr	r3, [sp, #0]
 8005f9a:	9a03      	ldr	r2, [sp, #12]
 8005f9c:	1a9e      	subs	r6, r3, r2
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	e72b      	b.n	8005dfa <_dtoa_r+0x71a>
 8005fa2:	9b08      	ldr	r3, [sp, #32]
 8005fa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005fa6:	9408      	str	r4, [sp, #32]
 8005fa8:	1ae3      	subs	r3, r4, r3
 8005faa:	441a      	add	r2, r3
 8005fac:	9e00      	ldr	r6, [sp, #0]
 8005fae:	9b03      	ldr	r3, [sp, #12]
 8005fb0:	920d      	str	r2, [sp, #52]	@ 0x34
 8005fb2:	2400      	movs	r4, #0
 8005fb4:	e721      	b.n	8005dfa <_dtoa_r+0x71a>
 8005fb6:	9c08      	ldr	r4, [sp, #32]
 8005fb8:	9e00      	ldr	r6, [sp, #0]
 8005fba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005fbc:	e728      	b.n	8005e10 <_dtoa_r+0x730>
 8005fbe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005fc2:	e751      	b.n	8005e68 <_dtoa_r+0x788>
 8005fc4:	9a08      	ldr	r2, [sp, #32]
 8005fc6:	9902      	ldr	r1, [sp, #8]
 8005fc8:	e750      	b.n	8005e6c <_dtoa_r+0x78c>
 8005fca:	f8cd 8008 	str.w	r8, [sp, #8]
 8005fce:	e751      	b.n	8005e74 <_dtoa_r+0x794>
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	e779      	b.n	8005ec8 <_dtoa_r+0x7e8>
 8005fd4:	9b04      	ldr	r3, [sp, #16]
 8005fd6:	e777      	b.n	8005ec8 <_dtoa_r+0x7e8>
 8005fd8:	2300      	movs	r3, #0
 8005fda:	9308      	str	r3, [sp, #32]
 8005fdc:	e779      	b.n	8005ed2 <_dtoa_r+0x7f2>
 8005fde:	d093      	beq.n	8005f08 <_dtoa_r+0x828>
 8005fe0:	9a00      	ldr	r2, [sp, #0]
 8005fe2:	331c      	adds	r3, #28
 8005fe4:	441a      	add	r2, r3
 8005fe6:	9200      	str	r2, [sp, #0]
 8005fe8:	9a06      	ldr	r2, [sp, #24]
 8005fea:	441a      	add	r2, r3
 8005fec:	441e      	add	r6, r3
 8005fee:	9206      	str	r2, [sp, #24]
 8005ff0:	e78a      	b.n	8005f08 <_dtoa_r+0x828>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	e7f4      	b.n	8005fe0 <_dtoa_r+0x900>
 8005ff6:	9b03      	ldr	r3, [sp, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	46b8      	mov	r8, r7
 8005ffc:	dc20      	bgt.n	8006040 <_dtoa_r+0x960>
 8005ffe:	469b      	mov	fp, r3
 8006000:	9b07      	ldr	r3, [sp, #28]
 8006002:	2b02      	cmp	r3, #2
 8006004:	dd1e      	ble.n	8006044 <_dtoa_r+0x964>
 8006006:	f1bb 0f00 	cmp.w	fp, #0
 800600a:	f47f adb1 	bne.w	8005b70 <_dtoa_r+0x490>
 800600e:	4621      	mov	r1, r4
 8006010:	465b      	mov	r3, fp
 8006012:	2205      	movs	r2, #5
 8006014:	4648      	mov	r0, r9
 8006016:	f000 fa95 	bl	8006544 <__multadd>
 800601a:	4601      	mov	r1, r0
 800601c:	4604      	mov	r4, r0
 800601e:	9802      	ldr	r0, [sp, #8]
 8006020:	f000 fca0 	bl	8006964 <__mcmp>
 8006024:	2800      	cmp	r0, #0
 8006026:	f77f ada3 	ble.w	8005b70 <_dtoa_r+0x490>
 800602a:	4656      	mov	r6, sl
 800602c:	2331      	movs	r3, #49	@ 0x31
 800602e:	f806 3b01 	strb.w	r3, [r6], #1
 8006032:	f108 0801 	add.w	r8, r8, #1
 8006036:	e59f      	b.n	8005b78 <_dtoa_r+0x498>
 8006038:	9c03      	ldr	r4, [sp, #12]
 800603a:	46b8      	mov	r8, r7
 800603c:	4625      	mov	r5, r4
 800603e:	e7f4      	b.n	800602a <_dtoa_r+0x94a>
 8006040:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006046:	2b00      	cmp	r3, #0
 8006048:	f000 8101 	beq.w	800624e <_dtoa_r+0xb6e>
 800604c:	2e00      	cmp	r6, #0
 800604e:	dd05      	ble.n	800605c <_dtoa_r+0x97c>
 8006050:	4629      	mov	r1, r5
 8006052:	4632      	mov	r2, r6
 8006054:	4648      	mov	r0, r9
 8006056:	f000 fc19 	bl	800688c <__lshift>
 800605a:	4605      	mov	r5, r0
 800605c:	9b08      	ldr	r3, [sp, #32]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d05c      	beq.n	800611c <_dtoa_r+0xa3c>
 8006062:	6869      	ldr	r1, [r5, #4]
 8006064:	4648      	mov	r0, r9
 8006066:	f000 fa0b 	bl	8006480 <_Balloc>
 800606a:	4606      	mov	r6, r0
 800606c:	b928      	cbnz	r0, 800607a <_dtoa_r+0x99a>
 800606e:	4b82      	ldr	r3, [pc, #520]	@ (8006278 <_dtoa_r+0xb98>)
 8006070:	4602      	mov	r2, r0
 8006072:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006076:	f7ff bb4a 	b.w	800570e <_dtoa_r+0x2e>
 800607a:	692a      	ldr	r2, [r5, #16]
 800607c:	3202      	adds	r2, #2
 800607e:	0092      	lsls	r2, r2, #2
 8006080:	f105 010c 	add.w	r1, r5, #12
 8006084:	300c      	adds	r0, #12
 8006086:	f001 f807 	bl	8007098 <memcpy>
 800608a:	2201      	movs	r2, #1
 800608c:	4631      	mov	r1, r6
 800608e:	4648      	mov	r0, r9
 8006090:	f000 fbfc 	bl	800688c <__lshift>
 8006094:	f10a 0301 	add.w	r3, sl, #1
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	eb0a 030b 	add.w	r3, sl, fp
 800609e:	9308      	str	r3, [sp, #32]
 80060a0:	9b04      	ldr	r3, [sp, #16]
 80060a2:	f003 0301 	and.w	r3, r3, #1
 80060a6:	462f      	mov	r7, r5
 80060a8:	9306      	str	r3, [sp, #24]
 80060aa:	4605      	mov	r5, r0
 80060ac:	9b00      	ldr	r3, [sp, #0]
 80060ae:	9802      	ldr	r0, [sp, #8]
 80060b0:	4621      	mov	r1, r4
 80060b2:	f103 3bff 	add.w	fp, r3, #4294967295
 80060b6:	f7ff fa8a 	bl	80055ce <quorem>
 80060ba:	4603      	mov	r3, r0
 80060bc:	3330      	adds	r3, #48	@ 0x30
 80060be:	9003      	str	r0, [sp, #12]
 80060c0:	4639      	mov	r1, r7
 80060c2:	9802      	ldr	r0, [sp, #8]
 80060c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80060c6:	f000 fc4d 	bl	8006964 <__mcmp>
 80060ca:	462a      	mov	r2, r5
 80060cc:	9004      	str	r0, [sp, #16]
 80060ce:	4621      	mov	r1, r4
 80060d0:	4648      	mov	r0, r9
 80060d2:	f000 fc63 	bl	800699c <__mdiff>
 80060d6:	68c2      	ldr	r2, [r0, #12]
 80060d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060da:	4606      	mov	r6, r0
 80060dc:	bb02      	cbnz	r2, 8006120 <_dtoa_r+0xa40>
 80060de:	4601      	mov	r1, r0
 80060e0:	9802      	ldr	r0, [sp, #8]
 80060e2:	f000 fc3f 	bl	8006964 <__mcmp>
 80060e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060e8:	4602      	mov	r2, r0
 80060ea:	4631      	mov	r1, r6
 80060ec:	4648      	mov	r0, r9
 80060ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80060f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80060f2:	f000 fa05 	bl	8006500 <_Bfree>
 80060f6:	9b07      	ldr	r3, [sp, #28]
 80060f8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80060fa:	9e00      	ldr	r6, [sp, #0]
 80060fc:	ea42 0103 	orr.w	r1, r2, r3
 8006100:	9b06      	ldr	r3, [sp, #24]
 8006102:	4319      	orrs	r1, r3
 8006104:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006106:	d10d      	bne.n	8006124 <_dtoa_r+0xa44>
 8006108:	2b39      	cmp	r3, #57	@ 0x39
 800610a:	d027      	beq.n	800615c <_dtoa_r+0xa7c>
 800610c:	9a04      	ldr	r2, [sp, #16]
 800610e:	2a00      	cmp	r2, #0
 8006110:	dd01      	ble.n	8006116 <_dtoa_r+0xa36>
 8006112:	9b03      	ldr	r3, [sp, #12]
 8006114:	3331      	adds	r3, #49	@ 0x31
 8006116:	f88b 3000 	strb.w	r3, [fp]
 800611a:	e52e      	b.n	8005b7a <_dtoa_r+0x49a>
 800611c:	4628      	mov	r0, r5
 800611e:	e7b9      	b.n	8006094 <_dtoa_r+0x9b4>
 8006120:	2201      	movs	r2, #1
 8006122:	e7e2      	b.n	80060ea <_dtoa_r+0xa0a>
 8006124:	9904      	ldr	r1, [sp, #16]
 8006126:	2900      	cmp	r1, #0
 8006128:	db04      	blt.n	8006134 <_dtoa_r+0xa54>
 800612a:	9807      	ldr	r0, [sp, #28]
 800612c:	4301      	orrs	r1, r0
 800612e:	9806      	ldr	r0, [sp, #24]
 8006130:	4301      	orrs	r1, r0
 8006132:	d120      	bne.n	8006176 <_dtoa_r+0xa96>
 8006134:	2a00      	cmp	r2, #0
 8006136:	ddee      	ble.n	8006116 <_dtoa_r+0xa36>
 8006138:	9902      	ldr	r1, [sp, #8]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	2201      	movs	r2, #1
 800613e:	4648      	mov	r0, r9
 8006140:	f000 fba4 	bl	800688c <__lshift>
 8006144:	4621      	mov	r1, r4
 8006146:	9002      	str	r0, [sp, #8]
 8006148:	f000 fc0c 	bl	8006964 <__mcmp>
 800614c:	2800      	cmp	r0, #0
 800614e:	9b00      	ldr	r3, [sp, #0]
 8006150:	dc02      	bgt.n	8006158 <_dtoa_r+0xa78>
 8006152:	d1e0      	bne.n	8006116 <_dtoa_r+0xa36>
 8006154:	07da      	lsls	r2, r3, #31
 8006156:	d5de      	bpl.n	8006116 <_dtoa_r+0xa36>
 8006158:	2b39      	cmp	r3, #57	@ 0x39
 800615a:	d1da      	bne.n	8006112 <_dtoa_r+0xa32>
 800615c:	2339      	movs	r3, #57	@ 0x39
 800615e:	f88b 3000 	strb.w	r3, [fp]
 8006162:	4633      	mov	r3, r6
 8006164:	461e      	mov	r6, r3
 8006166:	3b01      	subs	r3, #1
 8006168:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800616c:	2a39      	cmp	r2, #57	@ 0x39
 800616e:	d04e      	beq.n	800620e <_dtoa_r+0xb2e>
 8006170:	3201      	adds	r2, #1
 8006172:	701a      	strb	r2, [r3, #0]
 8006174:	e501      	b.n	8005b7a <_dtoa_r+0x49a>
 8006176:	2a00      	cmp	r2, #0
 8006178:	dd03      	ble.n	8006182 <_dtoa_r+0xaa2>
 800617a:	2b39      	cmp	r3, #57	@ 0x39
 800617c:	d0ee      	beq.n	800615c <_dtoa_r+0xa7c>
 800617e:	3301      	adds	r3, #1
 8006180:	e7c9      	b.n	8006116 <_dtoa_r+0xa36>
 8006182:	9a00      	ldr	r2, [sp, #0]
 8006184:	9908      	ldr	r1, [sp, #32]
 8006186:	f802 3c01 	strb.w	r3, [r2, #-1]
 800618a:	428a      	cmp	r2, r1
 800618c:	d028      	beq.n	80061e0 <_dtoa_r+0xb00>
 800618e:	9902      	ldr	r1, [sp, #8]
 8006190:	2300      	movs	r3, #0
 8006192:	220a      	movs	r2, #10
 8006194:	4648      	mov	r0, r9
 8006196:	f000 f9d5 	bl	8006544 <__multadd>
 800619a:	42af      	cmp	r7, r5
 800619c:	9002      	str	r0, [sp, #8]
 800619e:	f04f 0300 	mov.w	r3, #0
 80061a2:	f04f 020a 	mov.w	r2, #10
 80061a6:	4639      	mov	r1, r7
 80061a8:	4648      	mov	r0, r9
 80061aa:	d107      	bne.n	80061bc <_dtoa_r+0xadc>
 80061ac:	f000 f9ca 	bl	8006544 <__multadd>
 80061b0:	4607      	mov	r7, r0
 80061b2:	4605      	mov	r5, r0
 80061b4:	9b00      	ldr	r3, [sp, #0]
 80061b6:	3301      	adds	r3, #1
 80061b8:	9300      	str	r3, [sp, #0]
 80061ba:	e777      	b.n	80060ac <_dtoa_r+0x9cc>
 80061bc:	f000 f9c2 	bl	8006544 <__multadd>
 80061c0:	4629      	mov	r1, r5
 80061c2:	4607      	mov	r7, r0
 80061c4:	2300      	movs	r3, #0
 80061c6:	220a      	movs	r2, #10
 80061c8:	4648      	mov	r0, r9
 80061ca:	f000 f9bb 	bl	8006544 <__multadd>
 80061ce:	4605      	mov	r5, r0
 80061d0:	e7f0      	b.n	80061b4 <_dtoa_r+0xad4>
 80061d2:	f1bb 0f00 	cmp.w	fp, #0
 80061d6:	bfcc      	ite	gt
 80061d8:	465e      	movgt	r6, fp
 80061da:	2601      	movle	r6, #1
 80061dc:	4456      	add	r6, sl
 80061de:	2700      	movs	r7, #0
 80061e0:	9902      	ldr	r1, [sp, #8]
 80061e2:	9300      	str	r3, [sp, #0]
 80061e4:	2201      	movs	r2, #1
 80061e6:	4648      	mov	r0, r9
 80061e8:	f000 fb50 	bl	800688c <__lshift>
 80061ec:	4621      	mov	r1, r4
 80061ee:	9002      	str	r0, [sp, #8]
 80061f0:	f000 fbb8 	bl	8006964 <__mcmp>
 80061f4:	2800      	cmp	r0, #0
 80061f6:	dcb4      	bgt.n	8006162 <_dtoa_r+0xa82>
 80061f8:	d102      	bne.n	8006200 <_dtoa_r+0xb20>
 80061fa:	9b00      	ldr	r3, [sp, #0]
 80061fc:	07db      	lsls	r3, r3, #31
 80061fe:	d4b0      	bmi.n	8006162 <_dtoa_r+0xa82>
 8006200:	4633      	mov	r3, r6
 8006202:	461e      	mov	r6, r3
 8006204:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006208:	2a30      	cmp	r2, #48	@ 0x30
 800620a:	d0fa      	beq.n	8006202 <_dtoa_r+0xb22>
 800620c:	e4b5      	b.n	8005b7a <_dtoa_r+0x49a>
 800620e:	459a      	cmp	sl, r3
 8006210:	d1a8      	bne.n	8006164 <_dtoa_r+0xa84>
 8006212:	2331      	movs	r3, #49	@ 0x31
 8006214:	f108 0801 	add.w	r8, r8, #1
 8006218:	f88a 3000 	strb.w	r3, [sl]
 800621c:	e4ad      	b.n	8005b7a <_dtoa_r+0x49a>
 800621e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006220:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800627c <_dtoa_r+0xb9c>
 8006224:	b11b      	cbz	r3, 800622e <_dtoa_r+0xb4e>
 8006226:	f10a 0308 	add.w	r3, sl, #8
 800622a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800622c:	6013      	str	r3, [r2, #0]
 800622e:	4650      	mov	r0, sl
 8006230:	b017      	add	sp, #92	@ 0x5c
 8006232:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006236:	9b07      	ldr	r3, [sp, #28]
 8006238:	2b01      	cmp	r3, #1
 800623a:	f77f ae2e 	ble.w	8005e9a <_dtoa_r+0x7ba>
 800623e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006240:	9308      	str	r3, [sp, #32]
 8006242:	2001      	movs	r0, #1
 8006244:	e64d      	b.n	8005ee2 <_dtoa_r+0x802>
 8006246:	f1bb 0f00 	cmp.w	fp, #0
 800624a:	f77f aed9 	ble.w	8006000 <_dtoa_r+0x920>
 800624e:	4656      	mov	r6, sl
 8006250:	9802      	ldr	r0, [sp, #8]
 8006252:	4621      	mov	r1, r4
 8006254:	f7ff f9bb 	bl	80055ce <quorem>
 8006258:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800625c:	f806 3b01 	strb.w	r3, [r6], #1
 8006260:	eba6 020a 	sub.w	r2, r6, sl
 8006264:	4593      	cmp	fp, r2
 8006266:	ddb4      	ble.n	80061d2 <_dtoa_r+0xaf2>
 8006268:	9902      	ldr	r1, [sp, #8]
 800626a:	2300      	movs	r3, #0
 800626c:	220a      	movs	r2, #10
 800626e:	4648      	mov	r0, r9
 8006270:	f000 f968 	bl	8006544 <__multadd>
 8006274:	9002      	str	r0, [sp, #8]
 8006276:	e7eb      	b.n	8006250 <_dtoa_r+0xb70>
 8006278:	080073f8 	.word	0x080073f8
 800627c:	0800737c 	.word	0x0800737c

08006280 <_free_r>:
 8006280:	b538      	push	{r3, r4, r5, lr}
 8006282:	4605      	mov	r5, r0
 8006284:	2900      	cmp	r1, #0
 8006286:	d041      	beq.n	800630c <_free_r+0x8c>
 8006288:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800628c:	1f0c      	subs	r4, r1, #4
 800628e:	2b00      	cmp	r3, #0
 8006290:	bfb8      	it	lt
 8006292:	18e4      	addlt	r4, r4, r3
 8006294:	f000 f8e8 	bl	8006468 <__malloc_lock>
 8006298:	4a1d      	ldr	r2, [pc, #116]	@ (8006310 <_free_r+0x90>)
 800629a:	6813      	ldr	r3, [r2, #0]
 800629c:	b933      	cbnz	r3, 80062ac <_free_r+0x2c>
 800629e:	6063      	str	r3, [r4, #4]
 80062a0:	6014      	str	r4, [r2, #0]
 80062a2:	4628      	mov	r0, r5
 80062a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80062a8:	f000 b8e4 	b.w	8006474 <__malloc_unlock>
 80062ac:	42a3      	cmp	r3, r4
 80062ae:	d908      	bls.n	80062c2 <_free_r+0x42>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	1821      	adds	r1, r4, r0
 80062b4:	428b      	cmp	r3, r1
 80062b6:	bf01      	itttt	eq
 80062b8:	6819      	ldreq	r1, [r3, #0]
 80062ba:	685b      	ldreq	r3, [r3, #4]
 80062bc:	1809      	addeq	r1, r1, r0
 80062be:	6021      	streq	r1, [r4, #0]
 80062c0:	e7ed      	b.n	800629e <_free_r+0x1e>
 80062c2:	461a      	mov	r2, r3
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	b10b      	cbz	r3, 80062cc <_free_r+0x4c>
 80062c8:	42a3      	cmp	r3, r4
 80062ca:	d9fa      	bls.n	80062c2 <_free_r+0x42>
 80062cc:	6811      	ldr	r1, [r2, #0]
 80062ce:	1850      	adds	r0, r2, r1
 80062d0:	42a0      	cmp	r0, r4
 80062d2:	d10b      	bne.n	80062ec <_free_r+0x6c>
 80062d4:	6820      	ldr	r0, [r4, #0]
 80062d6:	4401      	add	r1, r0
 80062d8:	1850      	adds	r0, r2, r1
 80062da:	4283      	cmp	r3, r0
 80062dc:	6011      	str	r1, [r2, #0]
 80062de:	d1e0      	bne.n	80062a2 <_free_r+0x22>
 80062e0:	6818      	ldr	r0, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	6053      	str	r3, [r2, #4]
 80062e6:	4408      	add	r0, r1
 80062e8:	6010      	str	r0, [r2, #0]
 80062ea:	e7da      	b.n	80062a2 <_free_r+0x22>
 80062ec:	d902      	bls.n	80062f4 <_free_r+0x74>
 80062ee:	230c      	movs	r3, #12
 80062f0:	602b      	str	r3, [r5, #0]
 80062f2:	e7d6      	b.n	80062a2 <_free_r+0x22>
 80062f4:	6820      	ldr	r0, [r4, #0]
 80062f6:	1821      	adds	r1, r4, r0
 80062f8:	428b      	cmp	r3, r1
 80062fa:	bf04      	itt	eq
 80062fc:	6819      	ldreq	r1, [r3, #0]
 80062fe:	685b      	ldreq	r3, [r3, #4]
 8006300:	6063      	str	r3, [r4, #4]
 8006302:	bf04      	itt	eq
 8006304:	1809      	addeq	r1, r1, r0
 8006306:	6021      	streq	r1, [r4, #0]
 8006308:	6054      	str	r4, [r2, #4]
 800630a:	e7ca      	b.n	80062a2 <_free_r+0x22>
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	200004d4 	.word	0x200004d4

08006314 <malloc>:
 8006314:	4b02      	ldr	r3, [pc, #8]	@ (8006320 <malloc+0xc>)
 8006316:	4601      	mov	r1, r0
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	f000 b825 	b.w	8006368 <_malloc_r>
 800631e:	bf00      	nop
 8006320:	20000018 	.word	0x20000018

08006324 <sbrk_aligned>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	4e0f      	ldr	r6, [pc, #60]	@ (8006364 <sbrk_aligned+0x40>)
 8006328:	460c      	mov	r4, r1
 800632a:	6831      	ldr	r1, [r6, #0]
 800632c:	4605      	mov	r5, r0
 800632e:	b911      	cbnz	r1, 8006336 <sbrk_aligned+0x12>
 8006330:	f000 fea2 	bl	8007078 <_sbrk_r>
 8006334:	6030      	str	r0, [r6, #0]
 8006336:	4621      	mov	r1, r4
 8006338:	4628      	mov	r0, r5
 800633a:	f000 fe9d 	bl	8007078 <_sbrk_r>
 800633e:	1c43      	adds	r3, r0, #1
 8006340:	d103      	bne.n	800634a <sbrk_aligned+0x26>
 8006342:	f04f 34ff 	mov.w	r4, #4294967295
 8006346:	4620      	mov	r0, r4
 8006348:	bd70      	pop	{r4, r5, r6, pc}
 800634a:	1cc4      	adds	r4, r0, #3
 800634c:	f024 0403 	bic.w	r4, r4, #3
 8006350:	42a0      	cmp	r0, r4
 8006352:	d0f8      	beq.n	8006346 <sbrk_aligned+0x22>
 8006354:	1a21      	subs	r1, r4, r0
 8006356:	4628      	mov	r0, r5
 8006358:	f000 fe8e 	bl	8007078 <_sbrk_r>
 800635c:	3001      	adds	r0, #1
 800635e:	d1f2      	bne.n	8006346 <sbrk_aligned+0x22>
 8006360:	e7ef      	b.n	8006342 <sbrk_aligned+0x1e>
 8006362:	bf00      	nop
 8006364:	200004d0 	.word	0x200004d0

08006368 <_malloc_r>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	1ccd      	adds	r5, r1, #3
 800636e:	f025 0503 	bic.w	r5, r5, #3
 8006372:	3508      	adds	r5, #8
 8006374:	2d0c      	cmp	r5, #12
 8006376:	bf38      	it	cc
 8006378:	250c      	movcc	r5, #12
 800637a:	2d00      	cmp	r5, #0
 800637c:	4606      	mov	r6, r0
 800637e:	db01      	blt.n	8006384 <_malloc_r+0x1c>
 8006380:	42a9      	cmp	r1, r5
 8006382:	d904      	bls.n	800638e <_malloc_r+0x26>
 8006384:	230c      	movs	r3, #12
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	2000      	movs	r0, #0
 800638a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800638e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006464 <_malloc_r+0xfc>
 8006392:	f000 f869 	bl	8006468 <__malloc_lock>
 8006396:	f8d8 3000 	ldr.w	r3, [r8]
 800639a:	461c      	mov	r4, r3
 800639c:	bb44      	cbnz	r4, 80063f0 <_malloc_r+0x88>
 800639e:	4629      	mov	r1, r5
 80063a0:	4630      	mov	r0, r6
 80063a2:	f7ff ffbf 	bl	8006324 <sbrk_aligned>
 80063a6:	1c43      	adds	r3, r0, #1
 80063a8:	4604      	mov	r4, r0
 80063aa:	d158      	bne.n	800645e <_malloc_r+0xf6>
 80063ac:	f8d8 4000 	ldr.w	r4, [r8]
 80063b0:	4627      	mov	r7, r4
 80063b2:	2f00      	cmp	r7, #0
 80063b4:	d143      	bne.n	800643e <_malloc_r+0xd6>
 80063b6:	2c00      	cmp	r4, #0
 80063b8:	d04b      	beq.n	8006452 <_malloc_r+0xea>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4639      	mov	r1, r7
 80063be:	4630      	mov	r0, r6
 80063c0:	eb04 0903 	add.w	r9, r4, r3
 80063c4:	f000 fe58 	bl	8007078 <_sbrk_r>
 80063c8:	4581      	cmp	r9, r0
 80063ca:	d142      	bne.n	8006452 <_malloc_r+0xea>
 80063cc:	6821      	ldr	r1, [r4, #0]
 80063ce:	1a6d      	subs	r5, r5, r1
 80063d0:	4629      	mov	r1, r5
 80063d2:	4630      	mov	r0, r6
 80063d4:	f7ff ffa6 	bl	8006324 <sbrk_aligned>
 80063d8:	3001      	adds	r0, #1
 80063da:	d03a      	beq.n	8006452 <_malloc_r+0xea>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	442b      	add	r3, r5
 80063e0:	6023      	str	r3, [r4, #0]
 80063e2:	f8d8 3000 	ldr.w	r3, [r8]
 80063e6:	685a      	ldr	r2, [r3, #4]
 80063e8:	bb62      	cbnz	r2, 8006444 <_malloc_r+0xdc>
 80063ea:	f8c8 7000 	str.w	r7, [r8]
 80063ee:	e00f      	b.n	8006410 <_malloc_r+0xa8>
 80063f0:	6822      	ldr	r2, [r4, #0]
 80063f2:	1b52      	subs	r2, r2, r5
 80063f4:	d420      	bmi.n	8006438 <_malloc_r+0xd0>
 80063f6:	2a0b      	cmp	r2, #11
 80063f8:	d917      	bls.n	800642a <_malloc_r+0xc2>
 80063fa:	1961      	adds	r1, r4, r5
 80063fc:	42a3      	cmp	r3, r4
 80063fe:	6025      	str	r5, [r4, #0]
 8006400:	bf18      	it	ne
 8006402:	6059      	strne	r1, [r3, #4]
 8006404:	6863      	ldr	r3, [r4, #4]
 8006406:	bf08      	it	eq
 8006408:	f8c8 1000 	streq.w	r1, [r8]
 800640c:	5162      	str	r2, [r4, r5]
 800640e:	604b      	str	r3, [r1, #4]
 8006410:	4630      	mov	r0, r6
 8006412:	f000 f82f 	bl	8006474 <__malloc_unlock>
 8006416:	f104 000b 	add.w	r0, r4, #11
 800641a:	1d23      	adds	r3, r4, #4
 800641c:	f020 0007 	bic.w	r0, r0, #7
 8006420:	1ac2      	subs	r2, r0, r3
 8006422:	bf1c      	itt	ne
 8006424:	1a1b      	subne	r3, r3, r0
 8006426:	50a3      	strne	r3, [r4, r2]
 8006428:	e7af      	b.n	800638a <_malloc_r+0x22>
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	bf0c      	ite	eq
 8006430:	f8c8 2000 	streq.w	r2, [r8]
 8006434:	605a      	strne	r2, [r3, #4]
 8006436:	e7eb      	b.n	8006410 <_malloc_r+0xa8>
 8006438:	4623      	mov	r3, r4
 800643a:	6864      	ldr	r4, [r4, #4]
 800643c:	e7ae      	b.n	800639c <_malloc_r+0x34>
 800643e:	463c      	mov	r4, r7
 8006440:	687f      	ldr	r7, [r7, #4]
 8006442:	e7b6      	b.n	80063b2 <_malloc_r+0x4a>
 8006444:	461a      	mov	r2, r3
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	42a3      	cmp	r3, r4
 800644a:	d1fb      	bne.n	8006444 <_malloc_r+0xdc>
 800644c:	2300      	movs	r3, #0
 800644e:	6053      	str	r3, [r2, #4]
 8006450:	e7de      	b.n	8006410 <_malloc_r+0xa8>
 8006452:	230c      	movs	r3, #12
 8006454:	6033      	str	r3, [r6, #0]
 8006456:	4630      	mov	r0, r6
 8006458:	f000 f80c 	bl	8006474 <__malloc_unlock>
 800645c:	e794      	b.n	8006388 <_malloc_r+0x20>
 800645e:	6005      	str	r5, [r0, #0]
 8006460:	e7d6      	b.n	8006410 <_malloc_r+0xa8>
 8006462:	bf00      	nop
 8006464:	200004d4 	.word	0x200004d4

08006468 <__malloc_lock>:
 8006468:	4801      	ldr	r0, [pc, #4]	@ (8006470 <__malloc_lock+0x8>)
 800646a:	f7ff b8ae 	b.w	80055ca <__retarget_lock_acquire_recursive>
 800646e:	bf00      	nop
 8006470:	200004cc 	.word	0x200004cc

08006474 <__malloc_unlock>:
 8006474:	4801      	ldr	r0, [pc, #4]	@ (800647c <__malloc_unlock+0x8>)
 8006476:	f7ff b8a9 	b.w	80055cc <__retarget_lock_release_recursive>
 800647a:	bf00      	nop
 800647c:	200004cc 	.word	0x200004cc

08006480 <_Balloc>:
 8006480:	b570      	push	{r4, r5, r6, lr}
 8006482:	69c6      	ldr	r6, [r0, #28]
 8006484:	4604      	mov	r4, r0
 8006486:	460d      	mov	r5, r1
 8006488:	b976      	cbnz	r6, 80064a8 <_Balloc+0x28>
 800648a:	2010      	movs	r0, #16
 800648c:	f7ff ff42 	bl	8006314 <malloc>
 8006490:	4602      	mov	r2, r0
 8006492:	61e0      	str	r0, [r4, #28]
 8006494:	b920      	cbnz	r0, 80064a0 <_Balloc+0x20>
 8006496:	4b18      	ldr	r3, [pc, #96]	@ (80064f8 <_Balloc+0x78>)
 8006498:	4818      	ldr	r0, [pc, #96]	@ (80064fc <_Balloc+0x7c>)
 800649a:	216b      	movs	r1, #107	@ 0x6b
 800649c:	f000 fe0a 	bl	80070b4 <__assert_func>
 80064a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064a4:	6006      	str	r6, [r0, #0]
 80064a6:	60c6      	str	r6, [r0, #12]
 80064a8:	69e6      	ldr	r6, [r4, #28]
 80064aa:	68f3      	ldr	r3, [r6, #12]
 80064ac:	b183      	cbz	r3, 80064d0 <_Balloc+0x50>
 80064ae:	69e3      	ldr	r3, [r4, #28]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064b6:	b9b8      	cbnz	r0, 80064e8 <_Balloc+0x68>
 80064b8:	2101      	movs	r1, #1
 80064ba:	fa01 f605 	lsl.w	r6, r1, r5
 80064be:	1d72      	adds	r2, r6, #5
 80064c0:	0092      	lsls	r2, r2, #2
 80064c2:	4620      	mov	r0, r4
 80064c4:	f000 fe14 	bl	80070f0 <_calloc_r>
 80064c8:	b160      	cbz	r0, 80064e4 <_Balloc+0x64>
 80064ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064ce:	e00e      	b.n	80064ee <_Balloc+0x6e>
 80064d0:	2221      	movs	r2, #33	@ 0x21
 80064d2:	2104      	movs	r1, #4
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 fe0b 	bl	80070f0 <_calloc_r>
 80064da:	69e3      	ldr	r3, [r4, #28]
 80064dc:	60f0      	str	r0, [r6, #12]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e4      	bne.n	80064ae <_Balloc+0x2e>
 80064e4:	2000      	movs	r0, #0
 80064e6:	bd70      	pop	{r4, r5, r6, pc}
 80064e8:	6802      	ldr	r2, [r0, #0]
 80064ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064ee:	2300      	movs	r3, #0
 80064f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064f4:	e7f7      	b.n	80064e6 <_Balloc+0x66>
 80064f6:	bf00      	nop
 80064f8:	08007389 	.word	0x08007389
 80064fc:	08007409 	.word	0x08007409

08006500 <_Bfree>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	69c6      	ldr	r6, [r0, #28]
 8006504:	4605      	mov	r5, r0
 8006506:	460c      	mov	r4, r1
 8006508:	b976      	cbnz	r6, 8006528 <_Bfree+0x28>
 800650a:	2010      	movs	r0, #16
 800650c:	f7ff ff02 	bl	8006314 <malloc>
 8006510:	4602      	mov	r2, r0
 8006512:	61e8      	str	r0, [r5, #28]
 8006514:	b920      	cbnz	r0, 8006520 <_Bfree+0x20>
 8006516:	4b09      	ldr	r3, [pc, #36]	@ (800653c <_Bfree+0x3c>)
 8006518:	4809      	ldr	r0, [pc, #36]	@ (8006540 <_Bfree+0x40>)
 800651a:	218f      	movs	r1, #143	@ 0x8f
 800651c:	f000 fdca 	bl	80070b4 <__assert_func>
 8006520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006524:	6006      	str	r6, [r0, #0]
 8006526:	60c6      	str	r6, [r0, #12]
 8006528:	b13c      	cbz	r4, 800653a <_Bfree+0x3a>
 800652a:	69eb      	ldr	r3, [r5, #28]
 800652c:	6862      	ldr	r2, [r4, #4]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006534:	6021      	str	r1, [r4, #0]
 8006536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800653a:	bd70      	pop	{r4, r5, r6, pc}
 800653c:	08007389 	.word	0x08007389
 8006540:	08007409 	.word	0x08007409

08006544 <__multadd>:
 8006544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006548:	690d      	ldr	r5, [r1, #16]
 800654a:	4607      	mov	r7, r0
 800654c:	460c      	mov	r4, r1
 800654e:	461e      	mov	r6, r3
 8006550:	f101 0c14 	add.w	ip, r1, #20
 8006554:	2000      	movs	r0, #0
 8006556:	f8dc 3000 	ldr.w	r3, [ip]
 800655a:	b299      	uxth	r1, r3
 800655c:	fb02 6101 	mla	r1, r2, r1, r6
 8006560:	0c1e      	lsrs	r6, r3, #16
 8006562:	0c0b      	lsrs	r3, r1, #16
 8006564:	fb02 3306 	mla	r3, r2, r6, r3
 8006568:	b289      	uxth	r1, r1
 800656a:	3001      	adds	r0, #1
 800656c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006570:	4285      	cmp	r5, r0
 8006572:	f84c 1b04 	str.w	r1, [ip], #4
 8006576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800657a:	dcec      	bgt.n	8006556 <__multadd+0x12>
 800657c:	b30e      	cbz	r6, 80065c2 <__multadd+0x7e>
 800657e:	68a3      	ldr	r3, [r4, #8]
 8006580:	42ab      	cmp	r3, r5
 8006582:	dc19      	bgt.n	80065b8 <__multadd+0x74>
 8006584:	6861      	ldr	r1, [r4, #4]
 8006586:	4638      	mov	r0, r7
 8006588:	3101      	adds	r1, #1
 800658a:	f7ff ff79 	bl	8006480 <_Balloc>
 800658e:	4680      	mov	r8, r0
 8006590:	b928      	cbnz	r0, 800659e <__multadd+0x5a>
 8006592:	4602      	mov	r2, r0
 8006594:	4b0c      	ldr	r3, [pc, #48]	@ (80065c8 <__multadd+0x84>)
 8006596:	480d      	ldr	r0, [pc, #52]	@ (80065cc <__multadd+0x88>)
 8006598:	21ba      	movs	r1, #186	@ 0xba
 800659a:	f000 fd8b 	bl	80070b4 <__assert_func>
 800659e:	6922      	ldr	r2, [r4, #16]
 80065a0:	3202      	adds	r2, #2
 80065a2:	f104 010c 	add.w	r1, r4, #12
 80065a6:	0092      	lsls	r2, r2, #2
 80065a8:	300c      	adds	r0, #12
 80065aa:	f000 fd75 	bl	8007098 <memcpy>
 80065ae:	4621      	mov	r1, r4
 80065b0:	4638      	mov	r0, r7
 80065b2:	f7ff ffa5 	bl	8006500 <_Bfree>
 80065b6:	4644      	mov	r4, r8
 80065b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065bc:	3501      	adds	r5, #1
 80065be:	615e      	str	r6, [r3, #20]
 80065c0:	6125      	str	r5, [r4, #16]
 80065c2:	4620      	mov	r0, r4
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c8:	080073f8 	.word	0x080073f8
 80065cc:	08007409 	.word	0x08007409

080065d0 <__hi0bits>:
 80065d0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80065d4:	4603      	mov	r3, r0
 80065d6:	bf36      	itet	cc
 80065d8:	0403      	lslcc	r3, r0, #16
 80065da:	2000      	movcs	r0, #0
 80065dc:	2010      	movcc	r0, #16
 80065de:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065e2:	bf3c      	itt	cc
 80065e4:	021b      	lslcc	r3, r3, #8
 80065e6:	3008      	addcc	r0, #8
 80065e8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80065ec:	bf3c      	itt	cc
 80065ee:	011b      	lslcc	r3, r3, #4
 80065f0:	3004      	addcc	r0, #4
 80065f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065f6:	bf3c      	itt	cc
 80065f8:	009b      	lslcc	r3, r3, #2
 80065fa:	3002      	addcc	r0, #2
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	db05      	blt.n	800660c <__hi0bits+0x3c>
 8006600:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006604:	f100 0001 	add.w	r0, r0, #1
 8006608:	bf08      	it	eq
 800660a:	2020      	moveq	r0, #32
 800660c:	4770      	bx	lr

0800660e <__lo0bits>:
 800660e:	6803      	ldr	r3, [r0, #0]
 8006610:	4602      	mov	r2, r0
 8006612:	f013 0007 	ands.w	r0, r3, #7
 8006616:	d00b      	beq.n	8006630 <__lo0bits+0x22>
 8006618:	07d9      	lsls	r1, r3, #31
 800661a:	d421      	bmi.n	8006660 <__lo0bits+0x52>
 800661c:	0798      	lsls	r0, r3, #30
 800661e:	bf49      	itett	mi
 8006620:	085b      	lsrmi	r3, r3, #1
 8006622:	089b      	lsrpl	r3, r3, #2
 8006624:	2001      	movmi	r0, #1
 8006626:	6013      	strmi	r3, [r2, #0]
 8006628:	bf5c      	itt	pl
 800662a:	6013      	strpl	r3, [r2, #0]
 800662c:	2002      	movpl	r0, #2
 800662e:	4770      	bx	lr
 8006630:	b299      	uxth	r1, r3
 8006632:	b909      	cbnz	r1, 8006638 <__lo0bits+0x2a>
 8006634:	0c1b      	lsrs	r3, r3, #16
 8006636:	2010      	movs	r0, #16
 8006638:	b2d9      	uxtb	r1, r3
 800663a:	b909      	cbnz	r1, 8006640 <__lo0bits+0x32>
 800663c:	3008      	adds	r0, #8
 800663e:	0a1b      	lsrs	r3, r3, #8
 8006640:	0719      	lsls	r1, r3, #28
 8006642:	bf04      	itt	eq
 8006644:	091b      	lsreq	r3, r3, #4
 8006646:	3004      	addeq	r0, #4
 8006648:	0799      	lsls	r1, r3, #30
 800664a:	bf04      	itt	eq
 800664c:	089b      	lsreq	r3, r3, #2
 800664e:	3002      	addeq	r0, #2
 8006650:	07d9      	lsls	r1, r3, #31
 8006652:	d403      	bmi.n	800665c <__lo0bits+0x4e>
 8006654:	085b      	lsrs	r3, r3, #1
 8006656:	f100 0001 	add.w	r0, r0, #1
 800665a:	d003      	beq.n	8006664 <__lo0bits+0x56>
 800665c:	6013      	str	r3, [r2, #0]
 800665e:	4770      	bx	lr
 8006660:	2000      	movs	r0, #0
 8006662:	4770      	bx	lr
 8006664:	2020      	movs	r0, #32
 8006666:	4770      	bx	lr

08006668 <__i2b>:
 8006668:	b510      	push	{r4, lr}
 800666a:	460c      	mov	r4, r1
 800666c:	2101      	movs	r1, #1
 800666e:	f7ff ff07 	bl	8006480 <_Balloc>
 8006672:	4602      	mov	r2, r0
 8006674:	b928      	cbnz	r0, 8006682 <__i2b+0x1a>
 8006676:	4b05      	ldr	r3, [pc, #20]	@ (800668c <__i2b+0x24>)
 8006678:	4805      	ldr	r0, [pc, #20]	@ (8006690 <__i2b+0x28>)
 800667a:	f240 1145 	movw	r1, #325	@ 0x145
 800667e:	f000 fd19 	bl	80070b4 <__assert_func>
 8006682:	2301      	movs	r3, #1
 8006684:	6144      	str	r4, [r0, #20]
 8006686:	6103      	str	r3, [r0, #16]
 8006688:	bd10      	pop	{r4, pc}
 800668a:	bf00      	nop
 800668c:	080073f8 	.word	0x080073f8
 8006690:	08007409 	.word	0x08007409

08006694 <__multiply>:
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	4617      	mov	r7, r2
 800669a:	690a      	ldr	r2, [r1, #16]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	429a      	cmp	r2, r3
 80066a0:	bfa8      	it	ge
 80066a2:	463b      	movge	r3, r7
 80066a4:	4689      	mov	r9, r1
 80066a6:	bfa4      	itt	ge
 80066a8:	460f      	movge	r7, r1
 80066aa:	4699      	movge	r9, r3
 80066ac:	693d      	ldr	r5, [r7, #16]
 80066ae:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	6879      	ldr	r1, [r7, #4]
 80066b6:	eb05 060a 	add.w	r6, r5, sl
 80066ba:	42b3      	cmp	r3, r6
 80066bc:	b085      	sub	sp, #20
 80066be:	bfb8      	it	lt
 80066c0:	3101      	addlt	r1, #1
 80066c2:	f7ff fedd 	bl	8006480 <_Balloc>
 80066c6:	b930      	cbnz	r0, 80066d6 <__multiply+0x42>
 80066c8:	4602      	mov	r2, r0
 80066ca:	4b41      	ldr	r3, [pc, #260]	@ (80067d0 <__multiply+0x13c>)
 80066cc:	4841      	ldr	r0, [pc, #260]	@ (80067d4 <__multiply+0x140>)
 80066ce:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80066d2:	f000 fcef 	bl	80070b4 <__assert_func>
 80066d6:	f100 0414 	add.w	r4, r0, #20
 80066da:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80066de:	4623      	mov	r3, r4
 80066e0:	2200      	movs	r2, #0
 80066e2:	4573      	cmp	r3, lr
 80066e4:	d320      	bcc.n	8006728 <__multiply+0x94>
 80066e6:	f107 0814 	add.w	r8, r7, #20
 80066ea:	f109 0114 	add.w	r1, r9, #20
 80066ee:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80066f2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80066f6:	9302      	str	r3, [sp, #8]
 80066f8:	1beb      	subs	r3, r5, r7
 80066fa:	3b15      	subs	r3, #21
 80066fc:	f023 0303 	bic.w	r3, r3, #3
 8006700:	3304      	adds	r3, #4
 8006702:	3715      	adds	r7, #21
 8006704:	42bd      	cmp	r5, r7
 8006706:	bf38      	it	cc
 8006708:	2304      	movcc	r3, #4
 800670a:	9301      	str	r3, [sp, #4]
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	9103      	str	r1, [sp, #12]
 8006710:	428b      	cmp	r3, r1
 8006712:	d80c      	bhi.n	800672e <__multiply+0x9a>
 8006714:	2e00      	cmp	r6, #0
 8006716:	dd03      	ble.n	8006720 <__multiply+0x8c>
 8006718:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800671c:	2b00      	cmp	r3, #0
 800671e:	d055      	beq.n	80067cc <__multiply+0x138>
 8006720:	6106      	str	r6, [r0, #16]
 8006722:	b005      	add	sp, #20
 8006724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006728:	f843 2b04 	str.w	r2, [r3], #4
 800672c:	e7d9      	b.n	80066e2 <__multiply+0x4e>
 800672e:	f8b1 a000 	ldrh.w	sl, [r1]
 8006732:	f1ba 0f00 	cmp.w	sl, #0
 8006736:	d01f      	beq.n	8006778 <__multiply+0xe4>
 8006738:	46c4      	mov	ip, r8
 800673a:	46a1      	mov	r9, r4
 800673c:	2700      	movs	r7, #0
 800673e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006742:	f8d9 3000 	ldr.w	r3, [r9]
 8006746:	fa1f fb82 	uxth.w	fp, r2
 800674a:	b29b      	uxth	r3, r3
 800674c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006750:	443b      	add	r3, r7
 8006752:	f8d9 7000 	ldr.w	r7, [r9]
 8006756:	0c12      	lsrs	r2, r2, #16
 8006758:	0c3f      	lsrs	r7, r7, #16
 800675a:	fb0a 7202 	mla	r2, sl, r2, r7
 800675e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006762:	b29b      	uxth	r3, r3
 8006764:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006768:	4565      	cmp	r5, ip
 800676a:	f849 3b04 	str.w	r3, [r9], #4
 800676e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006772:	d8e4      	bhi.n	800673e <__multiply+0xaa>
 8006774:	9b01      	ldr	r3, [sp, #4]
 8006776:	50e7      	str	r7, [r4, r3]
 8006778:	9b03      	ldr	r3, [sp, #12]
 800677a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800677e:	3104      	adds	r1, #4
 8006780:	f1b9 0f00 	cmp.w	r9, #0
 8006784:	d020      	beq.n	80067c8 <__multiply+0x134>
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	4647      	mov	r7, r8
 800678a:	46a4      	mov	ip, r4
 800678c:	f04f 0a00 	mov.w	sl, #0
 8006790:	f8b7 b000 	ldrh.w	fp, [r7]
 8006794:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006798:	fb09 220b 	mla	r2, r9, fp, r2
 800679c:	4452      	add	r2, sl
 800679e:	b29b      	uxth	r3, r3
 80067a0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80067a4:	f84c 3b04 	str.w	r3, [ip], #4
 80067a8:	f857 3b04 	ldr.w	r3, [r7], #4
 80067ac:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067b0:	f8bc 3000 	ldrh.w	r3, [ip]
 80067b4:	fb09 330a 	mla	r3, r9, sl, r3
 80067b8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80067bc:	42bd      	cmp	r5, r7
 80067be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80067c2:	d8e5      	bhi.n	8006790 <__multiply+0xfc>
 80067c4:	9a01      	ldr	r2, [sp, #4]
 80067c6:	50a3      	str	r3, [r4, r2]
 80067c8:	3404      	adds	r4, #4
 80067ca:	e79f      	b.n	800670c <__multiply+0x78>
 80067cc:	3e01      	subs	r6, #1
 80067ce:	e7a1      	b.n	8006714 <__multiply+0x80>
 80067d0:	080073f8 	.word	0x080073f8
 80067d4:	08007409 	.word	0x08007409

080067d8 <__pow5mult>:
 80067d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067dc:	4615      	mov	r5, r2
 80067de:	f012 0203 	ands.w	r2, r2, #3
 80067e2:	4607      	mov	r7, r0
 80067e4:	460e      	mov	r6, r1
 80067e6:	d007      	beq.n	80067f8 <__pow5mult+0x20>
 80067e8:	4c25      	ldr	r4, [pc, #148]	@ (8006880 <__pow5mult+0xa8>)
 80067ea:	3a01      	subs	r2, #1
 80067ec:	2300      	movs	r3, #0
 80067ee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067f2:	f7ff fea7 	bl	8006544 <__multadd>
 80067f6:	4606      	mov	r6, r0
 80067f8:	10ad      	asrs	r5, r5, #2
 80067fa:	d03d      	beq.n	8006878 <__pow5mult+0xa0>
 80067fc:	69fc      	ldr	r4, [r7, #28]
 80067fe:	b97c      	cbnz	r4, 8006820 <__pow5mult+0x48>
 8006800:	2010      	movs	r0, #16
 8006802:	f7ff fd87 	bl	8006314 <malloc>
 8006806:	4602      	mov	r2, r0
 8006808:	61f8      	str	r0, [r7, #28]
 800680a:	b928      	cbnz	r0, 8006818 <__pow5mult+0x40>
 800680c:	4b1d      	ldr	r3, [pc, #116]	@ (8006884 <__pow5mult+0xac>)
 800680e:	481e      	ldr	r0, [pc, #120]	@ (8006888 <__pow5mult+0xb0>)
 8006810:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006814:	f000 fc4e 	bl	80070b4 <__assert_func>
 8006818:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800681c:	6004      	str	r4, [r0, #0]
 800681e:	60c4      	str	r4, [r0, #12]
 8006820:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006824:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006828:	b94c      	cbnz	r4, 800683e <__pow5mult+0x66>
 800682a:	f240 2171 	movw	r1, #625	@ 0x271
 800682e:	4638      	mov	r0, r7
 8006830:	f7ff ff1a 	bl	8006668 <__i2b>
 8006834:	2300      	movs	r3, #0
 8006836:	f8c8 0008 	str.w	r0, [r8, #8]
 800683a:	4604      	mov	r4, r0
 800683c:	6003      	str	r3, [r0, #0]
 800683e:	f04f 0900 	mov.w	r9, #0
 8006842:	07eb      	lsls	r3, r5, #31
 8006844:	d50a      	bpl.n	800685c <__pow5mult+0x84>
 8006846:	4631      	mov	r1, r6
 8006848:	4622      	mov	r2, r4
 800684a:	4638      	mov	r0, r7
 800684c:	f7ff ff22 	bl	8006694 <__multiply>
 8006850:	4631      	mov	r1, r6
 8006852:	4680      	mov	r8, r0
 8006854:	4638      	mov	r0, r7
 8006856:	f7ff fe53 	bl	8006500 <_Bfree>
 800685a:	4646      	mov	r6, r8
 800685c:	106d      	asrs	r5, r5, #1
 800685e:	d00b      	beq.n	8006878 <__pow5mult+0xa0>
 8006860:	6820      	ldr	r0, [r4, #0]
 8006862:	b938      	cbnz	r0, 8006874 <__pow5mult+0x9c>
 8006864:	4622      	mov	r2, r4
 8006866:	4621      	mov	r1, r4
 8006868:	4638      	mov	r0, r7
 800686a:	f7ff ff13 	bl	8006694 <__multiply>
 800686e:	6020      	str	r0, [r4, #0]
 8006870:	f8c0 9000 	str.w	r9, [r0]
 8006874:	4604      	mov	r4, r0
 8006876:	e7e4      	b.n	8006842 <__pow5mult+0x6a>
 8006878:	4630      	mov	r0, r6
 800687a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800687e:	bf00      	nop
 8006880:	080074bc 	.word	0x080074bc
 8006884:	08007389 	.word	0x08007389
 8006888:	08007409 	.word	0x08007409

0800688c <__lshift>:
 800688c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006890:	460c      	mov	r4, r1
 8006892:	6849      	ldr	r1, [r1, #4]
 8006894:	6923      	ldr	r3, [r4, #16]
 8006896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800689a:	68a3      	ldr	r3, [r4, #8]
 800689c:	4607      	mov	r7, r0
 800689e:	4691      	mov	r9, r2
 80068a0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068a4:	f108 0601 	add.w	r6, r8, #1
 80068a8:	42b3      	cmp	r3, r6
 80068aa:	db0b      	blt.n	80068c4 <__lshift+0x38>
 80068ac:	4638      	mov	r0, r7
 80068ae:	f7ff fde7 	bl	8006480 <_Balloc>
 80068b2:	4605      	mov	r5, r0
 80068b4:	b948      	cbnz	r0, 80068ca <__lshift+0x3e>
 80068b6:	4602      	mov	r2, r0
 80068b8:	4b28      	ldr	r3, [pc, #160]	@ (800695c <__lshift+0xd0>)
 80068ba:	4829      	ldr	r0, [pc, #164]	@ (8006960 <__lshift+0xd4>)
 80068bc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80068c0:	f000 fbf8 	bl	80070b4 <__assert_func>
 80068c4:	3101      	adds	r1, #1
 80068c6:	005b      	lsls	r3, r3, #1
 80068c8:	e7ee      	b.n	80068a8 <__lshift+0x1c>
 80068ca:	2300      	movs	r3, #0
 80068cc:	f100 0114 	add.w	r1, r0, #20
 80068d0:	f100 0210 	add.w	r2, r0, #16
 80068d4:	4618      	mov	r0, r3
 80068d6:	4553      	cmp	r3, sl
 80068d8:	db33      	blt.n	8006942 <__lshift+0xb6>
 80068da:	6920      	ldr	r0, [r4, #16]
 80068dc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068e0:	f104 0314 	add.w	r3, r4, #20
 80068e4:	f019 091f 	ands.w	r9, r9, #31
 80068e8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068ec:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068f0:	d02b      	beq.n	800694a <__lshift+0xbe>
 80068f2:	f1c9 0e20 	rsb	lr, r9, #32
 80068f6:	468a      	mov	sl, r1
 80068f8:	2200      	movs	r2, #0
 80068fa:	6818      	ldr	r0, [r3, #0]
 80068fc:	fa00 f009 	lsl.w	r0, r0, r9
 8006900:	4310      	orrs	r0, r2
 8006902:	f84a 0b04 	str.w	r0, [sl], #4
 8006906:	f853 2b04 	ldr.w	r2, [r3], #4
 800690a:	459c      	cmp	ip, r3
 800690c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006910:	d8f3      	bhi.n	80068fa <__lshift+0x6e>
 8006912:	ebac 0304 	sub.w	r3, ip, r4
 8006916:	3b15      	subs	r3, #21
 8006918:	f023 0303 	bic.w	r3, r3, #3
 800691c:	3304      	adds	r3, #4
 800691e:	f104 0015 	add.w	r0, r4, #21
 8006922:	4560      	cmp	r0, ip
 8006924:	bf88      	it	hi
 8006926:	2304      	movhi	r3, #4
 8006928:	50ca      	str	r2, [r1, r3]
 800692a:	b10a      	cbz	r2, 8006930 <__lshift+0xa4>
 800692c:	f108 0602 	add.w	r6, r8, #2
 8006930:	3e01      	subs	r6, #1
 8006932:	4638      	mov	r0, r7
 8006934:	612e      	str	r6, [r5, #16]
 8006936:	4621      	mov	r1, r4
 8006938:	f7ff fde2 	bl	8006500 <_Bfree>
 800693c:	4628      	mov	r0, r5
 800693e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006942:	f842 0f04 	str.w	r0, [r2, #4]!
 8006946:	3301      	adds	r3, #1
 8006948:	e7c5      	b.n	80068d6 <__lshift+0x4a>
 800694a:	3904      	subs	r1, #4
 800694c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006950:	f841 2f04 	str.w	r2, [r1, #4]!
 8006954:	459c      	cmp	ip, r3
 8006956:	d8f9      	bhi.n	800694c <__lshift+0xc0>
 8006958:	e7ea      	b.n	8006930 <__lshift+0xa4>
 800695a:	bf00      	nop
 800695c:	080073f8 	.word	0x080073f8
 8006960:	08007409 	.word	0x08007409

08006964 <__mcmp>:
 8006964:	690a      	ldr	r2, [r1, #16]
 8006966:	4603      	mov	r3, r0
 8006968:	6900      	ldr	r0, [r0, #16]
 800696a:	1a80      	subs	r0, r0, r2
 800696c:	b530      	push	{r4, r5, lr}
 800696e:	d10e      	bne.n	800698e <__mcmp+0x2a>
 8006970:	3314      	adds	r3, #20
 8006972:	3114      	adds	r1, #20
 8006974:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006978:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800697c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006980:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006984:	4295      	cmp	r5, r2
 8006986:	d003      	beq.n	8006990 <__mcmp+0x2c>
 8006988:	d205      	bcs.n	8006996 <__mcmp+0x32>
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	bd30      	pop	{r4, r5, pc}
 8006990:	42a3      	cmp	r3, r4
 8006992:	d3f3      	bcc.n	800697c <__mcmp+0x18>
 8006994:	e7fb      	b.n	800698e <__mcmp+0x2a>
 8006996:	2001      	movs	r0, #1
 8006998:	e7f9      	b.n	800698e <__mcmp+0x2a>
	...

0800699c <__mdiff>:
 800699c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a0:	4689      	mov	r9, r1
 80069a2:	4606      	mov	r6, r0
 80069a4:	4611      	mov	r1, r2
 80069a6:	4648      	mov	r0, r9
 80069a8:	4614      	mov	r4, r2
 80069aa:	f7ff ffdb 	bl	8006964 <__mcmp>
 80069ae:	1e05      	subs	r5, r0, #0
 80069b0:	d112      	bne.n	80069d8 <__mdiff+0x3c>
 80069b2:	4629      	mov	r1, r5
 80069b4:	4630      	mov	r0, r6
 80069b6:	f7ff fd63 	bl	8006480 <_Balloc>
 80069ba:	4602      	mov	r2, r0
 80069bc:	b928      	cbnz	r0, 80069ca <__mdiff+0x2e>
 80069be:	4b3f      	ldr	r3, [pc, #252]	@ (8006abc <__mdiff+0x120>)
 80069c0:	f240 2137 	movw	r1, #567	@ 0x237
 80069c4:	483e      	ldr	r0, [pc, #248]	@ (8006ac0 <__mdiff+0x124>)
 80069c6:	f000 fb75 	bl	80070b4 <__assert_func>
 80069ca:	2301      	movs	r3, #1
 80069cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069d0:	4610      	mov	r0, r2
 80069d2:	b003      	add	sp, #12
 80069d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069d8:	bfbc      	itt	lt
 80069da:	464b      	movlt	r3, r9
 80069dc:	46a1      	movlt	r9, r4
 80069de:	4630      	mov	r0, r6
 80069e0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80069e4:	bfba      	itte	lt
 80069e6:	461c      	movlt	r4, r3
 80069e8:	2501      	movlt	r5, #1
 80069ea:	2500      	movge	r5, #0
 80069ec:	f7ff fd48 	bl	8006480 <_Balloc>
 80069f0:	4602      	mov	r2, r0
 80069f2:	b918      	cbnz	r0, 80069fc <__mdiff+0x60>
 80069f4:	4b31      	ldr	r3, [pc, #196]	@ (8006abc <__mdiff+0x120>)
 80069f6:	f240 2145 	movw	r1, #581	@ 0x245
 80069fa:	e7e3      	b.n	80069c4 <__mdiff+0x28>
 80069fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006a00:	6926      	ldr	r6, [r4, #16]
 8006a02:	60c5      	str	r5, [r0, #12]
 8006a04:	f109 0310 	add.w	r3, r9, #16
 8006a08:	f109 0514 	add.w	r5, r9, #20
 8006a0c:	f104 0e14 	add.w	lr, r4, #20
 8006a10:	f100 0b14 	add.w	fp, r0, #20
 8006a14:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006a18:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006a1c:	9301      	str	r3, [sp, #4]
 8006a1e:	46d9      	mov	r9, fp
 8006a20:	f04f 0c00 	mov.w	ip, #0
 8006a24:	9b01      	ldr	r3, [sp, #4]
 8006a26:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006a2a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006a2e:	9301      	str	r3, [sp, #4]
 8006a30:	fa1f f38a 	uxth.w	r3, sl
 8006a34:	4619      	mov	r1, r3
 8006a36:	b283      	uxth	r3, r0
 8006a38:	1acb      	subs	r3, r1, r3
 8006a3a:	0c00      	lsrs	r0, r0, #16
 8006a3c:	4463      	add	r3, ip
 8006a3e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006a42:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006a4c:	4576      	cmp	r6, lr
 8006a4e:	f849 3b04 	str.w	r3, [r9], #4
 8006a52:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a56:	d8e5      	bhi.n	8006a24 <__mdiff+0x88>
 8006a58:	1b33      	subs	r3, r6, r4
 8006a5a:	3b15      	subs	r3, #21
 8006a5c:	f023 0303 	bic.w	r3, r3, #3
 8006a60:	3415      	adds	r4, #21
 8006a62:	3304      	adds	r3, #4
 8006a64:	42a6      	cmp	r6, r4
 8006a66:	bf38      	it	cc
 8006a68:	2304      	movcc	r3, #4
 8006a6a:	441d      	add	r5, r3
 8006a6c:	445b      	add	r3, fp
 8006a6e:	461e      	mov	r6, r3
 8006a70:	462c      	mov	r4, r5
 8006a72:	4544      	cmp	r4, r8
 8006a74:	d30e      	bcc.n	8006a94 <__mdiff+0xf8>
 8006a76:	f108 0103 	add.w	r1, r8, #3
 8006a7a:	1b49      	subs	r1, r1, r5
 8006a7c:	f021 0103 	bic.w	r1, r1, #3
 8006a80:	3d03      	subs	r5, #3
 8006a82:	45a8      	cmp	r8, r5
 8006a84:	bf38      	it	cc
 8006a86:	2100      	movcc	r1, #0
 8006a88:	440b      	add	r3, r1
 8006a8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a8e:	b191      	cbz	r1, 8006ab6 <__mdiff+0x11a>
 8006a90:	6117      	str	r7, [r2, #16]
 8006a92:	e79d      	b.n	80069d0 <__mdiff+0x34>
 8006a94:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a98:	46e6      	mov	lr, ip
 8006a9a:	0c08      	lsrs	r0, r1, #16
 8006a9c:	fa1c fc81 	uxtah	ip, ip, r1
 8006aa0:	4471      	add	r1, lr
 8006aa2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006aa6:	b289      	uxth	r1, r1
 8006aa8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006aac:	f846 1b04 	str.w	r1, [r6], #4
 8006ab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006ab4:	e7dd      	b.n	8006a72 <__mdiff+0xd6>
 8006ab6:	3f01      	subs	r7, #1
 8006ab8:	e7e7      	b.n	8006a8a <__mdiff+0xee>
 8006aba:	bf00      	nop
 8006abc:	080073f8 	.word	0x080073f8
 8006ac0:	08007409 	.word	0x08007409

08006ac4 <__d2b>:
 8006ac4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006ac8:	460f      	mov	r7, r1
 8006aca:	2101      	movs	r1, #1
 8006acc:	ec59 8b10 	vmov	r8, r9, d0
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	f7ff fcd5 	bl	8006480 <_Balloc>
 8006ad6:	4604      	mov	r4, r0
 8006ad8:	b930      	cbnz	r0, 8006ae8 <__d2b+0x24>
 8006ada:	4602      	mov	r2, r0
 8006adc:	4b23      	ldr	r3, [pc, #140]	@ (8006b6c <__d2b+0xa8>)
 8006ade:	4824      	ldr	r0, [pc, #144]	@ (8006b70 <__d2b+0xac>)
 8006ae0:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ae4:	f000 fae6 	bl	80070b4 <__assert_func>
 8006ae8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006aec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006af0:	b10d      	cbz	r5, 8006af6 <__d2b+0x32>
 8006af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006af6:	9301      	str	r3, [sp, #4]
 8006af8:	f1b8 0300 	subs.w	r3, r8, #0
 8006afc:	d023      	beq.n	8006b46 <__d2b+0x82>
 8006afe:	4668      	mov	r0, sp
 8006b00:	9300      	str	r3, [sp, #0]
 8006b02:	f7ff fd84 	bl	800660e <__lo0bits>
 8006b06:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006b0a:	b1d0      	cbz	r0, 8006b42 <__d2b+0x7e>
 8006b0c:	f1c0 0320 	rsb	r3, r0, #32
 8006b10:	fa02 f303 	lsl.w	r3, r2, r3
 8006b14:	430b      	orrs	r3, r1
 8006b16:	40c2      	lsrs	r2, r0
 8006b18:	6163      	str	r3, [r4, #20]
 8006b1a:	9201      	str	r2, [sp, #4]
 8006b1c:	9b01      	ldr	r3, [sp, #4]
 8006b1e:	61a3      	str	r3, [r4, #24]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	bf0c      	ite	eq
 8006b24:	2201      	moveq	r2, #1
 8006b26:	2202      	movne	r2, #2
 8006b28:	6122      	str	r2, [r4, #16]
 8006b2a:	b1a5      	cbz	r5, 8006b56 <__d2b+0x92>
 8006b2c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006b30:	4405      	add	r5, r0
 8006b32:	603d      	str	r5, [r7, #0]
 8006b34:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006b38:	6030      	str	r0, [r6, #0]
 8006b3a:	4620      	mov	r0, r4
 8006b3c:	b003      	add	sp, #12
 8006b3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b42:	6161      	str	r1, [r4, #20]
 8006b44:	e7ea      	b.n	8006b1c <__d2b+0x58>
 8006b46:	a801      	add	r0, sp, #4
 8006b48:	f7ff fd61 	bl	800660e <__lo0bits>
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	6163      	str	r3, [r4, #20]
 8006b50:	3020      	adds	r0, #32
 8006b52:	2201      	movs	r2, #1
 8006b54:	e7e8      	b.n	8006b28 <__d2b+0x64>
 8006b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b5a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006b5e:	6038      	str	r0, [r7, #0]
 8006b60:	6918      	ldr	r0, [r3, #16]
 8006b62:	f7ff fd35 	bl	80065d0 <__hi0bits>
 8006b66:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b6a:	e7e5      	b.n	8006b38 <__d2b+0x74>
 8006b6c:	080073f8 	.word	0x080073f8
 8006b70:	08007409 	.word	0x08007409

08006b74 <__sfputc_r>:
 8006b74:	6893      	ldr	r3, [r2, #8]
 8006b76:	3b01      	subs	r3, #1
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	b410      	push	{r4}
 8006b7c:	6093      	str	r3, [r2, #8]
 8006b7e:	da08      	bge.n	8006b92 <__sfputc_r+0x1e>
 8006b80:	6994      	ldr	r4, [r2, #24]
 8006b82:	42a3      	cmp	r3, r4
 8006b84:	db01      	blt.n	8006b8a <__sfputc_r+0x16>
 8006b86:	290a      	cmp	r1, #10
 8006b88:	d103      	bne.n	8006b92 <__sfputc_r+0x1e>
 8006b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b8e:	f000 b9df 	b.w	8006f50 <__swbuf_r>
 8006b92:	6813      	ldr	r3, [r2, #0]
 8006b94:	1c58      	adds	r0, r3, #1
 8006b96:	6010      	str	r0, [r2, #0]
 8006b98:	7019      	strb	r1, [r3, #0]
 8006b9a:	4608      	mov	r0, r1
 8006b9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <__sfputs_r>:
 8006ba2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ba4:	4606      	mov	r6, r0
 8006ba6:	460f      	mov	r7, r1
 8006ba8:	4614      	mov	r4, r2
 8006baa:	18d5      	adds	r5, r2, r3
 8006bac:	42ac      	cmp	r4, r5
 8006bae:	d101      	bne.n	8006bb4 <__sfputs_r+0x12>
 8006bb0:	2000      	movs	r0, #0
 8006bb2:	e007      	b.n	8006bc4 <__sfputs_r+0x22>
 8006bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bb8:	463a      	mov	r2, r7
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff ffda 	bl	8006b74 <__sfputc_r>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d1f3      	bne.n	8006bac <__sfputs_r+0xa>
 8006bc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006bc8 <_vfiprintf_r>:
 8006bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bcc:	460d      	mov	r5, r1
 8006bce:	b09d      	sub	sp, #116	@ 0x74
 8006bd0:	4614      	mov	r4, r2
 8006bd2:	4698      	mov	r8, r3
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	b118      	cbz	r0, 8006be0 <_vfiprintf_r+0x18>
 8006bd8:	6a03      	ldr	r3, [r0, #32]
 8006bda:	b90b      	cbnz	r3, 8006be0 <_vfiprintf_r+0x18>
 8006bdc:	f7fe fbfe 	bl	80053dc <__sinit>
 8006be0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006be2:	07d9      	lsls	r1, r3, #31
 8006be4:	d405      	bmi.n	8006bf2 <_vfiprintf_r+0x2a>
 8006be6:	89ab      	ldrh	r3, [r5, #12]
 8006be8:	059a      	lsls	r2, r3, #22
 8006bea:	d402      	bmi.n	8006bf2 <_vfiprintf_r+0x2a>
 8006bec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006bee:	f7fe fcec 	bl	80055ca <__retarget_lock_acquire_recursive>
 8006bf2:	89ab      	ldrh	r3, [r5, #12]
 8006bf4:	071b      	lsls	r3, r3, #28
 8006bf6:	d501      	bpl.n	8006bfc <_vfiprintf_r+0x34>
 8006bf8:	692b      	ldr	r3, [r5, #16]
 8006bfa:	b99b      	cbnz	r3, 8006c24 <_vfiprintf_r+0x5c>
 8006bfc:	4629      	mov	r1, r5
 8006bfe:	4630      	mov	r0, r6
 8006c00:	f000 f9e4 	bl	8006fcc <__swsetup_r>
 8006c04:	b170      	cbz	r0, 8006c24 <_vfiprintf_r+0x5c>
 8006c06:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c08:	07dc      	lsls	r4, r3, #31
 8006c0a:	d504      	bpl.n	8006c16 <_vfiprintf_r+0x4e>
 8006c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c10:	b01d      	add	sp, #116	@ 0x74
 8006c12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c16:	89ab      	ldrh	r3, [r5, #12]
 8006c18:	0598      	lsls	r0, r3, #22
 8006c1a:	d4f7      	bmi.n	8006c0c <_vfiprintf_r+0x44>
 8006c1c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c1e:	f7fe fcd5 	bl	80055cc <__retarget_lock_release_recursive>
 8006c22:	e7f3      	b.n	8006c0c <_vfiprintf_r+0x44>
 8006c24:	2300      	movs	r3, #0
 8006c26:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c28:	2320      	movs	r3, #32
 8006c2a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c32:	2330      	movs	r3, #48	@ 0x30
 8006c34:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006de4 <_vfiprintf_r+0x21c>
 8006c38:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c3c:	f04f 0901 	mov.w	r9, #1
 8006c40:	4623      	mov	r3, r4
 8006c42:	469a      	mov	sl, r3
 8006c44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c48:	b10a      	cbz	r2, 8006c4e <_vfiprintf_r+0x86>
 8006c4a:	2a25      	cmp	r2, #37	@ 0x25
 8006c4c:	d1f9      	bne.n	8006c42 <_vfiprintf_r+0x7a>
 8006c4e:	ebba 0b04 	subs.w	fp, sl, r4
 8006c52:	d00b      	beq.n	8006c6c <_vfiprintf_r+0xa4>
 8006c54:	465b      	mov	r3, fp
 8006c56:	4622      	mov	r2, r4
 8006c58:	4629      	mov	r1, r5
 8006c5a:	4630      	mov	r0, r6
 8006c5c:	f7ff ffa1 	bl	8006ba2 <__sfputs_r>
 8006c60:	3001      	adds	r0, #1
 8006c62:	f000 80a7 	beq.w	8006db4 <_vfiprintf_r+0x1ec>
 8006c66:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c68:	445a      	add	r2, fp
 8006c6a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c6c:	f89a 3000 	ldrb.w	r3, [sl]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	f000 809f 	beq.w	8006db4 <_vfiprintf_r+0x1ec>
 8006c76:	2300      	movs	r3, #0
 8006c78:	f04f 32ff 	mov.w	r2, #4294967295
 8006c7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c80:	f10a 0a01 	add.w	sl, sl, #1
 8006c84:	9304      	str	r3, [sp, #16]
 8006c86:	9307      	str	r3, [sp, #28]
 8006c88:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c8c:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c8e:	4654      	mov	r4, sl
 8006c90:	2205      	movs	r2, #5
 8006c92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c96:	4853      	ldr	r0, [pc, #332]	@ (8006de4 <_vfiprintf_r+0x21c>)
 8006c98:	f7f9 faba 	bl	8000210 <memchr>
 8006c9c:	9a04      	ldr	r2, [sp, #16]
 8006c9e:	b9d8      	cbnz	r0, 8006cd8 <_vfiprintf_r+0x110>
 8006ca0:	06d1      	lsls	r1, r2, #27
 8006ca2:	bf44      	itt	mi
 8006ca4:	2320      	movmi	r3, #32
 8006ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006caa:	0713      	lsls	r3, r2, #28
 8006cac:	bf44      	itt	mi
 8006cae:	232b      	movmi	r3, #43	@ 0x2b
 8006cb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006cb4:	f89a 3000 	ldrb.w	r3, [sl]
 8006cb8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cba:	d015      	beq.n	8006ce8 <_vfiprintf_r+0x120>
 8006cbc:	9a07      	ldr	r2, [sp, #28]
 8006cbe:	4654      	mov	r4, sl
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	f04f 0c0a 	mov.w	ip, #10
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ccc:	3b30      	subs	r3, #48	@ 0x30
 8006cce:	2b09      	cmp	r3, #9
 8006cd0:	d94b      	bls.n	8006d6a <_vfiprintf_r+0x1a2>
 8006cd2:	b1b0      	cbz	r0, 8006d02 <_vfiprintf_r+0x13a>
 8006cd4:	9207      	str	r2, [sp, #28]
 8006cd6:	e014      	b.n	8006d02 <_vfiprintf_r+0x13a>
 8006cd8:	eba0 0308 	sub.w	r3, r0, r8
 8006cdc:	fa09 f303 	lsl.w	r3, r9, r3
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	9304      	str	r3, [sp, #16]
 8006ce4:	46a2      	mov	sl, r4
 8006ce6:	e7d2      	b.n	8006c8e <_vfiprintf_r+0xc6>
 8006ce8:	9b03      	ldr	r3, [sp, #12]
 8006cea:	1d19      	adds	r1, r3, #4
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	bfbb      	ittet	lt
 8006cf4:	425b      	neglt	r3, r3
 8006cf6:	f042 0202 	orrlt.w	r2, r2, #2
 8006cfa:	9307      	strge	r3, [sp, #28]
 8006cfc:	9307      	strlt	r3, [sp, #28]
 8006cfe:	bfb8      	it	lt
 8006d00:	9204      	strlt	r2, [sp, #16]
 8006d02:	7823      	ldrb	r3, [r4, #0]
 8006d04:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d06:	d10a      	bne.n	8006d1e <_vfiprintf_r+0x156>
 8006d08:	7863      	ldrb	r3, [r4, #1]
 8006d0a:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d0c:	d132      	bne.n	8006d74 <_vfiprintf_r+0x1ac>
 8006d0e:	9b03      	ldr	r3, [sp, #12]
 8006d10:	1d1a      	adds	r2, r3, #4
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	9203      	str	r2, [sp, #12]
 8006d16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d1a:	3402      	adds	r4, #2
 8006d1c:	9305      	str	r3, [sp, #20]
 8006d1e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006df4 <_vfiprintf_r+0x22c>
 8006d22:	7821      	ldrb	r1, [r4, #0]
 8006d24:	2203      	movs	r2, #3
 8006d26:	4650      	mov	r0, sl
 8006d28:	f7f9 fa72 	bl	8000210 <memchr>
 8006d2c:	b138      	cbz	r0, 8006d3e <_vfiprintf_r+0x176>
 8006d2e:	9b04      	ldr	r3, [sp, #16]
 8006d30:	eba0 000a 	sub.w	r0, r0, sl
 8006d34:	2240      	movs	r2, #64	@ 0x40
 8006d36:	4082      	lsls	r2, r0
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	3401      	adds	r4, #1
 8006d3c:	9304      	str	r3, [sp, #16]
 8006d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d42:	4829      	ldr	r0, [pc, #164]	@ (8006de8 <_vfiprintf_r+0x220>)
 8006d44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d48:	2206      	movs	r2, #6
 8006d4a:	f7f9 fa61 	bl	8000210 <memchr>
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	d03f      	beq.n	8006dd2 <_vfiprintf_r+0x20a>
 8006d52:	4b26      	ldr	r3, [pc, #152]	@ (8006dec <_vfiprintf_r+0x224>)
 8006d54:	bb1b      	cbnz	r3, 8006d9e <_vfiprintf_r+0x1d6>
 8006d56:	9b03      	ldr	r3, [sp, #12]
 8006d58:	3307      	adds	r3, #7
 8006d5a:	f023 0307 	bic.w	r3, r3, #7
 8006d5e:	3308      	adds	r3, #8
 8006d60:	9303      	str	r3, [sp, #12]
 8006d62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d64:	443b      	add	r3, r7
 8006d66:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d68:	e76a      	b.n	8006c40 <_vfiprintf_r+0x78>
 8006d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6e:	460c      	mov	r4, r1
 8006d70:	2001      	movs	r0, #1
 8006d72:	e7a8      	b.n	8006cc6 <_vfiprintf_r+0xfe>
 8006d74:	2300      	movs	r3, #0
 8006d76:	3401      	adds	r4, #1
 8006d78:	9305      	str	r3, [sp, #20]
 8006d7a:	4619      	mov	r1, r3
 8006d7c:	f04f 0c0a 	mov.w	ip, #10
 8006d80:	4620      	mov	r0, r4
 8006d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d86:	3a30      	subs	r2, #48	@ 0x30
 8006d88:	2a09      	cmp	r2, #9
 8006d8a:	d903      	bls.n	8006d94 <_vfiprintf_r+0x1cc>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d0c6      	beq.n	8006d1e <_vfiprintf_r+0x156>
 8006d90:	9105      	str	r1, [sp, #20]
 8006d92:	e7c4      	b.n	8006d1e <_vfiprintf_r+0x156>
 8006d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d98:	4604      	mov	r4, r0
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e7f0      	b.n	8006d80 <_vfiprintf_r+0x1b8>
 8006d9e:	ab03      	add	r3, sp, #12
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4b12      	ldr	r3, [pc, #72]	@ (8006df0 <_vfiprintf_r+0x228>)
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	4630      	mov	r0, r6
 8006daa:	f7fd fed5 	bl	8004b58 <_printf_float>
 8006dae:	4607      	mov	r7, r0
 8006db0:	1c78      	adds	r0, r7, #1
 8006db2:	d1d6      	bne.n	8006d62 <_vfiprintf_r+0x19a>
 8006db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006db6:	07d9      	lsls	r1, r3, #31
 8006db8:	d405      	bmi.n	8006dc6 <_vfiprintf_r+0x1fe>
 8006dba:	89ab      	ldrh	r3, [r5, #12]
 8006dbc:	059a      	lsls	r2, r3, #22
 8006dbe:	d402      	bmi.n	8006dc6 <_vfiprintf_r+0x1fe>
 8006dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006dc2:	f7fe fc03 	bl	80055cc <__retarget_lock_release_recursive>
 8006dc6:	89ab      	ldrh	r3, [r5, #12]
 8006dc8:	065b      	lsls	r3, r3, #25
 8006dca:	f53f af1f 	bmi.w	8006c0c <_vfiprintf_r+0x44>
 8006dce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006dd0:	e71e      	b.n	8006c10 <_vfiprintf_r+0x48>
 8006dd2:	ab03      	add	r3, sp, #12
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	462a      	mov	r2, r5
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <_vfiprintf_r+0x228>)
 8006dda:	a904      	add	r1, sp, #16
 8006ddc:	4630      	mov	r0, r6
 8006dde:	f7fe f953 	bl	8005088 <_printf_i>
 8006de2:	e7e4      	b.n	8006dae <_vfiprintf_r+0x1e6>
 8006de4:	08007462 	.word	0x08007462
 8006de8:	0800746c 	.word	0x0800746c
 8006dec:	08004b59 	.word	0x08004b59
 8006df0:	08006ba3 	.word	0x08006ba3
 8006df4:	08007468 	.word	0x08007468

08006df8 <__sflush_r>:
 8006df8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e00:	0716      	lsls	r6, r2, #28
 8006e02:	4605      	mov	r5, r0
 8006e04:	460c      	mov	r4, r1
 8006e06:	d454      	bmi.n	8006eb2 <__sflush_r+0xba>
 8006e08:	684b      	ldr	r3, [r1, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	dc02      	bgt.n	8006e14 <__sflush_r+0x1c>
 8006e0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	dd48      	ble.n	8006ea6 <__sflush_r+0xae>
 8006e14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e16:	2e00      	cmp	r6, #0
 8006e18:	d045      	beq.n	8006ea6 <__sflush_r+0xae>
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006e20:	682f      	ldr	r7, [r5, #0]
 8006e22:	6a21      	ldr	r1, [r4, #32]
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	d030      	beq.n	8006e8a <__sflush_r+0x92>
 8006e28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	0759      	lsls	r1, r3, #29
 8006e2e:	d505      	bpl.n	8006e3c <__sflush_r+0x44>
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e36:	b10b      	cbz	r3, 8006e3c <__sflush_r+0x44>
 8006e38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e3a:	1ad2      	subs	r2, r2, r3
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e40:	6a21      	ldr	r1, [r4, #32]
 8006e42:	4628      	mov	r0, r5
 8006e44:	47b0      	blx	r6
 8006e46:	1c43      	adds	r3, r0, #1
 8006e48:	89a3      	ldrh	r3, [r4, #12]
 8006e4a:	d106      	bne.n	8006e5a <__sflush_r+0x62>
 8006e4c:	6829      	ldr	r1, [r5, #0]
 8006e4e:	291d      	cmp	r1, #29
 8006e50:	d82b      	bhi.n	8006eaa <__sflush_r+0xb2>
 8006e52:	4a2a      	ldr	r2, [pc, #168]	@ (8006efc <__sflush_r+0x104>)
 8006e54:	40ca      	lsrs	r2, r1
 8006e56:	07d6      	lsls	r6, r2, #31
 8006e58:	d527      	bpl.n	8006eaa <__sflush_r+0xb2>
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	6062      	str	r2, [r4, #4]
 8006e5e:	04d9      	lsls	r1, r3, #19
 8006e60:	6922      	ldr	r2, [r4, #16]
 8006e62:	6022      	str	r2, [r4, #0]
 8006e64:	d504      	bpl.n	8006e70 <__sflush_r+0x78>
 8006e66:	1c42      	adds	r2, r0, #1
 8006e68:	d101      	bne.n	8006e6e <__sflush_r+0x76>
 8006e6a:	682b      	ldr	r3, [r5, #0]
 8006e6c:	b903      	cbnz	r3, 8006e70 <__sflush_r+0x78>
 8006e6e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e72:	602f      	str	r7, [r5, #0]
 8006e74:	b1b9      	cbz	r1, 8006ea6 <__sflush_r+0xae>
 8006e76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e7a:	4299      	cmp	r1, r3
 8006e7c:	d002      	beq.n	8006e84 <__sflush_r+0x8c>
 8006e7e:	4628      	mov	r0, r5
 8006e80:	f7ff f9fe 	bl	8006280 <_free_r>
 8006e84:	2300      	movs	r3, #0
 8006e86:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e88:	e00d      	b.n	8006ea6 <__sflush_r+0xae>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	4628      	mov	r0, r5
 8006e8e:	47b0      	blx	r6
 8006e90:	4602      	mov	r2, r0
 8006e92:	1c50      	adds	r0, r2, #1
 8006e94:	d1c9      	bne.n	8006e2a <__sflush_r+0x32>
 8006e96:	682b      	ldr	r3, [r5, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d0c6      	beq.n	8006e2a <__sflush_r+0x32>
 8006e9c:	2b1d      	cmp	r3, #29
 8006e9e:	d001      	beq.n	8006ea4 <__sflush_r+0xac>
 8006ea0:	2b16      	cmp	r3, #22
 8006ea2:	d11e      	bne.n	8006ee2 <__sflush_r+0xea>
 8006ea4:	602f      	str	r7, [r5, #0]
 8006ea6:	2000      	movs	r0, #0
 8006ea8:	e022      	b.n	8006ef0 <__sflush_r+0xf8>
 8006eaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eae:	b21b      	sxth	r3, r3
 8006eb0:	e01b      	b.n	8006eea <__sflush_r+0xf2>
 8006eb2:	690f      	ldr	r7, [r1, #16]
 8006eb4:	2f00      	cmp	r7, #0
 8006eb6:	d0f6      	beq.n	8006ea6 <__sflush_r+0xae>
 8006eb8:	0793      	lsls	r3, r2, #30
 8006eba:	680e      	ldr	r6, [r1, #0]
 8006ebc:	bf08      	it	eq
 8006ebe:	694b      	ldreq	r3, [r1, #20]
 8006ec0:	600f      	str	r7, [r1, #0]
 8006ec2:	bf18      	it	ne
 8006ec4:	2300      	movne	r3, #0
 8006ec6:	eba6 0807 	sub.w	r8, r6, r7
 8006eca:	608b      	str	r3, [r1, #8]
 8006ecc:	f1b8 0f00 	cmp.w	r8, #0
 8006ed0:	dde9      	ble.n	8006ea6 <__sflush_r+0xae>
 8006ed2:	6a21      	ldr	r1, [r4, #32]
 8006ed4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ed6:	4643      	mov	r3, r8
 8006ed8:	463a      	mov	r2, r7
 8006eda:	4628      	mov	r0, r5
 8006edc:	47b0      	blx	r6
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	dc08      	bgt.n	8006ef4 <__sflush_r+0xfc>
 8006ee2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ee6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eea:	81a3      	strh	r3, [r4, #12]
 8006eec:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef4:	4407      	add	r7, r0
 8006ef6:	eba8 0800 	sub.w	r8, r8, r0
 8006efa:	e7e7      	b.n	8006ecc <__sflush_r+0xd4>
 8006efc:	20400001 	.word	0x20400001

08006f00 <_fflush_r>:
 8006f00:	b538      	push	{r3, r4, r5, lr}
 8006f02:	690b      	ldr	r3, [r1, #16]
 8006f04:	4605      	mov	r5, r0
 8006f06:	460c      	mov	r4, r1
 8006f08:	b913      	cbnz	r3, 8006f10 <_fflush_r+0x10>
 8006f0a:	2500      	movs	r5, #0
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	b118      	cbz	r0, 8006f1a <_fflush_r+0x1a>
 8006f12:	6a03      	ldr	r3, [r0, #32]
 8006f14:	b90b      	cbnz	r3, 8006f1a <_fflush_r+0x1a>
 8006f16:	f7fe fa61 	bl	80053dc <__sinit>
 8006f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d0f3      	beq.n	8006f0a <_fflush_r+0xa>
 8006f22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006f24:	07d0      	lsls	r0, r2, #31
 8006f26:	d404      	bmi.n	8006f32 <_fflush_r+0x32>
 8006f28:	0599      	lsls	r1, r3, #22
 8006f2a:	d402      	bmi.n	8006f32 <_fflush_r+0x32>
 8006f2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f2e:	f7fe fb4c 	bl	80055ca <__retarget_lock_acquire_recursive>
 8006f32:	4628      	mov	r0, r5
 8006f34:	4621      	mov	r1, r4
 8006f36:	f7ff ff5f 	bl	8006df8 <__sflush_r>
 8006f3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f3c:	07da      	lsls	r2, r3, #31
 8006f3e:	4605      	mov	r5, r0
 8006f40:	d4e4      	bmi.n	8006f0c <_fflush_r+0xc>
 8006f42:	89a3      	ldrh	r3, [r4, #12]
 8006f44:	059b      	lsls	r3, r3, #22
 8006f46:	d4e1      	bmi.n	8006f0c <_fflush_r+0xc>
 8006f48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f4a:	f7fe fb3f 	bl	80055cc <__retarget_lock_release_recursive>
 8006f4e:	e7dd      	b.n	8006f0c <_fflush_r+0xc>

08006f50 <__swbuf_r>:
 8006f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f52:	460e      	mov	r6, r1
 8006f54:	4614      	mov	r4, r2
 8006f56:	4605      	mov	r5, r0
 8006f58:	b118      	cbz	r0, 8006f62 <__swbuf_r+0x12>
 8006f5a:	6a03      	ldr	r3, [r0, #32]
 8006f5c:	b90b      	cbnz	r3, 8006f62 <__swbuf_r+0x12>
 8006f5e:	f7fe fa3d 	bl	80053dc <__sinit>
 8006f62:	69a3      	ldr	r3, [r4, #24]
 8006f64:	60a3      	str	r3, [r4, #8]
 8006f66:	89a3      	ldrh	r3, [r4, #12]
 8006f68:	071a      	lsls	r2, r3, #28
 8006f6a:	d501      	bpl.n	8006f70 <__swbuf_r+0x20>
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	b943      	cbnz	r3, 8006f82 <__swbuf_r+0x32>
 8006f70:	4621      	mov	r1, r4
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f82a 	bl	8006fcc <__swsetup_r>
 8006f78:	b118      	cbz	r0, 8006f82 <__swbuf_r+0x32>
 8006f7a:	f04f 37ff 	mov.w	r7, #4294967295
 8006f7e:	4638      	mov	r0, r7
 8006f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f82:	6823      	ldr	r3, [r4, #0]
 8006f84:	6922      	ldr	r2, [r4, #16]
 8006f86:	1a98      	subs	r0, r3, r2
 8006f88:	6963      	ldr	r3, [r4, #20]
 8006f8a:	b2f6      	uxtb	r6, r6
 8006f8c:	4283      	cmp	r3, r0
 8006f8e:	4637      	mov	r7, r6
 8006f90:	dc05      	bgt.n	8006f9e <__swbuf_r+0x4e>
 8006f92:	4621      	mov	r1, r4
 8006f94:	4628      	mov	r0, r5
 8006f96:	f7ff ffb3 	bl	8006f00 <_fflush_r>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	d1ed      	bne.n	8006f7a <__swbuf_r+0x2a>
 8006f9e:	68a3      	ldr	r3, [r4, #8]
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	60a3      	str	r3, [r4, #8]
 8006fa4:	6823      	ldr	r3, [r4, #0]
 8006fa6:	1c5a      	adds	r2, r3, #1
 8006fa8:	6022      	str	r2, [r4, #0]
 8006faa:	701e      	strb	r6, [r3, #0]
 8006fac:	6962      	ldr	r2, [r4, #20]
 8006fae:	1c43      	adds	r3, r0, #1
 8006fb0:	429a      	cmp	r2, r3
 8006fb2:	d004      	beq.n	8006fbe <__swbuf_r+0x6e>
 8006fb4:	89a3      	ldrh	r3, [r4, #12]
 8006fb6:	07db      	lsls	r3, r3, #31
 8006fb8:	d5e1      	bpl.n	8006f7e <__swbuf_r+0x2e>
 8006fba:	2e0a      	cmp	r6, #10
 8006fbc:	d1df      	bne.n	8006f7e <__swbuf_r+0x2e>
 8006fbe:	4621      	mov	r1, r4
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	f7ff ff9d 	bl	8006f00 <_fflush_r>
 8006fc6:	2800      	cmp	r0, #0
 8006fc8:	d0d9      	beq.n	8006f7e <__swbuf_r+0x2e>
 8006fca:	e7d6      	b.n	8006f7a <__swbuf_r+0x2a>

08006fcc <__swsetup_r>:
 8006fcc:	b538      	push	{r3, r4, r5, lr}
 8006fce:	4b29      	ldr	r3, [pc, #164]	@ (8007074 <__swsetup_r+0xa8>)
 8006fd0:	4605      	mov	r5, r0
 8006fd2:	6818      	ldr	r0, [r3, #0]
 8006fd4:	460c      	mov	r4, r1
 8006fd6:	b118      	cbz	r0, 8006fe0 <__swsetup_r+0x14>
 8006fd8:	6a03      	ldr	r3, [r0, #32]
 8006fda:	b90b      	cbnz	r3, 8006fe0 <__swsetup_r+0x14>
 8006fdc:	f7fe f9fe 	bl	80053dc <__sinit>
 8006fe0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fe4:	0719      	lsls	r1, r3, #28
 8006fe6:	d422      	bmi.n	800702e <__swsetup_r+0x62>
 8006fe8:	06da      	lsls	r2, r3, #27
 8006fea:	d407      	bmi.n	8006ffc <__swsetup_r+0x30>
 8006fec:	2209      	movs	r2, #9
 8006fee:	602a      	str	r2, [r5, #0]
 8006ff0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ff4:	81a3      	strh	r3, [r4, #12]
 8006ff6:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffa:	e033      	b.n	8007064 <__swsetup_r+0x98>
 8006ffc:	0758      	lsls	r0, r3, #29
 8006ffe:	d512      	bpl.n	8007026 <__swsetup_r+0x5a>
 8007000:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007002:	b141      	cbz	r1, 8007016 <__swsetup_r+0x4a>
 8007004:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007008:	4299      	cmp	r1, r3
 800700a:	d002      	beq.n	8007012 <__swsetup_r+0x46>
 800700c:	4628      	mov	r0, r5
 800700e:	f7ff f937 	bl	8006280 <_free_r>
 8007012:	2300      	movs	r3, #0
 8007014:	6363      	str	r3, [r4, #52]	@ 0x34
 8007016:	89a3      	ldrh	r3, [r4, #12]
 8007018:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800701c:	81a3      	strh	r3, [r4, #12]
 800701e:	2300      	movs	r3, #0
 8007020:	6063      	str	r3, [r4, #4]
 8007022:	6923      	ldr	r3, [r4, #16]
 8007024:	6023      	str	r3, [r4, #0]
 8007026:	89a3      	ldrh	r3, [r4, #12]
 8007028:	f043 0308 	orr.w	r3, r3, #8
 800702c:	81a3      	strh	r3, [r4, #12]
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	b94b      	cbnz	r3, 8007046 <__swsetup_r+0x7a>
 8007032:	89a3      	ldrh	r3, [r4, #12]
 8007034:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007038:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800703c:	d003      	beq.n	8007046 <__swsetup_r+0x7a>
 800703e:	4621      	mov	r1, r4
 8007040:	4628      	mov	r0, r5
 8007042:	f000 f8c1 	bl	80071c8 <__smakebuf_r>
 8007046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800704a:	f013 0201 	ands.w	r2, r3, #1
 800704e:	d00a      	beq.n	8007066 <__swsetup_r+0x9a>
 8007050:	2200      	movs	r2, #0
 8007052:	60a2      	str	r2, [r4, #8]
 8007054:	6962      	ldr	r2, [r4, #20]
 8007056:	4252      	negs	r2, r2
 8007058:	61a2      	str	r2, [r4, #24]
 800705a:	6922      	ldr	r2, [r4, #16]
 800705c:	b942      	cbnz	r2, 8007070 <__swsetup_r+0xa4>
 800705e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007062:	d1c5      	bne.n	8006ff0 <__swsetup_r+0x24>
 8007064:	bd38      	pop	{r3, r4, r5, pc}
 8007066:	0799      	lsls	r1, r3, #30
 8007068:	bf58      	it	pl
 800706a:	6962      	ldrpl	r2, [r4, #20]
 800706c:	60a2      	str	r2, [r4, #8]
 800706e:	e7f4      	b.n	800705a <__swsetup_r+0x8e>
 8007070:	2000      	movs	r0, #0
 8007072:	e7f7      	b.n	8007064 <__swsetup_r+0x98>
 8007074:	20000018 	.word	0x20000018

08007078 <_sbrk_r>:
 8007078:	b538      	push	{r3, r4, r5, lr}
 800707a:	4d06      	ldr	r5, [pc, #24]	@ (8007094 <_sbrk_r+0x1c>)
 800707c:	2300      	movs	r3, #0
 800707e:	4604      	mov	r4, r0
 8007080:	4608      	mov	r0, r1
 8007082:	602b      	str	r3, [r5, #0]
 8007084:	f7fa fcf2 	bl	8001a6c <_sbrk>
 8007088:	1c43      	adds	r3, r0, #1
 800708a:	d102      	bne.n	8007092 <_sbrk_r+0x1a>
 800708c:	682b      	ldr	r3, [r5, #0]
 800708e:	b103      	cbz	r3, 8007092 <_sbrk_r+0x1a>
 8007090:	6023      	str	r3, [r4, #0]
 8007092:	bd38      	pop	{r3, r4, r5, pc}
 8007094:	200004c8 	.word	0x200004c8

08007098 <memcpy>:
 8007098:	440a      	add	r2, r1
 800709a:	4291      	cmp	r1, r2
 800709c:	f100 33ff 	add.w	r3, r0, #4294967295
 80070a0:	d100      	bne.n	80070a4 <memcpy+0xc>
 80070a2:	4770      	bx	lr
 80070a4:	b510      	push	{r4, lr}
 80070a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ae:	4291      	cmp	r1, r2
 80070b0:	d1f9      	bne.n	80070a6 <memcpy+0xe>
 80070b2:	bd10      	pop	{r4, pc}

080070b4 <__assert_func>:
 80070b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070b6:	4614      	mov	r4, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b09      	ldr	r3, [pc, #36]	@ (80070e0 <__assert_func+0x2c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4605      	mov	r5, r0
 80070c0:	68d8      	ldr	r0, [r3, #12]
 80070c2:	b14c      	cbz	r4, 80070d8 <__assert_func+0x24>
 80070c4:	4b07      	ldr	r3, [pc, #28]	@ (80070e4 <__assert_func+0x30>)
 80070c6:	9100      	str	r1, [sp, #0]
 80070c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070cc:	4906      	ldr	r1, [pc, #24]	@ (80070e8 <__assert_func+0x34>)
 80070ce:	462b      	mov	r3, r5
 80070d0:	f000 f842 	bl	8007158 <fiprintf>
 80070d4:	f000 f8d6 	bl	8007284 <abort>
 80070d8:	4b04      	ldr	r3, [pc, #16]	@ (80070ec <__assert_func+0x38>)
 80070da:	461c      	mov	r4, r3
 80070dc:	e7f3      	b.n	80070c6 <__assert_func+0x12>
 80070de:	bf00      	nop
 80070e0:	20000018 	.word	0x20000018
 80070e4:	0800747d 	.word	0x0800747d
 80070e8:	0800748a 	.word	0x0800748a
 80070ec:	080074b8 	.word	0x080074b8

080070f0 <_calloc_r>:
 80070f0:	b570      	push	{r4, r5, r6, lr}
 80070f2:	fba1 5402 	umull	r5, r4, r1, r2
 80070f6:	b934      	cbnz	r4, 8007106 <_calloc_r+0x16>
 80070f8:	4629      	mov	r1, r5
 80070fa:	f7ff f935 	bl	8006368 <_malloc_r>
 80070fe:	4606      	mov	r6, r0
 8007100:	b928      	cbnz	r0, 800710e <_calloc_r+0x1e>
 8007102:	4630      	mov	r0, r6
 8007104:	bd70      	pop	{r4, r5, r6, pc}
 8007106:	220c      	movs	r2, #12
 8007108:	6002      	str	r2, [r0, #0]
 800710a:	2600      	movs	r6, #0
 800710c:	e7f9      	b.n	8007102 <_calloc_r+0x12>
 800710e:	462a      	mov	r2, r5
 8007110:	4621      	mov	r1, r4
 8007112:	f7fe f9dc 	bl	80054ce <memset>
 8007116:	e7f4      	b.n	8007102 <_calloc_r+0x12>

08007118 <__ascii_mbtowc>:
 8007118:	b082      	sub	sp, #8
 800711a:	b901      	cbnz	r1, 800711e <__ascii_mbtowc+0x6>
 800711c:	a901      	add	r1, sp, #4
 800711e:	b142      	cbz	r2, 8007132 <__ascii_mbtowc+0x1a>
 8007120:	b14b      	cbz	r3, 8007136 <__ascii_mbtowc+0x1e>
 8007122:	7813      	ldrb	r3, [r2, #0]
 8007124:	600b      	str	r3, [r1, #0]
 8007126:	7812      	ldrb	r2, [r2, #0]
 8007128:	1e10      	subs	r0, r2, #0
 800712a:	bf18      	it	ne
 800712c:	2001      	movne	r0, #1
 800712e:	b002      	add	sp, #8
 8007130:	4770      	bx	lr
 8007132:	4610      	mov	r0, r2
 8007134:	e7fb      	b.n	800712e <__ascii_mbtowc+0x16>
 8007136:	f06f 0001 	mvn.w	r0, #1
 800713a:	e7f8      	b.n	800712e <__ascii_mbtowc+0x16>

0800713c <__ascii_wctomb>:
 800713c:	4603      	mov	r3, r0
 800713e:	4608      	mov	r0, r1
 8007140:	b141      	cbz	r1, 8007154 <__ascii_wctomb+0x18>
 8007142:	2aff      	cmp	r2, #255	@ 0xff
 8007144:	d904      	bls.n	8007150 <__ascii_wctomb+0x14>
 8007146:	228a      	movs	r2, #138	@ 0x8a
 8007148:	601a      	str	r2, [r3, #0]
 800714a:	f04f 30ff 	mov.w	r0, #4294967295
 800714e:	4770      	bx	lr
 8007150:	700a      	strb	r2, [r1, #0]
 8007152:	2001      	movs	r0, #1
 8007154:	4770      	bx	lr
	...

08007158 <fiprintf>:
 8007158:	b40e      	push	{r1, r2, r3}
 800715a:	b503      	push	{r0, r1, lr}
 800715c:	4601      	mov	r1, r0
 800715e:	ab03      	add	r3, sp, #12
 8007160:	4805      	ldr	r0, [pc, #20]	@ (8007178 <fiprintf+0x20>)
 8007162:	f853 2b04 	ldr.w	r2, [r3], #4
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f7ff fd2d 	bl	8006bc8 <_vfiprintf_r>
 800716e:	b002      	add	sp, #8
 8007170:	f85d eb04 	ldr.w	lr, [sp], #4
 8007174:	b003      	add	sp, #12
 8007176:	4770      	bx	lr
 8007178:	20000018 	.word	0x20000018

0800717c <__swhatbuf_r>:
 800717c:	b570      	push	{r4, r5, r6, lr}
 800717e:	460c      	mov	r4, r1
 8007180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007184:	2900      	cmp	r1, #0
 8007186:	b096      	sub	sp, #88	@ 0x58
 8007188:	4615      	mov	r5, r2
 800718a:	461e      	mov	r6, r3
 800718c:	da0d      	bge.n	80071aa <__swhatbuf_r+0x2e>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007194:	f04f 0100 	mov.w	r1, #0
 8007198:	bf14      	ite	ne
 800719a:	2340      	movne	r3, #64	@ 0x40
 800719c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80071a0:	2000      	movs	r0, #0
 80071a2:	6031      	str	r1, [r6, #0]
 80071a4:	602b      	str	r3, [r5, #0]
 80071a6:	b016      	add	sp, #88	@ 0x58
 80071a8:	bd70      	pop	{r4, r5, r6, pc}
 80071aa:	466a      	mov	r2, sp
 80071ac:	f000 f848 	bl	8007240 <_fstat_r>
 80071b0:	2800      	cmp	r0, #0
 80071b2:	dbec      	blt.n	800718e <__swhatbuf_r+0x12>
 80071b4:	9901      	ldr	r1, [sp, #4]
 80071b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80071ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80071be:	4259      	negs	r1, r3
 80071c0:	4159      	adcs	r1, r3
 80071c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80071c6:	e7eb      	b.n	80071a0 <__swhatbuf_r+0x24>

080071c8 <__smakebuf_r>:
 80071c8:	898b      	ldrh	r3, [r1, #12]
 80071ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80071cc:	079d      	lsls	r5, r3, #30
 80071ce:	4606      	mov	r6, r0
 80071d0:	460c      	mov	r4, r1
 80071d2:	d507      	bpl.n	80071e4 <__smakebuf_r+0x1c>
 80071d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	6123      	str	r3, [r4, #16]
 80071dc:	2301      	movs	r3, #1
 80071de:	6163      	str	r3, [r4, #20]
 80071e0:	b003      	add	sp, #12
 80071e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80071e4:	ab01      	add	r3, sp, #4
 80071e6:	466a      	mov	r2, sp
 80071e8:	f7ff ffc8 	bl	800717c <__swhatbuf_r>
 80071ec:	9f00      	ldr	r7, [sp, #0]
 80071ee:	4605      	mov	r5, r0
 80071f0:	4639      	mov	r1, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff f8b8 	bl	8006368 <_malloc_r>
 80071f8:	b948      	cbnz	r0, 800720e <__smakebuf_r+0x46>
 80071fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071fe:	059a      	lsls	r2, r3, #22
 8007200:	d4ee      	bmi.n	80071e0 <__smakebuf_r+0x18>
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	f043 0302 	orr.w	r3, r3, #2
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	e7e2      	b.n	80071d4 <__smakebuf_r+0xc>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	6020      	str	r0, [r4, #0]
 8007212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007216:	81a3      	strh	r3, [r4, #12]
 8007218:	9b01      	ldr	r3, [sp, #4]
 800721a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800721e:	b15b      	cbz	r3, 8007238 <__smakebuf_r+0x70>
 8007220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007224:	4630      	mov	r0, r6
 8007226:	f000 f81d 	bl	8007264 <_isatty_r>
 800722a:	b128      	cbz	r0, 8007238 <__smakebuf_r+0x70>
 800722c:	89a3      	ldrh	r3, [r4, #12]
 800722e:	f023 0303 	bic.w	r3, r3, #3
 8007232:	f043 0301 	orr.w	r3, r3, #1
 8007236:	81a3      	strh	r3, [r4, #12]
 8007238:	89a3      	ldrh	r3, [r4, #12]
 800723a:	431d      	orrs	r5, r3
 800723c:	81a5      	strh	r5, [r4, #12]
 800723e:	e7cf      	b.n	80071e0 <__smakebuf_r+0x18>

08007240 <_fstat_r>:
 8007240:	b538      	push	{r3, r4, r5, lr}
 8007242:	4d07      	ldr	r5, [pc, #28]	@ (8007260 <_fstat_r+0x20>)
 8007244:	2300      	movs	r3, #0
 8007246:	4604      	mov	r4, r0
 8007248:	4608      	mov	r0, r1
 800724a:	4611      	mov	r1, r2
 800724c:	602b      	str	r3, [r5, #0]
 800724e:	f7fa fbe5 	bl	8001a1c <_fstat>
 8007252:	1c43      	adds	r3, r0, #1
 8007254:	d102      	bne.n	800725c <_fstat_r+0x1c>
 8007256:	682b      	ldr	r3, [r5, #0]
 8007258:	b103      	cbz	r3, 800725c <_fstat_r+0x1c>
 800725a:	6023      	str	r3, [r4, #0]
 800725c:	bd38      	pop	{r3, r4, r5, pc}
 800725e:	bf00      	nop
 8007260:	200004c8 	.word	0x200004c8

08007264 <_isatty_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d06      	ldr	r5, [pc, #24]	@ (8007280 <_isatty_r+0x1c>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	f7fa fbe4 	bl	8001a3c <_isatty>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_isatty_r+0x1a>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_isatty_r+0x1a>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	200004c8 	.word	0x200004c8

08007284 <abort>:
 8007284:	b508      	push	{r3, lr}
 8007286:	2006      	movs	r0, #6
 8007288:	f000 f82c 	bl	80072e4 <raise>
 800728c:	2001      	movs	r0, #1
 800728e:	f7fa fb75 	bl	800197c <_exit>

08007292 <_raise_r>:
 8007292:	291f      	cmp	r1, #31
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4605      	mov	r5, r0
 8007298:	460c      	mov	r4, r1
 800729a:	d904      	bls.n	80072a6 <_raise_r+0x14>
 800729c:	2316      	movs	r3, #22
 800729e:	6003      	str	r3, [r0, #0]
 80072a0:	f04f 30ff 	mov.w	r0, #4294967295
 80072a4:	bd38      	pop	{r3, r4, r5, pc}
 80072a6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80072a8:	b112      	cbz	r2, 80072b0 <_raise_r+0x1e>
 80072aa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80072ae:	b94b      	cbnz	r3, 80072c4 <_raise_r+0x32>
 80072b0:	4628      	mov	r0, r5
 80072b2:	f000 f831 	bl	8007318 <_getpid_r>
 80072b6:	4622      	mov	r2, r4
 80072b8:	4601      	mov	r1, r0
 80072ba:	4628      	mov	r0, r5
 80072bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c0:	f000 b818 	b.w	80072f4 <_kill_r>
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d00a      	beq.n	80072de <_raise_r+0x4c>
 80072c8:	1c59      	adds	r1, r3, #1
 80072ca:	d103      	bne.n	80072d4 <_raise_r+0x42>
 80072cc:	2316      	movs	r3, #22
 80072ce:	6003      	str	r3, [r0, #0]
 80072d0:	2001      	movs	r0, #1
 80072d2:	e7e7      	b.n	80072a4 <_raise_r+0x12>
 80072d4:	2100      	movs	r1, #0
 80072d6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80072da:	4620      	mov	r0, r4
 80072dc:	4798      	blx	r3
 80072de:	2000      	movs	r0, #0
 80072e0:	e7e0      	b.n	80072a4 <_raise_r+0x12>
	...

080072e4 <raise>:
 80072e4:	4b02      	ldr	r3, [pc, #8]	@ (80072f0 <raise+0xc>)
 80072e6:	4601      	mov	r1, r0
 80072e8:	6818      	ldr	r0, [r3, #0]
 80072ea:	f7ff bfd2 	b.w	8007292 <_raise_r>
 80072ee:	bf00      	nop
 80072f0:	20000018 	.word	0x20000018

080072f4 <_kill_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	@ (8007314 <_kill_r+0x20>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	4611      	mov	r1, r2
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	f7fa fb2b 	bl	800195c <_kill>
 8007306:	1c43      	adds	r3, r0, #1
 8007308:	d102      	bne.n	8007310 <_kill_r+0x1c>
 800730a:	682b      	ldr	r3, [r5, #0]
 800730c:	b103      	cbz	r3, 8007310 <_kill_r+0x1c>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	bd38      	pop	{r3, r4, r5, pc}
 8007312:	bf00      	nop
 8007314:	200004c8 	.word	0x200004c8

08007318 <_getpid_r>:
 8007318:	f7fa bb18 	b.w	800194c <_getpid>

0800731c <_init>:
 800731c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800731e:	bf00      	nop
 8007320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007322:	bc08      	pop	{r3}
 8007324:	469e      	mov	lr, r3
 8007326:	4770      	bx	lr

08007328 <_fini>:
 8007328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800732a:	bf00      	nop
 800732c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800732e:	bc08      	pop	{r3}
 8007330:	469e      	mov	lr, r3
 8007332:	4770      	bx	lr

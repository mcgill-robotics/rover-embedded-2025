
steering-motor-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f14  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  080040e4  080040e4  000050e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004138  08004138  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004138  08004138  00005138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004140  08004140  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004140  08004140  00005140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004144  08004144  00005144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004148  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000250  20000068  080041b0  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b8  080041b0  000062b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a511  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac3  00000000  00000000  000105a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ae8  00000000  00000000  00012070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000860  00000000  00000000  00012b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022303  00000000  00000000  000133b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c702  00000000  00000000  000356bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0245  00000000  00000000  00041dbd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00112002  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003484  00000000  00000000  00112048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009a  00000000  00000000  001154cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080040cc 	.word	0x080040cc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	080040cc 	.word	0x080040cc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a4:	f000 fc9c 	bl	8000ee0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a8:	f000 f836 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005ac:	f000 f9d6 	bl	800095c <MX_GPIO_Init>
  MX_TIM2_Init();
 80005b0:	f000 f892 	bl	80006d8 <MX_TIM2_Init>
  MX_TIM5_Init();
 80005b4:	f000 f8e4 	bl	8000780 <MX_TIM5_Init>
  MX_TIM8_Init();
 80005b8:	f000 f930 	bl	800081c <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80005bc:	213c      	movs	r1, #60	@ 0x3c
 80005be:	4810      	ldr	r0, [pc, #64]	@ (8000600 <main+0x60>)
 80005c0:	f001 ff1c 	bl	80023fc <HAL_TIM_Encoder_Start>
  TIM8->CCR2 = 0;
 80005c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000604 <main+0x64>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80005ca:	2104      	movs	r1, #4
 80005cc:	480e      	ldr	r0, [pc, #56]	@ (8000608 <main+0x68>)
 80005ce:	f001 fda7 	bl	8002120 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(DIR_GPIO_Port, DIR_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2180      	movs	r1, #128	@ 0x80
 80005d6:	480d      	ldr	r0, [pc, #52]	@ (800060c <main+0x6c>)
 80005d8:	f000 ff9a 	bl	8001510 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  counts = (int16_t) TIM2->CNT;
 80005dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80005e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80005e2:	b21a      	sxth	r2, r3
 80005e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000610 <main+0x70>)
 80005e6:	801a      	strh	r2, [r3, #0]
	  iter++;
 80005e8:	4b0a      	ldr	r3, [pc, #40]	@ (8000614 <main+0x74>)
 80005ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80005ee:	b29b      	uxth	r3, r3
 80005f0:	3301      	adds	r3, #1
 80005f2:	b29b      	uxth	r3, r3
 80005f4:	b21a      	sxth	r2, r3
 80005f6:	4b07      	ldr	r3, [pc, #28]	@ (8000614 <main+0x74>)
 80005f8:	801a      	strh	r2, [r3, #0]
	  counts = (int16_t) TIM2->CNT;
 80005fa:	bf00      	nop
 80005fc:	e7ee      	b.n	80005dc <main+0x3c>
 80005fe:	bf00      	nop
 8000600:	20000084 	.word	0x20000084
 8000604:	40010400 	.word	0x40010400
 8000608:	20000114 	.word	0x20000114
 800060c:	40020000 	.word	0x40020000
 8000610:	2000015c 	.word	0x2000015c
 8000614:	2000015e 	.word	0x2000015e

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b094      	sub	sp, #80	@ 0x50
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	2234      	movs	r2, #52	@ 0x34
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f002 ff37 	bl	800349a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	f107 0308 	add.w	r3, r7, #8
 8000630:	2200      	movs	r2, #0
 8000632:	601a      	str	r2, [r3, #0]
 8000634:	605a      	str	r2, [r3, #4]
 8000636:	609a      	str	r2, [r3, #8]
 8000638:	60da      	str	r2, [r3, #12]
 800063a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b23      	ldr	r3, [pc, #140]	@ (80006d0 <SystemClock_Config+0xb8>)
 8000642:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000644:	4a22      	ldr	r2, [pc, #136]	@ (80006d0 <SystemClock_Config+0xb8>)
 8000646:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064a:	6413      	str	r3, [r2, #64]	@ 0x40
 800064c:	4b20      	ldr	r3, [pc, #128]	@ (80006d0 <SystemClock_Config+0xb8>)
 800064e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000650:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000658:	2300      	movs	r3, #0
 800065a:	603b      	str	r3, [r7, #0]
 800065c:	4b1d      	ldr	r3, [pc, #116]	@ (80006d4 <SystemClock_Config+0xbc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000664:	4a1b      	ldr	r2, [pc, #108]	@ (80006d4 <SystemClock_Config+0xbc>)
 8000666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b19      	ldr	r3, [pc, #100]	@ (80006d4 <SystemClock_Config+0xbc>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800067c:	2301      	movs	r3, #1
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000680:	2310      	movs	r3, #16
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000684:	2300      	movs	r3, #0
 8000686:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000688:	f107 031c 	add.w	r3, r7, #28
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fa01 	bl	8001a94 <HAL_RCC_OscConfig>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000698:	f000 f9f0 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069c:	230f      	movs	r3, #15
 800069e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006a0:	2300      	movs	r3, #0
 80006a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a4:	2300      	movs	r3, #0
 80006a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006a8:	2300      	movs	r3, #0
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006b0:	f107 0308 	add.w	r3, r7, #8
 80006b4:	2100      	movs	r1, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 ff5c 	bl	8001574 <HAL_RCC_ClockConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006c2:	f000 f9db 	bl	8000a7c <Error_Handler>
  }
}
 80006c6:	bf00      	nop
 80006c8:	3750      	adds	r7, #80	@ 0x50
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b08c      	sub	sp, #48	@ 0x30
 80006dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006de:	f107 030c 	add.w	r3, r7, #12
 80006e2:	2224      	movs	r2, #36	@ 0x24
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f002 fed7 	bl	800349a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ec:	1d3b      	adds	r3, r7, #4
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006f4:	4b21      	ldr	r3, [pc, #132]	@ (800077c <MX_TIM2_Init+0xa4>)
 80006f6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80006fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80006fc:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_TIM2_Init+0xa4>)
 80006fe:	2200      	movs	r2, #0
 8000700:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000702:	4b1e      	ldr	r3, [pc, #120]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000704:	2200      	movs	r2, #0
 8000706:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000708:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_TIM2_Init+0xa4>)
 800070a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800070e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000712:	2200      	movs	r2, #0
 8000714:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000718:	2200      	movs	r2, #0
 800071a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800071c:	2303      	movs	r3, #3
 800071e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000720:	2300      	movs	r3, #0
 8000722:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000724:	2301      	movs	r3, #1
 8000726:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000730:	2300      	movs	r3, #0
 8000732:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000734:	2301      	movs	r3, #1
 8000736:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	4619      	mov	r1, r3
 8000746:	480d      	ldr	r0, [pc, #52]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000748:	f001 fdb2 	bl	80022b0 <HAL_TIM_Encoder_Init>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000752:	f000 f993 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	4619      	mov	r1, r3
 8000762:	4806      	ldr	r0, [pc, #24]	@ (800077c <MX_TIM2_Init+0xa4>)
 8000764:	f002 fca0 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800076e:	f000 f985 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000772:	bf00      	nop
 8000774:	3730      	adds	r7, #48	@ 0x30
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000084 	.word	0x20000084

08000780 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b086      	sub	sp, #24
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000786:	f107 0308 	add.w	r3, r7, #8
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000794:	463b      	mov	r3, r7
 8000796:	2200      	movs	r2, #0
 8000798:	601a      	str	r2, [r3, #0]
 800079a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800079c:	4b1d      	ldr	r3, [pc, #116]	@ (8000814 <MX_TIM5_Init+0x94>)
 800079e:	4a1e      	ldr	r2, [pc, #120]	@ (8000818 <MX_TIM5_Init+0x98>)
 80007a0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80007ae:	4b19      	ldr	r3, [pc, #100]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007b0:	f04f 32ff 	mov.w	r2, #4294967295
 80007b4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b6:	4b17      	ldr	r3, [pc, #92]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007bc:	4b15      	ldr	r3, [pc, #84]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80007c2:	4814      	ldr	r0, [pc, #80]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007c4:	f001 fc04 	bl	8001fd0 <HAL_TIM_Base_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80007ce:	f000 f955 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007d6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80007d8:	f107 0308 	add.w	r3, r7, #8
 80007dc:	4619      	mov	r1, r3
 80007de:	480d      	ldr	r0, [pc, #52]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007e0:	f002 f84c 	bl	800287c <HAL_TIM_ConfigClockSource>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80007ea:	f000 f947 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007ee:	2300      	movs	r3, #0
 80007f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80007f6:	463b      	mov	r3, r7
 80007f8:	4619      	mov	r1, r3
 80007fa:	4806      	ldr	r0, [pc, #24]	@ (8000814 <MX_TIM5_Init+0x94>)
 80007fc:	f002 fc54 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000806:	f000 f939 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800080a:	bf00      	nop
 800080c:	3718      	adds	r7, #24
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	200000cc 	.word	0x200000cc
 8000818:	40000c00 	.word	0x40000c00

0800081c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b096      	sub	sp, #88	@ 0x58
 8000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000822:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000826:	2200      	movs	r2, #0
 8000828:	601a      	str	r2, [r3, #0]
 800082a:	605a      	str	r2, [r3, #4]
 800082c:	609a      	str	r2, [r3, #8]
 800082e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000830:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
 800084a:	615a      	str	r2, [r3, #20]
 800084c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800084e:	1d3b      	adds	r3, r7, #4
 8000850:	2220      	movs	r2, #32
 8000852:	2100      	movs	r1, #0
 8000854:	4618      	mov	r0, r3
 8000856:	f002 fe20 	bl	800349a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800085a:	4b3e      	ldr	r3, [pc, #248]	@ (8000954 <MX_TIM8_Init+0x138>)
 800085c:	4a3e      	ldr	r2, [pc, #248]	@ (8000958 <MX_TIM8_Init+0x13c>)
 800085e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 15;
 8000860:	4b3c      	ldr	r3, [pc, #240]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000862:	220f      	movs	r2, #15
 8000864:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000866:	4b3b      	ldr	r3, [pc, #236]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000868:	2200      	movs	r2, #0
 800086a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 800086c:	4b39      	ldr	r3, [pc, #228]	@ (8000954 <MX_TIM8_Init+0x138>)
 800086e:	2263      	movs	r2, #99	@ 0x63
 8000870:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000872:	4b38      	ldr	r3, [pc, #224]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000874:	2200      	movs	r2, #0
 8000876:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000878:	4b36      	ldr	r3, [pc, #216]	@ (8000954 <MX_TIM8_Init+0x138>)
 800087a:	2200      	movs	r2, #0
 800087c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800087e:	4b35      	ldr	r3, [pc, #212]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000880:	2200      	movs	r2, #0
 8000882:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000884:	4833      	ldr	r0, [pc, #204]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000886:	f001 fba3 	bl	8001fd0 <HAL_TIM_Base_Init>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8000890:	f000 f8f4 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000894:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000898:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800089a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800089e:	4619      	mov	r1, r3
 80008a0:	482c      	ldr	r0, [pc, #176]	@ (8000954 <MX_TIM8_Init+0x138>)
 80008a2:	f001 ffeb 	bl	800287c <HAL_TIM_ConfigClockSource>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d001      	beq.n	80008b0 <MX_TIM8_Init+0x94>
  {
    Error_Handler();
 80008ac:	f000 f8e6 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80008b0:	4828      	ldr	r0, [pc, #160]	@ (8000954 <MX_TIM8_Init+0x138>)
 80008b2:	f001 fbdc 	bl	800206e <HAL_TIM_PWM_Init>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 80008bc:	f000 f8de 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c0:	2300      	movs	r3, #0
 80008c2:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80008c8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80008cc:	4619      	mov	r1, r3
 80008ce:	4821      	ldr	r0, [pc, #132]	@ (8000954 <MX_TIM8_Init+0x138>)
 80008d0:	f002 fbea 	bl	80030a8 <HAL_TIMEx_MasterConfigSynchronization>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM8_Init+0xc2>
  {
    Error_Handler();
 80008da:	f000 f8cf 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008de:	2360      	movs	r3, #96	@ 0x60
 80008e0:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008e6:	2300      	movs	r3, #0
 80008e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008ea:	2300      	movs	r3, #0
 80008ec:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008f2:	2300      	movs	r3, #0
 80008f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008f6:	2300      	movs	r3, #0
 80008f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008fe:	2204      	movs	r2, #4
 8000900:	4619      	mov	r1, r3
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000904:	f001 fef8 	bl	80026f8 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM8_Init+0xf6>
  {
    Error_Handler();
 800090e:	f000 f8b5 	bl	8000a7c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800091a:	2300      	movs	r3, #0
 800091c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000922:	2300      	movs	r3, #0
 8000924:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000926:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800092a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	4619      	mov	r1, r3
 8000934:	4807      	ldr	r0, [pc, #28]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000936:	f002 fc33 	bl	80031a0 <HAL_TIMEx_ConfigBreakDeadTime>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8000940:	f000 f89c 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000944:	4803      	ldr	r0, [pc, #12]	@ (8000954 <MX_TIM8_Init+0x138>)
 8000946:	f000 f95b 	bl	8000c00 <HAL_TIM_MspPostInit>

}
 800094a:	bf00      	nop
 800094c:	3758      	adds	r7, #88	@ 0x58
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	20000114 	.word	0x20000114
 8000958:	40010400 	.word	0x40010400

0800095c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b088      	sub	sp, #32
 8000960:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000962:	f107 030c 	add.w	r3, r7, #12
 8000966:	2200      	movs	r2, #0
 8000968:	601a      	str	r2, [r3, #0]
 800096a:	605a      	str	r2, [r3, #4]
 800096c:	609a      	str	r2, [r3, #8]
 800096e:	60da      	str	r2, [r3, #12]
 8000970:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	60bb      	str	r3, [r7, #8]
 8000976:	4b23      	ldr	r3, [pc, #140]	@ (8000a04 <MX_GPIO_Init+0xa8>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800097a:	4a22      	ldr	r2, [pc, #136]	@ (8000a04 <MX_GPIO_Init+0xa8>)
 800097c:	f043 0304 	orr.w	r3, r3, #4
 8000980:	6313      	str	r3, [r2, #48]	@ 0x30
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <MX_GPIO_Init+0xa8>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000986:	f003 0304 	and.w	r3, r3, #4
 800098a:	60bb      	str	r3, [r7, #8]
 800098c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	607b      	str	r3, [r7, #4]
 8000992:	4b1c      	ldr	r3, [pc, #112]	@ (8000a04 <MX_GPIO_Init+0xa8>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000996:	4a1b      	ldr	r2, [pc, #108]	@ (8000a04 <MX_GPIO_Init+0xa8>)
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	6313      	str	r3, [r2, #48]	@ 0x30
 800099e:	4b19      	ldr	r3, [pc, #100]	@ (8000a04 <MX_GPIO_Init+0xa8>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a2:	f003 0301 	and.w	r3, r3, #1
 80009a6:	607b      	str	r3, [r7, #4]
 80009a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|DIR_Pin, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	21a0      	movs	r1, #160	@ 0xa0
 80009ae:	4816      	ldr	r0, [pc, #88]	@ (8000a08 <MX_GPIO_Init+0xac>)
 80009b0:	f000 fdae 	bl	8001510 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80009b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009ba:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80009be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	4619      	mov	r1, r3
 80009ca:	4810      	ldr	r0, [pc, #64]	@ (8000a0c <MX_GPIO_Init+0xb0>)
 80009cc:	f000 fc0c 	bl	80011e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin DIR_Pin */
  GPIO_InitStruct.Pin = LED_Pin|DIR_Pin;
 80009d0:	23a0      	movs	r3, #160	@ 0xa0
 80009d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d4:	2301      	movs	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d8:	2300      	movs	r3, #0
 80009da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009dc:	2300      	movs	r3, #0
 80009de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	4619      	mov	r1, r3
 80009e6:	4808      	ldr	r0, [pc, #32]	@ (8000a08 <MX_GPIO_Init+0xac>)
 80009e8:	f000 fbfe 	bl	80011e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ec:	2200      	movs	r2, #0
 80009ee:	2100      	movs	r1, #0
 80009f0:	2028      	movs	r0, #40	@ 0x28
 80009f2:	f000 fbc2 	bl	800117a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009f6:	2028      	movs	r0, #40	@ 0x28
 80009f8:	f000 fbdb 	bl	80011b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020800 	.word	0x40020800

08000a10 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	80fb      	strh	r3, [r7, #6]
	printf("isr triggered");
 8000a1a:	4814      	ldr	r0, [pc, #80]	@ (8000a6c <HAL_GPIO_EXTI_Callback+0x5c>)
 8000a1c:	f002 fce8 	bl	80033f0 <iprintf>
  if (GPIO_PIN == Button_Pin)
 8000a20:	88fb      	ldrh	r3, [r7, #6]
 8000a22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a26:	d11c      	bne.n	8000a62 <HAL_GPIO_EXTI_Callback+0x52>
  {
	  if (!on_off){
 8000a28:	4b11      	ldr	r3, [pc, #68]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d107      	bne.n	8000a40 <HAL_GPIO_EXTI_Callback+0x30>
		  TIM8->CCR2 = 100;
 8000a30:	4b10      	ldr	r3, [pc, #64]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a32:	2264      	movs	r2, #100	@ 0x64
 8000a34:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000a36:	2104      	movs	r1, #4
 8000a38:	480f      	ldr	r0, [pc, #60]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a3a:	f001 fb71 	bl	8002120 <HAL_TIM_PWM_Start>
 8000a3e:	e006      	b.n	8000a4e <HAL_GPIO_EXTI_Callback+0x3e>
	  } else {
		  TIM8->CCR2 = 0;
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <HAL_GPIO_EXTI_Callback+0x64>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	639a      	str	r2, [r3, #56]	@ 0x38
		  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000a46:	2104      	movs	r1, #4
 8000a48:	480b      	ldr	r0, [pc, #44]	@ (8000a78 <HAL_GPIO_EXTI_Callback+0x68>)
 8000a4a:	f001 fb69 	bl	8002120 <HAL_TIM_PWM_Start>
	  }
	  on_off = !on_off;
 8000a4e:	4b08      	ldr	r3, [pc, #32]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	bf0c      	ite	eq
 8000a56:	2301      	moveq	r3, #1
 8000a58:	2300      	movne	r3, #0
 8000a5a:	b2db      	uxtb	r3, r3
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4b04      	ldr	r3, [pc, #16]	@ (8000a70 <HAL_GPIO_EXTI_Callback+0x60>)
 8000a60:	601a      	str	r2, [r3, #0]
    /* Your code goes here */
  }
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	080040e4 	.word	0x080040e4
 8000a70:	20000160 	.word	0x20000160
 8000a74:	40010400 	.word	0x40010400
 8000a78:	20000114 	.word	0x20000114

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	bf00      	nop
 8000a86:	e7fd      	b.n	8000a84 <Error_Handler+0x8>

08000a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	@ (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	@ 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000af8:	d133      	bne.n	8000b62 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x94>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x94>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0a:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x94>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x94>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	4a13      	ldr	r2, [pc, #76]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x94>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <HAL_TIM_Encoder_MspInit+0x94>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b32:	2303      	movs	r3, #3
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b36:	2302      	movs	r3, #2
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b42:	2301      	movs	r3, #1
 8000b44:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b46:	f107 0314 	add.w	r3, r7, #20
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4808      	ldr	r0, [pc, #32]	@ (8000b70 <HAL_TIM_Encoder_MspInit+0x98>)
 8000b4e:	f000 fb4b 	bl	80011e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b52:	2200      	movs	r2, #0
 8000b54:	2100      	movs	r1, #0
 8000b56:	201c      	movs	r0, #28
 8000b58:	f000 fb0f 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b5c:	201c      	movs	r0, #28
 8000b5e:	f000 fb28 	bl	80011b2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40023800 	.word	0x40023800
 8000b70:	40020000 	.word	0x40020000

08000b74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a1c      	ldr	r2, [pc, #112]	@ (8000bf4 <HAL_TIM_Base_MspInit+0x80>)
 8000b82:	4293      	cmp	r3, r2
 8000b84:	d10e      	bne.n	8000ba4 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x84>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x84>)
 8000b90:	f043 0308 	orr.w	r3, r3, #8
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x84>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 0308 	and.w	r3, r3, #8
 8000b9e:	60fb      	str	r3, [r7, #12]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000ba2:	e022      	b.n	8000bea <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM8)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a14      	ldr	r2, [pc, #80]	@ (8000bfc <HAL_TIM_Base_MspInit+0x88>)
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d11d      	bne.n	8000bea <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x84>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bb6:	4a10      	ldr	r2, [pc, #64]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x84>)
 8000bb8:	f043 0302 	orr.w	r3, r3, #2
 8000bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <HAL_TIM_Base_MspInit+0x84>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bc2:	f003 0302 	and.w	r3, r3, #2
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2100      	movs	r1, #0
 8000bce:	202b      	movs	r0, #43	@ 0x2b
 8000bd0:	f000 fad3 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8000bd4:	202b      	movs	r0, #43	@ 0x2b
 8000bd6:	f000 faec 	bl	80011b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	202c      	movs	r0, #44	@ 0x2c
 8000be0:	f000 facb 	bl	800117a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000be4:	202c      	movs	r0, #44	@ 0x2c
 8000be6:	f000 fae4 	bl	80011b2 <HAL_NVIC_EnableIRQ>
}
 8000bea:	bf00      	nop
 8000bec:	3710      	adds	r7, #16
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40000c00 	.word	0x40000c00
 8000bf8:	40023800 	.word	0x40023800
 8000bfc:	40010400 	.word	0x40010400

08000c00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b088      	sub	sp, #32
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c08:	f107 030c 	add.w	r3, r7, #12
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
 8000c14:	60da      	str	r2, [r3, #12]
 8000c16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a12      	ldr	r2, [pc, #72]	@ (8000c68 <HAL_TIM_MspPostInit+0x68>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d11d      	bne.n	8000c5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c22:	2300      	movs	r3, #0
 8000c24:	60bb      	str	r3, [r7, #8]
 8000c26:	4b11      	ldr	r3, [pc, #68]	@ (8000c6c <HAL_TIM_MspPostInit+0x6c>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2a:	4a10      	ldr	r2, [pc, #64]	@ (8000c6c <HAL_TIM_MspPostInit+0x6c>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c32:	4b0e      	ldr	r3, [pc, #56]	@ (8000c6c <HAL_TIM_MspPostInit+0x6c>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	60bb      	str	r3, [r7, #8]
 8000c3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC7     ------> TIM8_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c42:	2302      	movs	r3, #2
 8000c44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000c4e:	2303      	movs	r3, #3
 8000c50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c52:	f107 030c 	add.w	r3, r7, #12
 8000c56:	4619      	mov	r1, r3
 8000c58:	4805      	ldr	r0, [pc, #20]	@ (8000c70 <HAL_TIM_MspPostInit+0x70>)
 8000c5a:	f000 fac5 	bl	80011e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8000c5e:	bf00      	nop
 8000c60:	3720      	adds	r7, #32
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40010400 	.word	0x40010400
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020800 	.word	0x40020800

08000c74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <NMI_Handler+0x4>

08000c7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c80:	bf00      	nop
 8000c82:	e7fd      	b.n	8000c80 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	bf00      	nop
 8000c8a:	e7fd      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c90:	bf00      	nop
 8000c92:	e7fd      	b.n	8000c90 <BusFault_Handler+0x4>

08000c94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <UsageFault_Handler+0x4>

08000c9c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr

08000cb8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cbc:	bf00      	nop
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cca:	f000 f95b 	bl	8000f84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cd8:	4802      	ldr	r0, [pc, #8]	@ (8000ce4 <TIM2_IRQHandler+0x10>)
 8000cda:	f001 fc1d 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	20000084 	.word	0x20000084

08000ce8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000cec:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000cf0:	f000 fc28 	bl	8001544 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000cfc:	4802      	ldr	r0, [pc, #8]	@ (8000d08 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8000cfe:	f001 fc0b 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000114 	.word	0x20000114

08000d0c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8000d10:	4802      	ldr	r0, [pc, #8]	@ (8000d1c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8000d12:	f001 fc01 	bl	8002518 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	20000114 	.word	0x20000114

08000d20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b086      	sub	sp, #24
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	e00a      	b.n	8000d48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d32:	f3af 8000 	nop.w
 8000d36:	4601      	mov	r1, r0
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	1c5a      	adds	r2, r3, #1
 8000d3c:	60ba      	str	r2, [r7, #8]
 8000d3e:	b2ca      	uxtb	r2, r1
 8000d40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf0      	blt.n	8000d32 <_read+0x12>
  }

  return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d5a:	b580      	push	{r7, lr}
 8000d5c:	b086      	sub	sp, #24
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	60f8      	str	r0, [r7, #12]
 8000d62:	60b9      	str	r1, [r7, #8]
 8000d64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
 8000d6a:	e009      	b.n	8000d80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	1c5a      	adds	r2, r3, #1
 8000d70:	60ba      	str	r2, [r7, #8]
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	3301      	adds	r3, #1
 8000d7e:	617b      	str	r3, [r7, #20]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	429a      	cmp	r2, r3
 8000d86:	dbf1      	blt.n	8000d6c <_write+0x12>
  }
  return len;
 8000d88:	687b      	ldr	r3, [r7, #4]
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	3718      	adds	r7, #24
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}

08000d92 <_close>:

int _close(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	370c      	adds	r7, #12
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b083      	sub	sp, #12
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000dba:	605a      	str	r2, [r3, #4]
  return 0;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	370c      	adds	r7, #12
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <_isatty>:

int _isatty(int file)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	b083      	sub	sp, #12
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000dd2:	2301      	movs	r3, #1
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	60f8      	str	r0, [r7, #12]
 8000de8:	60b9      	str	r1, [r7, #8]
 8000dea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3714      	adds	r7, #20
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b086      	sub	sp, #24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e04:	4a14      	ldr	r2, [pc, #80]	@ (8000e58 <_sbrk+0x5c>)
 8000e06:	4b15      	ldr	r3, [pc, #84]	@ (8000e5c <_sbrk+0x60>)
 8000e08:	1ad3      	subs	r3, r2, r3
 8000e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e10:	4b13      	ldr	r3, [pc, #76]	@ (8000e60 <_sbrk+0x64>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d102      	bne.n	8000e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e18:	4b11      	ldr	r3, [pc, #68]	@ (8000e60 <_sbrk+0x64>)
 8000e1a:	4a12      	ldr	r2, [pc, #72]	@ (8000e64 <_sbrk+0x68>)
 8000e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <_sbrk+0x64>)
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4413      	add	r3, r2
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	d207      	bcs.n	8000e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e2c:	f002 fb84 	bl	8003538 <__errno>
 8000e30:	4603      	mov	r3, r0
 8000e32:	220c      	movs	r2, #12
 8000e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e36:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3a:	e009      	b.n	8000e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e3c:	4b08      	ldr	r3, [pc, #32]	@ (8000e60 <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e42:	4b07      	ldr	r3, [pc, #28]	@ (8000e60 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	4a05      	ldr	r2, [pc, #20]	@ (8000e60 <_sbrk+0x64>)
 8000e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	3718      	adds	r7, #24
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	20020000 	.word	0x20020000
 8000e5c:	00000400 	.word	0x00000400
 8000e60:	20000164 	.word	0x20000164
 8000e64:	200002b8 	.word	0x200002b8

08000e68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <SystemInit+0x20>)
 8000e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e72:	4a05      	ldr	r2, [pc, #20]	@ (8000e88 <SystemInit+0x20>)
 8000e74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e7c:	bf00      	nop
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ec4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000e90:	f7ff ffea 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480c      	ldr	r0, [pc, #48]	@ (8000ec8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e96:	490d      	ldr	r1, [pc, #52]	@ (8000ecc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e98:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eac:	4c0a      	ldr	r4, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eba:	f002 fb43 	bl	8003544 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ebe:	f7ff fb6f 	bl	80005a0 <main>
  bx  lr    
 8000ec2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ec8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ecc:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ed0:	08004148 	.word	0x08004148
  ldr r2, =_sbss
 8000ed4:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ed8:	200002b8 	.word	0x200002b8

08000edc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000edc:	e7fe      	b.n	8000edc <ADC_IRQHandler>
	...

08000ee0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ee4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <HAL_Init+0x40>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f20 <HAL_Init+0x40>)
 8000eea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000eee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0a      	ldr	r2, [pc, #40]	@ (8000f20 <HAL_Init+0x40>)
 8000ef6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x40>)
 8000f02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f92b 	bl	8001164 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f000 f808 	bl	8000f24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f14:	f7ff fdb8 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f18:	2300      	movs	r3, #0
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40023c00 	.word	0x40023c00

08000f24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f2c:	4b12      	ldr	r3, [pc, #72]	@ (8000f78 <HAL_InitTick+0x54>)
 8000f2e:	681a      	ldr	r2, [r3, #0]
 8000f30:	4b12      	ldr	r3, [pc, #72]	@ (8000f7c <HAL_InitTick+0x58>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f943 	bl	80011ce <HAL_SYSTICK_Config>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e00e      	b.n	8000f70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b0f      	cmp	r3, #15
 8000f56:	d80a      	bhi.n	8000f6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f58:	2200      	movs	r2, #0
 8000f5a:	6879      	ldr	r1, [r7, #4]
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f000 f90b 	bl	800117a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f64:	4a06      	ldr	r2, [pc, #24]	@ (8000f80 <HAL_InitTick+0x5c>)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	e000      	b.n	8000f70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	20000000 	.word	0x20000000
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	20000004 	.word	0x20000004

08000f84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f88:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_IncTick+0x20>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_IncTick+0x24>)
 8000f96:	6013      	str	r3, [r2, #0]
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	20000008 	.word	0x20000008
 8000fa8:	20000168 	.word	0x20000168

08000fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb0:	4b03      	ldr	r3, [pc, #12]	@ (8000fc0 <HAL_GetTick+0x14>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000168 	.word	0x20000168

08000fc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	b085      	sub	sp, #20
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f003 0307 	and.w	r3, r3, #7
 8000fd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd6:	68db      	ldr	r3, [r3, #12]
 8000fd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fda:	68ba      	ldr	r2, [r7, #8]
 8000fdc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ff4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ff6:	4a04      	ldr	r2, [pc, #16]	@ (8001008 <__NVIC_SetPriorityGrouping+0x44>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	60d3      	str	r3, [r2, #12]
}
 8000ffc:	bf00      	nop
 8000ffe:	3714      	adds	r7, #20
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001010:	4b04      	ldr	r3, [pc, #16]	@ (8001024 <__NVIC_GetPriorityGrouping+0x18>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	f003 0307 	and.w	r3, r3, #7
}
 800101a:	4618      	mov	r0, r3
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	2b00      	cmp	r3, #0
 8001038:	db0b      	blt.n	8001052 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	f003 021f 	and.w	r2, r3, #31
 8001040:	4907      	ldr	r1, [pc, #28]	@ (8001060 <__NVIC_EnableIRQ+0x38>)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	2001      	movs	r0, #1
 800104a:	fa00 f202 	lsl.w	r2, r0, r2
 800104e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000e100 	.word	0xe000e100

08001064 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	6039      	str	r1, [r7, #0]
 800106e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001070:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001074:	2b00      	cmp	r3, #0
 8001076:	db0a      	blt.n	800108e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	490c      	ldr	r1, [pc, #48]	@ (80010b0 <__NVIC_SetPriority+0x4c>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	0112      	lsls	r2, r2, #4
 8001084:	b2d2      	uxtb	r2, r2
 8001086:	440b      	add	r3, r1
 8001088:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800108c:	e00a      	b.n	80010a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	b2da      	uxtb	r2, r3
 8001092:	4908      	ldr	r1, [pc, #32]	@ (80010b4 <__NVIC_SetPriority+0x50>)
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	f003 030f 	and.w	r3, r3, #15
 800109a:	3b04      	subs	r3, #4
 800109c:	0112      	lsls	r2, r2, #4
 800109e:	b2d2      	uxtb	r2, r2
 80010a0:	440b      	add	r3, r1
 80010a2:	761a      	strb	r2, [r3, #24]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr
 80010b0:	e000e100 	.word	0xe000e100
 80010b4:	e000ed00 	.word	0xe000ed00

080010b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b089      	sub	sp, #36	@ 0x24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	f003 0307 	and.w	r3, r3, #7
 80010ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f1c3 0307 	rsb	r3, r3, #7
 80010d2:	2b04      	cmp	r3, #4
 80010d4:	bf28      	it	cs
 80010d6:	2304      	movcs	r3, #4
 80010d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3304      	adds	r3, #4
 80010de:	2b06      	cmp	r3, #6
 80010e0:	d902      	bls.n	80010e8 <NVIC_EncodePriority+0x30>
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	3b03      	subs	r3, #3
 80010e6:	e000      	b.n	80010ea <NVIC_EncodePriority+0x32>
 80010e8:	2300      	movs	r3, #0
 80010ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	f04f 32ff 	mov.w	r2, #4294967295
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	fa02 f303 	lsl.w	r3, r2, r3
 80010f6:	43da      	mvns	r2, r3
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001100:	f04f 31ff 	mov.w	r1, #4294967295
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	fa01 f303 	lsl.w	r3, r1, r3
 800110a:	43d9      	mvns	r1, r3
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	4313      	orrs	r3, r2
         );
}
 8001112:	4618      	mov	r0, r3
 8001114:	3724      	adds	r7, #36	@ 0x24
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	3b01      	subs	r3, #1
 800112c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001130:	d301      	bcc.n	8001136 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001132:	2301      	movs	r3, #1
 8001134:	e00f      	b.n	8001156 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001136:	4a0a      	ldr	r2, [pc, #40]	@ (8001160 <SysTick_Config+0x40>)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800113e:	210f      	movs	r1, #15
 8001140:	f04f 30ff 	mov.w	r0, #4294967295
 8001144:	f7ff ff8e 	bl	8001064 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001148:	4b05      	ldr	r3, [pc, #20]	@ (8001160 <SysTick_Config+0x40>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800114e:	4b04      	ldr	r3, [pc, #16]	@ (8001160 <SysTick_Config+0x40>)
 8001150:	2207      	movs	r2, #7
 8001152:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	e000e010 	.word	0xe000e010

08001164 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff ff29 	bl	8000fc4 <__NVIC_SetPriorityGrouping>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800117a:	b580      	push	{r7, lr}
 800117c:	b086      	sub	sp, #24
 800117e:	af00      	add	r7, sp, #0
 8001180:	4603      	mov	r3, r0
 8001182:	60b9      	str	r1, [r7, #8]
 8001184:	607a      	str	r2, [r7, #4]
 8001186:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001188:	2300      	movs	r3, #0
 800118a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800118c:	f7ff ff3e 	bl	800100c <__NVIC_GetPriorityGrouping>
 8001190:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001192:	687a      	ldr	r2, [r7, #4]
 8001194:	68b9      	ldr	r1, [r7, #8]
 8001196:	6978      	ldr	r0, [r7, #20]
 8001198:	f7ff ff8e 	bl	80010b8 <NVIC_EncodePriority>
 800119c:	4602      	mov	r2, r0
 800119e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011a2:	4611      	mov	r1, r2
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff ff5d 	bl	8001064 <__NVIC_SetPriority>
}
 80011aa:	bf00      	nop
 80011ac:	3718      	adds	r7, #24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	4603      	mov	r3, r0
 80011ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff ff31 	bl	8001028 <__NVIC_EnableIRQ>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b082      	sub	sp, #8
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff ffa2 	bl	8001120 <SysTick_Config>
 80011dc:	4603      	mov	r3, r0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b089      	sub	sp, #36	@ 0x24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011fe:	2300      	movs	r3, #0
 8001200:	61fb      	str	r3, [r7, #28]
 8001202:	e165      	b.n	80014d0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001204:	2201      	movs	r2, #1
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	697a      	ldr	r2, [r7, #20]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	f040 8154 	bne.w	80014ca <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f003 0303 	and.w	r3, r3, #3
 800122a:	2b01      	cmp	r3, #1
 800122c:	d005      	beq.n	800123a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001236:	2b02      	cmp	r3, #2
 8001238:	d130      	bne.n	800129c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	689b      	ldr	r3, [r3, #8]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	005b      	lsls	r3, r3, #1
 8001244:	2203      	movs	r2, #3
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43db      	mvns	r3, r3
 800124c:	69ba      	ldr	r2, [r7, #24]
 800124e:	4013      	ands	r3, r2
 8001250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	68da      	ldr	r2, [r3, #12]
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	69ba      	ldr	r2, [r7, #24]
 8001260:	4313      	orrs	r3, r2
 8001262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001270:	2201      	movs	r2, #1
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	091b      	lsrs	r3, r3, #4
 8001286:	f003 0201 	and.w	r2, r3, #1
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	69ba      	ldr	r2, [r7, #24]
 8001292:	4313      	orrs	r3, r2
 8001294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 0303 	and.w	r3, r3, #3
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d017      	beq.n	80012d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	68db      	ldr	r3, [r3, #12]
 80012ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	2203      	movs	r2, #3
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	4013      	ands	r3, r2
 80012be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	689a      	ldr	r2, [r3, #8]
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f003 0303 	and.w	r3, r3, #3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d123      	bne.n	800132c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	08da      	lsrs	r2, r3, #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3208      	adds	r2, #8
 80012ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	f003 0307 	and.w	r3, r3, #7
 80012f8:	009b      	lsls	r3, r3, #2
 80012fa:	220f      	movs	r2, #15
 80012fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	691a      	ldr	r2, [r3, #16]
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	69b9      	ldr	r1, [r7, #24]
 8001328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001332:	69fb      	ldr	r3, [r7, #28]
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	2203      	movs	r2, #3
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	43db      	mvns	r3, r3
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	4013      	ands	r3, r2
 8001342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 0203 	and.w	r2, r3, #3
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4313      	orrs	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001368:	2b00      	cmp	r3, #0
 800136a:	f000 80ae 	beq.w	80014ca <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	4b5d      	ldr	r3, [pc, #372]	@ (80014e8 <HAL_GPIO_Init+0x300>)
 8001374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001376:	4a5c      	ldr	r2, [pc, #368]	@ (80014e8 <HAL_GPIO_Init+0x300>)
 8001378:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800137c:	6453      	str	r3, [r2, #68]	@ 0x44
 800137e:	4b5a      	ldr	r3, [pc, #360]	@ (80014e8 <HAL_GPIO_Init+0x300>)
 8001380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001382:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800138a:	4a58      	ldr	r2, [pc, #352]	@ (80014ec <HAL_GPIO_Init+0x304>)
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	69ba      	ldr	r2, [r7, #24]
 80013aa:	4013      	ands	r3, r2
 80013ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4a4f      	ldr	r2, [pc, #316]	@ (80014f0 <HAL_GPIO_Init+0x308>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x21a>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4e      	ldr	r2, [pc, #312]	@ (80014f4 <HAL_GPIO_Init+0x30c>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x216>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4d      	ldr	r2, [pc, #308]	@ (80014f8 <HAL_GPIO_Init+0x310>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x212>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4c      	ldr	r2, [pc, #304]	@ (80014fc <HAL_GPIO_Init+0x314>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x20e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001500 <HAL_GPIO_Init+0x318>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x20a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001504 <HAL_GPIO_Init+0x31c>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x206>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a49      	ldr	r2, [pc, #292]	@ (8001508 <HAL_GPIO_Init+0x320>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x202>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x21c>
 8001402:	2300      	movs	r3, #0
 8001404:	69fa      	ldr	r2, [r7, #28]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	69ba      	ldr	r2, [r7, #24]
 8001410:	4313      	orrs	r3, r2
 8001412:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001414:	4935      	ldr	r1, [pc, #212]	@ (80014ec <HAL_GPIO_Init+0x304>)
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001422:	4b3a      	ldr	r3, [pc, #232]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	43db      	mvns	r3, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4013      	ands	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800143e:	69ba      	ldr	r2, [r7, #24]
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001446:	4a31      	ldr	r2, [pc, #196]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800144c:	4b2f      	ldr	r3, [pc, #188]	@ (800150c <HAL_GPIO_Init+0x324>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001452:	693b      	ldr	r3, [r7, #16]
 8001454:	43db      	mvns	r3, r3
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	4013      	ands	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001468:	69ba      	ldr	r2, [r7, #24]
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001470:	4a26      	ldr	r2, [pc, #152]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001472:	69bb      	ldr	r3, [r7, #24]
 8001474:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001476:	4b25      	ldr	r3, [pc, #148]	@ (800150c <HAL_GPIO_Init+0x324>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001492:	69ba      	ldr	r2, [r7, #24]
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4313      	orrs	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800149a:	4a1c      	ldr	r2, [pc, #112]	@ (800150c <HAL_GPIO_Init+0x324>)
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <HAL_GPIO_Init+0x324>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014a6:	693b      	ldr	r3, [r7, #16]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014c4:	4a11      	ldr	r2, [pc, #68]	@ (800150c <HAL_GPIO_Init+0x324>)
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ca:	69fb      	ldr	r3, [r7, #28]
 80014cc:	3301      	adds	r3, #1
 80014ce:	61fb      	str	r3, [r7, #28]
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	2b0f      	cmp	r3, #15
 80014d4:	f67f ae96 	bls.w	8001204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d8:	bf00      	nop
 80014da:	bf00      	nop
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40013800 	.word	0x40013800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	40020400 	.word	0x40020400
 80014f8:	40020800 	.word	0x40020800
 80014fc:	40020c00 	.word	0x40020c00
 8001500:	40021000 	.word	0x40021000
 8001504:	40021400 	.word	0x40021400
 8001508:	40021800 	.word	0x40021800
 800150c:	40013c00 	.word	0x40013c00

08001510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	460b      	mov	r3, r1
 800151a:	807b      	strh	r3, [r7, #2]
 800151c:	4613      	mov	r3, r2
 800151e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001520:	787b      	ldrb	r3, [r7, #1]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800152c:	e003      	b.n	8001536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800152e:	887b      	ldrh	r3, [r7, #2]
 8001530:	041a      	lsls	r2, r3, #16
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	619a      	str	r2, [r3, #24]
}
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
	...

08001544 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
 800154a:	4603      	mov	r3, r0
 800154c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800154e:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001550:	695a      	ldr	r2, [r3, #20]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4013      	ands	r3, r2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800155a:	4a05      	ldr	r2, [pc, #20]	@ (8001570 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800155c:	88fb      	ldrh	r3, [r7, #6]
 800155e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fa54 	bl	8000a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8001568:	bf00      	nop
 800156a:	3708      	adds	r7, #8
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	40013c00 	.word	0x40013c00

08001574 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
 800157c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e0cc      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001588:	4b68      	ldr	r3, [pc, #416]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 030f 	and.w	r3, r3, #15
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	429a      	cmp	r2, r3
 8001594:	d90c      	bls.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001596:	4b65      	ldr	r3, [pc, #404]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001598:	683a      	ldr	r2, [r7, #0]
 800159a:	b2d2      	uxtb	r2, r2
 800159c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800159e:	4b63      	ldr	r3, [pc, #396]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	683a      	ldr	r2, [r7, #0]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d001      	beq.n	80015b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e0b8      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d020      	beq.n	80015fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0304 	and.w	r3, r3, #4
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c8:	4b59      	ldr	r3, [pc, #356]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a58      	ldr	r2, [pc, #352]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80015d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 0308 	and.w	r3, r3, #8
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d005      	beq.n	80015ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015e0:	4b53      	ldr	r3, [pc, #332]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	4a52      	ldr	r2, [pc, #328]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80015ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015ec:	4b50      	ldr	r3, [pc, #320]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	494d      	ldr	r1, [pc, #308]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	4313      	orrs	r3, r2
 80015fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d044      	beq.n	8001694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d107      	bne.n	8001622 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b47      	ldr	r3, [pc, #284]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d119      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e07f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2b02      	cmp	r3, #2
 8001628:	d003      	beq.n	8001632 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800162e:	2b03      	cmp	r3, #3
 8001630:	d107      	bne.n	8001642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001632:	4b3f      	ldr	r3, [pc, #252]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d109      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163e:	2301      	movs	r3, #1
 8001640:	e06f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001642:	4b3b      	ldr	r3, [pc, #236]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e067      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001652:	4b37      	ldr	r3, [pc, #220]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f023 0203 	bic.w	r2, r3, #3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4934      	ldr	r1, [pc, #208]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001660:	4313      	orrs	r3, r2
 8001662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001664:	f7ff fca2 	bl	8000fac <HAL_GetTick>
 8001668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	e00a      	b.n	8001682 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800166c:	f7ff fc9e 	bl	8000fac <HAL_GetTick>
 8001670:	4602      	mov	r2, r0
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800167a:	4293      	cmp	r3, r2
 800167c:	d901      	bls.n	8001682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800167e:	2303      	movs	r3, #3
 8001680:	e04f      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001682:	4b2b      	ldr	r3, [pc, #172]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f003 020c 	and.w	r2, r3, #12
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	429a      	cmp	r2, r3
 8001692:	d1eb      	bne.n	800166c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 030f 	and.w	r3, r3, #15
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	429a      	cmp	r2, r3
 80016a0:	d20c      	bcs.n	80016bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016a2:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016a4:	683a      	ldr	r2, [r7, #0]
 80016a6:	b2d2      	uxtb	r2, r2
 80016a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016aa:	4b20      	ldr	r3, [pc, #128]	@ (800172c <HAL_RCC_ClockConfig+0x1b8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 030f 	and.w	r3, r3, #15
 80016b2:	683a      	ldr	r2, [r7, #0]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e032      	b.n	8001722 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0304 	and.w	r3, r3, #4
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d008      	beq.n	80016da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016c8:	4b19      	ldr	r3, [pc, #100]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	689b      	ldr	r3, [r3, #8]
 80016cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	68db      	ldr	r3, [r3, #12]
 80016d4:	4916      	ldr	r1, [pc, #88]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0308 	and.w	r3, r3, #8
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016e6:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	00db      	lsls	r3, r3, #3
 80016f4:	490e      	ldr	r1, [pc, #56]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 80016f6:	4313      	orrs	r3, r2
 80016f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80016fa:	f000 f821 	bl	8001740 <HAL_RCC_GetSysClockFreq>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b0b      	ldr	r3, [pc, #44]	@ (8001730 <HAL_RCC_ClockConfig+0x1bc>)
 8001702:	689b      	ldr	r3, [r3, #8]
 8001704:	091b      	lsrs	r3, r3, #4
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	490a      	ldr	r1, [pc, #40]	@ (8001734 <HAL_RCC_ClockConfig+0x1c0>)
 800170c:	5ccb      	ldrb	r3, [r1, r3]
 800170e:	fa22 f303 	lsr.w	r3, r2, r3
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_RCC_ClockConfig+0x1c4>)
 8001714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001716:	4b09      	ldr	r3, [pc, #36]	@ (800173c <HAL_RCC_ClockConfig+0x1c8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff fc02 	bl	8000f24 <HAL_InitTick>

  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3710      	adds	r7, #16
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00
 8001730:	40023800 	.word	0x40023800
 8001734:	080040f4 	.word	0x080040f4
 8001738:	20000000 	.word	0x20000000
 800173c:	20000004 	.word	0x20000004

08001740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001740:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001744:	b0a6      	sub	sp, #152	@ 0x98
 8001746:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 800174e:	2300      	movs	r3, #0
 8001750:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800175a:	2300      	movs	r3, #0
 800175c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 8001760:	2300      	movs	r3, #0
 8001762:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001766:	4bc8      	ldr	r3, [pc, #800]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b0c      	cmp	r3, #12
 8001770:	f200 817e 	bhi.w	8001a70 <HAL_RCC_GetSysClockFreq+0x330>
 8001774:	a201      	add	r2, pc, #4	@ (adr r2, 800177c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800177a:	bf00      	nop
 800177c:	080017b1 	.word	0x080017b1
 8001780:	08001a71 	.word	0x08001a71
 8001784:	08001a71 	.word	0x08001a71
 8001788:	08001a71 	.word	0x08001a71
 800178c:	080017b9 	.word	0x080017b9
 8001790:	08001a71 	.word	0x08001a71
 8001794:	08001a71 	.word	0x08001a71
 8001798:	08001a71 	.word	0x08001a71
 800179c:	080017c1 	.word	0x080017c1
 80017a0:	08001a71 	.word	0x08001a71
 80017a4:	08001a71 	.word	0x08001a71
 80017a8:	08001a71 	.word	0x08001a71
 80017ac:	0800192b 	.word	0x0800192b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4bb6      	ldr	r3, [pc, #728]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x34c>)
 80017b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017b6:	e15f      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017b8:	4bb5      	ldr	r3, [pc, #724]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x350>)
 80017ba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80017be:	e15b      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017c0:	4bb1      	ldr	r3, [pc, #708]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017c8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017cc:	4bae      	ldr	r3, [pc, #696]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d031      	beq.n	800183c <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d8:	4bab      	ldr	r3, [pc, #684]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	099b      	lsrs	r3, r3, #6
 80017de:	2200      	movs	r2, #0
 80017e0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80017e2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80017e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80017e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80017ec:	2300      	movs	r3, #0
 80017ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80017f0:	4ba7      	ldr	r3, [pc, #668]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x350>)
 80017f2:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80017f6:	462a      	mov	r2, r5
 80017f8:	fb03 f202 	mul.w	r2, r3, r2
 80017fc:	2300      	movs	r3, #0
 80017fe:	4621      	mov	r1, r4
 8001800:	fb01 f303 	mul.w	r3, r1, r3
 8001804:	4413      	add	r3, r2
 8001806:	4aa2      	ldr	r2, [pc, #648]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001808:	4621      	mov	r1, r4
 800180a:	fba1 1202 	umull	r1, r2, r1, r2
 800180e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8001810:	460a      	mov	r2, r1
 8001812:	67ba      	str	r2, [r7, #120]	@ 0x78
 8001814:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8001816:	4413      	add	r3, r2
 8001818:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800181a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800181e:	2200      	movs	r2, #0
 8001820:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001822:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001824:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001828:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 800182c:	f7fe fd40 	bl	80002b0 <__aeabi_uldivmod>
 8001830:	4602      	mov	r2, r0
 8001832:	460b      	mov	r3, r1
 8001834:	4613      	mov	r3, r2
 8001836:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800183a:	e064      	b.n	8001906 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800183c:	4b92      	ldr	r3, [pc, #584]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	099b      	lsrs	r3, r3, #6
 8001842:	2200      	movs	r2, #0
 8001844:	653b      	str	r3, [r7, #80]	@ 0x50
 8001846:	657a      	str	r2, [r7, #84]	@ 0x54
 8001848:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800184a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800184e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001850:	2300      	movs	r3, #0
 8001852:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001854:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001858:	4622      	mov	r2, r4
 800185a:	462b      	mov	r3, r5
 800185c:	f04f 0000 	mov.w	r0, #0
 8001860:	f04f 0100 	mov.w	r1, #0
 8001864:	0159      	lsls	r1, r3, #5
 8001866:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800186a:	0150      	lsls	r0, r2, #5
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	4621      	mov	r1, r4
 8001872:	1a51      	subs	r1, r2, r1
 8001874:	6139      	str	r1, [r7, #16]
 8001876:	4629      	mov	r1, r5
 8001878:	eb63 0301 	sbc.w	r3, r3, r1
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	f04f 0300 	mov.w	r3, #0
 8001886:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800188a:	4659      	mov	r1, fp
 800188c:	018b      	lsls	r3, r1, #6
 800188e:	4651      	mov	r1, sl
 8001890:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001894:	4651      	mov	r1, sl
 8001896:	018a      	lsls	r2, r1, #6
 8001898:	4651      	mov	r1, sl
 800189a:	ebb2 0801 	subs.w	r8, r2, r1
 800189e:	4659      	mov	r1, fp
 80018a0:	eb63 0901 	sbc.w	r9, r3, r1
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80018b0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80018b4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80018b8:	4690      	mov	r8, r2
 80018ba:	4699      	mov	r9, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	eb18 0303 	adds.w	r3, r8, r3
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	462b      	mov	r3, r5
 80018c6:	eb49 0303 	adc.w	r3, r9, r3
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80018d8:	4629      	mov	r1, r5
 80018da:	028b      	lsls	r3, r1, #10
 80018dc:	4621      	mov	r1, r4
 80018de:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018e2:	4621      	mov	r1, r4
 80018e4:	028a      	lsls	r2, r1, #10
 80018e6:	4610      	mov	r0, r2
 80018e8:	4619      	mov	r1, r3
 80018ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018ee:	2200      	movs	r2, #0
 80018f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80018f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80018f4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80018f8:	f7fe fcda 	bl	80002b0 <__aeabi_uldivmod>
 80018fc:	4602      	mov	r2, r0
 80018fe:	460b      	mov	r3, r1
 8001900:	4613      	mov	r3, r2
 8001902:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001906:	4b60      	ldr	r3, [pc, #384]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	0c1b      	lsrs	r3, r3, #16
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	3301      	adds	r3, #1
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 8001918:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800191c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001920:	fbb2 f3f3 	udiv	r3, r2, r3
 8001924:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001928:	e0a6      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800192a:	4b57      	ldr	r3, [pc, #348]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001932:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001936:	4b54      	ldr	r3, [pc, #336]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	2b00      	cmp	r3, #0
 8001940:	d02a      	beq.n	8001998 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001942:	4b51      	ldr	r3, [pc, #324]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	099b      	lsrs	r3, r3, #6
 8001948:	2200      	movs	r2, #0
 800194a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800194c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800194e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001950:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001954:	2100      	movs	r1, #0
 8001956:	4b4e      	ldr	r3, [pc, #312]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001958:	fb03 f201 	mul.w	r2, r3, r1
 800195c:	2300      	movs	r3, #0
 800195e:	fb00 f303 	mul.w	r3, r0, r3
 8001962:	4413      	add	r3, r2
 8001964:	4a4a      	ldr	r2, [pc, #296]	@ (8001a90 <HAL_RCC_GetSysClockFreq+0x350>)
 8001966:	fba0 1202 	umull	r1, r2, r0, r2
 800196a:	677a      	str	r2, [r7, #116]	@ 0x74
 800196c:	460a      	mov	r2, r1
 800196e:	673a      	str	r2, [r7, #112]	@ 0x70
 8001970:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8001972:	4413      	add	r3, r2
 8001974:	677b      	str	r3, [r7, #116]	@ 0x74
 8001976:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800197a:	2200      	movs	r2, #0
 800197c:	633b      	str	r3, [r7, #48]	@ 0x30
 800197e:	637a      	str	r2, [r7, #52]	@ 0x34
 8001980:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001984:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001988:	f7fe fc92 	bl	80002b0 <__aeabi_uldivmod>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4613      	mov	r3, r2
 8001992:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001996:	e05b      	b.n	8001a50 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001998:	4b3b      	ldr	r3, [pc, #236]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	099b      	lsrs	r3, r3, #6
 800199e:	2200      	movs	r2, #0
 80019a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80019a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019aa:	623b      	str	r3, [r7, #32]
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80019b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019b4:	4642      	mov	r2, r8
 80019b6:	464b      	mov	r3, r9
 80019b8:	f04f 0000 	mov.w	r0, #0
 80019bc:	f04f 0100 	mov.w	r1, #0
 80019c0:	0159      	lsls	r1, r3, #5
 80019c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c6:	0150      	lsls	r0, r2, #5
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4641      	mov	r1, r8
 80019ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80019d2:	4649      	mov	r1, r9
 80019d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80019ec:	ebb2 040a 	subs.w	r4, r2, sl
 80019f0:	eb63 050b 	sbc.w	r5, r3, fp
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	00eb      	lsls	r3, r5, #3
 80019fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a02:	00e2      	lsls	r2, r4, #3
 8001a04:	4614      	mov	r4, r2
 8001a06:	461d      	mov	r5, r3
 8001a08:	4643      	mov	r3, r8
 8001a0a:	18e3      	adds	r3, r4, r3
 8001a0c:	603b      	str	r3, [r7, #0]
 8001a0e:	464b      	mov	r3, r9
 8001a10:	eb45 0303 	adc.w	r3, r5, r3
 8001a14:	607b      	str	r3, [r7, #4]
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	f04f 0300 	mov.w	r3, #0
 8001a1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a22:	4629      	mov	r1, r5
 8001a24:	028b      	lsls	r3, r1, #10
 8001a26:	4621      	mov	r1, r4
 8001a28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	028a      	lsls	r2, r1, #10
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001a38:	2200      	movs	r2, #0
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	61fa      	str	r2, [r7, #28]
 8001a3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a42:	f7fe fc35 	bl	80002b0 <__aeabi_uldivmod>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	4613      	mov	r3, r2
 8001a4c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001a50:	4b0d      	ldr	r3, [pc, #52]	@ (8001a88 <HAL_RCC_GetSysClockFreq+0x348>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	0f1b      	lsrs	r3, r3, #28
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 8001a5e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8001a62:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8001a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a6e:	e003      	b.n	8001a78 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a70:	4b06      	ldr	r3, [pc, #24]	@ (8001a8c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001a72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8001a76:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a78:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3798      	adds	r7, #152	@ 0x98
 8001a80:	46bd      	mov	sp, r7
 8001a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a86:	bf00      	nop
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	00f42400 	.word	0x00f42400
 8001a90:	017d7840 	.word	0x017d7840

08001a94 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e28d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8083 	beq.w	8001bba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001ab4:	4b94      	ldr	r3, [pc, #592]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d019      	beq.n	8001af4 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ac0:	4b91      	ldr	r3, [pc, #580]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
        || \
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d106      	bne.n	8001ada <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001acc:	4b8e      	ldr	r3, [pc, #568]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ad4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ad8:	d00c      	beq.n	8001af4 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ada:	4b8b      	ldr	r3, [pc, #556]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8001ae2:	2b0c      	cmp	r3, #12
 8001ae4:	d112      	bne.n	8001b0c <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ae6:	4b88      	ldr	r3, [pc, #544]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001aee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001af2:	d10b      	bne.n	8001b0c <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001af4:	4b84      	ldr	r3, [pc, #528]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d05b      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x124>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d157      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e25a      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b14:	d106      	bne.n	8001b24 <HAL_RCC_OscConfig+0x90>
 8001b16:	4b7c      	ldr	r3, [pc, #496]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a7b      	ldr	r2, [pc, #492]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b20:	6013      	str	r3, [r2, #0]
 8001b22:	e01d      	b.n	8001b60 <HAL_RCC_OscConfig+0xcc>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b2c:	d10c      	bne.n	8001b48 <HAL_RCC_OscConfig+0xb4>
 8001b2e:	4b76      	ldr	r3, [pc, #472]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a75      	ldr	r2, [pc, #468]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001b38:	6013      	str	r3, [r2, #0]
 8001b3a:	4b73      	ldr	r3, [pc, #460]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a72      	ldr	r2, [pc, #456]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b44:	6013      	str	r3, [r2, #0]
 8001b46:	e00b      	b.n	8001b60 <HAL_RCC_OscConfig+0xcc>
 8001b48:	4b6f      	ldr	r3, [pc, #444]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a6e      	ldr	r2, [pc, #440]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b52:	6013      	str	r3, [r2, #0]
 8001b54:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a6b      	ldr	r2, [pc, #428]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d013      	beq.n	8001b90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b68:	f7ff fa20 	bl	8000fac <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b70:	f7ff fa1c 	bl	8000fac <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b64      	cmp	r3, #100	@ 0x64
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e21f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b82:	4b61      	ldr	r3, [pc, #388]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0xdc>
 8001b8e:	e014      	b.n	8001bba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b90:	f7ff fa0c 	bl	8000fac <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b98:	f7ff fa08 	bl	8000fac <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b64      	cmp	r3, #100	@ 0x64
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e20b      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001baa:	4b57      	ldr	r3, [pc, #348]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x104>
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f003 0302 	and.w	r3, r3, #2
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d06f      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001bc6:	4b50      	ldr	r3, [pc, #320]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f003 030c 	and.w	r3, r3, #12
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d017      	beq.n	8001c02 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 030c 	and.w	r3, r3, #12
        || \
 8001bda:	2b08      	cmp	r3, #8
 8001bdc:	d105      	bne.n	8001bea <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bde:	4b4a      	ldr	r3, [pc, #296]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00b      	beq.n	8001c02 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bea:	4b47      	ldr	r3, [pc, #284]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8001bf2:	2b0c      	cmp	r3, #12
 8001bf4:	d11c      	bne.n	8001c30 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001bf6:	4b44      	ldr	r3, [pc, #272]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d116      	bne.n	8001c30 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c02:	4b41      	ldr	r3, [pc, #260]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x186>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d001      	beq.n	8001c1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001c16:	2301      	movs	r3, #1
 8001c18:	e1d3      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c1a:	4b3b      	ldr	r3, [pc, #236]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	00db      	lsls	r3, r3, #3
 8001c28:	4937      	ldr	r1, [pc, #220]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c2e:	e03a      	b.n	8001ca6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d020      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c38:	4b34      	ldr	r3, [pc, #208]	@ (8001d0c <HAL_RCC_OscConfig+0x278>)
 8001c3a:	2201      	movs	r2, #1
 8001c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff f9b5 	bl	8000fac <HAL_GetTick>
 8001c42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c44:	e008      	b.n	8001c58 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c46:	f7ff f9b1 	bl	8000fac <HAL_GetTick>
 8001c4a:	4602      	mov	r2, r0
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	1ad3      	subs	r3, r2, r3
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e1b4      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c58:	4b2b      	ldr	r3, [pc, #172]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f0      	beq.n	8001c46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c64:	4b28      	ldr	r3, [pc, #160]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4925      	ldr	r1, [pc, #148]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	600b      	str	r3, [r1, #0]
 8001c78:	e015      	b.n	8001ca6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <HAL_RCC_OscConfig+0x278>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff f994 	bl	8000fac <HAL_GetTick>
 8001c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c88:	f7ff f990 	bl	8000fac <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	693b      	ldr	r3, [r7, #16]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e193      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c9a:	4b1b      	ldr	r3, [pc, #108]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d036      	beq.n	8001d20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d016      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4b15      	ldr	r3, [pc, #84]	@ (8001d10 <HAL_RCC_OscConfig+0x27c>)
 8001cbc:	2201      	movs	r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc0:	f7ff f974 	bl	8000fac <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f970 	bl	8000fac <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e173      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cda:	4b0b      	ldr	r3, [pc, #44]	@ (8001d08 <HAL_RCC_OscConfig+0x274>)
 8001cdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d0f0      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x234>
 8001ce6:	e01b      	b.n	8001d20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ce8:	4b09      	ldr	r3, [pc, #36]	@ (8001d10 <HAL_RCC_OscConfig+0x27c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cee:	f7ff f95d 	bl	8000fac <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cf4:	e00e      	b.n	8001d14 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cf6:	f7ff f959 	bl	8000fac <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	2b02      	cmp	r3, #2
 8001d02:	d907      	bls.n	8001d14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e15c      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	42470000 	.word	0x42470000
 8001d10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d14:	4b8a      	ldr	r3, [pc, #552]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001d16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ea      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0304 	and.w	r3, r3, #4
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 8097 	beq.w	8001e5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d32:	4b83      	ldr	r3, [pc, #524]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d10f      	bne.n	8001d5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60bb      	str	r3, [r7, #8]
 8001d42:	4b7f      	ldr	r3, [pc, #508]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d46:	4a7e      	ldr	r2, [pc, #504]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001d48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d56:	60bb      	str	r3, [r7, #8]
 8001d58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d5e:	4b79      	ldr	r3, [pc, #484]	@ (8001f44 <HAL_RCC_OscConfig+0x4b0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d118      	bne.n	8001d9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d6a:	4b76      	ldr	r3, [pc, #472]	@ (8001f44 <HAL_RCC_OscConfig+0x4b0>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a75      	ldr	r2, [pc, #468]	@ (8001f44 <HAL_RCC_OscConfig+0x4b0>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d76:	f7ff f919 	bl	8000fac <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7e:	f7ff f915 	bl	8000fac <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e118      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d90:	4b6c      	ldr	r3, [pc, #432]	@ (8001f44 <HAL_RCC_OscConfig+0x4b0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x31e>
 8001da4:	4b66      	ldr	r3, [pc, #408]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001da8:	4a65      	ldr	r2, [pc, #404]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001db0:	e01c      	b.n	8001dec <HAL_RCC_OscConfig+0x358>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x340>
 8001dba:	4b61      	ldr	r3, [pc, #388]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dbe:	4a60      	ldr	r2, [pc, #384]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dc6:	4b5e      	ldr	r3, [pc, #376]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dca:	4a5d      	ldr	r2, [pc, #372]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001dcc:	f043 0301 	orr.w	r3, r3, #1
 8001dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001dd2:	e00b      	b.n	8001dec <HAL_RCC_OscConfig+0x358>
 8001dd4:	4b5a      	ldr	r3, [pc, #360]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd8:	4a59      	ldr	r2, [pc, #356]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001dda:	f023 0301 	bic.w	r3, r3, #1
 8001dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001de0:	4b57      	ldr	r3, [pc, #348]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001de4:	4a56      	ldr	r2, [pc, #344]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001de6:	f023 0304 	bic.w	r3, r3, #4
 8001dea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d015      	beq.n	8001e20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff f8da 	bl	8000fac <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001dfa:	e00a      	b.n	8001e12 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001dfc:	f7ff f8d6 	bl	8000fac <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d901      	bls.n	8001e12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e0d7      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e12:	4b4b      	ldr	r3, [pc, #300]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d0ee      	beq.n	8001dfc <HAL_RCC_OscConfig+0x368>
 8001e1e:	e014      	b.n	8001e4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e20:	f7ff f8c4 	bl	8000fac <HAL_GetTick>
 8001e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e26:	e00a      	b.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7ff f8c0 	bl	8000fac <HAL_GetTick>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e0c1      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e3e:	4b40      	ldr	r3, [pc, #256]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001e40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1ee      	bne.n	8001e28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e4a:	7dfb      	ldrb	r3, [r7, #23]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d105      	bne.n	8001e5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e50:	4b3b      	ldr	r3, [pc, #236]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e54:	4a3a      	ldr	r2, [pc, #232]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001e56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 80ad 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e66:	4b36      	ldr	r3, [pc, #216]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 030c 	and.w	r3, r3, #12
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d060      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d145      	bne.n	8001f06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b33      	ldr	r3, [pc, #204]	@ (8001f48 <HAL_RCC_OscConfig+0x4b4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e80:	f7ff f894 	bl	8000fac <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f890 	bl	8000fac <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e093      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e9a:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	69da      	ldr	r2, [r3, #28]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6a1b      	ldr	r3, [r3, #32]
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eb4:	019b      	lsls	r3, r3, #6
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ebc:	085b      	lsrs	r3, r3, #1
 8001ebe:	3b01      	subs	r3, #1
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	431a      	orrs	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	431a      	orrs	r2, r3
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed0:	071b      	lsls	r3, r3, #28
 8001ed2:	491b      	ldr	r1, [pc, #108]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_RCC_OscConfig+0x4b4>)
 8001eda:	2201      	movs	r2, #1
 8001edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ede:	f7ff f865 	bl	8000fac <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee6:	f7ff f861 	bl	8000fac <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e064      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ef8:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x452>
 8001f04:	e05c      	b.n	8001fc0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b10      	ldr	r3, [pc, #64]	@ (8001f48 <HAL_RCC_OscConfig+0x4b4>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f0c:	f7ff f84e 	bl	8000fac <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f14:	f7ff f84a 	bl	8000fac <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e04d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_RCC_OscConfig+0x4ac>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x480>
 8001f32:	e045      	b.n	8001fc0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d107      	bne.n	8001f4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e040      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
 8001f40:	40023800 	.word	0x40023800
 8001f44:	40007000 	.word	0x40007000
 8001f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <HAL_RCC_OscConfig+0x538>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d030      	beq.n	8001fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d129      	bne.n	8001fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d122      	bne.n	8001fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d119      	bne.n	8001fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f92:	085b      	lsrs	r3, r3, #1
 8001f94:	3b01      	subs	r3, #1
 8001f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d10f      	bne.n	8001fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d107      	bne.n	8001fbc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d001      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e000      	b.n	8001fc2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001fc0:	2300      	movs	r3, #0
}
 8001fc2:	4618      	mov	r0, r3
 8001fc4:	3718      	adds	r7, #24
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800

08001fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e041      	b.n	8002066 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d106      	bne.n	8001ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fdbc 	bl	8000b74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3304      	adds	r3, #4
 800200c:	4619      	mov	r1, r3
 800200e:	4610      	mov	r0, r2
 8002010:	f000 fd2e 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2201      	movs	r2, #1
 8002028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2201      	movs	r2, #1
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2201      	movs	r2, #1
 8002048:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2201      	movs	r2, #1
 8002058:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002064:	2300      	movs	r3, #0
}
 8002066:	4618      	mov	r0, r3
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b082      	sub	sp, #8
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e041      	b.n	8002104 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f839 	bl	800210c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2202      	movs	r2, #2
 800209e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	4619      	mov	r1, r3
 80020ac:	4610      	mov	r0, r2
 80020ae:	f000 fcdf 	bl	8002a70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2201      	movs	r2, #1
 80020de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2201      	movs	r2, #1
 80020f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr

08002120 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d109      	bne.n	8002144 <HAL_TIM_PWM_Start+0x24>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b01      	cmp	r3, #1
 800213a:	bf14      	ite	ne
 800213c:	2301      	movne	r3, #1
 800213e:	2300      	moveq	r3, #0
 8002140:	b2db      	uxtb	r3, r3
 8002142:	e022      	b.n	800218a <HAL_TIM_PWM_Start+0x6a>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b04      	cmp	r3, #4
 8002148:	d109      	bne.n	800215e <HAL_TIM_PWM_Start+0x3e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b01      	cmp	r3, #1
 8002154:	bf14      	ite	ne
 8002156:	2301      	movne	r3, #1
 8002158:	2300      	moveq	r3, #0
 800215a:	b2db      	uxtb	r3, r3
 800215c:	e015      	b.n	800218a <HAL_TIM_PWM_Start+0x6a>
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	2b08      	cmp	r3, #8
 8002162:	d109      	bne.n	8002178 <HAL_TIM_PWM_Start+0x58>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2b01      	cmp	r3, #1
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	e008      	b.n	800218a <HAL_TIM_PWM_Start+0x6a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b01      	cmp	r3, #1
 8002182:	bf14      	ite	ne
 8002184:	2301      	movne	r3, #1
 8002186:	2300      	moveq	r3, #0
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07c      	b.n	800228c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d104      	bne.n	80021a2 <HAL_TIM_PWM_Start+0x82>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2202      	movs	r2, #2
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80021a0:	e013      	b.n	80021ca <HAL_TIM_PWM_Start+0xaa>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d104      	bne.n	80021b2 <HAL_TIM_PWM_Start+0x92>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2202      	movs	r2, #2
 80021ac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80021b0:	e00b      	b.n	80021ca <HAL_TIM_PWM_Start+0xaa>
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b08      	cmp	r3, #8
 80021b6:	d104      	bne.n	80021c2 <HAL_TIM_PWM_Start+0xa2>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2202      	movs	r2, #2
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80021c0:	e003      	b.n	80021ca <HAL_TIM_PWM_Start+0xaa>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2202      	movs	r2, #2
 80021c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2201      	movs	r2, #1
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f000 ff42 	bl	800305c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2d      	ldr	r2, [pc, #180]	@ (8002294 <HAL_TIM_PWM_Start+0x174>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d004      	beq.n	80021ec <HAL_TIM_PWM_Start+0xcc>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a2c      	ldr	r2, [pc, #176]	@ (8002298 <HAL_TIM_PWM_Start+0x178>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d101      	bne.n	80021f0 <HAL_TIM_PWM_Start+0xd0>
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_TIM_PWM_Start+0xd2>
 80021f0:	2300      	movs	r3, #0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d007      	beq.n	8002206 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002204:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a22      	ldr	r2, [pc, #136]	@ (8002294 <HAL_TIM_PWM_Start+0x174>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d022      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002218:	d01d      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1f      	ldr	r2, [pc, #124]	@ (800229c <HAL_TIM_PWM_Start+0x17c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d018      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a1d      	ldr	r2, [pc, #116]	@ (80022a0 <HAL_TIM_PWM_Start+0x180>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <HAL_TIM_PWM_Start+0x184>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d00e      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a16      	ldr	r2, [pc, #88]	@ (8002298 <HAL_TIM_PWM_Start+0x178>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a18      	ldr	r2, [pc, #96]	@ (80022a8 <HAL_TIM_PWM_Start+0x188>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_TIM_PWM_Start+0x136>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a16      	ldr	r2, [pc, #88]	@ (80022ac <HAL_TIM_PWM_Start+0x18c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d111      	bne.n	800227a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f003 0307 	and.w	r3, r3, #7
 8002260:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2b06      	cmp	r3, #6
 8002266:	d010      	beq.n	800228a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 0201 	orr.w	r2, r2, #1
 8002276:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002278:	e007      	b.n	800228a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	681a      	ldr	r2, [r3, #0]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f042 0201 	orr.w	r2, r2, #1
 8002288:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3710      	adds	r7, #16
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40010000 	.word	0x40010000
 8002298:	40010400 	.word	0x40010400
 800229c:	40000400 	.word	0x40000400
 80022a0:	40000800 	.word	0x40000800
 80022a4:	40000c00 	.word	0x40000c00
 80022a8:	40014000 	.word	0x40014000
 80022ac:	40001800 	.word	0x40001800

080022b0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b086      	sub	sp, #24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e097      	b.n	80023f4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022ca:	b2db      	uxtb	r3, r3
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d106      	bne.n	80022de <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7fe fbfd 	bl	8000ad8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2202      	movs	r2, #2
 80022e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6812      	ldr	r2, [r2, #0]
 80022f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022f4:	f023 0307 	bic.w	r3, r3, #7
 80022f8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3304      	adds	r3, #4
 8002302:	4619      	mov	r1, r3
 8002304:	4610      	mov	r0, r2
 8002306:	f000 fbb3 	bl	8002a70 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	4313      	orrs	r3, r2
 800232a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002332:	f023 0303 	bic.w	r3, r3, #3
 8002336:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	699b      	ldr	r3, [r3, #24]
 8002340:	021b      	lsls	r3, r3, #8
 8002342:	4313      	orrs	r3, r2
 8002344:	693a      	ldr	r2, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002350:	f023 030c 	bic.w	r3, r3, #12
 8002354:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800235c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002360:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68da      	ldr	r2, [r3, #12]
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	69db      	ldr	r3, [r3, #28]
 800236a:	021b      	lsls	r3, r3, #8
 800236c:	4313      	orrs	r3, r2
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	011a      	lsls	r2, r3, #4
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	031b      	lsls	r3, r3, #12
 8002380:	4313      	orrs	r3, r2
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4313      	orrs	r3, r2
 8002386:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800238e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8002396:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	685a      	ldr	r2, [r3, #4]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	695b      	ldr	r3, [r3, #20]
 80023a0:	011b      	lsls	r3, r3, #4
 80023a2:	4313      	orrs	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	68fa      	ldr	r2, [r7, #12]
 80023c0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2201      	movs	r2, #1
 80023e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2201      	movs	r2, #1
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3718      	adds	r7, #24
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800240c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002414:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800241c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002424:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d110      	bne.n	800244e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800242c:	7bfb      	ldrb	r3, [r7, #15]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e069      	b.n	8002510 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800244c:	e031      	b.n	80024b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d110      	bne.n	8002476 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8002454:	7bbb      	ldrb	r3, [r7, #14]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d102      	bne.n	8002460 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800245a:	7b3b      	ldrb	r3, [r7, #12]
 800245c:	2b01      	cmp	r3, #1
 800245e:	d001      	beq.n	8002464 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e055      	b.n	8002510 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2202      	movs	r2, #2
 8002468:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002474:	e01d      	b.n	80024b2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002476:	7bfb      	ldrb	r3, [r7, #15]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d108      	bne.n	800248e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800247c:	7bbb      	ldrb	r3, [r7, #14]
 800247e:	2b01      	cmp	r3, #1
 8002480:	d105      	bne.n	800248e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8002482:	7b7b      	ldrb	r3, [r7, #13]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d102      	bne.n	800248e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8002488:	7b3b      	ldrb	r3, [r7, #12]
 800248a:	2b01      	cmp	r3, #1
 800248c:	d001      	beq.n	8002492 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e03e      	b.n	8002510 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2202      	movs	r2, #2
 8002496:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2202      	movs	r2, #2
 800249e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2202      	movs	r2, #2
 80024a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d003      	beq.n	80024c0 <HAL_TIM_Encoder_Start+0xc4>
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d008      	beq.n	80024d0 <HAL_TIM_Encoder_Start+0xd4>
 80024be:	e00f      	b.n	80024e0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2201      	movs	r2, #1
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fdc7 	bl	800305c <TIM_CCxChannelCmd>
      break;
 80024ce:	e016      	b.n	80024fe <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2201      	movs	r2, #1
 80024d6:	2104      	movs	r1, #4
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 fdbf 	bl	800305c <TIM_CCxChannelCmd>
      break;
 80024de:	e00e      	b.n	80024fe <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	2100      	movs	r1, #0
 80024e8:	4618      	mov	r0, r3
 80024ea:	f000 fdb7 	bl	800305c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2201      	movs	r2, #1
 80024f4:	2104      	movs	r1, #4
 80024f6:	4618      	mov	r0, r3
 80024f8:	f000 fdb0 	bl	800305c <TIM_CCxChannelCmd>
      break;
 80024fc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f042 0201 	orr.w	r2, r2, #1
 800250c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800250e:	2300      	movs	r3, #0
}
 8002510:	4618      	mov	r0, r3
 8002512:	3710      	adds	r7, #16
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}

08002518 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	691b      	ldr	r3, [r3, #16]
 800252e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b00      	cmp	r3, #0
 8002538:	d020      	beq.n	800257c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d01b      	beq.n	800257c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f06f 0202 	mvn.w	r2, #2
 800254c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	2b00      	cmp	r3, #0
 8002560:	d003      	beq.n	800256a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fa65 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 8002568:	e005      	b.n	8002576 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fa57 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f000 fa68 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f003 0304 	and.w	r3, r3, #4
 8002582:	2b00      	cmp	r3, #0
 8002584:	d020      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d01b      	beq.n	80025c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f06f 0204 	mvn.w	r2, #4
 8002598:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2202      	movs	r2, #2
 800259e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 fa3f 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 80025b4:	e005      	b.n	80025c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fa31 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f000 fa42 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	f003 0308 	and.w	r3, r3, #8
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d020      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d01b      	beq.n	8002614 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0208 	mvn.w	r2, #8
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2204      	movs	r2, #4
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f003 0303 	and.w	r3, r3, #3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 fa19 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 fa0b 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 fa1c 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f003 0310 	and.w	r3, r3, #16
 800261a:	2b00      	cmp	r3, #0
 800261c:	d020      	beq.n	8002660 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d01b      	beq.n	8002660 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f9f3 	bl	8002a32 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f9e5 	bl	8002a1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f9f6 	bl	8002a46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0301 	and.w	r3, r3, #1
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0201 	mvn.w	r2, #1
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f9c3 	bl	8002a0a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 fdd8 	bl	8003258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d00c      	beq.n	80026cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d007      	beq.n	80026cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80026c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f9c7 	bl	8002a5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00c      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	f003 0320 	and.w	r3, r3, #32
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d007      	beq.n	80026f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f06f 0220 	mvn.w	r2, #32
 80026e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 fdaa 	bl	8003244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026f0:	bf00      	nop
 80026f2:	3710      	adds	r7, #16
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800270e:	2b01      	cmp	r3, #1
 8002710:	d101      	bne.n	8002716 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002712:	2302      	movs	r3, #2
 8002714:	e0ae      	b.n	8002874 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2201      	movs	r2, #1
 800271a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2b0c      	cmp	r3, #12
 8002722:	f200 809f 	bhi.w	8002864 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002726:	a201      	add	r2, pc, #4	@ (adr r2, 800272c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800272c:	08002761 	.word	0x08002761
 8002730:	08002865 	.word	0x08002865
 8002734:	08002865 	.word	0x08002865
 8002738:	08002865 	.word	0x08002865
 800273c:	080027a1 	.word	0x080027a1
 8002740:	08002865 	.word	0x08002865
 8002744:	08002865 	.word	0x08002865
 8002748:	08002865 	.word	0x08002865
 800274c:	080027e3 	.word	0x080027e3
 8002750:	08002865 	.word	0x08002865
 8002754:	08002865 	.word	0x08002865
 8002758:	08002865 	.word	0x08002865
 800275c:	08002823 	.word	0x08002823
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fa2e 	bl	8002bc8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	699a      	ldr	r2, [r3, #24]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0208 	orr.w	r2, r2, #8
 800277a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699a      	ldr	r2, [r3, #24]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 0204 	bic.w	r2, r2, #4
 800278a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	6999      	ldr	r1, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	691a      	ldr	r2, [r3, #16]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	430a      	orrs	r2, r1
 800279c:	619a      	str	r2, [r3, #24]
      break;
 800279e:	e064      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68b9      	ldr	r1, [r7, #8]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f000 fa7e 	bl	8002ca8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699a      	ldr	r2, [r3, #24]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80027ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	699a      	ldr	r2, [r3, #24]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80027ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6999      	ldr	r1, [r3, #24]
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	021a      	lsls	r2, r3, #8
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	430a      	orrs	r2, r1
 80027de:	619a      	str	r2, [r3, #24]
      break;
 80027e0:	e043      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fad3 	bl	8002d94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	69da      	ldr	r2, [r3, #28]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0208 	orr.w	r2, r2, #8
 80027fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	69da      	ldr	r2, [r3, #28]
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0204 	bic.w	r2, r2, #4
 800280c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69d9      	ldr	r1, [r3, #28]
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	430a      	orrs	r2, r1
 800281e:	61da      	str	r2, [r3, #28]
      break;
 8002820:	e023      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68b9      	ldr	r1, [r7, #8]
 8002828:	4618      	mov	r0, r3
 800282a:	f000 fb27 	bl	8002e7c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69da      	ldr	r2, [r3, #28]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800283c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	69da      	ldr	r2, [r3, #28]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800284c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	69d9      	ldr	r1, [r3, #28]
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	021a      	lsls	r2, r3, #8
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	61da      	str	r2, [r3, #28]
      break;
 8002862:	e002      	b.n	800286a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	75fb      	strb	r3, [r7, #23]
      break;
 8002868:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002890:	2b01      	cmp	r3, #1
 8002892:	d101      	bne.n	8002898 <HAL_TIM_ConfigClockSource+0x1c>
 8002894:	2302      	movs	r3, #2
 8002896:	e0b4      	b.n	8002a02 <HAL_TIM_ConfigClockSource+0x186>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2201      	movs	r2, #1
 800289c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	689b      	ldr	r3, [r3, #8]
 80028ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80028b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80028be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68ba      	ldr	r2, [r7, #8]
 80028c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d0:	d03e      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xd4>
 80028d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028d6:	f200 8087 	bhi.w	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028de:	f000 8086 	beq.w	80029ee <HAL_TIM_ConfigClockSource+0x172>
 80028e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80028e6:	d87f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028e8:	2b70      	cmp	r3, #112	@ 0x70
 80028ea:	d01a      	beq.n	8002922 <HAL_TIM_ConfigClockSource+0xa6>
 80028ec:	2b70      	cmp	r3, #112	@ 0x70
 80028ee:	d87b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f0:	2b60      	cmp	r3, #96	@ 0x60
 80028f2:	d050      	beq.n	8002996 <HAL_TIM_ConfigClockSource+0x11a>
 80028f4:	2b60      	cmp	r3, #96	@ 0x60
 80028f6:	d877      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 80028f8:	2b50      	cmp	r3, #80	@ 0x50
 80028fa:	d03c      	beq.n	8002976 <HAL_TIM_ConfigClockSource+0xfa>
 80028fc:	2b50      	cmp	r3, #80	@ 0x50
 80028fe:	d873      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002900:	2b40      	cmp	r3, #64	@ 0x40
 8002902:	d058      	beq.n	80029b6 <HAL_TIM_ConfigClockSource+0x13a>
 8002904:	2b40      	cmp	r3, #64	@ 0x40
 8002906:	d86f      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002908:	2b30      	cmp	r3, #48	@ 0x30
 800290a:	d064      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 800290c:	2b30      	cmp	r3, #48	@ 0x30
 800290e:	d86b      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002910:	2b20      	cmp	r3, #32
 8002912:	d060      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002914:	2b20      	cmp	r3, #32
 8002916:	d867      	bhi.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
 8002918:	2b00      	cmp	r3, #0
 800291a:	d05c      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 800291c:	2b10      	cmp	r3, #16
 800291e:	d05a      	beq.n	80029d6 <HAL_TIM_ConfigClockSource+0x15a>
 8002920:	e062      	b.n	80029e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002932:	f000 fb73 	bl	800301c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002944:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	609a      	str	r2, [r3, #8]
      break;
 800294e:	e04f      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002960:	f000 fb5c 	bl	800301c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689a      	ldr	r2, [r3, #8]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002972:	609a      	str	r2, [r3, #8]
      break;
 8002974:	e03c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002982:	461a      	mov	r2, r3
 8002984:	f000 fad0 	bl	8002f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2150      	movs	r1, #80	@ 0x50
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb29 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 8002994:	e02c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029a2:	461a      	mov	r2, r3
 80029a4:	f000 faef 	bl	8002f86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	2160      	movs	r1, #96	@ 0x60
 80029ae:	4618      	mov	r0, r3
 80029b0:	f000 fb19 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 80029b4:	e01c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029c2:	461a      	mov	r2, r3
 80029c4:	f000 fab0 	bl	8002f28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2140      	movs	r1, #64	@ 0x40
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fb09 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 80029d4:	e00c      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4619      	mov	r1, r3
 80029e0:	4610      	mov	r0, r2
 80029e2:	f000 fb00 	bl	8002fe6 <TIM_ITRx_SetConfig>
      break;
 80029e6:	e003      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e000      	b.n	80029f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80029ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3710      	adds	r7, #16
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a46:	b480      	push	{r7}
 8002a48:	b083      	sub	sp, #12
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
	...

08002a70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b085      	sub	sp, #20
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	4a46      	ldr	r2, [pc, #280]	@ (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d013      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a8e:	d00f      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a43      	ldr	r2, [pc, #268]	@ (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d00b      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a42      	ldr	r2, [pc, #264]	@ (8002ba4 <TIM_Base_SetConfig+0x134>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d007      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a41      	ldr	r2, [pc, #260]	@ (8002ba8 <TIM_Base_SetConfig+0x138>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d003      	beq.n	8002ab0 <TIM_Base_SetConfig+0x40>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	4a40      	ldr	r2, [pc, #256]	@ (8002bac <TIM_Base_SetConfig+0x13c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d108      	bne.n	8002ac2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a35      	ldr	r2, [pc, #212]	@ (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d02b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ad0:	d027      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a32      	ldr	r2, [pc, #200]	@ (8002ba0 <TIM_Base_SetConfig+0x130>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d023      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a31      	ldr	r2, [pc, #196]	@ (8002ba4 <TIM_Base_SetConfig+0x134>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d01f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a30      	ldr	r2, [pc, #192]	@ (8002ba8 <TIM_Base_SetConfig+0x138>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d01b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a2f      	ldr	r2, [pc, #188]	@ (8002bac <TIM_Base_SetConfig+0x13c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d017      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2e      	ldr	r2, [pc, #184]	@ (8002bb0 <TIM_Base_SetConfig+0x140>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d013      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a2d      	ldr	r2, [pc, #180]	@ (8002bb4 <TIM_Base_SetConfig+0x144>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d00f      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2c      	ldr	r2, [pc, #176]	@ (8002bb8 <TIM_Base_SetConfig+0x148>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d00b      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	@ (8002bbc <TIM_Base_SetConfig+0x14c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d007      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a2a      	ldr	r2, [pc, #168]	@ (8002bc0 <TIM_Base_SetConfig+0x150>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d003      	beq.n	8002b22 <TIM_Base_SetConfig+0xb2>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a29      	ldr	r2, [pc, #164]	@ (8002bc4 <TIM_Base_SetConfig+0x154>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d108      	bne.n	8002b34 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	695b      	ldr	r3, [r3, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	689a      	ldr	r2, [r3, #8]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	4a10      	ldr	r2, [pc, #64]	@ (8002b9c <TIM_Base_SetConfig+0x12c>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d003      	beq.n	8002b68 <TIM_Base_SetConfig+0xf8>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	4a12      	ldr	r2, [pc, #72]	@ (8002bac <TIM_Base_SetConfig+0x13c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d103      	bne.n	8002b70 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	691a      	ldr	r2, [r3, #16]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	691b      	ldr	r3, [r3, #16]
 8002b7a:	f003 0301 	and.w	r3, r3, #1
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d105      	bne.n	8002b8e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f023 0201 	bic.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	611a      	str	r2, [r3, #16]
  }
}
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr
 8002b9a:	bf00      	nop
 8002b9c:	40010000 	.word	0x40010000
 8002ba0:	40000400 	.word	0x40000400
 8002ba4:	40000800 	.word	0x40000800
 8002ba8:	40000c00 	.word	0x40000c00
 8002bac:	40010400 	.word	0x40010400
 8002bb0:	40014000 	.word	0x40014000
 8002bb4:	40014400 	.word	0x40014400
 8002bb8:	40014800 	.word	0x40014800
 8002bbc:	40001800 	.word	0x40001800
 8002bc0:	40001c00 	.word	0x40001c00
 8002bc4:	40002000 	.word	0x40002000

08002bc8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b087      	sub	sp, #28
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a1b      	ldr	r3, [r3, #32]
 8002bd6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	f023 0201 	bic.w	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f023 0303 	bic.w	r3, r3, #3
 8002bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68fa      	ldr	r2, [r7, #12]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	f023 0302 	bic.w	r3, r3, #2
 8002c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a20      	ldr	r2, [pc, #128]	@ (8002ca0 <TIM_OC1_SetConfig+0xd8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_OC1_SetConfig+0x64>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a1f      	ldr	r2, [pc, #124]	@ (8002ca4 <TIM_OC1_SetConfig+0xdc>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10c      	bne.n	8002c46 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0308 	bic.w	r3, r3, #8
 8002c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a15      	ldr	r2, [pc, #84]	@ (8002ca0 <TIM_OC1_SetConfig+0xd8>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d003      	beq.n	8002c56 <TIM_OC1_SetConfig+0x8e>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a14      	ldr	r2, [pc, #80]	@ (8002ca4 <TIM_OC1_SetConfig+0xdc>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d111      	bne.n	8002c7a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	693a      	ldr	r2, [r7, #16]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	693a      	ldr	r2, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68fa      	ldr	r2, [r7, #12]
 8002c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	621a      	str	r2, [r3, #32]
}
 8002c94:	bf00      	nop
 8002c96:	371c      	adds	r7, #28
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9e:	4770      	bx	lr
 8002ca0:	40010000 	.word	0x40010000
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b087      	sub	sp, #28
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6a1b      	ldr	r3, [r3, #32]
 8002cb6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	f023 0210 	bic.w	r2, r3, #16
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	021b      	lsls	r3, r3, #8
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	f023 0320 	bic.w	r3, r3, #32
 8002cf2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	011b      	lsls	r3, r3, #4
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a22      	ldr	r2, [pc, #136]	@ (8002d8c <TIM_OC2_SetConfig+0xe4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d003      	beq.n	8002d10 <TIM_OC2_SetConfig+0x68>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a21      	ldr	r2, [pc, #132]	@ (8002d90 <TIM_OC2_SetConfig+0xe8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d10d      	bne.n	8002d2c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	011b      	lsls	r3, r3, #4
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	4313      	orrs	r3, r2
 8002d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	4a17      	ldr	r2, [pc, #92]	@ (8002d8c <TIM_OC2_SetConfig+0xe4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d003      	beq.n	8002d3c <TIM_OC2_SetConfig+0x94>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a16      	ldr	r2, [pc, #88]	@ (8002d90 <TIM_OC2_SetConfig+0xe8>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d113      	bne.n	8002d64 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002d44:	693b      	ldr	r3, [r7, #16]
 8002d46:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	695b      	ldr	r3, [r3, #20]
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	693a      	ldr	r2, [r7, #16]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	699b      	ldr	r3, [r3, #24]
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	693a      	ldr	r2, [r7, #16]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685a      	ldr	r2, [r3, #4]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	697a      	ldr	r2, [r7, #20]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	bf00      	nop
 8002d80:	371c      	adds	r7, #28
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40010400 	.word	0x40010400

08002d94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b087      	sub	sp, #28
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a1b      	ldr	r3, [r3, #32]
 8002da8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f023 0303 	bic.w	r3, r3, #3
 8002dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68fa      	ldr	r2, [r7, #12]
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002ddc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	697a      	ldr	r2, [r7, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a21      	ldr	r2, [pc, #132]	@ (8002e74 <TIM_OC3_SetConfig+0xe0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d003      	beq.n	8002dfa <TIM_OC3_SetConfig+0x66>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a20      	ldr	r2, [pc, #128]	@ (8002e78 <TIM_OC3_SetConfig+0xe4>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d10d      	bne.n	8002e16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002e00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	021b      	lsls	r3, r3, #8
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002e14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a16      	ldr	r2, [pc, #88]	@ (8002e74 <TIM_OC3_SetConfig+0xe0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d003      	beq.n	8002e26 <TIM_OC3_SetConfig+0x92>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a15      	ldr	r2, [pc, #84]	@ (8002e78 <TIM_OC3_SetConfig+0xe4>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d113      	bne.n	8002e4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002e26:	693b      	ldr	r3, [r7, #16]
 8002e28:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	011b      	lsls	r3, r3, #4
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	011b      	lsls	r3, r3, #4
 8002e48:	693a      	ldr	r2, [r7, #16]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	621a      	str	r2, [r3, #32]
}
 8002e68:	bf00      	nop
 8002e6a:	371c      	adds	r7, #28
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	40010000 	.word	0x40010000
 8002e78:	40010400 	.word	0x40010400

08002e7c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a1b      	ldr	r3, [r3, #32]
 8002e8a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a1b      	ldr	r3, [r3, #32]
 8002e90:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ec6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	031b      	lsls	r3, r3, #12
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	4a12      	ldr	r2, [pc, #72]	@ (8002f20 <TIM_OC4_SetConfig+0xa4>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d003      	beq.n	8002ee4 <TIM_OC4_SetConfig+0x68>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	4a11      	ldr	r2, [pc, #68]	@ (8002f24 <TIM_OC4_SetConfig+0xa8>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d109      	bne.n	8002ef8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	019b      	lsls	r3, r3, #6
 8002ef2:	697a      	ldr	r2, [r7, #20]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	621a      	str	r2, [r3, #32]
}
 8002f12:	bf00      	nop
 8002f14:	371c      	adds	r7, #28
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	40010000 	.word	0x40010000
 8002f24:	40010400 	.word	0x40010400

08002f28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b087      	sub	sp, #28
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a1b      	ldr	r3, [r3, #32]
 8002f38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f023 0201 	bic.w	r2, r3, #1
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	693a      	ldr	r2, [r7, #16]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	f023 030a 	bic.w	r3, r3, #10
 8002f64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f66:	697a      	ldr	r2, [r7, #20]
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	693a      	ldr	r2, [r7, #16]
 8002f72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	621a      	str	r2, [r3, #32]
}
 8002f7a:	bf00      	nop
 8002f7c:	371c      	adds	r7, #28
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr

08002f86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f86:	b480      	push	{r7}
 8002f88:	b087      	sub	sp, #28
 8002f8a:	af00      	add	r7, sp, #0
 8002f8c:	60f8      	str	r0, [r7, #12]
 8002f8e:	60b9      	str	r1, [r7, #8]
 8002f90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6a1b      	ldr	r3, [r3, #32]
 8002f96:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	6a1b      	ldr	r3, [r3, #32]
 8002f9c:	f023 0210 	bic.w	r2, r3, #16
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	031b      	lsls	r3, r3, #12
 8002fb6:	693a      	ldr	r2, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002fc2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	621a      	str	r2, [r3, #32]
}
 8002fda:	bf00      	nop
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002ffc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ffe:	683a      	ldr	r2, [r7, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4313      	orrs	r3, r2
 8003004:	f043 0307 	orr.w	r3, r3, #7
 8003008:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	609a      	str	r2, [r3, #8]
}
 8003010:	bf00      	nop
 8003012:	3714      	adds	r7, #20
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800301c:	b480      	push	{r7}
 800301e:	b087      	sub	sp, #28
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
 8003028:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003036:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	021a      	lsls	r2, r3, #8
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	431a      	orrs	r2, r3
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	4313      	orrs	r3, r2
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	609a      	str	r2, [r3, #8]
}
 8003050:	bf00      	nop
 8003052:	371c      	adds	r7, #28
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800305c:	b480      	push	{r7}
 800305e:	b087      	sub	sp, #28
 8003060:	af00      	add	r7, sp, #0
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 031f 	and.w	r3, r3, #31
 800306e:	2201      	movs	r2, #1
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	43db      	mvns	r3, r3
 800307e:	401a      	ands	r2, r3
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6a1a      	ldr	r2, [r3, #32]
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 031f 	and.w	r3, r3, #31
 800308e:	6879      	ldr	r1, [r7, #4]
 8003090:	fa01 f303 	lsl.w	r3, r1, r3
 8003094:	431a      	orrs	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	621a      	str	r2, [r3, #32]
}
 800309a:	bf00      	nop
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
	...

080030a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d101      	bne.n	80030c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030bc:	2302      	movs	r3, #2
 80030be:	e05a      	b.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68fa      	ldr	r2, [r7, #12]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a21      	ldr	r2, [pc, #132]	@ (8003184 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800310c:	d01d      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a1d      	ldr	r2, [pc, #116]	@ (8003188 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d018      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a1b      	ldr	r2, [pc, #108]	@ (800318c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a1a      	ldr	r2, [pc, #104]	@ (8003190 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d00e      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a18      	ldr	r2, [pc, #96]	@ (8003194 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d009      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d004      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a15      	ldr	r2, [pc, #84]	@ (800319c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d10c      	bne.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003150:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	68ba      	ldr	r2, [r7, #8]
 8003158:	4313      	orrs	r3, r2
 800315a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68ba      	ldr	r2, [r7, #8]
 8003162:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
 8003182:	bf00      	nop
 8003184:	40010000 	.word	0x40010000
 8003188:	40000400 	.word	0x40000400
 800318c:	40000800 	.word	0x40000800
 8003190:	40000c00 	.word	0x40000c00
 8003194:	40010400 	.word	0x40010400
 8003198:	40014000 	.word	0x40014000
 800319c:	40001800 	.word	0x40001800

080031a0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d101      	bne.n	80031bc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80031b8:	2302      	movs	r3, #2
 80031ba:	e03d      	b.n	8003238 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	691b      	ldr	r3, [r3, #16]
 8003206:	4313      	orrs	r3, r2
 8003208:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	4313      	orrs	r3, r2
 8003216:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	69db      	ldr	r3, [r3, #28]
 8003222:	4313      	orrs	r3, r2
 8003224:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2200      	movs	r2, #0
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3714      	adds	r7, #20
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <std>:
 800326c:	2300      	movs	r3, #0
 800326e:	b510      	push	{r4, lr}
 8003270:	4604      	mov	r4, r0
 8003272:	e9c0 3300 	strd	r3, r3, [r0]
 8003276:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800327a:	6083      	str	r3, [r0, #8]
 800327c:	8181      	strh	r1, [r0, #12]
 800327e:	6643      	str	r3, [r0, #100]	@ 0x64
 8003280:	81c2      	strh	r2, [r0, #14]
 8003282:	6183      	str	r3, [r0, #24]
 8003284:	4619      	mov	r1, r3
 8003286:	2208      	movs	r2, #8
 8003288:	305c      	adds	r0, #92	@ 0x5c
 800328a:	f000 f906 	bl	800349a <memset>
 800328e:	4b0d      	ldr	r3, [pc, #52]	@ (80032c4 <std+0x58>)
 8003290:	6263      	str	r3, [r4, #36]	@ 0x24
 8003292:	4b0d      	ldr	r3, [pc, #52]	@ (80032c8 <std+0x5c>)
 8003294:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003296:	4b0d      	ldr	r3, [pc, #52]	@ (80032cc <std+0x60>)
 8003298:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800329a:	4b0d      	ldr	r3, [pc, #52]	@ (80032d0 <std+0x64>)
 800329c:	6323      	str	r3, [r4, #48]	@ 0x30
 800329e:	4b0d      	ldr	r3, [pc, #52]	@ (80032d4 <std+0x68>)
 80032a0:	6224      	str	r4, [r4, #32]
 80032a2:	429c      	cmp	r4, r3
 80032a4:	d006      	beq.n	80032b4 <std+0x48>
 80032a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80032aa:	4294      	cmp	r4, r2
 80032ac:	d002      	beq.n	80032b4 <std+0x48>
 80032ae:	33d0      	adds	r3, #208	@ 0xd0
 80032b0:	429c      	cmp	r4, r3
 80032b2:	d105      	bne.n	80032c0 <std+0x54>
 80032b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80032b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032bc:	f000 b966 	b.w	800358c <__retarget_lock_init_recursive>
 80032c0:	bd10      	pop	{r4, pc}
 80032c2:	bf00      	nop
 80032c4:	08003415 	.word	0x08003415
 80032c8:	08003437 	.word	0x08003437
 80032cc:	0800346f 	.word	0x0800346f
 80032d0:	08003493 	.word	0x08003493
 80032d4:	2000016c 	.word	0x2000016c

080032d8 <stdio_exit_handler>:
 80032d8:	4a02      	ldr	r2, [pc, #8]	@ (80032e4 <stdio_exit_handler+0xc>)
 80032da:	4903      	ldr	r1, [pc, #12]	@ (80032e8 <stdio_exit_handler+0x10>)
 80032dc:	4803      	ldr	r0, [pc, #12]	@ (80032ec <stdio_exit_handler+0x14>)
 80032de:	f000 b869 	b.w	80033b4 <_fwalk_sglue>
 80032e2:	bf00      	nop
 80032e4:	2000000c 	.word	0x2000000c
 80032e8:	08003e2d 	.word	0x08003e2d
 80032ec:	2000001c 	.word	0x2000001c

080032f0 <cleanup_stdio>:
 80032f0:	6841      	ldr	r1, [r0, #4]
 80032f2:	4b0c      	ldr	r3, [pc, #48]	@ (8003324 <cleanup_stdio+0x34>)
 80032f4:	4299      	cmp	r1, r3
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
 80032fa:	d001      	beq.n	8003300 <cleanup_stdio+0x10>
 80032fc:	f000 fd96 	bl	8003e2c <_fflush_r>
 8003300:	68a1      	ldr	r1, [r4, #8]
 8003302:	4b09      	ldr	r3, [pc, #36]	@ (8003328 <cleanup_stdio+0x38>)
 8003304:	4299      	cmp	r1, r3
 8003306:	d002      	beq.n	800330e <cleanup_stdio+0x1e>
 8003308:	4620      	mov	r0, r4
 800330a:	f000 fd8f 	bl	8003e2c <_fflush_r>
 800330e:	68e1      	ldr	r1, [r4, #12]
 8003310:	4b06      	ldr	r3, [pc, #24]	@ (800332c <cleanup_stdio+0x3c>)
 8003312:	4299      	cmp	r1, r3
 8003314:	d004      	beq.n	8003320 <cleanup_stdio+0x30>
 8003316:	4620      	mov	r0, r4
 8003318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800331c:	f000 bd86 	b.w	8003e2c <_fflush_r>
 8003320:	bd10      	pop	{r4, pc}
 8003322:	bf00      	nop
 8003324:	2000016c 	.word	0x2000016c
 8003328:	200001d4 	.word	0x200001d4
 800332c:	2000023c 	.word	0x2000023c

08003330 <global_stdio_init.part.0>:
 8003330:	b510      	push	{r4, lr}
 8003332:	4b0b      	ldr	r3, [pc, #44]	@ (8003360 <global_stdio_init.part.0+0x30>)
 8003334:	4c0b      	ldr	r4, [pc, #44]	@ (8003364 <global_stdio_init.part.0+0x34>)
 8003336:	4a0c      	ldr	r2, [pc, #48]	@ (8003368 <global_stdio_init.part.0+0x38>)
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	4620      	mov	r0, r4
 800333c:	2200      	movs	r2, #0
 800333e:	2104      	movs	r1, #4
 8003340:	f7ff ff94 	bl	800326c <std>
 8003344:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003348:	2201      	movs	r2, #1
 800334a:	2109      	movs	r1, #9
 800334c:	f7ff ff8e 	bl	800326c <std>
 8003350:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003354:	2202      	movs	r2, #2
 8003356:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800335a:	2112      	movs	r1, #18
 800335c:	f7ff bf86 	b.w	800326c <std>
 8003360:	200002a4 	.word	0x200002a4
 8003364:	2000016c 	.word	0x2000016c
 8003368:	080032d9 	.word	0x080032d9

0800336c <__sfp_lock_acquire>:
 800336c:	4801      	ldr	r0, [pc, #4]	@ (8003374 <__sfp_lock_acquire+0x8>)
 800336e:	f000 b90e 	b.w	800358e <__retarget_lock_acquire_recursive>
 8003372:	bf00      	nop
 8003374:	200002ad 	.word	0x200002ad

08003378 <__sfp_lock_release>:
 8003378:	4801      	ldr	r0, [pc, #4]	@ (8003380 <__sfp_lock_release+0x8>)
 800337a:	f000 b909 	b.w	8003590 <__retarget_lock_release_recursive>
 800337e:	bf00      	nop
 8003380:	200002ad 	.word	0x200002ad

08003384 <__sinit>:
 8003384:	b510      	push	{r4, lr}
 8003386:	4604      	mov	r4, r0
 8003388:	f7ff fff0 	bl	800336c <__sfp_lock_acquire>
 800338c:	6a23      	ldr	r3, [r4, #32]
 800338e:	b11b      	cbz	r3, 8003398 <__sinit+0x14>
 8003390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003394:	f7ff bff0 	b.w	8003378 <__sfp_lock_release>
 8003398:	4b04      	ldr	r3, [pc, #16]	@ (80033ac <__sinit+0x28>)
 800339a:	6223      	str	r3, [r4, #32]
 800339c:	4b04      	ldr	r3, [pc, #16]	@ (80033b0 <__sinit+0x2c>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d1f5      	bne.n	8003390 <__sinit+0xc>
 80033a4:	f7ff ffc4 	bl	8003330 <global_stdio_init.part.0>
 80033a8:	e7f2      	b.n	8003390 <__sinit+0xc>
 80033aa:	bf00      	nop
 80033ac:	080032f1 	.word	0x080032f1
 80033b0:	200002a4 	.word	0x200002a4

080033b4 <_fwalk_sglue>:
 80033b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033b8:	4607      	mov	r7, r0
 80033ba:	4688      	mov	r8, r1
 80033bc:	4614      	mov	r4, r2
 80033be:	2600      	movs	r6, #0
 80033c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80033c4:	f1b9 0901 	subs.w	r9, r9, #1
 80033c8:	d505      	bpl.n	80033d6 <_fwalk_sglue+0x22>
 80033ca:	6824      	ldr	r4, [r4, #0]
 80033cc:	2c00      	cmp	r4, #0
 80033ce:	d1f7      	bne.n	80033c0 <_fwalk_sglue+0xc>
 80033d0:	4630      	mov	r0, r6
 80033d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033d6:	89ab      	ldrh	r3, [r5, #12]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d907      	bls.n	80033ec <_fwalk_sglue+0x38>
 80033dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033e0:	3301      	adds	r3, #1
 80033e2:	d003      	beq.n	80033ec <_fwalk_sglue+0x38>
 80033e4:	4629      	mov	r1, r5
 80033e6:	4638      	mov	r0, r7
 80033e8:	47c0      	blx	r8
 80033ea:	4306      	orrs	r6, r0
 80033ec:	3568      	adds	r5, #104	@ 0x68
 80033ee:	e7e9      	b.n	80033c4 <_fwalk_sglue+0x10>

080033f0 <iprintf>:
 80033f0:	b40f      	push	{r0, r1, r2, r3}
 80033f2:	b507      	push	{r0, r1, r2, lr}
 80033f4:	4906      	ldr	r1, [pc, #24]	@ (8003410 <iprintf+0x20>)
 80033f6:	ab04      	add	r3, sp, #16
 80033f8:	6808      	ldr	r0, [r1, #0]
 80033fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80033fe:	6881      	ldr	r1, [r0, #8]
 8003400:	9301      	str	r3, [sp, #4]
 8003402:	f000 f9e9 	bl	80037d8 <_vfiprintf_r>
 8003406:	b003      	add	sp, #12
 8003408:	f85d eb04 	ldr.w	lr, [sp], #4
 800340c:	b004      	add	sp, #16
 800340e:	4770      	bx	lr
 8003410:	20000018 	.word	0x20000018

08003414 <__sread>:
 8003414:	b510      	push	{r4, lr}
 8003416:	460c      	mov	r4, r1
 8003418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800341c:	f000 f868 	bl	80034f0 <_read_r>
 8003420:	2800      	cmp	r0, #0
 8003422:	bfab      	itete	ge
 8003424:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003426:	89a3      	ldrhlt	r3, [r4, #12]
 8003428:	181b      	addge	r3, r3, r0
 800342a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800342e:	bfac      	ite	ge
 8003430:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003432:	81a3      	strhlt	r3, [r4, #12]
 8003434:	bd10      	pop	{r4, pc}

08003436 <__swrite>:
 8003436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343a:	461f      	mov	r7, r3
 800343c:	898b      	ldrh	r3, [r1, #12]
 800343e:	05db      	lsls	r3, r3, #23
 8003440:	4605      	mov	r5, r0
 8003442:	460c      	mov	r4, r1
 8003444:	4616      	mov	r6, r2
 8003446:	d505      	bpl.n	8003454 <__swrite+0x1e>
 8003448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800344c:	2302      	movs	r3, #2
 800344e:	2200      	movs	r2, #0
 8003450:	f000 f83c 	bl	80034cc <_lseek_r>
 8003454:	89a3      	ldrh	r3, [r4, #12]
 8003456:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800345a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800345e:	81a3      	strh	r3, [r4, #12]
 8003460:	4632      	mov	r2, r6
 8003462:	463b      	mov	r3, r7
 8003464:	4628      	mov	r0, r5
 8003466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800346a:	f000 b853 	b.w	8003514 <_write_r>

0800346e <__sseek>:
 800346e:	b510      	push	{r4, lr}
 8003470:	460c      	mov	r4, r1
 8003472:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003476:	f000 f829 	bl	80034cc <_lseek_r>
 800347a:	1c43      	adds	r3, r0, #1
 800347c:	89a3      	ldrh	r3, [r4, #12]
 800347e:	bf15      	itete	ne
 8003480:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003482:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003486:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800348a:	81a3      	strheq	r3, [r4, #12]
 800348c:	bf18      	it	ne
 800348e:	81a3      	strhne	r3, [r4, #12]
 8003490:	bd10      	pop	{r4, pc}

08003492 <__sclose>:
 8003492:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003496:	f000 b809 	b.w	80034ac <_close_r>

0800349a <memset>:
 800349a:	4402      	add	r2, r0
 800349c:	4603      	mov	r3, r0
 800349e:	4293      	cmp	r3, r2
 80034a0:	d100      	bne.n	80034a4 <memset+0xa>
 80034a2:	4770      	bx	lr
 80034a4:	f803 1b01 	strb.w	r1, [r3], #1
 80034a8:	e7f9      	b.n	800349e <memset+0x4>
	...

080034ac <_close_r>:
 80034ac:	b538      	push	{r3, r4, r5, lr}
 80034ae:	4d06      	ldr	r5, [pc, #24]	@ (80034c8 <_close_r+0x1c>)
 80034b0:	2300      	movs	r3, #0
 80034b2:	4604      	mov	r4, r0
 80034b4:	4608      	mov	r0, r1
 80034b6:	602b      	str	r3, [r5, #0]
 80034b8:	f7fd fc6b 	bl	8000d92 <_close>
 80034bc:	1c43      	adds	r3, r0, #1
 80034be:	d102      	bne.n	80034c6 <_close_r+0x1a>
 80034c0:	682b      	ldr	r3, [r5, #0]
 80034c2:	b103      	cbz	r3, 80034c6 <_close_r+0x1a>
 80034c4:	6023      	str	r3, [r4, #0]
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
 80034c8:	200002a8 	.word	0x200002a8

080034cc <_lseek_r>:
 80034cc:	b538      	push	{r3, r4, r5, lr}
 80034ce:	4d07      	ldr	r5, [pc, #28]	@ (80034ec <_lseek_r+0x20>)
 80034d0:	4604      	mov	r4, r0
 80034d2:	4608      	mov	r0, r1
 80034d4:	4611      	mov	r1, r2
 80034d6:	2200      	movs	r2, #0
 80034d8:	602a      	str	r2, [r5, #0]
 80034da:	461a      	mov	r2, r3
 80034dc:	f7fd fc80 	bl	8000de0 <_lseek>
 80034e0:	1c43      	adds	r3, r0, #1
 80034e2:	d102      	bne.n	80034ea <_lseek_r+0x1e>
 80034e4:	682b      	ldr	r3, [r5, #0]
 80034e6:	b103      	cbz	r3, 80034ea <_lseek_r+0x1e>
 80034e8:	6023      	str	r3, [r4, #0]
 80034ea:	bd38      	pop	{r3, r4, r5, pc}
 80034ec:	200002a8 	.word	0x200002a8

080034f0 <_read_r>:
 80034f0:	b538      	push	{r3, r4, r5, lr}
 80034f2:	4d07      	ldr	r5, [pc, #28]	@ (8003510 <_read_r+0x20>)
 80034f4:	4604      	mov	r4, r0
 80034f6:	4608      	mov	r0, r1
 80034f8:	4611      	mov	r1, r2
 80034fa:	2200      	movs	r2, #0
 80034fc:	602a      	str	r2, [r5, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	f7fd fc0e 	bl	8000d20 <_read>
 8003504:	1c43      	adds	r3, r0, #1
 8003506:	d102      	bne.n	800350e <_read_r+0x1e>
 8003508:	682b      	ldr	r3, [r5, #0]
 800350a:	b103      	cbz	r3, 800350e <_read_r+0x1e>
 800350c:	6023      	str	r3, [r4, #0]
 800350e:	bd38      	pop	{r3, r4, r5, pc}
 8003510:	200002a8 	.word	0x200002a8

08003514 <_write_r>:
 8003514:	b538      	push	{r3, r4, r5, lr}
 8003516:	4d07      	ldr	r5, [pc, #28]	@ (8003534 <_write_r+0x20>)
 8003518:	4604      	mov	r4, r0
 800351a:	4608      	mov	r0, r1
 800351c:	4611      	mov	r1, r2
 800351e:	2200      	movs	r2, #0
 8003520:	602a      	str	r2, [r5, #0]
 8003522:	461a      	mov	r2, r3
 8003524:	f7fd fc19 	bl	8000d5a <_write>
 8003528:	1c43      	adds	r3, r0, #1
 800352a:	d102      	bne.n	8003532 <_write_r+0x1e>
 800352c:	682b      	ldr	r3, [r5, #0]
 800352e:	b103      	cbz	r3, 8003532 <_write_r+0x1e>
 8003530:	6023      	str	r3, [r4, #0]
 8003532:	bd38      	pop	{r3, r4, r5, pc}
 8003534:	200002a8 	.word	0x200002a8

08003538 <__errno>:
 8003538:	4b01      	ldr	r3, [pc, #4]	@ (8003540 <__errno+0x8>)
 800353a:	6818      	ldr	r0, [r3, #0]
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	20000018 	.word	0x20000018

08003544 <__libc_init_array>:
 8003544:	b570      	push	{r4, r5, r6, lr}
 8003546:	4d0d      	ldr	r5, [pc, #52]	@ (800357c <__libc_init_array+0x38>)
 8003548:	4c0d      	ldr	r4, [pc, #52]	@ (8003580 <__libc_init_array+0x3c>)
 800354a:	1b64      	subs	r4, r4, r5
 800354c:	10a4      	asrs	r4, r4, #2
 800354e:	2600      	movs	r6, #0
 8003550:	42a6      	cmp	r6, r4
 8003552:	d109      	bne.n	8003568 <__libc_init_array+0x24>
 8003554:	4d0b      	ldr	r5, [pc, #44]	@ (8003584 <__libc_init_array+0x40>)
 8003556:	4c0c      	ldr	r4, [pc, #48]	@ (8003588 <__libc_init_array+0x44>)
 8003558:	f000 fdb8 	bl	80040cc <_init>
 800355c:	1b64      	subs	r4, r4, r5
 800355e:	10a4      	asrs	r4, r4, #2
 8003560:	2600      	movs	r6, #0
 8003562:	42a6      	cmp	r6, r4
 8003564:	d105      	bne.n	8003572 <__libc_init_array+0x2e>
 8003566:	bd70      	pop	{r4, r5, r6, pc}
 8003568:	f855 3b04 	ldr.w	r3, [r5], #4
 800356c:	4798      	blx	r3
 800356e:	3601      	adds	r6, #1
 8003570:	e7ee      	b.n	8003550 <__libc_init_array+0xc>
 8003572:	f855 3b04 	ldr.w	r3, [r5], #4
 8003576:	4798      	blx	r3
 8003578:	3601      	adds	r6, #1
 800357a:	e7f2      	b.n	8003562 <__libc_init_array+0x1e>
 800357c:	08004140 	.word	0x08004140
 8003580:	08004140 	.word	0x08004140
 8003584:	08004140 	.word	0x08004140
 8003588:	08004144 	.word	0x08004144

0800358c <__retarget_lock_init_recursive>:
 800358c:	4770      	bx	lr

0800358e <__retarget_lock_acquire_recursive>:
 800358e:	4770      	bx	lr

08003590 <__retarget_lock_release_recursive>:
 8003590:	4770      	bx	lr
	...

08003594 <_free_r>:
 8003594:	b538      	push	{r3, r4, r5, lr}
 8003596:	4605      	mov	r5, r0
 8003598:	2900      	cmp	r1, #0
 800359a:	d041      	beq.n	8003620 <_free_r+0x8c>
 800359c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80035a0:	1f0c      	subs	r4, r1, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	bfb8      	it	lt
 80035a6:	18e4      	addlt	r4, r4, r3
 80035a8:	f000 f8e0 	bl	800376c <__malloc_lock>
 80035ac:	4a1d      	ldr	r2, [pc, #116]	@ (8003624 <_free_r+0x90>)
 80035ae:	6813      	ldr	r3, [r2, #0]
 80035b0:	b933      	cbnz	r3, 80035c0 <_free_r+0x2c>
 80035b2:	6063      	str	r3, [r4, #4]
 80035b4:	6014      	str	r4, [r2, #0]
 80035b6:	4628      	mov	r0, r5
 80035b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80035bc:	f000 b8dc 	b.w	8003778 <__malloc_unlock>
 80035c0:	42a3      	cmp	r3, r4
 80035c2:	d908      	bls.n	80035d6 <_free_r+0x42>
 80035c4:	6820      	ldr	r0, [r4, #0]
 80035c6:	1821      	adds	r1, r4, r0
 80035c8:	428b      	cmp	r3, r1
 80035ca:	bf01      	itttt	eq
 80035cc:	6819      	ldreq	r1, [r3, #0]
 80035ce:	685b      	ldreq	r3, [r3, #4]
 80035d0:	1809      	addeq	r1, r1, r0
 80035d2:	6021      	streq	r1, [r4, #0]
 80035d4:	e7ed      	b.n	80035b2 <_free_r+0x1e>
 80035d6:	461a      	mov	r2, r3
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	b10b      	cbz	r3, 80035e0 <_free_r+0x4c>
 80035dc:	42a3      	cmp	r3, r4
 80035de:	d9fa      	bls.n	80035d6 <_free_r+0x42>
 80035e0:	6811      	ldr	r1, [r2, #0]
 80035e2:	1850      	adds	r0, r2, r1
 80035e4:	42a0      	cmp	r0, r4
 80035e6:	d10b      	bne.n	8003600 <_free_r+0x6c>
 80035e8:	6820      	ldr	r0, [r4, #0]
 80035ea:	4401      	add	r1, r0
 80035ec:	1850      	adds	r0, r2, r1
 80035ee:	4283      	cmp	r3, r0
 80035f0:	6011      	str	r1, [r2, #0]
 80035f2:	d1e0      	bne.n	80035b6 <_free_r+0x22>
 80035f4:	6818      	ldr	r0, [r3, #0]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	6053      	str	r3, [r2, #4]
 80035fa:	4408      	add	r0, r1
 80035fc:	6010      	str	r0, [r2, #0]
 80035fe:	e7da      	b.n	80035b6 <_free_r+0x22>
 8003600:	d902      	bls.n	8003608 <_free_r+0x74>
 8003602:	230c      	movs	r3, #12
 8003604:	602b      	str	r3, [r5, #0]
 8003606:	e7d6      	b.n	80035b6 <_free_r+0x22>
 8003608:	6820      	ldr	r0, [r4, #0]
 800360a:	1821      	adds	r1, r4, r0
 800360c:	428b      	cmp	r3, r1
 800360e:	bf04      	itt	eq
 8003610:	6819      	ldreq	r1, [r3, #0]
 8003612:	685b      	ldreq	r3, [r3, #4]
 8003614:	6063      	str	r3, [r4, #4]
 8003616:	bf04      	itt	eq
 8003618:	1809      	addeq	r1, r1, r0
 800361a:	6021      	streq	r1, [r4, #0]
 800361c:	6054      	str	r4, [r2, #4]
 800361e:	e7ca      	b.n	80035b6 <_free_r+0x22>
 8003620:	bd38      	pop	{r3, r4, r5, pc}
 8003622:	bf00      	nop
 8003624:	200002b4 	.word	0x200002b4

08003628 <sbrk_aligned>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	4e0f      	ldr	r6, [pc, #60]	@ (8003668 <sbrk_aligned+0x40>)
 800362c:	460c      	mov	r4, r1
 800362e:	6831      	ldr	r1, [r6, #0]
 8003630:	4605      	mov	r5, r0
 8003632:	b911      	cbnz	r1, 800363a <sbrk_aligned+0x12>
 8003634:	f000 fcb6 	bl	8003fa4 <_sbrk_r>
 8003638:	6030      	str	r0, [r6, #0]
 800363a:	4621      	mov	r1, r4
 800363c:	4628      	mov	r0, r5
 800363e:	f000 fcb1 	bl	8003fa4 <_sbrk_r>
 8003642:	1c43      	adds	r3, r0, #1
 8003644:	d103      	bne.n	800364e <sbrk_aligned+0x26>
 8003646:	f04f 34ff 	mov.w	r4, #4294967295
 800364a:	4620      	mov	r0, r4
 800364c:	bd70      	pop	{r4, r5, r6, pc}
 800364e:	1cc4      	adds	r4, r0, #3
 8003650:	f024 0403 	bic.w	r4, r4, #3
 8003654:	42a0      	cmp	r0, r4
 8003656:	d0f8      	beq.n	800364a <sbrk_aligned+0x22>
 8003658:	1a21      	subs	r1, r4, r0
 800365a:	4628      	mov	r0, r5
 800365c:	f000 fca2 	bl	8003fa4 <_sbrk_r>
 8003660:	3001      	adds	r0, #1
 8003662:	d1f2      	bne.n	800364a <sbrk_aligned+0x22>
 8003664:	e7ef      	b.n	8003646 <sbrk_aligned+0x1e>
 8003666:	bf00      	nop
 8003668:	200002b0 	.word	0x200002b0

0800366c <_malloc_r>:
 800366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003670:	1ccd      	adds	r5, r1, #3
 8003672:	f025 0503 	bic.w	r5, r5, #3
 8003676:	3508      	adds	r5, #8
 8003678:	2d0c      	cmp	r5, #12
 800367a:	bf38      	it	cc
 800367c:	250c      	movcc	r5, #12
 800367e:	2d00      	cmp	r5, #0
 8003680:	4606      	mov	r6, r0
 8003682:	db01      	blt.n	8003688 <_malloc_r+0x1c>
 8003684:	42a9      	cmp	r1, r5
 8003686:	d904      	bls.n	8003692 <_malloc_r+0x26>
 8003688:	230c      	movs	r3, #12
 800368a:	6033      	str	r3, [r6, #0]
 800368c:	2000      	movs	r0, #0
 800368e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003692:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003768 <_malloc_r+0xfc>
 8003696:	f000 f869 	bl	800376c <__malloc_lock>
 800369a:	f8d8 3000 	ldr.w	r3, [r8]
 800369e:	461c      	mov	r4, r3
 80036a0:	bb44      	cbnz	r4, 80036f4 <_malloc_r+0x88>
 80036a2:	4629      	mov	r1, r5
 80036a4:	4630      	mov	r0, r6
 80036a6:	f7ff ffbf 	bl	8003628 <sbrk_aligned>
 80036aa:	1c43      	adds	r3, r0, #1
 80036ac:	4604      	mov	r4, r0
 80036ae:	d158      	bne.n	8003762 <_malloc_r+0xf6>
 80036b0:	f8d8 4000 	ldr.w	r4, [r8]
 80036b4:	4627      	mov	r7, r4
 80036b6:	2f00      	cmp	r7, #0
 80036b8:	d143      	bne.n	8003742 <_malloc_r+0xd6>
 80036ba:	2c00      	cmp	r4, #0
 80036bc:	d04b      	beq.n	8003756 <_malloc_r+0xea>
 80036be:	6823      	ldr	r3, [r4, #0]
 80036c0:	4639      	mov	r1, r7
 80036c2:	4630      	mov	r0, r6
 80036c4:	eb04 0903 	add.w	r9, r4, r3
 80036c8:	f000 fc6c 	bl	8003fa4 <_sbrk_r>
 80036cc:	4581      	cmp	r9, r0
 80036ce:	d142      	bne.n	8003756 <_malloc_r+0xea>
 80036d0:	6821      	ldr	r1, [r4, #0]
 80036d2:	1a6d      	subs	r5, r5, r1
 80036d4:	4629      	mov	r1, r5
 80036d6:	4630      	mov	r0, r6
 80036d8:	f7ff ffa6 	bl	8003628 <sbrk_aligned>
 80036dc:	3001      	adds	r0, #1
 80036de:	d03a      	beq.n	8003756 <_malloc_r+0xea>
 80036e0:	6823      	ldr	r3, [r4, #0]
 80036e2:	442b      	add	r3, r5
 80036e4:	6023      	str	r3, [r4, #0]
 80036e6:	f8d8 3000 	ldr.w	r3, [r8]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	bb62      	cbnz	r2, 8003748 <_malloc_r+0xdc>
 80036ee:	f8c8 7000 	str.w	r7, [r8]
 80036f2:	e00f      	b.n	8003714 <_malloc_r+0xa8>
 80036f4:	6822      	ldr	r2, [r4, #0]
 80036f6:	1b52      	subs	r2, r2, r5
 80036f8:	d420      	bmi.n	800373c <_malloc_r+0xd0>
 80036fa:	2a0b      	cmp	r2, #11
 80036fc:	d917      	bls.n	800372e <_malloc_r+0xc2>
 80036fe:	1961      	adds	r1, r4, r5
 8003700:	42a3      	cmp	r3, r4
 8003702:	6025      	str	r5, [r4, #0]
 8003704:	bf18      	it	ne
 8003706:	6059      	strne	r1, [r3, #4]
 8003708:	6863      	ldr	r3, [r4, #4]
 800370a:	bf08      	it	eq
 800370c:	f8c8 1000 	streq.w	r1, [r8]
 8003710:	5162      	str	r2, [r4, r5]
 8003712:	604b      	str	r3, [r1, #4]
 8003714:	4630      	mov	r0, r6
 8003716:	f000 f82f 	bl	8003778 <__malloc_unlock>
 800371a:	f104 000b 	add.w	r0, r4, #11
 800371e:	1d23      	adds	r3, r4, #4
 8003720:	f020 0007 	bic.w	r0, r0, #7
 8003724:	1ac2      	subs	r2, r0, r3
 8003726:	bf1c      	itt	ne
 8003728:	1a1b      	subne	r3, r3, r0
 800372a:	50a3      	strne	r3, [r4, r2]
 800372c:	e7af      	b.n	800368e <_malloc_r+0x22>
 800372e:	6862      	ldr	r2, [r4, #4]
 8003730:	42a3      	cmp	r3, r4
 8003732:	bf0c      	ite	eq
 8003734:	f8c8 2000 	streq.w	r2, [r8]
 8003738:	605a      	strne	r2, [r3, #4]
 800373a:	e7eb      	b.n	8003714 <_malloc_r+0xa8>
 800373c:	4623      	mov	r3, r4
 800373e:	6864      	ldr	r4, [r4, #4]
 8003740:	e7ae      	b.n	80036a0 <_malloc_r+0x34>
 8003742:	463c      	mov	r4, r7
 8003744:	687f      	ldr	r7, [r7, #4]
 8003746:	e7b6      	b.n	80036b6 <_malloc_r+0x4a>
 8003748:	461a      	mov	r2, r3
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	42a3      	cmp	r3, r4
 800374e:	d1fb      	bne.n	8003748 <_malloc_r+0xdc>
 8003750:	2300      	movs	r3, #0
 8003752:	6053      	str	r3, [r2, #4]
 8003754:	e7de      	b.n	8003714 <_malloc_r+0xa8>
 8003756:	230c      	movs	r3, #12
 8003758:	6033      	str	r3, [r6, #0]
 800375a:	4630      	mov	r0, r6
 800375c:	f000 f80c 	bl	8003778 <__malloc_unlock>
 8003760:	e794      	b.n	800368c <_malloc_r+0x20>
 8003762:	6005      	str	r5, [r0, #0]
 8003764:	e7d6      	b.n	8003714 <_malloc_r+0xa8>
 8003766:	bf00      	nop
 8003768:	200002b4 	.word	0x200002b4

0800376c <__malloc_lock>:
 800376c:	4801      	ldr	r0, [pc, #4]	@ (8003774 <__malloc_lock+0x8>)
 800376e:	f7ff bf0e 	b.w	800358e <__retarget_lock_acquire_recursive>
 8003772:	bf00      	nop
 8003774:	200002ac 	.word	0x200002ac

08003778 <__malloc_unlock>:
 8003778:	4801      	ldr	r0, [pc, #4]	@ (8003780 <__malloc_unlock+0x8>)
 800377a:	f7ff bf09 	b.w	8003590 <__retarget_lock_release_recursive>
 800377e:	bf00      	nop
 8003780:	200002ac 	.word	0x200002ac

08003784 <__sfputc_r>:
 8003784:	6893      	ldr	r3, [r2, #8]
 8003786:	3b01      	subs	r3, #1
 8003788:	2b00      	cmp	r3, #0
 800378a:	b410      	push	{r4}
 800378c:	6093      	str	r3, [r2, #8]
 800378e:	da08      	bge.n	80037a2 <__sfputc_r+0x1e>
 8003790:	6994      	ldr	r4, [r2, #24]
 8003792:	42a3      	cmp	r3, r4
 8003794:	db01      	blt.n	800379a <__sfputc_r+0x16>
 8003796:	290a      	cmp	r1, #10
 8003798:	d103      	bne.n	80037a2 <__sfputc_r+0x1e>
 800379a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800379e:	f000 bb6d 	b.w	8003e7c <__swbuf_r>
 80037a2:	6813      	ldr	r3, [r2, #0]
 80037a4:	1c58      	adds	r0, r3, #1
 80037a6:	6010      	str	r0, [r2, #0]
 80037a8:	7019      	strb	r1, [r3, #0]
 80037aa:	4608      	mov	r0, r1
 80037ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <__sfputs_r>:
 80037b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b4:	4606      	mov	r6, r0
 80037b6:	460f      	mov	r7, r1
 80037b8:	4614      	mov	r4, r2
 80037ba:	18d5      	adds	r5, r2, r3
 80037bc:	42ac      	cmp	r4, r5
 80037be:	d101      	bne.n	80037c4 <__sfputs_r+0x12>
 80037c0:	2000      	movs	r0, #0
 80037c2:	e007      	b.n	80037d4 <__sfputs_r+0x22>
 80037c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037c8:	463a      	mov	r2, r7
 80037ca:	4630      	mov	r0, r6
 80037cc:	f7ff ffda 	bl	8003784 <__sfputc_r>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d1f3      	bne.n	80037bc <__sfputs_r+0xa>
 80037d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080037d8 <_vfiprintf_r>:
 80037d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037dc:	460d      	mov	r5, r1
 80037de:	b09d      	sub	sp, #116	@ 0x74
 80037e0:	4614      	mov	r4, r2
 80037e2:	4698      	mov	r8, r3
 80037e4:	4606      	mov	r6, r0
 80037e6:	b118      	cbz	r0, 80037f0 <_vfiprintf_r+0x18>
 80037e8:	6a03      	ldr	r3, [r0, #32]
 80037ea:	b90b      	cbnz	r3, 80037f0 <_vfiprintf_r+0x18>
 80037ec:	f7ff fdca 	bl	8003384 <__sinit>
 80037f0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80037f2:	07d9      	lsls	r1, r3, #31
 80037f4:	d405      	bmi.n	8003802 <_vfiprintf_r+0x2a>
 80037f6:	89ab      	ldrh	r3, [r5, #12]
 80037f8:	059a      	lsls	r2, r3, #22
 80037fa:	d402      	bmi.n	8003802 <_vfiprintf_r+0x2a>
 80037fc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80037fe:	f7ff fec6 	bl	800358e <__retarget_lock_acquire_recursive>
 8003802:	89ab      	ldrh	r3, [r5, #12]
 8003804:	071b      	lsls	r3, r3, #28
 8003806:	d501      	bpl.n	800380c <_vfiprintf_r+0x34>
 8003808:	692b      	ldr	r3, [r5, #16]
 800380a:	b99b      	cbnz	r3, 8003834 <_vfiprintf_r+0x5c>
 800380c:	4629      	mov	r1, r5
 800380e:	4630      	mov	r0, r6
 8003810:	f000 fb72 	bl	8003ef8 <__swsetup_r>
 8003814:	b170      	cbz	r0, 8003834 <_vfiprintf_r+0x5c>
 8003816:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003818:	07dc      	lsls	r4, r3, #31
 800381a:	d504      	bpl.n	8003826 <_vfiprintf_r+0x4e>
 800381c:	f04f 30ff 	mov.w	r0, #4294967295
 8003820:	b01d      	add	sp, #116	@ 0x74
 8003822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003826:	89ab      	ldrh	r3, [r5, #12]
 8003828:	0598      	lsls	r0, r3, #22
 800382a:	d4f7      	bmi.n	800381c <_vfiprintf_r+0x44>
 800382c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800382e:	f7ff feaf 	bl	8003590 <__retarget_lock_release_recursive>
 8003832:	e7f3      	b.n	800381c <_vfiprintf_r+0x44>
 8003834:	2300      	movs	r3, #0
 8003836:	9309      	str	r3, [sp, #36]	@ 0x24
 8003838:	2320      	movs	r3, #32
 800383a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800383e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003842:	2330      	movs	r3, #48	@ 0x30
 8003844:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80039f4 <_vfiprintf_r+0x21c>
 8003848:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800384c:	f04f 0901 	mov.w	r9, #1
 8003850:	4623      	mov	r3, r4
 8003852:	469a      	mov	sl, r3
 8003854:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003858:	b10a      	cbz	r2, 800385e <_vfiprintf_r+0x86>
 800385a:	2a25      	cmp	r2, #37	@ 0x25
 800385c:	d1f9      	bne.n	8003852 <_vfiprintf_r+0x7a>
 800385e:	ebba 0b04 	subs.w	fp, sl, r4
 8003862:	d00b      	beq.n	800387c <_vfiprintf_r+0xa4>
 8003864:	465b      	mov	r3, fp
 8003866:	4622      	mov	r2, r4
 8003868:	4629      	mov	r1, r5
 800386a:	4630      	mov	r0, r6
 800386c:	f7ff ffa1 	bl	80037b2 <__sfputs_r>
 8003870:	3001      	adds	r0, #1
 8003872:	f000 80a7 	beq.w	80039c4 <_vfiprintf_r+0x1ec>
 8003876:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003878:	445a      	add	r2, fp
 800387a:	9209      	str	r2, [sp, #36]	@ 0x24
 800387c:	f89a 3000 	ldrb.w	r3, [sl]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 809f 	beq.w	80039c4 <_vfiprintf_r+0x1ec>
 8003886:	2300      	movs	r3, #0
 8003888:	f04f 32ff 	mov.w	r2, #4294967295
 800388c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003890:	f10a 0a01 	add.w	sl, sl, #1
 8003894:	9304      	str	r3, [sp, #16]
 8003896:	9307      	str	r3, [sp, #28]
 8003898:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800389c:	931a      	str	r3, [sp, #104]	@ 0x68
 800389e:	4654      	mov	r4, sl
 80038a0:	2205      	movs	r2, #5
 80038a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038a6:	4853      	ldr	r0, [pc, #332]	@ (80039f4 <_vfiprintf_r+0x21c>)
 80038a8:	f7fc fcb2 	bl	8000210 <memchr>
 80038ac:	9a04      	ldr	r2, [sp, #16]
 80038ae:	b9d8      	cbnz	r0, 80038e8 <_vfiprintf_r+0x110>
 80038b0:	06d1      	lsls	r1, r2, #27
 80038b2:	bf44      	itt	mi
 80038b4:	2320      	movmi	r3, #32
 80038b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038ba:	0713      	lsls	r3, r2, #28
 80038bc:	bf44      	itt	mi
 80038be:	232b      	movmi	r3, #43	@ 0x2b
 80038c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80038c4:	f89a 3000 	ldrb.w	r3, [sl]
 80038c8:	2b2a      	cmp	r3, #42	@ 0x2a
 80038ca:	d015      	beq.n	80038f8 <_vfiprintf_r+0x120>
 80038cc:	9a07      	ldr	r2, [sp, #28]
 80038ce:	4654      	mov	r4, sl
 80038d0:	2000      	movs	r0, #0
 80038d2:	f04f 0c0a 	mov.w	ip, #10
 80038d6:	4621      	mov	r1, r4
 80038d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80038dc:	3b30      	subs	r3, #48	@ 0x30
 80038de:	2b09      	cmp	r3, #9
 80038e0:	d94b      	bls.n	800397a <_vfiprintf_r+0x1a2>
 80038e2:	b1b0      	cbz	r0, 8003912 <_vfiprintf_r+0x13a>
 80038e4:	9207      	str	r2, [sp, #28]
 80038e6:	e014      	b.n	8003912 <_vfiprintf_r+0x13a>
 80038e8:	eba0 0308 	sub.w	r3, r0, r8
 80038ec:	fa09 f303 	lsl.w	r3, r9, r3
 80038f0:	4313      	orrs	r3, r2
 80038f2:	9304      	str	r3, [sp, #16]
 80038f4:	46a2      	mov	sl, r4
 80038f6:	e7d2      	b.n	800389e <_vfiprintf_r+0xc6>
 80038f8:	9b03      	ldr	r3, [sp, #12]
 80038fa:	1d19      	adds	r1, r3, #4
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	9103      	str	r1, [sp, #12]
 8003900:	2b00      	cmp	r3, #0
 8003902:	bfbb      	ittet	lt
 8003904:	425b      	neglt	r3, r3
 8003906:	f042 0202 	orrlt.w	r2, r2, #2
 800390a:	9307      	strge	r3, [sp, #28]
 800390c:	9307      	strlt	r3, [sp, #28]
 800390e:	bfb8      	it	lt
 8003910:	9204      	strlt	r2, [sp, #16]
 8003912:	7823      	ldrb	r3, [r4, #0]
 8003914:	2b2e      	cmp	r3, #46	@ 0x2e
 8003916:	d10a      	bne.n	800392e <_vfiprintf_r+0x156>
 8003918:	7863      	ldrb	r3, [r4, #1]
 800391a:	2b2a      	cmp	r3, #42	@ 0x2a
 800391c:	d132      	bne.n	8003984 <_vfiprintf_r+0x1ac>
 800391e:	9b03      	ldr	r3, [sp, #12]
 8003920:	1d1a      	adds	r2, r3, #4
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	9203      	str	r2, [sp, #12]
 8003926:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800392a:	3402      	adds	r4, #2
 800392c:	9305      	str	r3, [sp, #20]
 800392e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8003a04 <_vfiprintf_r+0x22c>
 8003932:	7821      	ldrb	r1, [r4, #0]
 8003934:	2203      	movs	r2, #3
 8003936:	4650      	mov	r0, sl
 8003938:	f7fc fc6a 	bl	8000210 <memchr>
 800393c:	b138      	cbz	r0, 800394e <_vfiprintf_r+0x176>
 800393e:	9b04      	ldr	r3, [sp, #16]
 8003940:	eba0 000a 	sub.w	r0, r0, sl
 8003944:	2240      	movs	r2, #64	@ 0x40
 8003946:	4082      	lsls	r2, r0
 8003948:	4313      	orrs	r3, r2
 800394a:	3401      	adds	r4, #1
 800394c:	9304      	str	r3, [sp, #16]
 800394e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003952:	4829      	ldr	r0, [pc, #164]	@ (80039f8 <_vfiprintf_r+0x220>)
 8003954:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003958:	2206      	movs	r2, #6
 800395a:	f7fc fc59 	bl	8000210 <memchr>
 800395e:	2800      	cmp	r0, #0
 8003960:	d03f      	beq.n	80039e2 <_vfiprintf_r+0x20a>
 8003962:	4b26      	ldr	r3, [pc, #152]	@ (80039fc <_vfiprintf_r+0x224>)
 8003964:	bb1b      	cbnz	r3, 80039ae <_vfiprintf_r+0x1d6>
 8003966:	9b03      	ldr	r3, [sp, #12]
 8003968:	3307      	adds	r3, #7
 800396a:	f023 0307 	bic.w	r3, r3, #7
 800396e:	3308      	adds	r3, #8
 8003970:	9303      	str	r3, [sp, #12]
 8003972:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003974:	443b      	add	r3, r7
 8003976:	9309      	str	r3, [sp, #36]	@ 0x24
 8003978:	e76a      	b.n	8003850 <_vfiprintf_r+0x78>
 800397a:	fb0c 3202 	mla	r2, ip, r2, r3
 800397e:	460c      	mov	r4, r1
 8003980:	2001      	movs	r0, #1
 8003982:	e7a8      	b.n	80038d6 <_vfiprintf_r+0xfe>
 8003984:	2300      	movs	r3, #0
 8003986:	3401      	adds	r4, #1
 8003988:	9305      	str	r3, [sp, #20]
 800398a:	4619      	mov	r1, r3
 800398c:	f04f 0c0a 	mov.w	ip, #10
 8003990:	4620      	mov	r0, r4
 8003992:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003996:	3a30      	subs	r2, #48	@ 0x30
 8003998:	2a09      	cmp	r2, #9
 800399a:	d903      	bls.n	80039a4 <_vfiprintf_r+0x1cc>
 800399c:	2b00      	cmp	r3, #0
 800399e:	d0c6      	beq.n	800392e <_vfiprintf_r+0x156>
 80039a0:	9105      	str	r1, [sp, #20]
 80039a2:	e7c4      	b.n	800392e <_vfiprintf_r+0x156>
 80039a4:	fb0c 2101 	mla	r1, ip, r1, r2
 80039a8:	4604      	mov	r4, r0
 80039aa:	2301      	movs	r3, #1
 80039ac:	e7f0      	b.n	8003990 <_vfiprintf_r+0x1b8>
 80039ae:	ab03      	add	r3, sp, #12
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	462a      	mov	r2, r5
 80039b4:	4b12      	ldr	r3, [pc, #72]	@ (8003a00 <_vfiprintf_r+0x228>)
 80039b6:	a904      	add	r1, sp, #16
 80039b8:	4630      	mov	r0, r6
 80039ba:	f3af 8000 	nop.w
 80039be:	4607      	mov	r7, r0
 80039c0:	1c78      	adds	r0, r7, #1
 80039c2:	d1d6      	bne.n	8003972 <_vfiprintf_r+0x19a>
 80039c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80039c6:	07d9      	lsls	r1, r3, #31
 80039c8:	d405      	bmi.n	80039d6 <_vfiprintf_r+0x1fe>
 80039ca:	89ab      	ldrh	r3, [r5, #12]
 80039cc:	059a      	lsls	r2, r3, #22
 80039ce:	d402      	bmi.n	80039d6 <_vfiprintf_r+0x1fe>
 80039d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80039d2:	f7ff fddd 	bl	8003590 <__retarget_lock_release_recursive>
 80039d6:	89ab      	ldrh	r3, [r5, #12]
 80039d8:	065b      	lsls	r3, r3, #25
 80039da:	f53f af1f 	bmi.w	800381c <_vfiprintf_r+0x44>
 80039de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80039e0:	e71e      	b.n	8003820 <_vfiprintf_r+0x48>
 80039e2:	ab03      	add	r3, sp, #12
 80039e4:	9300      	str	r3, [sp, #0]
 80039e6:	462a      	mov	r2, r5
 80039e8:	4b05      	ldr	r3, [pc, #20]	@ (8003a00 <_vfiprintf_r+0x228>)
 80039ea:	a904      	add	r1, sp, #16
 80039ec:	4630      	mov	r0, r6
 80039ee:	f000 f879 	bl	8003ae4 <_printf_i>
 80039f2:	e7e4      	b.n	80039be <_vfiprintf_r+0x1e6>
 80039f4:	08004104 	.word	0x08004104
 80039f8:	0800410e 	.word	0x0800410e
 80039fc:	00000000 	.word	0x00000000
 8003a00:	080037b3 	.word	0x080037b3
 8003a04:	0800410a 	.word	0x0800410a

08003a08 <_printf_common>:
 8003a08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a0c:	4616      	mov	r6, r2
 8003a0e:	4698      	mov	r8, r3
 8003a10:	688a      	ldr	r2, [r1, #8]
 8003a12:	690b      	ldr	r3, [r1, #16]
 8003a14:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	bfb8      	it	lt
 8003a1c:	4613      	movlt	r3, r2
 8003a1e:	6033      	str	r3, [r6, #0]
 8003a20:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003a24:	4607      	mov	r7, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	b10a      	cbz	r2, 8003a2e <_printf_common+0x26>
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	6033      	str	r3, [r6, #0]
 8003a2e:	6823      	ldr	r3, [r4, #0]
 8003a30:	0699      	lsls	r1, r3, #26
 8003a32:	bf42      	ittt	mi
 8003a34:	6833      	ldrmi	r3, [r6, #0]
 8003a36:	3302      	addmi	r3, #2
 8003a38:	6033      	strmi	r3, [r6, #0]
 8003a3a:	6825      	ldr	r5, [r4, #0]
 8003a3c:	f015 0506 	ands.w	r5, r5, #6
 8003a40:	d106      	bne.n	8003a50 <_printf_common+0x48>
 8003a42:	f104 0a19 	add.w	sl, r4, #25
 8003a46:	68e3      	ldr	r3, [r4, #12]
 8003a48:	6832      	ldr	r2, [r6, #0]
 8003a4a:	1a9b      	subs	r3, r3, r2
 8003a4c:	42ab      	cmp	r3, r5
 8003a4e:	dc26      	bgt.n	8003a9e <_printf_common+0x96>
 8003a50:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003a54:	6822      	ldr	r2, [r4, #0]
 8003a56:	3b00      	subs	r3, #0
 8003a58:	bf18      	it	ne
 8003a5a:	2301      	movne	r3, #1
 8003a5c:	0692      	lsls	r2, r2, #26
 8003a5e:	d42b      	bmi.n	8003ab8 <_printf_common+0xb0>
 8003a60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003a64:	4641      	mov	r1, r8
 8003a66:	4638      	mov	r0, r7
 8003a68:	47c8      	blx	r9
 8003a6a:	3001      	adds	r0, #1
 8003a6c:	d01e      	beq.n	8003aac <_printf_common+0xa4>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	6922      	ldr	r2, [r4, #16]
 8003a72:	f003 0306 	and.w	r3, r3, #6
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	bf02      	ittt	eq
 8003a7a:	68e5      	ldreq	r5, [r4, #12]
 8003a7c:	6833      	ldreq	r3, [r6, #0]
 8003a7e:	1aed      	subeq	r5, r5, r3
 8003a80:	68a3      	ldr	r3, [r4, #8]
 8003a82:	bf0c      	ite	eq
 8003a84:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003a88:	2500      	movne	r5, #0
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	bfc4      	itt	gt
 8003a8e:	1a9b      	subgt	r3, r3, r2
 8003a90:	18ed      	addgt	r5, r5, r3
 8003a92:	2600      	movs	r6, #0
 8003a94:	341a      	adds	r4, #26
 8003a96:	42b5      	cmp	r5, r6
 8003a98:	d11a      	bne.n	8003ad0 <_printf_common+0xc8>
 8003a9a:	2000      	movs	r0, #0
 8003a9c:	e008      	b.n	8003ab0 <_printf_common+0xa8>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	4652      	mov	r2, sl
 8003aa2:	4641      	mov	r1, r8
 8003aa4:	4638      	mov	r0, r7
 8003aa6:	47c8      	blx	r9
 8003aa8:	3001      	adds	r0, #1
 8003aaa:	d103      	bne.n	8003ab4 <_printf_common+0xac>
 8003aac:	f04f 30ff 	mov.w	r0, #4294967295
 8003ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ab4:	3501      	adds	r5, #1
 8003ab6:	e7c6      	b.n	8003a46 <_printf_common+0x3e>
 8003ab8:	18e1      	adds	r1, r4, r3
 8003aba:	1c5a      	adds	r2, r3, #1
 8003abc:	2030      	movs	r0, #48	@ 0x30
 8003abe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ac2:	4422      	add	r2, r4
 8003ac4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ac8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003acc:	3302      	adds	r3, #2
 8003ace:	e7c7      	b.n	8003a60 <_printf_common+0x58>
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	4622      	mov	r2, r4
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	4638      	mov	r0, r7
 8003ad8:	47c8      	blx	r9
 8003ada:	3001      	adds	r0, #1
 8003adc:	d0e6      	beq.n	8003aac <_printf_common+0xa4>
 8003ade:	3601      	adds	r6, #1
 8003ae0:	e7d9      	b.n	8003a96 <_printf_common+0x8e>
	...

08003ae4 <_printf_i>:
 8003ae4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ae8:	7e0f      	ldrb	r7, [r1, #24]
 8003aea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003aec:	2f78      	cmp	r7, #120	@ 0x78
 8003aee:	4691      	mov	r9, r2
 8003af0:	4680      	mov	r8, r0
 8003af2:	460c      	mov	r4, r1
 8003af4:	469a      	mov	sl, r3
 8003af6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003afa:	d807      	bhi.n	8003b0c <_printf_i+0x28>
 8003afc:	2f62      	cmp	r7, #98	@ 0x62
 8003afe:	d80a      	bhi.n	8003b16 <_printf_i+0x32>
 8003b00:	2f00      	cmp	r7, #0
 8003b02:	f000 80d2 	beq.w	8003caa <_printf_i+0x1c6>
 8003b06:	2f58      	cmp	r7, #88	@ 0x58
 8003b08:	f000 80b9 	beq.w	8003c7e <_printf_i+0x19a>
 8003b0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b10:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003b14:	e03a      	b.n	8003b8c <_printf_i+0xa8>
 8003b16:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003b1a:	2b15      	cmp	r3, #21
 8003b1c:	d8f6      	bhi.n	8003b0c <_printf_i+0x28>
 8003b1e:	a101      	add	r1, pc, #4	@ (adr r1, 8003b24 <_printf_i+0x40>)
 8003b20:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b24:	08003b7d 	.word	0x08003b7d
 8003b28:	08003b91 	.word	0x08003b91
 8003b2c:	08003b0d 	.word	0x08003b0d
 8003b30:	08003b0d 	.word	0x08003b0d
 8003b34:	08003b0d 	.word	0x08003b0d
 8003b38:	08003b0d 	.word	0x08003b0d
 8003b3c:	08003b91 	.word	0x08003b91
 8003b40:	08003b0d 	.word	0x08003b0d
 8003b44:	08003b0d 	.word	0x08003b0d
 8003b48:	08003b0d 	.word	0x08003b0d
 8003b4c:	08003b0d 	.word	0x08003b0d
 8003b50:	08003c91 	.word	0x08003c91
 8003b54:	08003bbb 	.word	0x08003bbb
 8003b58:	08003c4b 	.word	0x08003c4b
 8003b5c:	08003b0d 	.word	0x08003b0d
 8003b60:	08003b0d 	.word	0x08003b0d
 8003b64:	08003cb3 	.word	0x08003cb3
 8003b68:	08003b0d 	.word	0x08003b0d
 8003b6c:	08003bbb 	.word	0x08003bbb
 8003b70:	08003b0d 	.word	0x08003b0d
 8003b74:	08003b0d 	.word	0x08003b0d
 8003b78:	08003c53 	.word	0x08003c53
 8003b7c:	6833      	ldr	r3, [r6, #0]
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	6032      	str	r2, [r6, #0]
 8003b84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003b88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	e09d      	b.n	8003ccc <_printf_i+0x1e8>
 8003b90:	6833      	ldr	r3, [r6, #0]
 8003b92:	6820      	ldr	r0, [r4, #0]
 8003b94:	1d19      	adds	r1, r3, #4
 8003b96:	6031      	str	r1, [r6, #0]
 8003b98:	0606      	lsls	r6, r0, #24
 8003b9a:	d501      	bpl.n	8003ba0 <_printf_i+0xbc>
 8003b9c:	681d      	ldr	r5, [r3, #0]
 8003b9e:	e003      	b.n	8003ba8 <_printf_i+0xc4>
 8003ba0:	0645      	lsls	r5, r0, #25
 8003ba2:	d5fb      	bpl.n	8003b9c <_printf_i+0xb8>
 8003ba4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ba8:	2d00      	cmp	r5, #0
 8003baa:	da03      	bge.n	8003bb4 <_printf_i+0xd0>
 8003bac:	232d      	movs	r3, #45	@ 0x2d
 8003bae:	426d      	negs	r5, r5
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003bb4:	4859      	ldr	r0, [pc, #356]	@ (8003d1c <_printf_i+0x238>)
 8003bb6:	230a      	movs	r3, #10
 8003bb8:	e011      	b.n	8003bde <_printf_i+0xfa>
 8003bba:	6821      	ldr	r1, [r4, #0]
 8003bbc:	6833      	ldr	r3, [r6, #0]
 8003bbe:	0608      	lsls	r0, r1, #24
 8003bc0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003bc4:	d402      	bmi.n	8003bcc <_printf_i+0xe8>
 8003bc6:	0649      	lsls	r1, r1, #25
 8003bc8:	bf48      	it	mi
 8003bca:	b2ad      	uxthmi	r5, r5
 8003bcc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003bce:	4853      	ldr	r0, [pc, #332]	@ (8003d1c <_printf_i+0x238>)
 8003bd0:	6033      	str	r3, [r6, #0]
 8003bd2:	bf14      	ite	ne
 8003bd4:	230a      	movne	r3, #10
 8003bd6:	2308      	moveq	r3, #8
 8003bd8:	2100      	movs	r1, #0
 8003bda:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003bde:	6866      	ldr	r6, [r4, #4]
 8003be0:	60a6      	str	r6, [r4, #8]
 8003be2:	2e00      	cmp	r6, #0
 8003be4:	bfa2      	ittt	ge
 8003be6:	6821      	ldrge	r1, [r4, #0]
 8003be8:	f021 0104 	bicge.w	r1, r1, #4
 8003bec:	6021      	strge	r1, [r4, #0]
 8003bee:	b90d      	cbnz	r5, 8003bf4 <_printf_i+0x110>
 8003bf0:	2e00      	cmp	r6, #0
 8003bf2:	d04b      	beq.n	8003c8c <_printf_i+0x1a8>
 8003bf4:	4616      	mov	r6, r2
 8003bf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8003bfa:	fb03 5711 	mls	r7, r3, r1, r5
 8003bfe:	5dc7      	ldrb	r7, [r0, r7]
 8003c00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003c04:	462f      	mov	r7, r5
 8003c06:	42bb      	cmp	r3, r7
 8003c08:	460d      	mov	r5, r1
 8003c0a:	d9f4      	bls.n	8003bf6 <_printf_i+0x112>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	d10b      	bne.n	8003c28 <_printf_i+0x144>
 8003c10:	6823      	ldr	r3, [r4, #0]
 8003c12:	07df      	lsls	r7, r3, #31
 8003c14:	d508      	bpl.n	8003c28 <_printf_i+0x144>
 8003c16:	6923      	ldr	r3, [r4, #16]
 8003c18:	6861      	ldr	r1, [r4, #4]
 8003c1a:	4299      	cmp	r1, r3
 8003c1c:	bfde      	ittt	le
 8003c1e:	2330      	movle	r3, #48	@ 0x30
 8003c20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003c24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003c28:	1b92      	subs	r2, r2, r6
 8003c2a:	6122      	str	r2, [r4, #16]
 8003c2c:	f8cd a000 	str.w	sl, [sp]
 8003c30:	464b      	mov	r3, r9
 8003c32:	aa03      	add	r2, sp, #12
 8003c34:	4621      	mov	r1, r4
 8003c36:	4640      	mov	r0, r8
 8003c38:	f7ff fee6 	bl	8003a08 <_printf_common>
 8003c3c:	3001      	adds	r0, #1
 8003c3e:	d14a      	bne.n	8003cd6 <_printf_i+0x1f2>
 8003c40:	f04f 30ff 	mov.w	r0, #4294967295
 8003c44:	b004      	add	sp, #16
 8003c46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c4a:	6823      	ldr	r3, [r4, #0]
 8003c4c:	f043 0320 	orr.w	r3, r3, #32
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	4833      	ldr	r0, [pc, #204]	@ (8003d20 <_printf_i+0x23c>)
 8003c54:	2778      	movs	r7, #120	@ 0x78
 8003c56:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003c5a:	6823      	ldr	r3, [r4, #0]
 8003c5c:	6831      	ldr	r1, [r6, #0]
 8003c5e:	061f      	lsls	r7, r3, #24
 8003c60:	f851 5b04 	ldr.w	r5, [r1], #4
 8003c64:	d402      	bmi.n	8003c6c <_printf_i+0x188>
 8003c66:	065f      	lsls	r7, r3, #25
 8003c68:	bf48      	it	mi
 8003c6a:	b2ad      	uxthmi	r5, r5
 8003c6c:	6031      	str	r1, [r6, #0]
 8003c6e:	07d9      	lsls	r1, r3, #31
 8003c70:	bf44      	itt	mi
 8003c72:	f043 0320 	orrmi.w	r3, r3, #32
 8003c76:	6023      	strmi	r3, [r4, #0]
 8003c78:	b11d      	cbz	r5, 8003c82 <_printf_i+0x19e>
 8003c7a:	2310      	movs	r3, #16
 8003c7c:	e7ac      	b.n	8003bd8 <_printf_i+0xf4>
 8003c7e:	4827      	ldr	r0, [pc, #156]	@ (8003d1c <_printf_i+0x238>)
 8003c80:	e7e9      	b.n	8003c56 <_printf_i+0x172>
 8003c82:	6823      	ldr	r3, [r4, #0]
 8003c84:	f023 0320 	bic.w	r3, r3, #32
 8003c88:	6023      	str	r3, [r4, #0]
 8003c8a:	e7f6      	b.n	8003c7a <_printf_i+0x196>
 8003c8c:	4616      	mov	r6, r2
 8003c8e:	e7bd      	b.n	8003c0c <_printf_i+0x128>
 8003c90:	6833      	ldr	r3, [r6, #0]
 8003c92:	6825      	ldr	r5, [r4, #0]
 8003c94:	6961      	ldr	r1, [r4, #20]
 8003c96:	1d18      	adds	r0, r3, #4
 8003c98:	6030      	str	r0, [r6, #0]
 8003c9a:	062e      	lsls	r6, r5, #24
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	d501      	bpl.n	8003ca4 <_printf_i+0x1c0>
 8003ca0:	6019      	str	r1, [r3, #0]
 8003ca2:	e002      	b.n	8003caa <_printf_i+0x1c6>
 8003ca4:	0668      	lsls	r0, r5, #25
 8003ca6:	d5fb      	bpl.n	8003ca0 <_printf_i+0x1bc>
 8003ca8:	8019      	strh	r1, [r3, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	6123      	str	r3, [r4, #16]
 8003cae:	4616      	mov	r6, r2
 8003cb0:	e7bc      	b.n	8003c2c <_printf_i+0x148>
 8003cb2:	6833      	ldr	r3, [r6, #0]
 8003cb4:	1d1a      	adds	r2, r3, #4
 8003cb6:	6032      	str	r2, [r6, #0]
 8003cb8:	681e      	ldr	r6, [r3, #0]
 8003cba:	6862      	ldr	r2, [r4, #4]
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f7fc faa6 	bl	8000210 <memchr>
 8003cc4:	b108      	cbz	r0, 8003cca <_printf_i+0x1e6>
 8003cc6:	1b80      	subs	r0, r0, r6
 8003cc8:	6060      	str	r0, [r4, #4]
 8003cca:	6863      	ldr	r3, [r4, #4]
 8003ccc:	6123      	str	r3, [r4, #16]
 8003cce:	2300      	movs	r3, #0
 8003cd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003cd4:	e7aa      	b.n	8003c2c <_printf_i+0x148>
 8003cd6:	6923      	ldr	r3, [r4, #16]
 8003cd8:	4632      	mov	r2, r6
 8003cda:	4649      	mov	r1, r9
 8003cdc:	4640      	mov	r0, r8
 8003cde:	47d0      	blx	sl
 8003ce0:	3001      	adds	r0, #1
 8003ce2:	d0ad      	beq.n	8003c40 <_printf_i+0x15c>
 8003ce4:	6823      	ldr	r3, [r4, #0]
 8003ce6:	079b      	lsls	r3, r3, #30
 8003ce8:	d413      	bmi.n	8003d12 <_printf_i+0x22e>
 8003cea:	68e0      	ldr	r0, [r4, #12]
 8003cec:	9b03      	ldr	r3, [sp, #12]
 8003cee:	4298      	cmp	r0, r3
 8003cf0:	bfb8      	it	lt
 8003cf2:	4618      	movlt	r0, r3
 8003cf4:	e7a6      	b.n	8003c44 <_printf_i+0x160>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	4649      	mov	r1, r9
 8003cfc:	4640      	mov	r0, r8
 8003cfe:	47d0      	blx	sl
 8003d00:	3001      	adds	r0, #1
 8003d02:	d09d      	beq.n	8003c40 <_printf_i+0x15c>
 8003d04:	3501      	adds	r5, #1
 8003d06:	68e3      	ldr	r3, [r4, #12]
 8003d08:	9903      	ldr	r1, [sp, #12]
 8003d0a:	1a5b      	subs	r3, r3, r1
 8003d0c:	42ab      	cmp	r3, r5
 8003d0e:	dcf2      	bgt.n	8003cf6 <_printf_i+0x212>
 8003d10:	e7eb      	b.n	8003cea <_printf_i+0x206>
 8003d12:	2500      	movs	r5, #0
 8003d14:	f104 0619 	add.w	r6, r4, #25
 8003d18:	e7f5      	b.n	8003d06 <_printf_i+0x222>
 8003d1a:	bf00      	nop
 8003d1c:	08004115 	.word	0x08004115
 8003d20:	08004126 	.word	0x08004126

08003d24 <__sflush_r>:
 8003d24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d2c:	0716      	lsls	r6, r2, #28
 8003d2e:	4605      	mov	r5, r0
 8003d30:	460c      	mov	r4, r1
 8003d32:	d454      	bmi.n	8003dde <__sflush_r+0xba>
 8003d34:	684b      	ldr	r3, [r1, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	dc02      	bgt.n	8003d40 <__sflush_r+0x1c>
 8003d3a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dd48      	ble.n	8003dd2 <__sflush_r+0xae>
 8003d40:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d42:	2e00      	cmp	r6, #0
 8003d44:	d045      	beq.n	8003dd2 <__sflush_r+0xae>
 8003d46:	2300      	movs	r3, #0
 8003d48:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003d4c:	682f      	ldr	r7, [r5, #0]
 8003d4e:	6a21      	ldr	r1, [r4, #32]
 8003d50:	602b      	str	r3, [r5, #0]
 8003d52:	d030      	beq.n	8003db6 <__sflush_r+0x92>
 8003d54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8003d56:	89a3      	ldrh	r3, [r4, #12]
 8003d58:	0759      	lsls	r1, r3, #29
 8003d5a:	d505      	bpl.n	8003d68 <__sflush_r+0x44>
 8003d5c:	6863      	ldr	r3, [r4, #4]
 8003d5e:	1ad2      	subs	r2, r2, r3
 8003d60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003d62:	b10b      	cbz	r3, 8003d68 <__sflush_r+0x44>
 8003d64:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8003d66:	1ad2      	subs	r2, r2, r3
 8003d68:	2300      	movs	r3, #0
 8003d6a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003d6c:	6a21      	ldr	r1, [r4, #32]
 8003d6e:	4628      	mov	r0, r5
 8003d70:	47b0      	blx	r6
 8003d72:	1c43      	adds	r3, r0, #1
 8003d74:	89a3      	ldrh	r3, [r4, #12]
 8003d76:	d106      	bne.n	8003d86 <__sflush_r+0x62>
 8003d78:	6829      	ldr	r1, [r5, #0]
 8003d7a:	291d      	cmp	r1, #29
 8003d7c:	d82b      	bhi.n	8003dd6 <__sflush_r+0xb2>
 8003d7e:	4a2a      	ldr	r2, [pc, #168]	@ (8003e28 <__sflush_r+0x104>)
 8003d80:	410a      	asrs	r2, r1
 8003d82:	07d6      	lsls	r6, r2, #31
 8003d84:	d427      	bmi.n	8003dd6 <__sflush_r+0xb2>
 8003d86:	2200      	movs	r2, #0
 8003d88:	6062      	str	r2, [r4, #4]
 8003d8a:	04d9      	lsls	r1, r3, #19
 8003d8c:	6922      	ldr	r2, [r4, #16]
 8003d8e:	6022      	str	r2, [r4, #0]
 8003d90:	d504      	bpl.n	8003d9c <__sflush_r+0x78>
 8003d92:	1c42      	adds	r2, r0, #1
 8003d94:	d101      	bne.n	8003d9a <__sflush_r+0x76>
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	b903      	cbnz	r3, 8003d9c <__sflush_r+0x78>
 8003d9a:	6560      	str	r0, [r4, #84]	@ 0x54
 8003d9c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003d9e:	602f      	str	r7, [r5, #0]
 8003da0:	b1b9      	cbz	r1, 8003dd2 <__sflush_r+0xae>
 8003da2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003da6:	4299      	cmp	r1, r3
 8003da8:	d002      	beq.n	8003db0 <__sflush_r+0x8c>
 8003daa:	4628      	mov	r0, r5
 8003dac:	f7ff fbf2 	bl	8003594 <_free_r>
 8003db0:	2300      	movs	r3, #0
 8003db2:	6363      	str	r3, [r4, #52]	@ 0x34
 8003db4:	e00d      	b.n	8003dd2 <__sflush_r+0xae>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4628      	mov	r0, r5
 8003dba:	47b0      	blx	r6
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	1c50      	adds	r0, r2, #1
 8003dc0:	d1c9      	bne.n	8003d56 <__sflush_r+0x32>
 8003dc2:	682b      	ldr	r3, [r5, #0]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0c6      	beq.n	8003d56 <__sflush_r+0x32>
 8003dc8:	2b1d      	cmp	r3, #29
 8003dca:	d001      	beq.n	8003dd0 <__sflush_r+0xac>
 8003dcc:	2b16      	cmp	r3, #22
 8003dce:	d11e      	bne.n	8003e0e <__sflush_r+0xea>
 8003dd0:	602f      	str	r7, [r5, #0]
 8003dd2:	2000      	movs	r0, #0
 8003dd4:	e022      	b.n	8003e1c <__sflush_r+0xf8>
 8003dd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003dda:	b21b      	sxth	r3, r3
 8003ddc:	e01b      	b.n	8003e16 <__sflush_r+0xf2>
 8003dde:	690f      	ldr	r7, [r1, #16]
 8003de0:	2f00      	cmp	r7, #0
 8003de2:	d0f6      	beq.n	8003dd2 <__sflush_r+0xae>
 8003de4:	0793      	lsls	r3, r2, #30
 8003de6:	680e      	ldr	r6, [r1, #0]
 8003de8:	bf08      	it	eq
 8003dea:	694b      	ldreq	r3, [r1, #20]
 8003dec:	600f      	str	r7, [r1, #0]
 8003dee:	bf18      	it	ne
 8003df0:	2300      	movne	r3, #0
 8003df2:	eba6 0807 	sub.w	r8, r6, r7
 8003df6:	608b      	str	r3, [r1, #8]
 8003df8:	f1b8 0f00 	cmp.w	r8, #0
 8003dfc:	dde9      	ble.n	8003dd2 <__sflush_r+0xae>
 8003dfe:	6a21      	ldr	r1, [r4, #32]
 8003e00:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8003e02:	4643      	mov	r3, r8
 8003e04:	463a      	mov	r2, r7
 8003e06:	4628      	mov	r0, r5
 8003e08:	47b0      	blx	r6
 8003e0a:	2800      	cmp	r0, #0
 8003e0c:	dc08      	bgt.n	8003e20 <__sflush_r+0xfc>
 8003e0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003e16:	81a3      	strh	r3, [r4, #12]
 8003e18:	f04f 30ff 	mov.w	r0, #4294967295
 8003e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003e20:	4407      	add	r7, r0
 8003e22:	eba8 0800 	sub.w	r8, r8, r0
 8003e26:	e7e7      	b.n	8003df8 <__sflush_r+0xd4>
 8003e28:	dfbffffe 	.word	0xdfbffffe

08003e2c <_fflush_r>:
 8003e2c:	b538      	push	{r3, r4, r5, lr}
 8003e2e:	690b      	ldr	r3, [r1, #16]
 8003e30:	4605      	mov	r5, r0
 8003e32:	460c      	mov	r4, r1
 8003e34:	b913      	cbnz	r3, 8003e3c <_fflush_r+0x10>
 8003e36:	2500      	movs	r5, #0
 8003e38:	4628      	mov	r0, r5
 8003e3a:	bd38      	pop	{r3, r4, r5, pc}
 8003e3c:	b118      	cbz	r0, 8003e46 <_fflush_r+0x1a>
 8003e3e:	6a03      	ldr	r3, [r0, #32]
 8003e40:	b90b      	cbnz	r3, 8003e46 <_fflush_r+0x1a>
 8003e42:	f7ff fa9f 	bl	8003384 <__sinit>
 8003e46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d0f3      	beq.n	8003e36 <_fflush_r+0xa>
 8003e4e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003e50:	07d0      	lsls	r0, r2, #31
 8003e52:	d404      	bmi.n	8003e5e <_fflush_r+0x32>
 8003e54:	0599      	lsls	r1, r3, #22
 8003e56:	d402      	bmi.n	8003e5e <_fflush_r+0x32>
 8003e58:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e5a:	f7ff fb98 	bl	800358e <__retarget_lock_acquire_recursive>
 8003e5e:	4628      	mov	r0, r5
 8003e60:	4621      	mov	r1, r4
 8003e62:	f7ff ff5f 	bl	8003d24 <__sflush_r>
 8003e66:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003e68:	07da      	lsls	r2, r3, #31
 8003e6a:	4605      	mov	r5, r0
 8003e6c:	d4e4      	bmi.n	8003e38 <_fflush_r+0xc>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	059b      	lsls	r3, r3, #22
 8003e72:	d4e1      	bmi.n	8003e38 <_fflush_r+0xc>
 8003e74:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003e76:	f7ff fb8b 	bl	8003590 <__retarget_lock_release_recursive>
 8003e7a:	e7dd      	b.n	8003e38 <_fflush_r+0xc>

08003e7c <__swbuf_r>:
 8003e7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e7e:	460e      	mov	r6, r1
 8003e80:	4614      	mov	r4, r2
 8003e82:	4605      	mov	r5, r0
 8003e84:	b118      	cbz	r0, 8003e8e <__swbuf_r+0x12>
 8003e86:	6a03      	ldr	r3, [r0, #32]
 8003e88:	b90b      	cbnz	r3, 8003e8e <__swbuf_r+0x12>
 8003e8a:	f7ff fa7b 	bl	8003384 <__sinit>
 8003e8e:	69a3      	ldr	r3, [r4, #24]
 8003e90:	60a3      	str	r3, [r4, #8]
 8003e92:	89a3      	ldrh	r3, [r4, #12]
 8003e94:	071a      	lsls	r2, r3, #28
 8003e96:	d501      	bpl.n	8003e9c <__swbuf_r+0x20>
 8003e98:	6923      	ldr	r3, [r4, #16]
 8003e9a:	b943      	cbnz	r3, 8003eae <__swbuf_r+0x32>
 8003e9c:	4621      	mov	r1, r4
 8003e9e:	4628      	mov	r0, r5
 8003ea0:	f000 f82a 	bl	8003ef8 <__swsetup_r>
 8003ea4:	b118      	cbz	r0, 8003eae <__swbuf_r+0x32>
 8003ea6:	f04f 37ff 	mov.w	r7, #4294967295
 8003eaa:	4638      	mov	r0, r7
 8003eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eae:	6823      	ldr	r3, [r4, #0]
 8003eb0:	6922      	ldr	r2, [r4, #16]
 8003eb2:	1a98      	subs	r0, r3, r2
 8003eb4:	6963      	ldr	r3, [r4, #20]
 8003eb6:	b2f6      	uxtb	r6, r6
 8003eb8:	4283      	cmp	r3, r0
 8003eba:	4637      	mov	r7, r6
 8003ebc:	dc05      	bgt.n	8003eca <__swbuf_r+0x4e>
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	4628      	mov	r0, r5
 8003ec2:	f7ff ffb3 	bl	8003e2c <_fflush_r>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d1ed      	bne.n	8003ea6 <__swbuf_r+0x2a>
 8003eca:	68a3      	ldr	r3, [r4, #8]
 8003ecc:	3b01      	subs	r3, #1
 8003ece:	60a3      	str	r3, [r4, #8]
 8003ed0:	6823      	ldr	r3, [r4, #0]
 8003ed2:	1c5a      	adds	r2, r3, #1
 8003ed4:	6022      	str	r2, [r4, #0]
 8003ed6:	701e      	strb	r6, [r3, #0]
 8003ed8:	6962      	ldr	r2, [r4, #20]
 8003eda:	1c43      	adds	r3, r0, #1
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d004      	beq.n	8003eea <__swbuf_r+0x6e>
 8003ee0:	89a3      	ldrh	r3, [r4, #12]
 8003ee2:	07db      	lsls	r3, r3, #31
 8003ee4:	d5e1      	bpl.n	8003eaa <__swbuf_r+0x2e>
 8003ee6:	2e0a      	cmp	r6, #10
 8003ee8:	d1df      	bne.n	8003eaa <__swbuf_r+0x2e>
 8003eea:	4621      	mov	r1, r4
 8003eec:	4628      	mov	r0, r5
 8003eee:	f7ff ff9d 	bl	8003e2c <_fflush_r>
 8003ef2:	2800      	cmp	r0, #0
 8003ef4:	d0d9      	beq.n	8003eaa <__swbuf_r+0x2e>
 8003ef6:	e7d6      	b.n	8003ea6 <__swbuf_r+0x2a>

08003ef8 <__swsetup_r>:
 8003ef8:	b538      	push	{r3, r4, r5, lr}
 8003efa:	4b29      	ldr	r3, [pc, #164]	@ (8003fa0 <__swsetup_r+0xa8>)
 8003efc:	4605      	mov	r5, r0
 8003efe:	6818      	ldr	r0, [r3, #0]
 8003f00:	460c      	mov	r4, r1
 8003f02:	b118      	cbz	r0, 8003f0c <__swsetup_r+0x14>
 8003f04:	6a03      	ldr	r3, [r0, #32]
 8003f06:	b90b      	cbnz	r3, 8003f0c <__swsetup_r+0x14>
 8003f08:	f7ff fa3c 	bl	8003384 <__sinit>
 8003f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f10:	0719      	lsls	r1, r3, #28
 8003f12:	d422      	bmi.n	8003f5a <__swsetup_r+0x62>
 8003f14:	06da      	lsls	r2, r3, #27
 8003f16:	d407      	bmi.n	8003f28 <__swsetup_r+0x30>
 8003f18:	2209      	movs	r2, #9
 8003f1a:	602a      	str	r2, [r5, #0]
 8003f1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003f20:	81a3      	strh	r3, [r4, #12]
 8003f22:	f04f 30ff 	mov.w	r0, #4294967295
 8003f26:	e033      	b.n	8003f90 <__swsetup_r+0x98>
 8003f28:	0758      	lsls	r0, r3, #29
 8003f2a:	d512      	bpl.n	8003f52 <__swsetup_r+0x5a>
 8003f2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003f2e:	b141      	cbz	r1, 8003f42 <__swsetup_r+0x4a>
 8003f30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003f34:	4299      	cmp	r1, r3
 8003f36:	d002      	beq.n	8003f3e <__swsetup_r+0x46>
 8003f38:	4628      	mov	r0, r5
 8003f3a:	f7ff fb2b 	bl	8003594 <_free_r>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	6363      	str	r3, [r4, #52]	@ 0x34
 8003f42:	89a3      	ldrh	r3, [r4, #12]
 8003f44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003f48:	81a3      	strh	r3, [r4, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6063      	str	r3, [r4, #4]
 8003f4e:	6923      	ldr	r3, [r4, #16]
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	89a3      	ldrh	r3, [r4, #12]
 8003f54:	f043 0308 	orr.w	r3, r3, #8
 8003f58:	81a3      	strh	r3, [r4, #12]
 8003f5a:	6923      	ldr	r3, [r4, #16]
 8003f5c:	b94b      	cbnz	r3, 8003f72 <__swsetup_r+0x7a>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003f64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f68:	d003      	beq.n	8003f72 <__swsetup_r+0x7a>
 8003f6a:	4621      	mov	r1, r4
 8003f6c:	4628      	mov	r0, r5
 8003f6e:	f000 f84f 	bl	8004010 <__smakebuf_r>
 8003f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f76:	f013 0201 	ands.w	r2, r3, #1
 8003f7a:	d00a      	beq.n	8003f92 <__swsetup_r+0x9a>
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	60a2      	str	r2, [r4, #8]
 8003f80:	6962      	ldr	r2, [r4, #20]
 8003f82:	4252      	negs	r2, r2
 8003f84:	61a2      	str	r2, [r4, #24]
 8003f86:	6922      	ldr	r2, [r4, #16]
 8003f88:	b942      	cbnz	r2, 8003f9c <__swsetup_r+0xa4>
 8003f8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f8e:	d1c5      	bne.n	8003f1c <__swsetup_r+0x24>
 8003f90:	bd38      	pop	{r3, r4, r5, pc}
 8003f92:	0799      	lsls	r1, r3, #30
 8003f94:	bf58      	it	pl
 8003f96:	6962      	ldrpl	r2, [r4, #20]
 8003f98:	60a2      	str	r2, [r4, #8]
 8003f9a:	e7f4      	b.n	8003f86 <__swsetup_r+0x8e>
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	e7f7      	b.n	8003f90 <__swsetup_r+0x98>
 8003fa0:	20000018 	.word	0x20000018

08003fa4 <_sbrk_r>:
 8003fa4:	b538      	push	{r3, r4, r5, lr}
 8003fa6:	4d06      	ldr	r5, [pc, #24]	@ (8003fc0 <_sbrk_r+0x1c>)
 8003fa8:	2300      	movs	r3, #0
 8003faa:	4604      	mov	r4, r0
 8003fac:	4608      	mov	r0, r1
 8003fae:	602b      	str	r3, [r5, #0]
 8003fb0:	f7fc ff24 	bl	8000dfc <_sbrk>
 8003fb4:	1c43      	adds	r3, r0, #1
 8003fb6:	d102      	bne.n	8003fbe <_sbrk_r+0x1a>
 8003fb8:	682b      	ldr	r3, [r5, #0]
 8003fba:	b103      	cbz	r3, 8003fbe <_sbrk_r+0x1a>
 8003fbc:	6023      	str	r3, [r4, #0]
 8003fbe:	bd38      	pop	{r3, r4, r5, pc}
 8003fc0:	200002a8 	.word	0x200002a8

08003fc4 <__swhatbuf_r>:
 8003fc4:	b570      	push	{r4, r5, r6, lr}
 8003fc6:	460c      	mov	r4, r1
 8003fc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fcc:	2900      	cmp	r1, #0
 8003fce:	b096      	sub	sp, #88	@ 0x58
 8003fd0:	4615      	mov	r5, r2
 8003fd2:	461e      	mov	r6, r3
 8003fd4:	da0d      	bge.n	8003ff2 <__swhatbuf_r+0x2e>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003fdc:	f04f 0100 	mov.w	r1, #0
 8003fe0:	bf14      	ite	ne
 8003fe2:	2340      	movne	r3, #64	@ 0x40
 8003fe4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003fe8:	2000      	movs	r0, #0
 8003fea:	6031      	str	r1, [r6, #0]
 8003fec:	602b      	str	r3, [r5, #0]
 8003fee:	b016      	add	sp, #88	@ 0x58
 8003ff0:	bd70      	pop	{r4, r5, r6, pc}
 8003ff2:	466a      	mov	r2, sp
 8003ff4:	f000 f848 	bl	8004088 <_fstat_r>
 8003ff8:	2800      	cmp	r0, #0
 8003ffa:	dbec      	blt.n	8003fd6 <__swhatbuf_r+0x12>
 8003ffc:	9901      	ldr	r1, [sp, #4]
 8003ffe:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004002:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004006:	4259      	negs	r1, r3
 8004008:	4159      	adcs	r1, r3
 800400a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800400e:	e7eb      	b.n	8003fe8 <__swhatbuf_r+0x24>

08004010 <__smakebuf_r>:
 8004010:	898b      	ldrh	r3, [r1, #12]
 8004012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004014:	079d      	lsls	r5, r3, #30
 8004016:	4606      	mov	r6, r0
 8004018:	460c      	mov	r4, r1
 800401a:	d507      	bpl.n	800402c <__smakebuf_r+0x1c>
 800401c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004020:	6023      	str	r3, [r4, #0]
 8004022:	6123      	str	r3, [r4, #16]
 8004024:	2301      	movs	r3, #1
 8004026:	6163      	str	r3, [r4, #20]
 8004028:	b003      	add	sp, #12
 800402a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800402c:	ab01      	add	r3, sp, #4
 800402e:	466a      	mov	r2, sp
 8004030:	f7ff ffc8 	bl	8003fc4 <__swhatbuf_r>
 8004034:	9f00      	ldr	r7, [sp, #0]
 8004036:	4605      	mov	r5, r0
 8004038:	4639      	mov	r1, r7
 800403a:	4630      	mov	r0, r6
 800403c:	f7ff fb16 	bl	800366c <_malloc_r>
 8004040:	b948      	cbnz	r0, 8004056 <__smakebuf_r+0x46>
 8004042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004046:	059a      	lsls	r2, r3, #22
 8004048:	d4ee      	bmi.n	8004028 <__smakebuf_r+0x18>
 800404a:	f023 0303 	bic.w	r3, r3, #3
 800404e:	f043 0302 	orr.w	r3, r3, #2
 8004052:	81a3      	strh	r3, [r4, #12]
 8004054:	e7e2      	b.n	800401c <__smakebuf_r+0xc>
 8004056:	89a3      	ldrh	r3, [r4, #12]
 8004058:	6020      	str	r0, [r4, #0]
 800405a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800405e:	81a3      	strh	r3, [r4, #12]
 8004060:	9b01      	ldr	r3, [sp, #4]
 8004062:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004066:	b15b      	cbz	r3, 8004080 <__smakebuf_r+0x70>
 8004068:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800406c:	4630      	mov	r0, r6
 800406e:	f000 f81d 	bl	80040ac <_isatty_r>
 8004072:	b128      	cbz	r0, 8004080 <__smakebuf_r+0x70>
 8004074:	89a3      	ldrh	r3, [r4, #12]
 8004076:	f023 0303 	bic.w	r3, r3, #3
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	81a3      	strh	r3, [r4, #12]
 8004080:	89a3      	ldrh	r3, [r4, #12]
 8004082:	431d      	orrs	r5, r3
 8004084:	81a5      	strh	r5, [r4, #12]
 8004086:	e7cf      	b.n	8004028 <__smakebuf_r+0x18>

08004088 <_fstat_r>:
 8004088:	b538      	push	{r3, r4, r5, lr}
 800408a:	4d07      	ldr	r5, [pc, #28]	@ (80040a8 <_fstat_r+0x20>)
 800408c:	2300      	movs	r3, #0
 800408e:	4604      	mov	r4, r0
 8004090:	4608      	mov	r0, r1
 8004092:	4611      	mov	r1, r2
 8004094:	602b      	str	r3, [r5, #0]
 8004096:	f7fc fe88 	bl	8000daa <_fstat>
 800409a:	1c43      	adds	r3, r0, #1
 800409c:	d102      	bne.n	80040a4 <_fstat_r+0x1c>
 800409e:	682b      	ldr	r3, [r5, #0]
 80040a0:	b103      	cbz	r3, 80040a4 <_fstat_r+0x1c>
 80040a2:	6023      	str	r3, [r4, #0]
 80040a4:	bd38      	pop	{r3, r4, r5, pc}
 80040a6:	bf00      	nop
 80040a8:	200002a8 	.word	0x200002a8

080040ac <_isatty_r>:
 80040ac:	b538      	push	{r3, r4, r5, lr}
 80040ae:	4d06      	ldr	r5, [pc, #24]	@ (80040c8 <_isatty_r+0x1c>)
 80040b0:	2300      	movs	r3, #0
 80040b2:	4604      	mov	r4, r0
 80040b4:	4608      	mov	r0, r1
 80040b6:	602b      	str	r3, [r5, #0]
 80040b8:	f7fc fe87 	bl	8000dca <_isatty>
 80040bc:	1c43      	adds	r3, r0, #1
 80040be:	d102      	bne.n	80040c6 <_isatty_r+0x1a>
 80040c0:	682b      	ldr	r3, [r5, #0]
 80040c2:	b103      	cbz	r3, 80040c6 <_isatty_r+0x1a>
 80040c4:	6023      	str	r3, [r4, #0]
 80040c6:	bd38      	pop	{r3, r4, r5, pc}
 80040c8:	200002a8 	.word	0x200002a8

080040cc <_init>:
 80040cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ce:	bf00      	nop
 80040d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040d2:	bc08      	pop	{r3}
 80040d4:	469e      	mov	lr, r3
 80040d6:	4770      	bx	lr

080040d8 <_fini>:
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040da:	bf00      	nop
 80040dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040de:	bc08      	pop	{r3}
 80040e0:	469e      	mov	lr, r3
 80040e2:	4770      	bx	lr

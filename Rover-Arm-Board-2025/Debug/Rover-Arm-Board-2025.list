
Rover-Arm-Board-2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009610  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080097d4  080097d4  0000a7d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800982c  0800982c  0000b10c  2**0
                  CONTENTS
  4 .ARM          00000008  0800982c  0800982c  0000a82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009834  08009834  0000b10c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009834  08009834  0000a834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009838  08009838  0000a838  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000010c  20000000  0800983c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001de0  2000010c  08009948  0000b10c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001eec  08009948  0000beec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b10c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b3e0  00000000  00000000  0000b13c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ebd  00000000  00000000  0002651c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a8  00000000  00000000  0002a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001246  00000000  00000000  0002bb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000812a  00000000  00000000  0002cdce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb39  00000000  00000000  00034ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6fbc  00000000  00000000  00053a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013a9ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006450  00000000  00000000  0013aa30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000077  00000000  00000000  00140e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000010c 	.word	0x2000010c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080097bc 	.word	0x080097bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000110 	.word	0x20000110
 8000200:	080097bc 	.word	0x080097bc

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004f8:	f000 feae 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fc:	f000 f820 	bl	8000540 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000500:	f000 fb00 	bl	8000b04 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 8000504:	f000 f894 	bl	8000630 <_ZL12MX_ADC1_Initv>
  MX_CRC_Init();
 8000508:	f000 f8ee 	bl	80006e8 <_ZL11MX_CRC_Initv>
  MX_DAC_Init();
 800050c:	f000 f904 	bl	8000718 <_ZL11MX_DAC_Initv>
  MX_SPI2_Init();
 8000510:	f000 f946 	bl	80007a0 <_ZL12MX_SPI2_Initv>
  MX_TIM1_Init();
 8000514:	f000 f980 	bl	8000818 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000518:	f000 f9e0 	bl	80008dc <_ZL12MX_TIM2_Initv>
  MX_TIM4_Init();
 800051c:	f000 fa66 	bl	80009ec <_ZL12MX_TIM4_Initv>
  MX_USART2_UART_Init();
 8000520:	f000 fac2 	bl	8000aa8 <_ZL19MX_USART2_UART_Initv>
  MX_USB_DEVICE_Init();
 8000524:	f008 fbb6 	bl	8008c94 <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000528:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800052c:	4803      	ldr	r0, [pc, #12]	@ (800053c <main+0x48>)
 800052e:	f001 fcf0 	bl	8001f12 <HAL_GPIO_TogglePin>
    HAL_Delay(1);
 8000532:	2001      	movs	r0, #1
 8000534:	f000 ff02 	bl	800133c <HAL_Delay>
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 8000538:	bf00      	nop
 800053a:	e7f5      	b.n	8000528 <main+0x34>
 800053c:	40020800 	.word	0x40020800

08000540 <_Z18SystemClock_Configv>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 031c 	add.w	r3, r7, #28
 800054a:	2234      	movs	r2, #52	@ 0x34
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f009 f908 	bl	8009764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b2f      	ldr	r3, [pc, #188]	@ (8000628 <_Z18SystemClock_Configv+0xe8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a2e      	ldr	r2, [pc, #184]	@ (8000628 <_Z18SystemClock_Configv+0xe8>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b2c      	ldr	r3, [pc, #176]	@ (8000628 <_Z18SystemClock_Configv+0xe8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000580:	2300      	movs	r3, #0
 8000582:	603b      	str	r3, [r7, #0]
 8000584:	4b29      	ldr	r3, [pc, #164]	@ (800062c <_Z18SystemClock_Configv+0xec>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800058c:	4a27      	ldr	r2, [pc, #156]	@ (800062c <_Z18SystemClock_Configv+0xec>)
 800058e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000592:	6013      	str	r3, [r2, #0]
 8000594:	4b25      	ldr	r3, [pc, #148]	@ (800062c <_Z18SystemClock_Configv+0xec>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800059c:	603b      	str	r3, [r7, #0]
 800059e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005a0:	2301      	movs	r3, #1
 80005a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005aa:	2302      	movs	r3, #2
 80005ac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b4:	2304      	movs	r3, #4
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 120;
 80005b8:	2378      	movs	r3, #120	@ 0x78
 80005ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005bc:	2302      	movs	r3, #2
 80005be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80005c0:	2305      	movs	r3, #5
 80005c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c4:	2302      	movs	r3, #2
 80005c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c8:	f107 031c 	add.w	r3, r7, #28
 80005cc:	4618      	mov	r0, r3
 80005ce:	f003 fdcd 	bl	800416c <HAL_RCC_OscConfig>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	bf14      	ite	ne
 80005d8:	2301      	movne	r3, #1
 80005da:	2300      	moveq	r3, #0
 80005dc:	b2db      	uxtb	r3, r3
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 80005e2:	f000 fb35 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005e6:	230f      	movs	r3, #15
 80005e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2302      	movs	r3, #2
 80005ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005f2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005fc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80005fe:	f107 0308 	add.w	r3, r7, #8
 8000602:	2103      	movs	r1, #3
 8000604:	4618      	mov	r0, r3
 8000606:	f002 ff3d 	bl	8003484 <HAL_RCC_ClockConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <_Z18SystemClock_Configv+0xde>
  {
    Error_Handler();
 800061a:	f000 fb19 	bl	8000c50 <Error_Handler>
  }
}
 800061e:	bf00      	nop
 8000620:	3750      	adds	r7, #80	@ 0x50
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	40023800 	.word	0x40023800
 800062c:	40007000 	.word	0x40007000

08000630 <_ZL12MX_ADC1_Initv>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000636:	463b      	mov	r3, r7
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8000642:	4b26      	ldr	r3, [pc, #152]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000644:	4a26      	ldr	r2, [pc, #152]	@ (80006e0 <_ZL12MX_ADC1_Initv+0xb0>)
 8000646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000648:	4b24      	ldr	r3, [pc, #144]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 800064a:	2200      	movs	r2, #0
 800064c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800064e:	4b23      	ldr	r3, [pc, #140]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000654:	4b21      	ldr	r3, [pc, #132]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000656:	2200      	movs	r2, #0
 8000658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800065a:	4b20      	ldr	r3, [pc, #128]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 800065c:	2200      	movs	r2, #0
 800065e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000660:	4b1e      	ldr	r3, [pc, #120]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000662:	2200      	movs	r2, #0
 8000664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000668:	4b1c      	ldr	r3, [pc, #112]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 800066a:	2200      	movs	r2, #0
 800066c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800066e:	4b1b      	ldr	r3, [pc, #108]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000670:	4a1c      	ldr	r2, [pc, #112]	@ (80006e4 <_ZL12MX_ADC1_Initv+0xb4>)
 8000672:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000674:	4b19      	ldr	r3, [pc, #100]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000676:	2200      	movs	r2, #0
 8000678:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800067a:	4b18      	ldr	r3, [pc, #96]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 800067c:	2201      	movs	r2, #1
 800067e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000680:	4b16      	ldr	r3, [pc, #88]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000688:	4b14      	ldr	r3, [pc, #80]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 800068a:	2201      	movs	r2, #1
 800068c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800068e:	4813      	ldr	r0, [pc, #76]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 8000690:	f000 fe78 	bl	8001384 <HAL_ADC_Init>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	bf14      	ite	ne
 800069a:	2301      	movne	r3, #1
 800069c:	2300      	moveq	r3, #0
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80006a4:	f000 fad4 	bl	8000c50 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a8:	2306      	movs	r3, #6
 80006aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006ac:	2301      	movs	r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b0:	2300      	movs	r3, #0
 80006b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b4:	463b      	mov	r3, r7
 80006b6:	4619      	mov	r1, r3
 80006b8:	4808      	ldr	r0, [pc, #32]	@ (80006dc <_ZL12MX_ADC1_Initv+0xac>)
 80006ba:	f000 fea7 	bl	800140c <HAL_ADC_ConfigChannel>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	bf14      	ite	ne
 80006c4:	2301      	movne	r3, #1
 80006c6:	2300      	moveq	r3, #0
 80006c8:	b2db      	uxtb	r3, r3
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 80006ce:	f000 fabf 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */
}
 80006d2:	bf00      	nop
 80006d4:	3710      	adds	r7, #16
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000128 	.word	0x20000128
 80006e0:	40012000 	.word	0x40012000
 80006e4:	0f000001 	.word	0x0f000001

080006e8 <_ZL11MX_CRC_Initv>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ec:	4b08      	ldr	r3, [pc, #32]	@ (8000710 <_ZL11MX_CRC_Initv+0x28>)
 80006ee:	4a09      	ldr	r2, [pc, #36]	@ (8000714 <_ZL11MX_CRC_Initv+0x2c>)
 80006f0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006f2:	4807      	ldr	r0, [pc, #28]	@ (8000710 <_ZL11MX_CRC_Initv+0x28>)
 80006f4:	f001 f9c9 	bl	8001a8a <HAL_CRC_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	bf14      	ite	ne
 80006fe:	2301      	movne	r3, #1
 8000700:	2300      	moveq	r3, #0
 8000702:	b2db      	uxtb	r3, r3
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 8000708:	f000 faa2 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */
}
 800070c:	bf00      	nop
 800070e:	bd80      	pop	{r7, pc}
 8000710:	20000170 	.word	0x20000170
 8000714:	40023000 	.word	0x40023000

08000718 <_ZL11MX_DAC_Initv>:
 * @brief DAC Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800071e:	463b      	mov	r3, r7
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
   */
  hdac.Instance = DAC;
 8000726:	4b1c      	ldr	r3, [pc, #112]	@ (8000798 <_ZL11MX_DAC_Initv+0x80>)
 8000728:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <_ZL11MX_DAC_Initv+0x84>)
 800072a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800072c:	481a      	ldr	r0, [pc, #104]	@ (8000798 <_ZL11MX_DAC_Initv+0x80>)
 800072e:	f001 f9c8 	bl	8001ac2 <HAL_DAC_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	bf14      	ite	ne
 8000738:	2301      	movne	r3, #1
 800073a:	2300      	moveq	r3, #0
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8000742:	f000 fa85 	bl	8000c50 <Error_Handler>
  }

  /** DAC channel OUT1 config
   */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000746:	2300      	movs	r3, #0
 8000748:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800074e:	463b      	mov	r3, r7
 8000750:	2200      	movs	r2, #0
 8000752:	4619      	mov	r1, r3
 8000754:	4810      	ldr	r0, [pc, #64]	@ (8000798 <_ZL11MX_DAC_Initv+0x80>)
 8000756:	f001 f9d6 	bl	8001b06 <HAL_DAC_ConfigChannel>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	bf14      	ite	ne
 8000760:	2301      	movne	r3, #1
 8000762:	2300      	moveq	r3, #0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	2b00      	cmp	r3, #0
 8000768:	d001      	beq.n	800076e <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 800076a:	f000 fa71 	bl	8000c50 <Error_Handler>
  }

  /** DAC channel OUT2 config
   */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800076e:	463b      	mov	r3, r7
 8000770:	2210      	movs	r2, #16
 8000772:	4619      	mov	r1, r3
 8000774:	4808      	ldr	r0, [pc, #32]	@ (8000798 <_ZL11MX_DAC_Initv+0x80>)
 8000776:	f001 f9c6 	bl	8001b06 <HAL_DAC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	bf14      	ite	ne
 8000780:	2301      	movne	r3, #1
 8000782:	2300      	moveq	r3, #0
 8000784:	b2db      	uxtb	r3, r3
 8000786:	2b00      	cmp	r3, #0
 8000788:	d001      	beq.n	800078e <_ZL11MX_DAC_Initv+0x76>
  {
    Error_Handler();
 800078a:	f000 fa61 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */
}
 800078e:	bf00      	nop
 8000790:	3708      	adds	r7, #8
 8000792:	46bd      	mov	sp, r7
 8000794:	bd80      	pop	{r7, pc}
 8000796:	bf00      	nop
 8000798:	20000178 	.word	0x20000178
 800079c:	40007400 	.word	0x40007400

080007a0 <_ZL12MX_SPI2_Initv>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80007a4:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007a6:	4a1b      	ldr	r2, [pc, #108]	@ (8000814 <_ZL12MX_SPI2_Initv+0x74>)
 80007a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80007aa:	4b19      	ldr	r3, [pc, #100]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007ac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007b2:	4b17      	ldr	r3, [pc, #92]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b8:	4b15      	ldr	r3, [pc, #84]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007be:	4b14      	ldr	r3, [pc, #80]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007c4:	4b12      	ldr	r3, [pc, #72]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007ca:	4b11      	ldr	r3, [pc, #68]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007d2:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007da:	2200      	movs	r2, #0
 80007dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007de:	4b0c      	ldr	r3, [pc, #48]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007e4:	4b0a      	ldr	r3, [pc, #40]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007ea:	4b09      	ldr	r3, [pc, #36]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007ec:	220a      	movs	r2, #10
 80007ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007f0:	4807      	ldr	r0, [pc, #28]	@ (8000810 <_ZL12MX_SPI2_Initv+0x70>)
 80007f2:	f003 ff59 	bl	80046a8 <HAL_SPI_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	bf14      	ite	ne
 80007fc:	2301      	movne	r3, #1
 80007fe:	2300      	moveq	r3, #0
 8000800:	b2db      	uxtb	r3, r3
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <_ZL12MX_SPI2_Initv+0x6a>
  {
    Error_Handler();
 8000806:	f000 fa23 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */
}
 800080a:	bf00      	nop
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000018c 	.word	0x2000018c
 8000814:	40003800 	.word	0x40003800

08000818 <_ZL12MX_TIM1_Initv>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b08c      	sub	sp, #48	@ 0x30
 800081c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800081e:	f107 030c 	add.w	r3, r7, #12
 8000822:	2224      	movs	r2, #36	@ 0x24
 8000824:	2100      	movs	r1, #0
 8000826:	4618      	mov	r0, r3
 8000828:	f008 ff9c 	bl	8009764 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000834:	4b27      	ldr	r3, [pc, #156]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000836:	4a28      	ldr	r2, [pc, #160]	@ (80008d8 <_ZL12MX_TIM1_Initv+0xc0>)
 8000838:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800083a:	4b26      	ldr	r3, [pc, #152]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 800083c:	2200      	movs	r2, #0
 800083e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000846:	4b23      	ldr	r3, [pc, #140]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000848:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800084c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b21      	ldr	r3, [pc, #132]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000854:	4b1f      	ldr	r3, [pc, #124]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 8000856:	2200      	movs	r2, #0
 8000858:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800085a:	4b1e      	ldr	r3, [pc, #120]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 800085c:	2200      	movs	r2, #0
 800085e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000860:	2301      	movs	r3, #1
 8000862:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000868:	2301      	movs	r3, #1
 800086a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800086c:	2300      	movs	r3, #0
 800086e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000870:	2300      	movs	r3, #0
 8000872:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000874:	2300      	movs	r3, #0
 8000876:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000878:	2301      	movs	r3, #1
 800087a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000884:	f107 030c 	add.w	r3, r7, #12
 8000888:	4619      	mov	r1, r3
 800088a:	4812      	ldr	r0, [pc, #72]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 800088c:	f003 ffe4 	bl	8004858 <HAL_TIM_Encoder_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	bf14      	ite	ne
 8000896:	2301      	movne	r3, #1
 8000898:	2300      	moveq	r3, #0
 800089a:	b2db      	uxtb	r3, r3
 800089c:	2b00      	cmp	r3, #0
 800089e:	d001      	beq.n	80008a4 <_ZL12MX_TIM1_Initv+0x8c>
  {
    Error_Handler();
 80008a0:	f000 f9d6 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008a4:	2300      	movs	r3, #0
 80008a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a8:	2300      	movs	r3, #0
 80008aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	4619      	mov	r1, r3
 80008b0:	4808      	ldr	r0, [pc, #32]	@ (80008d4 <_ZL12MX_TIM1_Initv+0xbc>)
 80008b2:	f004 fb8f 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	bf14      	ite	ne
 80008bc:	2301      	movne	r3, #1
 80008be:	2300      	moveq	r3, #0
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <_ZL12MX_TIM1_Initv+0xb2>
  {
    Error_Handler();
 80008c6:	f000 f9c3 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	@ 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	200001e4 	.word	0x200001e4
 80008d8:	40010000 	.word	0x40010000

080008dc <_ZL12MX_TIM2_Initv>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	@ 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	f107 0320 	add.w	r3, r7, #32
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ec:	1d3b      	adds	r3, r7, #4
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]
 80008fa:	615a      	str	r2, [r3, #20]
 80008fc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008fe:	4b3a      	ldr	r3, [pc, #232]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000900:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000904:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000906:	4b38      	ldr	r3, [pc, #224]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000908:	2200      	movs	r2, #0
 800090a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b36      	ldr	r3, [pc, #216]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000912:	4b35      	ldr	r3, [pc, #212]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000914:	f04f 32ff 	mov.w	r2, #4294967295
 8000918:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b33      	ldr	r3, [pc, #204]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000920:	4b31      	ldr	r3, [pc, #196]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000922:	2200      	movs	r2, #0
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000926:	4830      	ldr	r0, [pc, #192]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000928:	f003 ff47 	bl	80047ba <HAL_TIM_PWM_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	bf14      	ite	ne
 8000932:	2301      	movne	r3, #1
 8000934:	2300      	moveq	r3, #0
 8000936:	b2db      	uxtb	r3, r3
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <_ZL12MX_TIM2_Initv+0x64>
  {
    Error_Handler();
 800093c:	f000 f988 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000948:	f107 0320 	add.w	r3, r7, #32
 800094c:	4619      	mov	r1, r3
 800094e:	4826      	ldr	r0, [pc, #152]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000950:	f004 fb40 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	bf14      	ite	ne
 800095a:	2301      	movne	r3, #1
 800095c:	2300      	moveq	r3, #0
 800095e:	b2db      	uxtb	r3, r3
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <_ZL12MX_TIM2_Initv+0x8c>
  {
    Error_Handler();
 8000964:	f000 f974 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000968:	2360      	movs	r3, #96	@ 0x60
 800096a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800096c:	2300      	movs	r3, #0
 800096e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000970:	2300      	movs	r3, #0
 8000972:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	2200      	movs	r2, #0
 800097c:	4619      	mov	r1, r3
 800097e:	481a      	ldr	r0, [pc, #104]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 8000980:	f004 f810 	bl	80049a4 <HAL_TIM_PWM_ConfigChannel>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	bf14      	ite	ne
 800098a:	2301      	movne	r3, #1
 800098c:	2300      	moveq	r3, #0
 800098e:	b2db      	uxtb	r3, r3
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <_ZL12MX_TIM2_Initv+0xbc>
  {
    Error_Handler();
 8000994:	f000 f95c 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2204      	movs	r2, #4
 800099c:	4619      	mov	r1, r3
 800099e:	4812      	ldr	r0, [pc, #72]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 80009a0:	f004 f800 	bl	80049a4 <HAL_TIM_PWM_ConfigChannel>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	bf14      	ite	ne
 80009aa:	2301      	movne	r3, #1
 80009ac:	2300      	moveq	r3, #0
 80009ae:	b2db      	uxtb	r3, r3
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 80009b4:	f000 f94c 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80009b8:	1d3b      	adds	r3, r7, #4
 80009ba:	2208      	movs	r2, #8
 80009bc:	4619      	mov	r1, r3
 80009be:	480a      	ldr	r0, [pc, #40]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 80009c0:	f003 fff0 	bl	80049a4 <HAL_TIM_PWM_ConfigChannel>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	bf14      	ite	ne
 80009ca:	2301      	movne	r3, #1
 80009cc:	2300      	moveq	r3, #0
 80009ce:	b2db      	uxtb	r3, r3
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <_ZL12MX_TIM2_Initv+0xfc>
  {
    Error_Handler();
 80009d4:	f000 f93c 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009d8:	4803      	ldr	r0, [pc, #12]	@ (80009e8 <_ZL12MX_TIM2_Initv+0x10c>)
 80009da:	f000 fb27 	bl	800102c <HAL_TIM_MspPostInit>
}
 80009de:	bf00      	nop
 80009e0:	3728      	adds	r7, #40	@ 0x28
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	2000022c 	.word	0x2000022c

080009ec <_ZL12MX_TIM4_Initv>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08c      	sub	sp, #48	@ 0x30
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	2224      	movs	r2, #36	@ 0x24
 80009f8:	2100      	movs	r1, #0
 80009fa:	4618      	mov	r0, r3
 80009fc:	f008 feb2 	bl	8009764 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a00:	1d3b      	adds	r3, r7, #4
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000a08:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a0a:	4a26      	ldr	r2, [pc, #152]	@ (8000aa4 <_ZL12MX_TIM4_Initv+0xb8>)
 8000a0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000a0e:	4b24      	ldr	r3, [pc, #144]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a14:	4b22      	ldr	r3, [pc, #136]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000a1a:	4b21      	ldr	r3, [pc, #132]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a1c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000a20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a22:	4b1f      	ldr	r3, [pc, #124]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b1d      	ldr	r3, [pc, #116]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000a36:	2301      	movs	r3, #1
 8000a38:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000a42:	2300      	movs	r3, #0
 8000a44:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000a46:	2301      	movs	r3, #1
 8000a48:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000a52:	f107 030c 	add.w	r3, r7, #12
 8000a56:	4619      	mov	r1, r3
 8000a58:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a5a:	f003 fefd 	bl	8004858 <HAL_TIM_Encoder_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	bf14      	ite	ne
 8000a64:	2301      	movne	r3, #1
 8000a66:	2300      	moveq	r3, #0
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d001      	beq.n	8000a72 <_ZL12MX_TIM4_Initv+0x86>
  {
    Error_Handler();
 8000a6e:	f000 f8ef 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4808      	ldr	r0, [pc, #32]	@ (8000aa0 <_ZL12MX_TIM4_Initv+0xb4>)
 8000a80:	f004 faa8 	bl	8004fd4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	bf14      	ite	ne
 8000a8a:	2301      	movne	r3, #1
 8000a8c:	2300      	moveq	r3, #0
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <_ZL12MX_TIM4_Initv+0xac>
  {
    Error_Handler();
 8000a94:	f000 f8dc 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
}
 8000a98:	bf00      	nop
 8000a9a:	3730      	adds	r7, #48	@ 0x30
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000274 	.word	0x20000274
 8000aa4:	40000800 	.word	0x40000800

08000aa8 <_ZL19MX_USART2_UART_Initv>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aac:	4b13      	ldr	r3, [pc, #76]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000aae:	4a14      	ldr	r2, [pc, #80]	@ (8000b00 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000ab0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ab2:	4b12      	ldr	r3, [pc, #72]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ab4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac0:	4b0e      	ldr	r3, [pc, #56]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000acc:	4b0b      	ldr	r3, [pc, #44]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ace:	220c      	movs	r2, #12
 8000ad0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad8:	4b08      	ldr	r3, [pc, #32]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ade:	4807      	ldr	r0, [pc, #28]	@ (8000afc <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ae0:	f004 faf4 	bl	80050cc <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	bf14      	ite	ne
 8000aea:	2301      	movne	r3, #1
 8000aec:	2300      	moveq	r3, #0
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8000af4:	f000 f8ac 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002bc 	.word	0x200002bc
 8000b00:	40004400 	.word	0x40004400

08000b04 <_ZL12MX_GPIO_Initv>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b08a      	sub	sp, #40	@ 0x28
 8000b08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b48      	ldr	r3, [pc, #288]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	4a47      	ldr	r2, [pc, #284]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b2a:	4b45      	ldr	r3, [pc, #276]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	f003 0304 	and.w	r3, r3, #4
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b41      	ldr	r3, [pc, #260]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3e:	4a40      	ldr	r2, [pc, #256]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b46:	4b3e      	ldr	r3, [pc, #248]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	4b3a      	ldr	r3, [pc, #232]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b5a:	4a39      	ldr	r2, [pc, #228]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b5c:	f043 0301 	orr.w	r3, r3, #1
 8000b60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b62:	4b37      	ldr	r3, [pc, #220]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	607b      	str	r3, [r7, #4]
 8000b72:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b76:	4a32      	ldr	r2, [pc, #200]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b7e:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <_ZL12MX_GPIO_Initv+0x13c>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	607b      	str	r3, [r7, #4]
 8000b88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_15 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10, GPIO_PIN_RESET);
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	f248 71e0 	movw	r1, #34784	@ 0x87e0
 8000b90:	482c      	ldr	r0, [pc, #176]	@ (8000c44 <_ZL12MX_GPIO_Initv+0x140>)
 8000b92:	f001 f9a5 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2, GPIO_PIN_RESET);
 8000b96:	2200      	movs	r2, #0
 8000b98:	2107      	movs	r1, #7
 8000b9a:	482b      	ldr	r0, [pc, #172]	@ (8000c48 <_ZL12MX_GPIO_Initv+0x144>)
 8000b9c:	f001 f9a0 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ba6:	4829      	ldr	r0, [pc, #164]	@ (8000c4c <_ZL12MX_GPIO_Initv+0x148>)
 8000ba8:	f001 f99a 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC14 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_11;
 8000bac:	f44f 43d0 	mov.w	r3, #26624	@ 0x6800
 8000bb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bba:	f107 0314 	add.w	r3, r7, #20
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4820      	ldr	r0, [pc, #128]	@ (8000c44 <_ZL12MX_GPIO_Initv+0x140>)
 8000bc2:	f000 fff9 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC15 PC5 PC6 PC7
                           PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_15 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10;
 8000bc6:	f248 73e0 	movw	r3, #34784	@ 0x87e0
 8000bca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4819      	ldr	r0, [pc, #100]	@ (8000c44 <_ZL12MX_GPIO_Initv+0x140>)
 8000be0:	f000 ffea 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2;
 8000be4:	2307      	movs	r3, #7
 8000be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be8:	2301      	movs	r3, #1
 8000bea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf4:	f107 0314 	add.w	r3, r7, #20
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4813      	ldr	r0, [pc, #76]	@ (8000c48 <_ZL12MX_GPIO_Initv+0x144>)
 8000bfc:	f000 ffdc 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_4 | GPIO_PIN_5;
 8000c00:	f241 0330 	movw	r3, #4144	@ 0x1030
 8000c04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c06:	2300      	movs	r3, #0
 8000c08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 0314 	add.w	r3, r7, #20
 8000c12:	4619      	mov	r1, r3
 8000c14:	480c      	ldr	r0, [pc, #48]	@ (8000c48 <_ZL12MX_GPIO_Initv+0x144>)
 8000c16:	f000 ffcf 	bl	8001bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c1a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c20:	2301      	movs	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 0314 	add.w	r3, r7, #20
 8000c30:	4619      	mov	r1, r3
 8000c32:	4806      	ldr	r0, [pc, #24]	@ (8000c4c <_ZL12MX_GPIO_Initv+0x148>)
 8000c34:	f000 ffc0 	bl	8001bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c38:	bf00      	nop
 8000c3a:	3728      	adds	r7, #40	@ 0x28
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020800 	.word	0x40020800
 8000c48:	40020400 	.word	0x40020400
 8000c4c:	40020000 	.word	0x40020000

08000c50 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <Error_Handler+0x8>

08000c5c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	607b      	str	r3, [r7, #4]
 8000c66:	4b10      	ldr	r3, [pc, #64]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c6a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c70:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c72:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000c7a:	607b      	str	r3, [r7, #4]
 8000c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	603b      	str	r3, [r7, #0]
 8000c82:	4b09      	ldr	r3, [pc, #36]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c86:	4a08      	ldr	r2, [pc, #32]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c88:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c8e:	4b06      	ldr	r3, [pc, #24]	@ (8000ca8 <HAL_MspInit+0x4c>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c96:	603b      	str	r3, [r7, #0]
 8000c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800

08000cac <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a17      	ldr	r2, [pc, #92]	@ (8000d28 <HAL_ADC_MspInit+0x7c>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d127      	bne.n	8000d1e <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b16      	ldr	r3, [pc, #88]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cd6:	4a15      	ldr	r2, [pc, #84]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cd8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cdc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cde:	4b13      	ldr	r3, [pc, #76]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000ce0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <HAL_ADC_MspInit+0x80>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d06:	23c0      	movs	r3, #192	@ 0xc0
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 0314 	add.w	r3, r7, #20
 8000d16:	4619      	mov	r1, r3
 8000d18:	4805      	ldr	r0, [pc, #20]	@ (8000d30 <HAL_ADC_MspInit+0x84>)
 8000d1a:	f000 ff4d 	bl	8001bb8 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000d1e:	bf00      	nop
 8000d20:	3728      	adds	r7, #40	@ 0x28
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40012000 	.word	0x40012000
 8000d2c:	40023800 	.word	0x40023800
 8000d30:	40020000 	.word	0x40020000

08000d34 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b085      	sub	sp, #20
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a0b      	ldr	r2, [pc, #44]	@ (8000d70 <HAL_CRC_MspInit+0x3c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d10d      	bne.n	8000d62 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	60fb      	str	r3, [r7, #12]
 8000d4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d74 <HAL_CRC_MspInit+0x40>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a09      	ldr	r2, [pc, #36]	@ (8000d74 <HAL_CRC_MspInit+0x40>)
 8000d50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b07      	ldr	r3, [pc, #28]	@ (8000d74 <HAL_CRC_MspInit+0x40>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d5e:	60fb      	str	r3, [r7, #12]
 8000d60:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000d62:	bf00      	nop
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	40023000 	.word	0x40023000
 8000d74:	40023800 	.word	0x40023800

08000d78 <HAL_DAC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdac: DAC handle pointer
  * @retval None
  */
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08a      	sub	sp, #40	@ 0x28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a17      	ldr	r2, [pc, #92]	@ (8000df4 <HAL_DAC_MspInit+0x7c>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d127      	bne.n	8000dea <HAL_DAC_MspInit+0x72>
  {
    /* USER CODE BEGIN DAC_MspInit 0 */

    /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <HAL_DAC_MspInit+0x80>)
 8000da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <HAL_DAC_MspInit+0x80>)
 8000da4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000da8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <HAL_DAC_MspInit+0x80>)
 8000dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_DAC_MspInit+0x80>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000df8 <HAL_DAC_MspInit+0x80>)
 8000dc0:	f043 0301 	orr.w	r3, r3, #1
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <HAL_DAC_MspInit+0x80>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0301 	and.w	r3, r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dd2:	2330      	movs	r3, #48	@ 0x30
 8000dd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4805      	ldr	r0, [pc, #20]	@ (8000dfc <HAL_DAC_MspInit+0x84>)
 8000de6:	f000 fee7 	bl	8001bb8 <HAL_GPIO_Init>

    /* USER CODE END DAC_MspInit 1 */

  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	@ 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40007400 	.word	0x40007400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	@ 0x28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
 8000e12:	609a      	str	r2, [r3, #8]
 8000e14:	60da      	str	r2, [r3, #12]
 8000e16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a30      	ldr	r2, [pc, #192]	@ (8000ee0 <HAL_SPI_MspInit+0xe0>)
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d15a      	bne.n	8000ed8 <HAL_SPI_MspInit+0xd8>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	613b      	str	r3, [r7, #16]
 8000e26:	4b2f      	ldr	r3, [pc, #188]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e2a:	4a2e      	ldr	r2, [pc, #184]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e30:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e32:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e36:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e3a:	613b      	str	r3, [r7, #16]
 8000e3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	4b28      	ldr	r3, [pc, #160]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	4a27      	ldr	r2, [pc, #156]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e48:	f043 0304 	orr.w	r3, r3, #4
 8000e4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4e:	4b25      	ldr	r3, [pc, #148]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e52:	f003 0304 	and.w	r3, r3, #4
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	4b21      	ldr	r3, [pc, #132]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	4a20      	ldr	r2, [pc, #128]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e64:	f043 0302 	orr.w	r3, r3, #2
 8000e68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ee4 <HAL_SPI_MspInit+0xe4>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e76:	2302      	movs	r3, #2
 8000e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7a:	2302      	movs	r3, #2
 8000e7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e82:	2303      	movs	r3, #3
 8000e84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000e86:	2307      	movs	r3, #7
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e8a:	f107 0314 	add.w	r3, r7, #20
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4815      	ldr	r0, [pc, #84]	@ (8000ee8 <HAL_SPI_MspInit+0xe8>)
 8000e92:	f000 fe91 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e96:	2304      	movs	r3, #4
 8000e98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea2:	2303      	movs	r3, #3
 8000ea4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea6:	2305      	movs	r3, #5
 8000ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	4619      	mov	r1, r3
 8000eb0:	480d      	ldr	r0, [pc, #52]	@ (8000ee8 <HAL_SPI_MspInit+0xe8>)
 8000eb2:	f000 fe81 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000eb6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec4:	2303      	movs	r3, #3
 8000ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ec8:	2305      	movs	r3, #5
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4806      	ldr	r0, [pc, #24]	@ (8000eec <HAL_SPI_MspInit+0xec>)
 8000ed4:	f000 fe70 	bl	8001bb8 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000ed8:	bf00      	nop
 8000eda:	3728      	adds	r7, #40	@ 0x28
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	40003800 	.word	0x40003800
 8000ee4:	40023800 	.word	0x40023800
 8000ee8:	40020800 	.word	0x40020800
 8000eec:	40020400 	.word	0x40020400

08000ef0 <HAL_TIM_Encoder_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_encoder: TIM_Encoder handle pointer
  * @retval None
  */
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b08c      	sub	sp, #48	@ 0x30
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a32      	ldr	r2, [pc, #200]	@ (8000fd8 <HAL_TIM_Encoder_MspInit+0xe8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d12d      	bne.n	8000f6e <HAL_TIM_Encoder_MspInit+0x7e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	4b31      	ldr	r3, [pc, #196]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f1a:	4a30      	ldr	r2, [pc, #192]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f22:	4b2e      	ldr	r3, [pc, #184]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	4b2a      	ldr	r3, [pc, #168]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a29      	ldr	r2, [pc, #164]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f38:	f043 0301 	orr.w	r3, r3, #1
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b27      	ldr	r3, [pc, #156]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0301 	and.w	r3, r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	481e      	ldr	r0, [pc, #120]	@ (8000fe0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8000f68:	f000 fe26 	bl	8001bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM4_MspInit 1 */

    /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f6c:	e030      	b.n	8000fd0 <HAL_TIM_Encoder_MspInit+0xe0>
  else if(htim_encoder->Instance==TIM4)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a1c      	ldr	r2, [pc, #112]	@ (8000fe4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d12b      	bne.n	8000fd0 <HAL_TIM_Encoder_MspInit+0xe0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	613b      	str	r3, [r7, #16]
 8000f7c:	4b17      	ldr	r3, [pc, #92]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f80:	4a16      	ldr	r2, [pc, #88]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f88:	4b14      	ldr	r3, [pc, #80]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8c:	f003 0304 	and.w	r3, r3, #4
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	4b10      	ldr	r3, [pc, #64]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9c:	4a0f      	ldr	r2, [pc, #60]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000f9e:	f043 0302 	orr.w	r3, r3, #2
 8000fa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa4:	4b0d      	ldr	r3, [pc, #52]	@ (8000fdc <HAL_TIM_Encoder_MspInit+0xec>)
 8000fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa8:	f003 0302 	and.w	r3, r3, #2
 8000fac:	60fb      	str	r3, [r7, #12]
 8000fae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000fb0:	23c0      	movs	r3, #192	@ 0xc0
 8000fb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc4:	f107 031c 	add.w	r3, r7, #28
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4807      	ldr	r0, [pc, #28]	@ (8000fe8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8000fcc:	f000 fdf4 	bl	8001bb8 <HAL_GPIO_Init>
}
 8000fd0:	bf00      	nop
 8000fd2:	3730      	adds	r7, #48	@ 0x30
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40010000 	.word	0x40010000
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	40020000 	.word	0x40020000
 8000fe4:	40000800 	.word	0x40000800
 8000fe8:	40020400 	.word	0x40020400

08000fec <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ffc:	d10d      	bne.n	800101a <HAL_TIM_PWM_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b09      	ldr	r3, [pc, #36]	@ (8001028 <HAL_TIM_PWM_MspInit+0x3c>)
 8001004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001006:	4a08      	ldr	r2, [pc, #32]	@ (8001028 <HAL_TIM_PWM_MspInit+0x3c>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6413      	str	r3, [r2, #64]	@ 0x40
 800100e:	4b06      	ldr	r3, [pc, #24]	@ (8001028 <HAL_TIM_PWM_MspInit+0x3c>)
 8001010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800101a:	bf00      	nop
 800101c:	3714      	adds	r7, #20
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	40023800 	.word	0x40023800

0800102c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b08a      	sub	sp, #40	@ 0x28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	2200      	movs	r2, #0
 800103a:	601a      	str	r2, [r3, #0]
 800103c:	605a      	str	r2, [r3, #4]
 800103e:	609a      	str	r2, [r3, #8]
 8001040:	60da      	str	r2, [r3, #12]
 8001042:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800104c:	d13c      	bne.n	80010c8 <HAL_TIM_MspPostInit+0x9c>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	613b      	str	r3, [r7, #16]
 8001052:	4b1f      	ldr	r3, [pc, #124]	@ (80010d0 <HAL_TIM_MspPostInit+0xa4>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001056:	4a1e      	ldr	r2, [pc, #120]	@ (80010d0 <HAL_TIM_MspPostInit+0xa4>)
 8001058:	f043 0301 	orr.w	r3, r3, #1
 800105c:	6313      	str	r3, [r2, #48]	@ 0x30
 800105e:	4b1c      	ldr	r3, [pc, #112]	@ (80010d0 <HAL_TIM_MspPostInit+0xa4>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b18      	ldr	r3, [pc, #96]	@ (80010d0 <HAL_TIM_MspPostInit+0xa4>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a17      	ldr	r2, [pc, #92]	@ (80010d0 <HAL_TIM_MspPostInit+0xa4>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b15      	ldr	r3, [pc, #84]	@ (80010d0 <HAL_TIM_MspPostInit+0xa4>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001086:	2303      	movs	r3, #3
 8001088:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800108a:	2302      	movs	r3, #2
 800108c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	2300      	movs	r3, #0
 8001094:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001096:	2301      	movs	r3, #1
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	480c      	ldr	r0, [pc, #48]	@ (80010d4 <HAL_TIM_MspPostInit+0xa8>)
 80010a2:	f000 fd89 	bl	8001bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80010a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ac:	2302      	movs	r3, #2
 80010ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b0:	2300      	movs	r3, #0
 80010b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b4:	2300      	movs	r3, #0
 80010b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80010b8:	2301      	movs	r3, #1
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <HAL_TIM_MspPostInit+0xac>)
 80010c4:	f000 fd78 	bl	8001bb8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80010c8:	bf00      	nop
 80010ca:	3728      	adds	r7, #40	@ 0x28
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	40023800 	.word	0x40023800
 80010d4:	40020000 	.word	0x40020000
 80010d8:	40020400 	.word	0x40020400

080010dc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b08a      	sub	sp, #40	@ 0x28
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]
 80010f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a19      	ldr	r2, [pc, #100]	@ (8001160 <HAL_UART_MspInit+0x84>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d12b      	bne.n	8001156 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b18      	ldr	r3, [pc, #96]	@ (8001164 <HAL_UART_MspInit+0x88>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	4a17      	ldr	r2, [pc, #92]	@ (8001164 <HAL_UART_MspInit+0x88>)
 8001108:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800110c:	6413      	str	r3, [r2, #64]	@ 0x40
 800110e:	4b15      	ldr	r3, [pc, #84]	@ (8001164 <HAL_UART_MspInit+0x88>)
 8001110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b11      	ldr	r3, [pc, #68]	@ (8001164 <HAL_UART_MspInit+0x88>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a10      	ldr	r2, [pc, #64]	@ (8001164 <HAL_UART_MspInit+0x88>)
 8001124:	f043 0301 	orr.w	r3, r3, #1
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b0e      	ldr	r3, [pc, #56]	@ (8001164 <HAL_UART_MspInit+0x88>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0301 	and.w	r3, r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001136:	230c      	movs	r3, #12
 8001138:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113a:	2302      	movs	r3, #2
 800113c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113e:	2300      	movs	r3, #0
 8001140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001142:	2303      	movs	r3, #3
 8001144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001146:	2307      	movs	r3, #7
 8001148:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 0314 	add.w	r3, r7, #20
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <HAL_UART_MspInit+0x8c>)
 8001152:	f000 fd31 	bl	8001bb8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	@ 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40004400 	.word	0x40004400
 8001164:	40023800 	.word	0x40023800
 8001168:	40020000 	.word	0x40020000

0800116c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <NMI_Handler+0x4>

08001174 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <HardFault_Handler+0x4>

0800117c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <MemManage_Handler+0x4>

08001184 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	bf00      	nop
 8001192:	e7fd      	b.n	8001190 <UsageFault_Handler+0x4>

08001194 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr

080011a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c2:	f000 f89b 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
	...

080011cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <OTG_FS_IRQHandler+0x10>)
 80011d2:	f001 f803 	bl	80021dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200017e8 	.word	0x200017e8

080011e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	@ (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	@ (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001204:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800123c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001208:	f7ff ffea 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	@ (8001240 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	@ (8001244 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	@ (8001248 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	@ (800124c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	@ (8001250 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001232:	f008 fa9f 	bl	8009774 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001236:	f7ff f95d 	bl	80004f4 <main>
  bx  lr    
 800123a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	2000010c 	.word	0x2000010c
  ldr r2, =_sidata
 8001248:	0800983c 	.word	0x0800983c
  ldr r2, =_sbss
 800124c:	2000010c 	.word	0x2000010c
  ldr r4, =_ebss
 8001250:	20001eec 	.word	0x20001eec

08001254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC_IRQHandler>
	...

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800125c:	4b0e      	ldr	r3, [pc, #56]	@ (8001298 <HAL_Init+0x40>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a0d      	ldr	r2, [pc, #52]	@ (8001298 <HAL_Init+0x40>)
 8001262:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001266:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001268:	4b0b      	ldr	r3, [pc, #44]	@ (8001298 <HAL_Init+0x40>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <HAL_Init+0x40>)
 800126e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001272:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001274:	4b08      	ldr	r3, [pc, #32]	@ (8001298 <HAL_Init+0x40>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a07      	ldr	r2, [pc, #28]	@ (8001298 <HAL_Init+0x40>)
 800127a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800127e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001280:	2003      	movs	r0, #3
 8001282:	f000 fbc1 	bl	8001a08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001286:	200f      	movs	r0, #15
 8001288:	f000 f808 	bl	800129c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800128c:	f7ff fce6 	bl	8000c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001290:	2300      	movs	r3, #0
}
 8001292:	4618      	mov	r0, r3
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	40023c00 	.word	0x40023c00

0800129c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012a4:	4b12      	ldr	r3, [pc, #72]	@ (80012f0 <HAL_InitTick+0x54>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_InitTick+0x58>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	4619      	mov	r1, r3
 80012ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012ba:	4618      	mov	r0, r3
 80012bc:	f000 fbd9 	bl	8001a72 <HAL_SYSTICK_Config>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e00e      	b.n	80012e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b0f      	cmp	r3, #15
 80012ce:	d80a      	bhi.n	80012e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012d0:	2200      	movs	r2, #0
 80012d2:	6879      	ldr	r1, [r7, #4]
 80012d4:	f04f 30ff 	mov.w	r0, #4294967295
 80012d8:	f000 fba1 	bl	8001a1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_InitTick+0x5c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
 80012e4:	e000      	b.n	80012e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3708      	adds	r7, #8
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	20000008 	.word	0x20000008
 80012f8:	20000004 	.word	0x20000004

080012fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b06      	ldr	r3, [pc, #24]	@ (800131c <HAL_IncTick+0x20>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	4b06      	ldr	r3, [pc, #24]	@ (8001320 <HAL_IncTick+0x24>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	4413      	add	r3, r2
 800130c:	4a04      	ldr	r2, [pc, #16]	@ (8001320 <HAL_IncTick+0x24>)
 800130e:	6013      	str	r3, [r2, #0]
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	20000008 	.word	0x20000008
 8001320:	20000304 	.word	0x20000304

08001324 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  return uwTick;
 8001328:	4b03      	ldr	r3, [pc, #12]	@ (8001338 <HAL_GetTick+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
}
 800132c:	4618      	mov	r0, r3
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	20000304 	.word	0x20000304

0800133c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001344:	f7ff ffee 	bl	8001324 <HAL_GetTick>
 8001348:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001354:	d005      	beq.n	8001362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001356:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <HAL_Delay+0x44>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	461a      	mov	r2, r3
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	4413      	add	r3, r2
 8001360:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001362:	bf00      	nop
 8001364:	f7ff ffde 	bl	8001324 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	68fa      	ldr	r2, [r7, #12]
 8001370:	429a      	cmp	r2, r3
 8001372:	d8f7      	bhi.n	8001364 <HAL_Delay+0x28>
  {
  }
}
 8001374:	bf00      	nop
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000008 	.word	0x20000008

08001384 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e033      	b.n	8001402 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fc82 	bl	8000cac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2200      	movs	r2, #0
 80013b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d118      	bne.n	80013f4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80013ca:	f023 0302 	bic.w	r3, r3, #2
 80013ce:	f043 0202 	orr.w	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 f94a 	bl	8001670 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2200      	movs	r2, #0
 80013e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013e6:	f023 0303 	bic.w	r3, r3, #3
 80013ea:	f043 0201 	orr.w	r2, r3, #1
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80013f2:	e001      	b.n	80013f8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80013f4:	2301      	movs	r3, #1
 80013f6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	2200      	movs	r2, #0
 80013fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001400:	7bfb      	ldrb	r3, [r7, #15]
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001420:	2b01      	cmp	r3, #1
 8001422:	d101      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x1c>
 8001424:	2302      	movs	r3, #2
 8001426:	e113      	b.n	8001650 <HAL_ADC_ConfigChannel+0x244>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b09      	cmp	r3, #9
 8001436:	d925      	bls.n	8001484 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	68d9      	ldr	r1, [r3, #12]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	461a      	mov	r2, r3
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	3b1e      	subs	r3, #30
 800144e:	2207      	movs	r2, #7
 8001450:	fa02 f303 	lsl.w	r3, r2, r3
 8001454:	43da      	mvns	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	400a      	ands	r2, r1
 800145c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	68d9      	ldr	r1, [r3, #12]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	689a      	ldr	r2, [r3, #8]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	b29b      	uxth	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	4603      	mov	r3, r0
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4403      	add	r3, r0
 8001476:	3b1e      	subs	r3, #30
 8001478:	409a      	lsls	r2, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	430a      	orrs	r2, r1
 8001480:	60da      	str	r2, [r3, #12]
 8001482:	e022      	b.n	80014ca <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6919      	ldr	r1, [r3, #16]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	b29b      	uxth	r3, r3
 8001490:	461a      	mov	r2, r3
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	2207      	movs	r2, #7
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43da      	mvns	r2, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	400a      	ands	r2, r1
 80014a6:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6919      	ldr	r1, [r3, #16]
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	689a      	ldr	r2, [r3, #8]
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4618      	mov	r0, r3
 80014ba:	4603      	mov	r3, r0
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	4403      	add	r3, r0
 80014c0:	409a      	lsls	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	2b06      	cmp	r3, #6
 80014d0:	d824      	bhi.n	800151c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	3b05      	subs	r3, #5
 80014e4:	221f      	movs	r2, #31
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	400a      	ands	r2, r1
 80014f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	b29b      	uxth	r3, r3
 8001500:	4618      	mov	r0, r3
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	4413      	add	r3, r2
 800150c:	3b05      	subs	r3, #5
 800150e:	fa00 f203 	lsl.w	r2, r0, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	430a      	orrs	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	@ 0x34
 800151a:	e04c      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	2b0c      	cmp	r3, #12
 8001522:	d824      	bhi.n	800156e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b23      	subs	r3, #35	@ 0x23
 8001536:	221f      	movs	r2, #31
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	43da      	mvns	r2, r3
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	400a      	ands	r2, r1
 8001544:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	b29b      	uxth	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685a      	ldr	r2, [r3, #4]
 8001558:	4613      	mov	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4413      	add	r3, r2
 800155e:	3b23      	subs	r3, #35	@ 0x23
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	631a      	str	r2, [r3, #48]	@ 0x30
 800156c:	e023      	b.n	80015b6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	685a      	ldr	r2, [r3, #4]
 8001578:	4613      	mov	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	4413      	add	r3, r2
 800157e:	3b41      	subs	r3, #65	@ 0x41
 8001580:	221f      	movs	r2, #31
 8001582:	fa02 f303 	lsl.w	r3, r2, r3
 8001586:	43da      	mvns	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	400a      	ands	r2, r1
 800158e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	4618      	mov	r0, r3
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685a      	ldr	r2, [r3, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	009b      	lsls	r3, r3, #2
 80015a6:	4413      	add	r3, r2
 80015a8:	3b41      	subs	r3, #65	@ 0x41
 80015aa:	fa00 f203 	lsl.w	r2, r0, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	430a      	orrs	r2, r1
 80015b4:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015b6:	4b29      	ldr	r3, [pc, #164]	@ (800165c <HAL_ADC_ConfigChannel+0x250>)
 80015b8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a28      	ldr	r2, [pc, #160]	@ (8001660 <HAL_ADC_ConfigChannel+0x254>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d10f      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1d8>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2b12      	cmp	r3, #18
 80015ca:	d10b      	bne.n	80015e4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1d      	ldr	r2, [pc, #116]	@ (8001660 <HAL_ADC_ConfigChannel+0x254>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d12b      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x23a>
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1c      	ldr	r2, [pc, #112]	@ (8001664 <HAL_ADC_ConfigChannel+0x258>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d003      	beq.n	8001600 <HAL_ADC_ConfigChannel+0x1f4>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b11      	cmp	r3, #17
 80015fe:	d122      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a11      	ldr	r2, [pc, #68]	@ (8001664 <HAL_ADC_ConfigChannel+0x258>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d111      	bne.n	8001646 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001622:	4b11      	ldr	r3, [pc, #68]	@ (8001668 <HAL_ADC_ConfigChannel+0x25c>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_ADC_ConfigChannel+0x260>)
 8001628:	fba2 2303 	umull	r2, r3, r2, r3
 800162c:	0c9a      	lsrs	r2, r3, #18
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001638:	e002      	b.n	8001640 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	3b01      	subs	r3, #1
 800163e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f9      	bne.n	800163a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
}
 8001650:	4618      	mov	r0, r3
 8001652:	3714      	adds	r7, #20
 8001654:	46bd      	mov	sp, r7
 8001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165a:	4770      	bx	lr
 800165c:	40012300 	.word	0x40012300
 8001660:	40012000 	.word	0x40012000
 8001664:	10000012 	.word	0x10000012
 8001668:	20000000 	.word	0x20000000
 800166c:	431bde83 	.word	0x431bde83

08001670 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001678:	4b79      	ldr	r3, [pc, #484]	@ (8001860 <ADC_Init+0x1f0>)
 800167a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	685b      	ldr	r3, [r3, #4]
 8001680:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	685a      	ldr	r2, [r3, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6859      	ldr	r1, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	691b      	ldr	r3, [r3, #16]
 80016b0:	021a      	lsls	r2, r3, #8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	430a      	orrs	r2, r1
 80016b8:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	685a      	ldr	r2, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80016c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6859      	ldr	r1, [r3, #4]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001702:	4a58      	ldr	r2, [pc, #352]	@ (8001864 <ADC_Init+0x1f4>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d022      	beq.n	800174e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001716:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6899      	ldr	r1, [r3, #8]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	430a      	orrs	r2, r1
 8001728:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001738:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6899      	ldr	r1, [r3, #8]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	430a      	orrs	r2, r1
 800174a:	609a      	str	r2, [r3, #8]
 800174c:	e00f      	b.n	800176e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	689a      	ldr	r2, [r3, #8]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800175c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689a      	ldr	r2, [r3, #8]
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800176c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	689a      	ldr	r2, [r3, #8]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f022 0202 	bic.w	r2, r2, #2
 800177c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6899      	ldr	r1, [r3, #8]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	7e1b      	ldrb	r3, [r3, #24]
 8001788:	005a      	lsls	r2, r3, #1
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d01b      	beq.n	80017d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80017aa:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	685a      	ldr	r2, [r3, #4]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80017ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6859      	ldr	r1, [r3, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017c6:	3b01      	subs	r3, #1
 80017c8:	035a      	lsls	r2, r3, #13
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	e007      	b.n	80017e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	685a      	ldr	r2, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80017e2:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80017f2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	69db      	ldr	r3, [r3, #28]
 80017fe:	3b01      	subs	r3, #1
 8001800:	051a      	lsls	r2, r3, #20
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001818:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	6899      	ldr	r1, [r3, #8]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001826:	025a      	lsls	r2, r3, #9
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	689a      	ldr	r2, [r3, #8]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800183e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6899      	ldr	r1, [r3, #8]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	695b      	ldr	r3, [r3, #20]
 800184a:	029a      	lsls	r2, r3, #10
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	430a      	orrs	r2, r1
 8001852:	609a      	str	r2, [r3, #8]
}
 8001854:	bf00      	nop
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	40012300 	.word	0x40012300
 8001864:	0f000001 	.word	0x0f000001

08001868 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f003 0307 	and.w	r3, r3, #7
 8001876:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001878:	4b0c      	ldr	r3, [pc, #48]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001884:	4013      	ands	r3, r2
 8001886:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001890:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001894:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001898:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800189a:	4a04      	ldr	r2, [pc, #16]	@ (80018ac <__NVIC_SetPriorityGrouping+0x44>)
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	60d3      	str	r3, [r2, #12]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__NVIC_GetPriorityGrouping+0x18>)
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	0a1b      	lsrs	r3, r3, #8
 80018ba:	f003 0307 	and.w	r3, r3, #7
}
 80018be:	4618      	mov	r0, r3
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	db0b      	blt.n	80018f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	f003 021f 	and.w	r2, r3, #31
 80018e4:	4907      	ldr	r1, [pc, #28]	@ (8001904 <__NVIC_EnableIRQ+0x38>)
 80018e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ea:	095b      	lsrs	r3, r3, #5
 80018ec:	2001      	movs	r0, #1
 80018ee:	fa00 f202 	lsl.w	r2, r0, r2
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	e000e100 	.word	0xe000e100

08001908 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	4603      	mov	r3, r0
 8001910:	6039      	str	r1, [r7, #0]
 8001912:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001914:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001918:	2b00      	cmp	r3, #0
 800191a:	db0a      	blt.n	8001932 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	b2da      	uxtb	r2, r3
 8001920:	490c      	ldr	r1, [pc, #48]	@ (8001954 <__NVIC_SetPriority+0x4c>)
 8001922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	b2d2      	uxtb	r2, r2
 800192a:	440b      	add	r3, r1
 800192c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001930:	e00a      	b.n	8001948 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4908      	ldr	r1, [pc, #32]	@ (8001958 <__NVIC_SetPriority+0x50>)
 8001938:	79fb      	ldrb	r3, [r7, #7]
 800193a:	f003 030f 	and.w	r3, r3, #15
 800193e:	3b04      	subs	r3, #4
 8001940:	0112      	lsls	r2, r2, #4
 8001942:	b2d2      	uxtb	r2, r2
 8001944:	440b      	add	r3, r1
 8001946:	761a      	strb	r2, [r3, #24]
}
 8001948:	bf00      	nop
 800194a:	370c      	adds	r7, #12
 800194c:	46bd      	mov	sp, r7
 800194e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001952:	4770      	bx	lr
 8001954:	e000e100 	.word	0xe000e100
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800195c:	b480      	push	{r7}
 800195e:	b089      	sub	sp, #36	@ 0x24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f1c3 0307 	rsb	r3, r3, #7
 8001976:	2b04      	cmp	r3, #4
 8001978:	bf28      	it	cs
 800197a:	2304      	movcs	r3, #4
 800197c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3304      	adds	r3, #4
 8001982:	2b06      	cmp	r3, #6
 8001984:	d902      	bls.n	800198c <NVIC_EncodePriority+0x30>
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	3b03      	subs	r3, #3
 800198a:	e000      	b.n	800198e <NVIC_EncodePriority+0x32>
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	f04f 32ff 	mov.w	r2, #4294967295
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	fa02 f303 	lsl.w	r3, r2, r3
 800199a:	43da      	mvns	r2, r3
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	401a      	ands	r2, r3
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019a4:	f04f 31ff 	mov.w	r1, #4294967295
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa01 f303 	lsl.w	r3, r1, r3
 80019ae:	43d9      	mvns	r1, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019b4:	4313      	orrs	r3, r2
         );
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3724      	adds	r7, #36	@ 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
	...

080019c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	3b01      	subs	r3, #1
 80019d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019d4:	d301      	bcc.n	80019da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019d6:	2301      	movs	r3, #1
 80019d8:	e00f      	b.n	80019fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019da:	4a0a      	ldr	r2, [pc, #40]	@ (8001a04 <SysTick_Config+0x40>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3b01      	subs	r3, #1
 80019e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019e2:	210f      	movs	r1, #15
 80019e4:	f04f 30ff 	mov.w	r0, #4294967295
 80019e8:	f7ff ff8e 	bl	8001908 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019ec:	4b05      	ldr	r3, [pc, #20]	@ (8001a04 <SysTick_Config+0x40>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019f2:	4b04      	ldr	r3, [pc, #16]	@ (8001a04 <SysTick_Config+0x40>)
 80019f4:	2207      	movs	r2, #7
 80019f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	e000e010 	.word	0xe000e010

08001a08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b082      	sub	sp, #8
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ff29 	bl	8001868 <__NVIC_SetPriorityGrouping>
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b086      	sub	sp, #24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
 8001a2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a30:	f7ff ff3e 	bl	80018b0 <__NVIC_GetPriorityGrouping>
 8001a34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a36:	687a      	ldr	r2, [r7, #4]
 8001a38:	68b9      	ldr	r1, [r7, #8]
 8001a3a:	6978      	ldr	r0, [r7, #20]
 8001a3c:	f7ff ff8e 	bl	800195c <NVIC_EncodePriority>
 8001a40:	4602      	mov	r2, r0
 8001a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a46:	4611      	mov	r1, r2
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7ff ff5d 	bl	8001908 <__NVIC_SetPriority>
}
 8001a4e:	bf00      	nop
 8001a50:	3718      	adds	r7, #24
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff31 	bl	80018cc <__NVIC_EnableIRQ>
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}

08001a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a72:	b580      	push	{r7, lr}
 8001a74:	b082      	sub	sp, #8
 8001a76:	af00      	add	r7, sp, #0
 8001a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a7a:	6878      	ldr	r0, [r7, #4]
 8001a7c:	f7ff ffa2 	bl	80019c4 <SysTick_Config>
 8001a80:	4603      	mov	r3, r0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d101      	bne.n	8001a9c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e00e      	b.n	8001aba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	795b      	ldrb	r3, [r3, #5]
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d105      	bne.n	8001ab2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff f941 	bl	8000d34 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e014      	b.n	8001afe <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	791b      	ldrb	r3, [r3, #4]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f7ff f947 	bl	8000d78 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3708      	adds	r7, #8
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001b06:	b480      	push	{r7}
 8001b08:	b089      	sub	sp, #36	@ 0x24
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b12:	2300      	movs	r3, #0
 8001b14:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d002      	beq.n	8001b22 <HAL_DAC_ConfigChannel+0x1c>
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e042      	b.n	8001bac <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	795b      	ldrb	r3, [r3, #5]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d101      	bne.n	8001b32 <HAL_DAC_ConfigChannel+0x2c>
 8001b2e:	2302      	movs	r3, #2
 8001b30:	e03c      	b.n	8001bac <HAL_DAC_ConfigChannel+0xa6>
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	2201      	movs	r2, #1
 8001b36:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f003 0310 	and.w	r3, r3, #16
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	69ba      	ldr	r2, [r7, #24]
 8001b76:	4313      	orrs	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	6819      	ldr	r1, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	22c0      	movs	r2, #192	@ 0xc0
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	43da      	mvns	r2, r3
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	400a      	ands	r2, r1
 8001b9c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3724      	adds	r7, #36	@ 0x24
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b089      	sub	sp, #36	@ 0x24
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
 8001bd2:	e165      	b.n	8001ea0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	f040 8154 	bne.w	8001e9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f003 0303 	and.w	r3, r3, #3
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d005      	beq.n	8001c0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d130      	bne.n	8001c6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	2203      	movs	r2, #3
 8001c16:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1a:	43db      	mvns	r3, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4013      	ands	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	69fb      	ldr	r3, [r7, #28]
 8001c28:	005b      	lsls	r3, r3, #1
 8001c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2e:	69ba      	ldr	r2, [r7, #24]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c40:	2201      	movs	r2, #1
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0201 	and.w	r2, r3, #1
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4313      	orrs	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 0303 	and.w	r3, r3, #3
 8001c74:	2b03      	cmp	r3, #3
 8001c76:	d017      	beq.n	8001ca8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	005b      	lsls	r3, r3, #1
 8001c82:	2203      	movs	r2, #3
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	43db      	mvns	r3, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	689a      	ldr	r2, [r3, #8]
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	69ba      	ldr	r2, [r7, #24]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d123      	bne.n	8001cfc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cb4:	69fb      	ldr	r3, [r7, #28]
 8001cb6:	08da      	lsrs	r2, r3, #3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	3208      	adds	r2, #8
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	f003 0307 	and.w	r3, r3, #7
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	691a      	ldr	r2, [r3, #16]
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	f003 0307 	and.w	r3, r3, #7
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	08da      	lsrs	r2, r3, #3
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	3208      	adds	r2, #8
 8001cf6:	69b9      	ldr	r1, [r7, #24]
 8001cf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d02:	69fb      	ldr	r3, [r7, #28]
 8001d04:	005b      	lsls	r3, r3, #1
 8001d06:	2203      	movs	r2, #3
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0203 	and.w	r2, r3, #3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	f000 80ae 	beq.w	8001e9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d3e:	2300      	movs	r3, #0
 8001d40:	60fb      	str	r3, [r7, #12]
 8001d42:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb8 <HAL_GPIO_Init+0x300>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	4a5c      	ldr	r2, [pc, #368]	@ (8001eb8 <HAL_GPIO_Init+0x300>)
 8001d48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001eb8 <HAL_GPIO_Init+0x300>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d5a:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	089b      	lsrs	r3, r3, #2
 8001d60:	3302      	adds	r3, #2
 8001d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	f003 0303 	and.w	r3, r3, #3
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	220f      	movs	r2, #15
 8001d72:	fa02 f303 	lsl.w	r3, r2, r3
 8001d76:	43db      	mvns	r3, r3
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4f      	ldr	r2, [pc, #316]	@ (8001ec0 <HAL_GPIO_Init+0x308>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d025      	beq.n	8001dd2 <HAL_GPIO_Init+0x21a>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4e      	ldr	r2, [pc, #312]	@ (8001ec4 <HAL_GPIO_Init+0x30c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d01f      	beq.n	8001dce <HAL_GPIO_Init+0x216>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4d      	ldr	r2, [pc, #308]	@ (8001ec8 <HAL_GPIO_Init+0x310>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d019      	beq.n	8001dca <HAL_GPIO_Init+0x212>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4c      	ldr	r2, [pc, #304]	@ (8001ecc <HAL_GPIO_Init+0x314>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_GPIO_Init+0x20e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed0 <HAL_GPIO_Init+0x318>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d00d      	beq.n	8001dc2 <HAL_GPIO_Init+0x20a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ed4 <HAL_GPIO_Init+0x31c>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d007      	beq.n	8001dbe <HAL_GPIO_Init+0x206>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a49      	ldr	r2, [pc, #292]	@ (8001ed8 <HAL_GPIO_Init+0x320>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d101      	bne.n	8001dba <HAL_GPIO_Init+0x202>
 8001db6:	2306      	movs	r3, #6
 8001db8:	e00c      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dba:	2307      	movs	r3, #7
 8001dbc:	e00a      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dbe:	2305      	movs	r3, #5
 8001dc0:	e008      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e006      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e004      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dca:	2302      	movs	r3, #2
 8001dcc:	e002      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e000      	b.n	8001dd4 <HAL_GPIO_Init+0x21c>
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	69fa      	ldr	r2, [r7, #28]
 8001dd6:	f002 0203 	and.w	r2, r2, #3
 8001dda:	0092      	lsls	r2, r2, #2
 8001ddc:	4093      	lsls	r3, r2
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de4:	4935      	ldr	r1, [pc, #212]	@ (8001ebc <HAL_GPIO_Init+0x304>)
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	089b      	lsrs	r3, r3, #2
 8001dea:	3302      	adds	r3, #2
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df2:	4b3a      	ldr	r3, [pc, #232]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	69ba      	ldr	r2, [r7, #24]
 8001dfe:	4013      	ands	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d003      	beq.n	8001e16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e16:	4a31      	ldr	r2, [pc, #196]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	43db      	mvns	r3, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d003      	beq.n	8001e40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e40:	4a26      	ldr	r2, [pc, #152]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e42:	69bb      	ldr	r3, [r7, #24]
 8001e44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e46:	4b25      	ldr	r3, [pc, #148]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	69ba      	ldr	r2, [r7, #24]
 8001e52:	4013      	ands	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d003      	beq.n	8001e6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e62:	69ba      	ldr	r2, [r7, #24]
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6a:	4a1c      	ldr	r2, [pc, #112]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e70:	4b1a      	ldr	r3, [pc, #104]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e94:	4a11      	ldr	r2, [pc, #68]	@ (8001edc <HAL_GPIO_Init+0x324>)
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	61fb      	str	r3, [r7, #28]
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	2b0f      	cmp	r3, #15
 8001ea4:	f67f ae96 	bls.w	8001bd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ea8:	bf00      	nop
 8001eaa:	bf00      	nop
 8001eac:	3724      	adds	r7, #36	@ 0x24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	40013800 	.word	0x40013800
 8001ec0:	40020000 	.word	0x40020000
 8001ec4:	40020400 	.word	0x40020400
 8001ec8:	40020800 	.word	0x40020800
 8001ecc:	40020c00 	.word	0x40020c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40021400 	.word	0x40021400
 8001ed8:	40021800 	.word	0x40021800
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f24:	887a      	ldrh	r2, [r7, #2]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	041a      	lsls	r2, r3, #16
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	400b      	ands	r3, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f46:	b580      	push	{r7, lr}
 8001f48:	b086      	sub	sp, #24
 8001f4a:	af02      	add	r7, sp, #8
 8001f4c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e108      	b.n	800216a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f007 f880 	bl	8009078 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f86:	d102      	bne.n	8001f8e <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f003 fc75 	bl	8005882 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6818      	ldr	r0, [r3, #0]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	7c1a      	ldrb	r2, [r3, #16]
 8001fa0:	f88d 2000 	strb.w	r2, [sp]
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fa8:	f003 fb54 	bl	8005654 <USB_CoreInit>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d005      	beq.n	8001fbe <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2202      	movs	r2, #2
 8001fb6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e0d5      	b.n	800216a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2100      	movs	r1, #0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f003 fc6d 	bl	80058a4 <USB_SetCurrentMode>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d005      	beq.n	8001fdc <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2202      	movs	r2, #2
 8001fd4:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e0c6      	b.n	800216a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fdc:	2300      	movs	r3, #0
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e04a      	b.n	8002078 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	3315      	adds	r3, #21
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ff6:	7bfa      	ldrb	r2, [r7, #15]
 8001ff8:	6879      	ldr	r1, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	00db      	lsls	r3, r3, #3
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	440b      	add	r3, r1
 8002004:	3314      	adds	r3, #20
 8002006:	7bfa      	ldrb	r2, [r7, #15]
 8002008:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	7bfb      	ldrb	r3, [r7, #15]
 800200e:	b298      	uxth	r0, r3
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	332e      	adds	r3, #46	@ 0x2e
 800201e:	4602      	mov	r2, r0
 8002020:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002022:	7bfa      	ldrb	r2, [r7, #15]
 8002024:	6879      	ldr	r1, [r7, #4]
 8002026:	4613      	mov	r3, r2
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4413      	add	r3, r2
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	440b      	add	r3, r1
 8002030:	3318      	adds	r3, #24
 8002032:	2200      	movs	r2, #0
 8002034:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002036:	7bfa      	ldrb	r2, [r7, #15]
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	4613      	mov	r3, r2
 800203c:	00db      	lsls	r3, r3, #3
 800203e:	4413      	add	r3, r2
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	440b      	add	r3, r1
 8002044:	331c      	adds	r3, #28
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800204a:	7bfa      	ldrb	r2, [r7, #15]
 800204c:	6879      	ldr	r1, [r7, #4]
 800204e:	4613      	mov	r3, r2
 8002050:	00db      	lsls	r3, r3, #3
 8002052:	4413      	add	r3, r2
 8002054:	009b      	lsls	r3, r3, #2
 8002056:	440b      	add	r3, r1
 8002058:	3320      	adds	r3, #32
 800205a:	2200      	movs	r2, #0
 800205c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800205e:	7bfa      	ldrb	r2, [r7, #15]
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3324      	adds	r3, #36	@ 0x24
 800206e:	2200      	movs	r2, #0
 8002070:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002072:	7bfb      	ldrb	r3, [r7, #15]
 8002074:	3301      	adds	r3, #1
 8002076:	73fb      	strb	r3, [r7, #15]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	791b      	ldrb	r3, [r3, #4]
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	429a      	cmp	r2, r3
 8002080:	d3af      	bcc.n	8001fe2 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002082:	2300      	movs	r3, #0
 8002084:	73fb      	strb	r3, [r7, #15]
 8002086:	e044      	b.n	8002112 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002088:	7bfa      	ldrb	r2, [r7, #15]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	00db      	lsls	r3, r3, #3
 8002090:	4413      	add	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800209a:	2200      	movs	r2, #0
 800209c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800209e:	7bfa      	ldrb	r2, [r7, #15]
 80020a0:	6879      	ldr	r1, [r7, #4]
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	440b      	add	r3, r1
 80020ac:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	4613      	mov	r3, r2
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	440b      	add	r3, r1
 80020c2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020c6:	2200      	movs	r2, #0
 80020c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020ca:	7bfa      	ldrb	r2, [r7, #15]
 80020cc:	6879      	ldr	r1, [r7, #4]
 80020ce:	4613      	mov	r3, r2
 80020d0:	00db      	lsls	r3, r3, #3
 80020d2:	4413      	add	r3, r2
 80020d4:	009b      	lsls	r3, r3, #2
 80020d6:	440b      	add	r3, r1
 80020d8:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	4413      	add	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80020f2:	2200      	movs	r2, #0
 80020f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020f6:	7bfa      	ldrb	r2, [r7, #15]
 80020f8:	6879      	ldr	r1, [r7, #4]
 80020fa:	4613      	mov	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	4413      	add	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	440b      	add	r3, r1
 8002104:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800210c:	7bfb      	ldrb	r3, [r7, #15]
 800210e:	3301      	adds	r3, #1
 8002110:	73fb      	strb	r3, [r7, #15]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	791b      	ldrb	r3, [r3, #4]
 8002116:	7bfa      	ldrb	r2, [r7, #15]
 8002118:	429a      	cmp	r2, r3
 800211a:	d3b5      	bcc.n	8002088 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	7c1a      	ldrb	r2, [r3, #16]
 8002124:	f88d 2000 	strb.w	r2, [sp]
 8002128:	3304      	adds	r3, #4
 800212a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800212c:	f003 fc06 	bl	800593c <USB_DevInit>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2202      	movs	r2, #2
 800213a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e013      	b.n	800216a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	7b1b      	ldrb	r3, [r3, #12]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f001 f96f 	bl	800343c <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f004 fc43 	bl	80069ee <USB_DevDisconnect>

  return HAL_OK;
 8002168:	2300      	movs	r3, #0
}
 800216a:	4618      	mov	r0, r3
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b084      	sub	sp, #16
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002186:	2b01      	cmp	r3, #1
 8002188:	d101      	bne.n	800218e <HAL_PCD_Start+0x1c>
 800218a:	2302      	movs	r3, #2
 800218c:	e022      	b.n	80021d4 <HAL_PCD_Start+0x62>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4618      	mov	r0, r3
 80021bc:	f003 fb50 	bl	8005860 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f004 fbf1 	bl	80069ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80021dc:	b590      	push	{r4, r7, lr}
 80021de:	b08d      	sub	sp, #52	@ 0x34
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fcaf 	bl	8006b56 <USB_GetMode>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f040 84b9 	bne.w	8002b72 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4618      	mov	r0, r3
 8002206:	f004 fc13 	bl	8006a30 <USB_ReadInterrupts>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	f000 84af 	beq.w	8002b70 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	0a1b      	lsrs	r3, r3, #8
 800221c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f004 fc00 	bl	8006a30 <USB_ReadInterrupts>
 8002230:	4603      	mov	r3, r0
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	2b02      	cmp	r3, #2
 8002238:	d107      	bne.n	800224a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	695a      	ldr	r2, [r3, #20]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f002 0202 	and.w	r2, r2, #2
 8002248:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f004 fbee 	bl	8006a30 <USB_ReadInterrupts>
 8002254:	4603      	mov	r3, r0
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b10      	cmp	r3, #16
 800225c:	d161      	bne.n	8002322 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	699a      	ldr	r2, [r3, #24]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0210 	bic.w	r2, r2, #16
 800226c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	f003 020f 	and.w	r2, r3, #15
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	4413      	add	r3, r2
 800228a:	3304      	adds	r3, #4
 800228c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800228e:	69bb      	ldr	r3, [r7, #24]
 8002290:	0c5b      	lsrs	r3, r3, #17
 8002292:	f003 030f 	and.w	r3, r3, #15
 8002296:	2b02      	cmp	r3, #2
 8002298:	d124      	bne.n	80022e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d035      	beq.n	8002312 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	091b      	lsrs	r3, r3, #4
 80022ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80022b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	6a38      	ldr	r0, [r7, #32]
 80022ba:	f004 fa25 	bl	8006708 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	68da      	ldr	r2, [r3, #12]
 80022c2:	69bb      	ldr	r3, [r7, #24]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022ca:	441a      	add	r2, r3
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	695a      	ldr	r2, [r3, #20]
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	091b      	lsrs	r3, r3, #4
 80022d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80022dc:	441a      	add	r2, r3
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	615a      	str	r2, [r3, #20]
 80022e2:	e016      	b.n	8002312 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	0c5b      	lsrs	r3, r3, #17
 80022e8:	f003 030f 	and.w	r3, r3, #15
 80022ec:	2b06      	cmp	r3, #6
 80022ee:	d110      	bne.n	8002312 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80022f6:	2208      	movs	r2, #8
 80022f8:	4619      	mov	r1, r3
 80022fa:	6a38      	ldr	r0, [r7, #32]
 80022fc:	f004 fa04 	bl	8006708 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800230c:	441a      	add	r2, r3
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	699a      	ldr	r2, [r3, #24]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0210 	orr.w	r2, r2, #16
 8002320:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4618      	mov	r0, r3
 8002328:	f004 fb82 	bl	8006a30 <USB_ReadInterrupts>
 800232c:	4603      	mov	r3, r0
 800232e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002332:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002336:	f040 80a7 	bne.w	8002488 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800233a:	2300      	movs	r3, #0
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f004 fb87 	bl	8006a56 <USB_ReadDevAllOutEpInterrupt>
 8002348:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800234a:	e099      	b.n	8002480 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800234c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800234e:	f003 0301 	and.w	r3, r3, #1
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 808e 	beq.w	8002474 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	4611      	mov	r1, r2
 8002362:	4618      	mov	r0, r3
 8002364:	f004 fbab 	bl	8006abe <USB_ReadDevOutEPInterrupt>
 8002368:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	f003 0301 	and.w	r3, r3, #1
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00c      	beq.n	800238e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	015a      	lsls	r2, r3, #5
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	4413      	add	r3, r2
 800237c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002380:	461a      	mov	r2, r3
 8002382:	2301      	movs	r3, #1
 8002384:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f000 fed1 	bl	8003130 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00c      	beq.n	80023b2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800239a:	015a      	lsls	r2, r3, #5
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023a4:	461a      	mov	r2, r3
 80023a6:	2308      	movs	r3, #8
 80023a8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80023aa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 ffa7 	bl	8003300 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f003 0310 	and.w	r3, r3, #16
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d008      	beq.n	80023ce <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80023bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023be:	015a      	lsls	r2, r3, #5
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	4413      	add	r3, r2
 80023c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80023c8:	461a      	mov	r2, r3
 80023ca:	2310      	movs	r3, #16
 80023cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d030      	beq.n	800243a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e0:	2b80      	cmp	r3, #128	@ 0x80
 80023e2:	d109      	bne.n	80023f8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	69fa      	ldr	r2, [r7, #28]
 80023ee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80023f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023fa:	4613      	mov	r3, r2
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	4413      	add	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002406:	687a      	ldr	r2, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	3304      	adds	r3, #4
 800240c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	78db      	ldrb	r3, [r3, #3]
 8002412:	2b01      	cmp	r3, #1
 8002414:	d108      	bne.n	8002428 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	2200      	movs	r2, #0
 800241a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800241c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800241e:	b2db      	uxtb	r3, r3
 8002420:	4619      	mov	r1, r3
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f006 ff44 	bl	80092b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	015a      	lsls	r2, r3, #5
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	4413      	add	r3, r2
 8002430:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002434:	461a      	mov	r2, r3
 8002436:	2302      	movs	r3, #2
 8002438:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	f003 0320 	and.w	r3, r3, #32
 8002440:	2b00      	cmp	r3, #0
 8002442:	d008      	beq.n	8002456 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	4413      	add	r3, r2
 800244c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002450:	461a      	mov	r2, r3
 8002452:	2320      	movs	r3, #32
 8002454:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d009      	beq.n	8002474 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002462:	015a      	lsls	r2, r3, #5
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	4413      	add	r3, r2
 8002468:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800246c:	461a      	mov	r2, r3
 800246e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002472:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	3301      	adds	r3, #1
 8002478:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247c:	085b      	lsrs	r3, r3, #1
 800247e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002482:	2b00      	cmp	r3, #0
 8002484:	f47f af62 	bne.w	800234c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f004 facf 	bl	8006a30 <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002498:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800249c:	f040 80db 	bne.w	8002656 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f004 faf0 	bl	8006a8a <USB_ReadDevAllInEpInterrupt>
 80024aa:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80024b0:	e0cd      	b.n	800264e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80024b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b4:	f003 0301 	and.w	r3, r3, #1
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80c2 	beq.w	8002642 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80024c4:	b2d2      	uxtb	r2, r2
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f004 fb16 	bl	8006afa <USB_ReadDevInEPInterrupt>
 80024ce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d057      	beq.n	800258a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	2201      	movs	r2, #1
 80024e2:	fa02 f303 	lsl.w	r3, r2, r3
 80024e6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69f9      	ldr	r1, [r7, #28]
 80024f6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80024fa:	4013      	ands	r3, r2
 80024fc:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80024fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002500:	015a      	lsls	r2, r3, #5
 8002502:	69fb      	ldr	r3, [r7, #28]
 8002504:	4413      	add	r3, r2
 8002506:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800250a:	461a      	mov	r2, r3
 800250c:	2301      	movs	r3, #1
 800250e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	799b      	ldrb	r3, [r3, #6]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d132      	bne.n	800257e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002518:	6879      	ldr	r1, [r7, #4]
 800251a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800251c:	4613      	mov	r3, r2
 800251e:	00db      	lsls	r3, r3, #3
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3320      	adds	r3, #32
 8002528:	6819      	ldr	r1, [r3, #0]
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800252e:	4613      	mov	r3, r2
 8002530:	00db      	lsls	r3, r3, #3
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4403      	add	r3, r0
 8002538:	331c      	adds	r3, #28
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4419      	add	r1, r3
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002542:	4613      	mov	r3, r2
 8002544:	00db      	lsls	r3, r3, #3
 8002546:	4413      	add	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4403      	add	r3, r0
 800254c:	3320      	adds	r3, #32
 800254e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002552:	2b00      	cmp	r3, #0
 8002554:	d113      	bne.n	800257e <HAL_PCD_IRQHandler+0x3a2>
 8002556:	6879      	ldr	r1, [r7, #4]
 8002558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800255a:	4613      	mov	r3, r2
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	009b      	lsls	r3, r3, #2
 8002562:	440b      	add	r3, r1
 8002564:	3324      	adds	r3, #36	@ 0x24
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d108      	bne.n	800257e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6818      	ldr	r0, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002576:	461a      	mov	r2, r3
 8002578:	2101      	movs	r1, #1
 800257a:	f004 fb1d 	bl	8006bb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	b2db      	uxtb	r3, r3
 8002582:	4619      	mov	r1, r3
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f006 fe0e 	bl	80091a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d008      	beq.n	80025a6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002596:	015a      	lsls	r2, r3, #5
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	4413      	add	r3, r2
 800259c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025a0:	461a      	mov	r2, r3
 80025a2:	2308      	movs	r3, #8
 80025a4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	f003 0310 	and.w	r3, r3, #16
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	015a      	lsls	r2, r3, #5
 80025b4:	69fb      	ldr	r3, [r7, #28]
 80025b6:	4413      	add	r3, r2
 80025b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025bc:	461a      	mov	r2, r3
 80025be:	2310      	movs	r3, #16
 80025c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d008      	beq.n	80025de <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80025cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80025d8:	461a      	mov	r2, r3
 80025da:	2340      	movs	r3, #64	@ 0x40
 80025dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d023      	beq.n	8002630 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80025e8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80025ea:	6a38      	ldr	r0, [r7, #32]
 80025ec:	f003 fb04 	bl	8005bf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80025f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	3310      	adds	r3, #16
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	78db      	ldrb	r3, [r3, #3]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d108      	bne.n	800261e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2200      	movs	r2, #0
 8002610:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	b2db      	uxtb	r3, r3
 8002616:	4619      	mov	r1, r3
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	f006 fe5b 	bl	80092d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	4413      	add	r3, r2
 8002626:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800262a:	461a      	mov	r2, r3
 800262c:	2302      	movs	r3, #2
 800262e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800263a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 fcea 	bl	8003016 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002644:	3301      	adds	r3, #1
 8002646:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800264a:	085b      	lsrs	r3, r3, #1
 800264c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800264e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002650:	2b00      	cmp	r3, #0
 8002652:	f47f af2e 	bne.w	80024b2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f004 f9e8 	bl	8006a30 <USB_ReadInterrupts>
 8002660:	4603      	mov	r3, r0
 8002662:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002666:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800266a:	d122      	bne.n	80026b2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	69fa      	ldr	r2, [r7, #28]
 8002676:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800267a:	f023 0301 	bic.w	r3, r3, #1
 800267e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002686:	2b01      	cmp	r3, #1
 8002688:	d108      	bne.n	800269c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002692:	2100      	movs	r1, #0
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	f006 ffd5 	bl	8009644 <HAL_PCDEx_LPM_Callback>
 800269a:	e002      	b.n	80026a2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f006 fdf9 	bl	8009294 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695a      	ldr	r2, [r3, #20]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80026b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 f9ba 	bl	8006a30 <USB_ReadInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80026c6:	d112      	bne.n	80026ee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 0301 	and.w	r3, r3, #1
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d102      	bne.n	80026de <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	f006 fdb5 	bl	8009248 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80026ec:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4618      	mov	r0, r3
 80026f4:	f004 f99c 	bl	8006a30 <USB_ReadInterrupts>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002702:	d121      	bne.n	8002748 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	695a      	ldr	r2, [r3, #20]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8002712:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800271a:	2b00      	cmp	r3, #0
 800271c:	d111      	bne.n	8002742 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800272c:	089b      	lsrs	r3, r3, #2
 800272e:	f003 020f 	and.w	r2, r3, #15
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002738:	2101      	movs	r1, #1
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f006 ff82 	bl	8009644 <HAL_PCDEx_LPM_Callback>
 8002740:	e002      	b.n	8002748 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f006 fd80 	bl	8009248 <HAL_PCD_SuspendCallback>
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f004 f96f 	bl	8006a30 <USB_ReadInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800275c:	f040 80b7 	bne.w	80028ce <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	69fa      	ldr	r2, [r7, #28]
 800276a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	2110      	movs	r1, #16
 800277a:	4618      	mov	r0, r3
 800277c:	f003 fa3c 	bl	8005bf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002780:	2300      	movs	r3, #0
 8002782:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002784:	e046      	b.n	8002814 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002788:	015a      	lsls	r2, r3, #5
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	4413      	add	r3, r2
 800278e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002792:	461a      	mov	r2, r3
 8002794:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002798:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800279a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027aa:	0151      	lsls	r1, r2, #5
 80027ac:	69fa      	ldr	r2, [r7, #28]
 80027ae:	440a      	add	r2, r1
 80027b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80027b4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027b8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80027ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027bc:	015a      	lsls	r2, r3, #5
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	4413      	add	r3, r2
 80027c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027c6:	461a      	mov	r2, r3
 80027c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80027cc:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69fb      	ldr	r3, [r7, #28]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027de:	0151      	lsls	r1, r2, #5
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	440a      	add	r2, r1
 80027e4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80027e8:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80027ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80027ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027f0:	015a      	lsls	r2, r3, #5
 80027f2:	69fb      	ldr	r3, [r7, #28]
 80027f4:	4413      	add	r3, r2
 80027f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027fe:	0151      	lsls	r1, r2, #5
 8002800:	69fa      	ldr	r2, [r7, #28]
 8002802:	440a      	add	r2, r1
 8002804:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002808:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800280c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002810:	3301      	adds	r3, #1
 8002812:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	791b      	ldrb	r3, [r3, #4]
 8002818:	461a      	mov	r2, r3
 800281a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800281c:	4293      	cmp	r3, r2
 800281e:	d3b2      	bcc.n	8002786 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002826:	69db      	ldr	r3, [r3, #28]
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800282e:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002832:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	7bdb      	ldrb	r3, [r3, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d016      	beq.n	800286a <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002846:	69fa      	ldr	r2, [r7, #28]
 8002848:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800284c:	f043 030b 	orr.w	r3, r3, #11
 8002850:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800285a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800285c:	69fa      	ldr	r2, [r7, #28]
 800285e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002862:	f043 030b 	orr.w	r3, r3, #11
 8002866:	6453      	str	r3, [r2, #68]	@ 0x44
 8002868:	e015      	b.n	8002896 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002878:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800287c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002880:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	69fa      	ldr	r2, [r7, #28]
 800288c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002890:	f043 030b 	orr.w	r3, r3, #11
 8002894:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	69fa      	ldr	r2, [r7, #28]
 80028a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80028a4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80028a8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80028b8:	461a      	mov	r2, r3
 80028ba:	f004 f97d 	bl	8006bb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80028cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4618      	mov	r0, r3
 80028d4:	f004 f8ac 	bl	8006a30 <USB_ReadInterrupts>
 80028d8:	4603      	mov	r3, r0
 80028da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80028e2:	d123      	bne.n	800292c <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f004 f942 	bl	8006b72 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f003 f9f9 	bl	8005cea <USB_GetDevSpeed>
 80028f8:	4603      	mov	r3, r0
 80028fa:	461a      	mov	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681c      	ldr	r4, [r3, #0]
 8002904:	f000 fea4 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8002908:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800290e:	461a      	mov	r2, r3
 8002910:	4620      	mov	r0, r4
 8002912:	f002 ff03 	bl	800571c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f006 fc6d 	bl	80091f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695a      	ldr	r2, [r3, #20]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 800292a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4618      	mov	r0, r3
 8002932:	f004 f87d 	bl	8006a30 <USB_ReadInterrupts>
 8002936:	4603      	mov	r3, r0
 8002938:	f003 0308 	and.w	r3, r3, #8
 800293c:	2b08      	cmp	r3, #8
 800293e:	d10a      	bne.n	8002956 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f006 fc4a 	bl	80091da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695a      	ldr	r2, [r3, #20]
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f002 0208 	and.w	r2, r2, #8
 8002954:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f004 f868 	bl	8006a30 <USB_ReadInterrupts>
 8002960:	4603      	mov	r3, r0
 8002962:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002966:	2b80      	cmp	r3, #128	@ 0x80
 8002968:	d123      	bne.n	80029b2 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800296a:	6a3b      	ldr	r3, [r7, #32]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002972:	6a3b      	ldr	r3, [r7, #32]
 8002974:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002976:	2301      	movs	r3, #1
 8002978:	627b      	str	r3, [r7, #36]	@ 0x24
 800297a:	e014      	b.n	80029a6 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800297c:	6879      	ldr	r1, [r7, #4]
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	4613      	mov	r3, r2
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	440b      	add	r3, r1
 800298a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b01      	cmp	r3, #1
 8002992:	d105      	bne.n	80029a0 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002996:	b2db      	uxtb	r3, r3
 8002998:	4619      	mov	r1, r3
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f000 fb0a 	bl	8002fb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a2:	3301      	adds	r3, #1
 80029a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	791b      	ldrb	r3, [r3, #4]
 80029aa:	461a      	mov	r2, r3
 80029ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d3e4      	bcc.n	800297c <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f004 f83a 	bl	8006a30 <USB_ReadInterrupts>
 80029bc:	4603      	mov	r3, r0
 80029be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80029c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80029c6:	d13c      	bne.n	8002a42 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80029c8:	2301      	movs	r3, #1
 80029ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80029cc:	e02b      	b.n	8002a26 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80029ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029d0:	015a      	lsls	r2, r3, #5
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	4413      	add	r3, r2
 80029d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	4613      	mov	r3, r2
 80029e4:	00db      	lsls	r3, r3, #3
 80029e6:	4413      	add	r3, r2
 80029e8:	009b      	lsls	r3, r3, #2
 80029ea:	440b      	add	r3, r1
 80029ec:	3318      	adds	r3, #24
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d115      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80029f4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	da12      	bge.n	8002a20 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fe:	4613      	mov	r3, r2
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	440b      	add	r3, r1
 8002a08:	3317      	adds	r3, #23
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 faca 	bl	8002fb4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	3301      	adds	r3, #1
 8002a24:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	791b      	ldrb	r3, [r3, #4]
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d3cd      	bcc.n	80029ce <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002a40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f003 fff2 	bl	8006a30 <USB_ReadInterrupts>
 8002a4c:	4603      	mov	r3, r0
 8002a4e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a52:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a56:	d156      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a58:	2301      	movs	r3, #1
 8002a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a5c:	e045      	b.n	8002aea <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a72:	4613      	mov	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	4413      	add	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	440b      	add	r3, r1
 8002a7c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002a80:	781b      	ldrb	r3, [r3, #0]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d12e      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	da2b      	bge.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002a8c:	69bb      	ldr	r3, [r7, #24]
 8002a8e:	0c1a      	lsrs	r2, r3, #16
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002a96:	4053      	eors	r3, r2
 8002a98:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d121      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	440b      	add	r3, r1
 8002aae:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002ab6:	6a3b      	ldr	r3, [r7, #32]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002abe:	6a3b      	ldr	r3, [r7, #32]
 8002ac0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002ac2:	6a3b      	ldr	r3, [r7, #32]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10a      	bne.n	8002ae4 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	69fa      	ldr	r2, [r7, #28]
 8002ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ae0:	6053      	str	r3, [r2, #4]
            break;
 8002ae2:	e008      	b.n	8002af6 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	791b      	ldrb	r3, [r3, #4]
 8002aee:	461a      	mov	r2, r3
 8002af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d3b3      	bcc.n	8002a5e <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 ff90 	bl	8006a30 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b1a:	d10a      	bne.n	8002b32 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	f006 fbeb 	bl	80092f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	695a      	ldr	r2, [r3, #20]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002b30:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f003 ff7a 	bl	8006a30 <USB_ReadInterrupts>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b04      	cmp	r3, #4
 8002b44:	d115      	bne.n	8002b72 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	f003 0304 	and.w	r3, r3, #4
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d002      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f006 fbdb 	bl	8009314 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	6859      	ldr	r1, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	e000      	b.n	8002b72 <HAL_PCD_IRQHandler+0x996>
      return;
 8002b70:	bf00      	nop
    }
  }
}
 8002b72:	3734      	adds	r7, #52	@ 0x34
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bd90      	pop	{r4, r7, pc}

08002b78 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	460b      	mov	r3, r1
 8002b82:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d101      	bne.n	8002b92 <HAL_PCD_SetAddress+0x1a>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e012      	b.n	8002bb8 <HAL_PCD_SetAddress+0x40>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2201      	movs	r2, #1
 8002b96:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	78fa      	ldrb	r2, [r7, #3]
 8002b9e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	78fa      	ldrb	r2, [r7, #3]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f003 fed9 	bl	8006960 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002bb6:	2300      	movs	r3, #0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	4608      	mov	r0, r1
 8002bca:	4611      	mov	r1, r2
 8002bcc:	461a      	mov	r2, r3
 8002bce:	4603      	mov	r3, r0
 8002bd0:	70fb      	strb	r3, [r7, #3]
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	803b      	strh	r3, [r7, #0]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002bde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	da0f      	bge.n	8002c06 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	f003 020f 	and.w	r2, r3, #15
 8002bec:	4613      	mov	r3, r2
 8002bee:	00db      	lsls	r3, r3, #3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	3310      	adds	r3, #16
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	3304      	adds	r3, #4
 8002bfc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	2201      	movs	r2, #1
 8002c02:	705a      	strb	r2, [r3, #1]
 8002c04:	e00f      	b.n	8002c26 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c06:	78fb      	ldrb	r3, [r7, #3]
 8002c08:	f003 020f 	and.w	r2, r3, #15
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	00db      	lsls	r3, r3, #3
 8002c10:	4413      	add	r3, r2
 8002c12:	009b      	lsls	r3, r3, #2
 8002c14:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002c26:	78fb      	ldrb	r3, [r7, #3]
 8002c28:	f003 030f 	and.w	r3, r3, #15
 8002c2c:	b2da      	uxtb	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002c32:	883b      	ldrh	r3, [r7, #0]
 8002c34:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	78ba      	ldrb	r2, [r7, #2]
 8002c40:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	785b      	ldrb	r3, [r3, #1]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002c54:	78bb      	ldrb	r3, [r7, #2]
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d102      	bne.n	8002c60 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002c66:	2b01      	cmp	r3, #1
 8002c68:	d101      	bne.n	8002c6e <HAL_PCD_EP_Open+0xae>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e00e      	b.n	8002c8c <HAL_PCD_EP_Open+0xcc>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2201      	movs	r2, #1
 8002c72:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68f9      	ldr	r1, [r7, #12]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f003 f859 	bl	8005d34 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2200      	movs	r2, #0
 8002c86:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8002c8a:	7afb      	ldrb	r3, [r7, #11]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ca0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	da0f      	bge.n	8002cc8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	f003 020f 	and.w	r2, r3, #15
 8002cae:	4613      	mov	r3, r2
 8002cb0:	00db      	lsls	r3, r3, #3
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	3310      	adds	r3, #16
 8002cb8:	687a      	ldr	r2, [r7, #4]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	705a      	strb	r2, [r3, #1]
 8002cc6:	e00f      	b.n	8002ce8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002cc8:	78fb      	ldrb	r3, [r7, #3]
 8002cca:	f003 020f 	and.w	r2, r3, #15
 8002cce:	4613      	mov	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	4413      	add	r3, r2
 8002cde:	3304      	adds	r3, #4
 8002ce0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ce8:	78fb      	ldrb	r3, [r7, #3]
 8002cea:	f003 030f 	and.w	r3, r3, #15
 8002cee:	b2da      	uxtb	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d101      	bne.n	8002d02 <HAL_PCD_EP_Close+0x6e>
 8002cfe:	2302      	movs	r3, #2
 8002d00:	e00e      	b.n	8002d20 <HAL_PCD_EP_Close+0x8c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68f9      	ldr	r1, [r7, #12]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f003 f897 	bl	8005e44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8002d1e:	2300      	movs	r3, #0
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3710      	adds	r7, #16
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	607a      	str	r2, [r7, #4]
 8002d32:	603b      	str	r3, [r7, #0]
 8002d34:	460b      	mov	r3, r1
 8002d36:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d38:	7afb      	ldrb	r3, [r7, #11]
 8002d3a:	f003 020f 	and.w	r2, r3, #15
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4413      	add	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002d4a:	68fa      	ldr	r2, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	3304      	adds	r3, #4
 8002d50:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	2200      	movs	r2, #0
 8002d68:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002d6a:	7afb      	ldrb	r3, [r7, #11]
 8002d6c:	f003 030f 	and.w	r3, r3, #15
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	799b      	ldrb	r3, [r3, #6]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d102      	bne.n	8002d84 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6818      	ldr	r0, [r3, #0]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	799b      	ldrb	r3, [r3, #6]
 8002d8c:	461a      	mov	r2, r3
 8002d8e:	6979      	ldr	r1, [r7, #20]
 8002d90:	f003 f934 	bl	8005ffc <USB_EPStartXfer>

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3718      	adds	r7, #24
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
 8002da6:	460b      	mov	r3, r1
 8002da8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	f003 020f 	and.w	r2, r3, #15
 8002db0:	6879      	ldr	r1, [r7, #4]
 8002db2:	4613      	mov	r3, r2
 8002db4:	00db      	lsls	r3, r3, #3
 8002db6:	4413      	add	r3, r2
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002dc0:	681b      	ldr	r3, [r3, #0]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b086      	sub	sp, #24
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	60f8      	str	r0, [r7, #12]
 8002dd6:	607a      	str	r2, [r7, #4]
 8002dd8:	603b      	str	r3, [r7, #0]
 8002dda:	460b      	mov	r3, r1
 8002ddc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002dde:	7afb      	ldrb	r3, [r7, #11]
 8002de0:	f003 020f 	and.w	r2, r3, #15
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	3310      	adds	r3, #16
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4413      	add	r3, r2
 8002df2:	3304      	adds	r3, #4
 8002df4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	2200      	movs	r2, #0
 8002e06:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e0e:	7afb      	ldrb	r3, [r7, #11]
 8002e10:	f003 030f 	and.w	r3, r3, #15
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	697b      	ldr	r3, [r7, #20]
 8002e18:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	799b      	ldrb	r3, [r3, #6]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d102      	bne.n	8002e28 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	799b      	ldrb	r3, [r3, #6]
 8002e30:	461a      	mov	r2, r3
 8002e32:	6979      	ldr	r1, [r7, #20]
 8002e34:	f003 f8e2 	bl	8005ffc <USB_EPStartXfer>

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3718      	adds	r7, #24
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002e4e:	78fb      	ldrb	r3, [r7, #3]
 8002e50:	f003 030f 	and.w	r3, r3, #15
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	7912      	ldrb	r2, [r2, #4]
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e04f      	b.n	8002f00 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002e60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	da0f      	bge.n	8002e88 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	f003 020f 	and.w	r2, r3, #15
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	3310      	adds	r3, #16
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3304      	adds	r3, #4
 8002e7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2201      	movs	r2, #1
 8002e84:	705a      	strb	r2, [r3, #1]
 8002e86:	e00d      	b.n	8002ea4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	3304      	adds	r3, #4
 8002e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	f003 030f 	and.w	r3, r3, #15
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d101      	bne.n	8002ec4 <HAL_PCD_EP_SetStall+0x82>
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	e01d      	b.n	8002f00 <HAL_PCD_EP_SetStall+0xbe>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	68f9      	ldr	r1, [r7, #12]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f003 fc70 	bl	80067b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 030f 	and.w	r3, r3, #15
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d109      	bne.n	8002ef6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6818      	ldr	r0, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	7999      	ldrb	r1, [r3, #6]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002ef0:	461a      	mov	r2, r3
 8002ef2:	f003 fe61 	bl	8006bb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002efe:	2300      	movs	r3, #0
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	3710      	adds	r7, #16
 8002f04:	46bd      	mov	sp, r7
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b084      	sub	sp, #16
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002f14:	78fb      	ldrb	r3, [r7, #3]
 8002f16:	f003 030f 	and.w	r3, r3, #15
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	7912      	ldrb	r2, [r2, #4]
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d901      	bls.n	8002f26 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e042      	b.n	8002fac <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002f26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	da0f      	bge.n	8002f4e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f2e:	78fb      	ldrb	r3, [r7, #3]
 8002f30:	f003 020f 	and.w	r2, r3, #15
 8002f34:	4613      	mov	r3, r2
 8002f36:	00db      	lsls	r3, r3, #3
 8002f38:	4413      	add	r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	3310      	adds	r3, #16
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4413      	add	r3, r2
 8002f42:	3304      	adds	r3, #4
 8002f44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	705a      	strb	r2, [r3, #1]
 8002f4c:	e00f      	b.n	8002f6e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	f003 020f 	and.w	r2, r3, #15
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002f60:	687a      	ldr	r2, [r7, #4]
 8002f62:	4413      	add	r3, r2
 8002f64:	3304      	adds	r3, #4
 8002f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2200      	movs	r2, #0
 8002f72:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f74:	78fb      	ldrb	r3, [r7, #3]
 8002f76:	f003 030f 	and.w	r3, r3, #15
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d101      	bne.n	8002f8e <HAL_PCD_EP_ClrStall+0x86>
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	e00e      	b.n	8002fac <HAL_PCD_EP_ClrStall+0xa4>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2201      	movs	r2, #1
 8002f92:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68f9      	ldr	r1, [r7, #12]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f003 fc79 	bl	8006894 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002faa:	2300      	movs	r3, #0
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3710      	adds	r7, #16
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b084      	sub	sp, #16
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da0c      	bge.n	8002fe2 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
 8002fe0:	e00c      	b.n	8002ffc <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe2:	78fb      	ldrb	r3, [r7, #3]
 8002fe4:	f003 020f 	and.w	r2, r3, #15
 8002fe8:	4613      	mov	r3, r2
 8002fea:	00db      	lsls	r3, r3, #3
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	3304      	adds	r3, #4
 8002ffa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	68f9      	ldr	r1, [r7, #12]
 8003002:	4618      	mov	r0, r3
 8003004:	f003 fa98 	bl	8006538 <USB_EPStopXfer>
 8003008:	4603      	mov	r3, r0
 800300a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800300c:	7afb      	ldrb	r3, [r7, #11]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b08a      	sub	sp, #40	@ 0x28
 800301a:	af02      	add	r7, sp, #8
 800301c:	6078      	str	r0, [r7, #4]
 800301e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800302a:	683a      	ldr	r2, [r7, #0]
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	3310      	adds	r3, #16
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	4413      	add	r3, r2
 800303a:	3304      	adds	r3, #4
 800303c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	695a      	ldr	r2, [r3, #20]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	429a      	cmp	r2, r3
 8003048:	d901      	bls.n	800304e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e06b      	b.n	8003126 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	691a      	ldr	r2, [r3, #16]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	69fa      	ldr	r2, [r7, #28]
 8003060:	429a      	cmp	r2, r3
 8003062:	d902      	bls.n	800306a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	3303      	adds	r3, #3
 800306e:	089b      	lsrs	r3, r3, #2
 8003070:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003072:	e02a      	b.n	80030ca <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	69fa      	ldr	r2, [r7, #28]
 8003086:	429a      	cmp	r2, r3
 8003088:	d902      	bls.n	8003090 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003090:	69fb      	ldr	r3, [r7, #28]
 8003092:	3303      	adds	r3, #3
 8003094:	089b      	lsrs	r3, r3, #2
 8003096:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	68d9      	ldr	r1, [r3, #12]
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	b2da      	uxtb	r2, r3
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4603      	mov	r3, r0
 80030ac:	6978      	ldr	r0, [r7, #20]
 80030ae:	f003 faed 	bl	800668c <USB_WritePacket>

    ep->xfer_buff  += len;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	441a      	add	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	695a      	ldr	r2, [r3, #20]
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80030d6:	699b      	ldr	r3, [r3, #24]
 80030d8:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030da:	69ba      	ldr	r2, [r7, #24]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d809      	bhi.n	80030f4 <PCD_WriteEmptyTxFifo+0xde>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	695a      	ldr	r2, [r3, #20]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d203      	bcs.n	80030f4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	691b      	ldr	r3, [r3, #16]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1bf      	bne.n	8003074 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d811      	bhi.n	8003124 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	2201      	movs	r2, #1
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003114:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	43db      	mvns	r3, r3
 800311a:	6939      	ldr	r1, [r7, #16]
 800311c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003120:	4013      	ands	r3, r2
 8003122:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003124:	2300      	movs	r3, #0
}
 8003126:	4618      	mov	r0, r3
 8003128:	3720      	adds	r7, #32
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}
	...

08003130 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b088      	sub	sp, #32
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	333c      	adds	r3, #60	@ 0x3c
 8003148:	3304      	adds	r3, #4
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	015a      	lsls	r2, r3, #5
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	4413      	add	r3, r2
 8003156:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	799b      	ldrb	r3, [r3, #6]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d17b      	bne.n	800325e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f003 0308 	and.w	r3, r3, #8
 800316c:	2b00      	cmp	r3, #0
 800316e:	d015      	beq.n	800319c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4a61      	ldr	r2, [pc, #388]	@ (80032f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	f240 80b9 	bls.w	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80b3 	beq.w	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	015a      	lsls	r2, r3, #5
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	4413      	add	r3, r2
 800318e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003192:	461a      	mov	r2, r3
 8003194:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003198:	6093      	str	r3, [r2, #8]
 800319a:	e0a7      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	f003 0320 	and.w	r3, r3, #32
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d009      	beq.n	80031ba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	015a      	lsls	r2, r3, #5
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	4413      	add	r3, r2
 80031ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031b2:	461a      	mov	r2, r3
 80031b4:	2320      	movs	r3, #32
 80031b6:	6093      	str	r3, [r2, #8]
 80031b8:	e098      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f040 8093 	bne.w	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	4a4b      	ldr	r2, [pc, #300]	@ (80032f8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d90f      	bls.n	80031ee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	015a      	lsls	r2, r3, #5
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	4413      	add	r3, r2
 80031e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031e4:	461a      	mov	r2, r3
 80031e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031ea:	6093      	str	r3, [r2, #8]
 80031ec:	e07e      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	4613      	mov	r3, r2
 80031f2:	00db      	lsls	r3, r3, #3
 80031f4:	4413      	add	r3, r2
 80031f6:	009b      	lsls	r3, r3, #2
 80031f8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80031fc:	687a      	ldr	r2, [r7, #4]
 80031fe:	4413      	add	r3, r2
 8003200:	3304      	adds	r3, #4
 8003202:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1a      	ldr	r2, [r3, #32]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	0159      	lsls	r1, r3, #5
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	440b      	add	r3, r1
 8003210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003214:	691b      	ldr	r3, [r3, #16]
 8003216:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800321a:	1ad2      	subs	r2, r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d114      	bne.n	8003250 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d109      	bne.n	8003242 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6818      	ldr	r0, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003238:	461a      	mov	r2, r3
 800323a:	2101      	movs	r1, #1
 800323c:	f003 fcbc 	bl	8006bb8 <USB_EP0_OutStart>
 8003240:	e006      	b.n	8003250 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	441a      	add	r2, r3
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f005 ff8a 	bl	8009170 <HAL_PCD_DataOutStageCallback>
 800325c:	e046      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	4a26      	ldr	r2, [pc, #152]	@ (80032fc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d124      	bne.n	80032b0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	015a      	lsls	r2, r3, #5
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4413      	add	r3, r2
 8003278:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800327c:	461a      	mov	r2, r3
 800327e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003282:	6093      	str	r3, [r2, #8]
 8003284:	e032      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	f003 0320 	and.w	r3, r3, #32
 800328c:	2b00      	cmp	r3, #0
 800328e:	d008      	beq.n	80032a2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800329c:	461a      	mov	r2, r3
 800329e:	2320      	movs	r3, #32
 80032a0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	4619      	mov	r1, r3
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f005 ff61 	bl	8009170 <HAL_PCD_DataOutStageCallback>
 80032ae:	e01d      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d114      	bne.n	80032e0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80032b6:	6879      	ldr	r1, [r7, #4]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	440b      	add	r3, r1
 80032c4:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d108      	bne.n	80032e0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80032d8:	461a      	mov	r2, r3
 80032da:	2100      	movs	r1, #0
 80032dc:	f003 fc6c 	bl	8006bb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2db      	uxtb	r3, r3
 80032e4:	4619      	mov	r1, r3
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f005 ff42 	bl	8009170 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80032ec:	2300      	movs	r3, #0
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3720      	adds	r7, #32
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	4f54300a 	.word	0x4f54300a
 80032fc:	4f54310a 	.word	0x4f54310a

08003300 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
 8003308:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	333c      	adds	r3, #60	@ 0x3c
 8003318:	3304      	adds	r3, #4
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	4a15      	ldr	r2, [pc, #84]	@ (8003388 <PCD_EP_OutSetupPacket_int+0x88>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d90e      	bls.n	8003354 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800333c:	2b00      	cmp	r3, #0
 800333e:	d009      	beq.n	8003354 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	015a      	lsls	r2, r3, #5
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	4413      	add	r3, r2
 8003348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800334c:	461a      	mov	r2, r3
 800334e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003352:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	f005 fef9 	bl	800914c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	4a0a      	ldr	r2, [pc, #40]	@ (8003388 <PCD_EP_OutSetupPacket_int+0x88>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d90c      	bls.n	800337c <PCD_EP_OutSetupPacket_int+0x7c>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	799b      	ldrb	r3, [r3, #6]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d108      	bne.n	800337c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003374:	461a      	mov	r2, r3
 8003376:	2101      	movs	r1, #1
 8003378:	f003 fc1e 	bl	8006bb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3718      	adds	r7, #24
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	4f54300a 	.word	0x4f54300a

0800338c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	460b      	mov	r3, r1
 8003396:	70fb      	strb	r3, [r7, #3]
 8003398:	4613      	mov	r3, r2
 800339a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80033a4:	78fb      	ldrb	r3, [r7, #3]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80033aa:	883b      	ldrh	r3, [r7, #0]
 80033ac:	0419      	lsls	r1, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	68ba      	ldr	r2, [r7, #8]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80033b8:	e028      	b.n	800340c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033c0:	0c1b      	lsrs	r3, r3, #16
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	4413      	add	r3, r2
 80033c6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033c8:	2300      	movs	r3, #0
 80033ca:	73fb      	strb	r3, [r7, #15]
 80033cc:	e00d      	b.n	80033ea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	7bfb      	ldrb	r3, [r7, #15]
 80033d4:	3340      	adds	r3, #64	@ 0x40
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	4413      	add	r3, r2
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	0c1b      	lsrs	r3, r3, #16
 80033de:	68ba      	ldr	r2, [r7, #8]
 80033e0:	4413      	add	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80033e4:	7bfb      	ldrb	r3, [r7, #15]
 80033e6:	3301      	adds	r3, #1
 80033e8:	73fb      	strb	r3, [r7, #15]
 80033ea:	7bfa      	ldrb	r2, [r7, #15]
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3ec      	bcc.n	80033ce <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80033f4:	883b      	ldrh	r3, [r7, #0]
 80033f6:	0418      	lsls	r0, r3, #16
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	78fb      	ldrb	r3, [r7, #3]
 80033fe:	3b01      	subs	r3, #1
 8003400:	68ba      	ldr	r2, [r7, #8]
 8003402:	4302      	orrs	r2, r0
 8003404:	3340      	adds	r3, #64	@ 0x40
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr

0800341a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800341a:	b480      	push	{r7}
 800341c:	b083      	sub	sp, #12
 800341e:	af00      	add	r7, sp, #0
 8003420:	6078      	str	r0, [r7, #4]
 8003422:	460b      	mov	r3, r1
 8003424:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	887a      	ldrh	r2, [r7, #2]
 800342c:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2201      	movs	r2, #1
 800344e:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800346e:	f043 0303 	orr.w	r3, r3, #3
 8003472:	68fa      	ldr	r2, [r7, #12]
 8003474:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e0cc      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003498:	4b68      	ldr	r3, [pc, #416]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 030f 	and.w	r3, r3, #15
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d90c      	bls.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a6:	4b65      	ldr	r3, [pc, #404]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ae:	4b63      	ldr	r3, [pc, #396]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	683a      	ldr	r2, [r7, #0]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d001      	beq.n	80034c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e0b8      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0302 	and.w	r3, r3, #2
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d020      	beq.n	800350e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d005      	beq.n	80034e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d8:	4b59      	ldr	r3, [pc, #356]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	4a58      	ldr	r2, [pc, #352]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034e2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0308 	and.w	r3, r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034f0:	4b53      	ldr	r3, [pc, #332]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	4a52      	ldr	r2, [pc, #328]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034fc:	4b50      	ldr	r3, [pc, #320]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	494d      	ldr	r1, [pc, #308]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 800350a:	4313      	orrs	r3, r2
 800350c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d044      	beq.n	80035a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d107      	bne.n	8003532 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003522:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d119      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e07f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	2b02      	cmp	r3, #2
 8003538:	d003      	beq.n	8003542 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800353e:	2b03      	cmp	r3, #3
 8003540:	d107      	bne.n	8003552 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003542:	4b3f      	ldr	r3, [pc, #252]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d109      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e06f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003552:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e067      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003562:	4b37      	ldr	r3, [pc, #220]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f023 0203 	bic.w	r2, r3, #3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	4934      	ldr	r1, [pc, #208]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003570:	4313      	orrs	r3, r2
 8003572:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003574:	f7fd fed6 	bl	8001324 <HAL_GetTick>
 8003578:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800357a:	e00a      	b.n	8003592 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800357c:	f7fd fed2 	bl	8001324 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358a:	4293      	cmp	r3, r2
 800358c:	d901      	bls.n	8003592 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e04f      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003592:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 020c 	and.w	r2, r3, #12
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d1eb      	bne.n	800357c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a4:	4b25      	ldr	r3, [pc, #148]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f003 030f 	and.w	r3, r3, #15
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d20c      	bcs.n	80035cc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b2:	4b22      	ldr	r3, [pc, #136]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	b2d2      	uxtb	r2, r2
 80035b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ba:	4b20      	ldr	r3, [pc, #128]	@ (800363c <HAL_RCC_ClockConfig+0x1b8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 030f 	and.w	r3, r3, #15
 80035c2:	683a      	ldr	r2, [r7, #0]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d001      	beq.n	80035cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e032      	b.n	8003632 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d008      	beq.n	80035ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d8:	4b19      	ldr	r3, [pc, #100]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	4916      	ldr	r1, [pc, #88]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0308 	and.w	r3, r3, #8
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d009      	beq.n	800360a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035f6:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	00db      	lsls	r3, r3, #3
 8003604:	490e      	ldr	r1, [pc, #56]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800360a:	f000 fb7f 	bl	8003d0c <HAL_RCC_GetSysClockFreq>
 800360e:	4602      	mov	r2, r0
 8003610:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_RCC_ClockConfig+0x1bc>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	f003 030f 	and.w	r3, r3, #15
 800361a:	490a      	ldr	r1, [pc, #40]	@ (8003644 <HAL_RCC_ClockConfig+0x1c0>)
 800361c:	5ccb      	ldrb	r3, [r1, r3]
 800361e:	fa22 f303 	lsr.w	r3, r2, r3
 8003622:	4a09      	ldr	r2, [pc, #36]	@ (8003648 <HAL_RCC_ClockConfig+0x1c4>)
 8003624:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <HAL_RCC_ClockConfig+0x1c8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4618      	mov	r0, r3
 800362c:	f7fd fe36 	bl	800129c <HAL_InitTick>

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3710      	adds	r7, #16
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	40023c00 	.word	0x40023c00
 8003640:	40023800 	.word	0x40023800
 8003644:	08009814 	.word	0x08009814
 8003648:	20000000 	.word	0x20000000
 800364c:	20000004 	.word	0x20000004

08003650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003654:	4b03      	ldr	r3, [pc, #12]	@ (8003664 <HAL_RCC_GetHCLKFreq+0x14>)
 8003656:	681b      	ldr	r3, [r3, #0]
}
 8003658:	4618      	mov	r0, r3
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	20000000 	.word	0x20000000

08003668 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800366c:	f7ff fff0 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003670:	4602      	mov	r2, r0
 8003672:	4b05      	ldr	r3, [pc, #20]	@ (8003688 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003674:	689b      	ldr	r3, [r3, #8]
 8003676:	0a9b      	lsrs	r3, r3, #10
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	4903      	ldr	r1, [pc, #12]	@ (800368c <HAL_RCC_GetPCLK1Freq+0x24>)
 800367e:	5ccb      	ldrb	r3, [r1, r3]
 8003680:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003684:	4618      	mov	r0, r3
 8003686:	bd80      	pop	{r7, pc}
 8003688:	40023800 	.word	0x40023800
 800368c:	08009824 	.word	0x08009824

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff ffdc 	bl	8003650 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0b5b      	lsrs	r3, r3, #13
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	@ (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	08009824 	.word	0x08009824

080036b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b08c      	sub	sp, #48	@ 0x30
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 80036c8:	2300      	movs	r3, #0
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 80036d0:	2300      	movs	r3, #0
 80036d2:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80036d8:	2300      	movs	r3, #0
 80036da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80036dc:	2300      	movs	r3, #0
 80036de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d010      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80036f0:	4b6f      	ldr	r3, [pc, #444]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80036f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80036f6:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fe:	496c      	ldr	r1, [pc, #432]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003700:	4313      	orrs	r3, r2
 8003702:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800370a:	2b00      	cmp	r3, #0
 800370c:	d101      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800370e:	2301      	movs	r3, #1
 8003710:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b00      	cmp	r3, #0
 800371c:	d010      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800371e:	4b64      	ldr	r3, [pc, #400]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003720:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003724:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800372c:	4960      	ldr	r1, [pc, #384]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003738:	2b00      	cmp	r3, #0
 800373a:	d101      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 800373c:	2301      	movs	r3, #1
 800373e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0304 	and.w	r3, r3, #4
 8003748:	2b00      	cmp	r3, #0
 800374a:	d017      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800374c:	4b58      	ldr	r3, [pc, #352]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800374e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003752:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800375a:	4955      	ldr	r1, [pc, #340]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800375c:	4313      	orrs	r3, r2
 800375e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003766:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800376a:	d101      	bne.n	8003770 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 800376c:	2301      	movs	r3, #1
 800376e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003774:	2b00      	cmp	r3, #0
 8003776:	d101      	bne.n	800377c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8003778:	2301      	movs	r3, #1
 800377a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d017      	beq.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003788:	4b49      	ldr	r3, [pc, #292]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800378a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800378e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003796:	4946      	ldr	r1, [pc, #280]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003798:	4313      	orrs	r3, r2
 800379a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80037a6:	d101      	bne.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80037a8:	2301      	movs	r3, #1
 80037aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 80037b4:	2301      	movs	r3, #1
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0320 	and.w	r3, r3, #32
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	f000 808a 	beq.w	80038da <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	2300      	movs	r3, #0
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	4b39      	ldr	r3, [pc, #228]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037ce:	4a38      	ldr	r2, [pc, #224]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80037d6:	4b36      	ldr	r3, [pc, #216]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80037e2:	4b34      	ldr	r3, [pc, #208]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a33      	ldr	r2, [pc, #204]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80037e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037ec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037ee:	f7fd fd99 	bl	8001324 <HAL_GetTick>
 80037f2:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80037f4:	e008      	b.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f6:	f7fd fd95 	bl	8001324 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e278      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003808:	4b2a      	ldr	r3, [pc, #168]	@ (80038b4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003814:	4b26      	ldr	r3, [pc, #152]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800381c:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800381e:	6a3b      	ldr	r3, [r7, #32]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d02f      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003828:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800382c:	6a3a      	ldr	r2, [r7, #32]
 800382e:	429a      	cmp	r2, r3
 8003830:	d028      	beq.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003832:	4b1f      	ldr	r3, [pc, #124]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003834:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003836:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800383a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383c:	4b1e      	ldr	r3, [pc, #120]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800383e:	2201      	movs	r2, #1
 8003840:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003842:	4b1d      	ldr	r3, [pc, #116]	@ (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003848:	4a19      	ldr	r2, [pc, #100]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800384e:	4b18      	ldr	r3, [pc, #96]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d114      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800385a:	f7fd fd63 	bl	8001324 <HAL_GetTick>
 800385e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003860:	e00a      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003862:	f7fd fd5f 	bl	8001324 <HAL_GetTick>
 8003866:	4602      	mov	r2, r0
 8003868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800386a:	1ad3      	subs	r3, r2, r3
 800386c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003870:	4293      	cmp	r3, r2
 8003872:	d901      	bls.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e240      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003878:	4b0d      	ldr	r3, [pc, #52]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800387a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0ee      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800388c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003890:	d114      	bne.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8003892:	4b07      	ldr	r3, [pc, #28]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80038a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038a6:	4902      	ldr	r1, [pc, #8]	@ (80038b0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80038a8:	4313      	orrs	r3, r2
 80038aa:	608b      	str	r3, [r1, #8]
 80038ac:	e00c      	b.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80038ae:	bf00      	nop
 80038b0:	40023800 	.word	0x40023800
 80038b4:	40007000 	.word	0x40007000
 80038b8:	42470e40 	.word	0x42470e40
 80038bc:	4b4a      	ldr	r3, [pc, #296]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	4a49      	ldr	r2, [pc, #292]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038c2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80038c6:	6093      	str	r3, [r2, #8]
 80038c8:	4b47      	ldr	r3, [pc, #284]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038ca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d4:	4944      	ldr	r1, [pc, #272]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038d6:	4313      	orrs	r3, r2
 80038d8:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 0310 	and.w	r3, r3, #16
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d004      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80038ec:	4b3f      	ldr	r3, [pc, #252]	@ (80039ec <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80038ee:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80038fc:	4b3a      	ldr	r3, [pc, #232]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80038fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003902:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800390a:	4937      	ldr	r1, [pc, #220]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800391e:	4b32      	ldr	r3, [pc, #200]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003920:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003924:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800392c:	492e      	ldr	r1, [pc, #184]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800392e:	4313      	orrs	r3, r2
 8003930:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d011      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003940:	4b29      	ldr	r3, [pc, #164]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003942:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003946:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800394e:	4926      	ldr	r1, [pc, #152]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003950:	4313      	orrs	r3, r2
 8003952:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800395a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800395e:	d101      	bne.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8003960:	2301      	movs	r3, #1
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8003970:	4b1d      	ldr	r3, [pc, #116]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003972:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003976:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800397e:	491a      	ldr	r1, [pc, #104]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003980:	4313      	orrs	r3, r2
 8003982:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800398e:	2b00      	cmp	r3, #0
 8003990:	d011      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8003992:	4b15      	ldr	r3, [pc, #84]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8003994:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003998:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039a0:	4911      	ldr	r1, [pc, #68]	@ (80039e8 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80039a2:	4313      	orrs	r3, r2
 80039a4:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80039ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b0:	d101      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 80039b2:	2301      	movs	r3, #1
 80039b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80039b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d005      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039c4:	f040 80ff 	bne.w	8003bc6 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80039c8:	4b09      	ldr	r3, [pc, #36]	@ (80039f0 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80039ce:	f7fd fca9 	bl	8001324 <HAL_GetTick>
 80039d2:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039d4:	e00e      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80039d6:	f7fd fca5 	bl	8001324 <HAL_GetTick>
 80039da:	4602      	mov	r2, r0
 80039dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039de:	1ad3      	subs	r3, r2, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d907      	bls.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e188      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 80039e8:	40023800 	.word	0x40023800
 80039ec:	424711e0 	.word	0x424711e0
 80039f0:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80039f4:	4b7e      	ldr	r3, [pc, #504]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1ea      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0301 	and.w	r3, r3, #1
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d003      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d009      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d028      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d124      	bne.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a28:	4b71      	ldr	r3, [pc, #452]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a2e:	0c1b      	lsrs	r3, r3, #16
 8003a30:	f003 0303 	and.w	r3, r3, #3
 8003a34:	3301      	adds	r3, #1
 8003a36:	005b      	lsls	r3, r3, #1
 8003a38:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a3a:	4b6d      	ldr	r3, [pc, #436]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a40:	0e1b      	lsrs	r3, r3, #24
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685a      	ldr	r2, [r3, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	019b      	lsls	r3, r3, #6
 8003a52:	431a      	orrs	r2, r3
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	085b      	lsrs	r3, r3, #1
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	041b      	lsls	r3, r3, #16
 8003a5c:	431a      	orrs	r2, r3
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	061b      	lsls	r3, r3, #24
 8003a62:	431a      	orrs	r2, r3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	071b      	lsls	r3, r3, #28
 8003a6a:	4961      	ldr	r1, [pc, #388]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0304 	and.w	r3, r3, #4
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d004      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a82:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003a86:	d00a      	beq.n	8003a9e <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d035      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a98:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a9c:	d130      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003a9e:	4b54      	ldr	r3, [pc, #336]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	f003 0303 	and.w	r3, r3, #3
 8003aaa:	3301      	adds	r3, #1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ab2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ab6:	0f1b      	lsrs	r3, r3, #28
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685a      	ldr	r2, [r3, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	019b      	lsls	r3, r3, #6
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	085b      	lsrs	r3, r3, #1
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	431a      	orrs	r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	691b      	ldr	r3, [r3, #16]
 8003ad8:	061b      	lsls	r3, r3, #24
 8003ada:	431a      	orrs	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	071b      	lsls	r3, r3, #28
 8003ae0:	4943      	ldr	r1, [pc, #268]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003ae8:	4b41      	ldr	r3, [pc, #260]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003aea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003aee:	f023 021f 	bic.w	r2, r3, #31
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003af6:	3b01      	subs	r3, #1
 8003af8:	493d      	ldr	r1, [pc, #244]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d029      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003b14:	d124      	bne.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8003b16:	4b36      	ldr	r3, [pc, #216]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b1c:	0c1b      	lsrs	r3, r3, #16
 8003b1e:	f003 0303 	and.w	r3, r3, #3
 8003b22:	3301      	adds	r3, #1
 8003b24:	005b      	lsls	r3, r3, #1
 8003b26:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b28:	4b31      	ldr	r3, [pc, #196]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b2e:	0f1b      	lsrs	r3, r3, #28
 8003b30:	f003 0307 	and.w	r3, r3, #7
 8003b34:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	019b      	lsls	r3, r3, #6
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	085b      	lsrs	r3, r3, #1
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	041b      	lsls	r3, r3, #16
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	69bb      	ldr	r3, [r7, #24]
 8003b50:	061b      	lsls	r3, r3, #24
 8003b52:	431a      	orrs	r2, r3
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	071b      	lsls	r3, r3, #28
 8003b58:	4925      	ldr	r1, [pc, #148]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d016      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685a      	ldr	r2, [r3, #4]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	019b      	lsls	r3, r3, #6
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	085b      	lsrs	r3, r3, #1
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	041b      	lsls	r3, r3, #16
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	061b      	lsls	r3, r3, #24
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	695b      	ldr	r3, [r3, #20]
 8003b90:	071b      	lsls	r3, r3, #28
 8003b92:	4917      	ldr	r1, [pc, #92]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b9a:	4b16      	ldr	r3, [pc, #88]	@ (8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ba0:	f7fd fbc0 	bl	8001324 <HAL_GetTick>
 8003ba4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003ba6:	e008      	b.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ba8:	f7fd fbbc 	bl	8001324 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e09f      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bba:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf0 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d0f0      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8003bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bc8:	2b01      	cmp	r3, #1
 8003bca:	f040 8095 	bne.w	8003cf8 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bce:	4b0a      	ldr	r3, [pc, #40]	@ (8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003bd4:	f7fd fba6 	bl	8001324 <HAL_GetTick>
 8003bd8:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bda:	e00f      	b.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003bdc:	f7fd fba2 	bl	8001324 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d908      	bls.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e085      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
 8003bee:	bf00      	nop
 8003bf0:	40023800 	.word	0x40023800
 8003bf4:	42470068 	.word	0x42470068
 8003bf8:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003bfc:	4b41      	ldr	r3, [pc, #260]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c08:	d0e8      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0304 	and.w	r3, r3, #4
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d003      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d02b      	beq.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d127      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8003c32:	4b34      	ldr	r3, [pc, #208]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c38:	0c1b      	lsrs	r3, r3, #16
 8003c3a:	f003 0303 	and.w	r3, r3, #3
 8003c3e:	3301      	adds	r3, #1
 8003c40:	005b      	lsls	r3, r3, #1
 8003c42:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	699a      	ldr	r2, [r3, #24]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69db      	ldr	r3, [r3, #28]
 8003c4c:	019b      	lsls	r3, r3, #6
 8003c4e:	431a      	orrs	r2, r3
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	3b01      	subs	r3, #1
 8003c56:	041b      	lsls	r3, r3, #16
 8003c58:	431a      	orrs	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5e:	061b      	lsls	r3, r3, #24
 8003c60:	4928      	ldr	r1, [pc, #160]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c68:	4b26      	ldr	r3, [pc, #152]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003c6e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c76:	3b01      	subs	r3, #1
 8003c78:	021b      	lsls	r3, r3, #8
 8003c7a:	4922      	ldr	r1, [pc, #136]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d01d      	beq.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c92:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c96:	d118      	bne.n	8003cca <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003c98:	4b1a      	ldr	r3, [pc, #104]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c9e:	0e1b      	lsrs	r3, r3, #24
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699a      	ldr	r2, [r3, #24]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	69db      	ldr	r3, [r3, #28]
 8003cae:	019b      	lsls	r3, r3, #6
 8003cb0:	431a      	orrs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6a1b      	ldr	r3, [r3, #32]
 8003cb6:	085b      	lsrs	r3, r3, #1
 8003cb8:	3b01      	subs	r3, #1
 8003cba:	041b      	lsls	r3, r3, #16
 8003cbc:	431a      	orrs	r2, r3
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	061b      	lsls	r3, r3, #24
 8003cc2:	4910      	ldr	r1, [pc, #64]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003cca:	4b0f      	ldr	r3, [pc, #60]	@ (8003d08 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8003ccc:	2201      	movs	r2, #1
 8003cce:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cd0:	f7fd fb28 	bl	8001324 <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cd6:	e008      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003cd8:	f7fd fb24 	bl	8001324 <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e007      	b.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003cea:	4b06      	ldr	r3, [pc, #24]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003cf2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003cf6:	d1ef      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3730      	adds	r7, #48	@ 0x30
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40023800 	.word	0x40023800
 8003d08:	42470070 	.word	0x42470070

08003d0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d10:	b0ae      	sub	sp, #184	@ 0xb8
 8003d12:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d20:	2300      	movs	r3, #0
 8003d22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d32:	4bcb      	ldr	r3, [pc, #812]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 030c 	and.w	r3, r3, #12
 8003d3a:	2b0c      	cmp	r3, #12
 8003d3c:	f200 8206 	bhi.w	800414c <HAL_RCC_GetSysClockFreq+0x440>
 8003d40:	a201      	add	r2, pc, #4	@ (adr r2, 8003d48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d46:	bf00      	nop
 8003d48:	08003d7d 	.word	0x08003d7d
 8003d4c:	0800414d 	.word	0x0800414d
 8003d50:	0800414d 	.word	0x0800414d
 8003d54:	0800414d 	.word	0x0800414d
 8003d58:	08003d85 	.word	0x08003d85
 8003d5c:	0800414d 	.word	0x0800414d
 8003d60:	0800414d 	.word	0x0800414d
 8003d64:	0800414d 	.word	0x0800414d
 8003d68:	08003d8d 	.word	0x08003d8d
 8003d6c:	0800414d 	.word	0x0800414d
 8003d70:	0800414d 	.word	0x0800414d
 8003d74:	0800414d 	.word	0x0800414d
 8003d78:	08003f7d 	.word	0x08003f7d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d7c:	4bb9      	ldr	r3, [pc, #740]	@ (8004064 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d7e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d82:	e1e7      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d84:	4bb8      	ldr	r3, [pc, #736]	@ (8004068 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d8a:	e1e3      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d8c:	4bb4      	ldr	r3, [pc, #720]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d94:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d98:	4bb1      	ldr	r3, [pc, #708]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d071      	beq.n	8003e88 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003da4:	4bae      	ldr	r3, [pc, #696]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	099b      	lsrs	r3, r3, #6
 8003daa:	2200      	movs	r2, #0
 8003dac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003db0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003db4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003db8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dbc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dca:	4622      	mov	r2, r4
 8003dcc:	462b      	mov	r3, r5
 8003dce:	f04f 0000 	mov.w	r0, #0
 8003dd2:	f04f 0100 	mov.w	r1, #0
 8003dd6:	0159      	lsls	r1, r3, #5
 8003dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ddc:	0150      	lsls	r0, r2, #5
 8003dde:	4602      	mov	r2, r0
 8003de0:	460b      	mov	r3, r1
 8003de2:	4621      	mov	r1, r4
 8003de4:	1a51      	subs	r1, r2, r1
 8003de6:	6439      	str	r1, [r7, #64]	@ 0x40
 8003de8:	4629      	mov	r1, r5
 8003dea:	eb63 0301 	sbc.w	r3, r3, r1
 8003dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003dfc:	4649      	mov	r1, r9
 8003dfe:	018b      	lsls	r3, r1, #6
 8003e00:	4641      	mov	r1, r8
 8003e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e06:	4641      	mov	r1, r8
 8003e08:	018a      	lsls	r2, r1, #6
 8003e0a:	4641      	mov	r1, r8
 8003e0c:	1a51      	subs	r1, r2, r1
 8003e0e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e10:	4649      	mov	r1, r9
 8003e12:	eb63 0301 	sbc.w	r3, r3, r1
 8003e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e24:	4649      	mov	r1, r9
 8003e26:	00cb      	lsls	r3, r1, #3
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e2e:	4641      	mov	r1, r8
 8003e30:	00ca      	lsls	r2, r1, #3
 8003e32:	4610      	mov	r0, r2
 8003e34:	4619      	mov	r1, r3
 8003e36:	4603      	mov	r3, r0
 8003e38:	4622      	mov	r2, r4
 8003e3a:	189b      	adds	r3, r3, r2
 8003e3c:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e3e:	462b      	mov	r3, r5
 8003e40:	460a      	mov	r2, r1
 8003e42:	eb42 0303 	adc.w	r3, r2, r3
 8003e46:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e54:	4629      	mov	r1, r5
 8003e56:	024b      	lsls	r3, r1, #9
 8003e58:	4621      	mov	r1, r4
 8003e5a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e5e:	4621      	mov	r1, r4
 8003e60:	024a      	lsls	r2, r1, #9
 8003e62:	4610      	mov	r0, r2
 8003e64:	4619      	mov	r1, r3
 8003e66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e70:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e74:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e78:	f7fc f9c4 	bl	8000204 <__aeabi_uldivmod>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4613      	mov	r3, r2
 8003e82:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e86:	e067      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e88:	4b75      	ldr	r3, [pc, #468]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	099b      	lsrs	r3, r3, #6
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e94:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e98:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea0:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003ea6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003eaa:	4622      	mov	r2, r4
 8003eac:	462b      	mov	r3, r5
 8003eae:	f04f 0000 	mov.w	r0, #0
 8003eb2:	f04f 0100 	mov.w	r1, #0
 8003eb6:	0159      	lsls	r1, r3, #5
 8003eb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ebc:	0150      	lsls	r0, r2, #5
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	460b      	mov	r3, r1
 8003ec2:	4621      	mov	r1, r4
 8003ec4:	1a51      	subs	r1, r2, r1
 8003ec6:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003ec8:	4629      	mov	r1, r5
 8003eca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed0:	f04f 0200 	mov.w	r2, #0
 8003ed4:	f04f 0300 	mov.w	r3, #0
 8003ed8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003edc:	4649      	mov	r1, r9
 8003ede:	018b      	lsls	r3, r1, #6
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ee6:	4641      	mov	r1, r8
 8003ee8:	018a      	lsls	r2, r1, #6
 8003eea:	4641      	mov	r1, r8
 8003eec:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef0:	4649      	mov	r1, r9
 8003ef2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	f04f 0300 	mov.w	r3, #0
 8003efe:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f02:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0a:	4692      	mov	sl, r2
 8003f0c:	469b      	mov	fp, r3
 8003f0e:	4623      	mov	r3, r4
 8003f10:	eb1a 0303 	adds.w	r3, sl, r3
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	462b      	mov	r3, r5
 8003f18:	eb4b 0303 	adc.w	r3, fp, r3
 8003f1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f1e:	f04f 0200 	mov.w	r2, #0
 8003f22:	f04f 0300 	mov.w	r3, #0
 8003f26:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	028b      	lsls	r3, r1, #10
 8003f2e:	4621      	mov	r1, r4
 8003f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f34:	4621      	mov	r1, r4
 8003f36:	028a      	lsls	r2, r1, #10
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f40:	2200      	movs	r2, #0
 8003f42:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f44:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f46:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f4a:	f7fc f95b 	bl	8000204 <__aeabi_uldivmod>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	460b      	mov	r3, r1
 8003f52:	4613      	mov	r3, r2
 8003f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003f58:	4b41      	ldr	r3, [pc, #260]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8003f6a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f6e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f76:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f7a:	e0eb      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f7c:	4b38      	ldr	r3, [pc, #224]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f84:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f88:	4b35      	ldr	r3, [pc, #212]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d06b      	beq.n	800406c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f94:	4b32      	ldr	r3, [pc, #200]	@ (8004060 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	099b      	lsrs	r3, r3, #6
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003fa8:	2300      	movs	r3, #0
 8003faa:	667b      	str	r3, [r7, #100]	@ 0x64
 8003fac:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003fb0:	4622      	mov	r2, r4
 8003fb2:	462b      	mov	r3, r5
 8003fb4:	f04f 0000 	mov.w	r0, #0
 8003fb8:	f04f 0100 	mov.w	r1, #0
 8003fbc:	0159      	lsls	r1, r3, #5
 8003fbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fc2:	0150      	lsls	r0, r2, #5
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	4621      	mov	r1, r4
 8003fca:	1a51      	subs	r1, r2, r1
 8003fcc:	61b9      	str	r1, [r7, #24]
 8003fce:	4629      	mov	r1, r5
 8003fd0:	eb63 0301 	sbc.w	r3, r3, r1
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fe2:	4659      	mov	r1, fp
 8003fe4:	018b      	lsls	r3, r1, #6
 8003fe6:	4651      	mov	r1, sl
 8003fe8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fec:	4651      	mov	r1, sl
 8003fee:	018a      	lsls	r2, r1, #6
 8003ff0:	4651      	mov	r1, sl
 8003ff2:	ebb2 0801 	subs.w	r8, r2, r1
 8003ff6:	4659      	mov	r1, fp
 8003ff8:	eb63 0901 	sbc.w	r9, r3, r1
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004008:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800400c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004010:	4690      	mov	r8, r2
 8004012:	4699      	mov	r9, r3
 8004014:	4623      	mov	r3, r4
 8004016:	eb18 0303 	adds.w	r3, r8, r3
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	462b      	mov	r3, r5
 800401e:	eb49 0303 	adc.w	r3, r9, r3
 8004022:	617b      	str	r3, [r7, #20]
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	f04f 0300 	mov.w	r3, #0
 800402c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004030:	4629      	mov	r1, r5
 8004032:	024b      	lsls	r3, r1, #9
 8004034:	4621      	mov	r1, r4
 8004036:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800403a:	4621      	mov	r1, r4
 800403c:	024a      	lsls	r2, r1, #9
 800403e:	4610      	mov	r0, r2
 8004040:	4619      	mov	r1, r3
 8004042:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004046:	2200      	movs	r2, #0
 8004048:	65bb      	str	r3, [r7, #88]	@ 0x58
 800404a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800404c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004050:	f7fc f8d8 	bl	8000204 <__aeabi_uldivmod>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4613      	mov	r3, r2
 800405a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800405e:	e065      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x420>
 8004060:	40023800 	.word	0x40023800
 8004064:	00f42400 	.word	0x00f42400
 8004068:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800406c:	4b3d      	ldr	r3, [pc, #244]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x458>)
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	2200      	movs	r2, #0
 8004074:	4618      	mov	r0, r3
 8004076:	4611      	mov	r1, r2
 8004078:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800407c:	653b      	str	r3, [r7, #80]	@ 0x50
 800407e:	2300      	movs	r3, #0
 8004080:	657b      	str	r3, [r7, #84]	@ 0x54
 8004082:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8004086:	4642      	mov	r2, r8
 8004088:	464b      	mov	r3, r9
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0159      	lsls	r1, r3, #5
 8004094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004098:	0150      	lsls	r0, r2, #5
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	4641      	mov	r1, r8
 80040a0:	1a51      	subs	r1, r2, r1
 80040a2:	60b9      	str	r1, [r7, #8]
 80040a4:	4649      	mov	r1, r9
 80040a6:	eb63 0301 	sbc.w	r3, r3, r1
 80040aa:	60fb      	str	r3, [r7, #12]
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	f04f 0300 	mov.w	r3, #0
 80040b4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040b8:	4659      	mov	r1, fp
 80040ba:	018b      	lsls	r3, r1, #6
 80040bc:	4651      	mov	r1, sl
 80040be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040c2:	4651      	mov	r1, sl
 80040c4:	018a      	lsls	r2, r1, #6
 80040c6:	4651      	mov	r1, sl
 80040c8:	1a54      	subs	r4, r2, r1
 80040ca:	4659      	mov	r1, fp
 80040cc:	eb63 0501 	sbc.w	r5, r3, r1
 80040d0:	f04f 0200 	mov.w	r2, #0
 80040d4:	f04f 0300 	mov.w	r3, #0
 80040d8:	00eb      	lsls	r3, r5, #3
 80040da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040de:	00e2      	lsls	r2, r4, #3
 80040e0:	4614      	mov	r4, r2
 80040e2:	461d      	mov	r5, r3
 80040e4:	4643      	mov	r3, r8
 80040e6:	18e3      	adds	r3, r4, r3
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	464b      	mov	r3, r9
 80040ec:	eb45 0303 	adc.w	r3, r5, r3
 80040f0:	607b      	str	r3, [r7, #4]
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040fe:	4629      	mov	r1, r5
 8004100:	028b      	lsls	r3, r1, #10
 8004102:	4621      	mov	r1, r4
 8004104:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004108:	4621      	mov	r1, r4
 800410a:	028a      	lsls	r2, r1, #10
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004114:	2200      	movs	r2, #0
 8004116:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004118:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800411a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800411e:	f7fc f871 	bl	8000204 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800412c:	4b0d      	ldr	r3, [pc, #52]	@ (8004164 <HAL_RCC_GetSysClockFreq+0x458>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	0f1b      	lsrs	r3, r3, #28
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800413a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800413e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800414a:	e003      	b.n	8004154 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_RCC_GetSysClockFreq+0x45c>)
 800414e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004152:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004154:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8004158:	4618      	mov	r0, r3
 800415a:	37b8      	adds	r7, #184	@ 0xb8
 800415c:	46bd      	mov	sp, r7
 800415e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	00f42400 	.word	0x00f42400

0800416c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d101      	bne.n	800417e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e28d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	f000 8083 	beq.w	8004292 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800418c:	4b94      	ldr	r3, [pc, #592]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	f003 030c 	and.w	r3, r3, #12
 8004194:	2b04      	cmp	r3, #4
 8004196:	d019      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8004198:	4b91      	ldr	r3, [pc, #580]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f003 030c 	and.w	r3, r3, #12
        || \
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d106      	bne.n	80041b2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041a4:	4b8e      	ldr	r3, [pc, #568]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ac:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041b0:	d00c      	beq.n	80041cc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041b2:	4b8b      	ldr	r3, [pc, #556]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80041ba:	2b0c      	cmp	r3, #12
 80041bc:	d112      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041be:	4b88      	ldr	r3, [pc, #544]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ca:	d10b      	bne.n	80041e4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041cc:	4b84      	ldr	r3, [pc, #528]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <HAL_RCC_OscConfig+0x124>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d157      	bne.n	8004290 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e25a      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041ec:	d106      	bne.n	80041fc <HAL_RCC_OscConfig+0x90>
 80041ee:	4b7c      	ldr	r3, [pc, #496]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a7b      	ldr	r2, [pc, #492]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e01d      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0xb4>
 8004206:	4b76      	ldr	r3, [pc, #472]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a75      	ldr	r2, [pc, #468]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800420c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b73      	ldr	r3, [pc, #460]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a72      	ldr	r2, [pc, #456]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e00b      	b.n	8004238 <HAL_RCC_OscConfig+0xcc>
 8004220:	4b6f      	ldr	r3, [pc, #444]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a6e      	ldr	r2, [pc, #440]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800422a:	6013      	str	r3, [r2, #0]
 800422c:	4b6c      	ldr	r3, [pc, #432]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a6b      	ldr	r2, [pc, #428]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004232:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004236:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d013      	beq.n	8004268 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd f870 	bl	8001324 <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004248:	f7fd f86c 	bl	8001324 <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b64      	cmp	r3, #100	@ 0x64
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e21f      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b61      	ldr	r3, [pc, #388]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d0f0      	beq.n	8004248 <HAL_RCC_OscConfig+0xdc>
 8004266:	e014      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004268:	f7fd f85c 	bl	8001324 <HAL_GetTick>
 800426c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800426e:	e008      	b.n	8004282 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004270:	f7fd f858 	bl	8001324 <HAL_GetTick>
 8004274:	4602      	mov	r2, r0
 8004276:	693b      	ldr	r3, [r7, #16]
 8004278:	1ad3      	subs	r3, r2, r3
 800427a:	2b64      	cmp	r3, #100	@ 0x64
 800427c:	d901      	bls.n	8004282 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800427e:	2303      	movs	r3, #3
 8004280:	e20b      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004282:	4b57      	ldr	r3, [pc, #348]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800428a:	2b00      	cmp	r3, #0
 800428c:	d1f0      	bne.n	8004270 <HAL_RCC_OscConfig+0x104>
 800428e:	e000      	b.n	8004292 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004290:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06f      	beq.n	800437e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800429e:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f003 030c 	and.w	r3, r3, #12
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d017      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042aa:	4b4d      	ldr	r3, [pc, #308]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	f003 030c 	and.w	r3, r3, #12
        || \
 80042b2:	2b08      	cmp	r3, #8
 80042b4:	d105      	bne.n	80042c2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042b6:	4b4a      	ldr	r3, [pc, #296]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d00b      	beq.n	80042da <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80042ca:	2b0c      	cmp	r3, #12
 80042cc:	d11c      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ce:	4b44      	ldr	r3, [pc, #272]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d116      	bne.n	8004308 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d001      	beq.n	80042f2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e1d3      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f2:	4b3b      	ldr	r3, [pc, #236]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	691b      	ldr	r3, [r3, #16]
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	4937      	ldr	r1, [pc, #220]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004306:	e03a      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d020      	beq.n	8004352 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004310:	4b34      	ldr	r3, [pc, #208]	@ (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004312:	2201      	movs	r2, #1
 8004314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004316:	f7fd f805 	bl	8001324 <HAL_GetTick>
 800431a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800431c:	e008      	b.n	8004330 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800431e:	f7fd f801 	bl	8001324 <HAL_GetTick>
 8004322:	4602      	mov	r2, r0
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	1ad3      	subs	r3, r2, r3
 8004328:	2b02      	cmp	r3, #2
 800432a:	d901      	bls.n	8004330 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800432c:	2303      	movs	r3, #3
 800432e:	e1b4      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004330:	4b2b      	ldr	r3, [pc, #172]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0302 	and.w	r3, r3, #2
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0f0      	beq.n	800431e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433c:	4b28      	ldr	r3, [pc, #160]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	691b      	ldr	r3, [r3, #16]
 8004348:	00db      	lsls	r3, r3, #3
 800434a:	4925      	ldr	r1, [pc, #148]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 800434c:	4313      	orrs	r3, r2
 800434e:	600b      	str	r3, [r1, #0]
 8004350:	e015      	b.n	800437e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004352:	4b24      	ldr	r3, [pc, #144]	@ (80043e4 <HAL_RCC_OscConfig+0x278>)
 8004354:	2200      	movs	r2, #0
 8004356:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004358:	f7fc ffe4 	bl	8001324 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800435e:	e008      	b.n	8004372 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004360:	f7fc ffe0 	bl	8001324 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	2b02      	cmp	r3, #2
 800436c:	d901      	bls.n	8004372 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800436e:	2303      	movs	r3, #3
 8004370:	e193      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004372:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0302 	and.w	r3, r3, #2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d1f0      	bne.n	8004360 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0308 	and.w	r3, r3, #8
 8004386:	2b00      	cmp	r3, #0
 8004388:	d036      	beq.n	80043f8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d016      	beq.n	80043c0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004392:	4b15      	ldr	r3, [pc, #84]	@ (80043e8 <HAL_RCC_OscConfig+0x27c>)
 8004394:	2201      	movs	r2, #1
 8004396:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004398:	f7fc ffc4 	bl	8001324 <HAL_GetTick>
 800439c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800439e:	e008      	b.n	80043b2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043a0:	f7fc ffc0 	bl	8001324 <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d901      	bls.n	80043b2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043ae:	2303      	movs	r3, #3
 80043b0:	e173      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043b2:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_OscConfig+0x274>)
 80043b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d0f0      	beq.n	80043a0 <HAL_RCC_OscConfig+0x234>
 80043be:	e01b      	b.n	80043f8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c0:	4b09      	ldr	r3, [pc, #36]	@ (80043e8 <HAL_RCC_OscConfig+0x27c>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043c6:	f7fc ffad 	bl	8001324 <HAL_GetTick>
 80043ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043cc:	e00e      	b.n	80043ec <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ce:	f7fc ffa9 	bl	8001324 <HAL_GetTick>
 80043d2:	4602      	mov	r2, r0
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	1ad3      	subs	r3, r2, r3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d907      	bls.n	80043ec <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043dc:	2303      	movs	r3, #3
 80043de:	e15c      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 80043e0:	40023800 	.word	0x40023800
 80043e4:	42470000 	.word	0x42470000
 80043e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043ec:	4b8a      	ldr	r3, [pc, #552]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80043ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1ea      	bne.n	80043ce <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	f000 8097 	beq.w	8004534 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004406:	2300      	movs	r3, #0
 8004408:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800440a:	4b83      	ldr	r3, [pc, #524]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d10f      	bne.n	8004436 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004416:	2300      	movs	r3, #0
 8004418:	60bb      	str	r3, [r7, #8]
 800441a:	4b7f      	ldr	r3, [pc, #508]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800441c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800441e:	4a7e      	ldr	r2, [pc, #504]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004420:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004424:	6413      	str	r3, [r2, #64]	@ 0x40
 8004426:	4b7c      	ldr	r3, [pc, #496]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800442e:	60bb      	str	r3, [r7, #8]
 8004430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004432:	2301      	movs	r3, #1
 8004434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004436:	4b79      	ldr	r3, [pc, #484]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800443e:	2b00      	cmp	r3, #0
 8004440:	d118      	bne.n	8004474 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004442:	4b76      	ldr	r3, [pc, #472]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a75      	ldr	r2, [pc, #468]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 8004448:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800444c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800444e:	f7fc ff69 	bl	8001324 <HAL_GetTick>
 8004452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004454:	e008      	b.n	8004468 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004456:	f7fc ff65 	bl	8001324 <HAL_GetTick>
 800445a:	4602      	mov	r2, r0
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1ad3      	subs	r3, r2, r3
 8004460:	2b02      	cmp	r3, #2
 8004462:	d901      	bls.n	8004468 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004464:	2303      	movs	r3, #3
 8004466:	e118      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004468:	4b6c      	ldr	r3, [pc, #432]	@ (800461c <HAL_RCC_OscConfig+0x4b0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d0f0      	beq.n	8004456 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	2b01      	cmp	r3, #1
 800447a:	d106      	bne.n	800448a <HAL_RCC_OscConfig+0x31e>
 800447c:	4b66      	ldr	r3, [pc, #408]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004480:	4a65      	ldr	r2, [pc, #404]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	6713      	str	r3, [r2, #112]	@ 0x70
 8004488:	e01c      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b05      	cmp	r3, #5
 8004490:	d10c      	bne.n	80044ac <HAL_RCC_OscConfig+0x340>
 8004492:	4b61      	ldr	r3, [pc, #388]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004496:	4a60      	ldr	r2, [pc, #384]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004498:	f043 0304 	orr.w	r3, r3, #4
 800449c:	6713      	str	r3, [r2, #112]	@ 0x70
 800449e:	4b5e      	ldr	r3, [pc, #376]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a2:	4a5d      	ldr	r2, [pc, #372]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044a4:	f043 0301 	orr.w	r3, r3, #1
 80044a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80044aa:	e00b      	b.n	80044c4 <HAL_RCC_OscConfig+0x358>
 80044ac:	4b5a      	ldr	r3, [pc, #360]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b0:	4a59      	ldr	r2, [pc, #356]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044b2:	f023 0301 	bic.w	r3, r3, #1
 80044b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80044b8:	4b57      	ldr	r3, [pc, #348]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044bc:	4a56      	ldr	r2, [pc, #344]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044be:	f023 0304 	bic.w	r3, r3, #4
 80044c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d015      	beq.n	80044f8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fc ff2a 	bl	8001324 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fc ff26 	bl	8001324 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e0d7      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ee      	beq.n	80044d4 <HAL_RCC_OscConfig+0x368>
 80044f6:	e014      	b.n	8004522 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044f8:	f7fc ff14 	bl	8001324 <HAL_GetTick>
 80044fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fe:	e00a      	b.n	8004516 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004500:	f7fc ff10 	bl	8001324 <HAL_GetTick>
 8004504:	4602      	mov	r2, r0
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	1ad3      	subs	r3, r2, r3
 800450a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800450e:	4293      	cmp	r3, r2
 8004510:	d901      	bls.n	8004516 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004512:	2303      	movs	r3, #3
 8004514:	e0c1      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004516:	4b40      	ldr	r3, [pc, #256]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004518:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d1ee      	bne.n	8004500 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004522:	7dfb      	ldrb	r3, [r7, #23]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d105      	bne.n	8004534 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004528:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452c:	4a3a      	ldr	r2, [pc, #232]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 800452e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004532:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b00      	cmp	r3, #0
 800453a:	f000 80ad 	beq.w	8004698 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800453e:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f003 030c 	and.w	r3, r3, #12
 8004546:	2b08      	cmp	r3, #8
 8004548:	d060      	beq.n	800460c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d145      	bne.n	80045de <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004552:	4b33      	ldr	r3, [pc, #204]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 8004554:	2200      	movs	r2, #0
 8004556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004558:	f7fc fee4 	bl	8001324 <HAL_GetTick>
 800455c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800455e:	e008      	b.n	8004572 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004560:	f7fc fee0 	bl	8001324 <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b02      	cmp	r3, #2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e093      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004572:	4b29      	ldr	r3, [pc, #164]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800457a:	2b00      	cmp	r3, #0
 800457c:	d1f0      	bne.n	8004560 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	69da      	ldr	r2, [r3, #28]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1b      	ldr	r3, [r3, #32]
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800458c:	019b      	lsls	r3, r3, #6
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004594:	085b      	lsrs	r3, r3, #1
 8004596:	3b01      	subs	r3, #1
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045a8:	071b      	lsls	r3, r3, #28
 80045aa:	491b      	ldr	r1, [pc, #108]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045b2:	2201      	movs	r2, #1
 80045b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045b6:	f7fc feb5 	bl	8001324 <HAL_GetTick>
 80045ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045bc:	e008      	b.n	80045d0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045be:	f7fc feb1 	bl	8001324 <HAL_GetTick>
 80045c2:	4602      	mov	r2, r0
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	1ad3      	subs	r3, r2, r3
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d901      	bls.n	80045d0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e064      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d0:	4b11      	ldr	r3, [pc, #68]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d0f0      	beq.n	80045be <HAL_RCC_OscConfig+0x452>
 80045dc:	e05c      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045de:	4b10      	ldr	r3, [pc, #64]	@ (8004620 <HAL_RCC_OscConfig+0x4b4>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045e4:	f7fc fe9e 	bl	8001324 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ea:	e008      	b.n	80045fe <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ec:	f7fc fe9a 	bl	8001324 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e04d      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045fe:	4b06      	ldr	r3, [pc, #24]	@ (8004618 <HAL_RCC_OscConfig+0x4ac>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1f0      	bne.n	80045ec <HAL_RCC_OscConfig+0x480>
 800460a:	e045      	b.n	8004698 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d107      	bne.n	8004624 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	e040      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
 8004618:	40023800 	.word	0x40023800
 800461c:	40007000 	.word	0x40007000
 8004620:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004624:	4b1f      	ldr	r3, [pc, #124]	@ (80046a4 <HAL_RCC_OscConfig+0x538>)
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	2b01      	cmp	r3, #1
 8004630:	d030      	beq.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d129      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800464a:	429a      	cmp	r2, r3
 800464c:	d122      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004654:	4013      	ands	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800465a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800465c:	4293      	cmp	r3, r2
 800465e:	d119      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800466a:	085b      	lsrs	r3, r3, #1
 800466c:	3b01      	subs	r3, #1
 800466e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d10f      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004690:	429a      	cmp	r2, r3
 8004692:	d001      	beq.n	8004698 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3718      	adds	r7, #24
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40023800 	.word	0x40023800

080046a8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d101      	bne.n	80046ba <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e07b      	b.n	80047b2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d108      	bne.n	80046d4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ca:	d009      	beq.n	80046e0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	61da      	str	r2, [r3, #28]
 80046d2:	e005      	b.n	80046e0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d106      	bne.n	8004700 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7fc fb80 	bl	8000e00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004716:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004732:	431a      	orrs	r2, r3
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	f003 0302 	and.w	r3, r3, #2
 800473c:	431a      	orrs	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f003 0301 	and.w	r3, r3, #1
 8004746:	431a      	orrs	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	699b      	ldr	r3, [r3, #24]
 800474c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004750:	431a      	orrs	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004764:	ea42 0103 	orr.w	r1, r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	430a      	orrs	r2, r1
 8004776:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	699b      	ldr	r3, [r3, #24]
 800477c:	0c1b      	lsrs	r3, r3, #16
 800477e:	f003 0104 	and.w	r1, r3, #4
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004786:	f003 0210 	and.w	r2, r3, #16
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	430a      	orrs	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	69da      	ldr	r2, [r3, #28]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047a0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3708      	adds	r7, #8
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b082      	sub	sp, #8
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d101      	bne.n	80047cc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e041      	b.n	8004850 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d106      	bne.n	80047e6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f7fc fc03 	bl	8000fec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2202      	movs	r2, #2
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	3304      	adds	r3, #4
 80047f6:	4619      	mov	r1, r3
 80047f8:	4610      	mov	r0, r2
 80047fa:	f000 f995 	bl	8004b28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2201      	movs	r2, #1
 800482a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2201      	movs	r2, #1
 8004832:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2201      	movs	r2, #1
 800484a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3708      	adds	r7, #8
 8004854:	46bd      	mov	sp, r7
 8004856:	bd80      	pop	{r7, pc}

08004858 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	b086      	sub	sp, #24
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
 8004860:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2b00      	cmp	r3, #0
 8004866:	d101      	bne.n	800486c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e097      	b.n	800499c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f7fc fb35 	bl	8000ef0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	687a      	ldr	r2, [r7, #4]
 8004896:	6812      	ldr	r2, [r2, #0]
 8004898:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800489c:	f023 0307 	bic.w	r3, r3, #7
 80048a0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	3304      	adds	r3, #4
 80048aa:	4619      	mov	r1, r3
 80048ac:	4610      	mov	r0, r2
 80048ae:	f000 f93b 	bl	8004b28 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	6a1b      	ldr	r3, [r3, #32]
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	697a      	ldr	r2, [r7, #20]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048da:	f023 0303 	bic.w	r3, r3, #3
 80048de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	689a      	ldr	r2, [r3, #8]
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	021b      	lsls	r3, r3, #8
 80048ea:	4313      	orrs	r3, r2
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4313      	orrs	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80048f8:	f023 030c 	bic.w	r3, r3, #12
 80048fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004904:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	69db      	ldr	r3, [r3, #28]
 8004912:	021b      	lsls	r3, r3, #8
 8004914:	4313      	orrs	r3, r2
 8004916:	693a      	ldr	r2, [r7, #16]
 8004918:	4313      	orrs	r3, r2
 800491a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	011a      	lsls	r2, r3, #4
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	031b      	lsls	r3, r3, #12
 8004928:	4313      	orrs	r3, r2
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004936:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800493e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	4313      	orrs	r3, r2
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	697a      	ldr	r2, [r7, #20]
 8004958:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2201      	movs	r2, #1
 800496e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2201      	movs	r2, #1
 800497e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	2201      	movs	r2, #1
 8004986:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2201      	movs	r2, #1
 800498e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3718      	adds	r7, #24
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049b0:	2300      	movs	r3, #0
 80049b2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049ba:	2b01      	cmp	r3, #1
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80049be:	2302      	movs	r3, #2
 80049c0:	e0ae      	b.n	8004b20 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b0c      	cmp	r3, #12
 80049ce:	f200 809f 	bhi.w	8004b10 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80049d2:	a201      	add	r2, pc, #4	@ (adr r2, 80049d8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80049d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049d8:	08004a0d 	.word	0x08004a0d
 80049dc:	08004b11 	.word	0x08004b11
 80049e0:	08004b11 	.word	0x08004b11
 80049e4:	08004b11 	.word	0x08004b11
 80049e8:	08004a4d 	.word	0x08004a4d
 80049ec:	08004b11 	.word	0x08004b11
 80049f0:	08004b11 	.word	0x08004b11
 80049f4:	08004b11 	.word	0x08004b11
 80049f8:	08004a8f 	.word	0x08004a8f
 80049fc:	08004b11 	.word	0x08004b11
 8004a00:	08004b11 	.word	0x08004b11
 8004a04:	08004b11 	.word	0x08004b11
 8004a08:	08004acf 	.word	0x08004acf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68b9      	ldr	r1, [r7, #8]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f000 f92e 	bl	8004c74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	699a      	ldr	r2, [r3, #24]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0208 	orr.w	r2, r2, #8
 8004a26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699a      	ldr	r2, [r3, #24]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f022 0204 	bic.w	r2, r2, #4
 8004a36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6999      	ldr	r1, [r3, #24]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	691a      	ldr	r2, [r3, #16]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	430a      	orrs	r2, r1
 8004a48:	619a      	str	r2, [r3, #24]
      break;
 8004a4a:	e064      	b.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f97e 	bl	8004d54 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	021a      	lsls	r2, r3, #8
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	619a      	str	r2, [r3, #24]
      break;
 8004a8c:	e043      	b.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 f9d3 	bl	8004e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	69da      	ldr	r2, [r3, #28]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0208 	orr.w	r2, r2, #8
 8004aa8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	69da      	ldr	r2, [r3, #28]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 0204 	bic.w	r2, r2, #4
 8004ab8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	69d9      	ldr	r1, [r3, #28]
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	691a      	ldr	r2, [r3, #16]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	61da      	str	r2, [r3, #28]
      break;
 8004acc:	e023      	b.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fa27 	bl	8004f28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691b      	ldr	r3, [r3, #16]
 8004b04:	021a      	lsls	r2, r3, #8
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	61da      	str	r2, [r3, #28]
      break;
 8004b0e:	e002      	b.n	8004b16 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	75fb      	strb	r3, [r7, #23]
      break;
 8004b14:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004b1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3718      	adds	r7, #24
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	4a43      	ldr	r2, [pc, #268]	@ (8004c48 <TIM_Base_SetConfig+0x120>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d013      	beq.n	8004b68 <TIM_Base_SetConfig+0x40>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b46:	d00f      	beq.n	8004b68 <TIM_Base_SetConfig+0x40>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a40      	ldr	r2, [pc, #256]	@ (8004c4c <TIM_Base_SetConfig+0x124>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d00b      	beq.n	8004b68 <TIM_Base_SetConfig+0x40>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a3f      	ldr	r2, [pc, #252]	@ (8004c50 <TIM_Base_SetConfig+0x128>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d007      	beq.n	8004b68 <TIM_Base_SetConfig+0x40>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004c54 <TIM_Base_SetConfig+0x12c>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d003      	beq.n	8004b68 <TIM_Base_SetConfig+0x40>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a3d      	ldr	r2, [pc, #244]	@ (8004c58 <TIM_Base_SetConfig+0x130>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d108      	bne.n	8004b7a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004b6e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4a32      	ldr	r2, [pc, #200]	@ (8004c48 <TIM_Base_SetConfig+0x120>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d02b      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b88:	d027      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8004c4c <TIM_Base_SetConfig+0x124>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d023      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a2e      	ldr	r2, [pc, #184]	@ (8004c50 <TIM_Base_SetConfig+0x128>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d01f      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	4a2d      	ldr	r2, [pc, #180]	@ (8004c54 <TIM_Base_SetConfig+0x12c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01b      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	4a2c      	ldr	r2, [pc, #176]	@ (8004c58 <TIM_Base_SetConfig+0x130>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d017      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a2b      	ldr	r2, [pc, #172]	@ (8004c5c <TIM_Base_SetConfig+0x134>)
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d013      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	4a2a      	ldr	r2, [pc, #168]	@ (8004c60 <TIM_Base_SetConfig+0x138>)
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d00f      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	4a29      	ldr	r2, [pc, #164]	@ (8004c64 <TIM_Base_SetConfig+0x13c>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d00b      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	4a28      	ldr	r2, [pc, #160]	@ (8004c68 <TIM_Base_SetConfig+0x140>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d007      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a27      	ldr	r2, [pc, #156]	@ (8004c6c <TIM_Base_SetConfig+0x144>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d003      	beq.n	8004bda <TIM_Base_SetConfig+0xb2>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4a26      	ldr	r2, [pc, #152]	@ (8004c70 <TIM_Base_SetConfig+0x148>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d108      	bne.n	8004bec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004be0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	695b      	ldr	r3, [r3, #20]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a0e      	ldr	r2, [pc, #56]	@ (8004c48 <TIM_Base_SetConfig+0x120>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d003      	beq.n	8004c1a <TIM_Base_SetConfig+0xf2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a10      	ldr	r2, [pc, #64]	@ (8004c58 <TIM_Base_SetConfig+0x130>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d103      	bne.n	8004c22 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f043 0204 	orr.w	r2, r3, #4
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	601a      	str	r2, [r3, #0]
}
 8004c3a:	bf00      	nop
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40000400 	.word	0x40000400
 8004c50:	40000800 	.word	0x40000800
 8004c54:	40000c00 	.word	0x40000c00
 8004c58:	40010400 	.word	0x40010400
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40014400 	.word	0x40014400
 8004c64:	40014800 	.word	0x40014800
 8004c68:	40001800 	.word	0x40001800
 8004c6c:	40001c00 	.word	0x40001c00
 8004c70:	40002000 	.word	0x40002000

08004c74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b087      	sub	sp, #28
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
 8004c88:	f023 0201 	bic.w	r2, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ca2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0303 	bic.w	r3, r3, #3
 8004caa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	68fa      	ldr	r2, [r7, #12]
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f023 0302 	bic.w	r3, r3, #2
 8004cbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a20      	ldr	r2, [pc, #128]	@ (8004d4c <TIM_OC1_SetConfig+0xd8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d003      	beq.n	8004cd8 <TIM_OC1_SetConfig+0x64>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	@ (8004d50 <TIM_OC1_SetConfig+0xdc>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d10c      	bne.n	8004cf2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	f023 0308 	bic.w	r3, r3, #8
 8004cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	697a      	ldr	r2, [r7, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	f023 0304 	bic.w	r3, r3, #4
 8004cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a15      	ldr	r2, [pc, #84]	@ (8004d4c <TIM_OC1_SetConfig+0xd8>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d003      	beq.n	8004d02 <TIM_OC1_SetConfig+0x8e>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a14      	ldr	r2, [pc, #80]	@ (8004d50 <TIM_OC1_SetConfig+0xdc>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d111      	bne.n	8004d26 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004d10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	695b      	ldr	r3, [r3, #20]
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	699b      	ldr	r3, [r3, #24]
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	621a      	str	r2, [r3, #32]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	40010000 	.word	0x40010000
 8004d50:	40010400 	.word	0x40010400

08004d54 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6a1b      	ldr	r3, [r3, #32]
 8004d68:	f023 0210 	bic.w	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	021b      	lsls	r3, r3, #8
 8004d92:	68fa      	ldr	r2, [r7, #12]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	f023 0320 	bic.w	r3, r3, #32
 8004d9e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	011b      	lsls	r3, r3, #4
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a22      	ldr	r2, [pc, #136]	@ (8004e38 <TIM_OC2_SetConfig+0xe4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC2_SetConfig+0x68>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a21      	ldr	r2, [pc, #132]	@ (8004e3c <TIM_OC2_SetConfig+0xe8>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d10d      	bne.n	8004dd8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dd6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a17      	ldr	r2, [pc, #92]	@ (8004e38 <TIM_OC2_SetConfig+0xe4>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d003      	beq.n	8004de8 <TIM_OC2_SetConfig+0x94>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a16      	ldr	r2, [pc, #88]	@ (8004e3c <TIM_OC2_SetConfig+0xe8>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d113      	bne.n	8004e10 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004dee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004df6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	695b      	ldr	r3, [r3, #20]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	693a      	ldr	r2, [r7, #16]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	699b      	ldr	r3, [r3, #24]
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	693a      	ldr	r2, [r7, #16]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	693a      	ldr	r2, [r7, #16]
 8004e14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	68fa      	ldr	r2, [r7, #12]
 8004e1a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	621a      	str	r2, [r3, #32]
}
 8004e2a:	bf00      	nop
 8004e2c:	371c      	adds	r7, #28
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40010000 	.word	0x40010000
 8004e3c:	40010400 	.word	0x40010400

08004e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b087      	sub	sp, #28
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69db      	ldr	r3, [r3, #28]
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	f023 0303 	bic.w	r3, r3, #3
 8004e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68fa      	ldr	r2, [r7, #12]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689b      	ldr	r3, [r3, #8]
 8004e8e:	021b      	lsls	r3, r3, #8
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	4313      	orrs	r3, r2
 8004e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	4a21      	ldr	r2, [pc, #132]	@ (8004f20 <TIM_OC3_SetConfig+0xe0>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d003      	beq.n	8004ea6 <TIM_OC3_SetConfig+0x66>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	4a20      	ldr	r2, [pc, #128]	@ (8004f24 <TIM_OC3_SetConfig+0xe4>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d10d      	bne.n	8004ec2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004eac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
 8004eb2:	021b      	lsls	r3, r3, #8
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004ec0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a16      	ldr	r2, [pc, #88]	@ (8004f20 <TIM_OC3_SetConfig+0xe0>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d003      	beq.n	8004ed2 <TIM_OC3_SetConfig+0x92>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a15      	ldr	r2, [pc, #84]	@ (8004f24 <TIM_OC3_SetConfig+0xe4>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d113      	bne.n	8004efa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004ed8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004ee0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	695b      	ldr	r3, [r3, #20]
 8004ee6:	011b      	lsls	r3, r3, #4
 8004ee8:	693a      	ldr	r2, [r7, #16]
 8004eea:	4313      	orrs	r3, r2
 8004eec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	011b      	lsls	r3, r3, #4
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	68fa      	ldr	r2, [r7, #12]
 8004f04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	685a      	ldr	r2, [r3, #4]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	621a      	str	r2, [r3, #32]
}
 8004f14:	bf00      	nop
 8004f16:	371c      	adds	r7, #28
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40010400 	.word	0x40010400

08004f28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b087      	sub	sp, #28
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a1b      	ldr	r3, [r3, #32]
 8004f3c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69db      	ldr	r3, [r3, #28]
 8004f4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	021b      	lsls	r3, r3, #8
 8004f66:	68fa      	ldr	r2, [r7, #12]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004f72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689b      	ldr	r3, [r3, #8]
 8004f78:	031b      	lsls	r3, r3, #12
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a12      	ldr	r2, [pc, #72]	@ (8004fcc <TIM_OC4_SetConfig+0xa4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d003      	beq.n	8004f90 <TIM_OC4_SetConfig+0x68>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a11      	ldr	r2, [pc, #68]	@ (8004fd0 <TIM_OC4_SetConfig+0xa8>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d109      	bne.n	8004fa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	695b      	ldr	r3, [r3, #20]
 8004f9c:	019b      	lsls	r3, r3, #6
 8004f9e:	697a      	ldr	r2, [r7, #20]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	68fa      	ldr	r2, [r7, #12]
 8004fae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	685a      	ldr	r2, [r3, #4]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	621a      	str	r2, [r3, #32]
}
 8004fbe:	bf00      	nop
 8004fc0:	371c      	adds	r7, #28
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40010000 	.word	0x40010000
 8004fd0:	40010400 	.word	0x40010400

08004fd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b085      	sub	sp, #20
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d101      	bne.n	8004fec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fe8:	2302      	movs	r3, #2
 8004fea:	e05a      	b.n	80050a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005012:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	68fa      	ldr	r2, [r7, #12]
 800501a:	4313      	orrs	r3, r2
 800501c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	68fa      	ldr	r2, [r7, #12]
 8005024:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a21      	ldr	r2, [pc, #132]	@ (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d022      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005038:	d01d      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1d      	ldr	r2, [pc, #116]	@ (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d018      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a1b      	ldr	r2, [pc, #108]	@ (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a1a      	ldr	r2, [pc, #104]	@ (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d00e      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a18      	ldr	r2, [pc, #96]	@ (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d009      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a17      	ldr	r2, [pc, #92]	@ (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d004      	beq.n	8005076 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a15      	ldr	r2, [pc, #84]	@ (80050c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d10c      	bne.n	8005090 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005076:	68bb      	ldr	r3, [r7, #8]
 8005078:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800507c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	4313      	orrs	r3, r2
 8005086:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68ba      	ldr	r2, [r7, #8]
 800508e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80050a0:	2300      	movs	r3, #0
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	3714      	adds	r7, #20
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40000400 	.word	0x40000400
 80050b8:	40000800 	.word	0x40000800
 80050bc:	40000c00 	.word	0x40000c00
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40014000 	.word	0x40014000
 80050c8:	40001800 	.word	0x40001800

080050cc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d101      	bne.n	80050de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e042      	b.n	8005164 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d106      	bne.n	80050f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2200      	movs	r2, #0
 80050ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f7fb fff2 	bl	80010dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2224      	movs	r2, #36	@ 0x24
 80050fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	68da      	ldr	r2, [r3, #12]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800510e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	f000 f82b 	bl	800516c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	691a      	ldr	r2, [r3, #16]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005124:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695a      	ldr	r2, [r3, #20]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005134:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68da      	ldr	r2, [r3, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005144:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2220      	movs	r2, #32
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2220      	movs	r2, #32
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2200      	movs	r2, #0
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3708      	adds	r7, #8
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}

0800516c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800516c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005170:	b0c0      	sub	sp, #256	@ 0x100
 8005172:	af00      	add	r7, sp, #0
 8005174:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005188:	68d9      	ldr	r1, [r3, #12]
 800518a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	ea40 0301 	orr.w	r3, r0, r1
 8005194:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	689a      	ldr	r2, [r3, #8]
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	691b      	ldr	r3, [r3, #16]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	431a      	orrs	r2, r3
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4313      	orrs	r3, r2
 80051b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051c4:	f021 010c 	bic.w	r1, r1, #12
 80051c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051d2:	430b      	orrs	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e6:	6999      	ldr	r1, [r3, #24]
 80051e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	ea40 0301 	orr.w	r3, r0, r1
 80051f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	4b8f      	ldr	r3, [pc, #572]	@ (8005438 <UART_SetConfig+0x2cc>)
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d005      	beq.n	800520c <UART_SetConfig+0xa0>
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b8d      	ldr	r3, [pc, #564]	@ (800543c <UART_SetConfig+0x2d0>)
 8005208:	429a      	cmp	r2, r3
 800520a:	d104      	bne.n	8005216 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800520c:	f7fe fa40 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8005210:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005214:	e003      	b.n	800521e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005216:	f7fe fa27 	bl	8003668 <HAL_RCC_GetPCLK1Freq>
 800521a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005228:	f040 810c 	bne.w	8005444 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800522c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005230:	2200      	movs	r2, #0
 8005232:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005236:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800523a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800523e:	4622      	mov	r2, r4
 8005240:	462b      	mov	r3, r5
 8005242:	1891      	adds	r1, r2, r2
 8005244:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005246:	415b      	adcs	r3, r3
 8005248:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800524a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800524e:	4621      	mov	r1, r4
 8005250:	eb12 0801 	adds.w	r8, r2, r1
 8005254:	4629      	mov	r1, r5
 8005256:	eb43 0901 	adc.w	r9, r3, r1
 800525a:	f04f 0200 	mov.w	r2, #0
 800525e:	f04f 0300 	mov.w	r3, #0
 8005262:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005266:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800526a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526e:	4690      	mov	r8, r2
 8005270:	4699      	mov	r9, r3
 8005272:	4623      	mov	r3, r4
 8005274:	eb18 0303 	adds.w	r3, r8, r3
 8005278:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800527c:	462b      	mov	r3, r5
 800527e:	eb49 0303 	adc.w	r3, r9, r3
 8005282:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005292:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005296:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800529a:	460b      	mov	r3, r1
 800529c:	18db      	adds	r3, r3, r3
 800529e:	653b      	str	r3, [r7, #80]	@ 0x50
 80052a0:	4613      	mov	r3, r2
 80052a2:	eb42 0303 	adc.w	r3, r2, r3
 80052a6:	657b      	str	r3, [r7, #84]	@ 0x54
 80052a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052b0:	f7fa ffa8 	bl	8000204 <__aeabi_uldivmod>
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4b61      	ldr	r3, [pc, #388]	@ (8005440 <UART_SetConfig+0x2d4>)
 80052ba:	fba3 2302 	umull	r2, r3, r3, r2
 80052be:	095b      	lsrs	r3, r3, #5
 80052c0:	011c      	lsls	r4, r3, #4
 80052c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052c6:	2200      	movs	r2, #0
 80052c8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052cc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052d4:	4642      	mov	r2, r8
 80052d6:	464b      	mov	r3, r9
 80052d8:	1891      	adds	r1, r2, r2
 80052da:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052dc:	415b      	adcs	r3, r3
 80052de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052e4:	4641      	mov	r1, r8
 80052e6:	eb12 0a01 	adds.w	sl, r2, r1
 80052ea:	4649      	mov	r1, r9
 80052ec:	eb43 0b01 	adc.w	fp, r3, r1
 80052f0:	f04f 0200 	mov.w	r2, #0
 80052f4:	f04f 0300 	mov.w	r3, #0
 80052f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005300:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005304:	4692      	mov	sl, r2
 8005306:	469b      	mov	fp, r3
 8005308:	4643      	mov	r3, r8
 800530a:	eb1a 0303 	adds.w	r3, sl, r3
 800530e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005312:	464b      	mov	r3, r9
 8005314:	eb4b 0303 	adc.w	r3, fp, r3
 8005318:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800531c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005328:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800532c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005330:	460b      	mov	r3, r1
 8005332:	18db      	adds	r3, r3, r3
 8005334:	643b      	str	r3, [r7, #64]	@ 0x40
 8005336:	4613      	mov	r3, r2
 8005338:	eb42 0303 	adc.w	r3, r2, r3
 800533c:	647b      	str	r3, [r7, #68]	@ 0x44
 800533e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005342:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005346:	f7fa ff5d 	bl	8000204 <__aeabi_uldivmod>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4611      	mov	r1, r2
 8005350:	4b3b      	ldr	r3, [pc, #236]	@ (8005440 <UART_SetConfig+0x2d4>)
 8005352:	fba3 2301 	umull	r2, r3, r3, r1
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	2264      	movs	r2, #100	@ 0x64
 800535a:	fb02 f303 	mul.w	r3, r2, r3
 800535e:	1acb      	subs	r3, r1, r3
 8005360:	00db      	lsls	r3, r3, #3
 8005362:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005366:	4b36      	ldr	r3, [pc, #216]	@ (8005440 <UART_SetConfig+0x2d4>)
 8005368:	fba3 2302 	umull	r2, r3, r3, r2
 800536c:	095b      	lsrs	r3, r3, #5
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005374:	441c      	add	r4, r3
 8005376:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800537a:	2200      	movs	r2, #0
 800537c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005380:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005384:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005388:	4642      	mov	r2, r8
 800538a:	464b      	mov	r3, r9
 800538c:	1891      	adds	r1, r2, r2
 800538e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005390:	415b      	adcs	r3, r3
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005394:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005398:	4641      	mov	r1, r8
 800539a:	1851      	adds	r1, r2, r1
 800539c:	6339      	str	r1, [r7, #48]	@ 0x30
 800539e:	4649      	mov	r1, r9
 80053a0:	414b      	adcs	r3, r1
 80053a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80053a4:	f04f 0200 	mov.w	r2, #0
 80053a8:	f04f 0300 	mov.w	r3, #0
 80053ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053b0:	4659      	mov	r1, fp
 80053b2:	00cb      	lsls	r3, r1, #3
 80053b4:	4651      	mov	r1, sl
 80053b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ba:	4651      	mov	r1, sl
 80053bc:	00ca      	lsls	r2, r1, #3
 80053be:	4610      	mov	r0, r2
 80053c0:	4619      	mov	r1, r3
 80053c2:	4603      	mov	r3, r0
 80053c4:	4642      	mov	r2, r8
 80053c6:	189b      	adds	r3, r3, r2
 80053c8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053cc:	464b      	mov	r3, r9
 80053ce:	460a      	mov	r2, r1
 80053d0:	eb42 0303 	adc.w	r3, r2, r3
 80053d4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053e4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053ec:	460b      	mov	r3, r1
 80053ee:	18db      	adds	r3, r3, r3
 80053f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f2:	4613      	mov	r3, r2
 80053f4:	eb42 0303 	adc.w	r3, r2, r3
 80053f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005402:	f7fa feff 	bl	8000204 <__aeabi_uldivmod>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4b0d      	ldr	r3, [pc, #52]	@ (8005440 <UART_SetConfig+0x2d4>)
 800540c:	fba3 1302 	umull	r1, r3, r3, r2
 8005410:	095b      	lsrs	r3, r3, #5
 8005412:	2164      	movs	r1, #100	@ 0x64
 8005414:	fb01 f303 	mul.w	r3, r1, r3
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	00db      	lsls	r3, r3, #3
 800541c:	3332      	adds	r3, #50	@ 0x32
 800541e:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <UART_SetConfig+0x2d4>)
 8005420:	fba2 2303 	umull	r2, r3, r2, r3
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f003 0207 	and.w	r2, r3, #7
 800542a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4422      	add	r2, r4
 8005432:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005434:	e106      	b.n	8005644 <UART_SetConfig+0x4d8>
 8005436:	bf00      	nop
 8005438:	40011000 	.word	0x40011000
 800543c:	40011400 	.word	0x40011400
 8005440:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005444:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005448:	2200      	movs	r2, #0
 800544a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800544e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005452:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005456:	4642      	mov	r2, r8
 8005458:	464b      	mov	r3, r9
 800545a:	1891      	adds	r1, r2, r2
 800545c:	6239      	str	r1, [r7, #32]
 800545e:	415b      	adcs	r3, r3
 8005460:	627b      	str	r3, [r7, #36]	@ 0x24
 8005462:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005466:	4641      	mov	r1, r8
 8005468:	1854      	adds	r4, r2, r1
 800546a:	4649      	mov	r1, r9
 800546c:	eb43 0501 	adc.w	r5, r3, r1
 8005470:	f04f 0200 	mov.w	r2, #0
 8005474:	f04f 0300 	mov.w	r3, #0
 8005478:	00eb      	lsls	r3, r5, #3
 800547a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547e:	00e2      	lsls	r2, r4, #3
 8005480:	4614      	mov	r4, r2
 8005482:	461d      	mov	r5, r3
 8005484:	4643      	mov	r3, r8
 8005486:	18e3      	adds	r3, r4, r3
 8005488:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800548c:	464b      	mov	r3, r9
 800548e:	eb45 0303 	adc.w	r3, r5, r3
 8005492:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005496:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	2200      	movs	r2, #0
 800549e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054a6:	f04f 0200 	mov.w	r2, #0
 80054aa:	f04f 0300 	mov.w	r3, #0
 80054ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054b2:	4629      	mov	r1, r5
 80054b4:	008b      	lsls	r3, r1, #2
 80054b6:	4621      	mov	r1, r4
 80054b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054bc:	4621      	mov	r1, r4
 80054be:	008a      	lsls	r2, r1, #2
 80054c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054c4:	f7fa fe9e 	bl	8000204 <__aeabi_uldivmod>
 80054c8:	4602      	mov	r2, r0
 80054ca:	460b      	mov	r3, r1
 80054cc:	4b60      	ldr	r3, [pc, #384]	@ (8005650 <UART_SetConfig+0x4e4>)
 80054ce:	fba3 2302 	umull	r2, r3, r3, r2
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	011c      	lsls	r4, r3, #4
 80054d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054da:	2200      	movs	r2, #0
 80054dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054e8:	4642      	mov	r2, r8
 80054ea:	464b      	mov	r3, r9
 80054ec:	1891      	adds	r1, r2, r2
 80054ee:	61b9      	str	r1, [r7, #24]
 80054f0:	415b      	adcs	r3, r3
 80054f2:	61fb      	str	r3, [r7, #28]
 80054f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f8:	4641      	mov	r1, r8
 80054fa:	1851      	adds	r1, r2, r1
 80054fc:	6139      	str	r1, [r7, #16]
 80054fe:	4649      	mov	r1, r9
 8005500:	414b      	adcs	r3, r1
 8005502:	617b      	str	r3, [r7, #20]
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005510:	4659      	mov	r1, fp
 8005512:	00cb      	lsls	r3, r1, #3
 8005514:	4651      	mov	r1, sl
 8005516:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800551a:	4651      	mov	r1, sl
 800551c:	00ca      	lsls	r2, r1, #3
 800551e:	4610      	mov	r0, r2
 8005520:	4619      	mov	r1, r3
 8005522:	4603      	mov	r3, r0
 8005524:	4642      	mov	r2, r8
 8005526:	189b      	adds	r3, r3, r2
 8005528:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800552c:	464b      	mov	r3, r9
 800552e:	460a      	mov	r2, r1
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	2200      	movs	r2, #0
 8005540:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005542:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005550:	4649      	mov	r1, r9
 8005552:	008b      	lsls	r3, r1, #2
 8005554:	4641      	mov	r1, r8
 8005556:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800555a:	4641      	mov	r1, r8
 800555c:	008a      	lsls	r2, r1, #2
 800555e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005562:	f7fa fe4f 	bl	8000204 <__aeabi_uldivmod>
 8005566:	4602      	mov	r2, r0
 8005568:	460b      	mov	r3, r1
 800556a:	4611      	mov	r1, r2
 800556c:	4b38      	ldr	r3, [pc, #224]	@ (8005650 <UART_SetConfig+0x4e4>)
 800556e:	fba3 2301 	umull	r2, r3, r3, r1
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	2264      	movs	r2, #100	@ 0x64
 8005576:	fb02 f303 	mul.w	r3, r2, r3
 800557a:	1acb      	subs	r3, r1, r3
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	3332      	adds	r3, #50	@ 0x32
 8005580:	4a33      	ldr	r2, [pc, #204]	@ (8005650 <UART_SetConfig+0x4e4>)
 8005582:	fba2 2303 	umull	r2, r3, r2, r3
 8005586:	095b      	lsrs	r3, r3, #5
 8005588:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800558c:	441c      	add	r4, r3
 800558e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005592:	2200      	movs	r2, #0
 8005594:	673b      	str	r3, [r7, #112]	@ 0x70
 8005596:	677a      	str	r2, [r7, #116]	@ 0x74
 8005598:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800559c:	4642      	mov	r2, r8
 800559e:	464b      	mov	r3, r9
 80055a0:	1891      	adds	r1, r2, r2
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	415b      	adcs	r3, r3
 80055a6:	60fb      	str	r3, [r7, #12]
 80055a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055ac:	4641      	mov	r1, r8
 80055ae:	1851      	adds	r1, r2, r1
 80055b0:	6039      	str	r1, [r7, #0]
 80055b2:	4649      	mov	r1, r9
 80055b4:	414b      	adcs	r3, r1
 80055b6:	607b      	str	r3, [r7, #4]
 80055b8:	f04f 0200 	mov.w	r2, #0
 80055bc:	f04f 0300 	mov.w	r3, #0
 80055c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055c4:	4659      	mov	r1, fp
 80055c6:	00cb      	lsls	r3, r1, #3
 80055c8:	4651      	mov	r1, sl
 80055ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ce:	4651      	mov	r1, sl
 80055d0:	00ca      	lsls	r2, r1, #3
 80055d2:	4610      	mov	r0, r2
 80055d4:	4619      	mov	r1, r3
 80055d6:	4603      	mov	r3, r0
 80055d8:	4642      	mov	r2, r8
 80055da:	189b      	adds	r3, r3, r2
 80055dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055de:	464b      	mov	r3, r9
 80055e0:	460a      	mov	r2, r1
 80055e2:	eb42 0303 	adc.w	r3, r2, r3
 80055e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80055f4:	f04f 0200 	mov.w	r2, #0
 80055f8:	f04f 0300 	mov.w	r3, #0
 80055fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005600:	4649      	mov	r1, r9
 8005602:	008b      	lsls	r3, r1, #2
 8005604:	4641      	mov	r1, r8
 8005606:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800560a:	4641      	mov	r1, r8
 800560c:	008a      	lsls	r2, r1, #2
 800560e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005612:	f7fa fdf7 	bl	8000204 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4b0d      	ldr	r3, [pc, #52]	@ (8005650 <UART_SetConfig+0x4e4>)
 800561c:	fba3 1302 	umull	r1, r3, r3, r2
 8005620:	095b      	lsrs	r3, r3, #5
 8005622:	2164      	movs	r1, #100	@ 0x64
 8005624:	fb01 f303 	mul.w	r3, r1, r3
 8005628:	1ad3      	subs	r3, r2, r3
 800562a:	011b      	lsls	r3, r3, #4
 800562c:	3332      	adds	r3, #50	@ 0x32
 800562e:	4a08      	ldr	r2, [pc, #32]	@ (8005650 <UART_SetConfig+0x4e4>)
 8005630:	fba2 2303 	umull	r2, r3, r2, r3
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	f003 020f 	and.w	r2, r3, #15
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4422      	add	r2, r4
 8005642:	609a      	str	r2, [r3, #8]
}
 8005644:	bf00      	nop
 8005646:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800564a:	46bd      	mov	sp, r7
 800564c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005650:	51eb851f 	.word	0x51eb851f

08005654 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005654:	b084      	sub	sp, #16
 8005656:	b580      	push	{r7, lr}
 8005658:	b084      	sub	sp, #16
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
 800565e:	f107 001c 	add.w	r0, r7, #28
 8005662:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005666:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800566a:	2b01      	cmp	r3, #1
 800566c:	d123      	bne.n	80056b6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005672:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005682:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005696:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800569a:	2b01      	cmp	r3, #1
 800569c:	d105      	bne.n	80056aa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f001 fae2 	bl	8006c74 <USB_CoreReset>
 80056b0:	4603      	mov	r3, r0
 80056b2:	73fb      	strb	r3, [r7, #15]
 80056b4:	e01b      	b.n	80056ee <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f001 fad6 	bl	8006c74 <USB_CoreReset>
 80056c8:	4603      	mov	r3, r0
 80056ca:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056cc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	639a      	str	r2, [r3, #56]	@ 0x38
 80056e0:	e005      	b.n	80056ee <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056e6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056ee:	7fbb      	ldrb	r3, [r7, #30]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d10b      	bne.n	800570c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f043 0206 	orr.w	r2, r3, #6
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	f043 0220 	orr.w	r2, r3, #32
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005718:	b004      	add	sp, #16
 800571a:	4770      	bx	lr

0800571c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	4613      	mov	r3, r2
 8005728:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b02      	cmp	r3, #2
 800572e:	d165      	bne.n	80057fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4a41      	ldr	r2, [pc, #260]	@ (8005838 <USB_SetTurnaroundTime+0x11c>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d906      	bls.n	8005746 <USB_SetTurnaroundTime+0x2a>
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	4a40      	ldr	r2, [pc, #256]	@ (800583c <USB_SetTurnaroundTime+0x120>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d202      	bcs.n	8005746 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005740:	230f      	movs	r3, #15
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	e062      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	4a3c      	ldr	r2, [pc, #240]	@ (800583c <USB_SetTurnaroundTime+0x120>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d306      	bcc.n	800575c <USB_SetTurnaroundTime+0x40>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	4a3b      	ldr	r2, [pc, #236]	@ (8005840 <USB_SetTurnaroundTime+0x124>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d202      	bcs.n	800575c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005756:	230e      	movs	r3, #14
 8005758:	617b      	str	r3, [r7, #20]
 800575a:	e057      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	4a38      	ldr	r2, [pc, #224]	@ (8005840 <USB_SetTurnaroundTime+0x124>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d306      	bcc.n	8005772 <USB_SetTurnaroundTime+0x56>
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4a37      	ldr	r2, [pc, #220]	@ (8005844 <USB_SetTurnaroundTime+0x128>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d202      	bcs.n	8005772 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800576c:	230d      	movs	r3, #13
 800576e:	617b      	str	r3, [r7, #20]
 8005770:	e04c      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4a33      	ldr	r2, [pc, #204]	@ (8005844 <USB_SetTurnaroundTime+0x128>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d306      	bcc.n	8005788 <USB_SetTurnaroundTime+0x6c>
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	4a32      	ldr	r2, [pc, #200]	@ (8005848 <USB_SetTurnaroundTime+0x12c>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d802      	bhi.n	8005788 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005782:	230c      	movs	r3, #12
 8005784:	617b      	str	r3, [r7, #20]
 8005786:	e041      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	4a2f      	ldr	r2, [pc, #188]	@ (8005848 <USB_SetTurnaroundTime+0x12c>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d906      	bls.n	800579e <USB_SetTurnaroundTime+0x82>
 8005790:	68bb      	ldr	r3, [r7, #8]
 8005792:	4a2e      	ldr	r2, [pc, #184]	@ (800584c <USB_SetTurnaroundTime+0x130>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d802      	bhi.n	800579e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005798:	230b      	movs	r3, #11
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	e036      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	4a2a      	ldr	r2, [pc, #168]	@ (800584c <USB_SetTurnaroundTime+0x130>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d906      	bls.n	80057b4 <USB_SetTurnaroundTime+0x98>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	4a29      	ldr	r2, [pc, #164]	@ (8005850 <USB_SetTurnaroundTime+0x134>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d802      	bhi.n	80057b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057ae:	230a      	movs	r3, #10
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e02b      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4a26      	ldr	r2, [pc, #152]	@ (8005850 <USB_SetTurnaroundTime+0x134>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d906      	bls.n	80057ca <USB_SetTurnaroundTime+0xae>
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	4a25      	ldr	r2, [pc, #148]	@ (8005854 <USB_SetTurnaroundTime+0x138>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d202      	bcs.n	80057ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057c4:	2309      	movs	r3, #9
 80057c6:	617b      	str	r3, [r7, #20]
 80057c8:	e020      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	4a21      	ldr	r2, [pc, #132]	@ (8005854 <USB_SetTurnaroundTime+0x138>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d306      	bcc.n	80057e0 <USB_SetTurnaroundTime+0xc4>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	4a20      	ldr	r2, [pc, #128]	@ (8005858 <USB_SetTurnaroundTime+0x13c>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d802      	bhi.n	80057e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057da:	2308      	movs	r3, #8
 80057dc:	617b      	str	r3, [r7, #20]
 80057de:	e015      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057e0:	68bb      	ldr	r3, [r7, #8]
 80057e2:	4a1d      	ldr	r2, [pc, #116]	@ (8005858 <USB_SetTurnaroundTime+0x13c>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d906      	bls.n	80057f6 <USB_SetTurnaroundTime+0xda>
 80057e8:	68bb      	ldr	r3, [r7, #8]
 80057ea:	4a1c      	ldr	r2, [pc, #112]	@ (800585c <USB_SetTurnaroundTime+0x140>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d202      	bcs.n	80057f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057f0:	2307      	movs	r3, #7
 80057f2:	617b      	str	r3, [r7, #20]
 80057f4:	e00a      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057f6:	2306      	movs	r3, #6
 80057f8:	617b      	str	r3, [r7, #20]
 80057fa:	e007      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d102      	bne.n	8005808 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005802:	2309      	movs	r3, #9
 8005804:	617b      	str	r3, [r7, #20]
 8005806:	e001      	b.n	800580c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005808:	2309      	movs	r3, #9
 800580a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	68da      	ldr	r2, [r3, #12]
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	029b      	lsls	r3, r3, #10
 8005820:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	371c      	adds	r7, #28
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr
 8005838:	00d8acbf 	.word	0x00d8acbf
 800583c:	00e4e1c0 	.word	0x00e4e1c0
 8005840:	00f42400 	.word	0x00f42400
 8005844:	01067380 	.word	0x01067380
 8005848:	011a499f 	.word	0x011a499f
 800584c:	01312cff 	.word	0x01312cff
 8005850:	014ca43f 	.word	0x014ca43f
 8005854:	016e3600 	.word	0x016e3600
 8005858:	01a6ab1f 	.word	0x01a6ab1f
 800585c:	01e84800 	.word	0x01e84800

08005860 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005860:	b480      	push	{r7}
 8005862:	b083      	sub	sp, #12
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f043 0201 	orr.w	r2, r3, #1
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b083      	sub	sp, #12
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	689b      	ldr	r3, [r3, #8]
 800588e:	f023 0201 	bic.w	r2, r3, #1
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	460b      	mov	r3, r1
 80058ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c0:	78fb      	ldrb	r3, [r7, #3]
 80058c2:	2b01      	cmp	r3, #1
 80058c4:	d115      	bne.n	80058f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80058d2:	200a      	movs	r0, #10
 80058d4:	f7fb fd32 	bl	800133c <HAL_Delay>
      ms += 10U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	330a      	adds	r3, #10
 80058dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f001 f939 	bl	8006b56 <USB_GetMode>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d01e      	beq.n	8005928 <USB_SetCurrentMode+0x84>
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2bc7      	cmp	r3, #199	@ 0xc7
 80058ee:	d9f0      	bls.n	80058d2 <USB_SetCurrentMode+0x2e>
 80058f0:	e01a      	b.n	8005928 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f2:	78fb      	ldrb	r3, [r7, #3]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d115      	bne.n	8005924 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8005904:	200a      	movs	r0, #10
 8005906:	f7fb fd19 	bl	800133c <HAL_Delay>
      ms += 10U;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	330a      	adds	r3, #10
 800590e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f001 f920 	bl	8006b56 <USB_GetMode>
 8005916:	4603      	mov	r3, r0
 8005918:	2b00      	cmp	r3, #0
 800591a:	d005      	beq.n	8005928 <USB_SetCurrentMode+0x84>
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2bc7      	cmp	r3, #199	@ 0xc7
 8005920:	d9f0      	bls.n	8005904 <USB_SetCurrentMode+0x60>
 8005922:	e001      	b.n	8005928 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e005      	b.n	8005934 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2bc8      	cmp	r3, #200	@ 0xc8
 800592c:	d101      	bne.n	8005932 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	e000      	b.n	8005934 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	3710      	adds	r7, #16
 8005938:	46bd      	mov	sp, r7
 800593a:	bd80      	pop	{r7, pc}

0800593c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800593c:	b084      	sub	sp, #16
 800593e:	b580      	push	{r7, lr}
 8005940:	b086      	sub	sp, #24
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800594a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800594e:	2300      	movs	r3, #0
 8005950:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005956:	2300      	movs	r3, #0
 8005958:	613b      	str	r3, [r7, #16]
 800595a:	e009      	b.n	8005970 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	3340      	adds	r3, #64	@ 0x40
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	4413      	add	r3, r2
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	3301      	adds	r3, #1
 800596e:	613b      	str	r3, [r7, #16]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	2b0e      	cmp	r3, #14
 8005974:	d9f2      	bls.n	800595c <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005976:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800597a:	2b00      	cmp	r3, #0
 800597c:	d11c      	bne.n	80059b8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598c:	f043 0302 	orr.w	r3, r3, #2
 8005990:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005996:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	e005      	b.n	80059c4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059bc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80059ca:	461a      	mov	r2, r3
 80059cc:	2300      	movs	r3, #0
 80059ce:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059d0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10d      	bne.n	80059f4 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d104      	bne.n	80059ea <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059e0:	2100      	movs	r1, #0
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f968 	bl	8005cb8 <USB_SetDevSpeed>
 80059e8:	e008      	b.n	80059fc <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80059ea:	2101      	movs	r1, #1
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f963 	bl	8005cb8 <USB_SetDevSpeed>
 80059f2:	e003      	b.n	80059fc <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80059f4:	2103      	movs	r1, #3
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 f95e 	bl	8005cb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80059fc:	2110      	movs	r1, #16
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f8fa 	bl	8005bf8 <USB_FlushTxFifo>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f924 	bl	8005c5c <USB_FlushRxFifo>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a24:	461a      	mov	r2, r3
 8005a26:	2300      	movs	r3, #0
 8005a28:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	461a      	mov	r2, r3
 8005a32:	2300      	movs	r3, #0
 8005a34:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	2300      	movs	r3, #0
 8005a40:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a42:	2300      	movs	r3, #0
 8005a44:	613b      	str	r3, [r7, #16]
 8005a46:	e043      	b.n	8005ad0 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a48:	693b      	ldr	r3, [r7, #16]
 8005a4a:	015a      	lsls	r2, r3, #5
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	4413      	add	r3, r2
 8005a50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a5e:	d118      	bne.n	8005a92 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a72:	461a      	mov	r2, r3
 8005a74:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	e013      	b.n	8005aa4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	015a      	lsls	r2, r3, #5
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	4413      	add	r3, r2
 8005a84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a88:	461a      	mov	r2, r3
 8005a8a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005a8e:	6013      	str	r3, [r2, #0]
 8005a90:	e008      	b.n	8005aa4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a9e:	461a      	mov	r2, r3
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	015a      	lsls	r2, r3, #5
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	4413      	add	r3, r2
 8005aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab0:	461a      	mov	r2, r3
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ab6:	693b      	ldr	r3, [r7, #16]
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ac8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	3301      	adds	r3, #1
 8005ace:	613b      	str	r3, [r7, #16]
 8005ad0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005ad4:	461a      	mov	r2, r3
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d3b5      	bcc.n	8005a48 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005adc:	2300      	movs	r3, #0
 8005ade:	613b      	str	r3, [r7, #16]
 8005ae0:	e043      	b.n	8005b6a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	015a      	lsls	r2, r3, #5
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4413      	add	r3, r2
 8005aea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005af4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005af8:	d118      	bne.n	8005b2c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d10a      	bne.n	8005b16 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b0c:	461a      	mov	r2, r3
 8005b0e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005b12:	6013      	str	r3, [r2, #0]
 8005b14:	e013      	b.n	8005b3e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	015a      	lsls	r2, r3, #5
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	4413      	add	r3, r2
 8005b1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b22:	461a      	mov	r2, r3
 8005b24:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8005b28:	6013      	str	r3, [r2, #0]
 8005b2a:	e008      	b.n	8005b3e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	015a      	lsls	r2, r3, #5
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	4413      	add	r3, r2
 8005b46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	015a      	lsls	r2, r3, #5
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	4413      	add	r3, r2
 8005b58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005b62:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b64:	693b      	ldr	r3, [r7, #16]
 8005b66:	3301      	adds	r3, #1
 8005b68:	613b      	str	r3, [r7, #16]
 8005b6a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005b6e:	461a      	mov	r2, r3
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d3b5      	bcc.n	8005ae2 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b88:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005b96:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005b98:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d105      	bne.n	8005bac <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f043 0210 	orr.w	r2, r3, #16
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	699a      	ldr	r2, [r3, #24]
 8005bb0:	4b10      	ldr	r3, [pc, #64]	@ (8005bf4 <USB_DevInit+0x2b8>)
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bb8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699b      	ldr	r3, [r3, #24]
 8005bc4:	f043 0208 	orr.w	r2, r3, #8
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bcc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d107      	bne.n	8005be4 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005bdc:	f043 0304 	orr.w	r3, r3, #4
 8005be0:	687a      	ldr	r2, [r7, #4]
 8005be2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005be4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3718      	adds	r7, #24
 8005bea:	46bd      	mov	sp, r7
 8005bec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005bf0:	b004      	add	sp, #16
 8005bf2:	4770      	bx	lr
 8005bf4:	803c3800 	.word	0x803c3800

08005bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b085      	sub	sp, #20
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c02:	2300      	movs	r3, #0
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3301      	adds	r3, #1
 8005c0a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c12:	d901      	bls.n	8005c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c14:	2303      	movs	r3, #3
 8005c16:	e01b      	b.n	8005c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	691b      	ldr	r3, [r3, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	daf2      	bge.n	8005c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	019b      	lsls	r3, r3, #6
 8005c28:	f043 0220 	orr.w	r2, r3, #32
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	3301      	adds	r3, #1
 8005c34:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c3c:	d901      	bls.n	8005c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c3e:	2303      	movs	r3, #3
 8005c40:	e006      	b.n	8005c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	691b      	ldr	r3, [r3, #16]
 8005c46:	f003 0320 	and.w	r3, r3, #32
 8005c4a:	2b20      	cmp	r3, #32
 8005c4c:	d0f0      	beq.n	8005c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c4e:	2300      	movs	r3, #0
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3714      	adds	r7, #20
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr

08005c5c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b085      	sub	sp, #20
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c74:	d901      	bls.n	8005c7a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c76:	2303      	movs	r3, #3
 8005c78:	e018      	b.n	8005cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	691b      	ldr	r3, [r3, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	daf2      	bge.n	8005c68 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c82:	2300      	movs	r3, #0
 8005c84:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2210      	movs	r2, #16
 8005c8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	3301      	adds	r3, #1
 8005c90:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005c98:	d901      	bls.n	8005c9e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e006      	b.n	8005cac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	f003 0310 	and.w	r3, r3, #16
 8005ca6:	2b10      	cmp	r3, #16
 8005ca8:	d0f0      	beq.n	8005c8c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3714      	adds	r7, #20
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	460b      	mov	r3, r1
 8005cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	78fb      	ldrb	r3, [r7, #3]
 8005cd2:	68f9      	ldr	r1, [r7, #12]
 8005cd4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cdc:	2300      	movs	r3, #0
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3714      	adds	r7, #20
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr

08005cea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8005cea:	b480      	push	{r7}
 8005cec:	b087      	sub	sp, #28
 8005cee:	af00      	add	r7, sp, #0
 8005cf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	f003 0306 	and.w	r3, r3, #6
 8005d02:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d102      	bne.n	8005d10 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	75fb      	strb	r3, [r7, #23]
 8005d0e:	e00a      	b.n	8005d26 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d002      	beq.n	8005d1c <USB_GetDevSpeed+0x32>
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d102      	bne.n	8005d22 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	75fb      	strb	r3, [r7, #23]
 8005d20:	e001      	b.n	8005d26 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d22:	230f      	movs	r3, #15
 8005d24:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	371c      	adds	r7, #28
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr

08005d34 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b085      	sub	sp, #20
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	781b      	ldrb	r3, [r3, #0]
 8005d46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	785b      	ldrb	r3, [r3, #1]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d13a      	bne.n	8005dc6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d56:	69da      	ldr	r2, [r3, #28]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f003 030f 	and.w	r3, r3, #15
 8005d60:	2101      	movs	r1, #1
 8005d62:	fa01 f303 	lsl.w	r3, r1, r3
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	68f9      	ldr	r1, [r7, #12]
 8005d6a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	015a      	lsls	r2, r3, #5
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4413      	add	r3, r2
 8005d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d155      	bne.n	8005e34 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	689b      	ldr	r3, [r3, #8]
 8005d9a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005da4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	059b      	lsls	r3, r3, #22
 8005daa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dac:	4313      	orrs	r3, r2
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	0151      	lsls	r1, r2, #5
 8005db2:	68fa      	ldr	r2, [r7, #12]
 8005db4:	440a      	add	r2, r1
 8005db6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005dbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005dc2:	6013      	str	r3, [r2, #0]
 8005dc4:	e036      	b.n	8005e34 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005dcc:	69da      	ldr	r2, [r3, #28]
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	2101      	movs	r1, #1
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	041b      	lsls	r3, r3, #16
 8005dde:	68f9      	ldr	r1, [r7, #12]
 8005de0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d11a      	bne.n	8005e34 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	015a      	lsls	r2, r3, #5
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4413      	add	r3, r2
 8005e06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	791b      	ldrb	r3, [r3, #4]
 8005e18:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e1a:	430b      	orrs	r3, r1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	68ba      	ldr	r2, [r7, #8]
 8005e20:	0151      	lsls	r1, r2, #5
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	440a      	add	r2, r1
 8005e26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005e2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005e32:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3714      	adds	r7, #20
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
	...

08005e44 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b085      	sub	sp, #20
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	781b      	ldrb	r3, [r3, #0]
 8005e56:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	785b      	ldrb	r3, [r3, #1]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d161      	bne.n	8005f24 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e72:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e76:	d11f      	bne.n	8005eb8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	68ba      	ldr	r2, [r7, #8]
 8005e88:	0151      	lsls	r1, r2, #5
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	440a      	add	r2, r1
 8005e8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e92:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e96:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	015a      	lsls	r2, r3, #5
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	68ba      	ldr	r2, [r7, #8]
 8005ea8:	0151      	lsls	r1, r2, #5
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	440a      	add	r2, r1
 8005eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005eb2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005eb6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ebe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	f003 030f 	and.w	r3, r3, #15
 8005ec8:	2101      	movs	r1, #1
 8005eca:	fa01 f303 	lsl.w	r3, r1, r3
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	43db      	mvns	r3, r3
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ed8:	4013      	ands	r3, r2
 8005eda:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ee2:	69da      	ldr	r2, [r3, #28]
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	781b      	ldrb	r3, [r3, #0]
 8005ee8:	f003 030f 	and.w	r3, r3, #15
 8005eec:	2101      	movs	r1, #1
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	b29b      	uxth	r3, r3
 8005ef4:	43db      	mvns	r3, r3
 8005ef6:	68f9      	ldr	r1, [r7, #12]
 8005ef8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005efc:	4013      	ands	r3, r2
 8005efe:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	68bb      	ldr	r3, [r7, #8]
 8005f10:	0159      	lsls	r1, r3, #5
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	440b      	add	r3, r1
 8005f16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f1a:	4619      	mov	r1, r3
 8005f1c:	4b35      	ldr	r3, [pc, #212]	@ (8005ff4 <USB_DeactivateEndpoint+0x1b0>)
 8005f1e:	4013      	ands	r3, r2
 8005f20:	600b      	str	r3, [r1, #0]
 8005f22:	e060      	b.n	8005fe6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	015a      	lsls	r2, r3, #5
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f36:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f3a:	d11f      	bne.n	8005f7c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68ba      	ldr	r2, [r7, #8]
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	68fa      	ldr	r2, [r7, #12]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f5a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	015a      	lsls	r2, r3, #5
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	0151      	lsls	r1, r2, #5
 8005f6e:	68fa      	ldr	r2, [r7, #12]
 8005f70:	440a      	add	r2, r1
 8005f72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	781b      	ldrb	r3, [r3, #0]
 8005f88:	f003 030f 	and.w	r3, r3, #15
 8005f8c:	2101      	movs	r1, #1
 8005f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8005f92:	041b      	lsls	r3, r3, #16
 8005f94:	43db      	mvns	r3, r3
 8005f96:	68f9      	ldr	r1, [r7, #12]
 8005f98:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa6:	69da      	ldr	r2, [r3, #28]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	781b      	ldrb	r3, [r3, #0]
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	2101      	movs	r1, #1
 8005fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8005fb6:	041b      	lsls	r3, r3, #16
 8005fb8:	43db      	mvns	r3, r3
 8005fba:	68f9      	ldr	r1, [r7, #12]
 8005fbc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fc0:	4013      	ands	r3, r2
 8005fc2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	015a      	lsls	r2, r3, #5
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	4413      	add	r3, r2
 8005fcc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	0159      	lsls	r1, r3, #5
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	440b      	add	r3, r1
 8005fda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fde:	4619      	mov	r1, r3
 8005fe0:	4b05      	ldr	r3, [pc, #20]	@ (8005ff8 <USB_DeactivateEndpoint+0x1b4>)
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3714      	adds	r7, #20
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	ec337800 	.word	0xec337800
 8005ff8:	eff37800 	.word	0xeff37800

08005ffc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b08a      	sub	sp, #40	@ 0x28
 8006000:	af02      	add	r7, sp, #8
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	4613      	mov	r3, r2
 8006008:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	781b      	ldrb	r3, [r3, #0]
 8006012:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	785b      	ldrb	r3, [r3, #1]
 8006018:	2b01      	cmp	r3, #1
 800601a:	f040 817f 	bne.w	800631c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d132      	bne.n	800608c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	015a      	lsls	r2, r3, #5
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	4413      	add	r3, r2
 800602e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006032:	691b      	ldr	r3, [r3, #16]
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	0151      	lsls	r1, r2, #5
 8006038:	69fa      	ldr	r2, [r7, #28]
 800603a:	440a      	add	r2, r1
 800603c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006040:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006044:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006048:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	015a      	lsls	r2, r3, #5
 800604e:	69fb      	ldr	r3, [r7, #28]
 8006050:	4413      	add	r3, r2
 8006052:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006056:	691b      	ldr	r3, [r3, #16]
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	0151      	lsls	r1, r2, #5
 800605c:	69fa      	ldr	r2, [r7, #28]
 800605e:	440a      	add	r2, r1
 8006060:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006064:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006068:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800606a:	69bb      	ldr	r3, [r7, #24]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006076:	691b      	ldr	r3, [r3, #16]
 8006078:	69ba      	ldr	r2, [r7, #24]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	69fa      	ldr	r2, [r7, #28]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006084:	0cdb      	lsrs	r3, r3, #19
 8006086:	04db      	lsls	r3, r3, #19
 8006088:	6113      	str	r3, [r2, #16]
 800608a:	e097      	b.n	80061bc <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	69ba      	ldr	r2, [r7, #24]
 800609c:	0151      	lsls	r1, r2, #5
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	440a      	add	r2, r1
 80060a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060a6:	0cdb      	lsrs	r3, r3, #19
 80060a8:	04db      	lsls	r3, r3, #19
 80060aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060ac:	69bb      	ldr	r3, [r7, #24]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	69ba      	ldr	r2, [r7, #24]
 80060bc:	0151      	lsls	r1, r2, #5
 80060be:	69fa      	ldr	r2, [r7, #28]
 80060c0:	440a      	add	r2, r1
 80060c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80060c6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80060ca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80060ce:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80060d0:	69bb      	ldr	r3, [r7, #24]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d11a      	bne.n	800610c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	691a      	ldr	r2, [r3, #16]
 80060da:	68bb      	ldr	r3, [r7, #8]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	429a      	cmp	r2, r3
 80060e0:	d903      	bls.n	80060ea <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	015a      	lsls	r2, r3, #5
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	69ba      	ldr	r2, [r7, #24]
 80060fa:	0151      	lsls	r1, r2, #5
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	440a      	add	r2, r1
 8006100:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006104:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006108:	6113      	str	r3, [r2, #16]
 800610a:	e044      	b.n	8006196 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	691a      	ldr	r2, [r3, #16]
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	689b      	ldr	r3, [r3, #8]
 8006114:	4413      	add	r3, r2
 8006116:	1e5a      	subs	r2, r3, #1
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006120:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	015a      	lsls	r2, r3, #5
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	4413      	add	r3, r2
 800612a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800612e:	691a      	ldr	r2, [r3, #16]
 8006130:	8afb      	ldrh	r3, [r7, #22]
 8006132:	04d9      	lsls	r1, r3, #19
 8006134:	4ba4      	ldr	r3, [pc, #656]	@ (80063c8 <USB_EPStartXfer+0x3cc>)
 8006136:	400b      	ands	r3, r1
 8006138:	69b9      	ldr	r1, [r7, #24]
 800613a:	0148      	lsls	r0, r1, #5
 800613c:	69f9      	ldr	r1, [r7, #28]
 800613e:	4401      	add	r1, r0
 8006140:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006144:	4313      	orrs	r3, r2
 8006146:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	791b      	ldrb	r3, [r3, #4]
 800614c:	2b01      	cmp	r3, #1
 800614e:	d122      	bne.n	8006196 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	69fb      	ldr	r3, [r7, #28]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800615c:	691b      	ldr	r3, [r3, #16]
 800615e:	69ba      	ldr	r2, [r7, #24]
 8006160:	0151      	lsls	r1, r2, #5
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	440a      	add	r2, r1
 8006166:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800616a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800616e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	015a      	lsls	r2, r3, #5
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	4413      	add	r3, r2
 8006178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800617c:	691a      	ldr	r2, [r3, #16]
 800617e:	8afb      	ldrh	r3, [r7, #22]
 8006180:	075b      	lsls	r3, r3, #29
 8006182:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8006186:	69b9      	ldr	r1, [r7, #24]
 8006188:	0148      	lsls	r0, r1, #5
 800618a:	69f9      	ldr	r1, [r7, #28]
 800618c:	4401      	add	r1, r0
 800618e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006192:	4313      	orrs	r3, r2
 8006194:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006196:	69bb      	ldr	r3, [r7, #24]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061a2:	691a      	ldr	r2, [r3, #16]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691b      	ldr	r3, [r3, #16]
 80061a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061ac:	69b9      	ldr	r1, [r7, #24]
 80061ae:	0148      	lsls	r0, r1, #5
 80061b0:	69f9      	ldr	r1, [r7, #28]
 80061b2:	4401      	add	r1, r0
 80061b4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80061b8:	4313      	orrs	r3, r2
 80061ba:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80061bc:	79fb      	ldrb	r3, [r7, #7]
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d14b      	bne.n	800625a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	69db      	ldr	r3, [r3, #28]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d009      	beq.n	80061de <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80061ca:	69bb      	ldr	r3, [r7, #24]
 80061cc:	015a      	lsls	r2, r3, #5
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	4413      	add	r3, r2
 80061d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061d6:	461a      	mov	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	69db      	ldr	r3, [r3, #28]
 80061dc:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	791b      	ldrb	r3, [r3, #4]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d128      	bne.n	8006238 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061ec:	689b      	ldr	r3, [r3, #8]
 80061ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d110      	bne.n	8006218 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061f6:	69bb      	ldr	r3, [r7, #24]
 80061f8:	015a      	lsls	r2, r3, #5
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	4413      	add	r3, r2
 80061fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	0151      	lsls	r1, r2, #5
 8006208:	69fa      	ldr	r2, [r7, #28]
 800620a:	440a      	add	r2, r1
 800620c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006210:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006214:	6013      	str	r3, [r2, #0]
 8006216:	e00f      	b.n	8006238 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	015a      	lsls	r2, r3, #5
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	4413      	add	r3, r2
 8006220:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	0151      	lsls	r1, r2, #5
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	440a      	add	r2, r1
 800622e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006232:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006236:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	015a      	lsls	r2, r3, #5
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	4413      	add	r3, r2
 8006240:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	69ba      	ldr	r2, [r7, #24]
 8006248:	0151      	lsls	r1, r2, #5
 800624a:	69fa      	ldr	r2, [r7, #28]
 800624c:	440a      	add	r2, r1
 800624e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006252:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006256:	6013      	str	r3, [r2, #0]
 8006258:	e166      	b.n	8006528 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800625a:	69bb      	ldr	r3, [r7, #24]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	69fa      	ldr	r2, [r7, #28]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006274:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006278:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	791b      	ldrb	r3, [r3, #4]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d015      	beq.n	80062ae <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 814e 	beq.w	8006528 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006292:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006294:	68bb      	ldr	r3, [r7, #8]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 030f 	and.w	r3, r3, #15
 800629c:	2101      	movs	r1, #1
 800629e:	fa01 f303 	lsl.w	r3, r1, r3
 80062a2:	69f9      	ldr	r1, [r7, #28]
 80062a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80062a8:	4313      	orrs	r3, r2
 80062aa:	634b      	str	r3, [r1, #52]	@ 0x34
 80062ac:	e13c      	b.n	8006528 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d110      	bne.n	80062e0 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062be:	69bb      	ldr	r3, [r7, #24]
 80062c0:	015a      	lsls	r2, r3, #5
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	0151      	lsls	r1, r2, #5
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	440a      	add	r2, r1
 80062d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80062dc:	6013      	str	r3, [r2, #0]
 80062de:	e00f      	b.n	8006300 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062e0:	69bb      	ldr	r3, [r7, #24]
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	69ba      	ldr	r2, [r7, #24]
 80062f0:	0151      	lsls	r1, r2, #5
 80062f2:	69fa      	ldr	r2, [r7, #28]
 80062f4:	440a      	add	r2, r1
 80062f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80062fe:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	68d9      	ldr	r1, [r3, #12]
 8006304:	68bb      	ldr	r3, [r7, #8]
 8006306:	781a      	ldrb	r2, [r3, #0]
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	b298      	uxth	r0, r3
 800630e:	79fb      	ldrb	r3, [r7, #7]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	4603      	mov	r3, r0
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f9b9 	bl	800668c <USB_WritePacket>
 800631a:	e105      	b.n	8006528 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800631c:	69bb      	ldr	r3, [r7, #24]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	69fb      	ldr	r3, [r7, #28]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	69ba      	ldr	r2, [r7, #24]
 800632c:	0151      	lsls	r1, r2, #5
 800632e:	69fa      	ldr	r2, [r7, #28]
 8006330:	440a      	add	r2, r1
 8006332:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006336:	0cdb      	lsrs	r3, r3, #19
 8006338:	04db      	lsls	r3, r3, #19
 800633a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006356:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800635a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800635e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d132      	bne.n	80063cc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	691b      	ldr	r3, [r3, #16]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	689a      	ldr	r2, [r3, #8]
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	689a      	ldr	r2, [r3, #8]
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	4413      	add	r3, r2
 8006386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	6a1b      	ldr	r3, [r3, #32]
 8006390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006394:	69b9      	ldr	r1, [r7, #24]
 8006396:	0148      	lsls	r0, r1, #5
 8006398:	69f9      	ldr	r1, [r7, #28]
 800639a:	4401      	add	r1, r0
 800639c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063a0:	4313      	orrs	r3, r2
 80063a2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063a4:	69bb      	ldr	r3, [r7, #24]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	69fb      	ldr	r3, [r7, #28]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	69ba      	ldr	r2, [r7, #24]
 80063b4:	0151      	lsls	r1, r2, #5
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	440a      	add	r2, r1
 80063ba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80063be:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80063c2:	6113      	str	r3, [r2, #16]
 80063c4:	e062      	b.n	800648c <USB_EPStartXfer+0x490>
 80063c6:	bf00      	nop
 80063c8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d123      	bne.n	800641c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80063d4:	69bb      	ldr	r3, [r7, #24]
 80063d6:	015a      	lsls	r2, r3, #5
 80063d8:	69fb      	ldr	r3, [r7, #28]
 80063da:	4413      	add	r3, r2
 80063dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e0:	691a      	ldr	r2, [r3, #16]
 80063e2:	68bb      	ldr	r3, [r7, #8]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063ea:	69b9      	ldr	r1, [r7, #24]
 80063ec:	0148      	lsls	r0, r1, #5
 80063ee:	69f9      	ldr	r1, [r7, #28]
 80063f0:	4401      	add	r1, r0
 80063f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80063f6:	4313      	orrs	r3, r2
 80063f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80063fa:	69bb      	ldr	r3, [r7, #24]
 80063fc:	015a      	lsls	r2, r3, #5
 80063fe:	69fb      	ldr	r3, [r7, #28]
 8006400:	4413      	add	r3, r2
 8006402:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	69ba      	ldr	r2, [r7, #24]
 800640a:	0151      	lsls	r1, r2, #5
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	440a      	add	r2, r1
 8006410:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006414:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006418:	6113      	str	r3, [r2, #16]
 800641a:	e037      	b.n	800648c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4413      	add	r3, r2
 8006426:	1e5a      	subs	r2, r3, #1
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006430:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	8afa      	ldrh	r2, [r7, #22]
 8006438:	fb03 f202 	mul.w	r2, r3, r2
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	4413      	add	r3, r2
 8006448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800644c:	691a      	ldr	r2, [r3, #16]
 800644e:	8afb      	ldrh	r3, [r7, #22]
 8006450:	04d9      	lsls	r1, r3, #19
 8006452:	4b38      	ldr	r3, [pc, #224]	@ (8006534 <USB_EPStartXfer+0x538>)
 8006454:	400b      	ands	r3, r1
 8006456:	69b9      	ldr	r1, [r7, #24]
 8006458:	0148      	lsls	r0, r1, #5
 800645a:	69f9      	ldr	r1, [r7, #28]
 800645c:	4401      	add	r1, r0
 800645e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006462:	4313      	orrs	r3, r2
 8006464:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	015a      	lsls	r2, r3, #5
 800646a:	69fb      	ldr	r3, [r7, #28]
 800646c:	4413      	add	r3, r2
 800646e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006472:	691a      	ldr	r2, [r3, #16]
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800647c:	69b9      	ldr	r1, [r7, #24]
 800647e:	0148      	lsls	r0, r1, #5
 8006480:	69f9      	ldr	r1, [r7, #28]
 8006482:	4401      	add	r1, r0
 8006484:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006488:	4313      	orrs	r3, r2
 800648a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800648c:	79fb      	ldrb	r3, [r7, #7]
 800648e:	2b01      	cmp	r3, #1
 8006490:	d10d      	bne.n	80064ae <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	68db      	ldr	r3, [r3, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d009      	beq.n	80064ae <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	69bb      	ldr	r3, [r7, #24]
 80064a0:	015a      	lsls	r2, r3, #5
 80064a2:	69fb      	ldr	r3, [r7, #28]
 80064a4:	4413      	add	r3, r2
 80064a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064aa:	460a      	mov	r2, r1
 80064ac:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	791b      	ldrb	r3, [r3, #4]
 80064b2:	2b01      	cmp	r3, #1
 80064b4:	d128      	bne.n	8006508 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80064b6:	69fb      	ldr	r3, [r7, #28]
 80064b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d110      	bne.n	80064e8 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	015a      	lsls	r2, r3, #5
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	4413      	add	r3, r2
 80064ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	0151      	lsls	r1, r2, #5
 80064d8:	69fa      	ldr	r2, [r7, #28]
 80064da:	440a      	add	r2, r1
 80064dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80064e0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80064e4:	6013      	str	r3, [r2, #0]
 80064e6:	e00f      	b.n	8006508 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80064e8:	69bb      	ldr	r3, [r7, #24]
 80064ea:	015a      	lsls	r2, r3, #5
 80064ec:	69fb      	ldr	r3, [r7, #28]
 80064ee:	4413      	add	r3, r2
 80064f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	0151      	lsls	r1, r2, #5
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	440a      	add	r2, r1
 80064fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006502:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006506:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	015a      	lsls	r2, r3, #5
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	4413      	add	r3, r2
 8006510:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	0151      	lsls	r1, r2, #5
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	440a      	add	r2, r1
 800651e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006522:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006526:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006528:	2300      	movs	r3, #0
}
 800652a:	4618      	mov	r0, r3
 800652c:	3720      	adds	r7, #32
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}
 8006532:	bf00      	nop
 8006534:	1ff80000 	.word	0x1ff80000

08006538 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
 8006540:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	785b      	ldrb	r3, [r3, #1]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d14a      	bne.n	80065ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800656a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800656e:	f040 8086 	bne.w	800667e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	7812      	ldrb	r2, [r2, #0]
 8006586:	0151      	lsls	r1, r2, #5
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	440a      	add	r2, r1
 800658c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006590:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006594:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	683a      	ldr	r2, [r7, #0]
 80065a8:	7812      	ldrb	r2, [r2, #0]
 80065aa:	0151      	lsls	r1, r2, #5
 80065ac:	693a      	ldr	r2, [r7, #16]
 80065ae:	440a      	add	r2, r1
 80065b0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065b4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80065b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	3301      	adds	r3, #1
 80065be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80065c6:	4293      	cmp	r3, r2
 80065c8:	d902      	bls.n	80065d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	75fb      	strb	r3, [r7, #23]
          break;
 80065ce:	e056      	b.n	800667e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	015a      	lsls	r2, r3, #5
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	4413      	add	r3, r2
 80065da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065e8:	d0e7      	beq.n	80065ba <USB_EPStopXfer+0x82>
 80065ea:	e048      	b.n	800667e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065ec:	683b      	ldr	r3, [r7, #0]
 80065ee:	781b      	ldrb	r3, [r3, #0]
 80065f0:	015a      	lsls	r2, r3, #5
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	4413      	add	r3, r2
 80065f6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006604:	d13b      	bne.n	800667e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	781b      	ldrb	r3, [r3, #0]
 800660a:	015a      	lsls	r2, r3, #5
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	4413      	add	r3, r2
 8006610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	7812      	ldrb	r2, [r2, #0]
 800661a:	0151      	lsls	r1, r2, #5
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	440a      	add	r2, r1
 8006620:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006624:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006628:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	781b      	ldrb	r3, [r3, #0]
 800662e:	015a      	lsls	r2, r3, #5
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	4413      	add	r3, r2
 8006634:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	683a      	ldr	r2, [r7, #0]
 800663c:	7812      	ldrb	r2, [r2, #0]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006648:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800664c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	3301      	adds	r3, #1
 8006652:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	f242 7210 	movw	r2, #10000	@ 0x2710
 800665a:	4293      	cmp	r3, r2
 800665c:	d902      	bls.n	8006664 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
          break;
 8006662:	e00c      	b.n	800667e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	015a      	lsls	r2, r3, #5
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	4413      	add	r3, r2
 800666e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006678:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800667c:	d0e7      	beq.n	800664e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800667e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006680:	4618      	mov	r0, r3
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr

0800668c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800668c:	b480      	push	{r7}
 800668e:	b089      	sub	sp, #36	@ 0x24
 8006690:	af00      	add	r7, sp, #0
 8006692:	60f8      	str	r0, [r7, #12]
 8006694:	60b9      	str	r1, [r7, #8]
 8006696:	4611      	mov	r1, r2
 8006698:	461a      	mov	r2, r3
 800669a:	460b      	mov	r3, r1
 800669c:	71fb      	strb	r3, [r7, #7]
 800669e:	4613      	mov	r3, r2
 80066a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80066aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d123      	bne.n	80066fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80066b2:	88bb      	ldrh	r3, [r7, #4]
 80066b4:	3303      	adds	r3, #3
 80066b6:	089b      	lsrs	r3, r3, #2
 80066b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80066ba:	2300      	movs	r3, #0
 80066bc:	61bb      	str	r3, [r7, #24]
 80066be:	e018      	b.n	80066f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80066c0:	79fb      	ldrb	r3, [r7, #7]
 80066c2:	031a      	lsls	r2, r3, #12
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	4413      	add	r3, r2
 80066c8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80066cc:	461a      	mov	r2, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	3301      	adds	r3, #1
 80066d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	3301      	adds	r3, #1
 80066de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	3301      	adds	r3, #1
 80066e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	3301      	adds	r3, #1
 80066ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	3301      	adds	r3, #1
 80066f0:	61bb      	str	r3, [r7, #24]
 80066f2:	69ba      	ldr	r2, [r7, #24]
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d3e2      	bcc.n	80066c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80066fa:	2300      	movs	r3, #0
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3724      	adds	r7, #36	@ 0x24
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006708:	b480      	push	{r7}
 800670a:	b08b      	sub	sp, #44	@ 0x2c
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	4613      	mov	r3, r2
 8006714:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800671e:	88fb      	ldrh	r3, [r7, #6]
 8006720:	089b      	lsrs	r3, r3, #2
 8006722:	b29b      	uxth	r3, r3
 8006724:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006726:	88fb      	ldrh	r3, [r7, #6]
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800672e:	2300      	movs	r3, #0
 8006730:	623b      	str	r3, [r7, #32]
 8006732:	e014      	b.n	800675e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006734:	69bb      	ldr	r3, [r7, #24]
 8006736:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800673e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006740:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006742:	3301      	adds	r3, #1
 8006744:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006748:	3301      	adds	r3, #1
 800674a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800674c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800674e:	3301      	adds	r3, #1
 8006750:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	3301      	adds	r3, #1
 8006756:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006758:	6a3b      	ldr	r3, [r7, #32]
 800675a:	3301      	adds	r3, #1
 800675c:	623b      	str	r3, [r7, #32]
 800675e:	6a3a      	ldr	r2, [r7, #32]
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	429a      	cmp	r2, r3
 8006764:	d3e6      	bcc.n	8006734 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006766:	8bfb      	ldrh	r3, [r7, #30]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01e      	beq.n	80067aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006770:	69bb      	ldr	r3, [r7, #24]
 8006772:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006776:	461a      	mov	r2, r3
 8006778:	f107 0310 	add.w	r3, r7, #16
 800677c:	6812      	ldr	r2, [r2, #0]
 800677e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006780:	693a      	ldr	r2, [r7, #16]
 8006782:	6a3b      	ldr	r3, [r7, #32]
 8006784:	b2db      	uxtb	r3, r3
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	fa22 f303 	lsr.w	r3, r2, r3
 800678c:	b2da      	uxtb	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006790:	701a      	strb	r2, [r3, #0]
      i++;
 8006792:	6a3b      	ldr	r3, [r7, #32]
 8006794:	3301      	adds	r3, #1
 8006796:	623b      	str	r3, [r7, #32]
      pDest++;
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	3301      	adds	r3, #1
 800679c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800679e:	8bfb      	ldrh	r3, [r7, #30]
 80067a0:	3b01      	subs	r3, #1
 80067a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80067a4:	8bfb      	ldrh	r3, [r7, #30]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1ea      	bne.n	8006780 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80067aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	372c      	adds	r7, #44	@ 0x2c
 80067b0:	46bd      	mov	sp, r7
 80067b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b6:	4770      	bx	lr

080067b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b085      	sub	sp, #20
 80067bc:	af00      	add	r7, sp, #0
 80067be:	6078      	str	r0, [r7, #4]
 80067c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	785b      	ldrb	r3, [r3, #1]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d12c      	bne.n	800682e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	015a      	lsls	r2, r3, #5
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4413      	add	r3, r2
 80067dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	db12      	blt.n	800680c <USB_EPSetStall+0x54>
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	015a      	lsls	r2, r3, #5
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	4413      	add	r3, r2
 80067f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	0151      	lsls	r1, r2, #5
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	440a      	add	r2, r1
 8006802:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006806:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800680a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	015a      	lsls	r2, r3, #5
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	68ba      	ldr	r2, [r7, #8]
 800681c:	0151      	lsls	r1, r2, #5
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	440a      	add	r2, r1
 8006822:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006826:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	e02b      	b.n	8006886 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	015a      	lsls	r2, r3, #5
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	db12      	blt.n	8006866 <USB_EPSetStall+0xae>
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d00f      	beq.n	8006866 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	015a      	lsls	r2, r3, #5
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	4413      	add	r3, r2
 800684e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	68ba      	ldr	r2, [r7, #8]
 8006856:	0151      	lsls	r1, r2, #5
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	440a      	add	r2, r1
 800685c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006860:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006864:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	015a      	lsls	r2, r3, #5
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	4413      	add	r3, r2
 800686e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	0151      	lsls	r1, r2, #5
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	440a      	add	r2, r1
 800687c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006880:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006884:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	3714      	adds	r7, #20
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006894:	b480      	push	{r7}
 8006896:	b085      	sub	sp, #20
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	785b      	ldrb	r3, [r3, #1]
 80068ac:	2b01      	cmp	r3, #1
 80068ae:	d128      	bne.n	8006902 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	015a      	lsls	r2, r3, #5
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	0151      	lsls	r1, r2, #5
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	440a      	add	r2, r1
 80068c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068ca:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80068ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	791b      	ldrb	r3, [r3, #4]
 80068d4:	2b03      	cmp	r3, #3
 80068d6:	d003      	beq.n	80068e0 <USB_EPClearStall+0x4c>
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	791b      	ldrb	r3, [r3, #4]
 80068dc:	2b02      	cmp	r3, #2
 80068de:	d138      	bne.n	8006952 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	68ba      	ldr	r2, [r7, #8]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068fe:	6013      	str	r3, [r2, #0]
 8006900:	e027      	b.n	8006952 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006902:	68bb      	ldr	r3, [r7, #8]
 8006904:	015a      	lsls	r2, r3, #5
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	4413      	add	r3, r2
 800690a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	0151      	lsls	r1, r2, #5
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	440a      	add	r2, r1
 8006918:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800691c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006920:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	791b      	ldrb	r3, [r3, #4]
 8006926:	2b03      	cmp	r3, #3
 8006928:	d003      	beq.n	8006932 <USB_EPClearStall+0x9e>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	791b      	ldrb	r3, [r3, #4]
 800692e:	2b02      	cmp	r3, #2
 8006930:	d10f      	bne.n	8006952 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	015a      	lsls	r2, r3, #5
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	4413      	add	r3, r2
 800693a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	68ba      	ldr	r2, [r7, #8]
 8006942:	0151      	lsls	r1, r2, #5
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	440a      	add	r2, r1
 8006948:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800694c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006950:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	3714      	adds	r7, #20
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr

08006960 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
 8006968:	460b      	mov	r3, r1
 800696a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800697e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006982:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800699a:	4313      	orrs	r3, r2
 800699c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800699e:	2300      	movs	r3, #0
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr

080069ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	68fa      	ldr	r2, [r7, #12]
 80069c2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80069c6:	f023 0303 	bic.w	r3, r3, #3
 80069ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	68fa      	ldr	r2, [r7, #12]
 80069d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80069da:	f023 0302 	bic.w	r3, r3, #2
 80069de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr

080069ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80069ee:	b480      	push	{r7}
 80069f0:	b085      	sub	sp, #20
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8006a08:	f023 0303 	bic.w	r3, r3, #3
 8006a0c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a1c:	f043 0302 	orr.w	r3, r3, #2
 8006a20:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr

08006a30 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006a30:	b480      	push	{r7}
 8006a32:	b085      	sub	sp, #20
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	695b      	ldr	r3, [r3, #20]
 8006a3c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	699b      	ldr	r3, [r3, #24]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	4013      	ands	r3, r2
 8006a46:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006a48:	68fb      	ldr	r3, [r7, #12]
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b085      	sub	sp, #20
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	68ba      	ldr	r2, [r7, #8]
 8006a76:	4013      	ands	r3, r2
 8006a78:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	0c1b      	lsrs	r3, r3, #16
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3714      	adds	r7, #20
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b085      	sub	sp, #20
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006aa6:	69db      	ldr	r3, [r3, #28]
 8006aa8:	68ba      	ldr	r2, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	b29b      	uxth	r3, r3
}
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	3714      	adds	r7, #20
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr

08006abe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006abe:	b480      	push	{r7}
 8006ac0:	b085      	sub	sp, #20
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006ace:	78fb      	ldrb	r3, [r7, #3]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	68ba      	ldr	r2, [r7, #8]
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006aec:	68bb      	ldr	r3, [r7, #8]
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3714      	adds	r7, #20
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006afa:	b480      	push	{r7}
 8006afc:	b087      	sub	sp, #28
 8006afe:	af00      	add	r7, sp, #0
 8006b00:	6078      	str	r0, [r7, #4]
 8006b02:	460b      	mov	r3, r1
 8006b04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	f003 030f 	and.w	r3, r3, #15
 8006b24:	68fa      	ldr	r2, [r7, #12]
 8006b26:	fa22 f303 	lsr.w	r3, r2, r3
 8006b2a:	01db      	lsls	r3, r3, #7
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006b34:	78fb      	ldrb	r3, [r7, #3]
 8006b36:	015a      	lsls	r2, r3, #5
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	4413      	add	r3, r2
 8006b3c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	693a      	ldr	r2, [r7, #16]
 8006b44:	4013      	ands	r3, r2
 8006b46:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006b48:	68bb      	ldr	r3, [r7, #8]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	371c      	adds	r7, #28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	f003 0301 	and.w	r3, r3, #1
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	370c      	adds	r7, #12
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b70:	4770      	bx	lr

08006b72 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b8c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006b9c:	685b      	ldr	r3, [r3, #4]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006ba4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ba8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006baa:	2300      	movs	r3, #0
}
 8006bac:	4618      	mov	r0, r3
 8006bae:	3714      	adds	r7, #20
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b087      	sub	sp, #28
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	60f8      	str	r0, [r7, #12]
 8006bc0:	460b      	mov	r3, r1
 8006bc2:	607a      	str	r2, [r7, #4]
 8006bc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	333c      	adds	r3, #60	@ 0x3c
 8006bce:	3304      	adds	r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	4a26      	ldr	r2, [pc, #152]	@ (8006c70 <USB_EP0_OutStart+0xb8>)
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	d90a      	bls.n	8006bf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006bec:	d101      	bne.n	8006bf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	e037      	b.n	8006c62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c04:	691b      	ldr	r3, [r3, #16]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c0c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c18:	691b      	ldr	r3, [r3, #16]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c20:	f043 0318 	orr.w	r3, r3, #24
 8006c24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c34:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8006c38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006c3a:	7afb      	ldrb	r3, [r7, #11]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d10f      	bne.n	8006c60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c46:	461a      	mov	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	697a      	ldr	r2, [r7, #20]
 8006c56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006c5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	4f54300a 	.word	0x4f54300a

08006c74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	3301      	adds	r3, #1
 8006c84:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006c8c:	d901      	bls.n	8006c92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e022      	b.n	8006cd8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	daf2      	bge.n	8006c80 <USB_CoreReset+0xc>

  count = 10U;
 8006c9a:	230a      	movs	r3, #10
 8006c9c:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8006c9e:	e002      	b.n	8006ca6 <USB_CoreReset+0x32>
  {
    count--;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	3b01      	subs	r3, #1
 8006ca4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1f9      	bne.n	8006ca0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	691b      	ldr	r3, [r3, #16]
 8006cb0:	f043 0201 	orr.w	r2, r3, #1
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	3301      	adds	r3, #1
 8006cbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006cc4:	d901      	bls.n	8006cca <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8006cc6:	2303      	movs	r3, #3
 8006cc8:	e006      	b.n	8006cd8 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	f003 0301 	and.w	r3, r3, #1
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d0f0      	beq.n	8006cb8 <USB_CoreReset+0x44>

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006cf0:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8006cf4:	f002 fcf2 	bl	80096dc <USBD_static_malloc>
 8006cf8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	32b0      	adds	r2, #176	@ 0xb0
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006d10:	2302      	movs	r3, #2
 8006d12:	e0d4      	b.n	8006ebe <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006d14:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8006d18:	2100      	movs	r1, #0
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f002 fd22 	bl	8009764 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	32b0      	adds	r2, #176	@ 0xb0
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	32b0      	adds	r2, #176	@ 0xb0
 8006d3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	7c1b      	ldrb	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d138      	bne.n	8006dbe <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006d4c:	4b5e      	ldr	r3, [pc, #376]	@ (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006d4e:	7819      	ldrb	r1, [r3, #0]
 8006d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d54:	2202      	movs	r2, #2
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f002 fb51 	bl	80093fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006d5c:	4b5a      	ldr	r3, [pc, #360]	@ (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	f003 020f 	and.w	r2, r3, #15
 8006d64:	6879      	ldr	r1, [r7, #4]
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	3323      	adds	r3, #35	@ 0x23
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006d76:	4b55      	ldr	r3, [pc, #340]	@ (8006ecc <USBD_CDC_Init+0x1e8>)
 8006d78:	7819      	ldrb	r1, [r3, #0]
 8006d7a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d7e:	2202      	movs	r2, #2
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f002 fb3c 	bl	80093fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006d86:	4b51      	ldr	r3, [pc, #324]	@ (8006ecc <USBD_CDC_Init+0x1e8>)
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	6879      	ldr	r1, [r7, #4]
 8006d90:	4613      	mov	r3, r2
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	4413      	add	r3, r2
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006d9e:	2201      	movs	r2, #1
 8006da0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006da2:	4b4b      	ldr	r3, [pc, #300]	@ (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	331c      	adds	r3, #28
 8006db8:	2210      	movs	r2, #16
 8006dba:	601a      	str	r2, [r3, #0]
 8006dbc:	e035      	b.n	8006e2a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006dbe:	4b42      	ldr	r3, [pc, #264]	@ (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006dc0:	7819      	ldrb	r1, [r3, #0]
 8006dc2:	2340      	movs	r3, #64	@ 0x40
 8006dc4:	2202      	movs	r2, #2
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f002 fb19 	bl	80093fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8006ec8 <USBD_CDC_Init+0x1e4>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	f003 020f 	and.w	r2, r3, #15
 8006dd4:	6879      	ldr	r1, [r7, #4]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	4413      	add	r3, r2
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	440b      	add	r3, r1
 8006de0:	3323      	adds	r3, #35	@ 0x23
 8006de2:	2201      	movs	r2, #1
 8006de4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006de6:	4b39      	ldr	r3, [pc, #228]	@ (8006ecc <USBD_CDC_Init+0x1e8>)
 8006de8:	7819      	ldrb	r1, [r3, #0]
 8006dea:	2340      	movs	r3, #64	@ 0x40
 8006dec:	2202      	movs	r2, #2
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f002 fb05 	bl	80093fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006df4:	4b35      	ldr	r3, [pc, #212]	@ (8006ecc <USBD_CDC_Init+0x1e8>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	f003 020f 	and.w	r2, r3, #15
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	4613      	mov	r3, r2
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	009b      	lsls	r3, r3, #2
 8006e06:	440b      	add	r3, r1
 8006e08:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8006e10:	4b2f      	ldr	r3, [pc, #188]	@ (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	f003 020f 	and.w	r2, r3, #15
 8006e18:	6879      	ldr	r1, [r7, #4]
 8006e1a:	4613      	mov	r3, r2
 8006e1c:	009b      	lsls	r3, r3, #2
 8006e1e:	4413      	add	r3, r2
 8006e20:	009b      	lsls	r3, r3, #2
 8006e22:	440b      	add	r3, r1
 8006e24:	331c      	adds	r3, #28
 8006e26:	2210      	movs	r2, #16
 8006e28:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006e2a:	4b29      	ldr	r3, [pc, #164]	@ (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006e2c:	7819      	ldrb	r1, [r3, #0]
 8006e2e:	2308      	movs	r3, #8
 8006e30:	2203      	movs	r2, #3
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f002 fae3 	bl	80093fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8006e38:	4b25      	ldr	r3, [pc, #148]	@ (8006ed0 <USBD_CDC_Init+0x1ec>)
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	4613      	mov	r3, r2
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	4413      	add	r3, r2
 8006e48:	009b      	lsls	r3, r3, #2
 8006e4a:	440b      	add	r3, r1
 8006e4c:	3323      	adds	r3, #35	@ 0x23
 8006e4e:	2201      	movs	r2, #1
 8006e50:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	33b0      	adds	r3, #176	@ 0xb0
 8006e64:	009b      	lsls	r3, r3, #2
 8006e66:	4413      	add	r3, r2
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d101      	bne.n	8006e8c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	e018      	b.n	8006ebe <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	7c1b      	ldrb	r3, [r3, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006e94:	4b0d      	ldr	r3, [pc, #52]	@ (8006ecc <USBD_CDC_Init+0x1e8>)
 8006e96:	7819      	ldrb	r1, [r3, #0]
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006e9e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f002 fb9a 	bl	80095dc <USBD_LL_PrepareReceive>
 8006ea8:	e008      	b.n	8006ebc <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006eaa:	4b08      	ldr	r3, [pc, #32]	@ (8006ecc <USBD_CDC_Init+0x1e8>)
 8006eac:	7819      	ldrb	r1, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006eb4:	2340      	movs	r3, #64	@ 0x40
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f002 fb90 	bl	80095dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006ebc:	2300      	movs	r3, #0
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000093 	.word	0x20000093
 8006ecc:	20000094 	.word	0x20000094
 8006ed0:	20000095 	.word	0x20000095

08006ed4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
 8006edc:	460b      	mov	r3, r1
 8006ede:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8006ee0:	4b3a      	ldr	r3, [pc, #232]	@ (8006fcc <USBD_CDC_DeInit+0xf8>)
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f002 faaf 	bl	800944a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8006eec:	4b37      	ldr	r3, [pc, #220]	@ (8006fcc <USBD_CDC_DeInit+0xf8>)
 8006eee:	781b      	ldrb	r3, [r3, #0]
 8006ef0:	f003 020f 	and.w	r2, r3, #15
 8006ef4:	6879      	ldr	r1, [r7, #4]
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	440b      	add	r3, r1
 8006f00:	3323      	adds	r3, #35	@ 0x23
 8006f02:	2200      	movs	r2, #0
 8006f04:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8006f06:	4b32      	ldr	r3, [pc, #200]	@ (8006fd0 <USBD_CDC_DeInit+0xfc>)
 8006f08:	781b      	ldrb	r3, [r3, #0]
 8006f0a:	4619      	mov	r1, r3
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f002 fa9c 	bl	800944a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8006f12:	4b2f      	ldr	r3, [pc, #188]	@ (8006fd0 <USBD_CDC_DeInit+0xfc>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	f003 020f 	and.w	r2, r3, #15
 8006f1a:	6879      	ldr	r1, [r7, #4]
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	440b      	add	r3, r1
 8006f26:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8006f2e:	4b29      	ldr	r3, [pc, #164]	@ (8006fd4 <USBD_CDC_DeInit+0x100>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f002 fa88 	bl	800944a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8006f3a:	4b26      	ldr	r3, [pc, #152]	@ (8006fd4 <USBD_CDC_DeInit+0x100>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3323      	adds	r3, #35	@ 0x23
 8006f50:	2200      	movs	r2, #0
 8006f52:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8006f54:	4b1f      	ldr	r3, [pc, #124]	@ (8006fd4 <USBD_CDC_DeInit+0x100>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	f003 020f 	and.w	r2, r3, #15
 8006f5c:	6879      	ldr	r1, [r7, #4]
 8006f5e:	4613      	mov	r3, r2
 8006f60:	009b      	lsls	r3, r3, #2
 8006f62:	4413      	add	r3, r2
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	331c      	adds	r3, #28
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	32b0      	adds	r2, #176	@ 0xb0
 8006f78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d01f      	beq.n	8006fc0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006f86:	687a      	ldr	r2, [r7, #4]
 8006f88:	33b0      	adds	r3, #176	@ 0xb0
 8006f8a:	009b      	lsls	r3, r3, #2
 8006f8c:	4413      	add	r3, r2
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	32b0      	adds	r2, #176	@ 0xb0
 8006f9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f002 fba8 	bl	80096f8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	32b0      	adds	r2, #176	@ 0xb0
 8006fb2:	2100      	movs	r1, #0
 8006fb4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000093 	.word	0x20000093
 8006fd0:	20000094 	.word	0x20000094
 8006fd4:	20000095 	.word	0x20000095

08006fd8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b086      	sub	sp, #24
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	32b0      	adds	r2, #176	@ 0xb0
 8006fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ff0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d101      	bne.n	8007008 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	e0bf      	b.n	8007188 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007010:	2b00      	cmp	r3, #0
 8007012:	d050      	beq.n	80070b6 <USBD_CDC_Setup+0xde>
 8007014:	2b20      	cmp	r3, #32
 8007016:	f040 80af 	bne.w	8007178 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	88db      	ldrh	r3, [r3, #6]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d03a      	beq.n	8007098 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	b25b      	sxtb	r3, r3
 8007028:	2b00      	cmp	r3, #0
 800702a:	da1b      	bge.n	8007064 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	33b0      	adds	r3, #176	@ 0xb0
 8007036:	009b      	lsls	r3, r3, #2
 8007038:	4413      	add	r3, r2
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007042:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007044:	683a      	ldr	r2, [r7, #0]
 8007046:	88d2      	ldrh	r2, [r2, #6]
 8007048:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	88db      	ldrh	r3, [r3, #6]
 800704e:	2b07      	cmp	r3, #7
 8007050:	bf28      	it	cs
 8007052:	2307      	movcs	r3, #7
 8007054:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8007056:	693b      	ldr	r3, [r7, #16]
 8007058:	89fa      	ldrh	r2, [r7, #14]
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f001 fd91 	bl	8008b84 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007062:	e090      	b.n	8007186 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	785a      	ldrb	r2, [r3, #1]
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	88db      	ldrh	r3, [r3, #6]
 8007072:	2b3f      	cmp	r3, #63	@ 0x3f
 8007074:	d803      	bhi.n	800707e <USBD_CDC_Setup+0xa6>
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	88db      	ldrh	r3, [r3, #6]
 800707a:	b2da      	uxtb	r2, r3
 800707c:	e000      	b.n	8007080 <USBD_CDC_Setup+0xa8>
 800707e:	2240      	movs	r2, #64	@ 0x40
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8007086:	6939      	ldr	r1, [r7, #16]
 8007088:	693b      	ldr	r3, [r7, #16]
 800708a:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800708e:	461a      	mov	r2, r3
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f001 fda6 	bl	8008be2 <USBD_CtlPrepareRx>
      break;
 8007096:	e076      	b.n	8007186 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800709e:	687a      	ldr	r2, [r7, #4]
 80070a0:	33b0      	adds	r3, #176	@ 0xb0
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	4413      	add	r3, r2
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	7850      	ldrb	r0, [r2, #1]
 80070ae:	2200      	movs	r2, #0
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	4798      	blx	r3
      break;
 80070b4:	e067      	b.n	8007186 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	785b      	ldrb	r3, [r3, #1]
 80070ba:	2b0b      	cmp	r3, #11
 80070bc:	d851      	bhi.n	8007162 <USBD_CDC_Setup+0x18a>
 80070be:	a201      	add	r2, pc, #4	@ (adr r2, 80070c4 <USBD_CDC_Setup+0xec>)
 80070c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c4:	080070f5 	.word	0x080070f5
 80070c8:	08007171 	.word	0x08007171
 80070cc:	08007163 	.word	0x08007163
 80070d0:	08007163 	.word	0x08007163
 80070d4:	08007163 	.word	0x08007163
 80070d8:	08007163 	.word	0x08007163
 80070dc:	08007163 	.word	0x08007163
 80070e0:	08007163 	.word	0x08007163
 80070e4:	08007163 	.word	0x08007163
 80070e8:	08007163 	.word	0x08007163
 80070ec:	0800711f 	.word	0x0800711f
 80070f0:	08007149 	.word	0x08007149
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	2b03      	cmp	r3, #3
 80070fe:	d107      	bne.n	8007110 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007100:	f107 030a 	add.w	r3, r7, #10
 8007104:	2202      	movs	r2, #2
 8007106:	4619      	mov	r1, r3
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f001 fd3b 	bl	8008b84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800710e:	e032      	b.n	8007176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007110:	6839      	ldr	r1, [r7, #0]
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f001 fcb9 	bl	8008a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8007118:	2303      	movs	r3, #3
 800711a:	75fb      	strb	r3, [r7, #23]
          break;
 800711c:	e02b      	b.n	8007176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b03      	cmp	r3, #3
 8007128:	d107      	bne.n	800713a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800712a:	f107 030d 	add.w	r3, r7, #13
 800712e:	2201      	movs	r2, #1
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f001 fd26 	bl	8008b84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007138:	e01d      	b.n	8007176 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800713a:	6839      	ldr	r1, [r7, #0]
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 fca4 	bl	8008a8a <USBD_CtlError>
            ret = USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	75fb      	strb	r3, [r7, #23]
          break;
 8007146:	e016      	b.n	8007176 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800714e:	b2db      	uxtb	r3, r3
 8007150:	2b03      	cmp	r3, #3
 8007152:	d00f      	beq.n	8007174 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007154:	6839      	ldr	r1, [r7, #0]
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fc97 	bl	8008a8a <USBD_CtlError>
            ret = USBD_FAIL;
 800715c:	2303      	movs	r3, #3
 800715e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007160:	e008      	b.n	8007174 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f001 fc90 	bl	8008a8a <USBD_CtlError>
          ret = USBD_FAIL;
 800716a:	2303      	movs	r3, #3
 800716c:	75fb      	strb	r3, [r7, #23]
          break;
 800716e:	e002      	b.n	8007176 <USBD_CDC_Setup+0x19e>
          break;
 8007170:	bf00      	nop
 8007172:	e008      	b.n	8007186 <USBD_CDC_Setup+0x1ae>
          break;
 8007174:	bf00      	nop
      }
      break;
 8007176:	e006      	b.n	8007186 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 fc85 	bl	8008a8a <USBD_CtlError>
      ret = USBD_FAIL;
 8007180:	2303      	movs	r3, #3
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	bf00      	nop
  }

  return (uint8_t)ret;
 8007186:	7dfb      	ldrb	r3, [r7, #23]
}
 8007188:	4618      	mov	r0, r3
 800718a:	3718      	adds	r7, #24
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b084      	sub	sp, #16
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	460b      	mov	r3, r1
 800719a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80071a2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	32b0      	adds	r2, #176	@ 0xb0
 80071ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e065      	b.n	8007286 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	32b0      	adds	r2, #176	@ 0xb0
 80071c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071c8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80071ca:	78fb      	ldrb	r3, [r7, #3]
 80071cc:	f003 020f 	and.w	r2, r3, #15
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	4613      	mov	r3, r2
 80071d4:	009b      	lsls	r3, r3, #2
 80071d6:	4413      	add	r3, r2
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	440b      	add	r3, r1
 80071dc:	3314      	adds	r3, #20
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d02f      	beq.n	8007244 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80071e4:	78fb      	ldrb	r3, [r7, #3]
 80071e6:	f003 020f 	and.w	r2, r3, #15
 80071ea:	6879      	ldr	r1, [r7, #4]
 80071ec:	4613      	mov	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	4413      	add	r3, r2
 80071f2:	009b      	lsls	r3, r3, #2
 80071f4:	440b      	add	r3, r1
 80071f6:	3314      	adds	r3, #20
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	78fb      	ldrb	r3, [r7, #3]
 80071fc:	f003 010f 	and.w	r1, r3, #15
 8007200:	68f8      	ldr	r0, [r7, #12]
 8007202:	460b      	mov	r3, r1
 8007204:	00db      	lsls	r3, r3, #3
 8007206:	440b      	add	r3, r1
 8007208:	009b      	lsls	r3, r3, #2
 800720a:	4403      	add	r3, r0
 800720c:	331c      	adds	r3, #28
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	fbb2 f1f3 	udiv	r1, r2, r3
 8007214:	fb01 f303 	mul.w	r3, r1, r3
 8007218:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800721a:	2b00      	cmp	r3, #0
 800721c:	d112      	bne.n	8007244 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800721e:	78fb      	ldrb	r3, [r7, #3]
 8007220:	f003 020f 	and.w	r2, r3, #15
 8007224:	6879      	ldr	r1, [r7, #4]
 8007226:	4613      	mov	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	4413      	add	r3, r2
 800722c:	009b      	lsls	r3, r3, #2
 800722e:	440b      	add	r3, r1
 8007230:	3314      	adds	r3, #20
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8007236:	78f9      	ldrb	r1, [r7, #3]
 8007238:	2300      	movs	r3, #0
 800723a:	2200      	movs	r2, #0
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f002 f9ac 	bl	800959a <USBD_LL_Transmit>
 8007242:	e01f      	b.n	8007284 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	2200      	movs	r2, #0
 8007248:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	33b0      	adds	r3, #176	@ 0xb0
 8007256:	009b      	lsls	r3, r3, #2
 8007258:	4413      	add	r3, r2
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	691b      	ldr	r3, [r3, #16]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d010      	beq.n	8007284 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007268:	687a      	ldr	r2, [r7, #4]
 800726a:	33b0      	adds	r3, #176	@ 0xb0
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	685b      	ldr	r3, [r3, #4]
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8007280:	78fa      	ldrb	r2, [r7, #3]
 8007282:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007284:	2300      	movs	r3, #0
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
 8007296:	460b      	mov	r3, r1
 8007298:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	32b0      	adds	r2, #176	@ 0xb0
 80072a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072a8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	32b0      	adds	r2, #176	@ 0xb0
 80072b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d101      	bne.n	80072c0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80072bc:	2303      	movs	r3, #3
 80072be:	e01a      	b.n	80072f6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80072c0:	78fb      	ldrb	r3, [r7, #3]
 80072c2:	4619      	mov	r1, r3
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f002 f9aa 	bl	800961e <USBD_LL_GetRxDataSize>
 80072ca:	4602      	mov	r2, r0
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	33b0      	adds	r3, #176	@ 0xb0
 80072dc:	009b      	lsls	r3, r3, #2
 80072de:	4413      	add	r3, r2
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	68db      	ldr	r3, [r3, #12]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80072f0:	4611      	mov	r1, r2
 80072f2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}

080072fe <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	32b0      	adds	r2, #176	@ 0xb0
 8007310:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007314:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800731c:	2303      	movs	r3, #3
 800731e:	e024      	b.n	800736a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	33b0      	adds	r3, #176	@ 0xb0
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d019      	beq.n	8007368 <USBD_CDC_EP0_RxReady+0x6a>
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800733a:	2bff      	cmp	r3, #255	@ 0xff
 800733c:	d014      	beq.n	8007368 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	33b0      	adds	r3, #176	@ 0xb0
 8007348:	009b      	lsls	r3, r3, #2
 800734a:	4413      	add	r3, r2
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8007356:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8007358:	68fa      	ldr	r2, [r7, #12]
 800735a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800735e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	22ff      	movs	r2, #255	@ 0xff
 8007364:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8007368:	2300      	movs	r3, #0
}
 800736a:	4618      	mov	r0, r3
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}
	...

08007374 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007374:	b580      	push	{r7, lr}
 8007376:	b086      	sub	sp, #24
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800737c:	2182      	movs	r1, #130	@ 0x82
 800737e:	4818      	ldr	r0, [pc, #96]	@ (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007380:	f000 fd22 	bl	8007dc8 <USBD_GetEpDesc>
 8007384:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007386:	2101      	movs	r1, #1
 8007388:	4815      	ldr	r0, [pc, #84]	@ (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800738a:	f000 fd1d 	bl	8007dc8 <USBD_GetEpDesc>
 800738e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007390:	2181      	movs	r1, #129	@ 0x81
 8007392:	4813      	ldr	r0, [pc, #76]	@ (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007394:	f000 fd18 	bl	8007dc8 <USBD_GetEpDesc>
 8007398:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d002      	beq.n	80073a6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	2210      	movs	r2, #16
 80073a4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d006      	beq.n	80073ba <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2200      	movs	r2, #0
 80073b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073b4:	711a      	strb	r2, [r3, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d006      	beq.n	80073ce <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80073c8:	711a      	strb	r2, [r3, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2243      	movs	r2, #67	@ 0x43
 80073d2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80073d4:	4b02      	ldr	r3, [pc, #8]	@ (80073e0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3718      	adds	r7, #24
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
 80073de:	bf00      	nop
 80073e0:	20000050 	.word	0x20000050

080073e4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80073ec:	2182      	movs	r1, #130	@ 0x82
 80073ee:	4818      	ldr	r0, [pc, #96]	@ (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073f0:	f000 fcea 	bl	8007dc8 <USBD_GetEpDesc>
 80073f4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80073f6:	2101      	movs	r1, #1
 80073f8:	4815      	ldr	r0, [pc, #84]	@ (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80073fa:	f000 fce5 	bl	8007dc8 <USBD_GetEpDesc>
 80073fe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007400:	2181      	movs	r1, #129	@ 0x81
 8007402:	4813      	ldr	r0, [pc, #76]	@ (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007404:	f000 fce0 	bl	8007dc8 <USBD_GetEpDesc>
 8007408:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2210      	movs	r2, #16
 8007414:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d006      	beq.n	800742a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2200      	movs	r2, #0
 8007420:	711a      	strb	r2, [r3, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f042 0202 	orr.w	r2, r2, #2
 8007428:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d006      	beq.n	800743e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	711a      	strb	r2, [r3, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f042 0202 	orr.w	r2, r2, #2
 800743c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2243      	movs	r2, #67	@ 0x43
 8007442:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007444:	4b02      	ldr	r3, [pc, #8]	@ (8007450 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8007446:	4618      	mov	r0, r3
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}
 800744e:	bf00      	nop
 8007450:	20000050 	.word	0x20000050

08007454 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b086      	sub	sp, #24
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800745c:	2182      	movs	r1, #130	@ 0x82
 800745e:	4818      	ldr	r0, [pc, #96]	@ (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007460:	f000 fcb2 	bl	8007dc8 <USBD_GetEpDesc>
 8007464:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8007466:	2101      	movs	r1, #1
 8007468:	4815      	ldr	r0, [pc, #84]	@ (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800746a:	f000 fcad 	bl	8007dc8 <USBD_GetEpDesc>
 800746e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007470:	2181      	movs	r1, #129	@ 0x81
 8007472:	4813      	ldr	r0, [pc, #76]	@ (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007474:	f000 fca8 	bl	8007dc8 <USBD_GetEpDesc>
 8007478:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d002      	beq.n	8007486 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007480:	697b      	ldr	r3, [r7, #20]
 8007482:	2210      	movs	r2, #16
 8007484:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d006      	beq.n	800749a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800748c:	693b      	ldr	r3, [r7, #16]
 800748e:	2200      	movs	r2, #0
 8007490:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007494:	711a      	strb	r2, [r3, #4]
 8007496:	2200      	movs	r2, #0
 8007498:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d006      	beq.n	80074ae <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	2200      	movs	r2, #0
 80074a4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074a8:	711a      	strb	r2, [r3, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2243      	movs	r2, #67	@ 0x43
 80074b2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80074b4:	4b02      	ldr	r3, [pc, #8]	@ (80074c0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3718      	adds	r7, #24
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	20000050 	.word	0x20000050

080074c4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b083      	sub	sp, #12
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	220a      	movs	r2, #10
 80074d0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80074d2:	4b03      	ldr	r3, [pc, #12]	@ (80074e0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80074d4:	4618      	mov	r0, r3
 80074d6:	370c      	adds	r7, #12
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	2000000c 	.word	0x2000000c

080074e4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b083      	sub	sp, #12
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e009      	b.n	800750c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	33b0      	adds	r3, #176	@ 0xb0
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	4413      	add	r3, r2
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8007518:	b480      	push	{r7}
 800751a:	b087      	sub	sp, #28
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	32b0      	adds	r2, #176	@ 0xb0
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800753a:	2303      	movs	r3, #3
 800753c:	e008      	b.n	8007550 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	68ba      	ldr	r2, [r7, #8]
 8007542:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	371c      	adds	r7, #28
 8007554:	46bd      	mov	sp, r7
 8007556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755a:	4770      	bx	lr

0800755c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800755c:	b480      	push	{r7}
 800755e:	b085      	sub	sp, #20
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	32b0      	adds	r2, #176	@ 0xb0
 8007570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007574:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2b00      	cmp	r3, #0
 800757a:	d101      	bne.n	8007580 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800757c:	2303      	movs	r3, #3
 800757e:	e004      	b.n	800758a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
	...

08007598 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	32b0      	adds	r2, #176	@ 0xb0
 80075aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	32b0      	adds	r2, #176	@ 0xb0
 80075ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80075c2:	2303      	movs	r3, #3
 80075c4:	e018      	b.n	80075f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	7c1b      	ldrb	r3, [r3, #16]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d10a      	bne.n	80075e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007600 <USBD_CDC_ReceivePacket+0x68>)
 80075d0:	7819      	ldrb	r1, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075d8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f001 fffd 	bl	80095dc <USBD_LL_PrepareReceive>
 80075e2:	e008      	b.n	80075f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80075e4:	4b06      	ldr	r3, [pc, #24]	@ (8007600 <USBD_CDC_ReceivePacket+0x68>)
 80075e6:	7819      	ldrb	r1, [r3, #0]
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80075ee:	2340      	movs	r3, #64	@ 0x40
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f001 fff3 	bl	80095dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3710      	adds	r7, #16
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}
 8007600:	20000094 	.word	0x20000094

08007604 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007604:	b580      	push	{r7, lr}
 8007606:	b086      	sub	sp, #24
 8007608:	af00      	add	r7, sp, #0
 800760a:	60f8      	str	r0, [r7, #12]
 800760c:	60b9      	str	r1, [r7, #8]
 800760e:	4613      	mov	r3, r2
 8007610:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d101      	bne.n	800761c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007618:	2303      	movs	r3, #3
 800761a:	e01f      	b.n	800765c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2200      	movs	r2, #0
 8007620:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	68ba      	ldr	r2, [r7, #8]
 800763e:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	79fa      	ldrb	r2, [r7, #7]
 800764e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f001 fe6d 	bl	8009330 <USBD_LL_Init>
 8007656:	4603      	mov	r3, r0
 8007658:	75fb      	strb	r3, [r7, #23]

  return ret;
 800765a:	7dfb      	ldrb	r3, [r7, #23]
}
 800765c:	4618      	mov	r0, r3
 800765e:	3718      	adds	r7, #24
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800766e:	2300      	movs	r3, #0
 8007670:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007678:	2303      	movs	r3, #3
 800767a:	e025      	b.n	80076c8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	32ae      	adds	r2, #174	@ 0xae
 800768e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00f      	beq.n	80076b8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	32ae      	adds	r2, #174	@ 0xae
 80076a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80076a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076a8:	f107 020e 	add.w	r2, r7, #14
 80076ac:	4610      	mov	r0, r2
 80076ae:	4798      	blx	r3
 80076b0:	4602      	mov	r2, r0
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 80076be:	1c5a      	adds	r2, r3, #1
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80076d8:	6878      	ldr	r0, [r7, #4]
 80076da:	f001 fe75 	bl	80093c8 <USBD_LL_Start>
 80076de:	4603      	mov	r3, r0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3708      	adds	r7, #8
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80076f0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	370c      	adds	r7, #12
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr

080076fe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80076fe:	b580      	push	{r7, lr}
 8007700:	b084      	sub	sp, #16
 8007702:	af00      	add	r7, sp, #0
 8007704:	6078      	str	r0, [r7, #4]
 8007706:	460b      	mov	r3, r1
 8007708:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007714:	2b00      	cmp	r3, #0
 8007716:	d009      	beq.n	800772c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	78fa      	ldrb	r2, [r7, #3]
 8007722:	4611      	mov	r1, r2
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	4798      	blx	r3
 8007728:	4603      	mov	r3, r0
 800772a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800772c:	7bfb      	ldrb	r3, [r7, #15]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3710      	adds	r7, #16
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}

08007736 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007736:	b580      	push	{r7, lr}
 8007738:	b084      	sub	sp, #16
 800773a:	af00      	add	r7, sp, #0
 800773c:	6078      	str	r0, [r7, #4]
 800773e:	460b      	mov	r3, r1
 8007740:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007742:	2300      	movs	r3, #0
 8007744:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800774c:	685b      	ldr	r3, [r3, #4]
 800774e:	78fa      	ldrb	r2, [r7, #3]
 8007750:	4611      	mov	r1, r2
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	4798      	blx	r3
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800775c:	2303      	movs	r3, #3
 800775e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007760:	7bfb      	ldrb	r3, [r7, #15]
}
 8007762:	4618      	mov	r0, r3
 8007764:	3710      	adds	r7, #16
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}

0800776a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800776a:	b580      	push	{r7, lr}
 800776c:	b084      	sub	sp, #16
 800776e:	af00      	add	r7, sp, #0
 8007770:	6078      	str	r0, [r7, #4]
 8007772:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	4618      	mov	r0, r3
 800777e:	f001 f94a 	bl	8008a16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2201      	movs	r2, #1
 8007786:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8007790:	461a      	mov	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800779e:	f003 031f 	and.w	r3, r3, #31
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d01a      	beq.n	80077dc <USBD_LL_SetupStage+0x72>
 80077a6:	2b02      	cmp	r3, #2
 80077a8:	d822      	bhi.n	80077f0 <USBD_LL_SetupStage+0x86>
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d002      	beq.n	80077b4 <USBD_LL_SetupStage+0x4a>
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d00a      	beq.n	80077c8 <USBD_LL_SetupStage+0x5e>
 80077b2:	e01d      	b.n	80077f0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077ba:	4619      	mov	r1, r3
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fb75 	bl	8007eac <USBD_StdDevReq>
 80077c2:	4603      	mov	r3, r0
 80077c4:	73fb      	strb	r3, [r7, #15]
      break;
 80077c6:	e020      	b.n	800780a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077ce:	4619      	mov	r1, r3
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 fbdd 	bl	8007f90 <USBD_StdItfReq>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]
      break;
 80077da:	e016      	b.n	800780a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fc3f 	bl	8008068 <USBD_StdEPReq>
 80077ea:	4603      	mov	r3, r0
 80077ec:	73fb      	strb	r3, [r7, #15]
      break;
 80077ee:	e00c      	b.n	800780a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80077f6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f001 fe42 	bl	8009488 <USBD_LL_StallEP>
 8007804:	4603      	mov	r3, r0
 8007806:	73fb      	strb	r3, [r7, #15]
      break;
 8007808:	bf00      	nop
  }

  return ret;
 800780a:	7bfb      	ldrb	r3, [r7, #15]
}
 800780c:	4618      	mov	r0, r3
 800780e:	3710      	adds	r7, #16
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b086      	sub	sp, #24
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	460b      	mov	r3, r1
 800781e:	607a      	str	r2, [r7, #4]
 8007820:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007822:	2300      	movs	r3, #0
 8007824:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8007826:	7afb      	ldrb	r3, [r7, #11]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d177      	bne.n	800791c <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8007832:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800783a:	2b03      	cmp	r3, #3
 800783c:	f040 80a1 	bne.w	8007982 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	693a      	ldr	r2, [r7, #16]
 8007846:	8992      	ldrh	r2, [r2, #12]
 8007848:	4293      	cmp	r3, r2
 800784a:	d91c      	bls.n	8007886 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	8992      	ldrh	r2, [r2, #12]
 8007854:	1a9a      	subs	r2, r3, r2
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800785a:	693b      	ldr	r3, [r7, #16]
 800785c:	691b      	ldr	r3, [r3, #16]
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	8992      	ldrh	r2, [r2, #12]
 8007862:	441a      	add	r2, r3
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	6919      	ldr	r1, [r3, #16]
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	899b      	ldrh	r3, [r3, #12]
 8007870:	461a      	mov	r2, r3
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	4293      	cmp	r3, r2
 8007878:	bf38      	it	cc
 800787a:	4613      	movcc	r3, r2
 800787c:	461a      	mov	r2, r3
 800787e:	68f8      	ldr	r0, [r7, #12]
 8007880:	f001 f9d0 	bl	8008c24 <USBD_CtlContinueRx>
 8007884:	e07d      	b.n	8007982 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800788c:	f003 031f 	and.w	r3, r3, #31
 8007890:	2b02      	cmp	r3, #2
 8007892:	d014      	beq.n	80078be <USBD_LL_DataOutStage+0xaa>
 8007894:	2b02      	cmp	r3, #2
 8007896:	d81d      	bhi.n	80078d4 <USBD_LL_DataOutStage+0xc0>
 8007898:	2b00      	cmp	r3, #0
 800789a:	d002      	beq.n	80078a2 <USBD_LL_DataOutStage+0x8e>
 800789c:	2b01      	cmp	r3, #1
 800789e:	d003      	beq.n	80078a8 <USBD_LL_DataOutStage+0x94>
 80078a0:	e018      	b.n	80078d4 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80078a2:	2300      	movs	r3, #0
 80078a4:	75bb      	strb	r3, [r7, #22]
            break;
 80078a6:	e018      	b.n	80078da <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078ae:	b2db      	uxtb	r3, r3
 80078b0:	4619      	mov	r1, r3
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fa6e 	bl	8007d94 <USBD_CoreFindIF>
 80078b8:	4603      	mov	r3, r0
 80078ba:	75bb      	strb	r3, [r7, #22]
            break;
 80078bc:	e00d      	b.n	80078da <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	4619      	mov	r1, r3
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 fa70 	bl	8007dae <USBD_CoreFindEP>
 80078ce:	4603      	mov	r3, r0
 80078d0:	75bb      	strb	r3, [r7, #22]
            break;
 80078d2:	e002      	b.n	80078da <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75bb      	strb	r3, [r7, #22]
            break;
 80078d8:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80078da:	7dbb      	ldrb	r3, [r7, #22]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d119      	bne.n	8007914 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80078e6:	b2db      	uxtb	r3, r3
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d113      	bne.n	8007914 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80078ec:	7dba      	ldrb	r2, [r7, #22]
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	32ae      	adds	r2, #174	@ 0xae
 80078f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078f6:	691b      	ldr	r3, [r3, #16]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 80078fc:	7dba      	ldrb	r2, [r7, #22]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007904:	7dba      	ldrb	r2, [r7, #22]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	32ae      	adds	r2, #174	@ 0xae
 800790a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007914:	68f8      	ldr	r0, [r7, #12]
 8007916:	f001 f996 	bl	8008c46 <USBD_CtlSendStatus>
 800791a:	e032      	b.n	8007982 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800791c:	7afb      	ldrb	r3, [r7, #11]
 800791e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007922:	b2db      	uxtb	r3, r3
 8007924:	4619      	mov	r1, r3
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	f000 fa41 	bl	8007dae <USBD_CoreFindEP>
 800792c:	4603      	mov	r3, r0
 800792e:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007930:	7dbb      	ldrb	r3, [r7, #22]
 8007932:	2bff      	cmp	r3, #255	@ 0xff
 8007934:	d025      	beq.n	8007982 <USBD_LL_DataOutStage+0x16e>
 8007936:	7dbb      	ldrb	r3, [r7, #22]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d122      	bne.n	8007982 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b03      	cmp	r3, #3
 8007946:	d117      	bne.n	8007978 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007948:	7dba      	ldrb	r2, [r7, #22]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	32ae      	adds	r2, #174	@ 0xae
 800794e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007952:	699b      	ldr	r3, [r3, #24]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d00f      	beq.n	8007978 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8007958:	7dba      	ldrb	r2, [r7, #22]
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007960:	7dba      	ldrb	r2, [r7, #22]
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	32ae      	adds	r2, #174	@ 0xae
 8007966:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800796a:	699b      	ldr	r3, [r3, #24]
 800796c:	7afa      	ldrb	r2, [r7, #11]
 800796e:	4611      	mov	r1, r2
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	4798      	blx	r3
 8007974:	4603      	mov	r3, r0
 8007976:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007978:	7dfb      	ldrb	r3, [r7, #23]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d001      	beq.n	8007982 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800797e:	7dfb      	ldrb	r3, [r7, #23]
 8007980:	e000      	b.n	8007984 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3718      	adds	r7, #24
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	460b      	mov	r3, r1
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800799a:	7afb      	ldrb	r3, [r7, #11]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d178      	bne.n	8007a92 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	3314      	adds	r3, #20
 80079a4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	d163      	bne.n	8007a78 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	693a      	ldr	r2, [r7, #16]
 80079b6:	8992      	ldrh	r2, [r2, #12]
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d91c      	bls.n	80079f6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	685b      	ldr	r3, [r3, #4]
 80079c0:	693a      	ldr	r2, [r7, #16]
 80079c2:	8992      	ldrh	r2, [r2, #12]
 80079c4:	1a9a      	subs	r2, r3, r2
 80079c6:	693b      	ldr	r3, [r7, #16]
 80079c8:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	693a      	ldr	r2, [r7, #16]
 80079d0:	8992      	ldrh	r2, [r2, #12]
 80079d2:	441a      	add	r2, r3
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 80079d8:	693b      	ldr	r3, [r7, #16]
 80079da:	6919      	ldr	r1, [r3, #16]
 80079dc:	693b      	ldr	r3, [r7, #16]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	461a      	mov	r2, r3
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f001 f8ec 	bl	8008bc0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079e8:	2300      	movs	r3, #0
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	68f8      	ldr	r0, [r7, #12]
 80079f0:	f001 fdf4 	bl	80095dc <USBD_LL_PrepareReceive>
 80079f4:	e040      	b.n	8007a78 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	899b      	ldrh	r3, [r3, #12]
 80079fa:	461a      	mov	r2, r3
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	685b      	ldr	r3, [r3, #4]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d11c      	bne.n	8007a3e <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	693a      	ldr	r2, [r7, #16]
 8007a0a:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d316      	bcc.n	8007a3e <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8007a10:	693b      	ldr	r3, [r7, #16]
 8007a12:	681a      	ldr	r2, [r3, #0]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d20f      	bcs.n	8007a3e <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007a1e:	2200      	movs	r2, #0
 8007a20:	2100      	movs	r1, #0
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f001 f8cc 	bl	8008bc0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a30:	2300      	movs	r3, #0
 8007a32:	2200      	movs	r2, #0
 8007a34:	2100      	movs	r1, #0
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f001 fdd0 	bl	80095dc <USBD_LL_PrepareReceive>
 8007a3c:	e01c      	b.n	8007a78 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b03      	cmp	r3, #3
 8007a48:	d10f      	bne.n	8007a6a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a50:	68db      	ldr	r3, [r3, #12]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d009      	beq.n	8007a6a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007a6a:	2180      	movs	r1, #128	@ 0x80
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f001 fd0b 	bl	8009488 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f001 f8fa 	bl	8008c6c <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d03a      	beq.n	8007af8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f7ff fe30 	bl	80076e8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8007a90:	e032      	b.n	8007af8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007a92:	7afb      	ldrb	r3, [r7, #11]
 8007a94:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007a98:	b2db      	uxtb	r3, r3
 8007a9a:	4619      	mov	r1, r3
 8007a9c:	68f8      	ldr	r0, [r7, #12]
 8007a9e:	f000 f986 	bl	8007dae <USBD_CoreFindEP>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	2bff      	cmp	r3, #255	@ 0xff
 8007aaa:	d025      	beq.n	8007af8 <USBD_LL_DataInStage+0x16c>
 8007aac:	7dfb      	ldrb	r3, [r7, #23]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d122      	bne.n	8007af8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d11c      	bne.n	8007af8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007abe:	7dfa      	ldrb	r2, [r7, #23]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	32ae      	adds	r2, #174	@ 0xae
 8007ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d014      	beq.n	8007af8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8007ace:	7dfa      	ldrb	r2, [r7, #23]
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007ad6:	7dfa      	ldrb	r2, [r7, #23]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	32ae      	adds	r2, #174	@ 0xae
 8007adc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	7afa      	ldrb	r2, [r7, #11]
 8007ae4:	4611      	mov	r1, r2
 8007ae6:	68f8      	ldr	r0, [r7, #12]
 8007ae8:	4798      	blx	r3
 8007aea:	4603      	mov	r3, r0
 8007aec:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007aee:	7dbb      	ldrb	r3, [r7, #22]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d001      	beq.n	8007af8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8007af4:	7dbb      	ldrb	r3, [r7, #22]
 8007af6:	e000      	b.n	8007afa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	3718      	adds	r7, #24
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd80      	pop	{r7, pc}

08007b02 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b084      	sub	sp, #16
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2201      	movs	r2, #1
 8007b12:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2200      	movs	r2, #0
 8007b28:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d014      	beq.n	8007b68 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b44:	685b      	ldr	r3, [r3, #4]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d00e      	beq.n	8007b68 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007b50:	685b      	ldr	r3, [r3, #4]
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	6852      	ldr	r2, [r2, #4]
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	4611      	mov	r1, r2
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	4798      	blx	r3
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d001      	beq.n	8007b68 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007b64:	2303      	movs	r3, #3
 8007b66:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b68:	2340      	movs	r3, #64	@ 0x40
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f001 fc45 	bl	80093fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2240      	movs	r2, #64	@ 0x40
 8007b80:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007b84:	2340      	movs	r3, #64	@ 0x40
 8007b86:	2200      	movs	r2, #0
 8007b88:	2180      	movs	r1, #128	@ 0x80
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f001 fc37 	bl	80093fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2240      	movs	r2, #64	@ 0x40
 8007b9c:	841a      	strh	r2, [r3, #32]

  return ret;
 8007b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3710      	adds	r7, #16
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007ba8:	b480      	push	{r7}
 8007baa:	b083      	sub	sp, #12
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr

08007bc8 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007bc8:	b480      	push	{r7}
 8007bca:	b083      	sub	sp, #12
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	2b04      	cmp	r3, #4
 8007bda:	d006      	beq.n	8007bea <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	2204      	movs	r2, #4
 8007bee:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8007bf2:	2300      	movs	r3, #0
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	2b04      	cmp	r3, #4
 8007c12:	d106      	bne.n	8007c22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007c1a:	b2da      	uxtb	r2, r3
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b082      	sub	sp, #8
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b03      	cmp	r3, #3
 8007c42:	d110      	bne.n	8007c66 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d00b      	beq.n	8007c66 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c54:	69db      	ldr	r3, [r3, #28]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d005      	beq.n	8007c66 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c60:	69db      	ldr	r3, [r3, #28]
 8007c62:	6878      	ldr	r0, [r7, #4]
 8007c64:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007c66:	2300      	movs	r3, #0
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3708      	adds	r7, #8
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b082      	sub	sp, #8
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	32ae      	adds	r2, #174	@ 0xae
 8007c86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d101      	bne.n	8007c92 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007c8e:	2303      	movs	r3, #3
 8007c90:	e01c      	b.n	8007ccc <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d115      	bne.n	8007cca <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	32ae      	adds	r2, #174	@ 0xae
 8007ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00b      	beq.n	8007cca <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	32ae      	adds	r2, #174	@ 0xae
 8007cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cc0:	6a1b      	ldr	r3, [r3, #32]
 8007cc2:	78fa      	ldrb	r2, [r7, #3]
 8007cc4:	4611      	mov	r1, r2
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007cca:	2300      	movs	r3, #0
}
 8007ccc:	4618      	mov	r0, r3
 8007cce:	3708      	adds	r7, #8
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b082      	sub	sp, #8
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	460b      	mov	r3, r1
 8007cde:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	32ae      	adds	r2, #174	@ 0xae
 8007cea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d101      	bne.n	8007cf6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e01c      	b.n	8007d30 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b03      	cmp	r3, #3
 8007d00:	d115      	bne.n	8007d2e <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	32ae      	adds	r2, #174	@ 0xae
 8007d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d00b      	beq.n	8007d2e <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	32ae      	adds	r2, #174	@ 0xae
 8007d20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d26:	78fa      	ldrb	r2, [r7, #3]
 8007d28:	4611      	mov	r1, r2
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	b083      	sub	sp, #12
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007d40:	2300      	movs	r3, #0
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007d4e:	b580      	push	{r7, lr}
 8007d50:	b084      	sub	sp, #16
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007d56:	2300      	movs	r3, #0
 8007d58:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00e      	beq.n	8007d8a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	687a      	ldr	r2, [r7, #4]
 8007d76:	6852      	ldr	r2, [r2, #4]
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	4611      	mov	r1, r2
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007d86:	2303      	movs	r3, #3
 8007d88:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007d8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3710      	adds	r7, #16
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007da0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	370c      	adds	r7, #12
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b083      	sub	sp, #12
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
 8007db6:	460b      	mov	r3, r1
 8007db8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007dba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b086      	sub	sp, #24
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	460b      	mov	r3, r1
 8007dd2:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	885b      	ldrh	r3, [r3, #2]
 8007de4:	b29b      	uxth	r3, r3
 8007de6:	68fa      	ldr	r2, [r7, #12]
 8007de8:	7812      	ldrb	r2, [r2, #0]
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d91f      	bls.n	8007e2e <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	781b      	ldrb	r3, [r3, #0]
 8007df2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007df4:	e013      	b.n	8007e1e <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007df6:	f107 030a 	add.w	r3, r7, #10
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6978      	ldr	r0, [r7, #20]
 8007dfe:	f000 f81b 	bl	8007e38 <USBD_GetNextDesc>
 8007e02:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	785b      	ldrb	r3, [r3, #1]
 8007e08:	2b05      	cmp	r3, #5
 8007e0a:	d108      	bne.n	8007e1e <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	789b      	ldrb	r3, [r3, #2]
 8007e14:	78fa      	ldrb	r2, [r7, #3]
 8007e16:	429a      	cmp	r2, r3
 8007e18:	d008      	beq.n	8007e2c <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	885b      	ldrh	r3, [r3, #2]
 8007e22:	b29a      	uxth	r2, r3
 8007e24:	897b      	ldrh	r3, [r7, #10]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d8e5      	bhi.n	8007df6 <USBD_GetEpDesc+0x2e>
 8007e2a:	e000      	b.n	8007e2e <USBD_GetEpDesc+0x66>
          break;
 8007e2c:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007e2e:	693b      	ldr	r3, [r7, #16]
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3718      	adds	r7, #24
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	68fa      	ldr	r2, [r7, #12]
 8007e4c:	7812      	ldrb	r2, [r2, #0]
 8007e4e:	4413      	add	r3, r2
 8007e50:	b29a      	uxth	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4413      	add	r3, r2
 8007e60:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3714      	adds	r7, #20
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007e70:	b480      	push	{r7}
 8007e72:	b087      	sub	sp, #28
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	781b      	ldrb	r3, [r3, #0]
 8007e80:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	3301      	adds	r3, #1
 8007e86:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007e88:	697b      	ldr	r3, [r7, #20]
 8007e8a:	781b      	ldrb	r3, [r3, #0]
 8007e8c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007e8e:	8a3b      	ldrh	r3, [r7, #16]
 8007e90:	021b      	lsls	r3, r3, #8
 8007e92:	b21a      	sxth	r2, r3
 8007e94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007e98:	4313      	orrs	r3, r2
 8007e9a:	b21b      	sxth	r3, r3
 8007e9c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007e9e:	89fb      	ldrh	r3, [r7, #14]
}
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	371c      	adds	r7, #28
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b084      	sub	sp, #16
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
 8007eb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ec2:	2b40      	cmp	r3, #64	@ 0x40
 8007ec4:	d005      	beq.n	8007ed2 <USBD_StdDevReq+0x26>
 8007ec6:	2b40      	cmp	r3, #64	@ 0x40
 8007ec8:	d857      	bhi.n	8007f7a <USBD_StdDevReq+0xce>
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d00f      	beq.n	8007eee <USBD_StdDevReq+0x42>
 8007ece:	2b20      	cmp	r3, #32
 8007ed0:	d153      	bne.n	8007f7a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	32ae      	adds	r2, #174	@ 0xae
 8007edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ee0:	689b      	ldr	r3, [r3, #8]
 8007ee2:	6839      	ldr	r1, [r7, #0]
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
 8007ee8:	4603      	mov	r3, r0
 8007eea:	73fb      	strb	r3, [r7, #15]
      break;
 8007eec:	e04a      	b.n	8007f84 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	785b      	ldrb	r3, [r3, #1]
 8007ef2:	2b09      	cmp	r3, #9
 8007ef4:	d83b      	bhi.n	8007f6e <USBD_StdDevReq+0xc2>
 8007ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8007efc <USBD_StdDevReq+0x50>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f51 	.word	0x08007f51
 8007f00:	08007f65 	.word	0x08007f65
 8007f04:	08007f6f 	.word	0x08007f6f
 8007f08:	08007f5b 	.word	0x08007f5b
 8007f0c:	08007f6f 	.word	0x08007f6f
 8007f10:	08007f2f 	.word	0x08007f2f
 8007f14:	08007f25 	.word	0x08007f25
 8007f18:	08007f6f 	.word	0x08007f6f
 8007f1c:	08007f47 	.word	0x08007f47
 8007f20:	08007f39 	.word	0x08007f39
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007f24:	6839      	ldr	r1, [r7, #0]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f000 fa3e 	bl	80083a8 <USBD_GetDescriptor>
          break;
 8007f2c:	e024      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 fbcd 	bl	80086d0 <USBD_SetAddress>
          break;
 8007f36:	e01f      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007f38:	6839      	ldr	r1, [r7, #0]
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f000 fc0c 	bl	8008758 <USBD_SetConfig>
 8007f40:	4603      	mov	r3, r0
 8007f42:	73fb      	strb	r3, [r7, #15]
          break;
 8007f44:	e018      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007f46:	6839      	ldr	r1, [r7, #0]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 fcaf 	bl	80088ac <USBD_GetConfig>
          break;
 8007f4e:	e013      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007f50:	6839      	ldr	r1, [r7, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 fce0 	bl	8008918 <USBD_GetStatus>
          break;
 8007f58:	e00e      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007f5a:	6839      	ldr	r1, [r7, #0]
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f000 fd0f 	bl	8008980 <USBD_SetFeature>
          break;
 8007f62:	e009      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007f64:	6839      	ldr	r1, [r7, #0]
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f000 fd33 	bl	80089d2 <USBD_ClrFeature>
          break;
 8007f6c:	e004      	b.n	8007f78 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fd8a 	bl	8008a8a <USBD_CtlError>
          break;
 8007f76:	bf00      	nop
      }
      break;
 8007f78:	e004      	b.n	8007f84 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 fd84 	bl	8008a8a <USBD_CtlError>
      break;
 8007f82:	bf00      	nop
  }

  return ret;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f86:	4618      	mov	r0, r3
 8007f88:	3710      	adds	r7, #16
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	bd80      	pop	{r7, pc}
 8007f8e:	bf00      	nop

08007f90 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007fa6:	2b40      	cmp	r3, #64	@ 0x40
 8007fa8:	d005      	beq.n	8007fb6 <USBD_StdItfReq+0x26>
 8007faa:	2b40      	cmp	r3, #64	@ 0x40
 8007fac:	d852      	bhi.n	8008054 <USBD_StdItfReq+0xc4>
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d001      	beq.n	8007fb6 <USBD_StdItfReq+0x26>
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d14e      	bne.n	8008054 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	2b02      	cmp	r3, #2
 8007fc2:	d840      	bhi.n	8008046 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	889b      	ldrh	r3, [r3, #4]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	2b01      	cmp	r3, #1
 8007fcc:	d836      	bhi.n	800803c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	889b      	ldrh	r3, [r3, #4]
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	4619      	mov	r1, r3
 8007fd6:	6878      	ldr	r0, [r7, #4]
 8007fd8:	f7ff fedc 	bl	8007d94 <USBD_CoreFindIF>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007fe0:	7bbb      	ldrb	r3, [r7, #14]
 8007fe2:	2bff      	cmp	r3, #255	@ 0xff
 8007fe4:	d01d      	beq.n	8008022 <USBD_StdItfReq+0x92>
 8007fe6:	7bbb      	ldrb	r3, [r7, #14]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d11a      	bne.n	8008022 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007fec:	7bba      	ldrb	r2, [r7, #14]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	32ae      	adds	r2, #174	@ 0xae
 8007ff2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ff6:	689b      	ldr	r3, [r3, #8]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d00f      	beq.n	800801c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007ffc:	7bba      	ldrb	r2, [r7, #14]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008004:	7bba      	ldrb	r2, [r7, #14]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	32ae      	adds	r2, #174	@ 0xae
 800800a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800800e:	689b      	ldr	r3, [r3, #8]
 8008010:	6839      	ldr	r1, [r7, #0]
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	4798      	blx	r3
 8008016:	4603      	mov	r3, r0
 8008018:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800801a:	e004      	b.n	8008026 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800801c:	2303      	movs	r3, #3
 800801e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008020:	e001      	b.n	8008026 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008022:	2303      	movs	r3, #3
 8008024:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008026:	683b      	ldr	r3, [r7, #0]
 8008028:	88db      	ldrh	r3, [r3, #6]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d110      	bne.n	8008050 <USBD_StdItfReq+0xc0>
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10d      	bne.n	8008050 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008034:	6878      	ldr	r0, [r7, #4]
 8008036:	f000 fe06 	bl	8008c46 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800803a:	e009      	b.n	8008050 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800803c:	6839      	ldr	r1, [r7, #0]
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 fd23 	bl	8008a8a <USBD_CtlError>
          break;
 8008044:	e004      	b.n	8008050 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fd1e 	bl	8008a8a <USBD_CtlError>
          break;
 800804e:	e000      	b.n	8008052 <USBD_StdItfReq+0xc2>
          break;
 8008050:	bf00      	nop
      }
      break;
 8008052:	e004      	b.n	800805e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008054:	6839      	ldr	r1, [r7, #0]
 8008056:	6878      	ldr	r0, [r7, #4]
 8008058:	f000 fd17 	bl	8008a8a <USBD_CtlError>
      break;
 800805c:	bf00      	nop
  }

  return ret;
 800805e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008060:	4618      	mov	r0, r3
 8008062:	3710      	adds	r7, #16
 8008064:	46bd      	mov	sp, r7
 8008066:	bd80      	pop	{r7, pc}

08008068 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008068:	b580      	push	{r7, lr}
 800806a:	b084      	sub	sp, #16
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]
 8008070:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008072:	2300      	movs	r3, #0
 8008074:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	889b      	ldrh	r3, [r3, #4]
 800807a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008084:	2b40      	cmp	r3, #64	@ 0x40
 8008086:	d007      	beq.n	8008098 <USBD_StdEPReq+0x30>
 8008088:	2b40      	cmp	r3, #64	@ 0x40
 800808a:	f200 8181 	bhi.w	8008390 <USBD_StdEPReq+0x328>
 800808e:	2b00      	cmp	r3, #0
 8008090:	d02a      	beq.n	80080e8 <USBD_StdEPReq+0x80>
 8008092:	2b20      	cmp	r3, #32
 8008094:	f040 817c 	bne.w	8008390 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8008098:	7bbb      	ldrb	r3, [r7, #14]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff fe86 	bl	8007dae <USBD_CoreFindEP>
 80080a2:	4603      	mov	r3, r0
 80080a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80080a6:	7b7b      	ldrb	r3, [r7, #13]
 80080a8:	2bff      	cmp	r3, #255	@ 0xff
 80080aa:	f000 8176 	beq.w	800839a <USBD_StdEPReq+0x332>
 80080ae:	7b7b      	ldrb	r3, [r7, #13]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	f040 8172 	bne.w	800839a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 80080b6:	7b7a      	ldrb	r2, [r7, #13]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80080be:	7b7a      	ldrb	r2, [r7, #13]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	32ae      	adds	r2, #174	@ 0xae
 80080c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 8165 	beq.w	800839a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80080d0:	7b7a      	ldrb	r2, [r7, #13]
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	32ae      	adds	r2, #174	@ 0xae
 80080d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	6839      	ldr	r1, [r7, #0]
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
 80080e2:	4603      	mov	r3, r0
 80080e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80080e6:	e158      	b.n	800839a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	785b      	ldrb	r3, [r3, #1]
 80080ec:	2b03      	cmp	r3, #3
 80080ee:	d008      	beq.n	8008102 <USBD_StdEPReq+0x9a>
 80080f0:	2b03      	cmp	r3, #3
 80080f2:	f300 8147 	bgt.w	8008384 <USBD_StdEPReq+0x31c>
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	f000 809b 	beq.w	8008232 <USBD_StdEPReq+0x1ca>
 80080fc:	2b01      	cmp	r3, #1
 80080fe:	d03c      	beq.n	800817a <USBD_StdEPReq+0x112>
 8008100:	e140      	b.n	8008384 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008108:	b2db      	uxtb	r3, r3
 800810a:	2b02      	cmp	r3, #2
 800810c:	d002      	beq.n	8008114 <USBD_StdEPReq+0xac>
 800810e:	2b03      	cmp	r3, #3
 8008110:	d016      	beq.n	8008140 <USBD_StdEPReq+0xd8>
 8008112:	e02c      	b.n	800816e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008114:	7bbb      	ldrb	r3, [r7, #14]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d00d      	beq.n	8008136 <USBD_StdEPReq+0xce>
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	2b80      	cmp	r3, #128	@ 0x80
 800811e:	d00a      	beq.n	8008136 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008120:	7bbb      	ldrb	r3, [r7, #14]
 8008122:	4619      	mov	r1, r3
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f001 f9af 	bl	8009488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800812a:	2180      	movs	r1, #128	@ 0x80
 800812c:	6878      	ldr	r0, [r7, #4]
 800812e:	f001 f9ab 	bl	8009488 <USBD_LL_StallEP>
 8008132:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008134:	e020      	b.n	8008178 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8008136:	6839      	ldr	r1, [r7, #0]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f000 fca6 	bl	8008a8a <USBD_CtlError>
              break;
 800813e:	e01b      	b.n	8008178 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	885b      	ldrh	r3, [r3, #2]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d10e      	bne.n	8008166 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008148:	7bbb      	ldrb	r3, [r7, #14]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d00b      	beq.n	8008166 <USBD_StdEPReq+0xfe>
 800814e:	7bbb      	ldrb	r3, [r7, #14]
 8008150:	2b80      	cmp	r3, #128	@ 0x80
 8008152:	d008      	beq.n	8008166 <USBD_StdEPReq+0xfe>
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	88db      	ldrh	r3, [r3, #6]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d104      	bne.n	8008166 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800815c:	7bbb      	ldrb	r3, [r7, #14]
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f001 f991 	bl	8009488 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 fd6d 	bl	8008c46 <USBD_CtlSendStatus>

              break;
 800816c:	e004      	b.n	8008178 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800816e:	6839      	ldr	r1, [r7, #0]
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 fc8a 	bl	8008a8a <USBD_CtlError>
              break;
 8008176:	bf00      	nop
          }
          break;
 8008178:	e109      	b.n	800838e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008180:	b2db      	uxtb	r3, r3
 8008182:	2b02      	cmp	r3, #2
 8008184:	d002      	beq.n	800818c <USBD_StdEPReq+0x124>
 8008186:	2b03      	cmp	r3, #3
 8008188:	d016      	beq.n	80081b8 <USBD_StdEPReq+0x150>
 800818a:	e04b      	b.n	8008224 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800818c:	7bbb      	ldrb	r3, [r7, #14]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d00d      	beq.n	80081ae <USBD_StdEPReq+0x146>
 8008192:	7bbb      	ldrb	r3, [r7, #14]
 8008194:	2b80      	cmp	r3, #128	@ 0x80
 8008196:	d00a      	beq.n	80081ae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008198:	7bbb      	ldrb	r3, [r7, #14]
 800819a:	4619      	mov	r1, r3
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f001 f973 	bl	8009488 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80081a2:	2180      	movs	r1, #128	@ 0x80
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f001 f96f 	bl	8009488 <USBD_LL_StallEP>
 80081aa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80081ac:	e040      	b.n	8008230 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80081ae:	6839      	ldr	r1, [r7, #0]
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 fc6a 	bl	8008a8a <USBD_CtlError>
              break;
 80081b6:	e03b      	b.n	8008230 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	885b      	ldrh	r3, [r3, #2]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d136      	bne.n	800822e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80081c0:	7bbb      	ldrb	r3, [r7, #14]
 80081c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d004      	beq.n	80081d4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80081ca:	7bbb      	ldrb	r3, [r7, #14]
 80081cc:	4619      	mov	r1, r3
 80081ce:	6878      	ldr	r0, [r7, #4]
 80081d0:	f001 f979 	bl	80094c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f000 fd36 	bl	8008c46 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80081da:	7bbb      	ldrb	r3, [r7, #14]
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7ff fde5 	bl	8007dae <USBD_CoreFindEP>
 80081e4:	4603      	mov	r3, r0
 80081e6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80081e8:	7b7b      	ldrb	r3, [r7, #13]
 80081ea:	2bff      	cmp	r3, #255	@ 0xff
 80081ec:	d01f      	beq.n	800822e <USBD_StdEPReq+0x1c6>
 80081ee:	7b7b      	ldrb	r3, [r7, #13]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11c      	bne.n	800822e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80081f4:	7b7a      	ldrb	r2, [r7, #13]
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80081fc:	7b7a      	ldrb	r2, [r7, #13]
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	32ae      	adds	r2, #174	@ 0xae
 8008202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008206:	689b      	ldr	r3, [r3, #8]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d010      	beq.n	800822e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800820c:	7b7a      	ldrb	r2, [r7, #13]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	32ae      	adds	r2, #174	@ 0xae
 8008212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008216:	689b      	ldr	r3, [r3, #8]
 8008218:	6839      	ldr	r1, [r7, #0]
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	4798      	blx	r3
 800821e:	4603      	mov	r3, r0
 8008220:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008222:	e004      	b.n	800822e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008224:	6839      	ldr	r1, [r7, #0]
 8008226:	6878      	ldr	r0, [r7, #4]
 8008228:	f000 fc2f 	bl	8008a8a <USBD_CtlError>
              break;
 800822c:	e000      	b.n	8008230 <USBD_StdEPReq+0x1c8>
              break;
 800822e:	bf00      	nop
          }
          break;
 8008230:	e0ad      	b.n	800838e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b02      	cmp	r3, #2
 800823c:	d002      	beq.n	8008244 <USBD_StdEPReq+0x1dc>
 800823e:	2b03      	cmp	r3, #3
 8008240:	d033      	beq.n	80082aa <USBD_StdEPReq+0x242>
 8008242:	e099      	b.n	8008378 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008244:	7bbb      	ldrb	r3, [r7, #14]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d007      	beq.n	800825a <USBD_StdEPReq+0x1f2>
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b80      	cmp	r3, #128	@ 0x80
 800824e:	d004      	beq.n	800825a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fc19 	bl	8008a8a <USBD_CtlError>
                break;
 8008258:	e093      	b.n	8008382 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800825a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800825e:	2b00      	cmp	r3, #0
 8008260:	da0b      	bge.n	800827a <USBD_StdEPReq+0x212>
 8008262:	7bbb      	ldrb	r3, [r7, #14]
 8008264:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008268:	4613      	mov	r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	4413      	add	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	3310      	adds	r3, #16
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	4413      	add	r3, r2
 8008276:	3304      	adds	r3, #4
 8008278:	e00b      	b.n	8008292 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800827a:	7bbb      	ldrb	r3, [r7, #14]
 800827c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008280:	4613      	mov	r3, r2
 8008282:	009b      	lsls	r3, r3, #2
 8008284:	4413      	add	r3, r2
 8008286:	009b      	lsls	r3, r3, #2
 8008288:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800828c:	687a      	ldr	r2, [r7, #4]
 800828e:	4413      	add	r3, r2
 8008290:	3304      	adds	r3, #4
 8008292:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	2200      	movs	r2, #0
 8008298:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	330e      	adds	r3, #14
 800829e:	2202      	movs	r2, #2
 80082a0:	4619      	mov	r1, r3
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fc6e 	bl	8008b84 <USBD_CtlSendData>
              break;
 80082a8:	e06b      	b.n	8008382 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80082aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	da11      	bge.n	80082d6 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80082b2:	7bbb      	ldrb	r3, [r7, #14]
 80082b4:	f003 020f 	and.w	r2, r3, #15
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	3323      	adds	r3, #35	@ 0x23
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d117      	bne.n	80082fc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 fbdb 	bl	8008a8a <USBD_CtlError>
                  break;
 80082d4:	e055      	b.n	8008382 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80082d6:	7bbb      	ldrb	r3, [r7, #14]
 80082d8:	f003 020f 	and.w	r2, r3, #15
 80082dc:	6879      	ldr	r1, [r7, #4]
 80082de:	4613      	mov	r3, r2
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4413      	add	r3, r2
 80082e4:	009b      	lsls	r3, r3, #2
 80082e6:	440b      	add	r3, r1
 80082e8:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	d104      	bne.n	80082fc <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 80082f2:	6839      	ldr	r1, [r7, #0]
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f000 fbc8 	bl	8008a8a <USBD_CtlError>
                  break;
 80082fa:	e042      	b.n	8008382 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80082fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008300:	2b00      	cmp	r3, #0
 8008302:	da0b      	bge.n	800831c <USBD_StdEPReq+0x2b4>
 8008304:	7bbb      	ldrb	r3, [r7, #14]
 8008306:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800830a:	4613      	mov	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4413      	add	r3, r2
 8008310:	009b      	lsls	r3, r3, #2
 8008312:	3310      	adds	r3, #16
 8008314:	687a      	ldr	r2, [r7, #4]
 8008316:	4413      	add	r3, r2
 8008318:	3304      	adds	r3, #4
 800831a:	e00b      	b.n	8008334 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800831c:	7bbb      	ldrb	r3, [r7, #14]
 800831e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008322:	4613      	mov	r3, r2
 8008324:	009b      	lsls	r3, r3, #2
 8008326:	4413      	add	r3, r2
 8008328:	009b      	lsls	r3, r3, #2
 800832a:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	4413      	add	r3, r2
 8008332:	3304      	adds	r3, #4
 8008334:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	2b00      	cmp	r3, #0
 800833a:	d002      	beq.n	8008342 <USBD_StdEPReq+0x2da>
 800833c:	7bbb      	ldrb	r3, [r7, #14]
 800833e:	2b80      	cmp	r3, #128	@ 0x80
 8008340:	d103      	bne.n	800834a <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 8008342:	68bb      	ldr	r3, [r7, #8]
 8008344:	2200      	movs	r2, #0
 8008346:	739a      	strb	r2, [r3, #14]
 8008348:	e00e      	b.n	8008368 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800834a:	7bbb      	ldrb	r3, [r7, #14]
 800834c:	4619      	mov	r1, r3
 800834e:	6878      	ldr	r0, [r7, #4]
 8008350:	f001 f8d8 	bl	8009504 <USBD_LL_IsStallEP>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d003      	beq.n	8008362 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	2201      	movs	r2, #1
 800835e:	739a      	strb	r2, [r3, #14]
 8008360:	e002      	b.n	8008368 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2200      	movs	r2, #0
 8008366:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	330e      	adds	r3, #14
 800836c:	2202      	movs	r2, #2
 800836e:	4619      	mov	r1, r3
 8008370:	6878      	ldr	r0, [r7, #4]
 8008372:	f000 fc07 	bl	8008b84 <USBD_CtlSendData>
              break;
 8008376:	e004      	b.n	8008382 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fb85 	bl	8008a8a <USBD_CtlError>
              break;
 8008380:	bf00      	nop
          }
          break;
 8008382:	e004      	b.n	800838e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8008384:	6839      	ldr	r1, [r7, #0]
 8008386:	6878      	ldr	r0, [r7, #4]
 8008388:	f000 fb7f 	bl	8008a8a <USBD_CtlError>
          break;
 800838c:	bf00      	nop
      }
      break;
 800838e:	e005      	b.n	800839c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8008390:	6839      	ldr	r1, [r7, #0]
 8008392:	6878      	ldr	r0, [r7, #4]
 8008394:	f000 fb79 	bl	8008a8a <USBD_CtlError>
      break;
 8008398:	e000      	b.n	800839c <USBD_StdEPReq+0x334>
      break;
 800839a:	bf00      	nop
  }

  return ret;
 800839c:	7bfb      	ldrb	r3, [r7, #15]
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}
	...

080083a8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083a8:	b580      	push	{r7, lr}
 80083aa:	b084      	sub	sp, #16
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80083b2:	2300      	movs	r3, #0
 80083b4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80083ba:	2300      	movs	r3, #0
 80083bc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	885b      	ldrh	r3, [r3, #2]
 80083c2:	0a1b      	lsrs	r3, r3, #8
 80083c4:	b29b      	uxth	r3, r3
 80083c6:	3b01      	subs	r3, #1
 80083c8:	2b0e      	cmp	r3, #14
 80083ca:	f200 8152 	bhi.w	8008672 <USBD_GetDescriptor+0x2ca>
 80083ce:	a201      	add	r2, pc, #4	@ (adr r2, 80083d4 <USBD_GetDescriptor+0x2c>)
 80083d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d4:	08008445 	.word	0x08008445
 80083d8:	0800845d 	.word	0x0800845d
 80083dc:	0800849d 	.word	0x0800849d
 80083e0:	08008673 	.word	0x08008673
 80083e4:	08008673 	.word	0x08008673
 80083e8:	08008613 	.word	0x08008613
 80083ec:	0800863f 	.word	0x0800863f
 80083f0:	08008673 	.word	0x08008673
 80083f4:	08008673 	.word	0x08008673
 80083f8:	08008673 	.word	0x08008673
 80083fc:	08008673 	.word	0x08008673
 8008400:	08008673 	.word	0x08008673
 8008404:	08008673 	.word	0x08008673
 8008408:	08008673 	.word	0x08008673
 800840c:	08008411 	.word	0x08008411
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008416:	69db      	ldr	r3, [r3, #28]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d00b      	beq.n	8008434 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008422:	69db      	ldr	r3, [r3, #28]
 8008424:	687a      	ldr	r2, [r7, #4]
 8008426:	7c12      	ldrb	r2, [r2, #16]
 8008428:	f107 0108 	add.w	r1, r7, #8
 800842c:	4610      	mov	r0, r2
 800842e:	4798      	blx	r3
 8008430:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008432:	e126      	b.n	8008682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008434:	6839      	ldr	r1, [r7, #0]
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 fb27 	bl	8008a8a <USBD_CtlError>
        err++;
 800843c:	7afb      	ldrb	r3, [r7, #11]
 800843e:	3301      	adds	r3, #1
 8008440:	72fb      	strb	r3, [r7, #11]
      break;
 8008442:	e11e      	b.n	8008682 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	687a      	ldr	r2, [r7, #4]
 800844e:	7c12      	ldrb	r2, [r2, #16]
 8008450:	f107 0108 	add.w	r1, r7, #8
 8008454:	4610      	mov	r0, r2
 8008456:	4798      	blx	r3
 8008458:	60f8      	str	r0, [r7, #12]
      break;
 800845a:	e112      	b.n	8008682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	7c1b      	ldrb	r3, [r3, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	d10d      	bne.n	8008480 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800846a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846c:	f107 0208 	add.w	r2, r7, #8
 8008470:	4610      	mov	r0, r2
 8008472:	4798      	blx	r3
 8008474:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	3301      	adds	r3, #1
 800847a:	2202      	movs	r2, #2
 800847c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800847e:	e100      	b.n	8008682 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	f107 0208 	add.w	r2, r7, #8
 800848c:	4610      	mov	r0, r2
 800848e:	4798      	blx	r3
 8008490:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3301      	adds	r3, #1
 8008496:	2202      	movs	r2, #2
 8008498:	701a      	strb	r2, [r3, #0]
      break;
 800849a:	e0f2      	b.n	8008682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	885b      	ldrh	r3, [r3, #2]
 80084a0:	b2db      	uxtb	r3, r3
 80084a2:	2b05      	cmp	r3, #5
 80084a4:	f200 80ac 	bhi.w	8008600 <USBD_GetDescriptor+0x258>
 80084a8:	a201      	add	r2, pc, #4	@ (adr r2, 80084b0 <USBD_GetDescriptor+0x108>)
 80084aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084ae:	bf00      	nop
 80084b0:	080084c9 	.word	0x080084c9
 80084b4:	080084fd 	.word	0x080084fd
 80084b8:	08008531 	.word	0x08008531
 80084bc:	08008565 	.word	0x08008565
 80084c0:	08008599 	.word	0x08008599
 80084c4:	080085cd 	.word	0x080085cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00b      	beq.n	80084ec <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	687a      	ldr	r2, [r7, #4]
 80084de:	7c12      	ldrb	r2, [r2, #16]
 80084e0:	f107 0108 	add.w	r1, r7, #8
 80084e4:	4610      	mov	r0, r2
 80084e6:	4798      	blx	r3
 80084e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80084ea:	e091      	b.n	8008610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80084ec:	6839      	ldr	r1, [r7, #0]
 80084ee:	6878      	ldr	r0, [r7, #4]
 80084f0:	f000 facb 	bl	8008a8a <USBD_CtlError>
            err++;
 80084f4:	7afb      	ldrb	r3, [r7, #11]
 80084f6:	3301      	adds	r3, #1
 80084f8:	72fb      	strb	r3, [r7, #11]
          break;
 80084fa:	e089      	b.n	8008610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00b      	beq.n	8008520 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	687a      	ldr	r2, [r7, #4]
 8008512:	7c12      	ldrb	r2, [r2, #16]
 8008514:	f107 0108 	add.w	r1, r7, #8
 8008518:	4610      	mov	r0, r2
 800851a:	4798      	blx	r3
 800851c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800851e:	e077      	b.n	8008610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008520:	6839      	ldr	r1, [r7, #0]
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f000 fab1 	bl	8008a8a <USBD_CtlError>
            err++;
 8008528:	7afb      	ldrb	r3, [r7, #11]
 800852a:	3301      	adds	r3, #1
 800852c:	72fb      	strb	r3, [r7, #11]
          break;
 800852e:	e06f      	b.n	8008610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008536:	68db      	ldr	r3, [r3, #12]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d00b      	beq.n	8008554 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008542:	68db      	ldr	r3, [r3, #12]
 8008544:	687a      	ldr	r2, [r7, #4]
 8008546:	7c12      	ldrb	r2, [r2, #16]
 8008548:	f107 0108 	add.w	r1, r7, #8
 800854c:	4610      	mov	r0, r2
 800854e:	4798      	blx	r3
 8008550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008552:	e05d      	b.n	8008610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008554:	6839      	ldr	r1, [r7, #0]
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa97 	bl	8008a8a <USBD_CtlError>
            err++;
 800855c:	7afb      	ldrb	r3, [r7, #11]
 800855e:	3301      	adds	r3, #1
 8008560:	72fb      	strb	r3, [r7, #11]
          break;
 8008562:	e055      	b.n	8008610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8008576:	691b      	ldr	r3, [r3, #16]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	7c12      	ldrb	r2, [r2, #16]
 800857c:	f107 0108 	add.w	r1, r7, #8
 8008580:	4610      	mov	r0, r2
 8008582:	4798      	blx	r3
 8008584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008586:	e043      	b.n	8008610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8008588:	6839      	ldr	r1, [r7, #0]
 800858a:	6878      	ldr	r0, [r7, #4]
 800858c:	f000 fa7d 	bl	8008a8a <USBD_CtlError>
            err++;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	3301      	adds	r3, #1
 8008594:	72fb      	strb	r3, [r7, #11]
          break;
 8008596:	e03b      	b.n	8008610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800859e:	695b      	ldr	r3, [r3, #20]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d00b      	beq.n	80085bc <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085aa:	695b      	ldr	r3, [r3, #20]
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	7c12      	ldrb	r2, [r2, #16]
 80085b0:	f107 0108 	add.w	r1, r7, #8
 80085b4:	4610      	mov	r0, r2
 80085b6:	4798      	blx	r3
 80085b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ba:	e029      	b.n	8008610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085bc:	6839      	ldr	r1, [r7, #0]
 80085be:	6878      	ldr	r0, [r7, #4]
 80085c0:	f000 fa63 	bl	8008a8a <USBD_CtlError>
            err++;
 80085c4:	7afb      	ldrb	r3, [r7, #11]
 80085c6:	3301      	adds	r3, #1
 80085c8:	72fb      	strb	r3, [r7, #11]
          break;
 80085ca:	e021      	b.n	8008610 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	687a      	ldr	r2, [r7, #4]
 80085e2:	7c12      	ldrb	r2, [r2, #16]
 80085e4:	f107 0108 	add.w	r1, r7, #8
 80085e8:	4610      	mov	r0, r2
 80085ea:	4798      	blx	r3
 80085ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80085ee:	e00f      	b.n	8008610 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fa49 	bl	8008a8a <USBD_CtlError>
            err++;
 80085f8:	7afb      	ldrb	r3, [r7, #11]
 80085fa:	3301      	adds	r3, #1
 80085fc:	72fb      	strb	r3, [r7, #11]
          break;
 80085fe:	e007      	b.n	8008610 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fa41 	bl	8008a8a <USBD_CtlError>
          err++;
 8008608:	7afb      	ldrb	r3, [r7, #11]
 800860a:	3301      	adds	r3, #1
 800860c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800860e:	bf00      	nop
      }
      break;
 8008610:	e037      	b.n	8008682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	7c1b      	ldrb	r3, [r3, #16]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d109      	bne.n	800862e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008620:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008622:	f107 0208 	add.w	r2, r7, #8
 8008626:	4610      	mov	r0, r2
 8008628:	4798      	blx	r3
 800862a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800862c:	e029      	b.n	8008682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800862e:	6839      	ldr	r1, [r7, #0]
 8008630:	6878      	ldr	r0, [r7, #4]
 8008632:	f000 fa2a 	bl	8008a8a <USBD_CtlError>
        err++;
 8008636:	7afb      	ldrb	r3, [r7, #11]
 8008638:	3301      	adds	r3, #1
 800863a:	72fb      	strb	r3, [r7, #11]
      break;
 800863c:	e021      	b.n	8008682 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	7c1b      	ldrb	r3, [r3, #16]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800864c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800864e:	f107 0208 	add.w	r2, r7, #8
 8008652:	4610      	mov	r0, r2
 8008654:	4798      	blx	r3
 8008656:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3301      	adds	r3, #1
 800865c:	2207      	movs	r2, #7
 800865e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008660:	e00f      	b.n	8008682 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 fa10 	bl	8008a8a <USBD_CtlError>
        err++;
 800866a:	7afb      	ldrb	r3, [r7, #11]
 800866c:	3301      	adds	r3, #1
 800866e:	72fb      	strb	r3, [r7, #11]
      break;
 8008670:	e007      	b.n	8008682 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8008672:	6839      	ldr	r1, [r7, #0]
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fa08 	bl	8008a8a <USBD_CtlError>
      err++;
 800867a:	7afb      	ldrb	r3, [r7, #11]
 800867c:	3301      	adds	r3, #1
 800867e:	72fb      	strb	r3, [r7, #11]
      break;
 8008680:	bf00      	nop
  }

  if (err != 0U)
 8008682:	7afb      	ldrb	r3, [r7, #11]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d11e      	bne.n	80086c6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	88db      	ldrh	r3, [r3, #6]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d016      	beq.n	80086be <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8008690:	893b      	ldrh	r3, [r7, #8]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d00e      	beq.n	80086b4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	88da      	ldrh	r2, [r3, #6]
 800869a:	893b      	ldrh	r3, [r7, #8]
 800869c:	4293      	cmp	r3, r2
 800869e:	bf28      	it	cs
 80086a0:	4613      	movcs	r3, r2
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80086a6:	893b      	ldrh	r3, [r7, #8]
 80086a8:	461a      	mov	r2, r3
 80086aa:	68f9      	ldr	r1, [r7, #12]
 80086ac:	6878      	ldr	r0, [r7, #4]
 80086ae:	f000 fa69 	bl	8008b84 <USBD_CtlSendData>
 80086b2:	e009      	b.n	80086c8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80086b4:	6839      	ldr	r1, [r7, #0]
 80086b6:	6878      	ldr	r0, [r7, #4]
 80086b8:	f000 f9e7 	bl	8008a8a <USBD_CtlError>
 80086bc:	e004      	b.n	80086c8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f000 fac1 	bl	8008c46 <USBD_CtlSendStatus>
 80086c4:	e000      	b.n	80086c8 <USBD_GetDescriptor+0x320>
    return;
 80086c6:	bf00      	nop
  }
}
 80086c8:	3710      	adds	r7, #16
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}
 80086ce:	bf00      	nop

080086d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b084      	sub	sp, #16
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
 80086d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	889b      	ldrh	r3, [r3, #4]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d131      	bne.n	8008746 <USBD_SetAddress+0x76>
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	88db      	ldrh	r3, [r3, #6]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d12d      	bne.n	8008746 <USBD_SetAddress+0x76>
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	885b      	ldrh	r3, [r3, #2]
 80086ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80086f0:	d829      	bhi.n	8008746 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	885b      	ldrh	r3, [r3, #2]
 80086f6:	b2db      	uxtb	r3, r3
 80086f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008704:	b2db      	uxtb	r3, r3
 8008706:	2b03      	cmp	r3, #3
 8008708:	d104      	bne.n	8008714 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800870a:	6839      	ldr	r1, [r7, #0]
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 f9bc 	bl	8008a8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008712:	e01d      	b.n	8008750 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	7bfa      	ldrb	r2, [r7, #15]
 8008718:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800871c:	7bfb      	ldrb	r3, [r7, #15]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 ff1b 	bl	800955c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f000 fa8d 	bl	8008c46 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800872c:	7bfb      	ldrb	r3, [r7, #15]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d004      	beq.n	800873c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2202      	movs	r2, #2
 8008736:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800873a:	e009      	b.n	8008750 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2201      	movs	r2, #1
 8008740:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008744:	e004      	b.n	8008750 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008746:	6839      	ldr	r1, [r7, #0]
 8008748:	6878      	ldr	r0, [r7, #4]
 800874a:	f000 f99e 	bl	8008a8a <USBD_CtlError>
  }
}
 800874e:	bf00      	nop
 8008750:	bf00      	nop
 8008752:	3710      	adds	r7, #16
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008762:	2300      	movs	r3, #0
 8008764:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	885b      	ldrh	r3, [r3, #2]
 800876a:	b2da      	uxtb	r2, r3
 800876c:	4b4e      	ldr	r3, [pc, #312]	@ (80088a8 <USBD_SetConfig+0x150>)
 800876e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008770:	4b4d      	ldr	r3, [pc, #308]	@ (80088a8 <USBD_SetConfig+0x150>)
 8008772:	781b      	ldrb	r3, [r3, #0]
 8008774:	2b01      	cmp	r3, #1
 8008776:	d905      	bls.n	8008784 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f985 	bl	8008a8a <USBD_CtlError>
    return USBD_FAIL;
 8008780:	2303      	movs	r3, #3
 8008782:	e08c      	b.n	800889e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b02      	cmp	r3, #2
 800878e:	d002      	beq.n	8008796 <USBD_SetConfig+0x3e>
 8008790:	2b03      	cmp	r3, #3
 8008792:	d029      	beq.n	80087e8 <USBD_SetConfig+0x90>
 8008794:	e075      	b.n	8008882 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008796:	4b44      	ldr	r3, [pc, #272]	@ (80088a8 <USBD_SetConfig+0x150>)
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d020      	beq.n	80087e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800879e:	4b42      	ldr	r3, [pc, #264]	@ (80088a8 <USBD_SetConfig+0x150>)
 80087a0:	781b      	ldrb	r3, [r3, #0]
 80087a2:	461a      	mov	r2, r3
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80087a8:	4b3f      	ldr	r3, [pc, #252]	@ (80088a8 <USBD_SetConfig+0x150>)
 80087aa:	781b      	ldrb	r3, [r3, #0]
 80087ac:	4619      	mov	r1, r3
 80087ae:	6878      	ldr	r0, [r7, #4]
 80087b0:	f7fe ffa5 	bl	80076fe <USBD_SetClassConfig>
 80087b4:	4603      	mov	r3, r0
 80087b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80087b8:	7bfb      	ldrb	r3, [r7, #15]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d008      	beq.n	80087d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80087be:	6839      	ldr	r1, [r7, #0]
 80087c0:	6878      	ldr	r0, [r7, #4]
 80087c2:	f000 f962 	bl	8008a8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2202      	movs	r2, #2
 80087ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80087ce:	e065      	b.n	800889c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 fa38 	bl	8008c46 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2203      	movs	r2, #3
 80087da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80087de:	e05d      	b.n	800889c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80087e0:	6878      	ldr	r0, [r7, #4]
 80087e2:	f000 fa30 	bl	8008c46 <USBD_CtlSendStatus>
      break;
 80087e6:	e059      	b.n	800889c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80087e8:	4b2f      	ldr	r3, [pc, #188]	@ (80088a8 <USBD_SetConfig+0x150>)
 80087ea:	781b      	ldrb	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d112      	bne.n	8008816 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	2202      	movs	r2, #2
 80087f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80087f8:	4b2b      	ldr	r3, [pc, #172]	@ (80088a8 <USBD_SetConfig+0x150>)
 80087fa:	781b      	ldrb	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008802:	4b29      	ldr	r3, [pc, #164]	@ (80088a8 <USBD_SetConfig+0x150>)
 8008804:	781b      	ldrb	r3, [r3, #0]
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fe ff94 	bl	8007736 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa19 	bl	8008c46 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008814:	e042      	b.n	800889c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008816:	4b24      	ldr	r3, [pc, #144]	@ (80088a8 <USBD_SetConfig+0x150>)
 8008818:	781b      	ldrb	r3, [r3, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	429a      	cmp	r2, r3
 8008822:	d02a      	beq.n	800887a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	b2db      	uxtb	r3, r3
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f7fe ff82 	bl	8007736 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008832:	4b1d      	ldr	r3, [pc, #116]	@ (80088a8 <USBD_SetConfig+0x150>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800883c:	4b1a      	ldr	r3, [pc, #104]	@ (80088a8 <USBD_SetConfig+0x150>)
 800883e:	781b      	ldrb	r3, [r3, #0]
 8008840:	4619      	mov	r1, r3
 8008842:	6878      	ldr	r0, [r7, #4]
 8008844:	f7fe ff5b 	bl	80076fe <USBD_SetClassConfig>
 8008848:	4603      	mov	r3, r0
 800884a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800884c:	7bfb      	ldrb	r3, [r7, #15]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d00f      	beq.n	8008872 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008852:	6839      	ldr	r1, [r7, #0]
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f918 	bl	8008a8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685b      	ldr	r3, [r3, #4]
 800885e:	b2db      	uxtb	r3, r3
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f7fe ff67 	bl	8007736 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	2202      	movs	r2, #2
 800886c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008870:	e014      	b.n	800889c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f9e7 	bl	8008c46 <USBD_CtlSendStatus>
      break;
 8008878:	e010      	b.n	800889c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 f9e3 	bl	8008c46 <USBD_CtlSendStatus>
      break;
 8008880:	e00c      	b.n	800889c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008882:	6839      	ldr	r1, [r7, #0]
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 f900 	bl	8008a8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800888a:	4b07      	ldr	r3, [pc, #28]	@ (80088a8 <USBD_SetConfig+0x150>)
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	4619      	mov	r1, r3
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f7fe ff50 	bl	8007736 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008896:	2303      	movs	r3, #3
 8008898:	73fb      	strb	r3, [r7, #15]
      break;
 800889a:	bf00      	nop
  }

  return ret;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	20000308 	.word	0x20000308

080088ac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80088b6:	683b      	ldr	r3, [r7, #0]
 80088b8:	88db      	ldrh	r3, [r3, #6]
 80088ba:	2b01      	cmp	r3, #1
 80088bc:	d004      	beq.n	80088c8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 f8e2 	bl	8008a8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80088c6:	e023      	b.n	8008910 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80088ce:	b2db      	uxtb	r3, r3
 80088d0:	2b02      	cmp	r3, #2
 80088d2:	dc02      	bgt.n	80088da <USBD_GetConfig+0x2e>
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	dc03      	bgt.n	80088e0 <USBD_GetConfig+0x34>
 80088d8:	e015      	b.n	8008906 <USBD_GetConfig+0x5a>
 80088da:	2b03      	cmp	r3, #3
 80088dc:	d00b      	beq.n	80088f6 <USBD_GetConfig+0x4a>
 80088de:	e012      	b.n	8008906 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	3308      	adds	r3, #8
 80088ea:	2201      	movs	r2, #1
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f948 	bl	8008b84 <USBD_CtlSendData>
        break;
 80088f4:	e00c      	b.n	8008910 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	3304      	adds	r3, #4
 80088fa:	2201      	movs	r2, #1
 80088fc:	4619      	mov	r1, r3
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f940 	bl	8008b84 <USBD_CtlSendData>
        break;
 8008904:	e004      	b.n	8008910 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008906:	6839      	ldr	r1, [r7, #0]
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f8be 	bl	8008a8a <USBD_CtlError>
        break;
 800890e:	bf00      	nop
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008928:	b2db      	uxtb	r3, r3
 800892a:	3b01      	subs	r3, #1
 800892c:	2b02      	cmp	r3, #2
 800892e:	d81e      	bhi.n	800896e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	88db      	ldrh	r3, [r3, #6]
 8008934:	2b02      	cmp	r3, #2
 8008936:	d004      	beq.n	8008942 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f8a5 	bl	8008a8a <USBD_CtlError>
        break;
 8008940:	e01a      	b.n	8008978 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	2201      	movs	r2, #1
 8008946:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800894e:	2b00      	cmp	r3, #0
 8008950:	d005      	beq.n	800895e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	68db      	ldr	r3, [r3, #12]
 8008956:	f043 0202 	orr.w	r2, r3, #2
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	330c      	adds	r3, #12
 8008962:	2202      	movs	r2, #2
 8008964:	4619      	mov	r1, r3
 8008966:	6878      	ldr	r0, [r7, #4]
 8008968:	f000 f90c 	bl	8008b84 <USBD_CtlSendData>
      break;
 800896c:	e004      	b.n	8008978 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f88a 	bl	8008a8a <USBD_CtlError>
      break;
 8008976:	bf00      	nop
  }
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	885b      	ldrh	r3, [r3, #2]
 800898e:	2b01      	cmp	r3, #1
 8008990:	d107      	bne.n	80089a2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2201      	movs	r2, #1
 8008996:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 f953 	bl	8008c46 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80089a0:	e013      	b.n	80089ca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	885b      	ldrh	r3, [r3, #2]
 80089a6:	2b02      	cmp	r3, #2
 80089a8:	d10b      	bne.n	80089c2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80089aa:	683b      	ldr	r3, [r7, #0]
 80089ac:	889b      	ldrh	r3, [r3, #4]
 80089ae:	0a1b      	lsrs	r3, r3, #8
 80089b0:	b29b      	uxth	r3, r3
 80089b2:	b2da      	uxtb	r2, r3
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f943 	bl	8008c46 <USBD_CtlSendStatus>
}
 80089c0:	e003      	b.n	80089ca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80089c2:	6839      	ldr	r1, [r7, #0]
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f000 f860 	bl	8008a8a <USBD_CtlError>
}
 80089ca:	bf00      	nop
 80089cc:	3708      	adds	r7, #8
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b082      	sub	sp, #8
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	6078      	str	r0, [r7, #4]
 80089da:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80089e2:	b2db      	uxtb	r3, r3
 80089e4:	3b01      	subs	r3, #1
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d80b      	bhi.n	8008a02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	885b      	ldrh	r3, [r3, #2]
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d10c      	bne.n	8008a0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 f923 	bl	8008c46 <USBD_CtlSendStatus>
      }
      break;
 8008a00:	e004      	b.n	8008a0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008a02:	6839      	ldr	r1, [r7, #0]
 8008a04:	6878      	ldr	r0, [r7, #4]
 8008a06:	f000 f840 	bl	8008a8a <USBD_CtlError>
      break;
 8008a0a:	e000      	b.n	8008a0e <USBD_ClrFeature+0x3c>
      break;
 8008a0c:	bf00      	nop
  }
}
 8008a0e:	bf00      	nop
 8008a10:	3708      	adds	r7, #8
 8008a12:	46bd      	mov	sp, r7
 8008a14:	bd80      	pop	{r7, pc}

08008a16 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008a16:	b580      	push	{r7, lr}
 8008a18:	b084      	sub	sp, #16
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
 8008a1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	781a      	ldrb	r2, [r3, #0]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	781a      	ldrb	r2, [r3, #0]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	3301      	adds	r3, #1
 8008a3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008a40:	68f8      	ldr	r0, [r7, #12]
 8008a42:	f7ff fa15 	bl	8007e70 <SWAPBYTE>
 8008a46:	4603      	mov	r3, r0
 8008a48:	461a      	mov	r2, r3
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3301      	adds	r3, #1
 8008a52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	3301      	adds	r3, #1
 8008a58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008a5a:	68f8      	ldr	r0, [r7, #12]
 8008a5c:	f7ff fa08 	bl	8007e70 <SWAPBYTE>
 8008a60:	4603      	mov	r3, r0
 8008a62:	461a      	mov	r2, r3
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	3301      	adds	r3, #1
 8008a6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	3301      	adds	r3, #1
 8008a72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008a74:	68f8      	ldr	r0, [r7, #12]
 8008a76:	f7ff f9fb 	bl	8007e70 <SWAPBYTE>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	80da      	strh	r2, [r3, #6]
}
 8008a82:	bf00      	nop
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b082      	sub	sp, #8
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a94:	2180      	movs	r1, #128	@ 0x80
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 fcf6 	bl	8009488 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	6878      	ldr	r0, [r7, #4]
 8008aa0:	f000 fcf2 	bl	8009488 <USBD_LL_StallEP>
}
 8008aa4:	bf00      	nop
 8008aa6:	3708      	adds	r7, #8
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60f8      	str	r0, [r7, #12]
 8008ab4:	60b9      	str	r1, [r7, #8]
 8008ab6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d042      	beq.n	8008b48 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8008ac6:	6938      	ldr	r0, [r7, #16]
 8008ac8:	f000 f842 	bl	8008b50 <USBD_GetLen>
 8008acc:	4603      	mov	r3, r0
 8008ace:	3301      	adds	r3, #1
 8008ad0:	005b      	lsls	r3, r3, #1
 8008ad2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008ad6:	d808      	bhi.n	8008aea <USBD_GetString+0x3e>
 8008ad8:	6938      	ldr	r0, [r7, #16]
 8008ada:	f000 f839 	bl	8008b50 <USBD_GetLen>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	3301      	adds	r3, #1
 8008ae2:	b29b      	uxth	r3, r3
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	b29a      	uxth	r2, r3
 8008ae8:	e001      	b.n	8008aee <USBD_GetString+0x42>
 8008aea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008af2:	7dfb      	ldrb	r3, [r7, #23]
 8008af4:	68ba      	ldr	r2, [r7, #8]
 8008af6:	4413      	add	r3, r2
 8008af8:	687a      	ldr	r2, [r7, #4]
 8008afa:	7812      	ldrb	r2, [r2, #0]
 8008afc:	701a      	strb	r2, [r3, #0]
  idx++;
 8008afe:	7dfb      	ldrb	r3, [r7, #23]
 8008b00:	3301      	adds	r3, #1
 8008b02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008b04:	7dfb      	ldrb	r3, [r7, #23]
 8008b06:	68ba      	ldr	r2, [r7, #8]
 8008b08:	4413      	add	r3, r2
 8008b0a:	2203      	movs	r2, #3
 8008b0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8008b0e:	7dfb      	ldrb	r3, [r7, #23]
 8008b10:	3301      	adds	r3, #1
 8008b12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008b14:	e013      	b.n	8008b3e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8008b16:	7dfb      	ldrb	r3, [r7, #23]
 8008b18:	68ba      	ldr	r2, [r7, #8]
 8008b1a:	4413      	add	r3, r2
 8008b1c:	693a      	ldr	r2, [r7, #16]
 8008b1e:	7812      	ldrb	r2, [r2, #0]
 8008b20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008b22:	693b      	ldr	r3, [r7, #16]
 8008b24:	3301      	adds	r3, #1
 8008b26:	613b      	str	r3, [r7, #16]
    idx++;
 8008b28:	7dfb      	ldrb	r3, [r7, #23]
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008b2e:	7dfb      	ldrb	r3, [r7, #23]
 8008b30:	68ba      	ldr	r2, [r7, #8]
 8008b32:	4413      	add	r3, r2
 8008b34:	2200      	movs	r2, #0
 8008b36:	701a      	strb	r2, [r3, #0]
    idx++;
 8008b38:	7dfb      	ldrb	r3, [r7, #23]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d1e7      	bne.n	8008b16 <USBD_GetString+0x6a>
 8008b46:	e000      	b.n	8008b4a <USBD_GetString+0x9e>
    return;
 8008b48:	bf00      	nop
  }
}
 8008b4a:	3718      	adds	r7, #24
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b085      	sub	sp, #20
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008b60:	e005      	b.n	8008b6e <USBD_GetLen+0x1e>
  {
    len++;
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
 8008b64:	3301      	adds	r3, #1
 8008b66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	781b      	ldrb	r3, [r3, #0]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d1f5      	bne.n	8008b62 <USBD_GetLen+0x12>
  }

  return len;
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2202      	movs	r2, #2
 8008b94:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	68ba      	ldr	r2, [r7, #8]
 8008ba2:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	687a      	ldr	r2, [r7, #4]
 8008ba8:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	2100      	movs	r1, #0
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f000 fcf2 	bl	800959a <USBD_LL_Transmit>

  return USBD_OK;
 8008bb6:	2300      	movs	r3, #0
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	60f8      	str	r0, [r7, #12]
 8008bc8:	60b9      	str	r1, [r7, #8]
 8008bca:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	2100      	movs	r1, #0
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 fce1 	bl	800959a <USBD_LL_Transmit>

  return USBD_OK;
 8008bd8:	2300      	movs	r3, #0
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3710      	adds	r7, #16
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b084      	sub	sp, #16
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	60f8      	str	r0, [r7, #12]
 8008bea:	60b9      	str	r1, [r7, #8]
 8008bec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2203      	movs	r2, #3
 8008bf2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	687a      	ldr	r2, [r7, #4]
 8008bfa:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	68ba      	ldr	r2, [r7, #8]
 8008c02:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	687a      	ldr	r2, [r7, #4]
 8008c0a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	68ba      	ldr	r2, [r7, #8]
 8008c12:	2100      	movs	r1, #0
 8008c14:	68f8      	ldr	r0, [r7, #12]
 8008c16:	f000 fce1 	bl	80095dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c1a:	2300      	movs	r3, #0
}
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	3710      	adds	r7, #16
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	60f8      	str	r0, [r7, #12]
 8008c2c:	60b9      	str	r1, [r7, #8]
 8008c2e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	68ba      	ldr	r2, [r7, #8]
 8008c34:	2100      	movs	r1, #0
 8008c36:	68f8      	ldr	r0, [r7, #12]
 8008c38:	f000 fcd0 	bl	80095dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c3c:	2300      	movs	r3, #0
}
 8008c3e:	4618      	mov	r0, r3
 8008c40:	3710      	adds	r7, #16
 8008c42:	46bd      	mov	sp, r7
 8008c44:	bd80      	pop	{r7, pc}

08008c46 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008c46:	b580      	push	{r7, lr}
 8008c48:	b082      	sub	sp, #8
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2204      	movs	r2, #4
 8008c52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008c56:	2300      	movs	r3, #0
 8008c58:	2200      	movs	r2, #0
 8008c5a:	2100      	movs	r1, #0
 8008c5c:	6878      	ldr	r0, [r7, #4]
 8008c5e:	f000 fc9c 	bl	800959a <USBD_LL_Transmit>

  return USBD_OK;
 8008c62:	2300      	movs	r3, #0
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}

08008c6c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b082      	sub	sp, #8
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2205      	movs	r2, #5
 8008c78:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	2200      	movs	r2, #0
 8008c80:	2100      	movs	r1, #0
 8008c82:	6878      	ldr	r0, [r7, #4]
 8008c84:	f000 fcaa 	bl	80095dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3708      	adds	r7, #8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	4912      	ldr	r1, [pc, #72]	@ (8008ce4 <MX_USB_DEVICE_Init+0x50>)
 8008c9c:	4812      	ldr	r0, [pc, #72]	@ (8008ce8 <MX_USB_DEVICE_Init+0x54>)
 8008c9e:	f7fe fcb1 	bl	8007604 <USBD_Init>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d001      	beq.n	8008cac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ca8:	f7f7 ffd2 	bl	8000c50 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008cac:	490f      	ldr	r1, [pc, #60]	@ (8008cec <MX_USB_DEVICE_Init+0x58>)
 8008cae:	480e      	ldr	r0, [pc, #56]	@ (8008ce8 <MX_USB_DEVICE_Init+0x54>)
 8008cb0:	f7fe fcd8 	bl	8007664 <USBD_RegisterClass>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d001      	beq.n	8008cbe <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008cba:	f7f7 ffc9 	bl	8000c50 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008cbe:	490c      	ldr	r1, [pc, #48]	@ (8008cf0 <MX_USB_DEVICE_Init+0x5c>)
 8008cc0:	4809      	ldr	r0, [pc, #36]	@ (8008ce8 <MX_USB_DEVICE_Init+0x54>)
 8008cc2:	f7fe fc0f 	bl	80074e4 <USBD_CDC_RegisterInterface>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d001      	beq.n	8008cd0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ccc:	f7f7 ffc0 	bl	8000c50 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008cd0:	4805      	ldr	r0, [pc, #20]	@ (8008ce8 <MX_USB_DEVICE_Init+0x54>)
 8008cd2:	f7fe fcfd 	bl	80076d0 <USBD_Start>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d001      	beq.n	8008ce0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008cdc:	f7f7 ffb8 	bl	8000c50 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ce0:	bf00      	nop
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	200000ac 	.word	0x200000ac
 8008ce8:	2000030c 	.word	0x2000030c
 8008cec:	20000018 	.word	0x20000018
 8008cf0:	20000098 	.word	0x20000098

08008cf4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP    
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	4905      	ldr	r1, [pc, #20]	@ (8008d10 <CDC_Init_FS+0x1c>)
 8008cfc:	4805      	ldr	r0, [pc, #20]	@ (8008d14 <CDC_Init_FS+0x20>)
 8008cfe:	f7fe fc0b 	bl	8007518 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008d02:	4905      	ldr	r1, [pc, #20]	@ (8008d18 <CDC_Init_FS+0x24>)
 8008d04:	4803      	ldr	r0, [pc, #12]	@ (8008d14 <CDC_Init_FS+0x20>)
 8008d06:	f7fe fc29 	bl	800755c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008d0a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20000de8 	.word	0x20000de8
 8008d14:	2000030c 	.word	0x2000030c
 8008d18:	200005e8 	.word	0x200005e8

08008d1c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008d20:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	4603      	mov	r3, r0
 8008d34:	6039      	str	r1, [r7, #0]
 8008d36:	71fb      	strb	r3, [r7, #7]
 8008d38:	4613      	mov	r3, r2
 8008d3a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008d3c:	79fb      	ldrb	r3, [r7, #7]
 8008d3e:	2b23      	cmp	r3, #35	@ 0x23
 8008d40:	d84a      	bhi.n	8008dd8 <CDC_Control_FS+0xac>
 8008d42:	a201      	add	r2, pc, #4	@ (adr r2, 8008d48 <CDC_Control_FS+0x1c>)
 8008d44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d48:	08008dd9 	.word	0x08008dd9
 8008d4c:	08008dd9 	.word	0x08008dd9
 8008d50:	08008dd9 	.word	0x08008dd9
 8008d54:	08008dd9 	.word	0x08008dd9
 8008d58:	08008dd9 	.word	0x08008dd9
 8008d5c:	08008dd9 	.word	0x08008dd9
 8008d60:	08008dd9 	.word	0x08008dd9
 8008d64:	08008dd9 	.word	0x08008dd9
 8008d68:	08008dd9 	.word	0x08008dd9
 8008d6c:	08008dd9 	.word	0x08008dd9
 8008d70:	08008dd9 	.word	0x08008dd9
 8008d74:	08008dd9 	.word	0x08008dd9
 8008d78:	08008dd9 	.word	0x08008dd9
 8008d7c:	08008dd9 	.word	0x08008dd9
 8008d80:	08008dd9 	.word	0x08008dd9
 8008d84:	08008dd9 	.word	0x08008dd9
 8008d88:	08008dd9 	.word	0x08008dd9
 8008d8c:	08008dd9 	.word	0x08008dd9
 8008d90:	08008dd9 	.word	0x08008dd9
 8008d94:	08008dd9 	.word	0x08008dd9
 8008d98:	08008dd9 	.word	0x08008dd9
 8008d9c:	08008dd9 	.word	0x08008dd9
 8008da0:	08008dd9 	.word	0x08008dd9
 8008da4:	08008dd9 	.word	0x08008dd9
 8008da8:	08008dd9 	.word	0x08008dd9
 8008dac:	08008dd9 	.word	0x08008dd9
 8008db0:	08008dd9 	.word	0x08008dd9
 8008db4:	08008dd9 	.word	0x08008dd9
 8008db8:	08008dd9 	.word	0x08008dd9
 8008dbc:	08008dd9 	.word	0x08008dd9
 8008dc0:	08008dd9 	.word	0x08008dd9
 8008dc4:	08008dd9 	.word	0x08008dd9
 8008dc8:	08008dd9 	.word	0x08008dd9
 8008dcc:	08008dd9 	.word	0x08008dd9
 8008dd0:	08008dd9 	.word	0x08008dd9
 8008dd4:	08008dd9 	.word	0x08008dd9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008dd8:	bf00      	nop
  }

  return (USBD_OK);
 8008dda:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	370c      	adds	r7, #12
 8008de0:	46bd      	mov	sp, r7
 8008de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de6:	4770      	bx	lr

08008de8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	b082      	sub	sp, #8
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
 8008df0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008df2:	6879      	ldr	r1, [r7, #4]
 8008df4:	4805      	ldr	r0, [pc, #20]	@ (8008e0c <CDC_Receive_FS+0x24>)
 8008df6:	f7fe fbb1 	bl	800755c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008dfa:	4804      	ldr	r0, [pc, #16]	@ (8008e0c <CDC_Receive_FS+0x24>)
 8008dfc:	f7fe fbcc 	bl	8007598 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008e00:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3708      	adds	r7, #8
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	2000030c 	.word	0x2000030c

08008e10 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60f8      	str	r0, [r7, #12]
 8008e18:	60b9      	str	r1, [r7, #8]
 8008e1a:	4613      	mov	r3, r2
 8008e1c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8008e22:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	371c      	adds	r7, #28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e30:	4770      	bx	lr
	...

08008e34 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	6039      	str	r1, [r7, #0]
 8008e3e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008e40:	683b      	ldr	r3, [r7, #0]
 8008e42:	2212      	movs	r2, #18
 8008e44:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008e46:	4b03      	ldr	r3, [pc, #12]	@ (8008e54 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	370c      	adds	r7, #12
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e52:	4770      	bx	lr
 8008e54:	200000cc 	.word	0x200000cc

08008e58 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e58:	b480      	push	{r7}
 8008e5a:	b083      	sub	sp, #12
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	4603      	mov	r3, r0
 8008e60:	6039      	str	r1, [r7, #0]
 8008e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008e64:	683b      	ldr	r3, [r7, #0]
 8008e66:	2204      	movs	r2, #4
 8008e68:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008e6a:	4b03      	ldr	r3, [pc, #12]	@ (8008e78 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr
 8008e78:	200000ec 	.word	0x200000ec

08008e7c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	4603      	mov	r3, r0
 8008e84:	6039      	str	r1, [r7, #0]
 8008e86:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008e88:	79fb      	ldrb	r3, [r7, #7]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d105      	bne.n	8008e9a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e8e:	683a      	ldr	r2, [r7, #0]
 8008e90:	4907      	ldr	r1, [pc, #28]	@ (8008eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e92:	4808      	ldr	r0, [pc, #32]	@ (8008eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008e94:	f7ff fe0a 	bl	8008aac <USBD_GetString>
 8008e98:	e004      	b.n	8008ea4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008e9a:	683a      	ldr	r2, [r7, #0]
 8008e9c:	4904      	ldr	r1, [pc, #16]	@ (8008eb0 <USBD_FS_ProductStrDescriptor+0x34>)
 8008e9e:	4805      	ldr	r0, [pc, #20]	@ (8008eb4 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ea0:	f7ff fe04 	bl	8008aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ea4:	4b02      	ldr	r3, [pc, #8]	@ (8008eb0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ea6:	4618      	mov	r0, r3
 8008ea8:	3708      	adds	r7, #8
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}
 8008eae:	bf00      	nop
 8008eb0:	200015e8 	.word	0x200015e8
 8008eb4:	080097d4 	.word	0x080097d4

08008eb8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	6039      	str	r1, [r7, #0]
 8008ec2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	4904      	ldr	r1, [pc, #16]	@ (8008ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008ec8:	4804      	ldr	r0, [pc, #16]	@ (8008edc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008eca:	f7ff fdef 	bl	8008aac <USBD_GetString>
  return USBD_StrDesc;
 8008ece:	4b02      	ldr	r3, [pc, #8]	@ (8008ed8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008ed0:	4618      	mov	r0, r3
 8008ed2:	3708      	adds	r7, #8
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	200015e8 	.word	0x200015e8
 8008edc:	080097e8 	.word	0x080097e8

08008ee0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ee0:	b580      	push	{r7, lr}
 8008ee2:	b082      	sub	sp, #8
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	6039      	str	r1, [r7, #0]
 8008eea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008eec:	683b      	ldr	r3, [r7, #0]
 8008eee:	221a      	movs	r2, #26
 8008ef0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008ef2:	f000 f855 	bl	8008fa0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008ef6:	4b02      	ldr	r3, [pc, #8]	@ (8008f00 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3708      	adds	r7, #8
 8008efc:	46bd      	mov	sp, r7
 8008efe:	bd80      	pop	{r7, pc}
 8008f00:	200000f0 	.word	0x200000f0

08008f04 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b082      	sub	sp, #8
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	6039      	str	r1, [r7, #0]
 8008f0e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008f10:	79fb      	ldrb	r3, [r7, #7]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d105      	bne.n	8008f22 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	4907      	ldr	r1, [pc, #28]	@ (8008f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f1a:	4808      	ldr	r0, [pc, #32]	@ (8008f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f1c:	f7ff fdc6 	bl	8008aac <USBD_GetString>
 8008f20:	e004      	b.n	8008f2c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008f22:	683a      	ldr	r2, [r7, #0]
 8008f24:	4904      	ldr	r1, [pc, #16]	@ (8008f38 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008f26:	4805      	ldr	r0, [pc, #20]	@ (8008f3c <USBD_FS_ConfigStrDescriptor+0x38>)
 8008f28:	f7ff fdc0 	bl	8008aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f2c:	4b02      	ldr	r3, [pc, #8]	@ (8008f38 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3708      	adds	r7, #8
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
 8008f36:	bf00      	nop
 8008f38:	200015e8 	.word	0x200015e8
 8008f3c:	080097f8 	.word	0x080097f8

08008f40 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	4603      	mov	r3, r0
 8008f48:	6039      	str	r1, [r7, #0]
 8008f4a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008f4c:	79fb      	ldrb	r3, [r7, #7]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d105      	bne.n	8008f5e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f52:	683a      	ldr	r2, [r7, #0]
 8008f54:	4907      	ldr	r1, [pc, #28]	@ (8008f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f56:	4808      	ldr	r0, [pc, #32]	@ (8008f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f58:	f7ff fda8 	bl	8008aac <USBD_GetString>
 8008f5c:	e004      	b.n	8008f68 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008f5e:	683a      	ldr	r2, [r7, #0]
 8008f60:	4904      	ldr	r1, [pc, #16]	@ (8008f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008f62:	4805      	ldr	r0, [pc, #20]	@ (8008f78 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008f64:	f7ff fda2 	bl	8008aac <USBD_GetString>
  }
  return USBD_StrDesc;
 8008f68:	4b02      	ldr	r3, [pc, #8]	@ (8008f74 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3708      	adds	r7, #8
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}
 8008f72:	bf00      	nop
 8008f74:	200015e8 	.word	0x200015e8
 8008f78:	08009804 	.word	0x08009804

08008f7c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	4603      	mov	r3, r0
 8008f84:	6039      	str	r1, [r7, #0]
 8008f86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	220c      	movs	r2, #12
 8008f8c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8008f8e:	4b03      	ldr	r3, [pc, #12]	@ (8008f9c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	370c      	adds	r7, #12
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr
 8008f9c:	200000e0 	.word	0x200000e0

08008fa0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8008fe4 <Get_SerialNum+0x44>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008fac:	4b0e      	ldr	r3, [pc, #56]	@ (8008fe8 <Get_SerialNum+0x48>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8008fec <Get_SerialNum+0x4c>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4413      	add	r3, r2
 8008fbe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d009      	beq.n	8008fda <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008fc6:	2208      	movs	r2, #8
 8008fc8:	4909      	ldr	r1, [pc, #36]	@ (8008ff0 <Get_SerialNum+0x50>)
 8008fca:	68f8      	ldr	r0, [r7, #12]
 8008fcc:	f000 f814 	bl	8008ff8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008fd0:	2204      	movs	r2, #4
 8008fd2:	4908      	ldr	r1, [pc, #32]	@ (8008ff4 <Get_SerialNum+0x54>)
 8008fd4:	68b8      	ldr	r0, [r7, #8]
 8008fd6:	f000 f80f 	bl	8008ff8 <IntToUnicode>
  }
}
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	1fff7a10 	.word	0x1fff7a10
 8008fe8:	1fff7a14 	.word	0x1fff7a14
 8008fec:	1fff7a18 	.word	0x1fff7a18
 8008ff0:	200000f2 	.word	0x200000f2
 8008ff4:	20000102 	.word	0x20000102

08008ff8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b087      	sub	sp, #28
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	60f8      	str	r0, [r7, #12]
 8009000:	60b9      	str	r1, [r7, #8]
 8009002:	4613      	mov	r3, r2
 8009004:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009006:	2300      	movs	r3, #0
 8009008:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800900a:	2300      	movs	r3, #0
 800900c:	75fb      	strb	r3, [r7, #23]
 800900e:	e027      	b.n	8009060 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	0f1b      	lsrs	r3, r3, #28
 8009014:	2b09      	cmp	r3, #9
 8009016:	d80b      	bhi.n	8009030 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	0f1b      	lsrs	r3, r3, #28
 800901c:	b2da      	uxtb	r2, r3
 800901e:	7dfb      	ldrb	r3, [r7, #23]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	4619      	mov	r1, r3
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	440b      	add	r3, r1
 8009028:	3230      	adds	r2, #48	@ 0x30
 800902a:	b2d2      	uxtb	r2, r2
 800902c:	701a      	strb	r2, [r3, #0]
 800902e:	e00a      	b.n	8009046 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	0f1b      	lsrs	r3, r3, #28
 8009034:	b2da      	uxtb	r2, r3
 8009036:	7dfb      	ldrb	r3, [r7, #23]
 8009038:	005b      	lsls	r3, r3, #1
 800903a:	4619      	mov	r1, r3
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	440b      	add	r3, r1
 8009040:	3237      	adds	r2, #55	@ 0x37
 8009042:	b2d2      	uxtb	r2, r2
 8009044:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	011b      	lsls	r3, r3, #4
 800904a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
 800904e:	005b      	lsls	r3, r3, #1
 8009050:	3301      	adds	r3, #1
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4413      	add	r3, r2
 8009056:	2200      	movs	r2, #0
 8009058:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800905a:	7dfb      	ldrb	r3, [r7, #23]
 800905c:	3301      	adds	r3, #1
 800905e:	75fb      	strb	r3, [r7, #23]
 8009060:	7dfa      	ldrb	r2, [r7, #23]
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	429a      	cmp	r2, r3
 8009066:	d3d3      	bcc.n	8009010 <IntToUnicode+0x18>
  }
}
 8009068:	bf00      	nop
 800906a:	bf00      	nop
 800906c:	371c      	adds	r7, #28
 800906e:	46bd      	mov	sp, r7
 8009070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009074:	4770      	bx	lr
	...

08009078 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b0a0      	sub	sp, #128	@ 0x80
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009080:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8009084:	2200      	movs	r2, #0
 8009086:	601a      	str	r2, [r3, #0]
 8009088:	605a      	str	r2, [r3, #4]
 800908a:	609a      	str	r2, [r3, #8]
 800908c:	60da      	str	r2, [r3, #12]
 800908e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8009090:	f107 0310 	add.w	r3, r7, #16
 8009094:	225c      	movs	r2, #92	@ 0x5c
 8009096:	2100      	movs	r1, #0
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fb63 	bl	8009764 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80090a6:	d149      	bne.n	800913c <HAL_PCD_MspInit+0xc4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80090a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80090ac:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80090ae:	2300      	movs	r3, #0
 80090b0:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80090b2:	f107 0310 	add.w	r3, r7, #16
 80090b6:	4618      	mov	r0, r3
 80090b8:	f7fa fafe 	bl	80036b8 <HAL_RCCEx_PeriphCLKConfig>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d001      	beq.n	80090c6 <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 80090c2:	f7f7 fdc5 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80090c6:	2300      	movs	r3, #0
 80090c8:	60fb      	str	r3, [r7, #12]
 80090ca:	4b1e      	ldr	r3, [pc, #120]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 80090cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090ce:	4a1d      	ldr	r2, [pc, #116]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 80090d0:	f043 0301 	orr.w	r3, r3, #1
 80090d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80090d6:	4b1b      	ldr	r3, [pc, #108]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 80090d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	60fb      	str	r3, [r7, #12]
 80090e0:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80090e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80090e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090e8:	2302      	movs	r3, #2
 80090ea:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ec:	2300      	movs	r3, #0
 80090ee:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80090f0:	2303      	movs	r3, #3
 80090f2:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80090f4:	230a      	movs	r3, #10
 80090f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090f8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80090fc:	4619      	mov	r1, r3
 80090fe:	4812      	ldr	r0, [pc, #72]	@ (8009148 <HAL_PCD_MspInit+0xd0>)
 8009100:	f7f8 fd5a 	bl	8001bb8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8009104:	4b0f      	ldr	r3, [pc, #60]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 8009106:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009108:	4a0e      	ldr	r2, [pc, #56]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 800910a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800910e:	6353      	str	r3, [r2, #52]	@ 0x34
 8009110:	2300      	movs	r3, #0
 8009112:	60bb      	str	r3, [r7, #8]
 8009114:	4b0b      	ldr	r3, [pc, #44]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 8009116:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009118:	4a0a      	ldr	r2, [pc, #40]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 800911a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800911e:	6453      	str	r3, [r2, #68]	@ 0x44
 8009120:	4b08      	ldr	r3, [pc, #32]	@ (8009144 <HAL_PCD_MspInit+0xcc>)
 8009122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009124:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009128:	60bb      	str	r3, [r7, #8]
 800912a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800912c:	2200      	movs	r2, #0
 800912e:	2100      	movs	r1, #0
 8009130:	2043      	movs	r0, #67	@ 0x43
 8009132:	f7f8 fc74 	bl	8001a1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009136:	2043      	movs	r0, #67	@ 0x43
 8009138:	f7f8 fc8d 	bl	8001a56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800913c:	bf00      	nop
 800913e:	3780      	adds	r7, #128	@ 0x80
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	40023800 	.word	0x40023800
 8009148:	40020000 	.word	0x40020000

0800914c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b082      	sub	sp, #8
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8009160:	4619      	mov	r1, r3
 8009162:	4610      	mov	r0, r2
 8009164:	f7fe fb01 	bl	800776a <USBD_LL_SetupStage>
}
 8009168:	bf00      	nop
 800916a:	3708      	adds	r7, #8
 800916c:	46bd      	mov	sp, r7
 800916e:	bd80      	pop	{r7, pc}

08009170 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b082      	sub	sp, #8
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	460b      	mov	r3, r1
 800917a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8009182:	78fa      	ldrb	r2, [r7, #3]
 8009184:	6879      	ldr	r1, [r7, #4]
 8009186:	4613      	mov	r3, r2
 8009188:	00db      	lsls	r3, r3, #3
 800918a:	4413      	add	r3, r2
 800918c:	009b      	lsls	r3, r3, #2
 800918e:	440b      	add	r3, r1
 8009190:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	78fb      	ldrb	r3, [r7, #3]
 8009198:	4619      	mov	r1, r3
 800919a:	f7fe fb3b 	bl	8007814 <USBD_LL_DataOutStage>
}
 800919e:	bf00      	nop
 80091a0:	3708      	adds	r7, #8
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b082      	sub	sp, #8
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
 80091ae:	460b      	mov	r3, r1
 80091b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80091b8:	78fa      	ldrb	r2, [r7, #3]
 80091ba:	6879      	ldr	r1, [r7, #4]
 80091bc:	4613      	mov	r3, r2
 80091be:	00db      	lsls	r3, r3, #3
 80091c0:	4413      	add	r3, r2
 80091c2:	009b      	lsls	r3, r3, #2
 80091c4:	440b      	add	r3, r1
 80091c6:	3320      	adds	r3, #32
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	78fb      	ldrb	r3, [r7, #3]
 80091cc:	4619      	mov	r1, r3
 80091ce:	f7fe fbdd 	bl	800798c <USBD_LL_DataInStage>
}
 80091d2:	bf00      	nop
 80091d4:	3708      	adds	r7, #8
 80091d6:	46bd      	mov	sp, r7
 80091d8:	bd80      	pop	{r7, pc}

080091da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091da:	b580      	push	{r7, lr}
 80091dc:	b082      	sub	sp, #8
 80091de:	af00      	add	r7, sp, #0
 80091e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7fe fd21 	bl	8007c30 <USBD_LL_SOF>
}
 80091ee:	bf00      	nop
 80091f0:	3708      	adds	r7, #8
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80091f6:	b580      	push	{r7, lr}
 80091f8:	b084      	sub	sp, #16
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80091fe:	2301      	movs	r3, #1
 8009200:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	79db      	ldrb	r3, [r3, #7]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d102      	bne.n	8009210 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800920a:	2300      	movs	r3, #0
 800920c:	73fb      	strb	r3, [r7, #15]
 800920e:	e008      	b.n	8009222 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	79db      	ldrb	r3, [r3, #7]
 8009214:	2b02      	cmp	r3, #2
 8009216:	d102      	bne.n	800921e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009218:	2301      	movs	r3, #1
 800921a:	73fb      	strb	r3, [r7, #15]
 800921c:	e001      	b.n	8009222 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800921e:	f7f7 fd17 	bl	8000c50 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009228:	7bfa      	ldrb	r2, [r7, #15]
 800922a:	4611      	mov	r1, r2
 800922c:	4618      	mov	r0, r3
 800922e:	f7fe fcbb 	bl	8007ba8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009238:	4618      	mov	r0, r3
 800923a:	f7fe fc62 	bl	8007b02 <USBD_LL_Reset>
}
 800923e:	bf00      	nop
 8009240:	3710      	adds	r7, #16
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
	...

08009248 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009256:	4618      	mov	r0, r3
 8009258:	f7fe fcb6 	bl	8007bc8 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	687a      	ldr	r2, [r7, #4]
 8009268:	6812      	ldr	r2, [r2, #0]
 800926a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800926e:	f043 0301 	orr.w	r3, r3, #1
 8009272:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7adb      	ldrb	r3, [r3, #11]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d005      	beq.n	8009288 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800927c:	4b04      	ldr	r3, [pc, #16]	@ (8009290 <HAL_PCD_SuspendCallback+0x48>)
 800927e:	691b      	ldr	r3, [r3, #16]
 8009280:	4a03      	ldr	r2, [pc, #12]	@ (8009290 <HAL_PCD_SuspendCallback+0x48>)
 8009282:	f043 0306 	orr.w	r3, r3, #6
 8009286:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}
 8009290:	e000ed00 	.word	0xe000ed00

08009294 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092a2:	4618      	mov	r0, r3
 80092a4:	f7fe fcac 	bl	8007c00 <USBD_LL_Resume>
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
 80092b8:	460b      	mov	r3, r1
 80092ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092c2:	78fa      	ldrb	r2, [r7, #3]
 80092c4:	4611      	mov	r1, r2
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fe fd04 	bl	8007cd4 <USBD_LL_IsoOUTIncomplete>
}
 80092cc:	bf00      	nop
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b082      	sub	sp, #8
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
 80092dc:	460b      	mov	r3, r1
 80092de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80092e6:	78fa      	ldrb	r2, [r7, #3]
 80092e8:	4611      	mov	r1, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f7fe fcc0 	bl	8007c70 <USBD_LL_IsoINIncomplete>
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b082      	sub	sp, #8
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009306:	4618      	mov	r0, r3
 8009308:	f7fe fd16 	bl	8007d38 <USBD_LL_DevConnected>
}
 800930c:	bf00      	nop
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8009322:	4618      	mov	r0, r3
 8009324:	f7fe fd13 	bl	8007d4e <USBD_LL_DevDisconnected>
}
 8009328:	bf00      	nop
 800932a:	3708      	adds	r7, #8
 800932c:	46bd      	mov	sp, r7
 800932e:	bd80      	pop	{r7, pc}

08009330 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b082      	sub	sp, #8
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	2b00      	cmp	r3, #0
 800933e:	d13c      	bne.n	80093ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009340:	4a20      	ldr	r2, [pc, #128]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	4a1e      	ldr	r2, [pc, #120]	@ (80093c4 <USBD_LL_Init+0x94>)
 800934c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009350:	4b1c      	ldr	r3, [pc, #112]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009352:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8009356:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8009358:	4b1a      	ldr	r3, [pc, #104]	@ (80093c4 <USBD_LL_Init+0x94>)
 800935a:	2206      	movs	r2, #6
 800935c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800935e:	4b19      	ldr	r3, [pc, #100]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009360:	2202      	movs	r2, #2
 8009362:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009364:	4b17      	ldr	r3, [pc, #92]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009366:	2200      	movs	r2, #0
 8009368:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800936a:	4b16      	ldr	r3, [pc, #88]	@ (80093c4 <USBD_LL_Init+0x94>)
 800936c:	2202      	movs	r2, #2
 800936e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009370:	4b14      	ldr	r3, [pc, #80]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009372:	2200      	movs	r2, #0
 8009374:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009376:	4b13      	ldr	r3, [pc, #76]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009378:	2200      	movs	r2, #0
 800937a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800937c:	4b11      	ldr	r3, [pc, #68]	@ (80093c4 <USBD_LL_Init+0x94>)
 800937e:	2200      	movs	r2, #0
 8009380:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009382:	4b10      	ldr	r3, [pc, #64]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009384:	2200      	movs	r2, #0
 8009386:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009388:	4b0e      	ldr	r3, [pc, #56]	@ (80093c4 <USBD_LL_Init+0x94>)
 800938a:	2200      	movs	r2, #0
 800938c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800938e:	480d      	ldr	r0, [pc, #52]	@ (80093c4 <USBD_LL_Init+0x94>)
 8009390:	f7f8 fdd9 	bl	8001f46 <HAL_PCD_Init>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d001      	beq.n	800939e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800939a:	f7f7 fc59 	bl	8000c50 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800939e:	2180      	movs	r1, #128	@ 0x80
 80093a0:	4808      	ldr	r0, [pc, #32]	@ (80093c4 <USBD_LL_Init+0x94>)
 80093a2:	f7fa f83a 	bl	800341a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80093a6:	2240      	movs	r2, #64	@ 0x40
 80093a8:	2100      	movs	r1, #0
 80093aa:	4806      	ldr	r0, [pc, #24]	@ (80093c4 <USBD_LL_Init+0x94>)
 80093ac:	f7f9 ffee 	bl	800338c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80093b0:	2280      	movs	r2, #128	@ 0x80
 80093b2:	2101      	movs	r1, #1
 80093b4:	4803      	ldr	r0, [pc, #12]	@ (80093c4 <USBD_LL_Init+0x94>)
 80093b6:	f7f9 ffe9 	bl	800338c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80093ba:	2300      	movs	r3, #0
}
 80093bc:	4618      	mov	r0, r3
 80093be:	3708      	adds	r7, #8
 80093c0:	46bd      	mov	sp, r7
 80093c2:	bd80      	pop	{r7, pc}
 80093c4:	200017e8 	.word	0x200017e8

080093c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f8 fec7 	bl	8002172 <HAL_PCD_Start>
 80093e4:	4603      	mov	r3, r0
 80093e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	4618      	mov	r0, r3
 80093ec:	f000 f98e 	bl	800970c <USBD_Get_USB_Status>
 80093f0:	4603      	mov	r3, r0
 80093f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80093f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3710      	adds	r7, #16
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}

080093fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80093fe:	b580      	push	{r7, lr}
 8009400:	b084      	sub	sp, #16
 8009402:	af00      	add	r7, sp, #0
 8009404:	6078      	str	r0, [r7, #4]
 8009406:	4608      	mov	r0, r1
 8009408:	4611      	mov	r1, r2
 800940a:	461a      	mov	r2, r3
 800940c:	4603      	mov	r3, r0
 800940e:	70fb      	strb	r3, [r7, #3]
 8009410:	460b      	mov	r3, r1
 8009412:	70bb      	strb	r3, [r7, #2]
 8009414:	4613      	mov	r3, r2
 8009416:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800941c:	2300      	movs	r3, #0
 800941e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8009426:	78bb      	ldrb	r3, [r7, #2]
 8009428:	883a      	ldrh	r2, [r7, #0]
 800942a:	78f9      	ldrb	r1, [r7, #3]
 800942c:	f7f9 fbc8 	bl	8002bc0 <HAL_PCD_EP_Open>
 8009430:	4603      	mov	r3, r0
 8009432:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009434:	7bfb      	ldrb	r3, [r7, #15]
 8009436:	4618      	mov	r0, r3
 8009438:	f000 f968 	bl	800970c <USBD_Get_USB_Status>
 800943c:	4603      	mov	r3, r0
 800943e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009440:	7bbb      	ldrb	r3, [r7, #14]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3710      	adds	r7, #16
 8009446:	46bd      	mov	sp, r7
 8009448:	bd80      	pop	{r7, pc}

0800944a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800944a:	b580      	push	{r7, lr}
 800944c:	b084      	sub	sp, #16
 800944e:	af00      	add	r7, sp, #0
 8009450:	6078      	str	r0, [r7, #4]
 8009452:	460b      	mov	r3, r1
 8009454:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009456:	2300      	movs	r3, #0
 8009458:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800945a:	2300      	movs	r3, #0
 800945c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009464:	78fa      	ldrb	r2, [r7, #3]
 8009466:	4611      	mov	r1, r2
 8009468:	4618      	mov	r0, r3
 800946a:	f7f9 fc13 	bl	8002c94 <HAL_PCD_EP_Close>
 800946e:	4603      	mov	r3, r0
 8009470:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009472:	7bfb      	ldrb	r3, [r7, #15]
 8009474:	4618      	mov	r0, r3
 8009476:	f000 f949 	bl	800970c <USBD_Get_USB_Status>
 800947a:	4603      	mov	r3, r0
 800947c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800947e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009480:	4618      	mov	r0, r3
 8009482:	3710      	adds	r7, #16
 8009484:	46bd      	mov	sp, r7
 8009486:	bd80      	pop	{r7, pc}

08009488 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009488:	b580      	push	{r7, lr}
 800948a:	b084      	sub	sp, #16
 800948c:	af00      	add	r7, sp, #0
 800948e:	6078      	str	r0, [r7, #4]
 8009490:	460b      	mov	r3, r1
 8009492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009494:	2300      	movs	r3, #0
 8009496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009498:	2300      	movs	r3, #0
 800949a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094a2:	78fa      	ldrb	r2, [r7, #3]
 80094a4:	4611      	mov	r1, r2
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7f9 fccb 	bl	8002e42 <HAL_PCD_EP_SetStall>
 80094ac:	4603      	mov	r3, r0
 80094ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094b0:	7bfb      	ldrb	r3, [r7, #15]
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 f92a 	bl	800970c <USBD_Get_USB_Status>
 80094b8:	4603      	mov	r3, r0
 80094ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80094be:	4618      	mov	r0, r3
 80094c0:	3710      	adds	r7, #16
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}

080094c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80094c6:	b580      	push	{r7, lr}
 80094c8:	b084      	sub	sp, #16
 80094ca:	af00      	add	r7, sp, #0
 80094cc:	6078      	str	r0, [r7, #4]
 80094ce:	460b      	mov	r3, r1
 80094d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80094d2:	2300      	movs	r3, #0
 80094d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80094d6:	2300      	movs	r3, #0
 80094d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80094e0:	78fa      	ldrb	r2, [r7, #3]
 80094e2:	4611      	mov	r1, r2
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7f9 fd0f 	bl	8002f08 <HAL_PCD_EP_ClrStall>
 80094ea:	4603      	mov	r3, r0
 80094ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80094ee:	7bfb      	ldrb	r3, [r7, #15]
 80094f0:	4618      	mov	r0, r3
 80094f2:	f000 f90b 	bl	800970c <USBD_Get_USB_Status>
 80094f6:	4603      	mov	r3, r0
 80094f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80094fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009504:	b480      	push	{r7}
 8009506:	b085      	sub	sp, #20
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
 800950c:	460b      	mov	r3, r1
 800950e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009516:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009518:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800951c:	2b00      	cmp	r3, #0
 800951e:	da0b      	bge.n	8009538 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009520:	78fb      	ldrb	r3, [r7, #3]
 8009522:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009526:	68f9      	ldr	r1, [r7, #12]
 8009528:	4613      	mov	r3, r2
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	440b      	add	r3, r1
 8009532:	3316      	adds	r3, #22
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	e00b      	b.n	8009550 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800953e:	68f9      	ldr	r1, [r7, #12]
 8009540:	4613      	mov	r3, r2
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	4413      	add	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	440b      	add	r3, r1
 800954a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800954e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009550:	4618      	mov	r0, r3
 8009552:	3714      	adds	r7, #20
 8009554:	46bd      	mov	sp, r7
 8009556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800955a:	4770      	bx	lr

0800955c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009568:	2300      	movs	r3, #0
 800956a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800956c:	2300      	movs	r3, #0
 800956e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	4611      	mov	r1, r2
 800957a:	4618      	mov	r0, r3
 800957c:	f7f9 fafc 	bl	8002b78 <HAL_PCD_SetAddress>
 8009580:	4603      	mov	r3, r0
 8009582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009584:	7bfb      	ldrb	r3, [r7, #15]
 8009586:	4618      	mov	r0, r3
 8009588:	f000 f8c0 	bl	800970c <USBD_Get_USB_Status>
 800958c:	4603      	mov	r3, r0
 800958e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009590:	7bbb      	ldrb	r3, [r7, #14]
}
 8009592:	4618      	mov	r0, r3
 8009594:	3710      	adds	r7, #16
 8009596:	46bd      	mov	sp, r7
 8009598:	bd80      	pop	{r7, pc}

0800959a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b086      	sub	sp, #24
 800959e:	af00      	add	r7, sp, #0
 80095a0:	60f8      	str	r0, [r7, #12]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
 80095a6:	460b      	mov	r3, r1
 80095a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095aa:	2300      	movs	r3, #0
 80095ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095ae:	2300      	movs	r3, #0
 80095b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095b8:	7af9      	ldrb	r1, [r7, #11]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	f7f9 fc06 	bl	8002dce <HAL_PCD_EP_Transmit>
 80095c2:	4603      	mov	r3, r0
 80095c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095c6:	7dfb      	ldrb	r3, [r7, #23]
 80095c8:	4618      	mov	r0, r3
 80095ca:	f000 f89f 	bl	800970c <USBD_Get_USB_Status>
 80095ce:	4603      	mov	r3, r0
 80095d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80095d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3718      	adds	r7, #24
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b086      	sub	sp, #24
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	607a      	str	r2, [r7, #4]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	460b      	mov	r3, r1
 80095ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095ec:	2300      	movs	r3, #0
 80095ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095f0:	2300      	movs	r3, #0
 80095f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80095fa:	7af9      	ldrb	r1, [r7, #11]
 80095fc:	683b      	ldr	r3, [r7, #0]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	f7f9 fb92 	bl	8002d28 <HAL_PCD_EP_Receive>
 8009604:	4603      	mov	r3, r0
 8009606:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009608:	7dfb      	ldrb	r3, [r7, #23]
 800960a:	4618      	mov	r0, r3
 800960c:	f000 f87e 	bl	800970c <USBD_Get_USB_Status>
 8009610:	4603      	mov	r3, r0
 8009612:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009614:	7dbb      	ldrb	r3, [r7, #22]
}
 8009616:	4618      	mov	r0, r3
 8009618:	3718      	adds	r7, #24
 800961a:	46bd      	mov	sp, r7
 800961c:	bd80      	pop	{r7, pc}

0800961e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800961e:	b580      	push	{r7, lr}
 8009620:	b082      	sub	sp, #8
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
 8009626:	460b      	mov	r3, r1
 8009628:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009630:	78fa      	ldrb	r2, [r7, #3]
 8009632:	4611      	mov	r1, r2
 8009634:	4618      	mov	r0, r3
 8009636:	f7f9 fbb2 	bl	8002d9e <HAL_PCD_EP_GetRxCount>
 800963a:	4603      	mov	r3, r0
}
 800963c:	4618      	mov	r0, r3
 800963e:	3708      	adds	r7, #8
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b082      	sub	sp, #8
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
 800964c:	460b      	mov	r3, r1
 800964e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8009650:	78fb      	ldrb	r3, [r7, #3]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d002      	beq.n	800965c <HAL_PCDEx_LPM_Callback+0x18>
 8009656:	2b01      	cmp	r3, #1
 8009658:	d01d      	beq.n	8009696 <HAL_PCDEx_LPM_Callback+0x52>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800965a:	e039      	b.n	80096d0 <HAL_PCDEx_LPM_Callback+0x8c>
    if (hpcd->Init.low_power_enable)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	7adb      	ldrb	r3, [r3, #11]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d005      	beq.n	8009670 <HAL_PCDEx_LPM_Callback+0x2c>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009664:	4b1c      	ldr	r3, [pc, #112]	@ (80096d8 <HAL_PCDEx_LPM_Callback+0x94>)
 8009666:	691b      	ldr	r3, [r3, #16]
 8009668:	4a1b      	ldr	r2, [pc, #108]	@ (80096d8 <HAL_PCDEx_LPM_Callback+0x94>)
 800966a:	f023 0306 	bic.w	r3, r3, #6
 800966e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	687a      	ldr	r2, [r7, #4]
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009682:	f023 0301 	bic.w	r3, r3, #1
 8009686:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800968e:	4618      	mov	r0, r3
 8009690:	f7fe fab6 	bl	8007c00 <USBD_LL_Resume>
    break;
 8009694:	e01c      	b.n	80096d0 <HAL_PCDEx_LPM_Callback+0x8c>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	687a      	ldr	r2, [r7, #4]
 80096a2:	6812      	ldr	r2, [r2, #0]
 80096a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80096a8:	f043 0301 	orr.w	r3, r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fa87 	bl	8007bc8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	7adb      	ldrb	r3, [r3, #11]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d005      	beq.n	80096ce <HAL_PCDEx_LPM_Callback+0x8a>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096c2:	4b05      	ldr	r3, [pc, #20]	@ (80096d8 <HAL_PCDEx_LPM_Callback+0x94>)
 80096c4:	691b      	ldr	r3, [r3, #16]
 80096c6:	4a04      	ldr	r2, [pc, #16]	@ (80096d8 <HAL_PCDEx_LPM_Callback+0x94>)
 80096c8:	f043 0306 	orr.w	r3, r3, #6
 80096cc:	6113      	str	r3, [r2, #16]
    break;
 80096ce:	bf00      	nop
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	e000ed00 	.word	0xe000ed00

080096dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80096dc:	b480      	push	{r7}
 80096de:	b083      	sub	sp, #12
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80096e4:	4b03      	ldr	r3, [pc, #12]	@ (80096f4 <USBD_static_malloc+0x18>)
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	370c      	adds	r7, #12
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
 80096f2:	bf00      	nop
 80096f4:	20001ccc 	.word	0x20001ccc

080096f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80096f8:	b480      	push	{r7}
 80096fa:	b083      	sub	sp, #12
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]

}
 8009700:	bf00      	nop
 8009702:	370c      	adds	r7, #12
 8009704:	46bd      	mov	sp, r7
 8009706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800970a:	4770      	bx	lr

0800970c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800970c:	b480      	push	{r7}
 800970e:	b085      	sub	sp, #20
 8009710:	af00      	add	r7, sp, #0
 8009712:	4603      	mov	r3, r0
 8009714:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009716:	2300      	movs	r3, #0
 8009718:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800971a:	79fb      	ldrb	r3, [r7, #7]
 800971c:	2b03      	cmp	r3, #3
 800971e:	d817      	bhi.n	8009750 <USBD_Get_USB_Status+0x44>
 8009720:	a201      	add	r2, pc, #4	@ (adr r2, 8009728 <USBD_Get_USB_Status+0x1c>)
 8009722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009726:	bf00      	nop
 8009728:	08009739 	.word	0x08009739
 800972c:	0800973f 	.word	0x0800973f
 8009730:	08009745 	.word	0x08009745
 8009734:	0800974b 	.word	0x0800974b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	73fb      	strb	r3, [r7, #15]
    break;
 800973c:	e00b      	b.n	8009756 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800973e:	2303      	movs	r3, #3
 8009740:	73fb      	strb	r3, [r7, #15]
    break;
 8009742:	e008      	b.n	8009756 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009744:	2301      	movs	r3, #1
 8009746:	73fb      	strb	r3, [r7, #15]
    break;
 8009748:	e005      	b.n	8009756 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800974a:	2303      	movs	r3, #3
 800974c:	73fb      	strb	r3, [r7, #15]
    break;
 800974e:	e002      	b.n	8009756 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009750:	2303      	movs	r3, #3
 8009752:	73fb      	strb	r3, [r7, #15]
    break;
 8009754:	bf00      	nop
  }
  return usb_status;
 8009756:	7bfb      	ldrb	r3, [r7, #15]
}
 8009758:	4618      	mov	r0, r3
 800975a:	3714      	adds	r7, #20
 800975c:	46bd      	mov	sp, r7
 800975e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009762:	4770      	bx	lr

08009764 <memset>:
 8009764:	4402      	add	r2, r0
 8009766:	4603      	mov	r3, r0
 8009768:	4293      	cmp	r3, r2
 800976a:	d100      	bne.n	800976e <memset+0xa>
 800976c:	4770      	bx	lr
 800976e:	f803 1b01 	strb.w	r1, [r3], #1
 8009772:	e7f9      	b.n	8009768 <memset+0x4>

08009774 <__libc_init_array>:
 8009774:	b570      	push	{r4, r5, r6, lr}
 8009776:	4d0d      	ldr	r5, [pc, #52]	@ (80097ac <__libc_init_array+0x38>)
 8009778:	4c0d      	ldr	r4, [pc, #52]	@ (80097b0 <__libc_init_array+0x3c>)
 800977a:	1b64      	subs	r4, r4, r5
 800977c:	10a4      	asrs	r4, r4, #2
 800977e:	2600      	movs	r6, #0
 8009780:	42a6      	cmp	r6, r4
 8009782:	d109      	bne.n	8009798 <__libc_init_array+0x24>
 8009784:	4d0b      	ldr	r5, [pc, #44]	@ (80097b4 <__libc_init_array+0x40>)
 8009786:	4c0c      	ldr	r4, [pc, #48]	@ (80097b8 <__libc_init_array+0x44>)
 8009788:	f000 f818 	bl	80097bc <_init>
 800978c:	1b64      	subs	r4, r4, r5
 800978e:	10a4      	asrs	r4, r4, #2
 8009790:	2600      	movs	r6, #0
 8009792:	42a6      	cmp	r6, r4
 8009794:	d105      	bne.n	80097a2 <__libc_init_array+0x2e>
 8009796:	bd70      	pop	{r4, r5, r6, pc}
 8009798:	f855 3b04 	ldr.w	r3, [r5], #4
 800979c:	4798      	blx	r3
 800979e:	3601      	adds	r6, #1
 80097a0:	e7ee      	b.n	8009780 <__libc_init_array+0xc>
 80097a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80097a6:	4798      	blx	r3
 80097a8:	3601      	adds	r6, #1
 80097aa:	e7f2      	b.n	8009792 <__libc_init_array+0x1e>
 80097ac:	08009834 	.word	0x08009834
 80097b0:	08009834 	.word	0x08009834
 80097b4:	08009834 	.word	0x08009834
 80097b8:	08009838 	.word	0x08009838

080097bc <_init>:
 80097bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097be:	bf00      	nop
 80097c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097c2:	bc08      	pop	{r3}
 80097c4:	469e      	mov	lr, r3
 80097c6:	4770      	bx	lr

080097c8 <_fini>:
 80097c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097ca:	bf00      	nop
 80097cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097ce:	bc08      	pop	{r3}
 80097d0:	469e      	mov	lr, r3
 80097d2:	4770      	bx	lr

/*
 * cat25.h
 *
 *  Created on: Jun 9, 2025
 *      Author: vince
 */

#ifndef INC_CAT25160_H_
#define INC_CAT25160_H_

#ifdef __cplusplus
extern "C" {
#endif

#include "stm32f4xx_hal.h" // Include the appropriate HAL library for your STM32F4 series

// Define EEPROM instructions
#define CAT25160_INSTR_WREN   0x06 // Write Enable
#define CAT25160_INSTR_WRDI   0x04 // Write Disable
#define CAT25160_INSTR_RDSR   0x05 // Read Status Register
#define CAT25160_INSTR_WRSR   0x01 // Write Status Register
#define CAT25160_INSTR_READ   0x03 // Read Data
#define CAT25160_INSTR_WRITE  0x02 // Write Data

// Status Register Bits
#define CAT25160_SR_WPEN      0x80 // Write Protect Enable
#define CAT25160_SR_BP1       0x08 // Block Protect 1
#define CAT25160_SR_BP0       0x04 // Block Protect 0
#define CAT25160_SR_WEL       0x02 // Write Enable Latch
#define CAT25160_SR_WIP       0x01 // Write In Progress

// EEPROM specific parameters
#define CAT25160_TOTAL_SIZE_BYTES  2048 // 16 Kbit / 8 bits/byte = 2048 bytes
#define CAT25160_PAGE_SIZE_BYTES   64   // Page size for write operations

typedef enum {
    CAT25160_OK       = 0,
    CAT25160_ERROR    = 1,
    CAT25160_TIMEOUT  = 2,
    CAT25160_BUSY     = 3,
    CAT25160_INVALID_ADDRESS = 4,
    CAT25160_INVALID_SIZE = 5
} CAT25160_StatusTypeDef;

class CAT25160 {
public:
    // Constructor
    CAT25160(SPI_HandleTypeDef* hspi, GPIO_TypeDef* cs_port, uint16_t cs_pin);

    // Destructor (if needed for cleanup)
    ~CAT25160();

    // Initialize the EEPROM (optional, but good for verifying connection)
    CAT25160_StatusTypeDef init();

    // Read a single byte from a specific address
    CAT25160_StatusTypeDef readByte(uint16_t address, uint8_t* data);

    // Write a single byte to a specific address
    CAT25160_StatusTypeDef writeByte(uint16_t address, uint8_t data);

    // Read multiple bytes from a starting address
    CAT25160_StatusTypeDef read(uint16_t address, uint8_t* data, uint16_t size);

    // Write multiple bytes to a starting address (page write handles automatically)
    CAT25160_StatusTypeDef write(uint16_t address, const uint8_t* data, uint16_t size);

    // Read the Status Register
    CAT25160_StatusTypeDef readStatusRegister(uint8_t* status);

    // Write the Status Register (use with caution, can enable/disable write protect)
    CAT25160_StatusTypeDef writeStatusRegister(uint8_t status);

    // Check if the EEPROM is busy with a write operation
    bool isBusy();

private:
    SPI_HandleTypeDef* _hspi;       // Pointer to the SPI handle
    GPIO_TypeDef* _cs_port;    // GPIO port for Chip Select
    uint16_t           _cs_pin;     // GPIO pin for Chip Select

    void chipSelect(bool enable);   // Internal helper for CS control
    CAT25160_StatusTypeDef waitForWriteCompletion(uint32_t timeout_ms = 100);
    CAT25160_StatusTypeDef sendInstruction(uint8_t instruction);
    CAT25160_StatusTypeDef sendAddress(uint16_t address);
};

#ifdef __cplusplus
}
#endif

#endif /* INC_CAT25160_H_ */


ARM2025Shoulder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083a4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008c4  0800857c  0800857c  0000957c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e40  08008e40  0000a3b4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008e40  08008e40  0000a3b4  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008e40  08008e40  0000a3b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e40  08008e40  00009e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008e44  08008e44  00009e44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000003b4  20000000  08008e48  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200003b4  080091fc  0000a3b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000079c  080091fc  0000a79c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a3b4  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003f829  00000000  00000000  0000a3e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000094  00000000  00000000  00049c0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00040885  00000000  00000000  00049ca1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008105  00000000  00000000  0008a526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001f90  00000000  00000000  00092630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00107517  00000000  00000000  000945c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002fc9  00000000  00000000  0019bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00016977  00000000  00000000  0019eaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  0002d771  00000000  00000000  001b5417  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  001e2b88  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00005450  00000000  00000000  001e2bcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200003b4 	.word	0x200003b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008564 	.word	0x08008564

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200003b8 	.word	0x200003b8
 8000214:	08008564 	.word	0x08008564

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000994:	480d      	ldr	r0, [pc, #52]	@ (80009cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000996:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000998:	f003 f82a 	bl	80039f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800099c:	480c      	ldr	r0, [pc, #48]	@ (80009d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800099e:	490d      	ldr	r1, [pc, #52]	@ (80009d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009a0:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <LoopForever+0xe>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80009a4:	e002      	b.n	80009ac <LoopCopyDataInit>

080009a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009aa:	3304      	adds	r3, #4

080009ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009b0:	d3f9      	bcc.n	80009a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009b2:	4a0a      	ldr	r2, [pc, #40]	@ (80009dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009b4:	4c0a      	ldr	r4, [pc, #40]	@ (80009e0 <LoopForever+0x16>)
  movs r3, #0
 80009b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b8:	e001      	b.n	80009be <LoopFillZerobss>

080009ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009bc:	3204      	adds	r2, #4

080009be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009c0:	d3fb      	bcc.n	80009ba <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80009c2:	f007 fdab 	bl	800851c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009c6:	f000 ff37 	bl	8001838 <main>

080009ca <LoopForever>:

LoopForever:
    b LoopForever
 80009ca:	e7fe      	b.n	80009ca <LoopForever>
  ldr   r0, =_estack
 80009cc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80009d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009d4:	200003b4 	.word	0x200003b4
  ldr r2, =_sidata
 80009d8:	08008e48 	.word	0x08008e48
  ldr r2, =_sbss
 80009dc:	200003b4 	.word	0x200003b4
  ldr r4, =_ebss
 80009e0:	2000079c 	.word	0x2000079c

080009e4 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009e4:	e7fe      	b.n	80009e4 <BusFault_Handler>
	...

080009e8 <CalibrateSingleMotor>:
	}


}

bool CalibrateSingleMotor(void){
 80009e8:	b510      	push	{r4, lr}

	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 80009ea:	f001 facd 	bl	8001f88 <MC_GetSTMStateMotor1>
	uint32_t tStart;


	if (motorState != IDLE){
 80009ee:	b1a8      	cbz	r0, 8000a1c <CalibrateSingleMotor+0x34>
		MC_StopMotor1();
 80009f0:	f001 fa92 	bl	8001f18 <MC_StopMotor1>

		//  Wait for motor to become IDLE
		tStart = HAL_GetTick();
 80009f4:	f003 f850 	bl	8003a98 <HAL_GetTick>
 80009f8:	4604      	mov	r4, r0
 80009fa:	e005      	b.n	8000a08 <CalibrateSingleMotor+0x20>
				 uart_debug_print("Motor is now stopped \r\n");
				////////////////////////////////////////////////////////////////////////////////////////////////////////
				 break;
			}

			if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 80009fc:	f003 f84c 	bl	8003a98 <HAL_GetTick>
 8000a00:	1b00      	subs	r0, r0, r4
 8000a02:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8000a06:	d813      	bhi.n	8000a30 <CalibrateSingleMotor+0x48>
			HAL_Delay(5); // poll the state until it IDLE
 8000a08:	2005      	movs	r0, #5
 8000a0a:	f003 f84b 	bl	8003aa4 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8000a0e:	f001 fabb 	bl	8001f88 <MC_GetSTMStateMotor1>
			if (currState == IDLE) {
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d1f2      	bne.n	80009fc <CalibrateSingleMotor+0x14>
				 uart_debug_print("Motor is now stopped \r\n");
 8000a16:	480e      	ldr	r0, [pc, #56]	@ (8000a50 <CalibrateSingleMotor+0x68>)
 8000a18:	f002 ffe6 	bl	80039e8 <uart_debug_print>
				return false;
			}
		}
	}

	MC_ProgramPositionCommandMotor1(0, 0); //Hold current position after Start
 8000a1c:	eddf 0a0d 	vldr	s1, [pc, #52]	@ 8000a54 <CalibrateSingleMotor+0x6c>
 8000a20:	eeb0 0a60 	vmov.f32	s0, s1
 8000a24:	f001 fa86 	bl	8001f34 <MC_ProgramPositionCommandMotor1>
	if (!MC_StartMotor1()) {
 8000a28:	f001 fa70 	bl	8001f0c <MC_StartMotor1>
 8000a2c:	b158      	cbz	r0, 8000a46 <CalibrateSingleMotor+0x5e>
//		HAL_Delay (1000);
//
//		MC_ProgramPositionCommandMotor1(0, 0); //Hold current position after Start
//		return MC_StartMotor1();
//	}
}
 8000a2e:	bd10      	pop	{r4, pc}
				uart_debug_print("Motor failed to stop in time!!\r\n");
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <CalibrateSingleMotor+0x70>)
 8000a32:	f002 ffd9 	bl	80039e8 <uart_debug_print>
				MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000a36:	4809      	ldr	r0, [pc, #36]	@ (8000a5c <CalibrateSingleMotor+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a3e:	f001 fb01 	bl	8002044 <MCI_FaultProcessing>
				return false;
 8000a42:	2000      	movs	r0, #0
}
 8000a44:	bd10      	pop	{r4, pc}
			 uart_debug_print("Start Failed...");
 8000a46:	4806      	ldr	r0, [pc, #24]	@ (8000a60 <CalibrateSingleMotor+0x78>)
 8000a48:	f002 ffce 	bl	80039e8 <uart_debug_print>
			return false; // start failed
 8000a4c:	e7f9      	b.n	8000a42 <CalibrateSingleMotor+0x5a>
 8000a4e:	bf00      	nop
 8000a50:	0800857c 	.word	0x0800857c
 8000a54:	00000000 	.word	0x00000000
 8000a58:	08008594 	.word	0x08008594
 8000a5c:	20000008 	.word	0x20000008
 8000a60:	080085b8 	.word	0x080085b8
 8000a64:	00000000 	.word	0x00000000

08000a68 <ControlSingleMotorPosition>:
//
//	return;
//}
//
//
void ControlSingleMotorPosition(ParsedCANID *CANMessageID, float newPosition){
 8000a68:	b510      	push	{r4, lr}
 8000a6a:	ed2d 8b02 	vpush	{d8}
 8000a6e:	4604      	mov	r4, r0
 8000a70:	eeb0 8a40 	vmov.f32	s16, s0

	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 8000a74:	f001 fa88 	bl	8001f88 <MC_GetSTMStateMotor1>

	switch (motorState){
 8000a78:	280a      	cmp	r0, #10
 8000a7a:	d02e      	beq.n	8000ada <ControlSingleMotorPosition+0x72>
 8000a7c:	280b      	cmp	r0, #11
 8000a7e:	4601      	mov	r1, r0
 8000a80:	d024      	beq.n	8000acc <ControlSingleMotorPosition+0x64>
 8000a82:	2806      	cmp	r0, #6
 8000a84:	d130      	bne.n	8000ae8 <ControlSingleMotorPosition+0x80>

	case(RUN):

		////////////////////////////////////////////////////////////////////////////////////////////////////////
		uart_debug_print("Motor State: Run\r\n");
 8000a86:	4822      	ldr	r0, [pc, #136]	@ (8000b10 <ControlSingleMotorPosition+0xa8>)
 8000a88:	f002 ffae 	bl	80039e8 <uart_debug_print>
			return -1;
	}
}

float OutputShaftDegreetoInput(ParsedCANID *CANMessageID, float mechDegreeInputShaft){
	switch(CANMessageID->motorID){
 8000a8c:	79a3      	ldrb	r3, [r4, #6]
 8000a8e:	2b09      	cmp	r3, #9
 8000a90:	d031      	beq.n	8000af6 <ControlSingleMotorPosition+0x8e>
 8000a92:	2b0a      	cmp	r3, #10
 8000a94:	d035      	beq.n	8000b02 <ControlSingleMotorPosition+0x9a>
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d130      	bne.n	8000afc <ControlSingleMotorPosition+0x94>

		case(WAIST):
			return (mechDegreeInputShaft*WAIST_GEAR_RATIO);
 8000a9a:	eef3 7a05 	vmov.f32	s15, #53	@ 0x41a80000  21.0
	return positionDegrees*(M_PI /180.0f);
 8000a9e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8000aa2:	ee17 0a90 	vmov	r0, s15
 8000aa6:	f7ff fe45 	bl	8000734 <__aeabi_f2d>
 8000aaa:	a317      	add	r3, pc, #92	@ (adr r3, 8000b08 <ControlSingleMotorPosition+0xa0>)
 8000aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ab0:	f7ff fbb2 	bl	8000218 <__aeabi_dmul>
 8000ab4:	f7ff ff1e 	bl	80008f4 <__aeabi_d2f>
 8000ab8:	ee00 0a10 	vmov	s0, r0
}
 8000abc:	ecbd 8b02 	vpop	{d8}
	MC_ProgramPositionCommandMotor1(inputShaftPositionInRad, 2);
 8000ac0:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
}
 8000ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	MC_ProgramPositionCommandMotor1(inputShaftPositionInRad, 2);
 8000ac8:	f001 ba34 	b.w	8001f34 <MC_ProgramPositionCommandMotor1>
}
 8000acc:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Over \r\n");
 8000ad0:	4810      	ldr	r0, [pc, #64]	@ (8000b14 <ControlSingleMotorPosition+0xac>)
}
 8000ad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_debug_print("Motor State: Fault Over \r\n");
 8000ad6:	f002 bf87 	b.w	80039e8 <uart_debug_print>
}
 8000ada:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Now \r\n");
 8000ade:	480e      	ldr	r0, [pc, #56]	@ (8000b18 <ControlSingleMotorPosition+0xb0>)
}
 8000ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_debug_print("Motor State: Fault Now \r\n");
 8000ae4:	f002 bf80 	b.w	80039e8 <uart_debug_print>
}
 8000ae8:	ecbd 8b02 	vpop	{d8}
	    uart_debug_print("Motor state is not valid. State:  %d\r\n", motorState);
 8000aec:	480b      	ldr	r0, [pc, #44]	@ (8000b1c <ControlSingleMotorPosition+0xb4>)
}
 8000aee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    uart_debug_print("Motor state is not valid. State:  %d\r\n", motorState);
 8000af2:	f002 bf79 	b.w	80039e8 <uart_debug_print>

		case(SHOULDER):
				return (mechDegreeInputShaft*SHOULDER_GEAR_RATIO);
 8000af6:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8000b20 <ControlSingleMotorPosition+0xb8>
 8000afa:	e7d0      	b.n	8000a9e <ControlSingleMotorPosition+0x36>
	switch(CANMessageID->motorID){
 8000afc:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000b24 <ControlSingleMotorPosition+0xbc>
 8000b00:	e7dc      	b.n	8000abc <ControlSingleMotorPosition+0x54>

		case(ELBOW):
				return (mechDegreeInputShaft*ELBOW_GEAR_RATIO);
 8000b02:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8000b28 <ControlSingleMotorPosition+0xc0>
 8000b06:	e7ca      	b.n	8000a9e <ControlSingleMotorPosition+0x36>
 8000b08:	a2529d39 	.word	0xa2529d39
 8000b0c:	3f91df46 	.word	0x3f91df46
 8000b10:	080085c8 	.word	0x080085c8
 8000b14:	080085dc 	.word	0x080085dc
 8000b18:	080085f8 	.word	0x080085f8
 8000b1c:	08008614 	.word	0x08008614
 8000b20:	42f00000 	.word	0x42f00000
 8000b24:	bc8efa35 	.word	0xbc8efa35
 8000b28:	42c80000 	.word	0x42c80000

08000b2c <runSingleMotorV2>:

	return;
}


void runSingleMotorV2(float newSpeed){
 8000b2c:	b570      	push	{r4, r5, r6, lr}
	 * The main purpose of this function is to make sure that the speed demanded falls within the actual range at which the motor
	 * is capable of operating in.
	 */

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	 uart_debug_print("Checking speed...\r\n");
 8000b2e:	488b      	ldr	r0, [pc, #556]	@ (8000d5c <runSingleMotorV2+0x230>)
void runSingleMotorV2(float newSpeed){
 8000b30:	ed2d 8b04 	vpush	{d8-d9}
 8000b34:	eeb0 8a40 	vmov.f32	s16, s0
	////////////////////////////////////////////////////////////////////////////////////////////////////////

    //Deadzone for small speeds
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000b38:	eddf 8a89 	vldr	s17, [pc, #548]	@ 8000d60 <runSingleMotorV2+0x234>
	 uart_debug_print("Checking speed...\r\n");
 8000b3c:	f002 ff54 	bl	80039e8 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000b40:	eef0 7ac8 	vabs.f32	s15, s16
 8000b44:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b4c:	d43c      	bmi.n	8000bc8 <runSingleMotorV2+0x9c>
    	targetSpeed = 0.0f;
    }

    // Check for out of bound setpoint
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000b4e:	ed9f 9a85 	vldr	s18, [pc, #532]	@ 8000d64 <runSingleMotorV2+0x238>
 8000b52:	eef4 7ac9 	vcmpe.f32	s15, s18
 8000b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5a:	f340 80b9 	ble.w	8000cd0 <runSingleMotorV2+0x1a4>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000b5e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000b62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b66:	f340 80d6 	ble.w	8000d16 <runSingleMotorV2+0x1ea>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000b6a:	f001 f9e9 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    // Convert from RPM to rad/s
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;

    // If the magnitude is below threshold, treat as 0 for more stable math
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000b6e:	eef0 7ac0 	vabs.f32	s15, s0
 8000b72:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7a:	f140 80d9 	bpl.w	8000d30 <runSingleMotorV2+0x204>
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000b7e:	f001 f9df 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000b82:	4879      	ldr	r0, [pc, #484]	@ (8000d68 <runSingleMotorV2+0x23c>)
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000b84:	4d79      	ldr	r5, [pc, #484]	@ (8000d6c <runSingleMotorV2+0x240>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000b86:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000b8a:	f002 ff2d 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000b8e:	4878      	ldr	r0, [pc, #480]	@ (8000d70 <runSingleMotorV2+0x244>)
 8000b90:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8000b94:	f002 ff28 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000b98:	4876      	ldr	r0, [pc, #472]	@ (8000d74 <runSingleMotorV2+0x248>)
 8000b9a:	2164      	movs	r1, #100	@ 0x64
 8000b9c:	f002 ff24 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000ba0:	4875      	ldr	r0, [pc, #468]	@ (8000d78 <runSingleMotorV2+0x24c>)
 8000ba2:	6829      	ldr	r1, [r5, #0]
 8000ba4:	f002 ff20 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8000ba8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000bac:	4873      	ldr	r0, [pc, #460]	@ (8000d7c <runSingleMotorV2+0x250>)
 8000bae:	ee17 1a90 	vmov	r1, s15
 8000bb2:	f002 ff19 	bl	80039e8 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8000bb6:	2064      	movs	r0, #100	@ 0x64
 8000bb8:	eeb0 0a49 	vmov.f32	s0, s18
 8000bbc:	f001 f9b2 	bl	8001f24 <MC_ProgramSpeedRampMotor1_F>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000bc0:	eeb0 8a49 	vmov.f32	s16, s18
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	e056      	b.n	8000c76 <runSingleMotorV2+0x14a>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000bc8:	f001 f9ba 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000bcc:	eef0 7ac0 	vabs.f32	s15, s0
 8000bd0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d454      	bmi.n	8000c84 <runSingleMotorV2+0x158>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000bda:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8000d80 <runSingleMotorV2+0x254>
    // Time (seconds) = delta_omega / alpha
    float deltaW = fabsf(w2 - w1);
    float timeSec = deltaW / alpha;

    // Convert to milliseconds
    float timeMs = timeSec * 1000.0f;
 8000bde:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8000d84 <runSingleMotorV2+0x258>
    	targetSpeed = 0.0f;
 8000be2:	ed9f 8a69 	vldr	s16, [pc, #420]	@ 8000d88 <runSingleMotorV2+0x25c>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000be6:	ee20 0a27 	vmul.f32	s0, s0, s15
    float timeMs = timeSec * 1000.0f;
 8000bea:	2600      	movs	r6, #0
    float deltaW = fabsf(w2 - w1);
 8000bec:	eef0 7ac0 	vabs.f32	s15, s0
    float timeMs = timeSec * 1000.0f;
 8000bf0:	ee27 7a87 	vmul.f32	s14, s15, s14

    // For safety, clamp time to at least 200 ms or so
    float tMin = isStartup ? RAMP_MIN_MS_STARTUP : RAMP_MIN_MS_RUN;
    if (timeMs < tMin)   timeMs = tMin;
 8000bf4:	eddf 6a65 	vldr	s13, [pc, #404]	@ 8000d8c <runSingleMotorV2+0x260>
 8000bf8:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c00:	f100 8086 	bmi.w	8000d10 <runSingleMotorV2+0x1e4>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000c04:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8000d90 <runSingleMotorV2+0x264>
 8000c08:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000c0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c10:	dc7a      	bgt.n	8000d08 <runSingleMotorV2+0x1dc>
    return (uint16_t)(timeMs + 0.5f);
 8000c12:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000c16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c1a:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000c1e:	ee17 3a10 	vmov	r3, s14
 8000c22:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c24:	4625      	mov	r5, r4
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000c26:	f001 f98b 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000c2a:	484f      	ldr	r0, [pc, #316]	@ (8000d68 <runSingleMotorV2+0x23c>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000c2c:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000c30:	f002 feda 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000c34:	484e      	ldr	r0, [pc, #312]	@ (8000d70 <runSingleMotorV2+0x244>)
 8000c36:	4631      	mov	r1, r6
 8000c38:	f002 fed6 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c3c:	4629      	mov	r1, r5
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000c3e:	4d4b      	ldr	r5, [pc, #300]	@ (8000d6c <runSingleMotorV2+0x240>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c40:	484c      	ldr	r0, [pc, #304]	@ (8000d74 <runSingleMotorV2+0x248>)
 8000c42:	f002 fed1 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000c46:	484c      	ldr	r0, [pc, #304]	@ (8000d78 <runSingleMotorV2+0x24c>)
 8000c48:	6829      	ldr	r1, [r5, #0]
 8000c4a:	f002 fecd 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8000c4e:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8000c52:	484a      	ldr	r0, [pc, #296]	@ (8000d7c <runSingleMotorV2+0x250>)
 8000c54:	ee17 1a90 	vmov	r1, s15
 8000c58:	f002 fec6 	bl	80039e8 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8000c5c:	4620      	mov	r0, r4
 8000c5e:	eeb0 0a48 	vmov.f32	s0, s16
 8000c62:	f001 f95f 	bl	8001f24 <MC_ProgramSpeedRampMotor1_F>
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000c66:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c6e:	bfcc      	ite	gt
 8000c70:	2201      	movgt	r2, #1
 8000c72:	f04f 32ff 	movle.w	r2, #4294967295
    g_lastCommandedSpeed = speedCmd;
 8000c76:	4b47      	ldr	r3, [pc, #284]	@ (8000d94 <runSingleMotorV2+0x268>)
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000c78:	602a      	str	r2, [r5, #0]
    g_lastCommandedSpeed = speedCmd;
 8000c7a:	ed83 8a00 	vstr	s16, [r3]
}
 8000c7e:	ecbd 8b04 	vpop	{d8-d9}
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000c84:	ed9f 8a40 	vldr	s16, [pc, #256]	@ 8000d88 <runSingleMotorV2+0x25c>
 8000c88:	2400      	movs	r4, #0
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000c8a:	f001 f959 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000c8e:	4836      	ldr	r0, [pc, #216]	@ (8000d68 <runSingleMotorV2+0x23c>)
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000c90:	4d36      	ldr	r5, [pc, #216]	@ (8000d6c <runSingleMotorV2+0x240>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000c92:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000c96:	f002 fea7 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000c9a:	4835      	ldr	r0, [pc, #212]	@ (8000d70 <runSingleMotorV2+0x244>)
 8000c9c:	4621      	mov	r1, r4
 8000c9e:	f002 fea3 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000ca2:	4834      	ldr	r0, [pc, #208]	@ (8000d74 <runSingleMotorV2+0x248>)
 8000ca4:	2164      	movs	r1, #100	@ 0x64
 8000ca6:	f002 fe9f 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000caa:	4833      	ldr	r0, [pc, #204]	@ (8000d78 <runSingleMotorV2+0x24c>)
 8000cac:	6829      	ldr	r1, [r5, #0]
 8000cae:	f002 fe9b 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8000cb2:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8000cb6:	4831      	ldr	r0, [pc, #196]	@ (8000d7c <runSingleMotorV2+0x250>)
 8000cb8:	ee17 1a90 	vmov	r1, s15
 8000cbc:	f002 fe94 	bl	80039e8 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8000cc0:	2064      	movs	r0, #100	@ 0x64
 8000cc2:	eeb0 0a48 	vmov.f32	s0, s16
 8000cc6:	f001 f92d 	bl	8001f24 <MC_ProgramSpeedRampMotor1_F>
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000cca:	f04f 32ff 	mov.w	r2, #4294967295
 8000cce:	e7d2      	b.n	8000c76 <runSingleMotorV2+0x14a>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000cd0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000cd4:	ee17 6a90 	vmov	r6, s15
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000cd8:	f001 f932 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000cdc:	eef0 7ac0 	vabs.f32	s15, s0
 8000ce0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce8:	d412      	bmi.n	8000d10 <runSingleMotorV2+0x1e4>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000cea:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000d80 <runSingleMotorV2+0x254>
 8000cee:	ee68 7a07 	vmul.f32	s15, s16, s14
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000cf2:	ee20 0a07 	vmul.f32	s0, s0, s14
    float deltaW = fabsf(w2 - w1);
 8000cf6:	ee77 7ac0 	vsub.f32	s15, s15, s0
    float timeMs = timeSec * 1000.0f;
 8000cfa:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000d84 <runSingleMotorV2+0x258>
    float deltaW = fabsf(w2 - w1);
 8000cfe:	eef0 7ae7 	vabs.f32	s15, s15
    float timeMs = timeSec * 1000.0f;
 8000d02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000d06:	e775      	b.n	8000bf4 <runSingleMotorV2+0xc8>
 8000d08:	f241 3588 	movw	r5, #5000	@ 0x1388
 8000d0c:	462c      	mov	r4, r5
 8000d0e:	e78a      	b.n	8000c26 <runSingleMotorV2+0xfa>
 8000d10:	2564      	movs	r5, #100	@ 0x64
 8000d12:	462c      	mov	r4, r5
 8000d14:	e787      	b.n	8000c26 <runSingleMotorV2+0xfa>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000d16:	f001 f913 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000d1a:	eef0 7ac0 	vabs.f32	s15, s0
 8000d1e:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d26:	d50e      	bpl.n	8000d46 <runSingleMotorV2+0x21a>
 8000d28:	4c1b      	ldr	r4, [pc, #108]	@ (8000d98 <runSingleMotorV2+0x26c>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000d2a:	ed9f 8a1c 	vldr	s16, [pc, #112]	@ 8000d9c <runSingleMotorV2+0x270>
 8000d2e:	e7ac      	b.n	8000c8a <runSingleMotorV2+0x15e>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d30:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8000d80 <runSingleMotorV2+0x254>
 8000d34:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8000da0 <runSingleMotorV2+0x274>
 8000d38:	ee20 0a07 	vmul.f32	s0, s0, s14
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000d3c:	eeb0 8a49 	vmov.f32	s16, s18
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d40:	f44f 6648 	mov.w	r6, #3200	@ 0xc80
 8000d44:	e7d7      	b.n	8000cf6 <runSingleMotorV2+0x1ca>
 8000d46:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000d80 <runSingleMotorV2+0x254>
 8000d4a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 8000da4 <runSingleMotorV2+0x278>
 8000d4e:	4e12      	ldr	r6, [pc, #72]	@ (8000d98 <runSingleMotorV2+0x26c>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000d50:	ed9f 8a12 	vldr	s16, [pc, #72]	@ 8000d9c <runSingleMotorV2+0x270>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d54:	ee20 0a07 	vmul.f32	s0, s0, s14
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8000d58:	e7cd      	b.n	8000cf6 <runSingleMotorV2+0x1ca>
 8000d5a:	bf00      	nop
 8000d5c:	0800863c 	.word	0x0800863c
 8000d60:	42480000 	.word	0x42480000
 8000d64:	45480000 	.word	0x45480000
 8000d68:	08008650 	.word	0x08008650
 8000d6c:	200003d8 	.word	0x200003d8
 8000d70:	08008690 	.word	0x08008690
 8000d74:	080086ac 	.word	0x080086ac
 8000d78:	080086cc 	.word	0x080086cc
 8000d7c:	080086e8 	.word	0x080086e8
 8000d80:	3dd67751 	.word	0x3dd67751
 8000d84:	3d29930c 	.word	0x3d29930c
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	4516f759 	.word	0x4516f759
 8000d90:	47ebe27a 	.word	0x47ebe27a
 8000d94:	200003dc 	.word	0x200003dc
 8000d98:	fffff380 	.word	0xfffff380
 8000d9c:	c5480000 	.word	0xc5480000
 8000da0:	43a78d37 	.word	0x43a78d37
 8000da4:	c3a78d37 	.word	0xc3a78d37

08000da8 <IdleSingleMotor>:
void IdleSingleMotor(float newSpeed){
 8000da8:	b538      	push	{r3, r4, r5, lr}
	 uart_debug_print("Checking speed...\r\n");
 8000daa:	4865      	ldr	r0, [pc, #404]	@ (8000f40 <IdleSingleMotor+0x198>)
void IdleSingleMotor(float newSpeed){
 8000dac:	ed2d 8b02 	vpush	{d8}
 8000db0:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 8000db4:	f002 fe18 	bl	80039e8 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000db8:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000f44 <IdleSingleMotor+0x19c>
 8000dbc:	eef0 7ac8 	vabs.f32	s15, s16
 8000dc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc8:	d506      	bpl.n	8000dd8 <IdleSingleMotor+0x30>
}
 8000dca:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 8000dce:	485e      	ldr	r0, [pc, #376]	@ (8000f48 <IdleSingleMotor+0x1a0>)
}
 8000dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 8000dd4:	f002 be08 	b.w	80039e8 <uart_debug_print>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000dd8:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8000f4c <IdleSingleMotor+0x1a4>
 8000ddc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de4:	dd08      	ble.n	8000df8 <IdleSingleMotor+0x50>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000de6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dee:	f340 8099 	ble.w	8000f24 <IdleSingleMotor+0x17c>
 8000df2:	eeb0 8a47 	vmov.f32	s16, s14
	if (fabsf(speedCmd) < 0.001){
 8000df6:	e00a      	b.n	8000e0e <IdleSingleMotor+0x66>
 8000df8:	ee17 0a90 	vmov	r0, s15
 8000dfc:	f7ff fc9a 	bl	8000734 <__aeabi_f2d>
 8000e00:	a34d      	add	r3, pc, #308	@ (adr r3, 8000f38 <IdleSingleMotor+0x190>)
 8000e02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e06:	f7ff fd4d 	bl	80008a4 <__aeabi_dcmplt>
 8000e0a:	2800      	cmp	r0, #0
 8000e0c:	d1dd      	bne.n	8000dca <IdleSingleMotor+0x22>
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8000e0e:	4d50      	ldr	r5, [pc, #320]	@ (8000f50 <IdleSingleMotor+0x1a8>)
    uint32_t now = HAL_GetTick();
 8000e10:	f002 fe42 	bl	8003a98 <HAL_GetTick>
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8000e14:	682b      	ldr	r3, [r5, #0]
 8000e16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e1a:	1ac3      	subs	r3, r0, r3
 8000e1c:	4293      	cmp	r3, r2
    uint32_t now = HAL_GetTick();
 8000e1e:	4604      	mov	r4, r0
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8000e20:	d866      	bhi.n	8000ef0 <IdleSingleMotor+0x148>
	 uart_debug_print("Amount of start attempts within 1s of eachother: %d\r\n", s_startWd.attempts);
 8000e22:	7929      	ldrb	r1, [r5, #4]
 8000e24:	484b      	ldr	r0, [pc, #300]	@ (8000f54 <IdleSingleMotor+0x1ac>)
 8000e26:	f002 fddf 	bl	80039e8 <uart_debug_print>
    if (++s_startWd.attempts >= START_WD_THRESHOLD) {
 8000e2a:	792b      	ldrb	r3, [r5, #4]
 8000e2c:	3301      	adds	r3, #1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	712b      	strb	r3, [r5, #4]
 8000e34:	d851      	bhi.n	8000eda <IdleSingleMotor+0x132>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, true);
 8000e36:	f001 f883 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000e3a:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8000f44 <IdleSingleMotor+0x19c>
 8000e3e:	eeb0 7ac0 	vabs.f32	s14, s0
 8000e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4a:	d419      	bmi.n	8000e80 <IdleSingleMotor+0xd8>
    float deltaW = fabsf(w2 - w1);
 8000e4c:	ee38 0a40 	vsub.f32	s0, s16, s0
 8000e50:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000f58 <IdleSingleMotor+0x1b0>
    if (timeMs < tMin)   timeMs = tMin;
 8000e54:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8000f5c <IdleSingleMotor+0x1b4>
    float deltaW = fabsf(w2 - w1);
 8000e58:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000e5c:	eeb0 0ac0 	vabs.f32	s0, s0
    if (timeMs < tMin)   timeMs = tMin;
 8000e60:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e68:	d40a      	bmi.n	8000e80 <IdleSingleMotor+0xd8>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000e6a:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8000f60 <IdleSingleMotor+0x1b8>
 8000e6e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000e72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e76:	dd48      	ble.n	8000f0a <IdleSingleMotor+0x162>
 8000e78:	f241 3588 	movw	r5, #5000	@ 0x1388
 8000e7c:	462c      	mov	r4, r5
 8000e7e:	e001      	b.n	8000e84 <IdleSingleMotor+0xdc>
 8000e80:	25c8      	movs	r5, #200	@ 0xc8
 8000e82:	462c      	mov	r4, r5
	 uart_debug_print("Motor will begin to ramp!\r\n");
 8000e84:	4837      	ldr	r0, [pc, #220]	@ (8000f64 <IdleSingleMotor+0x1bc>)
 8000e86:	f002 fdaf 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000e8a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000e8e:	4836      	ldr	r0, [pc, #216]	@ (8000f68 <IdleSingleMotor+0x1c0>)
 8000e90:	ee17 1a90 	vmov	r1, s15
 8000e94:	f002 fda8 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000e98:	4629      	mov	r1, r5
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000e9a:	4d34      	ldr	r5, [pc, #208]	@ (8000f6c <IdleSingleMotor+0x1c4>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000e9c:	4834      	ldr	r0, [pc, #208]	@ (8000f70 <IdleSingleMotor+0x1c8>)
 8000e9e:	f002 fda3 	bl	80039e8 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000ea2:	4834      	ldr	r0, [pc, #208]	@ (8000f74 <IdleSingleMotor+0x1cc>)
 8000ea4:	6829      	ldr	r1, [r5, #0]
 8000ea6:	f002 fd9f 	bl	80039e8 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime); // Must set a setpoint before startup --> otherwise unpredictable behavior
 8000eaa:	4620      	mov	r0, r4
 8000eac:	eeb0 0a48 	vmov.f32	s0, s16
 8000eb0:	f001 f838 	bl	8001f24 <MC_ProgramSpeedRampMotor1_F>
	if (!MC_StartMotor1()) {
 8000eb4:	f001 f82a 	bl	8001f0c <MC_StartMotor1>
 8000eb8:	2800      	cmp	r0, #0
 8000eba:	d036      	beq.n	8000f2a <IdleSingleMotor+0x182>
	g_lastCommandedSpeed = speedCmd;
 8000ebc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f78 <IdleSingleMotor+0x1d0>)
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000ebe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	g_lastCommandedSpeed = speedCmd;
 8000ec2:	ed83 8a00 	vstr	s16, [r3]
}
 8000ec6:	ecbd 8b02 	vpop	{d8}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ece:	bfcc      	ite	gt
 8000ed0:	2201      	movgt	r2, #1
 8000ed2:	f04f 32ff 	movle.w	r2, #4294967295
 8000ed6:	602a      	str	r2, [r5, #0]
}
 8000ed8:	bd38      	pop	{r3, r4, r5, pc}
        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000eda:	4828      	ldr	r0, [pc, #160]	@ (8000f7c <IdleSingleMotor+0x1d4>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ee2:	f001 f8af 	bl	8002044 <MCI_FaultProcessing>
        s_startWd.attempts = 0;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	712b      	strb	r3, [r5, #4]
}
 8000eea:	ecbd 8b02 	vpop	{d8}
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
    	 uart_debug_print("Safe amount of time since last start!\r\n");
 8000ef0:	4823      	ldr	r0, [pc, #140]	@ (8000f80 <IdleSingleMotor+0x1d8>)
 8000ef2:	f002 fd79 	bl	80039e8 <uart_debug_print>
    	 uart_debug_print("Amount of time since last start: %d \r\n", (int) now - s_startWd.firstTick );
 8000ef6:	6829      	ldr	r1, [r5, #0]
 8000ef8:	4822      	ldr	r0, [pc, #136]	@ (8000f84 <IdleSingleMotor+0x1dc>)
 8000efa:	1a61      	subs	r1, r4, r1
 8000efc:	f002 fd74 	bl	80039e8 <uart_debug_print>
        s_startWd.attempts  = 0;
 8000f00:	2300      	movs	r3, #0
 8000f02:	4619      	mov	r1, r3
        s_startWd.firstTick = now; // sets last time start was issued
 8000f04:	602c      	str	r4, [r5, #0]
        s_startWd.attempts  = 0;
 8000f06:	712b      	strb	r3, [r5, #4]
 8000f08:	e78c      	b.n	8000e24 <IdleSingleMotor+0x7c>
    return (uint16_t)(timeMs + 0.5f);
 8000f0a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000f88 <IdleSingleMotor+0x1e0>
 8000f0e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000f12:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000f16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f1a:	ee17 3a90 	vmov	r3, s15
 8000f1e:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000f20:	4625      	mov	r5, r4
 8000f22:	e7af      	b.n	8000e84 <IdleSingleMotor+0xdc>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000f24:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 8000f8c <IdleSingleMotor+0x1e4>
 8000f28:	e771      	b.n	8000e0e <IdleSingleMotor+0x66>
}
 8000f2a:	ecbd 8b02 	vpop	{d8}
		 uart_debug_print("Start Failed...");
 8000f2e:	4818      	ldr	r0, [pc, #96]	@ (8000f90 <IdleSingleMotor+0x1e8>)
}
 8000f30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 uart_debug_print("Start Failed...");
 8000f34:	f002 bd58 	b.w	80039e8 <uart_debug_print>
 8000f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f3c:	3f50624d 	.word	0x3f50624d
 8000f40:	0800863c 	.word	0x0800863c
 8000f44:	42480000 	.word	0x42480000
 8000f48:	08008708 	.word	0x08008708
 8000f4c:	45480000 	.word	0x45480000
 8000f50:	200003d0 	.word	0x200003d0
 8000f54:	080087a8 	.word	0x080087a8
 8000f58:	3dd67751 	.word	0x3dd67751
 8000f5c:	4516f759 	.word	0x4516f759
 8000f60:	476be27a 	.word	0x476be27a
 8000f64:	080087e0 	.word	0x080087e0
 8000f68:	08008690 	.word	0x08008690
 8000f6c:	200003d8 	.word	0x200003d8
 8000f70:	080086ac 	.word	0x080086ac
 8000f74:	080086cc 	.word	0x080086cc
 8000f78:	200003dc 	.word	0x200003dc
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	08008758 	.word	0x08008758
 8000f84:	08008780 	.word	0x08008780
 8000f88:	3da9930c 	.word	0x3da9930c
 8000f8c:	c5480000 	.word	0xc5480000
 8000f90:	080085b8 	.word	0x080085b8

08000f94 <safeStopMotor>:
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 8000f94:	b570      	push	{r4, r5, r6, lr}
 8000f96:	4604      	mov	r4, r0
 8000f98:	ed2d 8b0a 	vpush	{d8-d12}
	 uart_debug_print("Performing a safe stop\r\n");
 8000f9c:	489e      	ldr	r0, [pc, #632]	@ (8001218 <safeStopMotor+0x284>)
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 8000f9e:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Performing a safe stop\r\n");
 8000fa2:	f002 fd21 	bl	80039e8 <uart_debug_print>
	if (fabsf(currentSpeedRpm) > SAFE_STOP_SPEED_THRESHOLD && motorState != START && motorState != SWITCH_OVER){
 8000fa6:	eddf 7a9d 	vldr	s15, [pc, #628]	@ 800121c <safeStopMotor+0x288>
 8000faa:	eeb0 7ae8 	vabs.f32	s14, s17
 8000fae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000fb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb6:	f340 8088 	ble.w	80010ca <safeStopMotor+0x136>
 8000fba:	2c04      	cmp	r4, #4
 8000fbc:	f000 8085 	beq.w	80010ca <safeStopMotor+0x136>
 8000fc0:	2c13      	cmp	r4, #19
 8000fc2:	f000 8082 	beq.w	80010ca <safeStopMotor+0x136>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 8000fc6:	4896      	ldr	r0, [pc, #600]	@ (8001220 <safeStopMotor+0x28c>)
 8000fc8:	ed9f ca96 	vldr	s24, [pc, #600]	@ 8001224 <safeStopMotor+0x290>
 8000fcc:	ed9f ba96 	vldr	s22, [pc, #600]	@ 8001228 <safeStopMotor+0x294>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000fd0:	eddf 9a96 	vldr	s19, [pc, #600]	@ 800122c <safeStopMotor+0x298>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000fd4:	ed9f 9a96 	vldr	s18, [pc, #600]	@ 8001230 <safeStopMotor+0x29c>
    if (timeMs < tMin)   timeMs = tMin;
 8000fd8:	eddf aa96 	vldr	s21, [pc, #600]	@ 8001234 <safeStopMotor+0x2a0>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000fdc:	eddf ba96 	vldr	s23, [pc, #600]	@ 8001238 <safeStopMotor+0x2a4>
    return (uint16_t)(timeMs + 0.5f);
 8000fe0:	eddf ca96 	vldr	s25, [pc, #600]	@ 800123c <safeStopMotor+0x2a8>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 8000fe4:	f002 fd00 	bl	80039e8 <uart_debug_print>
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 8000fe8:	eddf 7a95 	vldr	s15, [pc, #596]	@ 8001240 <safeStopMotor+0x2ac>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8000fec:	4b95      	ldr	r3, [pc, #596]	@ (8001244 <safeStopMotor+0x2b0>)
 8000fee:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8000ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff6:	bfd8      	it	le
 8000ff8:	eeb0 ca67 	vmovle.f32	s24, s15
 8000ffc:	ed93 7a00 	vldr	s14, [r3]
		float deltaSpeed = currentSpeedRpm - rampTarget;
 8001000:	ee78 6acc 	vsub.f32	s13, s17, s24
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8001004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001008:	eeb0 6ae6 	vabs.f32	s12, s13
 800100c:	eec6 7a07 	vdiv.f32	s15, s12, s14
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001010:	f04f 0401 	mov.w	r4, #1
 8001014:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001248 <safeStopMotor+0x2b4>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8001018:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101c:	bfd8      	it	le
 800101e:	eeb0 ba47 	vmovle.f32	s22, s14
 8001022:	ee17 6a90 	vmov	r6, s15
		if (rampDownDivisions < 1) rampDownDivisions = 1;  // Ensure at least one division
 8001026:	42a6      	cmp	r6, r4
 8001028:	bfb8      	it	lt
 800102a:	4626      	movlt	r6, r4
		float stepSize = deltaSpeed / rampDownDivisions;
 800102c:	ee07 6a90 	vmov	s15, r6
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001034:	ee86 aaa7 	vdiv.f32	s20, s13, s15
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001038:	e02a      	b.n	8001090 <safeStopMotor+0xfc>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 800103a:	ee60 7a29 	vmul.f32	s15, s0, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 800103e:	eef4 6ac9 	vcmpe.f32	s13, s18
 8001042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float deltaW = fabsf(w2 - w1);
 8001046:	bf54      	ite	pl
 8001048:	ee37 7a67 	vsubpl.f32	s14, s14, s15
        w2 = 0.0f;
 800104c:	eeb1 7a67 	vnegmi.f32	s14, s15
    float deltaW = fabsf(w2 - w1);
 8001050:	eeb0 7ac7 	vabs.f32	s14, s14
    if (timeMs < tMin)   timeMs = tMin;
 8001054:	eeb4 7aea 	vcmpe.f32	s14, s21
 8001058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800105c:	d432      	bmi.n	80010c4 <safeStopMotor+0x130>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 800105e:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	dc72      	bgt.n	800114e <safeStopMotor+0x1ba>
    return (uint16_t)(timeMs + 0.5f);
 8001068:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800106c:	eee7 7a2c 	vfma.f32	s15, s14, s25
 8001070:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001074:	ee17 3a90 	vmov	r3, s15
 8001078:	b298      	uxth	r0, r3
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 800107a:	4605      	mov	r5, r0
			MC_ProgramSpeedRampMotor1_F(intermediateTarget, rampTime);
 800107c:	eeb0 0a48 	vmov.f32	s0, s16
 8001080:	f000 ff50 	bl	8001f24 <MC_ProgramSpeedRampMotor1_F>
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001084:	3401      	adds	r4, #1
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 8001086:	4628      	mov	r0, r5
 8001088:	f002 fd0c 	bl	8003aa4 <HAL_Delay>
		for (int i = 1; i <= rampDownDivisions; i++) {
 800108c:	42a6      	cmp	r6, r4
 800108e:	db62      	blt.n	8001156 <safeStopMotor+0x1c2>
			float intermediateTarget = currentSpeedRpm - (stepSize * i);
 8001090:	ee07 4a90 	vmov	s15, r4
 8001094:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001098:	eeb0 8a68 	vmov.f32	s16, s17
 800109c:	eea7 8aca 	vfms.f32	s16, s15, s20
			uint16_t rampTime = computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), intermediateTarget, false);
 80010a0:	f000 ff4e 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80010a4:	eef0 7ac0 	vabs.f32	s15, s0
 80010a8:	eef4 7ac9 	vcmpe.f32	s15, s18
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80010b0:	ee28 7a29 	vmul.f32	s14, s16, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 80010b4:	eef0 6ac8 	vabs.f32	s13, s16
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80010b8:	d5bf      	bpl.n	800103a <safeStopMotor+0xa6>
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 80010ba:	eef4 6ac9 	vcmpe.f32	s13, s18
 80010be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c2:	d5c5      	bpl.n	8001050 <safeStopMotor+0xbc>
 80010c4:	2564      	movs	r5, #100	@ 0x64
 80010c6:	4628      	mov	r0, r5
 80010c8:	e7d8      	b.n	800107c <safeStopMotor+0xe8>
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 80010ca:	4860      	ldr	r0, [pc, #384]	@ (800124c <safeStopMotor+0x2b8>)
			 uart_debug_print("current state is %d\r\n", currState);
 80010cc:	4e60      	ldr	r6, [pc, #384]	@ (8001250 <safeStopMotor+0x2bc>)
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 80010ce:	f002 fc8b 	bl	80039e8 <uart_debug_print>
	    MC_StopMotor1();
 80010d2:	f000 ff21 	bl	8001f18 <MC_StopMotor1>
		uint32_t tStart = HAL_GetTick();
 80010d6:	f002 fcdf 	bl	8003a98 <HAL_GetTick>
 80010da:	4605      	mov	r5, r0
 80010dc:	e005      	b.n	80010ea <safeStopMotor+0x156>
		    if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 80010de:	f002 fcdb 	bl	8003a98 <HAL_GetTick>
 80010e2:	1b40      	subs	r0, r0, r5
 80010e4:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80010e8:	d81e      	bhi.n	8001128 <safeStopMotor+0x194>
			HAL_Delay(5); // poll the state until it IDLE
 80010ea:	2005      	movs	r0, #5
 80010ec:	f002 fcda 	bl	8003aa4 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 80010f0:	f000 ff4a 	bl	8001f88 <MC_GetSTMStateMotor1>
 80010f4:	4604      	mov	r4, r0
			 uart_debug_print("current state is %d\r\n", currState);
 80010f6:	4601      	mov	r1, r0
 80010f8:	4630      	mov	r0, r6
 80010fa:	f002 fc75 	bl	80039e8 <uart_debug_print>
			if (currState == IDLE) {
 80010fe:	2c00      	cmp	r4, #0
 8001100:	d1ed      	bne.n	80010de <safeStopMotor+0x14a>
				 uart_debug_print("Block wait \r\n");
 8001102:	4854      	ldr	r0, [pc, #336]	@ (8001254 <safeStopMotor+0x2c0>)
 8001104:	f002 fc70 	bl	80039e8 <uart_debug_print>
				HAL_Delay(WAIT_AFTER_STOP); // Tune this value for seemless transition
 8001108:	20fa      	movs	r0, #250	@ 0xfa
 800110a:	f002 fccb 	bl	8003aa4 <HAL_Delay>
				 uart_debug_print("Motor is now stopped \r\n");
 800110e:	4852      	ldr	r0, [pc, #328]	@ (8001258 <safeStopMotor+0x2c4>)
 8001110:	f002 fc6a 	bl	80039e8 <uart_debug_print>
}
 8001114:	ecbd 8b0a 	vpop	{d8-d12}
				s_previousDirection = 0;
 8001118:	4950      	ldr	r1, [pc, #320]	@ (800125c <safeStopMotor+0x2c8>)
				g_lastCommandedSpeed = 0;
 800111a:	4b51      	ldr	r3, [pc, #324]	@ (8001260 <safeStopMotor+0x2cc>)
				s_previousDirection = 0;
 800111c:	2000      	movs	r0, #0
				g_lastCommandedSpeed = 0;
 800111e:	2200      	movs	r2, #0
				s_previousDirection = 0;
 8001120:	6008      	str	r0, [r1, #0]
				g_lastCommandedSpeed = 0;
 8001122:	601a      	str	r2, [r3, #0]
				return true;
 8001124:	2001      	movs	r0, #1
}
 8001126:	bd70      	pop	{r4, r5, r6, pc}
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 8001128:	484e      	ldr	r0, [pc, #312]	@ (8001264 <safeStopMotor+0x2d0>)
			    s_previousDirection = 0;
 800112a:	4d4c      	ldr	r5, [pc, #304]	@ (800125c <safeStopMotor+0x2c8>)
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 800112c:	f002 fc5c 	bl	80039e8 <uart_debug_print>
			    g_lastCommandedSpeed = 0;
 8001130:	4b4b      	ldr	r3, [pc, #300]	@ (8001260 <safeStopMotor+0x2cc>)
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8001132:	484d      	ldr	r0, [pc, #308]	@ (8001268 <safeStopMotor+0x2d4>)
			    s_previousDirection = 0;
 8001134:	2400      	movs	r4, #0
			    g_lastCommandedSpeed = 0;
 8001136:	2100      	movs	r1, #0
 8001138:	6019      	str	r1, [r3, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 800113a:	4622      	mov	r2, r4
 800113c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
			    s_previousDirection = 0;
 8001140:	602c      	str	r4, [r5, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8001142:	f000 ff7f 	bl	8002044 <MCI_FaultProcessing>
}
 8001146:	ecbd 8b0a 	vpop	{d8-d12}
		        return false;
 800114a:	4620      	mov	r0, r4
}
 800114c:	bd70      	pop	{r4, r5, r6, pc}
 800114e:	f241 3588 	movw	r5, #5000	@ 0x1388
 8001152:	4628      	mov	r0, r5
 8001154:	e792      	b.n	800107c <safeStopMotor+0xe8>
		uint16_t finalRampTime = computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), rampTarget, false);
 8001156:	f000 fef3 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 800115a:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8001230 <safeStopMotor+0x29c>
 800115e:	eeb0 7ac0 	vabs.f32	s14, s0
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	d450      	bmi.n	800120e <safeStopMotor+0x27a>
    float deltaW = fabsf(w2 - w1);
 800116c:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800122c <safeStopMotor+0x298>
    if (timeMs < tMin)   timeMs = tMin;
 8001170:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001234 <safeStopMotor+0x2a0>
    float deltaW = fabsf(w2 - w1);
 8001174:	eea0 ba67 	vfms.f32	s22, s0, s15
 8001178:	eef0 7acb 	vabs.f32	s15, s22
    if (timeMs < tMin)   timeMs = tMin;
 800117c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001184:	d443      	bmi.n	800120e <safeStopMotor+0x27a>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8001186:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001238 <safeStopMotor+0x2a4>
 800118a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	dc3e      	bgt.n	8001212 <safeStopMotor+0x27e>
    return (uint16_t)(timeMs + 0.5f);
 8001194:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800123c <safeStopMotor+0x2a8>
 8001198:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800119c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80011a0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80011a4:	ee17 3a90 	vmov	r3, s15
 80011a8:	b298      	uxth	r0, r3
		MC_ProgramSpeedRampMotor1_F(rampTarget, finalRampTime);
 80011aa:	eeb0 0a4c 	vmov.f32	s0, s24
 80011ae:	f000 feb9 	bl	8001f24 <MC_ProgramSpeedRampMotor1_F>
		uint32_t tStart = HAL_GetTick();
 80011b2:	f002 fc71 	bl	8003a98 <HAL_GetTick>
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 80011b6:	ed9f 8a2d 	vldr	s16, [pc, #180]	@ 800126c <safeStopMotor+0x2d8>
		uint32_t tStart = HAL_GetTick();
 80011ba:	4604      	mov	r4, r0
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 80011bc:	e00a      	b.n	80011d4 <safeStopMotor+0x240>
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 80011be:	f002 fc6b 	bl	8003a98 <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	1b1b      	subs	r3, r3, r4
 80011c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
			HAL_Delay(10);
 80011ca:	f04f 000a 	mov.w	r0, #10
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 80011ce:	d80a      	bhi.n	80011e6 <safeStopMotor+0x252>
			HAL_Delay(10);
 80011d0:	f002 fc68 	bl	8003aa4 <HAL_Delay>
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 80011d4:	f000 feb4 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
 80011d8:	eeb0 0ac0 	vabs.f32	s0, s0
 80011dc:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	dceb      	bgt.n	80011be <safeStopMotor+0x22a>
	    MC_StopMotor1();
 80011e6:	f000 fe97 	bl	8001f18 <MC_StopMotor1>
	    tStart = HAL_GetTick();
 80011ea:	f002 fc55 	bl	8003a98 <HAL_GetTick>
 80011ee:	4604      	mov	r4, r0
 80011f0:	e005      	b.n	80011fe <safeStopMotor+0x26a>
		    if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 80011f2:	f002 fc51 	bl	8003a98 <HAL_GetTick>
 80011f6:	1b00      	subs	r0, r0, r4
 80011f8:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80011fc:	d894      	bhi.n	8001128 <safeStopMotor+0x194>
			HAL_Delay(5); // poll the state until it IDLE
 80011fe:	2005      	movs	r0, #5
 8001200:	f002 fc50 	bl	8003aa4 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8001204:	f000 fec0 	bl	8001f88 <MC_GetSTMStateMotor1>
			if (currState == IDLE) {
 8001208:	2800      	cmp	r0, #0
 800120a:	d1f2      	bne.n	80011f2 <safeStopMotor+0x25e>
 800120c:	e779      	b.n	8001102 <safeStopMotor+0x16e>
 800120e:	2064      	movs	r0, #100	@ 0x64
 8001210:	e7cb      	b.n	80011aa <safeStopMotor+0x216>
 8001212:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001216:	e7c8      	b.n	80011aa <safeStopMotor+0x216>
 8001218:	080087fc 	.word	0x080087fc
 800121c:	43c80000 	.word	0x43c80000
 8001220:	08008818 	.word	0x08008818
 8001224:	42c80000 	.word	0x42c80000
 8001228:	41278d37 	.word	0x41278d37
 800122c:	3dd67751 	.word	0x3dd67751
 8001230:	42480000 	.word	0x42480000
 8001234:	4516f759 	.word	0x4516f759
 8001238:	47ebe27a 	.word	0x47ebe27a
 800123c:	3d29930c 	.word	0x3d29930c
 8001240:	c2c80000 	.word	0xc2c80000
 8001244:	20000000 	.word	0x20000000
 8001248:	c1278d37 	.word	0xc1278d37
 800124c:	0800884c 	.word	0x0800884c
 8001250:	080088a4 	.word	0x080088a4
 8001254:	0800883c 	.word	0x0800883c
 8001258:	0800857c 	.word	0x0800857c
 800125c:	200003d8 	.word	0x200003d8
 8001260:	200003dc 	.word	0x200003dc
 8001264:	08008594 	.word	0x08008594
 8001268:	20000008 	.word	0x20000008
 800126c:	42f00000 	.word	0x42f00000

08001270 <StartSingleMotor>:
void StartSingleMotor (float newSpeed){
 8001270:	b508      	push	{r3, lr}
	 uart_debug_print("Checking speed...\r\n");
 8001272:	483b      	ldr	r0, [pc, #236]	@ (8001360 <StartSingleMotor+0xf0>)
void StartSingleMotor (float newSpeed){
 8001274:	ed2d 8b02 	vpush	{d8}
 8001278:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 800127c:	f002 fbb4 	bl	80039e8 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8001280:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8001364 <StartSingleMotor+0xf4>
 8001284:	eef0 7ac8 	vabs.f32	s15, s16
 8001288:	eef4 7ac7 	vcmpe.f32	s15, s14
 800128c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001290:	d43b      	bmi.n	800130a <StartSingleMotor+0x9a>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8001292:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001368 <StartSingleMotor+0xf8>
 8001296:	eef4 7ac7 	vcmpe.f32	s15, s14
 800129a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800129e:	dc25      	bgt.n	80012ec <StartSingleMotor+0x7c>
	if (fabs(speedCmd) < 0.001){
 80012a0:	ee17 0a90 	vmov	r0, s15
 80012a4:	f7ff fa46 	bl	8000734 <__aeabi_f2d>
 80012a8:	a32b      	add	r3, pc, #172	@ (adr r3, 8001358 <StartSingleMotor+0xe8>)
 80012aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ae:	f7ff faf9 	bl	80008a4 <__aeabi_dcmplt>
 80012b2:	bb50      	cbnz	r0, 800130a <StartSingleMotor+0x9a>
	 uart_debug_print("Checking reversing...\r\n");
 80012b4:	482d      	ldr	r0, [pc, #180]	@ (800136c <StartSingleMotor+0xfc>)
 80012b6:	f002 fb97 	bl	80039e8 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 80012ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <StartSingleMotor+0x100>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	dd3a      	ble.n	8001338 <StartSingleMotor+0xc8>
 80012c2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80012c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ca:	d51b      	bpl.n	8001304 <StartSingleMotor+0x94>
		if (safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), START)){
 80012cc:	f000 fe38 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
 80012d0:	2004      	movs	r0, #4
 80012d2:	f7ff fe5f 	bl	8000f94 <safeStopMotor>
 80012d6:	b340      	cbz	r0, 800132a <StartSingleMotor+0xba>
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 80012d8:	4826      	ldr	r0, [pc, #152]	@ (8001374 <StartSingleMotor+0x104>)
 80012da:	f002 fb85 	bl	80039e8 <uart_debug_print>
}
 80012de:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 80012e2:	4825      	ldr	r0, [pc, #148]	@ (8001378 <StartSingleMotor+0x108>)
}
 80012e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 80012e8:	f002 bb7e 	b.w	80039e8 <uart_debug_print>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 80012ec:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80012f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 uart_debug_print("Checking reversing...\r\n");
 80012f4:	481d      	ldr	r0, [pc, #116]	@ (800136c <StartSingleMotor+0xfc>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 80012f6:	dd26      	ble.n	8001346 <StartSingleMotor+0xd6>
	 uart_debug_print("Checking reversing...\r\n");
 80012f8:	f002 fb76 	bl	80039e8 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 80012fc:	4b1c      	ldr	r3, [pc, #112]	@ (8001370 <StartSingleMotor+0x100>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b00      	cmp	r3, #0
 8001302:	dd27      	ble.n	8001354 <StartSingleMotor+0xe4>
}
 8001304:	ecbd 8b02 	vpop	{d8}
 8001308:	bd08      	pop	{r3, pc}
		uart_debug_print("Motor received command that is or was considered to be 0\r\n");
 800130a:	481c      	ldr	r0, [pc, #112]	@ (800137c <StartSingleMotor+0x10c>)
 800130c:	f002 fb6c 	bl	80039e8 <uart_debug_print>
		if (safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), START)){
 8001310:	f000 fe16 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
 8001314:	2004      	movs	r0, #4
 8001316:	f7ff fe3d 	bl	8000f94 <safeStopMotor>
 800131a:	b130      	cbz	r0, 800132a <StartSingleMotor+0xba>
}
 800131c:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001320:	4814      	ldr	r0, [pc, #80]	@ (8001374 <StartSingleMotor+0x104>)
}
 8001322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001326:	f002 bb5f 	b.w	80039e8 <uart_debug_print>
}
 800132a:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 800132e:	4814      	ldr	r0, [pc, #80]	@ (8001380 <StartSingleMotor+0x110>)
}
 8001330:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 8001334:	f002 bb58 	b.w	80039e8 <uart_debug_print>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8001338:	d0e4      	beq.n	8001304 <StartSingleMotor+0x94>
 800133a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800133e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001342:	dcc3      	bgt.n	80012cc <StartSingleMotor+0x5c>
 8001344:	e7de      	b.n	8001304 <StartSingleMotor+0x94>
	 uart_debug_print("Checking reversing...\r\n");
 8001346:	f002 fb4f 	bl	80039e8 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 800134a:	4b09      	ldr	r3, [pc, #36]	@ (8001370 <StartSingleMotor+0x100>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	dcbc      	bgt.n	80012cc <StartSingleMotor+0x5c>
 8001352:	e7d7      	b.n	8001304 <StartSingleMotor+0x94>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8001354:	d1ba      	bne.n	80012cc <StartSingleMotor+0x5c>
 8001356:	e7d5      	b.n	8001304 <StartSingleMotor+0x94>
 8001358:	d2f1a9fc 	.word	0xd2f1a9fc
 800135c:	3f50624d 	.word	0x3f50624d
 8001360:	0800863c 	.word	0x0800863c
 8001364:	42480000 	.word	0x42480000
 8001368:	45480000 	.word	0x45480000
 800136c:	080088bc 	.word	0x080088bc
 8001370:	200003d8 	.word	0x200003d8
 8001374:	08008910 	.word	0x08008910
 8001378:	08008968 	.word	0x08008968
 800137c:	080088d4 	.word	0x080088d4
 8001380:	08008938 	.word	0x08008938

08001384 <ControlSingleMotor>:
void ControlSingleMotor(float newSpeed){
 8001384:	b508      	push	{r3, lr}
 8001386:	ed2d 8b02 	vpush	{d8}
 800138a:	eeb0 8a40 	vmov.f32	s16, s0
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 800138e:	f000 fdfb 	bl	8001f88 <MC_GetSTMStateMotor1>
	switch (motorState){
 8001392:	2813      	cmp	r0, #19
 8001394:	d80b      	bhi.n	80013ae <ControlSingleMotor+0x2a>
 8001396:	e8df f000 	tbb	[pc, r0]
 800139a:	0a12      	.short	0x0a12
 800139c:	0a1d0a0a 	.word	0x0a1d0a0a
 80013a0:	0a0a0a28 	.word	0x0a0a0a28
 80013a4:	0a0a3a33 	.word	0x0a0a3a33
 80013a8:	410a0a0a 	.word	0x410a0a0a
 80013ac:	430a      	.short	0x430a
}
 80013ae:	ecbd 8b02 	vpop	{d8}
 80013b2:	4601      	mov	r1, r0
 80013b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    uart_debug_print("Motor state not explicitly handled: %d\r\n", motorState);
 80013b8:	481a      	ldr	r0, [pc, #104]	@ (8001424 <ControlSingleMotor+0xa0>)
 80013ba:	f002 bb15 	b.w	80039e8 <uart_debug_print>
		uart_debug_print("Motor State: Idle\r\n");
 80013be:	481a      	ldr	r0, [pc, #104]	@ (8001428 <ControlSingleMotor+0xa4>)
 80013c0:	f002 fb12 	bl	80039e8 <uart_debug_print>
		IdleSingleMotor(newSpeed);
 80013c4:	eeb0 0a48 	vmov.f32	s0, s16
}
 80013c8:	ecbd 8b02 	vpop	{d8}
 80013cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		IdleSingleMotor(newSpeed);
 80013d0:	f7ff bcea 	b.w	8000da8 <IdleSingleMotor>
		uart_debug_print("Motor State: Start\r\n");
 80013d4:	4815      	ldr	r0, [pc, #84]	@ (800142c <ControlSingleMotor+0xa8>)
		uart_debug_print("Motor State: Switch over\r\n");
 80013d6:	f002 fb07 	bl	80039e8 <uart_debug_print>
		StartSingleMotor(newSpeed);
 80013da:	eeb0 0a48 	vmov.f32	s0, s16
}
 80013de:	ecbd 8b02 	vpop	{d8}
 80013e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StartSingleMotor(newSpeed);
 80013e6:	f7ff bf43 	b.w	8001270 <StartSingleMotor>
		uart_debug_print("Motor State: Run\r\n");
 80013ea:	4811      	ldr	r0, [pc, #68]	@ (8001430 <ControlSingleMotor+0xac>)
 80013ec:	f002 fafc 	bl	80039e8 <uart_debug_print>
		runSingleMotorV2(newSpeed);
 80013f0:	eeb0 0a48 	vmov.f32	s0, s16
}
 80013f4:	ecbd 8b02 	vpop	{d8}
 80013f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		runSingleMotorV2(newSpeed);
 80013fc:	f7ff bb96 	b.w	8000b2c <runSingleMotorV2>
}
 8001400:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Now \r\n");
 8001404:	480b      	ldr	r0, [pc, #44]	@ (8001434 <ControlSingleMotor+0xb0>)
}
 8001406:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Now \r\n");
 800140a:	f002 baed 	b.w	80039e8 <uart_debug_print>
}
 800140e:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001412:	4809      	ldr	r0, [pc, #36]	@ (8001438 <ControlSingleMotor+0xb4>)
}
 8001414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001418:	f002 bae6 	b.w	80039e8 <uart_debug_print>
		uart_debug_print("Motor State: Offset Calibration\r\n");
 800141c:	4807      	ldr	r0, [pc, #28]	@ (800143c <ControlSingleMotor+0xb8>)
 800141e:	e7da      	b.n	80013d6 <ControlSingleMotor+0x52>
		uart_debug_print("Motor State: Switch over\r\n");
 8001420:	4807      	ldr	r0, [pc, #28]	@ (8001440 <ControlSingleMotor+0xbc>)
 8001422:	e7d8      	b.n	80013d6 <ControlSingleMotor+0x52>
 8001424:	08008a04 	.word	0x08008a04
 8001428:	08008998 	.word	0x08008998
 800142c:	080089ac 	.word	0x080089ac
 8001430:	080085c8 	.word	0x080085c8
 8001434:	080085f8 	.word	0x080085f8
 8001438:	080085dc 	.word	0x080085dc
 800143c:	080089e0 	.word	0x080089e0
 8001440:	080089c4 	.word	0x080089c4

08001444 <Process_Multiple_ESC_Command>:
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001444:	b538      	push	{r3, r4, r5, lr}
 8001446:	4604      	mov	r4, r0
 8001448:	ed2d 8b02 	vpush	{d8}
	 uart_debug_print("Running Multiple Motors...\r\n");
 800144c:	481d      	ldr	r0, [pc, #116]	@ (80014c4 <Process_Multiple_ESC_Command+0x80>)
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 800144e:	460d      	mov	r5, r1
	 uart_debug_print("Running Multiple Motors...\r\n");
 8001450:	f002 faca 	bl	80039e8 <uart_debug_print>
	switch(CANMessageID->runSpec){
 8001454:	7963      	ldrb	r3, [r4, #5]
 8001456:	b323      	cbz	r3, 80014a2 <Process_Multiple_ESC_Command+0x5e>
 8001458:	2b02      	cmp	r3, #2
 800145a:	d002      	beq.n	8001462 <Process_Multiple_ESC_Command+0x1e>
}
 800145c:	ecbd 8b02 	vpop	{d8}
 8001460:	bd38      	pop	{r3, r4, r5, pc}
    return value;
}


int16_t extract_multiple_speeds(const uint8_t *rxData){
    uint16_t offset = ESC_ID * 2;
 8001462:	4b19      	ldr	r3, [pc, #100]	@ (80014c8 <Process_Multiple_ESC_Command+0x84>)
			 uart_debug_print("Running This Motor\r\n");
 8001464:	4819      	ldr	r0, [pc, #100]	@ (80014cc <Process_Multiple_ESC_Command+0x88>)
    uint16_t offset = ESC_ID * 2;
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	005b      	lsls	r3, r3, #1
    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
 800146a:	b29b      	uxth	r3, r3
 800146c:	18ea      	adds	r2, r5, r3
 800146e:	5cec      	ldrb	r4, [r5, r3]
 8001470:	7853      	ldrb	r3, [r2, #1]
 8001472:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001476:	b224      	sxth	r4, r4
			 uart_debug_print("Running This Motor\r\n");
 8001478:	f002 fab6 	bl	80039e8 <uart_debug_print>
			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
 800147c:	4621      	mov	r1, r4
 800147e:	4814      	ldr	r0, [pc, #80]	@ (80014d0 <Process_Multiple_ESC_Command+0x8c>)
 8001480:	f002 fab2 	bl	80039e8 <uart_debug_print>
			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 8001484:	4b13      	ldr	r3, [pc, #76]	@ (80014d4 <Process_Multiple_ESC_Command+0x90>)
 8001486:	4814      	ldr	r0, [pc, #80]	@ (80014d8 <Process_Multiple_ESC_Command+0x94>)
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	f002 faad 	bl	80039e8 <uart_debug_print>
}
 800148e:	ecbd 8b02 	vpop	{d8}
			ControlSingleMotor(curESCSpeed);
 8001492:	ee07 4a90 	vmov	s15, r4
}
 8001496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ControlSingleMotor(curESCSpeed);
 800149a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800149e:	f7ff bf71 	b.w	8001384 <ControlSingleMotor>
			 uart_debug_print("Stop this motor\r\n");
 80014a2:	480e      	ldr	r0, [pc, #56]	@ (80014dc <Process_Multiple_ESC_Command+0x98>)
 80014a4:	f002 faa0 	bl	80039e8 <uart_debug_print>
	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 80014a8:	f000 fd4a 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
 80014ac:	eeb0 8a40 	vmov.f32	s16, s0
 80014b0:	f000 fd6a 	bl	8001f88 <MC_GetSTMStateMotor1>
 80014b4:	eeb0 0a48 	vmov.f32	s0, s16
}
 80014b8:	ecbd 8b02 	vpop	{d8}
 80014bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 80014c0:	f7ff bd68 	b.w	8000f94 <safeStopMotor>
 80014c4:	08008a30 	.word	0x08008a30
 80014c8:	20000004 	.word	0x20000004
 80014cc:	08008a50 	.word	0x08008a50
 80014d0:	08008a68 	.word	0x08008a68
 80014d4:	200003d8 	.word	0x200003d8
 80014d8:	08008a7c 	.word	0x08008a7c
 80014dc:	08008a94 	.word	0x08008a94

080014e0 <sendCANResponse>:
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 80014e0:	b530      	push	{r4, r5, lr}
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80014e2:	7843      	ldrb	r3, [r0, #1]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80014e4:	f890 c004 	ldrb.w	ip, [r0, #4]
    txID |= (CANMessageID->motorID & 0x0f);
 80014e8:	7984      	ldrb	r4, [r0, #6]
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 80014ea:	7881      	ldrb	r1, [r0, #2]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 80014ec:	78c2      	ldrb	r2, [r0, #3]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80014ee:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80014f2:	01db      	lsls	r3, r3, #7
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80014f4:	f00c 0070 	and.w	r0, ip, #112	@ 0x70
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80014f8:	b2db      	uxtb	r3, r3
    txID |= (CANMessageID->motorID & 0x0f);
 80014fa:	4303      	orrs	r3, r0
 80014fc:	f004 040f 	and.w	r4, r4, #15
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001500:	0209      	lsls	r1, r1, #8
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8001502:	b08f      	sub	sp, #60	@ 0x3c
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001504:	f401 7180 	and.w	r1, r1, #256	@ 0x100
    txID |= (CANMessageID->motorID & 0x0f);
 8001508:	431c      	orrs	r4, r3
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 800150a:	0253      	lsls	r3, r2, #9
    txID |= (CANMessageID->motorID & 0x0f);
 800150c:	430c      	orrs	r4, r1
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 800150e:	ed8d 0a01 	vstr	s0, [sp, #4]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8001512:	f403 7300 	and.w	r3, r3, #512	@ 0x200
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001516:	480f      	ldr	r0, [pc, #60]	@ (8001554 <sendCANResponse+0x74>)
    txID |= (CANMessageID->motorID & 0x0f);
 8001518:	431c      	orrs	r4, r3
    memcpy(txData, &information, sizeof(float)); // data[0] --> data[3] now stores float
 800151a:	9b01      	ldr	r3, [sp, #4]
 800151c:	9303      	str	r3, [sp, #12]
    txID |= (CANMessageID->motorID & 0x0f);
 800151e:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001522:	f002 fa61 	bl	80039e8 <uart_debug_print>
    txHeader.DataLength          = FDCAN_DLC_BYTES_8;
 8001526:	2508      	movs	r5, #8
    txHeader.IdType              = FDCAN_STANDARD_ID;
 8001528:	2300      	movs	r3, #0
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 800152a:	480b      	ldr	r0, [pc, #44]	@ (8001558 <sendCANResponse+0x78>)
    txHeader.Identifier          = txID;
 800152c:	9405      	str	r4, [sp, #20]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 800152e:	aa03      	add	r2, sp, #12
 8001530:	a905      	add	r1, sp, #20
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8001532:	e9cd 3306 	strd	r3, r3, [sp, #24]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001536:	e9cd 5308 	strd	r5, r3, [sp, #32]
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 800153a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    txHeader.MessageMarker       = 0;
 800153e:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8001542:	f003 fcf1 	bl	8004f28 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001546:	b908      	cbnz	r0, 800154c <sendCANResponse+0x6c>
}
 8001548:	b00f      	add	sp, #60	@ 0x3c
 800154a:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 800154c:	f000 fcdc 	bl	8001f08 <Error_Handler>
}
 8001550:	b00f      	add	sp, #60	@ 0x3c
 8001552:	bd30      	pop	{r4, r5, pc}
 8001554:	08008aa8 	.word	0x08008aa8
 8001558:	20000560 	.word	0x20000560

0800155c <Process_Single_ESC_Command>:
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 800155c:	b510      	push	{r4, lr}
 800155e:	ed2d 8b02 	vpush	{d8}
	if (CANMessageID->commandType == ACTION_RUN){
 8001562:	78c2      	ldrb	r2, [r0, #3]
    reorderedData[0] = data[0];
 8001564:	680b      	ldr	r3, [r1, #0]
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001566:	4604      	mov	r4, r0
	if (CANMessageID->commandType == ACTION_RUN){
 8001568:	b952      	cbnz	r2, 8001580 <Process_Single_ESC_Command+0x24>
		switch(CANMessageID->runSpec){
 800156a:	7942      	ldrb	r2, [r0, #5]
 800156c:	ee08 3a10 	vmov	s16, r3
 8001570:	2a05      	cmp	r2, #5
 8001572:	f200 808d 	bhi.w	8001690 <Process_Single_ESC_Command+0x134>
 8001576:	e8df f002 	tbb	[pc, r2]
 800157a:	2716      	.short	0x2716
 800157c:	0d388b2d 	.word	0x0d388b2d
		switch(CANMessageID->readSpec){
 8001580:	7903      	ldrb	r3, [r0, #4]
 8001582:	2b07      	cmp	r3, #7
 8001584:	f200 8084 	bhi.w	8001690 <Process_Single_ESC_Command+0x134>
 8001588:	e8df f003 	tbb	[pc, r3]
 800158c:	675a443b 	.word	0x675a443b
 8001590:	7a82776a 	.word	0x7a82776a
				uart_debug_print("In case RUN_POSIITON_INCREMENT\r\n");
 8001594:	4846      	ldr	r0, [pc, #280]	@ (80016b0 <Process_Single_ESC_Command+0x154>)
 8001596:	f002 fa27 	bl	80039e8 <uart_debug_print>
}
 800159a:	ecbd 8b02 	vpop	{d8}
 800159e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				CalibrateSingleMotor();
 80015a2:	f7ff ba21 	b.w	80009e8 <CalibrateSingleMotor>
				uart_debug_print("Motor Stopped \r\n");
 80015a6:	4843      	ldr	r0, [pc, #268]	@ (80016b4 <Process_Single_ESC_Command+0x158>)
 80015a8:	f002 fa1e 	bl	80039e8 <uart_debug_print>
				safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 80015ac:	f000 fcc8 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
 80015b0:	eeb0 8a40 	vmov.f32	s16, s0
 80015b4:	f000 fce8 	bl	8001f88 <MC_GetSTMStateMotor1>
 80015b8:	eeb0 0a48 	vmov.f32	s0, s16
}
 80015bc:	ecbd 8b02 	vpop	{d8}
 80015c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 80015c4:	f7ff bce6 	b.w	8000f94 <safeStopMotor>
}
 80015c8:	ecbd 8b02 	vpop	{d8}
 80015cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				MC_AcknowledgeFaultMotor1();
 80015d0:	f000 bcce 	b.w	8001f70 <MC_AcknowledgeFaultMotor1>
				uart_debug_print("In case RUN_SPEED\r\n");
 80015d4:	4838      	ldr	r0, [pc, #224]	@ (80016b8 <Process_Single_ESC_Command+0x15c>)
 80015d6:	f002 fa07 	bl	80039e8 <uart_debug_print>
				ControlSingleMotor(information);
 80015da:	eeb0 0a48 	vmov.f32	s0, s16
}
 80015de:	ecbd 8b02 	vpop	{d8}
 80015e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				ControlSingleMotor(information);
 80015e6:	f7ff becd 	b.w	8001384 <ControlSingleMotor>
				uart_debug_print("In case RUN_POSIITON_INCREMENT\r\n");
 80015ea:	4831      	ldr	r0, [pc, #196]	@ (80016b0 <Process_Single_ESC_Command+0x154>)
 80015ec:	f002 f9fc 	bl	80039e8 <uart_debug_print>
				ControlSingleMotorPosition(CANMessageID, information);
 80015f0:	eeb0 0a48 	vmov.f32	s0, s16
}
 80015f4:	ecbd 8b02 	vpop	{d8}
				ControlSingleMotorPosition(CANMessageID, information);
 80015f8:	4620      	mov	r0, r4
}
 80015fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				ControlSingleMotorPosition(CANMessageID, information);
 80015fe:	f7ff ba33 	b.w	8000a68 <ControlSingleMotorPosition>
				float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8001602:	f000 fc9d 	bl	8001f40 <MC_GetMecSpeedReferenceMotor1_F>
}
 8001606:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, currentSpeed);
 800160a:	4620      	mov	r0, r4
}
 800160c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentSpeed);
 8001610:	f7ff bf66 	b.w	80014e0 <sendCANResponse>
				int16_t DPPPosition = MC_GetElAngledppMotor1();
 8001614:	f000 fca6 	bl	8001f64 <MC_GetElAngledppMotor1>
 8001618:	ee07 0a90 	vmov	s15, r0
	switch(CANMessageID->motorID){
 800161c:	79a3      	ldrb	r3, [r4, #6]
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 800161e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80016bc <Process_Single_ESC_Command+0x160>
	float elecAngle = ((float)elDPPangle) * 360/65536;
 8001622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	switch(CANMessageID->motorID){
 8001626:	2b09      	cmp	r3, #9
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8001628:	ee67 7a87 	vmul.f32	s15, s15, s14
	switch(CANMessageID->motorID){
 800162c:	d033      	beq.n	8001696 <Process_Single_ESC_Command+0x13a>
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d039      	beq.n	80016a6 <Process_Single_ESC_Command+0x14a>
 8001632:	2b08      	cmp	r3, #8
 8001634:	d134      	bne.n	80016a0 <Process_Single_ESC_Command+0x144>
			return (mechDegreeInputShaft/WAIST_GEAR_RATIO);
 8001636:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80016c0 <Process_Single_ESC_Command+0x164>
 800163a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800163e:	e005      	b.n	800164c <Process_Single_ESC_Command+0xf0>
				float phaseVoltage = MC_GetPhaseVoltageAmplitudeMotor1();
 8001640:	f000 fc8a 	bl	8001f58 <MC_GetPhaseVoltageAmplitudeMotor1>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 8001644:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, phaseCurrent);
 8001648:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 800164c:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, currentState);
 8001650:	4620      	mov	r0, r4
}
 8001652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentState);
 8001656:	f7ff bf43 	b.w	80014e0 <sendCANResponse>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 800165a:	f000 fc77 	bl	8001f4c <MC_GetPhaseCurrentAmplitudeMotor1>
 800165e:	e7f1      	b.n	8001644 <Process_Single_ESC_Command+0xe8>
				float currentFaults = MC_GetOccurredFaultsMotor1();
 8001660:	f000 fc8c 	bl	8001f7c <MC_GetOccurredFaultsMotor1>
}
 8001664:	ecbd 8b02 	vpop	{d8}
				float currentState = MC_GetSTMStateMotor1();
 8001668:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, currentState);
 800166c:	4620      	mov	r0, r4
 800166e:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8001672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentState);
 8001676:	f7ff bf33 	b.w	80014e0 <sendCANResponse>
				float currentState = MC_GetSTMStateMotor1();
 800167a:	f000 fc85 	bl	8001f88 <MC_GetSTMStateMotor1>
 800167e:	e7f1      	b.n	8001664 <Process_Single_ESC_Command+0x108>
}
 8001680:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, feedback);
 8001684:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 80016c4 <Process_Single_ESC_Command+0x168>
}
 8001688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, feedback);
 800168c:	f7ff bf28 	b.w	80014e0 <sendCANResponse>
}
 8001690:	ecbd 8b02 	vpop	{d8}
 8001694:	bd10      	pop	{r4, pc}
				return (mechDegreeInputShaft/SHOULDER_GEAR_RATIO);
 8001696:	ed9f 7a0c 	vldr	s14, [pc, #48]	@ 80016c8 <Process_Single_ESC_Command+0x16c>
 800169a:	ee27 0a87 	vmul.f32	s0, s15, s14
 800169e:	e7d5      	b.n	800164c <Process_Single_ESC_Command+0xf0>
	switch(CANMessageID->motorID){
 80016a0:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
				sendCANResponse(CANMessageID,positionAdjusted);
 80016a4:	e7d2      	b.n	800164c <Process_Single_ESC_Command+0xf0>
				return (mechDegreeInputShaft/ELBOW_GEAR_RATIO);
 80016a6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80016cc <Process_Single_ESC_Command+0x170>
 80016aa:	ee27 0a87 	vmul.f32	s0, s15, s14
 80016ae:	e7cd      	b.n	800164c <Process_Single_ESC_Command+0xf0>
 80016b0:	08008aec 	.word	0x08008aec
 80016b4:	08008ac4 	.word	0x08008ac4
 80016b8:	08008ad8 	.word	0x08008ad8
 80016bc:	39f00000 	.word	0x39f00000
 80016c0:	3d430c31 	.word	0x3d430c31
 80016c4:	428a0000 	.word	0x428a0000
 80016c8:	3c088889 	.word	0x3c088889
 80016cc:	3c23d70a 	.word	0x3c23d70a

080016d0 <CAN_Parse_MSG>:
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 80016d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016d2:	4604      	mov	r4, r0
 80016d4:	b083      	sub	sp, #12
	uart_debug_print("Parsing the ID...\r\n");
 80016d6:	4823      	ldr	r0, [pc, #140]	@ (8001764 <CAN_Parse_MSG+0x94>)
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 80016d8:	460e      	mov	r6, r1
	uart_debug_print("Parsing the ID...\r\n");
 80016da:	f002 f985 	bl	80039e8 <uart_debug_print>
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 80016de:	8825      	ldrh	r5, [r4, #0]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 80016e0:	f3c5 2380 	ubfx	r3, r5, #10, #1
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 80016e4:	f3c5 040a 	ubfx	r4, r5, #0, #11
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 80016e8:	f88d 3000 	strb.w	r3, [sp]
	if (CANMessage.messageSender == SLAVE){
 80016ec:	b9f3      	cbnz	r3, 800172c <CAN_Parse_MSG+0x5c>
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 80016ee:	0a63      	lsrs	r3, r4, #9
 80016f0:	f88d 3003 	strb.w	r3, [sp, #3]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 80016f4:	f3c4 1702 	ubfx	r7, r4, #4, #3
	if (CANMessage.commandType == ACTION_RUN){
 80016f8:	b1d3      	cbz	r3, 8001730 <CAN_Parse_MSG+0x60>
		uart_debug_print("Read Command Detected\r\n");
 80016fa:	481b      	ldr	r0, [pc, #108]	@ (8001768 <CAN_Parse_MSG+0x98>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 80016fc:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Read Command Detected\r\n");
 8001700:	f002 f972 	bl	80039e8 <uart_debug_print>
		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 8001704:	f88d 7004 	strb.w	r7, [sp, #4]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8001708:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 800170c:	b1dc      	cbz	r4, 8001746 <CAN_Parse_MSG+0x76>
		if (CANMessage.motorID == ESC_ID){
 800170e:	4b17      	ldr	r3, [pc, #92]	@ (800176c <CAN_Parse_MSG+0x9c>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f005 050f 	and.w	r5, r5, #15
 8001716:	429d      	cmp	r5, r3
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 8001718:	f88d 5006 	strb.w	r5, [sp, #6]
		if (CANMessage.motorID == ESC_ID){
 800171c:	d11c      	bne.n	8001758 <CAN_Parse_MSG+0x88>
			uart_debug_print("Processing Single Command\r\n");
 800171e:	4814      	ldr	r0, [pc, #80]	@ (8001770 <CAN_Parse_MSG+0xa0>)
 8001720:	f002 f962 	bl	80039e8 <uart_debug_print>
			Process_Single_ESC_Command(&CANMessage, rxData);
 8001724:	4631      	mov	r1, r6
 8001726:	4668      	mov	r0, sp
 8001728:	f7ff ff18 	bl	800155c <Process_Single_ESC_Command>
}
 800172c:	b003      	add	sp, #12
 800172e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_debug_print("Run Command Detected\r\n");
 8001730:	4810      	ldr	r0, [pc, #64]	@ (8001774 <CAN_Parse_MSG+0xa4>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8001732:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Run Command Detected\r\n");
 8001736:	f002 f957 	bl	80039e8 <uart_debug_print>
			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 800173a:	f88d 7005 	strb.w	r7, [sp, #5]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 800173e:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8001742:	2c00      	cmp	r4, #0
 8001744:	d1e3      	bne.n	800170e <CAN_Parse_MSG+0x3e>
		uart_debug_print("Processing Multiple Commands\r\n");
 8001746:	480c      	ldr	r0, [pc, #48]	@ (8001778 <CAN_Parse_MSG+0xa8>)
 8001748:	f002 f94e 	bl	80039e8 <uart_debug_print>
		Process_Multiple_ESC_Command(&CANMessage, rxData);
 800174c:	4631      	mov	r1, r6
 800174e:	4668      	mov	r0, sp
 8001750:	f7ff fe78 	bl	8001444 <Process_Multiple_ESC_Command>
}
 8001754:	b003      	add	sp, #12
 8001756:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 uart_debug_print("Not My IDr\n");
 8001758:	4808      	ldr	r0, [pc, #32]	@ (800177c <CAN_Parse_MSG+0xac>)
}
 800175a:	b003      	add	sp, #12
 800175c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			 uart_debug_print("Not My IDr\n");
 8001760:	f002 b942 	b.w	80039e8 <uart_debug_print>
 8001764:	08008b10 	.word	0x08008b10
 8001768:	08008b3c 	.word	0x08008b3c
 800176c:	20000004 	.word	0x20000004
 8001770:	08008b54 	.word	0x08008b54
 8001774:	08008b24 	.word	0x08008b24
 8001778:	08008b7c 	.word	0x08008b7c
 800177c:	08008b70 	.word	0x08008b70

08001780 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 0 */


//keep latest command only
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 8001780:	07ca      	lsls	r2, r1, #31
 8001782:	d515      	bpl.n	80017b0 <HAL_FDCAN_RxFifo0Callback+0x30>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        // Keep reading until FIFO is empty, but only keep the last message
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8001786:	4f0b      	ldr	r7, [pc, #44]	@ (80017b4 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8001788:	4e0b      	ldr	r6, [pc, #44]	@ (80017b8 <HAL_FDCAN_RxFifo0Callback+0x38>)
 800178a:	4604      	mov	r4, r0
 800178c:	e001      	b.n	8001792 <HAL_FDCAN_RxFifo0Callback+0x12>
 800178e:	f003 fc2d 	bl	8004fec <HAL_FDCAN_GetRxMessage>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001792:	2140      	movs	r1, #64	@ 0x40
 8001794:	4620      	mov	r0, r4
 8001796:	f003 fcc9 	bl	800512c <HAL_FDCAN_GetRxFifoFillLevel>
 800179a:	4605      	mov	r5, r0
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 800179c:	2140      	movs	r1, #64	@ 0x40
 800179e:	463b      	mov	r3, r7
 80017a0:	4632      	mov	r2, r6
 80017a2:	4620      	mov	r0, r4
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 80017a4:	2d00      	cmp	r5, #0
 80017a6:	d1f2      	bne.n	800178e <HAL_FDCAN_RxFifo0Callback+0xe>
        }

        received_CAN_command = true;
 80017a8:	4b04      	ldr	r3, [pc, #16]	@ (80017bc <HAL_FDCAN_RxFifo0Callback+0x3c>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	701a      	strb	r2, [r3, #0]
    }
}
 80017ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200003e0 	.word	0x200003e0
 80017b8:	200003e8 	.word	0x200003e8
 80017bc:	20000410 	.word	0x20000410

080017c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017c0:	b510      	push	{r4, lr}
 80017c2:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017c4:	2238      	movs	r2, #56	@ 0x38
 80017c6:	2100      	movs	r1, #0
 80017c8:	a806      	add	r0, sp, #24
 80017ca:	f006 fe9f 	bl	800850c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017ce:	2000      	movs	r0, #0
 80017d0:	e9cd 0001 	strd	r0, r0, [sp, #4]
 80017d4:	e9cd 0003 	strd	r0, r0, [sp, #12]
 80017d8:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80017da:	f004 f84b 	bl	8005874 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017de:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001830 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017e2:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 80017e4:	2255      	movs	r2, #85	@ 0x55
 80017e6:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ea:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80017ec:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ee:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017f0:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f4:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80017f8:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80017fc:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fe:	f004 f8b3 	bl	8005968 <HAL_RCC_OscConfig>
 8001802:	b108      	cbz	r0, 8001808 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001804:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001806:	e7fe      	b.n	8001806 <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001808:	2104      	movs	r1, #4
 800180a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180c:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800180e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001816:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800181a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800181c:	f004 fb22 	bl	8005e64 <HAL_RCC_ClockConfig>
 8001820:	b108      	cbz	r0, 8001826 <SystemClock_Config+0x66>
 8001822:	b672      	cpsid	i
  while (1)
 8001824:	e7fe      	b.n	8001824 <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 8001826:	f004 fc27 	bl	8006078 <HAL_RCC_EnableCSS>
}
 800182a:	b014      	add	sp, #80	@ 0x50
 800182c:	bd10      	pop	{r4, pc}
 800182e:	bf00      	nop
 8001830:	00000001 	.word	0x00000001
 8001834:	00010000 	.word	0x00010000

08001838 <main>:
{
 8001838:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	2500      	movs	r5, #0
{
 800183e:	b0a5      	sub	sp, #148	@ 0x94
  HAL_Init();
 8001840:	f002 f906 	bl	8003a50 <HAL_Init>
  SystemClock_Config();
 8001844:	f7ff ffbc 	bl	80017c0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001848:	e9cd 5515 	strd	r5, r5, [sp, #84]	@ 0x54
 800184c:	e9cd 5517 	strd	r5, r5, [sp, #92]	@ 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001850:	4bae      	ldr	r3, [pc, #696]	@ (8001b0c <main+0x2d4>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001852:	9519      	str	r5, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001856:	48ae      	ldr	r0, [pc, #696]	@ (8001b10 <main+0x2d8>)
  hadc1.Instance = ADC1;
 8001858:	f8df a2f8 	ldr.w	sl, [pc, #760]	@ 8001b54 <main+0x31c>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800185c:	f042 0204 	orr.w	r2, r2, #4
 8001860:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001862:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001864:	f001 0104 	and.w	r1, r1, #4
 8001868:	9103      	str	r1, [sp, #12]
 800186a:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800186c:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800186e:	f041 0120 	orr.w	r1, r1, #32
 8001872:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001874:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001876:	f001 0120 	and.w	r1, r1, #32
 800187a:	9104      	str	r1, [sp, #16]
 800187c:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800187e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001880:	f041 0101 	orr.w	r1, r1, #1
 8001884:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001886:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001888:	f001 0101 	and.w	r1, r1, #1
 800188c:	9105      	str	r1, [sp, #20]
 800188e:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001890:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001892:	f041 0102 	orr.w	r1, r1, #2
 8001896:	64d9      	str	r1, [r3, #76]	@ 0x4c
 8001898:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800189e:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80018a2:	2140      	movs	r1, #64	@ 0x40
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a4:	9b06      	ldr	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018a6:	2401      	movs	r4, #1
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 80018a8:	f003 ff5c 	bl	8005764 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80018ac:	2740      	movs	r7, #64	@ 0x40
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ae:	4898      	ldr	r0, [pc, #608]	@ (8001b10 <main+0x2d8>)
 80018b0:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	e9cd 5517 	strd	r5, r5, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018b6:	f44f 6680 	mov.w	r6, #1024	@ 0x400
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018ba:	e9cd 7415 	strd	r7, r4, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018be:	f003 fd93 	bl	80053e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018c2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80018c6:	4892      	ldr	r0, [pc, #584]	@ (8001b10 <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c8:	9517      	str	r5, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80018ca:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018cc:	e9cd 6315 	strd	r6, r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 80018d0:	f003 fd8a 	bl	80053e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018d4:	f04f 0c08 	mov.w	ip, #8
 80018d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018dc:	488d      	ldr	r0, [pc, #564]	@ (8001b14 <main+0x2dc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018de:	9517      	str	r5, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e0:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80018e2:	e9cd c315 	strd	ip, r3, [sp, #84]	@ 0x54
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e6:	f003 fd7f 	bl	80053e8 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80018ea:	4629      	mov	r1, r5
 80018ec:	223c      	movs	r2, #60	@ 0x3c
 80018ee:	a815      	add	r0, sp, #84	@ 0x54
  ADC_MultiModeTypeDef multimode = {0};
 80018f0:	e9cd 550a 	strd	r5, r5, [sp, #40]	@ 0x28
 80018f4:	950c      	str	r5, [sp, #48]	@ 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80018f6:	f006 fe09 	bl	800850c <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80018fa:	2220      	movs	r2, #32
 80018fc:	4629      	mov	r1, r5
 80018fe:	a80d      	add	r0, sp, #52	@ 0x34
 8001900:	f006 fe04 	bl	800850c <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001904:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001908:	e9ca 5501 	strd	r5, r5, [sl, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800190c:	e9ca 5404 	strd	r5, r4, [sl, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001910:	e9ca 550b 	strd	r5, r5, [sl, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001914:	f8aa 501c 	strh.w	r5, [sl, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001918:	f88a 5024 	strb.w	r5, [sl, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800191c:	f88a 5038 	strb.w	r5, [sl, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001920:	f8ca 503c 	str.w	r5, [sl, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001924:	f88a 5040 	strb.w	r5, [sl, #64]	@ 0x40
  hadc1.Instance = ADC1;
 8001928:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800192c:	2504      	movs	r5, #4
  hadc1.Init.NbrOfConversion = 2;
 800192e:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001930:	4650      	mov	r0, sl
  hadc1.Instance = ADC1;
 8001932:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001936:	f8ca 800c 	str.w	r8, [sl, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800193a:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc1.Init.NbrOfConversion = 2;
 800193e:	f8ca 6020 	str.w	r6, [sl, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001942:	f002 f8c1 	bl	8003ac8 <HAL_ADC_Init>
 8001946:	b108      	cbz	r0, 800194c <main+0x114>
 8001948:	b672      	cpsid	i
  while (1)
 800194a:	e7fe      	b.n	800194a <main+0x112>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800194c:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800194e:	a90a      	add	r1, sp, #40	@ 0x28
 8001950:	4650      	mov	r0, sl
 8001952:	f002 ff1b 	bl	800478c <HAL_ADCEx_MultiModeConfigChannel>
 8001956:	b108      	cbz	r0, 800195c <main+0x124>
 8001958:	b672      	cpsid	i
  while (1)
 800195a:	e7fe      	b.n	800195a <main+0x122>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800195c:	4b6e      	ldr	r3, [pc, #440]	@ (8001b18 <main+0x2e0>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800195e:	f8ad 0078 	strh.w	r0, [sp, #120]	@ 0x78
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001962:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 8001966:	e9cd 5019 	strd	r5, r0, [sp, #100]	@ 0x64
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800196a:	e9cd 3b15 	strd	r3, fp, [sp, #84]	@ 0x54
  sConfigInjected.QueueInjectedContext = DISABLE;
 800196e:	f88d 007a 	strb.w	r0, [sp, #122]	@ 0x7a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001972:	f88d 0084 	strb.w	r0, [sp, #132]	@ 0x84
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001976:	2380      	movs	r3, #128	@ 0x80
 8001978:	2084      	movs	r0, #132	@ 0x84
 800197a:	e9cd 031f 	strd	r0, r3, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800197e:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001982:	a915      	add	r1, sp, #84	@ 0x54
 8001984:	4650      	mov	r0, sl
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001986:	9417      	str	r4, [sp, #92]	@ 0x5c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001988:	961d      	str	r6, [sp, #116]	@ 0x74
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800198a:	f8cd 9060 	str.w	r9, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800198e:	f002 fbff 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 8001992:	b108      	cbz	r0, 8001998 <main+0x160>
 8001994:	b672      	cpsid	i
  while (1)
 8001996:	e7fe      	b.n	8001996 <main+0x15e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001998:	4a60      	ldr	r2, [pc, #384]	@ (8001b1c <main+0x2e4>)
 800199a:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800199e:	a915      	add	r1, sp, #84	@ 0x54
 80019a0:	4650      	mov	r0, sl
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80019a2:	e9cd 2315 	strd	r2, r3, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80019a6:	f002 fbf3 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 80019aa:	b108      	cbz	r0, 80019b0 <main+0x178>
 80019ac:	b672      	cpsid	i
  while (1)
 80019ae:	e7fe      	b.n	80019ae <main+0x176>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b0:	495b      	ldr	r1, [pc, #364]	@ (8001b20 <main+0x2e8>)
  sConfig.Offset = 0;
 80019b2:	9012      	str	r0, [sp, #72]	@ 0x48
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80019b4:	2206      	movs	r2, #6
 80019b6:	e9cd 120d 	strd	r1, r2, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ba:	4650      	mov	r0, sl
 80019bc:	a90d      	add	r1, sp, #52	@ 0x34
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80019be:	e9cd 590f 	strd	r5, r9, [sp, #60]	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80019c2:	9511      	str	r5, [sp, #68]	@ 0x44
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019c4:	f002 f974 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 80019c8:	b108      	cbz	r0, 80019ce <main+0x196>
 80019ca:	b672      	cpsid	i
  while (1)
 80019cc:	e7fe      	b.n	80019cc <main+0x194>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019ce:	4a55      	ldr	r2, [pc, #340]	@ (8001b24 <main+0x2ec>)
 80019d0:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019d2:	a90d      	add	r1, sp, #52	@ 0x34
 80019d4:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80019d6:	e9cd 230d 	strd	r2, r3, [sp, #52]	@ 0x34
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019da:	f002 f969 	bl	8003cb0 <HAL_ADC_ConfigChannel>
 80019de:	4601      	mov	r1, r0
 80019e0:	b108      	cbz	r0, 80019e6 <main+0x1ae>
 80019e2:	b672      	cpsid	i
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <main+0x1ac>
  hadc2.Instance = ADC2;
 80019e6:	f8df a170 	ldr.w	sl, [pc, #368]	@ 8001b58 <main+0x320>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80019ea:	9001      	str	r0, [sp, #4]
 80019ec:	223c      	movs	r2, #60	@ 0x3c
 80019ee:	a815      	add	r0, sp, #84	@ 0x54
 80019f0:	f006 fd8c 	bl	800850c <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80019f4:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80019f6:	4a4c      	ldr	r2, [pc, #304]	@ (8001b28 <main+0x2f0>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80019f8:	f8ca 800c 	str.w	r8, [sl, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019fc:	4650      	mov	r0, sl
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019fe:	e9ca 1101 	strd	r1, r1, [sl, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a02:	e9ca 1404 	strd	r1, r4, [sl, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a06:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001a0a:	f8aa 101c 	strh.w	r1, [sl, #28]
  hadc2.Init.NbrOfConversion = 1;
 8001a0e:	f8ca 4020 	str.w	r4, [sl, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001a12:	f88a 1024 	strb.w	r1, [sl, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001a16:	f88a 1038 	strb.w	r1, [sl, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001a1a:	f8ca 103c 	str.w	r1, [sl, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001a1e:	f88a 1040 	strb.w	r1, [sl, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8001a22:	f8ca 2000 	str.w	r2, [sl]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001a26:	f002 f84f 	bl	8003ac8 <HAL_ADC_Init>
 8001a2a:	b108      	cbz	r0, 8001a30 <main+0x1f8>
 8001a2c:	b672      	cpsid	i
  while (1)
 8001a2e:	e7fe      	b.n	8001a2e <main+0x1f6>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001a30:	e9cd b416 	strd	fp, r4, [sp, #88]	@ 0x58
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001a34:	4a3d      	ldr	r2, [pc, #244]	@ (8001b2c <main+0x2f4>)
  sConfigInjected.InjectedOffset = 0;
 8001a36:	901a      	str	r0, [sp, #104]	@ 0x68
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001a38:	f04f 0b84 	mov.w	fp, #132	@ 0x84
 8001a3c:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001a3e:	f8ad 0078 	strh.w	r0, [sp, #120]	@ 0x78
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001a42:	f88d 007a 	strb.w	r0, [sp, #122]	@ 0x7a
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8001a46:	f88d 0084 	strb.w	r0, [sp, #132]	@ 0x84
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a4a:	a915      	add	r1, sp, #84	@ 0x54
 8001a4c:	4650      	mov	r0, sl
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8001a4e:	e9cd 9518 	strd	r9, r5, [sp, #96]	@ 0x60
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001a52:	e9cd b31f 	strd	fp, r3, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001a56:	961d      	str	r6, [sp, #116]	@ 0x74
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001a58:	9215      	str	r2, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a5a:	f002 fb99 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 8001a5e:	b108      	cbz	r0, 8001a64 <main+0x22c>
 8001a60:	b672      	cpsid	i
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <main+0x22a>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001a64:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8001b18 <main+0x2e0>
 8001a68:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a6c:	4650      	mov	r0, sl
 8001a6e:	a915      	add	r1, sp, #84	@ 0x54
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001a70:	e9cd 9315 	strd	r9, r3, [sp, #84]	@ 0x54
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001a74:	f002 fb8c 	bl	8004190 <HAL_ADCEx_InjectedConfigChannel>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	b108      	cbz	r0, 8001a80 <main+0x248>
 8001a7c:	b672      	cpsid	i
  while (1)
 8001a7e:	e7fe      	b.n	8001a7e <main+0x246>
  hcomp1.Instance = COMP1;
 8001a80:	482b      	ldr	r0, [pc, #172]	@ (8001b30 <main+0x2f8>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a82:	e9c0 3701 	strd	r3, r7, [r0, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001a86:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001a8a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Instance = COMP1;
 8001a8e:	4b29      	ldr	r3, [pc, #164]	@ (8001b34 <main+0x2fc>)
 8001a90:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001a92:	f002 fedf 	bl	8004854 <HAL_COMP_Init>
 8001a96:	b108      	cbz	r0, 8001a9c <main+0x264>
 8001a98:	b672      	cpsid	i
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <main+0x262>
  hcomp2.Instance = COMP2;
 8001a9c:	4826      	ldr	r0, [pc, #152]	@ (8001b38 <main+0x300>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001a9e:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8001b5c <main+0x324>
 8001aa2:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001aa4:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001aa6:	e9c0 8300 	strd	r8, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001aaa:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001aae:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001ab2:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001ab4:	f002 fece 	bl	8004854 <HAL_COMP_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	b108      	cbz	r0, 8001ac0 <main+0x288>
 8001abc:	b672      	cpsid	i
  while (1)
 8001abe:	e7fe      	b.n	8001abe <main+0x286>
  hcomp4.Instance = COMP4;
 8001ac0:	481e      	ldr	r0, [pc, #120]	@ (8001b3c <main+0x304>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001ac2:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001ac6:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001aca:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8001ace:	4b1c      	ldr	r3, [pc, #112]	@ (8001b40 <main+0x308>)
 8001ad0:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8001ad2:	f002 febf 	bl	8004854 <HAL_COMP_Init>
 8001ad6:	b108      	cbz	r0, 8001adc <main+0x2a4>
 8001ad8:	b672      	cpsid	i
  while (1)
 8001ada:	e7fe      	b.n	8001ada <main+0x2a2>
  hcordic.Instance = CORDIC;
 8001adc:	4819      	ldr	r0, [pc, #100]	@ (8001b44 <main+0x30c>)
 8001ade:	4b1a      	ldr	r3, [pc, #104]	@ (8001b48 <main+0x310>)
 8001ae0:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8001ae2:	f002 ff57 	bl	8004994 <HAL_CORDIC_Init>
 8001ae6:	4601      	mov	r1, r0
 8001ae8:	b108      	cbz	r0, 8001aee <main+0x2b6>
 8001aea:	b672      	cpsid	i
  while (1)
 8001aec:	e7fe      	b.n	8001aec <main+0x2b4>
  hdac3.Instance = DAC3;
 8001aee:	4d17      	ldr	r5, [pc, #92]	@ (8001b4c <main+0x314>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8001af0:	2230      	movs	r2, #48	@ 0x30
 8001af2:	a815      	add	r0, sp, #84	@ 0x54
 8001af4:	f006 fd0a 	bl	800850c <memset>
  hdac3.Instance = DAC3;
 8001af8:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <main+0x318>)
 8001afa:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001afc:	4628      	mov	r0, r5
 8001afe:	f002 ffdf 	bl	8004ac0 <HAL_DAC_Init>
 8001b02:	4602      	mov	r2, r0
 8001b04:	b360      	cbz	r0, 8001b60 <main+0x328>
 8001b06:	b672      	cpsid	i
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <main+0x2d0>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	48000800 	.word	0x48000800
 8001b14:	48000400 	.word	0x48000400
 8001b18:	0c900008 	.word	0x0c900008
 8001b1c:	32601000 	.word	0x32601000
 8001b20:	04300002 	.word	0x04300002
 8001b24:	14f00020 	.word	0x14f00020
 8001b28:	50000100 	.word	0x50000100
 8001b2c:	cb8c0000 	.word	0xcb8c0000
 8001b30:	20000648 	.word	0x20000648
 8001b34:	40010200 	.word	0x40010200
 8001b38:	20000624 	.word	0x20000624
 8001b3c:	20000600 	.word	0x20000600
 8001b40:	4001020c 	.word	0x4001020c
 8001b44:	200005d8 	.word	0x200005d8
 8001b48:	40020c00 	.word	0x40020c00
 8001b4c:	200005c4 	.word	0x200005c4
 8001b50:	50001000 	.word	0x50001000
 8001b54:	200006d8 	.word	0x200006d8
 8001b58:	2000066c 	.word	0x2000066c
 8001b5c:	40010204 	.word	0x40010204
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b60:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001b62:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001b66:	f8ad 0058 	strh.w	r0, [sp, #88]	@ 0x58
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8001b6a:	9019      	str	r0, [sp, #100]	@ 0x64
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001b6c:	901c      	str	r0, [sp, #112]	@ 0x70
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b6e:	a915      	add	r1, sp, #84	@ 0x54
 8001b70:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001b72:	e9cd 331a 	strd	r3, r3, [sp, #104]	@ 0x68
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001b76:	9315      	str	r3, [sp, #84]	@ 0x54
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001b78:	f002 ffb8 	bl	8004aec <HAL_DAC_ConfigChannel>
 8001b7c:	b108      	cbz	r0, 8001b82 <main+0x34a>
 8001b7e:	b672      	cpsid	i
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <main+0x348>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001b82:	4628      	mov	r0, r5
 8001b84:	2210      	movs	r2, #16
 8001b86:	a915      	add	r1, sp, #84	@ 0x54
 8001b88:	f002 ffb0 	bl	8004aec <HAL_DAC_ConfigChannel>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	b108      	cbz	r0, 8001b94 <main+0x35c>
 8001b90:	b672      	cpsid	i
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <main+0x35a>
  hopamp1.Instance = OPAMP1;
 8001b94:	489f      	ldr	r0, [pc, #636]	@ (8001e14 <main+0x5dc>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001b96:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8001b9a:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001b9e:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001ba0:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001ba2:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001ba4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001ba6:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8001baa:	4b9b      	ldr	r3, [pc, #620]	@ (8001e18 <main+0x5e0>)
 8001bac:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001bae:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001bb2:	f003 fde7 	bl	8005784 <HAL_OPAMP_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b108      	cbz	r0, 8001bbe <main+0x386>
 8001bba:	b672      	cpsid	i
  while (1)
 8001bbc:	e7fe      	b.n	8001bbc <main+0x384>
  hopamp2.Instance = OPAMP2;
 8001bbe:	4897      	ldr	r0, [pc, #604]	@ (8001e1c <main+0x5e4>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001bc0:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001bc4:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001bc6:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001bc8:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001bca:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8001bcc:	4b94      	ldr	r3, [pc, #592]	@ (8001e20 <main+0x5e8>)
 8001bce:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001bd0:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001bd4:	f003 fdd6 	bl	8005784 <HAL_OPAMP_Init>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b108      	cbz	r0, 8001be0 <main+0x3a8>
 8001bdc:	b672      	cpsid	i
  while (1)
 8001bde:	e7fe      	b.n	8001bde <main+0x3a6>
  hopamp3.Instance = OPAMP3;
 8001be0:	4890      	ldr	r0, [pc, #576]	@ (8001e24 <main+0x5ec>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001be2:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001be6:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001be8:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001bea:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001bec:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 8001bee:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 8001bf0:	4b8d      	ldr	r3, [pc, #564]	@ (8001e28 <main+0x5f0>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8001bf2:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 8001bf4:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8001bf6:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8001bf8:	f003 fdc4 	bl	8005784 <HAL_OPAMP_Init>
 8001bfc:	4604      	mov	r4, r0
 8001bfe:	b108      	cbz	r0, 8001c04 <main+0x3cc>
 8001c00:	b672      	cpsid	i
  while (1)
 8001c02:	e7fe      	b.n	8001c02 <main+0x3ca>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8001c04:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c08:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
 8001c0c:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 8001c10:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 8001c14:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c18:	e9cd 0008 	strd	r0, r0, [sp, #32]
 8001c1c:	9007      	str	r0, [sp, #28]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c1e:	4601      	mov	r1, r0
 8001c20:	2234      	movs	r2, #52	@ 0x34
 8001c22:	a815      	add	r0, sp, #84	@ 0x54
 8001c24:	f006 fc72 	bl	800850c <memset>
  htim1.Instance = TIM1;
 8001c28:	4880      	ldr	r0, [pc, #512]	@ (8001e2c <main+0x5f4>)
 8001c2a:	4b81      	ldr	r3, [pc, #516]	@ (8001e30 <main+0x5f8>)
 8001c2c:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 8001c2e:	f04f 0e20 	mov.w	lr, #32
 8001c32:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 8001c36:	e9c0 e302 	strd	lr, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8001c3e:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8001c40:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c42:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001c44:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c46:	f004 fc2b 	bl	80064a0 <HAL_TIM_PWM_Init>
 8001c4a:	b108      	cbz	r0, 8001c50 <main+0x418>
 8001c4c:	b672      	cpsid	i
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <main+0x416>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001c50:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c52:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c54:	4875      	ldr	r0, [pc, #468]	@ (8001e2c <main+0x5f4>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001c56:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c58:	a907      	add	r1, sp, #28
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c5a:	e9cd 3308 	strd	r3, r3, [sp, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c5e:	f004 fe67 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8001c62:	b108      	cbz	r0, 8001c68 <main+0x430>
 8001c64:	b672      	cpsid	i
  while (1)
 8001c66:	e7fe      	b.n	8001c66 <main+0x42e>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001c68:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001c6a:	900c      	str	r0, [sp, #48]	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001c6c:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c6e:	486f      	ldr	r0, [pc, #444]	@ (8001e2c <main+0x5f4>)
 8001c70:	aa0a      	add	r2, sp, #40	@ 0x28
 8001c72:	4629      	mov	r1, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001c74:	e9cd 350a 	strd	r3, r5, [sp, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c78:	f004 fefa 	bl	8006a70 <HAL_TIMEx_ConfigBreakInput>
 8001c7c:	b108      	cbz	r0, 8001c82 <main+0x44a>
 8001c7e:	b672      	cpsid	i
  while (1)
 8001c80:	e7fe      	b.n	8001c80 <main+0x448>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001c82:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c84:	4869      	ldr	r0, [pc, #420]	@ (8001e2c <main+0x5f4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001c86:	960a      	str	r6, [sp, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c88:	aa0a      	add	r2, sp, #40	@ 0x28
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f004 fef0 	bl	8006a70 <HAL_TIMEx_ConfigBreakInput>
 8001c90:	b108      	cbz	r0, 8001c96 <main+0x45e>
 8001c92:	b672      	cpsid	i
  while (1)
 8001c94:	e7fe      	b.n	8001c94 <main+0x45c>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c96:	aa0a      	add	r2, sp, #40	@ 0x28
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001c98:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c9a:	4864      	ldr	r0, [pc, #400]	@ (8001e2c <main+0x5f4>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001c9c:	930a      	str	r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001c9e:	4629      	mov	r1, r5
 8001ca0:	f004 fee6 	bl	8006a70 <HAL_TIMEx_ConfigBreakInput>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	b108      	cbz	r0, 8001cac <main+0x474>
 8001ca8:	b672      	cpsid	i
  while (1)
 8001caa:	e7fe      	b.n	8001caa <main+0x472>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cac:	e9cd 000f 	strd	r0, r0, [sp, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cb0:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cb4:	9013      	str	r0, [sp, #76]	@ 0x4c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001cb6:	2760      	movs	r7, #96	@ 0x60
 8001cb8:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cbc:	485b      	ldr	r0, [pc, #364]	@ (8001e2c <main+0x5f4>)
 8001cbe:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001cc0:	e9cd 730d 	strd	r7, r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc4:	f004 fd4e 	bl	8006764 <HAL_TIM_PWM_ConfigChannel>
 8001cc8:	b108      	cbz	r0, 8001cce <main+0x496>
 8001cca:	b672      	cpsid	i
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <main+0x494>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cce:	4857      	ldr	r0, [pc, #348]	@ (8001e2c <main+0x5f4>)
 8001cd0:	4632      	mov	r2, r6
 8001cd2:	a90d      	add	r1, sp, #52	@ 0x34
 8001cd4:	f004 fd46 	bl	8006764 <HAL_TIM_PWM_ConfigChannel>
 8001cd8:	b108      	cbz	r0, 8001cde <main+0x4a6>
 8001cda:	b672      	cpsid	i
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <main+0x4a4>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cde:	4853      	ldr	r0, [pc, #332]	@ (8001e2c <main+0x5f4>)
 8001ce0:	2208      	movs	r2, #8
 8001ce2:	a90d      	add	r1, sp, #52	@ 0x34
 8001ce4:	f004 fd3e 	bl	8006764 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	b108      	cbz	r0, 8001cee <main+0x4b6>
 8001cea:	b672      	cpsid	i
  while (1)
 8001cec:	e7fe      	b.n	8001cec <main+0x4b4>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001cee:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cf2:	484e      	ldr	r0, [pc, #312]	@ (8001e2c <main+0x5f4>)
 8001cf4:	220c      	movs	r2, #12
 8001cf6:	a90d      	add	r1, sp, #52	@ 0x34
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8001cf8:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001cfc:	f004 fd32 	bl	8006764 <HAL_TIM_PWM_ConfigChannel>
 8001d00:	b108      	cbz	r0, 8001d06 <main+0x4ce>
 8001d02:	b672      	cpsid	i
  while (1)
 8001d04:	e7fe      	b.n	8001d04 <main+0x4cc>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001d06:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001d0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0e:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
  sBreakDeadTimeConfig.BreakFilter = 3;
 8001d12:	2603      	movs	r6, #3
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8001d14:	223f      	movs	r2, #63	@ 0x3f
 8001d16:	e9cd 0217 	strd	r0, r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d1a:	e9cd 601b 	strd	r6, r0, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d1e:	e9cd 601f 	strd	r6, r0, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d22:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8001d26:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d2a:	901d      	str	r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d2c:	9021      	str	r0, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d2e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d32:	483e      	ldr	r0, [pc, #248]	@ (8001e2c <main+0x5f4>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d34:	931e      	str	r3, [sp, #120]	@ 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d36:	a915      	add	r1, sp, #84	@ 0x54
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d38:	e9cd 4219 	strd	r4, r2, [sp, #100]	@ 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d3c:	f004 fe4a 	bl	80069d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d40:	4604      	mov	r4, r0
 8001d42:	b108      	cbz	r0, 8001d48 <main+0x510>
 8001d44:	b672      	cpsid	i
  while (1)
 8001d46:	e7fe      	b.n	8001d46 <main+0x50e>
  HAL_TIM_MspPostInit(&htim1);
 8001d48:	4838      	ldr	r0, [pc, #224]	@ (8001e2c <main+0x5f4>)
 8001d4a:	f001 fdb1 	bl	80038b0 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8001d4e:	4839      	ldr	r0, [pc, #228]	@ (8001e34 <main+0x5fc>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d50:	9615      	str	r6, [sp, #84]	@ 0x54
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8001d52:	230c      	movs	r3, #12
 8001d54:	9319      	str	r3, [sp, #100]	@ 0x64
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8001d56:	931d      	str	r3, [sp, #116]	@ 0x74
  htim4.Instance = TIM4;
 8001d58:	4b37      	ldr	r3, [pc, #220]	@ (8001e38 <main+0x600>)
 8001d5a:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d5c:	a915      	add	r1, sp, #84	@ 0x54
  htim4.Init.Period = M1_PULSE_NBR;
 8001d5e:	f641 73ff 	movw	r3, #8191	@ 0x1fff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d62:	e9cd 440d 	strd	r4, r4, [sp, #52]	@ 0x34
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d66:	e9c0 4401 	strd	r4, r4, [r0, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d6a:	9416      	str	r4, [sp, #88]	@ 0x58
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d6c:	940f      	str	r4, [sp, #60]	@ 0x3c
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d6e:	9517      	str	r5, [sp, #92]	@ 0x5c
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d70:	951b      	str	r5, [sp, #108]	@ 0x6c
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d72:	9418      	str	r4, [sp, #96]	@ 0x60
 8001d74:	941a      	str	r4, [sp, #104]	@ 0x68
 8001d76:	941c      	str	r4, [sp, #112]	@ 0x70
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d78:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7a:	6184      	str	r4, [r0, #24]
  htim4.Init.Period = M1_PULSE_NBR;
 8001d7c:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001d7e:	f004 fc0d 	bl	800659c <HAL_TIM_Encoder_Init>
 8001d82:	b108      	cbz	r0, 8001d88 <main+0x550>
 8001d84:	b672      	cpsid	i
  while (1)
 8001d86:	e7fe      	b.n	8001d86 <main+0x54e>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d88:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8a:	482a      	ldr	r0, [pc, #168]	@ (8001e34 <main+0x5fc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8c:	930d      	str	r3, [sp, #52]	@ 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d8e:	a90d      	add	r1, sp, #52	@ 0x34
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d90:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001d92:	f004 fdcd 	bl	8006930 <HAL_TIMEx_MasterConfigSynchronization>
 8001d96:	4605      	mov	r5, r0
 8001d98:	b108      	cbz	r0, 8001d9e <main+0x566>
 8001d9a:	b672      	cpsid	i
  while (1)
 8001d9c:	e7fe      	b.n	8001d9c <main+0x564>
  MX_MotorControl_Init();
 8001d9e:	f000 ff37 	bl	8002c10 <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 8001da2:	4c26      	ldr	r4, [pc, #152]	@ (8001e3c <main+0x604>)
 8001da4:	4b26      	ldr	r3, [pc, #152]	@ (8001e40 <main+0x608>)
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001da6:	8225      	strh	r5, [r4, #16]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001da8:	2601      	movs	r6, #1
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001daa:	2702      	movs	r7, #2
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001dac:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001db0:	4620      	mov	r0, r4
  hfdcan1.Init.NominalPrescaler = 68;
 8001db2:	2344      	movs	r3, #68	@ 0x44
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001db4:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001db8:	e9c4 6706 	strd	r6, r7, [r4, #24]
  hfdcan1.Init.DataPrescaler = 1;
 8001dbc:	e9c4 7608 	strd	r7, r6, [r4, #32]
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001dc0:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
  hfdcan1.Init.StdFiltersNbr = 0;
 8001dc4:	e9c4 650c 	strd	r6, r5, [r4, #48]	@ 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001dc8:	e9c4 550e 	strd	r5, r5, [r4, #56]	@ 0x38
  hfdcan1.Init.ProtocolException = DISABLE;
 8001dcc:	74a5      	strb	r5, [r4, #18]
  hfdcan1.Init.NominalPrescaler = 68;
 8001dce:	6163      	str	r3, [r4, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001dd0:	f002 ff78 	bl	8004cc4 <HAL_FDCAN_Init>
 8001dd4:	b108      	cbz	r0, 8001dda <main+0x5a2>
 8001dd6:	b672      	cpsid	i
  while (1)
 8001dd8:	e7fe      	b.n	8001dd8 <main+0x5a0>
  sFilterConfig.FilterIndex = 0;
 8001dda:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  sFilterConfig.FilterID2 = 0x000;
 8001dde:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001de2:	a915      	add	r1, sp, #84	@ 0x54
 8001de4:	4620      	mov	r0, r4
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001de6:	e9cd 7617 	strd	r7, r6, [sp, #92]	@ 0x5c
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001dea:	f003 f859 	bl	8004ea0 <HAL_FDCAN_ConfigFilter>
 8001dee:	b108      	cbz	r0, 8001df4 <main+0x5bc>
 8001df0:	b672      	cpsid	i
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <main+0x5ba>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001df4:	4620      	mov	r0, r4
 8001df6:	f003 f87f 	bl	8004ef8 <HAL_FDCAN_Start>
 8001dfa:	4602      	mov	r2, r0
 8001dfc:	b108      	cbz	r0, 8001e02 <main+0x5ca>
 8001dfe:	b672      	cpsid	i
  while (1)
 8001e00:	e7fe      	b.n	8001e00 <main+0x5c8>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001e02:	4620      	mov	r0, r4
 8001e04:	4631      	mov	r1, r6
 8001e06:	f003 f99b 	bl	8005140 <HAL_FDCAN_ActivateNotification>
 8001e0a:	4604      	mov	r4, r0
 8001e0c:	b1d0      	cbz	r0, 8001e44 <main+0x60c>
 8001e0e:	b672      	cpsid	i
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <main+0x5d8>
 8001e12:	bf00      	nop
 8001e14:	20000524 	.word	0x20000524
 8001e18:	40010300 	.word	0x40010300
 8001e1c:	200004e8 	.word	0x200004e8
 8001e20:	40010304 	.word	0x40010304
 8001e24:	200004ac 	.word	0x200004ac
 8001e28:	40010308 	.word	0x40010308
 8001e2c:	20000460 	.word	0x20000460
 8001e30:	40012c00 	.word	0x40012c00
 8001e34:	20000414 	.word	0x20000414
 8001e38:	40000800 	.word	0x40000800
 8001e3c:	20000560 	.word	0x20000560
 8001e40:	40006400 	.word	0x40006400
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001e44:	4632      	mov	r2, r6
 8001e46:	2104      	movs	r1, #4
 8001e48:	2018      	movs	r0, #24
 8001e4a:	f002 fdcf 	bl	80049ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001e4e:	2018      	movs	r0, #24
 8001e50:	f002 fe08 	bl	8004a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001e54:	4622      	mov	r2, r4
 8001e56:	4621      	mov	r1, r4
 8001e58:	2019      	movs	r0, #25
 8001e5a:	f002 fdc7 	bl	80049ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001e5e:	2019      	movs	r0, #25
 8001e60:	f002 fe00 	bl	8004a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001e64:	4622      	mov	r2, r4
 8001e66:	4639      	mov	r1, r7
 8001e68:	2012      	movs	r0, #18
 8001e6a:	f002 fdbf 	bl	80049ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001e6e:	2012      	movs	r0, #18
 8001e70:	f002 fdf8 	bl	8004a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8001e74:	4622      	mov	r2, r4
 8001e76:	2103      	movs	r1, #3
 8001e78:	201e      	movs	r0, #30
 8001e7a:	f002 fdb7 	bl	80049ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e7e:	201e      	movs	r0, #30
 8001e80:	f002 fdf0 	bl	8004a64 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001e84:	4622      	mov	r2, r4
 8001e86:	2103      	movs	r1, #3
 8001e88:	2028      	movs	r0, #40	@ 0x28
 8001e8a:	f002 fdaf 	bl	80049ec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001e8e:	2028      	movs	r0, #40	@ 0x28
 8001e90:	f002 fde8 	bl	8004a64 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8001e94:	4622      	mov	r2, r4
 8001e96:	2140      	movs	r1, #64	@ 0x40
 8001e98:	4813      	ldr	r0, [pc, #76]	@ (8001ee8 <main+0x6b0>)
 8001e9a:	4d14      	ldr	r5, [pc, #80]	@ (8001eec <main+0x6b4>)
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001e9c:	4c12      	ldr	r4, [pc, #72]	@ (8001ee8 <main+0x6b0>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8001e9e:	f003 fc61 	bl	8005764 <HAL_GPIO_WritePin>
     uart_debug_print("UART is initialized and ready to go\r\n");
 8001ea2:	4813      	ldr	r0, [pc, #76]	@ (8001ef0 <main+0x6b8>)
 8001ea4:	f001 fda0 	bl	80039e8 <uart_debug_print>
  	 uart_debug_print("ESC ID is set to: %d\r\n", (int)ESC_ID);
 8001ea8:	4b12      	ldr	r3, [pc, #72]	@ (8001ef4 <main+0x6bc>)
 8001eaa:	4813      	ldr	r0, [pc, #76]	@ (8001ef8 <main+0x6c0>)
 8001eac:	6819      	ldr	r1, [r3, #0]
 8001eae:	f001 fd9b 	bl	80039e8 <uart_debug_print>
	 if (received_CAN_command){
 8001eb2:	782b      	ldrb	r3, [r5, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0fc      	beq.n	8001eb2 <main+0x67a>
		 received_CAN_command = false;
 8001eb8:	2300      	movs	r3, #0
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001eba:	2140      	movs	r1, #64	@ 0x40
 8001ebc:	4620      	mov	r0, r4
		 received_CAN_command = false;
 8001ebe:	702b      	strb	r3, [r5, #0]
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001ec0:	f003 fc56 	bl	8005770 <HAL_GPIO_TogglePin>
		 HAL_Delay(5);
 8001ec4:	2005      	movs	r0, #5
 8001ec6:	f001 fded 	bl	8003aa4 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001eca:	2140      	movs	r1, #64	@ 0x40
 8001ecc:	4620      	mov	r0, r4
 8001ece:	f003 fc4f 	bl	8005770 <HAL_GPIO_TogglePin>
		 HAL_Delay(5);
 8001ed2:	2005      	movs	r0, #5
 8001ed4:	f001 fde6 	bl	8003aa4 <HAL_Delay>
		 uart_debug_print("---------->>>>>>Received CAN command<<<<<<-----------\r\n");
 8001ed8:	4808      	ldr	r0, [pc, #32]	@ (8001efc <main+0x6c4>)
 8001eda:	f001 fd85 	bl	80039e8 <uart_debug_print>
		 CAN_Parse_MSG(&rxHeader, rxData);
 8001ede:	4908      	ldr	r1, [pc, #32]	@ (8001f00 <main+0x6c8>)
 8001ee0:	4808      	ldr	r0, [pc, #32]	@ (8001f04 <main+0x6cc>)
 8001ee2:	f7ff fbf5 	bl	80016d0 <CAN_Parse_MSG>
 8001ee6:	e7e4      	b.n	8001eb2 <main+0x67a>
 8001ee8:	48000800 	.word	0x48000800
 8001eec:	20000410 	.word	0x20000410
 8001ef0:	08008b9c 	.word	0x08008b9c
 8001ef4:	20000004 	.word	0x20000004
 8001ef8:	08008bc4 	.word	0x08008bc4
 8001efc:	08008bdc 	.word	0x08008bdc
 8001f00:	200003e0 	.word	0x200003e0
 8001f04:	200003e8 	.word	0x200003e8

08001f08 <Error_Handler>:
 8001f08:	b672      	cpsid	i
  while (1)
 8001f0a:	e7fe      	b.n	8001f0a <Error_Handler+0x2>

08001f0c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001f0c:	4b01      	ldr	r3, [pc, #4]	@ (8001f14 <MC_StartMotor1+0x8>)
 8001f0e:	6818      	ldr	r0, [r3, #0]
 8001f10:	f000 b8e2 	b.w	80020d8 <MCI_StartMotor>
 8001f14:	2000077c 	.word	0x2000077c

08001f18 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001f18:	4b01      	ldr	r3, [pc, #4]	@ (8001f20 <MC_StopMotor1+0x8>)
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	f000 b8f2 	b.w	8002104 <MCI_StopMotor>
 8001f20:	2000077c 	.word	0x2000077c

08001f24 <MC_ProgramSpeedRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
{
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8001f24:	4b02      	ldr	r3, [pc, #8]	@ (8001f30 <MC_ProgramSpeedRampMotor1_F+0xc>)
{
 8001f26:	4601      	mov	r1, r0
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	f000 b841 	b.w	8001fb0 <MCI_ExecSpeedRamp_F>
 8001f2e:	bf00      	nop
 8001f30:	2000077c 	.word	0x2000077c

08001f34 <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1(float_t fTargetPosition, float_t fDuration)
{
  MCI_ExecPositionCommand(pMCI[M1], fTargetPosition, fDuration);
 8001f34:	4b01      	ldr	r3, [pc, #4]	@ (8001f3c <MC_ProgramPositionCommandMotor1+0x8>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f000 b84a 	b.w	8001fd0 <MCI_ExecPositionCommand>
 8001f3c:	2000077c 	.word	0x2000077c

08001f40 <MC_GetMecSpeedReferenceMotor1_F>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
{
  return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 8001f40:	4b01      	ldr	r3, [pc, #4]	@ (8001f48 <MC_GetMecSpeedReferenceMotor1_F+0x8>)
 8001f42:	6818      	ldr	r0, [r3, #0]
 8001f44:	f000 b912 	b.w	800216c <MCI_GetMecSpeedRef_F>
 8001f48:	2000077c 	.word	0x2000077c

08001f4c <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
  return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 8001f4c:	4b01      	ldr	r3, [pc, #4]	@ (8001f54 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001f4e:	6818      	ldr	r0, [r3, #0]
 8001f50:	f000 b91e 	b.w	8002190 <MCI_GetPhaseCurrentAmplitude>
 8001f54:	2000077c 	.word	0x2000077c

08001f58 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
  return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 8001f58:	4b01      	ldr	r3, [pc, #4]	@ (8001f60 <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 8001f5a:	6818      	ldr	r0, [r3, #0]
 8001f5c:	f000 b92a 	b.w	80021b4 <MCI_GetPhaseVoltageAmplitude>
 8001f60:	2000077c 	.word	0x2000077c

08001f64 <MC_GetElAngledppMotor1>:
/**
 * @brief returns the electrical angle of the rotor of Motor 1, in DDP format
 */
__weak int16_t MC_GetElAngledppMotor1(void)
{
  return (MCI_GetElAngledpp(pMCI[M1]));
 8001f64:	4b01      	ldr	r3, [pc, #4]	@ (8001f6c <MC_GetElAngledppMotor1+0x8>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	f000 b90e 	b.w	8002188 <MCI_GetElAngledpp>
 8001f6c:	2000077c 	.word	0x2000077c

08001f70 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8001f70:	4b01      	ldr	r3, [pc, #4]	@ (8001f78 <MC_AcknowledgeFaultMotor1+0x8>)
 8001f72:	6818      	ldr	r0, [r3, #0]
 8001f74:	f000 b8e2 	b.w	800213c <MCI_FaultAcknowledged>
 8001f78:	2000077c 	.word	0x2000077c

08001f7c <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 8001f7c:	4b01      	ldr	r3, [pc, #4]	@ (8001f84 <MC_GetOccurredFaultsMotor1+0x8>)
 8001f7e:	6818      	ldr	r0, [r3, #0]
 8001f80:	f000 b8a6 	b.w	80020d0 <MCI_GetOccurredFaults>
 8001f84:	2000077c 	.word	0x2000077c

08001f88 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001f88:	4b01      	ldr	r3, [pc, #4]	@ (8001f90 <MC_GetSTMStateMotor1+0x8>)
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	f000 b89e 	b.w	80020cc <MCI_GetSTMState>
 8001f90:	2000077c 	.word	0x2000077c

08001f94 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop

08001f98 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop

08001f9c <MCI_ExecSpeedRamp>:
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001f9c:	f240 1c01 	movw	ip, #257	@ 0x101
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001fa0:	2303      	movs	r3, #3
    pHandle->hFinalSpeed = hFinalSpeed;
 8001fa2:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 8001fa4:	8302      	strh	r2, [r0, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001fa6:	f8a0 c006 	strh.w	ip, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8001faa:	7203      	strb	r3, [r0, #8]

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop

08001fb0 <MCI_ExecSpeedRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
 8001fb0:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001fcc <MCI_ExecSpeedRamp_F+0x1c>
 8001fb4:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8001fb8:	b508      	push	{r3, lr}
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8001fba:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 8001fbe:	460a      	mov	r2, r1
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8001fc0:	ee10 3a10 	vmov	r3, s0
 8001fc4:	b219      	sxth	r1, r3
 8001fc6:	f7ff ffe9 	bl	8001f9c <MCI_ExecSpeedRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001fca:	bd08      	pop	{r3, pc}
 8001fcc:	3e2aaaab 	.word	0x3e2aaaab

08001fd0 <MCI_ExecPositionCommand>:
  *
  * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
  * function.
  */
__weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float_t FinalPosition, float_t Duration)
{
 8001fd0:	b510      	push	{r4, lr}
 8001fd2:	ed2d 8b02 	vpush	{d8}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001fd6:	6a03      	ldr	r3, [r0, #32]
 8001fd8:	2200      	movs	r2, #0
{
 8001fda:	b082      	sub	sp, #8
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001fdc:	f883 2020 	strb.w	r2, [r3, #32]
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8001fe0:	69c3      	ldr	r3, [r0, #28]
{
 8001fe2:	4604      	mov	r4, r0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fe4:	6958      	ldr	r0, [r3, #20]
{
 8001fe6:	eeb0 8a60 	vmov.f32	s16, s1
 8001fea:	eef0 8a40 	vmov.f32	s17, s0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001fee:	f005 ffb3 	bl	8007f58 <SPD_GetMecAngle>
    if (Duration > 0)
 8001ff2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001ff6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001ffa:	9001      	str	r0, [sp, #4]
    if (Duration > 0)
 8001ffc:	dd14      	ble.n	8002028 <MCI_ExecPositionCommand+0x58>
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8001ffe:	ee07 0a90 	vmov	s15, r0
 8002002:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002040 <MCI_ExecPositionCommand+0x70>
    {
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002006:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002008:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 800200c:	eeb0 1a48 	vmov.f32	s2, s16
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002010:	ee27 0a87 	vmul.f32	s0, s15, s14
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002014:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8002018:	f006 f80a 	bl	8008030 <TC_MoveCommand>
    else
    {
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
    }

    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 800201c:	2304      	movs	r3, #4
 800201e:	7223      	strb	r3, [r4, #8]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002020:	b002      	add	sp, #8
 8002022:	ecbd 8b02 	vpop	{d8}
 8002026:	bd10      	pop	{r4, pc}
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8002028:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800202a:	eeb0 0a68 	vmov.f32	s0, s17
 800202e:	f006 f871 	bl	8008114 <TC_FollowCommand>
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002032:	2304      	movs	r3, #4
 8002034:	7223      	strb	r3, [r4, #8]
}
 8002036:	b002      	add	sp, #8
 8002038:	ecbd 8b02 	vpop	{d8}
 800203c:	bd10      	pop	{r4, pc}
 800203e:	bf00      	nop
 8002040:	38c90fdb 	.word	0x38c90fdb

08002044 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8002044:	8843      	ldrh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 8002046:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 800204a:	430b      	orrs	r3, r1
 800204c:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8002050:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8002054:	8043      	strh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 8002056:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002058:	4770      	bx	lr
 800205a:	bf00      	nop

0800205c <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED)
 800205c:	7983      	ldrb	r3, [r0, #6]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d000      	beq.n	8002064 <MCI_ExecBufferedCommands+0x8>
 8002062:	4770      	bx	lr
{
 8002064:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8002066:	79c2      	ldrb	r2, [r0, #7]
 8002068:	2a02      	cmp	r2, #2
 800206a:	4604      	mov	r4, r0
 800206c:	d01e      	beq.n	80020ac <MCI_ExecBufferedCommands+0x50>
 800206e:	2a03      	cmp	r2, #3
 8002070:	d013      	beq.n	800209a <MCI_ExecBufferedCommands+0x3e>
 8002072:	2a01      	cmp	r2, #1
 8002074:	d117      	bne.n	80020a6 <MCI_ExecBufferedCommands+0x4a>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002076:	6a03      	ldr	r3, [r0, #32]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2020 	strb.w	r2, [r3, #32]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 800207e:	69c0      	ldr	r0, [r0, #28]
 8002080:	2103      	movs	r1, #3
 8002082:	f001 f8ab 	bl	80031dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002086:	8b22      	ldrh	r2, [r4, #24]
 8002088:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 800208c:	69e0      	ldr	r0, [r4, #28]
 800208e:	f001 f8a9 	bl	80031e4 <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 8002092:	b140      	cbz	r0, 80020a6 <MCI_ExecBufferedCommands+0x4a>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8002094:	2302      	movs	r3, #2
 8002096:	71a3      	strb	r3, [r4, #6]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002098:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 800209a:	6a02      	ldr	r2, [r0, #32]
 800209c:	f882 3020 	strb.w	r3, [r2, #32]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80020a0:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80020a2:	60d0      	str	r0, [r2, #12]
      if (commandHasBeenExecuted)
 80020a4:	e7f6      	b.n	8002094 <MCI_ExecBufferedCommands+0x38>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80020a6:	2303      	movs	r3, #3
 80020a8:	71a3      	strb	r3, [r4, #6]
}
 80020aa:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80020ac:	6a03      	ldr	r3, [r0, #32]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2020 	strb.w	r2, [r3, #32]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80020b4:	69c0      	ldr	r0, [r0, #28]
 80020b6:	2104      	movs	r1, #4
 80020b8:	f001 f890 	bl	80031dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80020bc:	8b22      	ldrh	r2, [r4, #24]
 80020be:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 80020c2:	69e0      	ldr	r0, [r4, #28]
 80020c4:	f001 f88e 	bl	80031e4 <STC_ExecRamp>
          break;
 80020c8:	e7e3      	b.n	8002092 <MCI_ExecBufferedCommands+0x36>
 80020ca:	bf00      	nop

080020cc <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80020cc:	7840      	ldrb	r0, [r0, #1]
 80020ce:	4770      	bx	lr

080020d0 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80020d0:	8880      	ldrh	r0, [r0, #4]
 80020d2:	4770      	bx	lr

080020d4 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80020d4:	8840      	ldrh	r0, [r0, #2]
 80020d6:	4770      	bx	lr

080020d8 <MCI_StartMotor>:
{
 80020d8:	b510      	push	{r4, lr}
 80020da:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80020dc:	f7ff fff6 	bl	80020cc <MCI_GetSTMState>
 80020e0:	b108      	cbz	r0, 80020e6 <MCI_StartMotor+0xe>
  bool retVal = false;
 80020e2:	2000      	movs	r0, #0
}
 80020e4:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020e6:	4620      	mov	r0, r4
 80020e8:	f7ff fff2 	bl	80020d0 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80020ec:	2800      	cmp	r0, #0
 80020ee:	d1f8      	bne.n	80020e2 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80020f0:	4620      	mov	r0, r4
 80020f2:	f7ff ffef 	bl	80020d4 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80020f6:	2800      	cmp	r0, #0
 80020f8:	d1f3      	bne.n	80020e2 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 80020fa:	2001      	movs	r0, #1
 80020fc:	7020      	strb	r0, [r4, #0]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80020fe:	71a0      	strb	r0, [r4, #6]
}
 8002100:	bd10      	pop	{r4, pc}
 8002102:	bf00      	nop

08002104 <MCI_StopMotor>:
{
 8002104:	b538      	push	{r3, r4, r5, lr}
 8002106:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8002108:	f7ff ffe0 	bl	80020cc <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 800210c:	4604      	mov	r4, r0
 800210e:	b118      	cbz	r0, 8002118 <MCI_StopMotor+0x14>
 8002110:	f1b0 040c 	subs.w	r4, r0, #12
 8002114:	bf18      	it	ne
 8002116:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002118:	4628      	mov	r0, r5
 800211a:	f7ff ffd9 	bl	80020d0 <MCI_GetOccurredFaults>
 800211e:	b110      	cbz	r0, 8002126 <MCI_StopMotor+0x22>
  bool retVal = false;
 8002120:	2400      	movs	r4, #0
}
 8002122:	4620      	mov	r0, r4
 8002124:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002126:	4628      	mov	r0, r5
 8002128:	f7ff ffd4 	bl	80020d4 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800212c:	2800      	cmp	r0, #0
 800212e:	d1f7      	bne.n	8002120 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002130:	2c00      	cmp	r4, #0
 8002132:	d0f5      	beq.n	8002120 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8002134:	2305      	movs	r3, #5
 8002136:	702b      	strb	r3, [r5, #0]
      retVal = true;
 8002138:	e7f3      	b.n	8002122 <MCI_StopMotor+0x1e>
 800213a:	bf00      	nop

0800213c <MCI_FaultAcknowledged>:
{
 800213c:	b510      	push	{r4, lr}
 800213e:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002140:	f7ff ffc4 	bl	80020cc <MCI_GetSTMState>
 8002144:	280b      	cmp	r0, #11
 8002146:	d001      	beq.n	800214c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8002148:	2000      	movs	r0, #0
}
 800214a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff ffc1 	bl	80020d4 <MCI_GetCurrentFaults>
 8002152:	2800      	cmp	r0, #0
 8002154:	d1f8      	bne.n	8002148 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8002156:	2302      	movs	r3, #2
 8002158:	7023      	strb	r3, [r4, #0]
      pHandle->PastFaults = MC_NO_FAULTS;
 800215a:	80a0      	strh	r0, [r4, #4]
      reVal = true;
 800215c:	2001      	movs	r0, #1
}
 800215e:	bd10      	pop	{r4, pc}

08002160 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002160:	8883      	ldrh	r3, [r0, #4]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002162:	8840      	ldrh	r0, [r0, #2]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8002164:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop

0800216c <MCI_GetMecSpeedRef_F>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
{
 800216c:	b508      	push	{r3, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0.0f :
          (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
#else
  return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
 800216e:	69c0      	ldr	r0, [r0, #28]
 8002170:	f001 f830 	bl	80031d4 <STC_GetMecSpeedRefUnit>
 8002174:	ee07 0a90 	vmov	s15, r0
 8002178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800217c:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#endif
}
 8002180:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002184:	bd08      	pop	{r3, pc}
 8002186:	bf00      	nop

08002188 <MCI_GetElAngledpp>:
__weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
#else
  return (pHandle->pFOCVars->hElAngle);
 8002188:	6a03      	ldr	r3, [r0, #32]
#endif
}
 800218a:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 800218e:	4770      	bx	lr

08002190 <MCI_GetPhaseCurrentAmplitude>:
{
  uint32_t temp_val;
  __disable_irq();
  /* Configure and call to CORDIC- */
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
  LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (((uint32_t)alpha) & 0x0000FFFFU)));
 8002190:	6a03      	ldr	r3, [r0, #32]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	b672      	cpsid	i
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 8002196:	4a05      	ldr	r2, [pc, #20]	@ (80021ac <MCI_GetPhaseCurrentAmplitude+0x1c>)
 8002198:	4905      	ldr	r1, [pc, #20]	@ (80021b0 <MCI_GetPhaseCurrentAmplitude+0x20>)
 800219a:	6011      	str	r1, [r2, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800219c:	6053      	str	r3, [r2, #4]
  return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 800219e:	6813      	ldr	r3, [r2, #0]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	dafc      	bge.n	800219e <MCI_GetPhaseCurrentAmplitude+0xe>
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80021a4:	6890      	ldr	r0, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80021a6:	b662      	cpsie	i
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif

  return (wAux);
}
 80021a8:	b200      	sxth	r0, r0
 80021aa:	4770      	bx	lr
 80021ac:	40020c00 	.word	0x40020c00
 80021b0:	00600063 	.word	0x00600063

080021b4 <MCI_GetPhaseVoltageAmplitude>:
#endif
    alphabeta_t Local_Voltage;
    int32_t wAux1;
    int32_t wAux2;

    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 80021b4:	6a02      	ldr	r2, [r0, #32]
{
 80021b6:	b508      	push	{r3, lr}
    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 80021b8:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 80021bc:	f9b2 0016 	ldrsh.w	r0, [r2, #22]
    wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
    wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 80021c0:	fb03 f303 	mul.w	r3, r3, r3

    wAux1 += wAux2;
    wAux1 = MCM_Sqrt(wAux1);
 80021c4:	fb00 3000 	mla	r0, r0, r0, r3
 80021c8:	f000 f8a2 	bl	8002310 <MCM_Sqrt>

    if (wAux1 > INT16_MAX)
 80021cc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80021d0:	4298      	cmp	r0, r3
 80021d2:	bfa8      	it	ge
 80021d4:	4618      	movge	r0, r3
    temp_wAux = (int16_t)wAux1;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_wAux);
}
 80021d6:	b200      	sxth	r0, r0
 80021d8:	bd08      	pop	{r3, pc}
 80021da:	bf00      	nop

080021dc <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80021dc:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80021e0:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80021e4:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80021e8:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80021ec:	fb10 f202 	smulbb	r2, r0, r2
 80021f0:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80021f4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80021f8:	b084      	sub	sp, #16
 80021fa:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80021fc:	da05      	bge.n	800220a <MCM_Clarke+0x2e>
 80021fe:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8002200:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8002204:	da0c      	bge.n	8002220 <MCM_Clarke+0x44>
 8002206:	4a09      	ldr	r2, [pc, #36]	@ (800222c <MCM_Clarke+0x50>)
 8002208:	e001      	b.n	800220e <MCM_Clarke+0x32>
 800220a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800220e:	b29b      	uxth	r3, r3
 8002210:	2000      	movs	r0, #0
 8002212:	f363 000f 	bfi	r0, r3, #0, #16
 8002216:	b293      	uxth	r3, r2
 8002218:	f363 401f 	bfi	r0, r3, #16, #16
}
 800221c:	b004      	add	sp, #16
 800221e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8002220:	4802      	ldr	r0, [pc, #8]	@ (800222c <MCM_Clarke+0x50>)
 8002222:	b20a      	sxth	r2, r1
 8002224:	4282      	cmp	r2, r0
 8002226:	bfb8      	it	lt
 8002228:	4602      	movlt	r2, r0
 800222a:	e7f0      	b.n	800220e <MCM_Clarke+0x32>
 800222c:	ffff8001 	.word	0xffff8001

08002230 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002230:	4b06      	ldr	r3, [pc, #24]	@ (800224c <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8002232:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002236:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800223a:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 800223e:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002240:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8002242:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002244:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8002246:	b002      	add	sp, #8
 8002248:	4770      	bx	lr
 800224a:	bf00      	nop
 800224c:	40020c00 	.word	0x40020c00

08002250 <MCM_Park>:
{
 8002250:	b530      	push	{r4, r5, lr}
 8002252:	4605      	mov	r5, r0
 8002254:	4604      	mov	r4, r0
 8002256:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002258:	4608      	mov	r0, r1
 800225a:	f7ff ffe9 	bl	8002230 <MCM_Trig_Functions>
 800225e:	b22d      	sxth	r5, r5
 8002260:	b201      	sxth	r1, r0
 8002262:	1424      	asrs	r4, r4, #16
 8002264:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8002266:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800226a:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800226e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002272:	da05      	bge.n	8002280 <MCM_Park+0x30>
 8002274:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8002276:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 800227a:	da22      	bge.n	80022c2 <MCM_Park+0x72>
 800227c:	4a14      	ldr	r2, [pc, #80]	@ (80022d0 <MCM_Park+0x80>)
 800227e:	e001      	b.n	8002284 <MCM_Park+0x34>
 8002280:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002284:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002288:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 800228c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002290:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8002294:	da04      	bge.n	80022a0 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8002296:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800229a:	da0c      	bge.n	80022b6 <MCM_Park+0x66>
 800229c:	4b0c      	ldr	r3, [pc, #48]	@ (80022d0 <MCM_Park+0x80>)
 800229e:	e001      	b.n	80022a4 <MCM_Park+0x54>
 80022a0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80022a4:	b292      	uxth	r2, r2
 80022a6:	2000      	movs	r0, #0
 80022a8:	f362 000f 	bfi	r0, r2, #0, #16
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	f363 401f 	bfi	r0, r3, #16, #16
}
 80022b2:	b005      	add	sp, #20
 80022b4:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80022b6:	4906      	ldr	r1, [pc, #24]	@ (80022d0 <MCM_Park+0x80>)
 80022b8:	b21b      	sxth	r3, r3
 80022ba:	428b      	cmp	r3, r1
 80022bc:	bfb8      	it	lt
 80022be:	460b      	movlt	r3, r1
 80022c0:	e7f0      	b.n	80022a4 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80022c2:	4b03      	ldr	r3, [pc, #12]	@ (80022d0 <MCM_Park+0x80>)
 80022c4:	b212      	sxth	r2, r2
 80022c6:	429a      	cmp	r2, r3
 80022c8:	bfb8      	it	lt
 80022ca:	461a      	movlt	r2, r3
 80022cc:	e7da      	b.n	8002284 <MCM_Park+0x34>
 80022ce:	bf00      	nop
 80022d0:	ffff8001 	.word	0xffff8001

080022d4 <MCM_Rev_Park>:
{
 80022d4:	b530      	push	{r4, r5, lr}
 80022d6:	4605      	mov	r5, r0
 80022d8:	b085      	sub	sp, #20
 80022da:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80022dc:	4608      	mov	r0, r1
 80022de:	f7ff ffa7 	bl	8002230 <MCM_Trig_Functions>
 80022e2:	1424      	asrs	r4, r4, #16
 80022e4:	1402      	asrs	r2, r0, #16
 80022e6:	b22d      	sxth	r5, r5
 80022e8:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80022ea:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80022ee:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80022f2:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80022f6:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80022fa:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80022fe:	2000      	movs	r0, #0
 8002300:	f363 000f 	bfi	r0, r3, #0, #16
 8002304:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002308:	f364 401f 	bfi	r0, r4, #16, #16
}
 800230c:	b005      	add	sp, #20
 800230e:	bd30      	pop	{r4, r5, pc}

08002310 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002310:	2800      	cmp	r0, #0
 8002312:	dd09      	ble.n	8002328 <MCM_Sqrt+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002314:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8002316:	4b05      	ldr	r3, [pc, #20]	@ (800232c <MCM_Sqrt+0x1c>)
 8002318:	f240 1269 	movw	r2, #361	@ 0x169
 800231c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800231e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002320:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002322:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8002324:	b662      	cpsie	i
}
 8002326:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002328:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 800232a:	4770      	bx	lr
 800232c:	40020c00 	.word	0x40020c00

08002330 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002330:	b300      	cbz	r0, 8002374 <MCboot+0x44>
{
 8002332:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 8002334:	4a10      	ldr	r2, [pc, #64]	@ (8002378 <MCboot+0x48>)
    bMCBootCompleted = (uint8_t )0;
 8002336:	4c11      	ldr	r4, [pc, #68]	@ (800237c <MCboot+0x4c>)
    pMCIList[M1] = &Mci[M1];
 8002338:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 800233a:	2300      	movs	r3, #0
 800233c:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 800233e:	f000 f9e5 	bl	800270c <FOC_Init>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002342:	480f      	ldr	r0, [pc, #60]	@ (8002380 <MCboot+0x50>)
 8002344:	f004 fdf4 	bl	8006f30 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8002348:	480e      	ldr	r0, [pc, #56]	@ (8002384 <MCboot+0x54>)
 800234a:	f006 f89f 	bl	800848c <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 800234e:	480e      	ldr	r0, [pc, #56]	@ (8002388 <MCboot+0x58>)
 8002350:	f000 fe5e 	bl	8003010 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8002354:	480d      	ldr	r0, [pc, #52]	@ (800238c <MCboot+0x5c>)
 8002356:	f005 fdb9 	bl	8007ecc <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 800235a:	480d      	ldr	r0, [pc, #52]	@ (8002390 <MCboot+0x60>)
 800235c:	f000 fe58 	bl	8003010 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8002360:	480c      	ldr	r0, [pc, #48]	@ (8002394 <MCboot+0x64>)
 8002362:	f004 fdad 	bl	8006ec0 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002366:	f7ff fe15 	bl	8001f94 <MC_APP_BootHook>

    /**************************************/
    /*    Start timers synchronously      */
    /**************************************/
    startTimers();
 800236a:	f000 fc6f 	bl	8002c4c <startTimers>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 800236e:	2301      	movs	r3, #1
 8002370:	7023      	strb	r3, [r4, #0]
  }
}
 8002372:	bd10      	pop	{r4, pc}
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	20000008 	.word	0x20000008
 800237c:	20000774 	.word	0x20000774
 8002380:	20000230 	.word	0x20000230
 8002384:	200002b8 	.word	0x200002b8
 8002388:	20000280 	.word	0x20000280
 800238c:	2000026c 	.word	0x2000026c
 8002390:	200002a8 	.word	0x200002a8
 8002394:	20000290 	.word	0x20000290

08002398 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002398:	4b01      	ldr	r3, [pc, #4]	@ (80023a0 <TSK_SetChargeBootCapDelayM1+0x8>)
 800239a:	8018      	strh	r0, [r3, #0]
}
 800239c:	4770      	bx	lr
 800239e:	bf00      	nop
 80023a0:	20000778 	.word	0x20000778

080023a4 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80023a4:	4b03      	ldr	r3, [pc, #12]	@ (80023b4 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80023a6:	8818      	ldrh	r0, [r3, #0]
 80023a8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80023aa:	fab0 f080 	clz	r0, r0
 80023ae:	0940      	lsrs	r0, r0, #5
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	20000778 	.word	0x20000778

080023b8 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80023b8:	4b01      	ldr	r3, [pc, #4]	@ (80023c0 <TSK_SetStopPermanencyTimeM1+0x8>)
 80023ba:	8018      	strh	r0, [r3, #0]
}
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	20000776 	.word	0x20000776

080023c4 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80023c4:	4b03      	ldr	r3, [pc, #12]	@ (80023d4 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80023c6:	8818      	ldrh	r0, [r3, #0]
 80023c8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80023ca:	fab0 f080 	clz	r0, r0
 80023ce:	0940      	lsrs	r0, r0, #5
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000776 	.word	0x20000776

080023d8 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 80023d8:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 80023da:	2000      	movs	r0, #0
 80023dc:	f000 fb90 	bl	8002b00 <FOC_HighFrequencyTask>

  /* USER CODE END HighFrequencyTask 1 */

  return (bMotorNbr);

}
 80023e0:	2000      	movs	r0, #0
 80023e2:	bd08      	pop	{r3, pc}

080023e4 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 80023e6:	4604      	mov	r4, r0
 80023e8:	b320      	cbz	r0, 8002434 <TSK_SafetyTask_PWMOFF+0x50>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80023ea:	4e1e      	ldr	r6, [pc, #120]	@ (8002464 <TSK_SafetyTask_PWMOFF+0x80>)
 80023ec:	6830      	ldr	r0, [r6, #0]
 80023ee:	f000 fdf3 	bl	8002fd8 <PWMC_IsFaultOccurred>
 80023f2:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 80023f4:	4d1c      	ldr	r5, [pc, #112]	@ (8002468 <TSK_SafetyTask_PWMOFF+0x84>)
 80023f6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80023fa:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80023fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8002402:	43ca      	mvns	r2, r1
 8002404:	4628      	mov	r0, r5
 8002406:	b292      	uxth	r2, r2
 8002408:	f7ff fe1c 	bl	8002044 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 800240c:	4628      	mov	r0, r5
 800240e:	f7ff fea7 	bl	8002160 <MCI_GetFaultState>
 8002412:	b170      	cbz	r0, 8002432 <TSK_SafetyTask_PWMOFF+0x4e>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8002414:	4b15      	ldr	r3, [pc, #84]	@ (800246c <TSK_SafetyTask_PWMOFF+0x88>)
 8002416:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800241a:	b10b      	cbz	r3, 8002420 <TSK_SafetyTask_PWMOFF+0x3c>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 800241c:	2200      	movs	r2, #0
 800241e:	73da      	strb	r2, [r3, #15]
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002420:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002424:	f000 fda2 	bl	8002f6c <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8002428:	4620      	mov	r0, r4
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800242a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 800242e:	f000 b937 	b.w	80026a0 <FOC_Clear>
}
 8002432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline uint16_t RCM_GetRegularConv(const RegConv_t *regConv)
{
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  return ((MC_NULL == regConv) ? 0U : regConv->data);
#else
  return (regConv->data);
 8002434:	4b0e      	ldr	r3, [pc, #56]	@ (8002470 <TSK_SafetyTask_PWMOFF+0x8c>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002436:	480f      	ldr	r0, [pc, #60]	@ (8002474 <TSK_SafetyTask_PWMOFF+0x90>)
 8002438:	8959      	ldrh	r1, [r3, #10]
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800243a:	4e0a      	ldr	r6, [pc, #40]	@ (8002464 <TSK_SafetyTask_PWMOFF+0x80>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 800243c:	f004 fd52 	bl	8006ee4 <NTC_CalcAvTemp>
 8002440:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002442:	6830      	ldr	r0, [r6, #0]
 8002444:	f000 fdc8 	bl	8002fd8 <PWMC_IsFaultOccurred>
 8002448:	4b0b      	ldr	r3, [pc, #44]	@ (8002478 <TSK_SafetyTask_PWMOFF+0x94>)
 800244a:	4605      	mov	r5, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 800244c:	8959      	ldrh	r1, [r3, #10]
 800244e:	480b      	ldr	r0, [pc, #44]	@ (800247c <TSK_SafetyTask_PWMOFF+0x98>)
 8002450:	f005 fd42 	bl	8007ed8 <RVBS_CalcAvVbus>
 8002454:	4307      	orrs	r7, r0
 8002456:	f007 070e 	and.w	r7, r7, #14
 800245a:	ea45 0107 	orr.w	r1, r5, r7
 800245e:	b289      	uxth	r1, r1
 8002460:	e7c8      	b.n	80023f4 <TSK_SafetyTask_PWMOFF+0x10>
 8002462:	bf00      	nop
 8002464:	2000076c 	.word	0x2000076c
 8002468:	20000008 	.word	0x20000008
 800246c:	20000770 	.word	0x20000770
 8002470:	200002a8 	.word	0x200002a8
 8002474:	20000290 	.word	0x20000290
 8002478:	20000280 	.word	0x20000280
 800247c:	2000026c 	.word	0x2000026c

08002480 <TSK_SafetyTask>:
{
 8002480:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002482:	4b04      	ldr	r3, [pc, #16]	@ (8002494 <TSK_SafetyTask+0x14>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d000      	beq.n	800248c <TSK_SafetyTask+0xc>
}
 800248a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800248c:	2000      	movs	r0, #0
 800248e:	f7ff ffa9 	bl	80023e4 <TSK_SafetyTask_PWMOFF>
}
 8002492:	bd08      	pop	{r3, pc}
 8002494:	20000774 	.word	0x20000774

08002498 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <MC_RunMotorControlTasks+0x48>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	b1cb      	cbz	r3, 80024d2 <MC_RunMotorControlTasks+0x3a>
{
 800249e:	b510      	push	{r4, lr}
    if(hMFTaskCounterM1 > 0u)
 80024a0:	4c10      	ldr	r4, [pc, #64]	@ (80024e4 <MC_RunMotorControlTasks+0x4c>)
 80024a2:	8823      	ldrh	r3, [r4, #0]
 80024a4:	b1b3      	cbz	r3, 80024d4 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 80024a6:	3b01      	subs	r3, #1
 80024a8:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80024aa:	4a0f      	ldr	r2, [pc, #60]	@ (80024e8 <MC_RunMotorControlTasks+0x50>)
      hMFTaskCounterM1--;
 80024ac:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 80024ae:	8813      	ldrh	r3, [r2, #0]
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b11b      	cbz	r3, 80024bc <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 80024b4:	8813      	ldrh	r3, [r2, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80024bc:	4a0b      	ldr	r2, [pc, #44]	@ (80024ec <MC_RunMotorControlTasks+0x54>)
 80024be:	8813      	ldrh	r3, [r2, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	b11b      	cbz	r3, 80024cc <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 80024c4:	8813      	ldrh	r3, [r2, #0]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 80024cc:	f7ff ffd8 	bl	8002480 <TSK_SafetyTask>
}
 80024d0:	bd10      	pop	{r4, pc}
 80024d2:	4770      	bx	lr
      TSK_MediumFrequencyTaskM1();
 80024d4:	f000 f9c2 	bl	800285c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 80024d8:	f7ff fd5e 	bl	8001f98 <MC_APP_PostMediumFrequencyHook_M1>
 80024dc:	2301      	movs	r3, #1
 80024de:	e7e4      	b.n	80024aa <MC_RunMotorControlTasks+0x12>
 80024e0:	20000774 	.word	0x20000774
 80024e4:	2000077a 	.word	0x2000077a
 80024e8:	20000778 	.word	0x20000778
 80024ec:	20000776 	.word	0x20000776

080024f0 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80024f0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 80024f2:	2000      	movs	r0, #0
 80024f4:	f000 f8d4 	bl	80026a0 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80024f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80024fc:	4802      	ldr	r0, [pc, #8]	@ (8002508 <TSK_HardwareFaultTask+0x18>)
 80024fe:	2200      	movs	r2, #0
 8002500:	2180      	movs	r1, #128	@ 0x80
 8002502:	f7ff bd9f 	b.w	8002044 <MCI_FaultProcessing>
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008

0800250c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 800250c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800250e:	f7ff fd3b 	bl	8001f88 <MC_GetSTMStateMotor1>
 8002512:	b918      	cbnz	r0, 800251c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002514:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002518:	f7ff bcf8 	b.w	8001f0c <MC_StartMotor1>
}
 800251c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002520:	f7ff bcfa 	b.w	8001f18 <MC_StopMotor1>

08002524 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002524:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002526:	4a55      	ldr	r2, [pc, #340]	@ (800267c <mc_lock_pins+0x158>)
 8002528:	4855      	ldr	r0, [pc, #340]	@ (8002680 <mc_lock_pins+0x15c>)
 800252a:	4c56      	ldr	r4, [pc, #344]	@ (8002684 <mc_lock_pins+0x160>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 800252c:	2604      	movs	r6, #4
 800252e:	b094      	sub	sp, #80	@ 0x50
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002530:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002532:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002534:	61d0      	str	r0, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002536:	69d3      	ldr	r3, [r2, #28]
 8002538:	9313      	str	r3, [sp, #76]	@ 0x4c
  WRITE_REG(GPIOx->LCKR, PinMask);
 800253a:	2702      	movs	r7, #2
  (void) temp;
 800253c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800253e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002540:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002542:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002544:	69d3      	ldr	r3, [r2, #28]
 8002546:	9312      	str	r3, [sp, #72]	@ 0x48
  (void) temp;
 8002548:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 800254a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800254e:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 8002552:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002554:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002556:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002558:	69d1      	ldr	r1, [r2, #28]
 800255a:	9111      	str	r1, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800255c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8002560:	9911      	ldr	r1, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002562:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002564:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002568:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800256a:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800256c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800256e:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002572:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
  (void) temp;
 8002576:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800257a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800257c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800257e:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002580:	69d1      	ldr	r1, [r2, #28]
 8002582:	910f      	str	r1, [sp, #60]	@ 0x3c
  (void) temp;
 8002584:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002586:	4940      	ldr	r1, [pc, #256]	@ (8002688 <mc_lock_pins+0x164>)
 8002588:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800258a:	2580      	movs	r5, #128	@ 0x80
 800258c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800258e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002590:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002594:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 8002598:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800259c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800259e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025a0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025a2:	69dc      	ldr	r4, [r3, #28]
 80025a4:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 80025a6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025a8:	4c38      	ldr	r4, [pc, #224]	@ (800268c <mc_lock_pins+0x168>)
 80025aa:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025ac:	2708      	movs	r7, #8
 80025ae:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025b0:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025b2:	69dc      	ldr	r4, [r3, #28]
 80025b4:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 80025b6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025b8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025ba:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025bc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025be:	69d8      	ldr	r0, [r3, #28]
 80025c0:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 80025c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025c4:	4832      	ldr	r0, [pc, #200]	@ (8002690 <mc_lock_pins+0x16c>)
 80025c6:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025c8:	2440      	movs	r4, #64	@ 0x40
 80025ca:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025cc:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025ce:	69de      	ldr	r6, [r3, #28]
 80025d0:	960a      	str	r6, [sp, #40]	@ 0x28
  (void) temp;
 80025d2:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025d4:	4e2f      	ldr	r6, [pc, #188]	@ (8002694 <mc_lock_pins+0x170>)
 80025d6:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025d8:	2720      	movs	r7, #32
 80025da:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025dc:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025de:	69de      	ldr	r6, [r3, #28]
 80025e0:	9609      	str	r6, [sp, #36]	@ 0x24
  (void) temp;
 80025e2:	9e09      	ldr	r6, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025e4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025e6:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025e8:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025ea:	69d0      	ldr	r0, [r2, #28]
 80025ec:	9008      	str	r0, [sp, #32]
  (void) temp;
 80025ee:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025f0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025f2:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025f4:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80025f6:	69d1      	ldr	r1, [r2, #28]
 80025f8:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80025fa:	f44f 7080 	mov.w	r0, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80025fe:	4926      	ldr	r1, [pc, #152]	@ (8002698 <mc_lock_pins+0x174>)
  (void) temp;
 8002600:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002602:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002604:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002606:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002608:	69d9      	ldr	r1, [r3, #28]
 800260a:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800260c:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002610:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 8002614:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002616:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002618:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800261a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800261c:	69d9      	ldr	r1, [r3, #28]
 800261e:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002620:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002624:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8002628:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800262a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800262c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800262e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002630:	69d9      	ldr	r1, [r3, #28]
 8002632:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002634:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002638:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 800263c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800263e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002640:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002642:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002648:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800264c:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8002650:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002652:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002654:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002656:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002658:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800265a:	4b10      	ldr	r3, [pc, #64]	@ (800269c <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 800265c:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800265e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002662:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8002666:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002668:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800266a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800266c:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002672:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002674:	b014      	add	sp, #80	@ 0x50
 8002676:	bcf0      	pop	{r4, r5, r6, r7}
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	48000400 	.word	0x48000400
 8002680:	00010004 	.word	0x00010004
 8002684:	00010002 	.word	0x00010002
 8002688:	00010080 	.word	0x00010080
 800268c:	00010008 	.word	0x00010008
 8002690:	00010040 	.word	0x00010040
 8002694:	00010020 	.word	0x00010020
 8002698:	00010100 	.word	0x00010100
 800269c:	48000800 	.word	0x48000800

080026a0 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 80026a0:	b538      	push	{r3, r4, r5, lr}
 80026a2:	eb00 1100 	add.w	r1, r0, r0, lsl #4
 80026a6:	4b14      	ldr	r3, [pc, #80]	@ (80026f8 <FOC_Clear+0x58>)

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 80026a8:	2400      	movs	r4, #0
 80026aa:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 80026ae:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80026b2:	4912      	ldr	r1, [pc, #72]	@ (80026fc <FOC_Clear+0x5c>)
  FOCVars[bMotor].Iab = NULL_ab;
 80026b4:	6054      	str	r4, [r2, #4]
{
 80026b6:	4605      	mov	r5, r0
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80026b8:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  FOCVars[bMotor].Iab = NULL_ab;
 80026bc:	6094      	str	r4, [r2, #8]
 80026be:	60d4      	str	r4, [r2, #12]
  FOCVars[bMotor].Vqd = NULL_qd;
 80026c0:	f8c2 4012 	str.w	r4, [r2, #18]
 80026c4:	f8c2 4016 	str.w	r4, [r2, #22]
 80026c8:	f8c2 401a 	str.w	r4, [r2, #26]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80026cc:	4621      	mov	r1, r4
 80026ce:	f004 fc37 	bl	8006f40 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80026d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002700 <FOC_Clear+0x60>)
 80026d4:	4621      	mov	r1, r4
 80026d6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80026da:	f004 fc31 	bl	8006f40 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80026de:	4b09      	ldr	r3, [pc, #36]	@ (8002704 <FOC_Clear+0x64>)
 80026e0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80026e4:	f000 fd6a 	bl	80031bc <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80026e8:	4b07      	ldr	r3, [pc, #28]	@ (8002708 <FOC_Clear+0x68>)
 80026ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80026ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80026f2:	f000 bc3b 	b.w	8002f6c <PWMC_SwitchOffPWM>
 80026f6:	bf00      	nop
 80026f8:	20000748 	.word	0x20000748
 80026fc:	20000040 	.word	0x20000040
 8002700:	2000003c 	.word	0x2000003c
 8002704:	20000044 	.word	0x20000044
 8002708:	2000076c 	.word	0x2000076c

0800270c <FOC_Init>:
{
 800270c:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800270e:	4b2b      	ldr	r3, [pc, #172]	@ (80027bc <FOC_Init+0xb0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002710:	4e2b      	ldr	r6, [pc, #172]	@ (80027c0 <FOC_Init+0xb4>)
    ENC_Init (&ENCODER_M1);
 8002712:	4c2c      	ldr	r4, [pc, #176]	@ (80027c4 <FOC_Init+0xb8>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002714:	482c      	ldr	r0, [pc, #176]	@ (80027c8 <FOC_Init+0xbc>)
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002716:	4d2d      	ldr	r5, [pc, #180]	@ (80027cc <FOC_Init+0xc0>)
 8002718:	4f2d      	ldr	r7, [pc, #180]	@ (80027d0 <FOC_Init+0xc4>)
{
 800271a:	b083      	sub	sp, #12
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800271c:	6018      	str	r0, [r3, #0]
    R3_2_Init(&PWM_Handle_M1);
 800271e:	f004 ffc7 	bl	80076b0 <R3_2_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002722:	4630      	mov	r0, r6
 8002724:	f004 fc04 	bl	8006f30 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8002728:	4620      	mov	r0, r4
 800272a:	f004 fa73 	bl	8006c14 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 800272e:	6829      	ldr	r1, [r5, #0]
 8002730:	4a28      	ldr	r2, [pc, #160]	@ (80027d4 <FOC_Init+0xc8>)
 8002732:	4623      	mov	r3, r4
 8002734:	4638      	mov	r0, r7
 8002736:	f004 fa21 	bl	8006b7c <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 800273a:	4b27      	ldr	r3, [pc, #156]	@ (80027d8 <FOC_Init+0xcc>)
 800273c:	601f      	str	r7, [r3, #0]
    PID_HandleInit(&PID_PosParamsM1);
 800273e:	4f27      	ldr	r7, [pc, #156]	@ (80027dc <FOC_Init+0xd0>)
 8002740:	4638      	mov	r0, r7
 8002742:	f004 fbf5 	bl	8006f30 <PID_HandleInit>
    TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 8002746:	4623      	mov	r3, r4
 8002748:	4639      	mov	r1, r7
 800274a:	4a25      	ldr	r2, [pc, #148]	@ (80027e0 <FOC_Init+0xd4>)
 800274c:	4825      	ldr	r0, [pc, #148]	@ (80027e4 <FOC_Init+0xd8>)
 800274e:	f005 fc3f 	bl	8007fd0 <TC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002752:	4631      	mov	r1, r6
 8002754:	4622      	mov	r2, r4
 8002756:	6828      	ldr	r0, [r5, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002758:	4c23      	ldr	r4, [pc, #140]	@ (80027e8 <FOC_Init+0xdc>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 800275a:	f000 fd17 	bl	800318c <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 800275e:	4823      	ldr	r0, [pc, #140]	@ (80027ec <FOC_Init+0xe0>)
 8002760:	f004 fbe6 	bl	8006f30 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002764:	4822      	ldr	r0, [pc, #136]	@ (80027f0 <FOC_Init+0xe4>)
 8002766:	f004 fbe3 	bl	8006f30 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 800276a:	4b22      	ldr	r3, [pc, #136]	@ (80027f4 <FOC_Init+0xe8>)
 800276c:	4a22      	ldr	r2, [pc, #136]	@ (80027f8 <FOC_Init+0xec>)
 800276e:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002770:	4822      	ldr	r0, [pc, #136]	@ (80027fc <FOC_Init+0xf0>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002772:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002776:	4b22      	ldr	r3, [pc, #136]	@ (8002800 <FOC_Init+0xf4>)
 8002778:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800277a:	f005 fbe5 	bl	8007f48 <REMNG_Init>
    FOC_Clear(M1);
 800277e:	2000      	movs	r0, #0
 8002780:	f7ff ff8e 	bl	80026a0 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002784:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002786:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002788:	f884 3020 	strb.w	r3, [r4, #32]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800278c:	f000 fdac 	bl	80032e8 <STC_GetDefaultIqdref>
 8002790:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002794:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002796:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002798:	81e2      	strh	r2, [r4, #14]
 800279a:	81a3      	strh	r3, [r4, #12]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800279c:	f000 fda4 	bl	80032e8 <STC_GetDefaultIqdref>
 80027a0:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 80027a4:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80027a6:	8223      	strh	r3, [r4, #16]
    MCI_ExecSpeedRamp(&Mci[M1],
 80027a8:	f000 fd9a 	bl	80032e0 <STC_GetMecSpeedRefUnitDefault>
 80027ac:	4601      	mov	r1, r0
 80027ae:	4815      	ldr	r0, [pc, #84]	@ (8002804 <FOC_Init+0xf8>)
 80027b0:	2200      	movs	r2, #0
}
 80027b2:	b003      	add	sp, #12
 80027b4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 80027b8:	f7ff bbf0 	b.w	8001f9c <MCI_ExecSpeedRamp>
 80027bc:	2000076c 	.word	0x2000076c
 80027c0:	20000230 	.word	0x20000230
 80027c4:	2000030c 	.word	0x2000030c
 80027c8:	20000064 	.word	0x20000064
 80027cc:	20000044 	.word	0x20000044
 80027d0:	200002f0 	.word	0x200002f0
 80027d4:	200002b8 	.word	0x200002b8
 80027d8:	20000770 	.word	0x20000770
 80027dc:	200001ac 	.word	0x200001ac
 80027e0:	20000104 	.word	0x20000104
 80027e4:	2000013c 	.word	0x2000013c
 80027e8:	20000748 	.word	0x20000748
 80027ec:	20000204 	.word	0x20000204
 80027f0:	200001d8 	.word	0x200001d8
 80027f4:	20000038 	.word	0x20000038
 80027f8:	2000026c 	.word	0x2000026c
 80027fc:	2000004c 	.word	0x2000004c
 8002800:	20000744 	.word	0x20000744
 8002804:	20000008 	.word	0x20000008

08002808 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002808:	4770      	bx	lr
 800280a:	bf00      	nop

0800280c <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800280c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002810:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8002812:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8002814:	4e0f      	ldr	r6, [pc, #60]	@ (8002854 <FOC_CalcCurrRef+0x48>)
 8002816:	eb00 1500 	add.w	r5, r0, r0, lsl #4
 800281a:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 800281e:	0107      	lsls	r7, r0, #4
 8002820:	f9b5 800e 	ldrsh.w	r8, [r5, #14]
 8002824:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 8002828:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800282a:	f895 3020 	ldrb.w	r3, [r5, #32]
 800282e:	b14b      	cbz	r3, 8002844 <FOC_CalcCurrRef+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 8002830:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8002832:	4427      	add	r7, r4
 8002834:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 8002838:	81b0      	strh	r0, [r6, #12]
 800283a:	f8a6 800e 	strh.w	r8, [r6, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 800283e:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8002840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8002844:	4b04      	ldr	r3, [pc, #16]	@ (8002858 <FOC_CalcCurrRef+0x4c>)
 8002846:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800284a:	f000 fd13 	bl	8003274 <STC_CalcTorqueReference>
 800284e:	8368      	strh	r0, [r5, #26]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8002850:	e7ee      	b.n	8002830 <FOC_CalcCurrRef+0x24>
 8002852:	bf00      	nop
 8002854:	20000748 	.word	0x20000748
 8002858:	20000044 	.word	0x20000044

0800285c <TSK_MediumFrequencyTaskM1>:
{
 800285c:	b570      	push	{r4, r5, r6, lr}
 800285e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8002860:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 8002862:	f10d 0106 	add.w	r1, sp, #6
 8002866:	489d      	ldr	r0, [pc, #628]	@ (8002adc <TSK_MediumFrequencyTaskM1+0x280>)
  int16_t wAux = 0;
 8002868:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 800286c:	f004 fa34 	bl	8006cd8 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8002870:	4b9b      	ldr	r3, [pc, #620]	@ (8002ae0 <TSK_MediumFrequencyTaskM1+0x284>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002872:	4c9c      	ldr	r4, [pc, #624]	@ (8002ae4 <TSK_MediumFrequencyTaskM1+0x288>)
  PQD_CalcElMotorPower(pMPM[M1]);
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	f004 fbc3 	bl	8007000 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff fc2a 	bl	80020d4 <MCI_GetCurrentFaults>
 8002880:	b118      	cbz	r0, 800288a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8002882:	230a      	movs	r3, #10
 8002884:	7063      	strb	r3, [r4, #1]
}
 8002886:	b002      	add	sp, #8
 8002888:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff fc20 	bl	80020d0 <MCI_GetOccurredFaults>
 8002890:	bb80      	cbnz	r0, 80028f4 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 8002892:	7863      	ldrb	r3, [r4, #1]
 8002894:	2b14      	cmp	r3, #20
 8002896:	d8f6      	bhi.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
 8002898:	a201      	add	r2, pc, #4	@ (adr r2, 80028a0 <TSK_MediumFrequencyTaskM1+0x44>)
 800289a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800289e:	bf00      	nop
 80028a0:	08002a49 	.word	0x08002a49
 80028a4:	08002887 	.word	0x08002887
 80028a8:	080029f7 	.word	0x080029f7
 80028ac:	08002887 	.word	0x08002887
 80028b0:	08002887 	.word	0x08002887
 80028b4:	08002887 	.word	0x08002887
 80028b8:	080029db 	.word	0x080029db
 80028bc:	08002887 	.word	0x08002887
 80028c0:	080029cf 	.word	0x080029cf
 80028c4:	08002887 	.word	0x08002887
 80028c8:	080028f5 	.word	0x080028f5
 80028cc:	080029c1 	.word	0x080029c1
 80028d0:	08002887 	.word	0x08002887
 80028d4:	08002887 	.word	0x08002887
 80028d8:	08002887 	.word	0x08002887
 80028dc:	08002887 	.word	0x08002887
 80028e0:	08002975 	.word	0x08002975
 80028e4:	08002943 	.word	0x08002943
 80028e8:	08002887 	.word	0x08002887
 80028ec:	08002887 	.word	0x08002887
 80028f0:	080028fd 	.word	0x080028fd
      Mci[M1].State = FAULT_OVER;
 80028f4:	230b      	movs	r3, #11
 80028f6:	7063      	strb	r3, [r4, #1]
}
 80028f8:	b002      	add	sp, #8
 80028fa:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80028fc:	7823      	ldrb	r3, [r4, #0]
 80028fe:	2b05      	cmp	r3, #5
 8002900:	f000 80b2 	beq.w	8002a68 <TSK_MediumFrequencyTaskM1+0x20c>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8002904:	f7ff fd5e 	bl	80023c4 <TSK_StopPermanencyTimeHasElapsedM1>
 8002908:	2800      	cmp	r0, #0
 800290a:	d0bc      	beq.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 800290c:	4873      	ldr	r0, [pc, #460]	@ (8002adc <TSK_MediumFrequencyTaskM1+0x280>)
 800290e:	f004 f9bb 	bl	8006c88 <ENC_Clear>
              R3_2_SwitchOnPWM(pwmcHandle[M1]);
 8002912:	4b75      	ldr	r3, [pc, #468]	@ (8002ae8 <TSK_MediumFrequencyTaskM1+0x28c>)
 8002914:	6818      	ldr	r0, [r3, #0]
 8002916:	f004 fd2f 	bl	8007378 <R3_2_SwitchOnPWM>
              TC_EncAlignmentCommand(pPosCtrl[M1]);
 800291a:	4b74      	ldr	r3, [pc, #464]	@ (8002aec <TSK_MediumFrequencyTaskM1+0x290>)
 800291c:	6818      	ldr	r0, [r3, #0]
 800291e:	f005 fd05 	bl	800832c <TC_EncAlignmentCommand>
              FOC_InitAdditionalMethods(M1);
 8002922:	2000      	movs	r0, #0
 8002924:	f7ff ff70 	bl	8002808 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002928:	4b71      	ldr	r3, [pc, #452]	@ (8002af0 <TSK_MediumFrequencyTaskM1+0x294>)
 800292a:	6818      	ldr	r0, [r3, #0]
 800292c:	f000 fce2 	bl	80032f4 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002930:	486c      	ldr	r0, [pc, #432]	@ (8002ae4 <TSK_MediumFrequencyTaskM1+0x288>)
 8002932:	f7ff fb93 	bl	800205c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8002936:	2000      	movs	r0, #0
 8002938:	f7ff ff68 	bl	800280c <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 800293c:	2306      	movs	r3, #6
 800293e:	7063      	strb	r3, [r4, #1]
 8002940:	e7a1      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002942:	7823      	ldrb	r3, [r4, #0]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002944:	4d68      	ldr	r5, [pc, #416]	@ (8002ae8 <TSK_MediumFrequencyTaskM1+0x28c>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002946:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002948:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 800294a:	f000 808f 	beq.w	8002a6c <TSK_MediumFrequencyTaskM1+0x210>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800294e:	2101      	movs	r1, #1
 8002950:	f000 fb10 	bl	8002f74 <PWMC_CurrentReadingCalibr>
 8002954:	2800      	cmp	r0, #0
 8002956:	d096      	beq.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8002958:	7823      	ldrb	r3, [r4, #0]
 800295a:	2b03      	cmp	r3, #3
 800295c:	f000 80a2 	beq.w	8002aa4 <TSK_MediumFrequencyTaskM1+0x248>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002960:	6828      	ldr	r0, [r5, #0]
 8002962:	2100      	movs	r1, #0
 8002964:	f004 fdd4 	bl	8007510 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8002968:	2014      	movs	r0, #20
 800296a:	f7ff fd15 	bl	8002398 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 800296e:	2310      	movs	r3, #16
 8002970:	7063      	strb	r3, [r4, #1]
 8002972:	e788      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8002974:	7823      	ldrb	r3, [r4, #0]
 8002976:	2b05      	cmp	r3, #5
 8002978:	d076      	beq.n	8002a68 <TSK_MediumFrequencyTaskM1+0x20c>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800297a:	f7ff fd13 	bl	80023a4 <TSK_ChargeBootCapDelayHasElapsedM1>
 800297e:	2800      	cmp	r0, #0
 8002980:	d081      	beq.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002982:	4d59      	ldr	r5, [pc, #356]	@ (8002ae8 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002984:	4e5a      	ldr	r6, [pc, #360]	@ (8002af0 <TSK_MediumFrequencyTaskM1+0x294>)
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8002986:	6828      	ldr	r0, [r5, #0]
 8002988:	f004 fdfc 	bl	8007584 <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 800298c:	4b59      	ldr	r3, [pc, #356]	@ (8002af4 <TSK_MediumFrequencyTaskM1+0x298>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800298e:	495a      	ldr	r1, [pc, #360]	@ (8002af8 <TSK_MediumFrequencyTaskM1+0x29c>)
 8002990:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002992:	2201      	movs	r2, #1
 8002994:	f883 2020 	strb.w	r2, [r3, #32]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002998:	f000 fc0e 	bl	80031b8 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 800299c:	484f      	ldr	r0, [pc, #316]	@ (8002adc <TSK_MediumFrequencyTaskM1+0x280>)
 800299e:	f004 f973 	bl	8006c88 <ENC_Clear>
              FOC_Clear( M1 );
 80029a2:	2000      	movs	r0, #0
 80029a4:	f7ff fe7c 	bl	80026a0 <FOC_Clear>
static inline bool EAC_IsAligned(EncAlign_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 80029a8:	4854      	ldr	r0, [pc, #336]	@ (8002afc <TSK_MediumFrequencyTaskM1+0x2a0>)
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 80029aa:	7b83      	ldrb	r3, [r0, #14]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d17f      	bne.n	8002ab0 <TSK_MediumFrequencyTaskM1+0x254>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80029b0:	f004 f8ec 	bl	8006b8c <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 80029b4:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80029b6:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 80029b8:	7063      	strb	r3, [r4, #1]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80029ba:	f000 fad9 	bl	8002f70 <PWMC_SwitchOnPWM>
 80029be:	e762      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80029c0:	7823      	ldrb	r3, [r4, #0]
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	f47f af5f 	bne.w	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80029c8:	2300      	movs	r3, #0
 80029ca:	8023      	strh	r3, [r4, #0]
 80029cc:	e75b      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80029ce:	f7ff fcf9 	bl	80023c4 <TSK_StopPermanencyTimeHasElapsedM1>
 80029d2:	2800      	cmp	r0, #0
 80029d4:	f43f af57 	beq.w	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
 80029d8:	e7f6      	b.n	80029c8 <TSK_MediumFrequencyTaskM1+0x16c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80029da:	7823      	ldrb	r3, [r4, #0]
 80029dc:	2b05      	cmp	r3, #5
 80029de:	d043      	beq.n	8002a68 <TSK_MediumFrequencyTaskM1+0x20c>
            TC_PositionRegulation(pPosCtrl[M1]);
 80029e0:	4b42      	ldr	r3, [pc, #264]	@ (8002aec <TSK_MediumFrequencyTaskM1+0x290>)
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	f005 fc5e 	bl	80082a4 <TC_PositionRegulation>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80029e8:	483e      	ldr	r0, [pc, #248]	@ (8002ae4 <TSK_MediumFrequencyTaskM1+0x288>)
 80029ea:	f7ff fb37 	bl	800205c <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80029ee:	2000      	movs	r0, #0
 80029f0:	f7ff ff0c 	bl	800280c <FOC_CalcCurrRef>
 80029f4:	e747      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80029f6:	7823      	ldrb	r3, [r4, #0]
 80029f8:	2b05      	cmp	r3, #5
 80029fa:	d035      	beq.n	8002a68 <TSK_MediumFrequencyTaskM1+0x20c>
 80029fc:	483f      	ldr	r0, [pc, #252]	@ (8002afc <TSK_MediumFrequencyTaskM1+0x2a0>)
 80029fe:	7b86      	ldrb	r6, [r0, #14]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8002a00:	f004 f8f0 	bl	8006be4 <EAC_Exec>
 8002a04:	4605      	mov	r5, r0
            if ((isAligned == false)  && (EACDone == false))
 8002a06:	b90e      	cbnz	r6, 8002a0c <TSK_MediumFrequencyTaskM1+0x1b0>
 8002a08:	2800      	cmp	r0, #0
 8002a0a:	d043      	beq.n	8002a94 <TSK_MediumFrequencyTaskM1+0x238>
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002a0c:	4e36      	ldr	r6, [pc, #216]	@ (8002ae8 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_Clear(pSTC[M1]);
 8002a0e:	4d38      	ldr	r5, [pc, #224]	@ (8002af0 <TSK_MediumFrequencyTaskM1+0x294>)
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8002a10:	6830      	ldr	r0, [r6, #0]
 8002a12:	f004 fdb7 	bl	8007584 <R3_2_SwitchOffPWM>
              STC_Clear(pSTC[M1]);
 8002a16:	6828      	ldr	r0, [r5, #0]
 8002a18:	f000 fbd0 	bl	80031bc <STC_Clear>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002a1c:	6828      	ldr	r0, [r5, #0]
 8002a1e:	2103      	movs	r1, #3
 8002a20:	f000 fbdc 	bl	80031dc <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8002a24:	492d      	ldr	r1, [pc, #180]	@ (8002adc <TSK_MediumFrequencyTaskM1+0x280>)
 8002a26:	6828      	ldr	r0, [r5, #0]
 8002a28:	f000 fbc6 	bl	80031b8 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	f7ff fe37 	bl	80026a0 <FOC_Clear>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002a32:	6830      	ldr	r0, [r6, #0]
 8002a34:	2100      	movs	r1, #0
 8002a36:	f004 fd6b 	bl	8007510 <R3_2_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002a3a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002a3e:	f7ff fcbb 	bl	80023b8 <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 8002a42:	2314      	movs	r3, #20
 8002a44:	7063      	strb	r3, [r4, #1]
 8002a46:	e71e      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002a48:	7823      	ldrb	r3, [r4, #0]
 8002a4a:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	f47f af19 	bne.w	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002a54:	4d24      	ldr	r5, [pc, #144]	@ (8002ae8 <TSK_MediumFrequencyTaskM1+0x28c>)
 8002a56:	6828      	ldr	r0, [r5, #0]
 8002a58:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8002a5c:	b991      	cbnz	r1, 8002a84 <TSK_MediumFrequencyTaskM1+0x228>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002a5e:	f000 fa89 	bl	8002f74 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8002a62:	2311      	movs	r3, #17
 8002a64:	7063      	strb	r3, [r4, #1]
 8002a66:	e70e      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8002a68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ae8 <TSK_MediumFrequencyTaskM1+0x28c>)
 8002a6a:	6818      	ldr	r0, [r3, #0]
 8002a6c:	f004 fd8a 	bl	8007584 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8002a70:	2000      	movs	r0, #0
 8002a72:	f7ff fe15 	bl	80026a0 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8002a76:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8002a7a:	f7ff fc9d 	bl	80023b8 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002a7e:	2308      	movs	r3, #8
 8002a80:	7063      	strb	r3, [r4, #1]
}
 8002a82:	e700      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002a84:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8002a86:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002a8a:	f000 fa73 	bl	8002f74 <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8002a8e:	6828      	ldr	r0, [r5, #0]
 8002a90:	2100      	movs	r1, #0
 8002a92:	e767      	b.n	8002964 <TSK_MediumFrequencyTaskM1+0x108>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <TSK_MediumFrequencyTaskM1+0x294>)
 8002a96:	6818      	ldr	r0, [r3, #0]
 8002a98:	f000 fbec 	bl	8003274 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8002a9c:	4b15      	ldr	r3, [pc, #84]	@ (8002af4 <TSK_MediumFrequencyTaskM1+0x298>)
 8002a9e:	819d      	strh	r5, [r3, #12]
 8002aa0:	81d8      	strh	r0, [r3, #14]
            {
 8002aa2:	e6f0      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	f7ff fdfb 	bl	80026a0 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	8023      	strh	r3, [r4, #0]
 8002aae:	e6ea      	b.n	8002886 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8002ab0:	6830      	ldr	r0, [r6, #0]
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	f000 fb92 	bl	80031dc <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8002ab8:	4908      	ldr	r1, [pc, #32]	@ (8002adc <TSK_MediumFrequencyTaskM1+0x280>)
 8002aba:	6830      	ldr	r0, [r6, #0]
 8002abc:	f000 fb7c 	bl	80031b8 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8002ac0:	2000      	movs	r0, #0
 8002ac2:	f7ff fea1 	bl	8002808 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8002ac6:	2000      	movs	r0, #0
 8002ac8:	f7ff fea0 	bl	800280c <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002acc:	6830      	ldr	r0, [r6, #0]
 8002ace:	f000 fc11 	bl	80032f4 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8002ad2:	4804      	ldr	r0, [pc, #16]	@ (8002ae4 <TSK_MediumFrequencyTaskM1+0x288>)
 8002ad4:	f7ff fac2 	bl	800205c <MCI_ExecBufferedCommands>
 8002ad8:	2306      	movs	r3, #6
 8002ada:	e76c      	b.n	80029b6 <TSK_MediumFrequencyTaskM1+0x15a>
 8002adc:	2000030c 	.word	0x2000030c
 8002ae0:	20000038 	.word	0x20000038
 8002ae4:	20000008 	.word	0x20000008
 8002ae8:	2000076c 	.word	0x2000076c
 8002aec:	20000034 	.word	0x20000034
 8002af0:	20000044 	.word	0x20000044
 8002af4:	20000748 	.word	0x20000748
 8002af8:	200002b8 	.word	0x200002b8
 8002afc:	200002f0 	.word	0x200002f0

08002b00 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  * @param bMotorNbr Motor reference number defined
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8002b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	4605      	mov	r5, r0
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  RCM_ReadOngoingConv();
 8002b08:	f000 fb1e 	bl	8003148 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8002b0c:	f000 fae6 	bl	80030dc <RCM_ExecNextConv>

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8002b10:	4837      	ldr	r0, [pc, #220]	@ (8002bf0 <FOC_HighFrequencyTask+0xf0>)
  int16_t hElAngle;
  uint16_t hCodeError = MC_NO_FAULTS;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002b12:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8002c0c <FOC_HighFrequencyTask+0x10c>
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8002b16:	f004 f8c5 	bl	8006ca4 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002b1a:	4b36      	ldr	r3, [pc, #216]	@ (8002bf4 <FOC_HighFrequencyTask+0xf4>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002b1c:	f8d8 0000 	ldr.w	r0, [r8]
 8002b20:	681b      	ldr	r3, [r3, #0]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8002b22:	695a      	ldr	r2, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002b24:	6803      	ldr	r3, [r0, #0]
 8002b26:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8002b2a:	a903      	add	r1, sp, #12
 8002b2c:	4798      	blx	r3
  Ialphabeta = MCM_Clarke(Iab);
 8002b2e:	9803      	ldr	r0, [sp, #12]
 8002b30:	f7ff fb54 	bl	80021dc <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002b34:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8002b36:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002b38:	f7ff fb8a 	bl	8002250 <MCM_Park>
static inline bool PWMC_GetPWMState(PWMC_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? false : pHandle->PWMState);
#else
  return (pHandle->PWMState);
 8002b3c:	f8d8 3000 	ldr.w	r3, [r8]
 8002b40:	9001      	str	r0, [sp, #4]
  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 8002b42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8002b46:	bb23      	cbnz	r3, 8002b92 <FOC_HighFrequencyTask+0x92>
 8002b48:	4c2b      	ldr	r4, [pc, #172]	@ (8002bf8 <FOC_HighFrequencyTask+0xf8>)
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
  }
  else
  {
    Vqd.q = 0;
 8002b4a:	461f      	mov	r7, r3
    Vqd.d = 0;
  }
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002b4c:	f8ad 300a 	strh.w	r3, [sp, #10]
 8002b50:	f8ad 7008 	strh.w	r7, [sp, #8]
 8002b54:	9902      	ldr	r1, [sp, #8]
 8002b56:	4829      	ldr	r0, [pc, #164]	@ (8002bfc <FOC_HighFrequencyTask+0xfc>)
 8002b58:	f003 ffe2 	bl	8006b20 <Circle_Limitation>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002b5c:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002b5e:	4607      	mov	r7, r0
 8002b60:	9002      	str	r0, [sp, #8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002b62:	f7ff fbb7 	bl	80022d4 <MCM_Rev_Park>
 8002b66:	4601      	mov	r1, r0

  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 8002b68:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002b6c:	9105      	str	r1, [sp, #20]
  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 8002b6e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8002b72:	bb23      	cbnz	r3, 8002bbe <FOC_HighFrequencyTask+0xbe>
  {
    /* Nothing to do. No PWM setting to prevent possible ChargeBootCap conflict */
  }

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8002b74:	9803      	ldr	r0, [sp, #12]
 8002b76:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002b78:	9804      	ldr	r0, [sp, #16]
 8002b7a:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002b7c:	9801      	ldr	r0, [sp, #4]
  FOCVars[M1].Vqd = Vqd;
 8002b7e:	f8c4 7012 	str.w	r7, [r4, #18]
  FOCVars[M1].Iqd = Iqd;
 8002b82:	60a0      	str	r0, [r4, #8]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002b84:	f8c4 1016 	str.w	r1, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8002b88:	83a6      	strh	r6, [r4, #28]
}
 8002b8a:	4628      	mov	r0, r5
 8002b8c:	b006      	add	sp, #24
 8002b8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002b92:	4c19      	ldr	r4, [pc, #100]	@ (8002bf8 <FOC_HighFrequencyTask+0xf8>)
 8002b94:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8002b98:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8002b9c:	1ac9      	subs	r1, r1, r3
 8002b9e:	4b18      	ldr	r3, [pc, #96]	@ (8002c00 <FOC_HighFrequencyTask+0x100>)
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	f004 f9cf 	bl	8006f44 <PI_Controller>
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002ba6:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8002baa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002bae:	1ac9      	subs	r1, r1, r3
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <FOC_HighFrequencyTask+0x104>)
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002bb2:	4607      	mov	r7, r0
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002bb4:	6818      	ldr	r0, [r3, #0]
 8002bb6:	f004 f9c5 	bl	8006f44 <PI_Controller>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	e7c6      	b.n	8002b4c <FOC_HighFrequencyTask+0x4c>
    hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002bbe:	f000 f8b1 	bl	8002d24 <PWMC_SetPhaseVoltage>
 8002bc2:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8002bc4:	9803      	ldr	r0, [sp, #12]
 8002bc6:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8002bc8:	9804      	ldr	r0, [sp, #16]
 8002bca:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8002bcc:	9801      	ldr	r0, [sp, #4]
 8002bce:	60a0      	str	r0, [r4, #8]
  if(hFOCreturn == MC_DURATION)
 8002bd0:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8002bd2:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8002bd4:	f8c4 7012 	str.w	r7, [r4, #18]
  FOCVars[M1].Valphabeta = Valphabeta;
 8002bd8:	f8c4 0016 	str.w	r0, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8002bdc:	83a6      	strh	r6, [r4, #28]
  if(hFOCreturn == MC_DURATION)
 8002bde:	d1d4      	bne.n	8002b8a <FOC_HighFrequencyTask+0x8a>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002be0:	4809      	ldr	r0, [pc, #36]	@ (8002c08 <FOC_HighFrequencyTask+0x108>)
 8002be2:	2200      	movs	r2, #0
 8002be4:	f7ff fa2e 	bl	8002044 <MCI_FaultProcessing>
}
 8002be8:	4628      	mov	r0, r5
 8002bea:	b006      	add	sp, #24
 8002bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bf0:	2000030c 	.word	0x2000030c
 8002bf4:	20000044 	.word	0x20000044
 8002bf8:	20000748 	.word	0x20000748
 8002bfc:	20000048 	.word	0x20000048
 8002c00:	20000040 	.word	0x20000040
 8002c04:	2000003c 	.word	0x2000003c
 8002c08:	20000008 	.word	0x20000008
 8002c0c:	2000076c 	.word	0x2000076c

08002c10 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002c10:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002c12:	f003 fa2b 	bl	800606c <HAL_RCC_GetHCLKFreq>
 8002c16:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <MX_MotorControl_Init+0x30>)
 8002c18:	fba3 3000 	umull	r3, r0, r3, r0
 8002c1c:	09c0      	lsrs	r0, r0, #7
 8002c1e:	f001 ff2f 	bl	8004a80 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002c22:	4b08      	ldr	r3, [pc, #32]	@ (8002c44 <MX_MotorControl_Init+0x34>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f001 fede 	bl	80049ec <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002c30:	4805      	ldr	r0, [pc, #20]	@ (8002c48 <MX_MotorControl_Init+0x38>)
 8002c32:	f7ff fb7d 	bl	8002330 <MCboot>
  mc_lock_pins();
}
 8002c36:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002c3a:	f7ff bc73 	b.w	8002524 <mc_lock_pins>
 8002c3e:	bf00      	nop
 8002c40:	10624dd3 	.word	0x10624dd3
 8002c44:	200003b0 	.word	0x200003b0
 8002c48:	2000077c 	.word	0x2000077c

08002c4c <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8002c4c:	4922      	ldr	r1, [pc, #136]	@ (8002cd8 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8002c4e:	4a23      	ldr	r2, [pc, #140]	@ (8002cdc <startTimers+0x90>)
 8002c50:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8002c52:	b410      	push	{r4}
 8002c54:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002c58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c5c:	f043 0310 	orr.w	r3, r3, #16
 8002c60:	b083      	sub	sp, #12
 8002c62:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8002c64:	688b      	ldr	r3, [r1, #8]
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6a:	f023 0307 	bic.w	r3, r3, #7
 8002c6e:	f043 0306 	orr.w	r3, r3, #6
 8002c72:	608b      	str	r3, [r1, #8]
 8002c74:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c76:	07db      	lsls	r3, r3, #31
 8002c78:	d416      	bmi.n	8002ca8 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002c7a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c7c:	f043 0301 	orr.w	r3, r3, #1
 8002c80:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002c82:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c84:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002c88:	f003 0301 	and.w	r3, r3, #1
 8002c8c:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002c8e:	9b01      	ldr	r3, [sp, #4]
 8002c90:	694b      	ldr	r3, [r1, #20]
 8002c92:	f043 0301 	orr.w	r3, r3, #1
 8002c96:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002c98:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002c9a:	f023 0301 	bic.w	r3, r3, #1
 8002c9e:	6593      	str	r3, [r2, #88]	@ 0x58
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }

}
 8002ca0:	b003      	add	sp, #12
 8002ca2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ca6:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8002ca8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002cac:	480c      	ldr	r0, [pc, #48]	@ (8002ce0 <startTimers+0x94>)
 8002cae:	685a      	ldr	r2, [r3, #4]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8002ce4 <startTimers+0x98>)
 8002cb4:	4001      	ands	r1, r0
 8002cb6:	f041 0120 	orr.w	r1, r1, #32
 8002cba:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cbc:	6959      	ldr	r1, [r3, #20]
 8002cbe:	f041 0101 	orr.w	r1, r1, #1
 8002cc2:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002cc4:	6859      	ldr	r1, [r3, #4]
 8002cc6:	4022      	ands	r2, r4
 8002cc8:	4001      	ands	r1, r0
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]
}
 8002cce:	b003      	add	sp, #12
 8002cd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40012c00 	.word	0x40012c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	fdffff8f 	.word	0xfdffff8f
 8002ce4:	02000070 	.word	0x02000070

08002ce8 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002ce8:	3201      	adds	r2, #1
{
 8002cea:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002cec:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002cee:	f06f 0602 	mvn.w	r6, #2
 8002cf2:	0155      	lsls	r5, r2, #5
 8002cf4:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8002cf6:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8002cf8:	f893 c000 	ldrb.w	ip, [r3]
 8002cfc:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8002d00:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8002d04:	d80c      	bhi.n	8002d20 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002d06:	6904      	ldr	r4, [r0, #16]
 8002d08:	07a4      	lsls	r4, r4, #30
 8002d0a:	d5f5      	bpl.n	8002cf8 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8002d0c:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8002d10:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002d12:	6106      	str	r6, [r0, #16]
 8002d14:	d8f0      	bhi.n	8002cf8 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8002d16:	781c      	ldrb	r4, [r3, #0]
 8002d18:	2c0f      	cmp	r4, #15
 8002d1a:	d8ed      	bhi.n	8002cf8 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8002d20:	bd70      	pop	{r4, r5, r6, pc}
 8002d22:	bf00      	nop

08002d24 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002d24:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002d26:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
 8002d2a:	140b      	asrs	r3, r1, #16
 8002d2c:	fb04 f303 	mul.w	r3, r4, r3
 8002d30:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 8002d34:	ea4f 0e43 	mov.w	lr, r3, lsl #1

    wX = wUBeta;
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8002d38:	f343 7280 	sbfx	r2, r3, #30, #1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002d3c:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8002d40:	b209      	sxth	r1, r1
 8002d42:	fb03 f101 	mul.w	r1, r3, r1
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8002d46:	eb1e 0301 	adds.w	r3, lr, r1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d4a:	ea4f 0594 	mov.w	r5, r4, lsr #2
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8002d4e:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8002d52:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
    wZ = ((int64_t)wUBeta - wUAlpha)>>1;
 8002d56:	ebbe 0c01 	subs.w	ip, lr, r1
 8002d5a:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8002d5e:	ea4f 015c 	mov.w	r1, ip, lsr #1
    if (wY < 0)
 8002d62:	ea53 73c4 	orrs.w	r3, r3, r4, lsl #31
{
 8002d66:	b083      	sub	sp, #12
    wZ = ((int64_t)wUBeta - wUAlpha)>>1;
 8002d68:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    if (wY < 0)
 8002d6c:	d457      	bmi.n	8002e1e <PWMC_SetPhaseVoltage+0xfa>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002d6e:	2900      	cmp	r1, #0
 8002d70:	db35      	blt.n	8002dde <PWMC_SetPhaseVoltage+0xba>
      {
        pHandle->Sector = SECTOR_2;
 8002d72:	2201      	movs	r2, #1
 8002d74:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d78:	1a5a      	subs	r2, r3, r1
 8002d7a:	bf44      	itt	mi
 8002d7c:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8002d80:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	bfb8      	it	lt
 8002d88:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00

        if(true == pHandle->SingleShuntTopology)
 8002d8c:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002d90:	eb05 42a2 	add.w	r2, r5, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002d94:	bfb8      	it	lt
 8002d96:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002d9a:	eb02 4161 	add.w	r1, r2, r1, asr #17
        wTimePhC = wTimePhA - (wY / 131072);
 8002d9e:	eba2 4363 	sub.w	r3, r2, r3, asr #17
        if(true == pHandle->SingleShuntTopology)
 8002da2:	2c00      	cmp	r4, #0
 8002da4:	d160      	bne.n	8002e68 <PWMC_SetPhaseVoltage+0x144>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002da6:	fa1f fc81 	uxth.w	ip, r1
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002daa:	b295      	uxth	r5, r2
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002dac:	b29c      	uxth	r4, r3
            pHandle->highDuty = 2U;
 8002dae:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002db2:	6944      	ldr	r4, [r0, #20]
            pHandle->lowDuty = 0U;
 8002db4:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002db8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002dbc:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002dc0:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002dc4:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002dc8:	4623      	mov	r3, r4
            pHandle->midDuty = 1U;
 8002dca:	f8a0 505a 	strh.w	r5, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002dce:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002dd2:	f8a0 1052 	strh.w	r1, [r0, #82]	@ 0x52
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002dd6:	b003      	add	sp, #12
 8002dd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002ddc:	4718      	bx	r3
        if ( wX <= 0 )
 8002dde:	f1be 0f00 	cmp.w	lr, #0
 8002de2:	dd67      	ble.n	8002eb4 <PWMC_SetPhaseVoltage+0x190>
          pHandle->Sector = SECTOR_1;
 8002de4:	2300      	movs	r3, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002de6:	ebae 0201 	sub.w	r2, lr, r1
          pHandle->Sector = SECTOR_1;
 8002dea:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhA + (wZ / 131072);
 8002dee:	f501 33ff 	add.w	r3, r1, #130560	@ 0x1fe00
 8002df2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002df6:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002dfa:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
          wTimePhB = wTimePhA + (wZ / 131072);
 8002dfe:	eb02 4163 	add.w	r1, r2, r3, asr #17
          wTimePhC = wTimePhB - (wX / 131072);
 8002e02:	eba1 436e 	sub.w	r3, r1, lr, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002e06:	2c00      	cmp	r4, #0
 8002e08:	f040 809b 	bne.w	8002f42 <PWMC_SetPhaseVoltage+0x21e>
 8002e0c:	f890 5086 	ldrb.w	r5, [r0, #134]	@ 0x86
 8002e10:	2d00      	cmp	r5, #0
 8002e12:	f000 80a5 	beq.w	8002f60 <PWMC_SetPhaseVoltage+0x23c>
 8002e16:	f04f 0c02 	mov.w	ip, #2
 8002e1a:	2501      	movs	r5, #1
 8002e1c:	e7c7      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
      if (wZ < 0)
 8002e1e:	2900      	cmp	r1, #0
        if(true == pHandle->SingleShuntTopology)
 8002e20:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
      if (wZ < 0)
 8002e24:	db61      	blt.n	8002eea <PWMC_SetPhaseVoltage+0x1c6>
        if (wX <= 0)
 8002e26:	f1be 0f00 	cmp.w	lr, #0
 8002e2a:	dd22      	ble.n	8002e72 <PWMC_SetPhaseVoltage+0x14e>
          pHandle->Sector = SECTOR_3;
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002e32:	ebb3 020e 	subs.w	r2, r3, lr
 8002e36:	bf44      	itt	mi
 8002e38:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8002e3c:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bfb8      	it	lt
 8002e44:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002e48:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002e4c:	bfb8      	it	lt
 8002e4e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8002e52:	eba2 4363 	sub.w	r3, r2, r3, asr #17
          wTimePhB = wTimePhC + (wX / 131072);
 8002e56:	eb03 416e 	add.w	r1, r3, lr, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002e5a:	2c00      	cmp	r4, #0
 8002e5c:	d16c      	bne.n	8002f38 <PWMC_SetPhaseVoltage+0x214>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002e5e:	fa1f fc81 	uxth.w	ip, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002e62:	b29d      	uxth	r5, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002e64:	b294      	uxth	r4, r2
 8002e66:	e7a2      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
 8002e68:	f04f 0c02 	mov.w	ip, #2
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	2401      	movs	r4, #1
 8002e70:	e79d      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002e72:	ebbe 0201 	subs.w	r2, lr, r1
 8002e76:	bf48      	it	mi
 8002e78:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002e7c:	f04f 0303 	mov.w	r3, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002e80:	bf48      	it	mi
 8002e82:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8002e86:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002e8a:	f1be 0300 	subs.w	r3, lr, #0
 8002e8e:	bfb8      	it	lt
 8002e90:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002e94:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8002e98:	eb02 4161 	add.w	r1, r2, r1, asr #17
          wTimePhC = wTimePhB - (wX / 131072);
 8002e9c:	bfb8      	it	lt
 8002e9e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8002ea2:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002ea6:	2c00      	cmp	r4, #0
 8002ea8:	d055      	beq.n	8002f56 <PWMC_SetPhaseVoltage+0x232>
 8002eaa:	f04f 0c00 	mov.w	ip, #0
 8002eae:	2501      	movs	r5, #1
 8002eb0:	2402      	movs	r4, #2
 8002eb2:	e77c      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
          pHandle->Sector = SECTOR_6;
 8002eb4:	f04f 0205 	mov.w	r2, #5
 8002eb8:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002ebc:	eba3 020e 	sub.w	r2, r3, lr
          wTimePhB = wTimePhC + (wX / 131072);
 8002ec0:	4671      	mov	r1, lr
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002ec2:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002ec6:	bfb8      	it	lt
 8002ec8:	f50e 31ff 	addlt.w	r1, lr, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8002ecc:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
          wTimePhC = wTimePhA - (wY / 131072);
 8002ed0:	eba2 4363 	sub.w	r3, r2, r3, asr #17
          wTimePhB = wTimePhC + (wX / 131072);
 8002ed4:	bfb8      	it	lt
 8002ed6:	f201 11ff 	addwlt	r1, r1, #511	@ 0x1ff
 8002eda:	eb03 4161 	add.w	r1, r3, r1, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002ede:	b3ac      	cbz	r4, 8002f4c <PWMC_SetPhaseVoltage+0x228>
 8002ee0:	f04f 0c01 	mov.w	ip, #1
 8002ee4:	2502      	movs	r5, #2
 8002ee6:	2400      	movs	r4, #0
 8002ee8:	e761      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
        pHandle->Sector = SECTOR_5;
 8002eea:	2204      	movs	r2, #4
 8002eec:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002ef0:	1a5a      	subs	r2, r3, r1
 8002ef2:	bf44      	itt	mi
 8002ef4:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8002ef8:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002efc:	2900      	cmp	r1, #0
 8002efe:	bfbc      	itt	lt
 8002f00:	f501 31ff 	addlt.w	r1, r1, #130560	@ 0x1fe00
 8002f04:	f201 11ff 	addwlt	r1, r1, #511	@ 0x1ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bfb8      	it	lt
 8002f0c:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002f10:	eb05 42a2 	add.w	r2, r5, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002f14:	bfb8      	it	lt
 8002f16:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002f1a:	eb02 4161 	add.w	r1, r2, r1, asr #17
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002f1e:	eba2 4363 	sub.w	r3, r2, r3, asr #17
        if(true == pHandle->SingleShuntTopology)
 8002f22:	b924      	cbnz	r4, 8002f2e <PWMC_SetPhaseVoltage+0x20a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002f24:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 8002f28:	b295      	uxth	r5, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002f2a:	b28c      	uxth	r4, r1
 8002f2c:	e73f      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
 8002f2e:	f04f 0c01 	mov.w	ip, #1
 8002f32:	2500      	movs	r5, #0
 8002f34:	2402      	movs	r4, #2
 8002f36:	e73a      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
 8002f38:	f04f 0c00 	mov.w	ip, #0
 8002f3c:	2502      	movs	r5, #2
 8002f3e:	2401      	movs	r4, #1
 8002f40:	e735      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
 8002f42:	f04f 0c02 	mov.w	ip, #2
 8002f46:	2501      	movs	r5, #1
 8002f48:	2400      	movs	r4, #0
 8002f4a:	e730      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002f4c:	fa1f fc82 	uxth.w	ip, r2
            pHandle->midDuty = (uint16_t)wTimePhC;
 8002f50:	b29d      	uxth	r5, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 8002f52:	b28c      	uxth	r4, r1
 8002f54:	e72b      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002f56:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002f5a:	b28d      	uxth	r5, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002f5c:	b294      	uxth	r4, r2
 8002f5e:	e726      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8002f60:	fa1f fc82 	uxth.w	ip, r2
            pHandle->midDuty = (uint16_t)wTimePhB;
 8002f64:	b28d      	uxth	r5, r1
            pHandle->highDuty = (uint16_t)wTimePhC;
 8002f66:	b29c      	uxth	r4, r3
 8002f68:	e721      	b.n	8002dae <PWMC_SetPhaseVoltage+0x8a>
 8002f6a:	bf00      	nop

08002f6c <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002f6c:	6843      	ldr	r3, [r0, #4]
 8002f6e:	4718      	bx	r3

08002f70 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002f70:	6883      	ldr	r3, [r0, #8]
 8002f72:	4718      	bx	r3

08002f74 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002f74:	b510      	push	{r4, lr}
 8002f76:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002f78:	b179      	cbz	r1, 8002f9a <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002f7a:	2901      	cmp	r1, #1
 8002f7c:	d001      	beq.n	8002f82 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8002f7e:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002f80:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002f82:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8002f86:	b16b      	cbz	r3, 8002fa4 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8002f88:	3b01      	subs	r3, #1
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d1f4      	bne.n	8002f7e <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002f94:	68c3      	ldr	r3, [r0, #12]
 8002f96:	4798      	blx	r3
          retVal = true;
 8002f98:	e004      	b.n	8002fa4 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8002f9a:	f7ff ffe7 	bl	8002f6c <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002f9e:	68e3      	ldr	r3, [r4, #12]
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	4798      	blx	r3
      retVal = true;
 8002fa4:	2001      	movs	r0, #1
}
 8002fa6:	bd10      	pop	{r4, pc}

08002fa8 <PWMC_OCP_Handler>:
  * @brief  Manages HW overcurrent protection.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *PWMC_OCP_Handler(PWMC_Handle_t *pHandle)
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    PWMC_SwitchOffPWM(pHandle);
 8002fac:	f7ff ffde 	bl	8002f6c <PWMC_SwitchOffPWM>
    pHandle->OverCurrentFlag = true;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002fb6:	f104 0078 	add.w	r0, r4, #120	@ 0x78
 8002fba:	bd10      	pop	{r4, pc}

08002fbc <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002fbc:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8002fbe:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8002fc0:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8002fc4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002fc8:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8002fca:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8002fcc:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8002fd0:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop

08002fd8 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8002fd8:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8002fda:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8002fde:	b1a8      	cbz	r0, 800300c <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8002fe6:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8002fe8:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8002fea:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8002fee:	b11a      	cbz	r2, 8002ff8 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8002ff6:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8002ff8:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8002ffc:	b12a      	cbz	r2, 800300a <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8002ffe:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8003002:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8003004:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8003006:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 800300a:	4770      	bx	lr
 800300c:	2140      	movs	r1, #64	@ 0x40
 800300e:	e7ec      	b.n	8002fea <PWMC_IsFaultOccurred+0x12>

08003010 <RCM_RegisterRegConv>:
  }
  else
  {
#endif

    if (RCM_conversion_nb < RCM_MAX_CONV)
 8003010:	492f      	ldr	r1, [pc, #188]	@ (80030d0 <RCM_RegisterRegConv+0xc0>)
 8003012:	780a      	ldrb	r2, [r1, #0]
 8003014:	2a03      	cmp	r2, #3
 8003016:	d856      	bhi.n	80030c6 <RCM_RegisterRegConv+0xb6>
{
 8003018:	b510      	push	{r4, lr}
    {
      RCM_handle_array[RCM_conversion_nb] = regConv;
 800301a:	4c2e      	ldr	r4, [pc, #184]	@ (80030d4 <RCM_RegisterRegConv+0xc4>)
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
      RCM_conversion_nb++;

      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800301c:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array[RCM_conversion_nb] = regConv;
 800301e:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
 8003022:	7302      	strb	r2, [r0, #12]
      RCM_conversion_nb++;
 8003024:	3201      	adds	r2, #1
 8003026:	700a      	strb	r2, [r1, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003028:	689a      	ldr	r2, [r3, #8]
 800302a:	07d4      	lsls	r4, r2, #31
 800302c:	d422      	bmi.n	8003074 <RCM_RegisterRegConv+0x64>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800302e:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003030:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8003032:	f022 0204 	bic.w	r2, r2, #4
 8003036:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003038:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800303a:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800303c:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800303e:	f022 0220 	bic.w	r2, r2, #32
 8003042:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8003044:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800304c:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8003050:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003054:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	2a00      	cmp	r2, #0
 800305a:	dbfc      	blt.n	8003056 <RCM_RegisterRegConv+0x46>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800305c:	681a      	ldr	r2, [r3, #0]
 800305e:	07d1      	lsls	r1, r2, #31
 8003060:	d408      	bmi.n	8003074 <RCM_RegisterRegConv+0x64>
  MODIFY_REG(ADCx->CR,
 8003062:	491d      	ldr	r1, [pc, #116]	@ (80030d8 <RCM_RegisterRegConv+0xc8>)
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	400a      	ands	r2, r1
 8003068:	f042 0201 	orr.w	r2, r2, #1
 800306c:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	07d2      	lsls	r2, r2, #31
 8003072:	d5f7      	bpl.n	8003064 <RCM_RegisterRegConv+0x54>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003074:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003076:	f021 010f 	bic.w	r1, r1, #15
 800307a:	6319      	str	r1, [r3, #48]	@ 0x30
      {
        /* Nothing to do */
      }
      LL_ADC_REG_SetSequencerLength(regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE);
      /* Configure the sampling time (should already be configured by for non user conversions) */
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800307c:	7a01      	ldrb	r1, [r0, #8]
 800307e:	2201      	movs	r2, #1
 8003080:	408a      	lsls	r2, r1
 8003082:	2909      	cmp	r1, #9
 8003084:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8003088:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 800308c:	d91d      	bls.n	80030ca <RCM_RegisterRegConv+0xba>
 800308e:	f1ac 0c1e 	sub.w	ip, ip, #30
 8003092:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 8003096:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800309a:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 800309e:	f00c 0c04 	and.w	ip, ip, #4
 80030a2:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80030a4:	6840      	ldr	r0, [r0, #4]
 80030a6:	f853 100c 	ldr.w	r1, [r3, ip]
 80030aa:	f3c2 5204 	ubfx	r2, r2, #20, #5
 80030ae:	f04f 0e07 	mov.w	lr, #7
 80030b2:	4090      	lsls	r0, r2
 80030b4:	fa0e f202 	lsl.w	r2, lr, r2
 80030b8:	ea21 0202 	bic.w	r2, r1, r2
 80030bc:	4302      	orrs	r2, r0
 80030be:	f843 200c 	str.w	r2, [r3, ip]
  bool retVal = true;
 80030c2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  return retVal;
}
 80030c4:	bd10      	pop	{r4, pc}
      retVal = false;
 80030c6:	2000      	movs	r0, #0
}
 80030c8:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80030ca:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 80030ce:	e7e4      	b.n	800309a <RCM_RegisterRegConv+0x8a>
 80030d0:	20000780 	.word	0x20000780
 80030d4:	20000784 	.word	0x20000784
 80030d8:	7fffffc0 	.word	0x7fffffc0

080030dc <RCM_ExecNextConv>:
 *
 * @note: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (RCM_conversion_nb > 0u)
 80030dc:	4b17      	ldr	r3, [pc, #92]	@ (800313c <RCM_ExecNextConv+0x60>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	b353      	cbz	r3, 8003138 <RCM_ExecNextConv+0x5c>
  {

    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80030e2:	4b17      	ldr	r3, [pc, #92]	@ (8003140 <RCM_ExecNextConv+0x64>)
 80030e4:	4a17      	ldr	r2, [pc, #92]	@ (8003144 <RCM_ExecNextConv+0x68>)
 80030e6:	7819      	ldrb	r1, [r3, #0]
 80030e8:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 80030ec:	7a11      	ldrb	r1, [r2, #8]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80030ee:	6812      	ldr	r2, [r2, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 80030f0:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 80030f2:	2909      	cmp	r1, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 80030f4:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 80030f8:	fa03 f301 	lsl.w	r3, r3, r1
 80030fc:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8003100:	bf84      	itt	hi
 8003102:	381e      	subhi	r0, #30
 8003104:	ea43 5300 	orrhi.w	r3, r3, r0, lsl #20
  MODIFY_REG(*preg,
 8003108:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 800310a:	bf94      	ite	ls
 800310c:	ea43 5300 	orrls.w	r3, r3, r0, lsl #20
 8003110:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 8003114:	0d1b      	lsrs	r3, r3, #20
 8003116:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 800311a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800311e:	430b      	orrs	r3, r1
 8003120:	6313      	str	r3, [r2, #48]	@ 0x30
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8003122:	2304      	movs	r3, #4
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8003124:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 8003126:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 8003128:	6893      	ldr	r3, [r2, #8]
 800312a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800312e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003132:	f043 0304 	orr.w	r3, r3, #4
 8003136:	6093      	str	r3, [r2, #8]
  }
  else
  {
     /* no conversion registered */
  }
}
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	20000780 	.word	0x20000780
 8003140:	20000781 	.word	0x20000781
 8003144:	20000784 	.word	0x20000784

08003148 <RCM_ReadOngoingConv>:
 */
void RCM_ReadOngoingConv(void)
{
  uint32_t result;

  if (RCM_conversion_nb > 0u)
 8003148:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <RCM_ReadOngoingConv+0x38>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	b1b3      	cbz	r3, 800317c <RCM_ReadOngoingConv+0x34>
{
 800314e:	b430      	push	{r4, r5}
  {
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_array_index]->regADC);
 8003150:	490c      	ldr	r1, [pc, #48]	@ (8003184 <RCM_ReadOngoingConv+0x3c>)
 8003152:	480d      	ldr	r0, [pc, #52]	@ (8003188 <RCM_ReadOngoingConv+0x40>)
 8003154:	780a      	ldrb	r2, [r1, #0]
 8003156:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800315a:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 800315c:	6825      	ldr	r5, [r4, #0]
 800315e:	076d      	lsls	r5, r5, #29
 8003160:	d503      	bpl.n	800316a <RCM_ReadOngoingConv+0x22>
 8003162:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8003164:	f024 040f 	bic.w	r4, r4, #15
    }
    else
    {
      /* Reading of ADC Converted Value */
      RCM_handle_array[RCM_array_index]->data
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_array_index]->regADC);
 8003168:	8144      	strh	r4, [r0, #10]
    }

    /* Prepare next conversion */
    if (RCM_array_index == (RCM_conversion_nb - 1U))
 800316a:	3b01      	subs	r3, #1
 800316c:	429a      	cmp	r2, r3
    {
      RCM_array_index = 0U;
 800316e:	bf0b      	itete	eq
 8003170:	2300      	moveq	r3, #0
    }
    else
    {
      RCM_array_index++;
 8003172:	3201      	addne	r2, #1
      RCM_array_index = 0U;
 8003174:	700b      	strbeq	r3, [r1, #0]
      RCM_array_index++;
 8003176:	700a      	strbne	r2, [r1, #0]
  }
  else
  {
     /* no conversion registered */
  }
}
 8003178:	bc30      	pop	{r4, r5}
 800317a:	4770      	bx	lr
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000780 	.word	0x20000780
 8003184:	20000781 	.word	0x20000781
 8003188:	20000784 	.word	0x20000784

0800318c <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800318c:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800318e:	f9b0 c030 	ldrsh.w	ip, [r0, #48]	@ 0x30
    pHandle->PISpeed = pPI;
 8003192:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8003194:	f9b0 1032 	ldrsh.w	r1, [r0, #50]	@ 0x32
    pHandle->Mode = pHandle->ModeDefault;
 8003198:	f890 402e 	ldrb.w	r4, [r0, #46]	@ 0x2e
 800319c:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800319e:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80031a0:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80031a4:	0409      	lsls	r1, r1, #16
 80031a6:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 80031aa:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80031ac:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 80031b0:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 80031b2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80031b4:	61c3      	str	r3, [r0, #28]
}
 80031b6:	4770      	bx	lr

080031b8 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80031b8:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80031ba:	4770      	bx	lr

080031bc <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 80031bc:	7803      	ldrb	r3, [r0, #0]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d004      	beq.n	80031cc <STC_Clear+0x10>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    else if (MCM_TORQUE_MODE == pHandle->Mode)
 80031c2:	2b04      	cmp	r3, #4
    {
      pHandle->TorqueRef = 0U;
 80031c4:	bf04      	itt	eq
 80031c6:	2300      	moveq	r3, #0
 80031c8:	6083      	streq	r3, [r0, #8]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80031ca:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80031cc:	6900      	ldr	r0, [r0, #16]
 80031ce:	2100      	movs	r1, #0
 80031d0:	f003 beb6 	b.w	8006f40 <PID_SetIntegralTerm>

080031d4 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 80031d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop

080031dc <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80031dc:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 80031de:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 80031e0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 80031e2:	4770      	bx	lr

080031e4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 80031e4:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80031e6:	7803      	ldrb	r3, [r0, #0]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d019      	beq.n	8003220 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 80031ec:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
 80031f0:	458c      	cmp	ip, r1
 80031f2:	da03      	bge.n	80031fc <STC_ExecRamp+0x18>
 80031f4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 80031f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031fa:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 80031fc:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	@ 0x28
 8003200:	428c      	cmp	r4, r1
 8003202:	dcf7      	bgt.n	80031f4 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8003204:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
 8003206:	428c      	cmp	r4, r1
 8003208:	dd03      	ble.n	8003212 <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800320a:	f9b0 4026 	ldrsh.w	r4, [r0, #38]	@ 0x26
 800320e:	428c      	cmp	r4, r1
 8003210:	dbf0      	blt.n	80031f4 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8003212:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 8003214:	b9aa      	cbnz	r2, 8003242 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8003216:	2b03      	cmp	r3, #3
 8003218:	d10a      	bne.n	8003230 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800321a:	0409      	lsls	r1, r1, #16
 800321c:	6041      	str	r1, [r0, #4]
 800321e:	e009      	b.n	8003234 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8003220:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 8003222:	428b      	cmp	r3, r1
 8003224:	dbe6      	blt.n	80031f4 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8003226:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	@ 0x2c
 800322a:	428b      	cmp	r3, r1
 800322c:	dce2      	bgt.n	80031f4 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800322e:	b9e2      	cbnz	r2, 800326a <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8003230:	0409      	lsls	r1, r1, #16
 8003232:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 8003238:	61c3      	str	r3, [r0, #28]
{
 800323a:	2001      	movs	r0, #1
}
 800323c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003240:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8003242:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8003246:	8c03      	ldrh	r3, [r0, #32]
        wAux /= 1000U;
 8003248:	4c09      	ldr	r4, [pc, #36]	@ (8003270 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800324a:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800324c:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 8003250:	fba4 4303 	umull	r4, r3, r4, r3
 8003254:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8003256:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8003258:	eba1 0c0c 	sub.w	ip, r1, ip
 800325c:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 8003260:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8003262:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 8003266:	61c2      	str	r2, [r0, #28]
 8003268:	e7e7      	b.n	800323a <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800326a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800326e:	e7ea      	b.n	8003246 <STC_ExecRamp+0x62>
 8003270:	10624dd3 	.word	0x10624dd3

08003274 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8003274:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 8003276:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8003278:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800327a:	2a04      	cmp	r2, #4
{
 800327c:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800327e:	d012      	beq.n	80032a6 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8003280:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 8003282:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 8003284:	d908      	bls.n	8003298 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 8003286:	69c1      	ldr	r1, [r0, #28]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8003288:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800328a:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800328c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800328e:	2a03      	cmp	r2, #3
 8003290:	d011      	beq.n	80032b6 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8003292:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8003294:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8003296:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8003298:	d1f9      	bne.n	800328e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800329a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800329e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80032a0:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80032a2:	60c3      	str	r3, [r0, #12]
 80032a4:	e7f3      	b.n	800328e <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 80032a6:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 80032a8:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 80032aa:	d911      	bls.n	80032d0 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 80032ac:	69c2      	ldr	r2, [r0, #28]
      pHandle->RampRemainingStep--;
 80032ae:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80032b0:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 80032b2:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80032b4:	e7ed      	b.n	8003292 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80032b6:	6960      	ldr	r0, [r4, #20]
 80032b8:	f004 fe50 	bl	8007f5c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80032bc:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80032c0:	b209      	sxth	r1, r1
 80032c2:	6920      	ldr	r0, [r4, #16]
 80032c4:	f003 fe3e 	bl	8006f44 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 80032c8:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80032ca:	0405      	lsls	r5, r0, #16
 80032cc:	60a5      	str	r5, [r4, #8]
}
 80032ce:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80032d0:	d1df      	bne.n	8003292 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80032d2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80032d6:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80032d8:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 80032da:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80032dc:	e7d9      	b.n	8003292 <STC_CalcTorqueReference+0x1e>
 80032de:	bf00      	nop

080032e0 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 80032e0:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop

080032e8 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 80032e8:	f8d0 0032 	ldr.w	r0, [r0, #50]	@ 0x32
{
 80032ec:	b082      	sub	sp, #8
}
 80032ee:	b002      	add	sp, #8
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop

080032f4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 80032f4:	b510      	push	{r4, lr}
 80032f6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 80032f8:	6940      	ldr	r0, [r0, #20]
 80032fa:	f004 fe2f 	bl	8007f5c <SPD_GetAvrgMecSpeedUnit>
 80032fe:	0400      	lsls	r0, r0, #16
 8003300:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8003302:	bd10      	pop	{r4, pc}

08003304 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE(ENCODER_M1.TIMx) != 0U)
 8003304:	4806      	ldr	r0, [pc, #24]	@ (8003320 <TIM4_IRQHandler+0x1c>)
 8003306:	6a03      	ldr	r3, [r0, #32]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	07d1      	lsls	r1, r2, #31
 800330c:	d507      	bpl.n	800331e <TIM4_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	07d2      	lsls	r2, r2, #31
 8003312:	d504      	bpl.n	800331e <TIM4_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003314:	f06f 0201 	mvn.w	r2, #1
 8003318:	611a      	str	r2, [r3, #16]
  {
    if (LL_TIM_IsActiveFlag_UPDATE(ENCODER_M1.TIMx) != 0U)
    {
      LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
      (void)ENC_IRQHandler(&ENCODER_M1);
 800331a:	f003 bdc7 	b.w	8006eac <ENC_IRQHandler>
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 800331e:	4770      	bx	lr
 8003320:	2000030c 	.word	0x2000030c

08003324 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8003324:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8003326:	f7ff f8e3 	bl	80024f0 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 800332a:	e7fe      	b.n	800332a <HardFault_Handler+0x6>

0800332c <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 800332c:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800332e:	4c0a      	ldr	r4, [pc, #40]	@ (8003358 <SysTick_Handler+0x2c>)
 8003330:	7823      	ldrb	r3, [r4, #0]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d009      	beq.n	800334a <SysTick_Handler+0x1e>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8003336:	3301      	adds	r3, #1
 8003338:	b2db      	uxtb	r3, r3
 800333a:	7023      	strb	r3, [r4, #0]
  /* NO DMA interrupt */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 800333c:	f7ff f8ac 	bl	8002498 <MC_RunMotorControlTasks>
    TC_IncTick(&PosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8003340:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 8003344:	4805      	ldr	r0, [pc, #20]	@ (800335c <SysTick_Handler+0x30>)
 8003346:	f005 b88f 	b.w	8008468 <TC_IncTick>
    HAL_IncTick();
 800334a:	f000 fb99 	bl	8003a80 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800334e:	f001 fbb3 	bl	8004ab8 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8003352:	2301      	movs	r3, #1
 8003354:	e7f1      	b.n	800333a <SysTick_Handler+0xe>
 8003356:	bf00      	nop
 8003358:	200003a4 	.word	0x200003a4
 800335c:	2000013c 	.word	0x2000013c

08003360 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8003360:	4b04      	ldr	r3, [pc, #16]	@ (8003374 <EXTI15_10_IRQHandler+0x14>)
 8003362:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U != LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8003364:	0552      	lsls	r2, r2, #21
 8003366:	d400      	bmi.n	800336a <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8003368:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800336a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800336e:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8003370:	f7ff b8cc 	b.w	800250c <UI_HandleStartStopButton_cb>
 8003374:	40010400 	.word	0x40010400

08003378 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003378:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800337a:	4b0e      	ldr	r3, [pc, #56]	@ (80033b4 <HAL_MspInit+0x3c>)
 800337c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800337e:	f042 0201 	orr.w	r2, r2, #1
{
 8003382:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003384:	661a      	str	r2, [r3, #96]	@ 0x60
 8003386:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003388:	f002 0201 	and.w	r2, r2, #1
 800338c:	9200      	str	r2, [sp, #0]
 800338e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003390:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003392:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003396:	659a      	str	r2, [r3, #88]	@ 0x58
 8003398:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800339a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800339e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80033a0:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80033a2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80033a4:	f001 fb10 	bl	80049c8 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033a8:	b003      	add	sp, #12
 80033aa:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80033ae:	f002 bad3 	b.w	8005958 <HAL_PWREx_DisableUCPDDeadBattery>
 80033b2:	bf00      	nop
 80033b4:	40021000 	.word	0x40021000

080033b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033b8:	b510      	push	{r4, lr}
 80033ba:	4604      	mov	r4, r0
 80033bc:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033be:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033c0:	2244      	movs	r2, #68	@ 0x44
 80033c2:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80033c8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80033cc:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80033ce:	f005 f89d 	bl	800850c <memset>
  if(hadc->Instance==ADC1)
 80033d2:	6823      	ldr	r3, [r4, #0]
 80033d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80033d8:	d004      	beq.n	80033e4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80033da:	4a43      	ldr	r2, [pc, #268]	@ (80034e8 <HAL_ADC_MspInit+0x130>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d046      	beq.n	800346e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80033e0:	b01c      	add	sp, #112	@ 0x70
 80033e2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80033e4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80033e8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033ec:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80033ee:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80033f0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80033f2:	f002 fe49 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 80033f6:	2800      	cmp	r0, #0
 80033f8:	d16a      	bne.n	80034d0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80033fa:	4a3c      	ldr	r2, [pc, #240]	@ (80034ec <HAL_ADC_MspInit+0x134>)
 80033fc:	6813      	ldr	r3, [r2, #0]
 80033fe:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003400:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003402:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003404:	d109      	bne.n	800341a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8003406:	4b3a      	ldr	r3, [pc, #232]	@ (80034f0 <HAL_ADC_MspInit+0x138>)
 8003408:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800340a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800340e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003410:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003412:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800341a:	4b35      	ldr	r3, [pc, #212]	@ (80034f0 <HAL_ADC_MspInit+0x138>)
 800341c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800341e:	f042 0201 	orr.w	r2, r2, #1
 8003422:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003424:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003426:	f002 0201 	and.w	r2, r2, #1
 800342a:	9202      	str	r2, [sp, #8]
 800342c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800342e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003430:	f042 0202 	orr.w	r2, r2, #2
 8003434:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003436:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003438:	2005      	movs	r0, #5
 800343a:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800343c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8003440:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003444:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003448:	a906      	add	r1, sp, #24
 800344a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800344e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003450:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003452:	f001 ffc9 	bl	80053e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003456:	f244 0202 	movw	r2, #16386	@ 0x4002
 800345a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800345c:	4825      	ldr	r0, [pc, #148]	@ (80034f4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003460:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8003462:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003466:	f001 ffbf 	bl	80053e8 <HAL_GPIO_Init>
}
 800346a:	b01c      	add	sp, #112	@ 0x70
 800346c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800346e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8003472:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003476:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003478:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800347a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800347c:	f002 fe04 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8003480:	bb48      	cbnz	r0, 80034d6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8003482:	4a1a      	ldr	r2, [pc, #104]	@ (80034ec <HAL_ADC_MspInit+0x134>)
 8003484:	6813      	ldr	r3, [r2, #0]
 8003486:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8003488:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800348a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800348c:	d109      	bne.n	80034a2 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800348e:	4b18      	ldr	r3, [pc, #96]	@ (80034f0 <HAL_ADC_MspInit+0x138>)
 8003490:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003492:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003496:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800349e:	9304      	str	r3, [sp, #16]
 80034a0:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a2:	4b13      	ldr	r3, [pc, #76]	@ (80034f0 <HAL_ADC_MspInit+0x138>)
 80034a4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80034ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80034ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80034e0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80034b8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034ba:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80034bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80034c0:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034c4:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80034c8:	f001 ff8e 	bl	80053e8 <HAL_GPIO_Init>
}
 80034cc:	b01c      	add	sp, #112	@ 0x70
 80034ce:	bd10      	pop	{r4, pc}
      Error_Handler();
 80034d0:	f7fe fd1a 	bl	8001f08 <Error_Handler>
 80034d4:	e791      	b.n	80033fa <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80034d6:	f7fe fd17 	bl	8001f08 <Error_Handler>
 80034da:	e7d2      	b.n	8003482 <HAL_ADC_MspInit+0xca>
 80034dc:	f3af 8000 	nop.w
 80034e0:	00000040 	.word	0x00000040
 80034e4:	00000003 	.word	0x00000003
 80034e8:	50000100 	.word	0x50000100
 80034ec:	20000794 	.word	0x20000794
 80034f0:	40021000 	.word	0x40021000
 80034f4:	48000400 	.word	0x48000400

080034f8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80034f8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80034fa:	6802      	ldr	r2, [r0, #0]
 80034fc:	4934      	ldr	r1, [pc, #208]	@ (80035d0 <HAL_COMP_MspInit+0xd8>)
{
 80034fe:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003500:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8003502:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003504:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003508:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800350c:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 800350e:	d008      	beq.n	8003522 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8003510:	4b30      	ldr	r3, [pc, #192]	@ (80035d4 <HAL_COMP_MspInit+0xdc>)
 8003512:	429a      	cmp	r2, r3
 8003514:	d01e      	beq.n	8003554 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8003516:	4b30      	ldr	r3, [pc, #192]	@ (80035d8 <HAL_COMP_MspInit+0xe0>)
 8003518:	429a      	cmp	r2, r3
 800351a:	d034      	beq.n	8003586 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800351c:	b00b      	add	sp, #44	@ 0x2c
 800351e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003522:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003526:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800352a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80035b8 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800352e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003530:	f042 0201 	orr.w	r2, r2, #1
 8003534:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003536:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800353e:	a904      	add	r1, sp, #16
 8003540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8003544:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003548:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800354a:	f001 ff4d 	bl	80053e8 <HAL_GPIO_Init>
}
 800354e:	b00b      	add	sp, #44	@ 0x2c
 8003550:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003554:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8003558:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800355c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800355e:	f042 0201 	orr.w	r2, r2, #1
 8003562:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003566:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80035c0 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8003570:	a904      	add	r1, sp, #16
 8003572:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8003576:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800357a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800357c:	f001 ff34 	bl	80053e8 <HAL_GPIO_Init>
}
 8003580:	b00b      	add	sp, #44	@ 0x2c
 8003582:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003586:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800358a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800358e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8003590:	4812      	ldr	r0, [pc, #72]	@ (80035dc <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003592:	f042 0202 	orr.w	r2, r2, #2
 8003596:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003598:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800359a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80035c8 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80035a4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80035a6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035aa:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80035ac:	f001 ff1c 	bl	80053e8 <HAL_GPIO_Init>
}
 80035b0:	b00b      	add	sp, #44	@ 0x2c
 80035b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80035b6:	bf00      	nop
 80035b8:	00000002 	.word	0x00000002
 80035bc:	00000003 	.word	0x00000003
 80035c0:	00000080 	.word	0x00000080
 80035c4:	00000003 	.word	0x00000003
 80035c8:	00000001 	.word	0x00000001
 80035cc:	00000003 	.word	0x00000003
 80035d0:	40010200 	.word	0x40010200
 80035d4:	40010204 	.word	0x40010204
 80035d8:	4001020c 	.word	0x4001020c
 80035dc:	48000400 	.word	0x48000400

080035e0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80035e0:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <HAL_CORDIC_MspInit+0x28>)
 80035e2:	6802      	ldr	r2, [r0, #0]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d000      	beq.n	80035ea <HAL_CORDIC_MspInit+0xa>
 80035e8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80035ea:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80035ee:	f042 0208 	orr.w	r2, r2, #8
{
 80035f2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80035f4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80035f8:	649a      	str	r2, [r3, #72]	@ 0x48
 80035fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035fc:	f003 0308 	and.w	r3, r3, #8
 8003600:	9301      	str	r3, [sp, #4]
 8003602:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8003604:	b002      	add	sp, #8
 8003606:	4770      	bx	lr
 8003608:	40020c00 	.word	0x40020c00

0800360c <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 800360c:	4b0a      	ldr	r3, [pc, #40]	@ (8003638 <HAL_DAC_MspInit+0x2c>)
 800360e:	6802      	ldr	r2, [r0, #0]
 8003610:	429a      	cmp	r2, r3
 8003612:	d000      	beq.n	8003616 <HAL_DAC_MspInit+0xa>
 8003614:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003616:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800361a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 800361e:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8003620:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003622:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8003626:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800362a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800362e:	9301      	str	r3, [sp, #4]
 8003630:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8003632:	b002      	add	sp, #8
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	50001000 	.word	0x50001000

0800363c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800363c:	b5d0      	push	{r4, r6, r7, lr}
 800363e:	4604      	mov	r4, r0
 8003640:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003642:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003644:	2244      	movs	r2, #68	@ 0x44
 8003646:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003648:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800364c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8003650:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003652:	f004 ff5b 	bl	800850c <memset>
  if(hfdcan->Instance==FDCAN1)
 8003656:	4b2f      	ldr	r3, [pc, #188]	@ (8003714 <HAL_FDCAN_MspInit+0xd8>)
 8003658:	6822      	ldr	r2, [r4, #0]
 800365a:	429a      	cmp	r2, r3
 800365c:	d001      	beq.n	8003662 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800365e:	b01a      	add	sp, #104	@ 0x68
 8003660:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8003662:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8003666:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800366a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800366c:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800366e:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003670:	f002 fd0a 	bl	8006088 <HAL_RCCEx_PeriphCLKConfig>
 8003674:	2800      	cmp	r0, #0
 8003676:	d149      	bne.n	800370c <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8003678:	4b27      	ldr	r3, [pc, #156]	@ (8003718 <HAL_FDCAN_MspInit+0xdc>)
 800367a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800367c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8003680:	659a      	str	r2, [r3, #88]	@ 0x58
 8003682:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8003684:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8003688:	9201      	str	r2, [sp, #4]
 800368a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003694:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003696:	f002 0201 	and.w	r2, r2, #1
 800369a:	9202      	str	r2, [sp, #8]
 800369c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800369e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036a0:	f042 0202 	orr.w	r2, r2, #2
 80036a4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80036a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036a8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80036ac:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036ae:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036b6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036b8:	2600      	movs	r6, #0
 80036ba:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80036bc:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036be:	a904      	add	r1, sp, #16
 80036c0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80036c4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80036c6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80036c8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036cc:	f001 fe8c 	bl	80053e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036d0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036d8:	4810      	ldr	r0, [pc, #64]	@ (800371c <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80036da:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80036dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80036e0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80036e4:	f001 fe80 	bl	80053e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80036e8:	2200      	movs	r2, #0
 80036ea:	4611      	mov	r1, r2
 80036ec:	2015      	movs	r0, #21
 80036ee:	f001 f97d 	bl	80049ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80036f2:	2015      	movs	r0, #21
 80036f4:	f001 f9b6 	bl	8004a64 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80036f8:	2200      	movs	r2, #0
 80036fa:	4611      	mov	r1, r2
 80036fc:	2016      	movs	r0, #22
 80036fe:	f001 f975 	bl	80049ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003702:	2016      	movs	r0, #22
 8003704:	f001 f9ae 	bl	8004a64 <HAL_NVIC_EnableIRQ>
}
 8003708:	b01a      	add	sp, #104	@ 0x68
 800370a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800370c:	f7fe fbfc 	bl	8001f08 <Error_Handler>
 8003710:	e7b2      	b.n	8003678 <HAL_FDCAN_MspInit+0x3c>
 8003712:	bf00      	nop
 8003714:	40006400 	.word	0x40006400
 8003718:	40021000 	.word	0x40021000
 800371c:	48000400 	.word	0x48000400

08003720 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8003720:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8003722:	6802      	ldr	r2, [r0, #0]
 8003724:	4934      	ldr	r1, [pc, #208]	@ (80037f8 <HAL_OPAMP_MspInit+0xd8>)
{
 8003726:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800372a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800372c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003730:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8003734:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8003736:	d008      	beq.n	800374a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8003738:	4b30      	ldr	r3, [pc, #192]	@ (80037fc <HAL_OPAMP_MspInit+0xdc>)
 800373a:	429a      	cmp	r2, r3
 800373c:	d01e      	beq.n	800377c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800373e:	4b30      	ldr	r3, [pc, #192]	@ (8003800 <HAL_OPAMP_MspInit+0xe0>)
 8003740:	429a      	cmp	r2, r3
 8003742:	d033      	beq.n	80037ac <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8003744:	b00b      	add	sp, #44	@ 0x2c
 8003746:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800374a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800374e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8003752:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80037e0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003756:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003758:	f042 0201 	orr.w	r2, r2, #1
 800375c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800375e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003766:	a904      	add	r1, sp, #16
 8003768:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800376c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003770:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003772:	f001 fe39 	bl	80053e8 <HAL_GPIO_Init>
}
 8003776:	b00b      	add	sp, #44	@ 0x2c
 8003778:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800377c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8003780:	33fc      	adds	r3, #252	@ 0xfc
 8003782:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003784:	f042 0201 	orr.w	r2, r2, #1
 8003788:	64da      	str	r2, [r3, #76]	@ 0x4c
 800378a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800378c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80037e8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003790:	f003 0301 	and.w	r3, r3, #1
 8003794:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003796:	a904      	add	r1, sp, #16
 8003798:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800379c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037a0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a2:	f001 fe21 	bl	80053e8 <HAL_GPIO_Init>
}
 80037a6:	b00b      	add	sp, #44	@ 0x2c
 80037a8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80037b0:	33f8      	adds	r3, #248	@ 0xf8
 80037b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037b4:	4813      	ldr	r0, [pc, #76]	@ (8003804 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b6:	f042 0202 	orr.w	r2, r2, #2
 80037ba:	64da      	str	r2, [r3, #76]	@ 0x4c
 80037bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80037be:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80037f0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037c8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80037ca:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ce:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037d0:	f001 fe0a 	bl	80053e8 <HAL_GPIO_Init>
}
 80037d4:	b00b      	add	sp, #44	@ 0x2c
 80037d6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037da:	bf00      	nop
 80037dc:	f3af 8000 	nop.w
 80037e0:	0000000e 	.word	0x0000000e
 80037e4:	00000003 	.word	0x00000003
 80037e8:	000000e0 	.word	0x000000e0
 80037ec:	00000003 	.word	0x00000003
 80037f0:	00000007 	.word	0x00000007
 80037f4:	00000003 	.word	0x00000003
 80037f8:	40010300 	.word	0x40010300
 80037fc:	40010304 	.word	0x40010304
 8003800:	40010308 	.word	0x40010308
 8003804:	48000400 	.word	0x48000400

08003808 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8003808:	4b09      	ldr	r3, [pc, #36]	@ (8003830 <HAL_TIM_PWM_MspInit+0x28>)
 800380a:	6802      	ldr	r2, [r0, #0]
 800380c:	429a      	cmp	r2, r3
 800380e:	d000      	beq.n	8003812 <HAL_TIM_PWM_MspInit+0xa>
 8003810:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003812:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8003816:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003818:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800381a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800381e:	661a      	str	r2, [r3, #96]	@ 0x60
 8003820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003822:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003826:	9301      	str	r3, [sp, #4]
 8003828:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800382a:	b002      	add	sp, #8
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	40012c00 	.word	0x40012c00
 8003834:	00000000 	.word	0x00000000

08003838 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003838:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 800383a:	4a1b      	ldr	r2, [pc, #108]	@ (80038a8 <HAL_TIM_Encoder_MspInit+0x70>)
 800383c:	6801      	ldr	r1, [r0, #0]
{
 800383e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003840:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8003842:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003844:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003848:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800384c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 800384e:	d002      	beq.n	8003856 <HAL_TIM_Encoder_MspInit+0x1e>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8003850:	b009      	add	sp, #36	@ 0x24
 8003852:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003856:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800385a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800385e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 80038a0 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003862:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003864:	4811      	ldr	r0, [pc, #68]	@ (80038ac <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003866:	f042 0204 	orr.w	r2, r2, #4
 800386a:	659a      	str	r2, [r3, #88]	@ 0x58
 800386c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800386e:	f002 0204 	and.w	r2, r2, #4
 8003872:	9200      	str	r2, [sp, #0]
 8003874:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003876:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003878:	f042 0202 	orr.w	r2, r2, #2
 800387c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800387e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003886:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003888:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800388a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003890:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003892:	f001 fda9 	bl	80053e8 <HAL_GPIO_Init>
}
 8003896:	b009      	add	sp, #36	@ 0x24
 8003898:	f85d fb04 	ldr.w	pc, [sp], #4
 800389c:	f3af 8000 	nop.w
 80038a0:	000000c0 	.word	0x000000c0
 80038a4:	00000002 	.word	0x00000002
 80038a8:	40000800 	.word	0x40000800
 80038ac:	48000400 	.word	0x48000400

080038b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80038b0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80038b2:	4a2b      	ldr	r2, [pc, #172]	@ (8003960 <HAL_TIM_MspPostInit+0xb0>)
 80038b4:	6801      	ldr	r1, [r0, #0]
{
 80038b6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038b8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80038ba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80038c0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80038c4:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80038c6:	d001      	beq.n	80038cc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80038c8:	b00a      	add	sp, #40	@ 0x28
 80038ca:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038cc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80038d0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80038d4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80038d8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038da:	f042 0204 	orr.w	r2, r2, #4
 80038de:	64da      	str	r2, [r3, #76]	@ 0x4c
 80038e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038e2:	f002 0204 	and.w	r2, r2, #4
 80038e6:	9201      	str	r2, [sp, #4]
 80038e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ea:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038ec:	f042 0202 	orr.w	r2, r2, #2
 80038f0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80038f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038f4:	f002 0202 	and.w	r2, r2, #2
 80038f8:	9202      	str	r2, [sp, #8]
 80038fa:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038fc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038fe:	f042 0201 	orr.w	r2, r2, #1
 8003902:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003906:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003908:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 800390c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003910:	2402      	movs	r4, #2
 8003912:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003914:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003916:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003918:	a904      	add	r1, sp, #16
 800391a:	4812      	ldr	r0, [pc, #72]	@ (8003964 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800391c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800391e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8003920:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8003924:	f001 fd60 	bl	80053e8 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003928:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800392a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800392e:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8003930:	480d      	ldr	r0, [pc, #52]	@ (8003968 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8003932:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8003934:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8003938:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800393c:	f001 fd54 	bl	80053e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003940:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8003944:	2302      	movs	r3, #2
 8003946:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800394c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800394e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8003952:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8003956:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003958:	f001 fd46 	bl	80053e8 <HAL_GPIO_Init>
}
 800395c:	b00a      	add	sp, #40	@ 0x28
 800395e:	bd70      	pop	{r4, r5, r6, pc}
 8003960:	40012c00 	.word	0x40012c00
 8003964:	48000800 	.word	0x48000800
 8003968:	48000400 	.word	0x48000400

0800396c <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800396c:	4801      	ldr	r0, [pc, #4]	@ (8003974 <FDCAN1_IT0_IRQHandler+0x8>)
 800396e:	f001 bc77 	b.w	8005260 <HAL_FDCAN_IRQHandler>
 8003972:	bf00      	nop
 8003974:	20000560 	.word	0x20000560

08003978 <FDCAN1_IT1_IRQHandler>:
}

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
 8003978:	4801      	ldr	r0, [pc, #4]	@ (8003980 <FDCAN1_IT1_IRQHandler+0x8>)
 800397a:	f001 bc71 	b.w	8005260 <HAL_FDCAN_IRQHandler>
 800397e:	bf00      	nop
 8003980:	20000560 	.word	0x20000560

08003984 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8003984:	4b02      	ldr	r3, [pc, #8]	@ (8003990 <ADC1_2_IRQHandler+0xc>)
 8003986:	2240      	movs	r2, #64	@ 0x40
 8003988:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 800398a:	f7fe bd25 	b.w	80023d8 <TSK_HighFrequencyTask>
 800398e:	bf00      	nop
 8003990:	50000100 	.word	0x50000100

08003994 <TIM1_UP_TIM16_IRQHandler>:
 8003994:	4b03      	ldr	r3, [pc, #12]	@ (80039a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003996:	4804      	ldr	r0, [pc, #16]	@ (80039a8 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003998:	f06f 0201 	mvn.w	r2, #1
 800399c:	611a      	str	r2, [r3, #16]
 800399e:	f004 b8c9 	b.w	8007b34 <R3_2_TIMx_UP_IRQHandler>
 80039a2:	bf00      	nop
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	20000064 	.word	0x20000064

080039ac <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80039ac:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80039ae:	4b0c      	ldr	r3, [pc, #48]	@ (80039e0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	0612      	lsls	r2, r2, #24
 80039b4:	d505      	bpl.n	80039c2 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80039b6:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 80039ba:	480a      	ldr	r0, [pc, #40]	@ (80039e4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80039bc:	611a      	str	r2, [r3, #16]
 80039be:	f7ff faf3 	bl	8002fa8 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80039c2:	4907      	ldr	r1, [pc, #28]	@ (80039e0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80039c4:	690b      	ldr	r3, [r1, #16]
 80039c6:	05db      	lsls	r3, r3, #23
 80039c8:	d505      	bpl.n	80039d6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80039ca:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80039ce:	4805      	ldr	r0, [pc, #20]	@ (80039e4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80039d0:	610b      	str	r3, [r1, #16]
 80039d2:	f7ff faf3 	bl	8002fbc <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80039d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 80039da:	f7fe bd5d 	b.w	8002498 <MC_RunMotorControlTasks>
 80039de:	bf00      	nop
 80039e0:	40012c00 	.word	0x40012c00
 80039e4:	20000064 	.word	0x20000064

080039e8 <uart_debug_print>:
//extern UART_HandleTypeDef huart2;
uint8_t uartTxBuffer[UART_TX_BUFFER_SIZE];
volatile bool uartTxDone = true;
//extern void MX_USART2_UART_Init(void);

void uart_debug_print(const char *format, ...) {
 80039e8:	b40f      	push	{r0, r1, r2, r3}
        } else {
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
        }
    }
#endif
}
 80039ea:	b004      	add	sp, #16
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80039f0:	4a03      	ldr	r2, [pc, #12]	@ (8003a00 <SystemInit+0x10>)
 80039f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80039f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80039fa:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80039fe:	4770      	bx	lr
 8003a00:	e000ed00 	.word	0xe000ed00

08003a04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a04:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_InitTick+0x40>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	b90b      	cbnz	r3, 8003a10 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003a0c:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8003a0e:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003a10:	490d      	ldr	r1, [pc, #52]	@ (8003a48 <HAL_InitTick+0x44>)
 8003a12:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a16:	4605      	mov	r5, r0
 8003a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1c:	6808      	ldr	r0, [r1, #0]
 8003a1e:	fbb0 f0f3 	udiv	r0, r0, r3
 8003a22:	f001 f82d 	bl	8004a80 <HAL_SYSTICK_Config>
 8003a26:	4604      	mov	r4, r0
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	d1ef      	bne.n	8003a0c <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2c:	2d0f      	cmp	r5, #15
 8003a2e:	d8ed      	bhi.n	8003a0c <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	4602      	mov	r2, r0
 8003a32:	4629      	mov	r1, r5
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295
 8003a38:	f000 ffd8 	bl	80049ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a3c:	4b03      	ldr	r3, [pc, #12]	@ (8003a4c <HAL_InitTick+0x48>)
 8003a3e:	4620      	mov	r0, r4
 8003a40:	601d      	str	r5, [r3, #0]
}
 8003a42:	bd38      	pop	{r3, r4, r5, pc}
 8003a44:	200003ac 	.word	0x200003ac
 8003a48:	200003a8 	.word	0x200003a8
 8003a4c:	200003b0 	.word	0x200003b0

08003a50 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a50:	4a0a      	ldr	r2, [pc, #40]	@ (8003a7c <HAL_Init+0x2c>)
 8003a52:	6813      	ldr	r3, [r2, #0]
 8003a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8003a58:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a5a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a5c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a5e:	f000 ffb3 	bl	80049c8 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a62:	2004      	movs	r0, #4
 8003a64:	f7ff ffce 	bl	8003a04 <HAL_InitTick>
 8003a68:	b110      	cbz	r0, 8003a70 <HAL_Init+0x20>
    status = HAL_ERROR;
 8003a6a:	2401      	movs	r4, #1
}
 8003a6c:	4620      	mov	r0, r4
 8003a6e:	bd10      	pop	{r4, pc}
 8003a70:	4604      	mov	r4, r0
    HAL_MspInit();
 8003a72:	f7ff fc81 	bl	8003378 <HAL_MspInit>
}
 8003a76:	4620      	mov	r0, r4
 8003a78:	bd10      	pop	{r4, pc}
 8003a7a:	bf00      	nop
 8003a7c:	40022000 	.word	0x40022000

08003a80 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003a80:	4a03      	ldr	r2, [pc, #12]	@ (8003a90 <HAL_IncTick+0x10>)
 8003a82:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_IncTick+0x14>)
 8003a84:	6813      	ldr	r3, [r2, #0]
 8003a86:	6809      	ldr	r1, [r1, #0]
 8003a88:	440b      	add	r3, r1
 8003a8a:	6013      	str	r3, [r2, #0]
}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000798 	.word	0x20000798
 8003a94:	200003ac 	.word	0x200003ac

08003a98 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003a98:	4b01      	ldr	r3, [pc, #4]	@ (8003aa0 <HAL_GetTick+0x8>)
 8003a9a:	6818      	ldr	r0, [r3, #0]
}
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000798 	.word	0x20000798

08003aa4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003aa4:	b538      	push	{r3, r4, r5, lr}
 8003aa6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff fff6 	bl	8003a98 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aac:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003aae:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003ab0:	d002      	beq.n	8003ab8 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab2:	4b04      	ldr	r3, [pc, #16]	@ (8003ac4 <HAL_Delay+0x20>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003ab8:	f7ff ffee 	bl	8003a98 <HAL_GetTick>
 8003abc:	1b40      	subs	r0, r0, r5
 8003abe:	42a0      	cmp	r0, r4
 8003ac0:	d3fa      	bcc.n	8003ab8 <HAL_Delay+0x14>
  {
  }
}
 8003ac2:	bd38      	pop	{r3, r4, r5, pc}
 8003ac4:	200003ac 	.word	0x200003ac

08003ac8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ac8:	b530      	push	{r4, r5, lr}
 8003aca:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003acc:	2300      	movs	r3, #0
 8003ace:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003ad0:	2800      	cmp	r0, #0
 8003ad2:	f000 80aa 	beq.w	8003c2a <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003ad6:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8003ad8:	4604      	mov	r4, r0
 8003ada:	2d00      	cmp	r5, #0
 8003adc:	f000 80aa 	beq.w	8003c34 <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003ae0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003ae2:	6893      	ldr	r3, [r2, #8]
 8003ae4:	009d      	lsls	r5, r3, #2
 8003ae6:	d505      	bpl.n	8003af4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003ae8:	6893      	ldr	r3, [r2, #8]
 8003aea:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8003aee:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003af2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003af4:	6893      	ldr	r3, [r2, #8]
 8003af6:	00d8      	lsls	r0, r3, #3
 8003af8:	d419      	bmi.n	8003b2e <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003afa:	4b68      	ldr	r3, [pc, #416]	@ (8003c9c <HAL_ADC_Init+0x1d4>)
 8003afc:	4868      	ldr	r0, [pc, #416]	@ (8003ca0 <HAL_ADC_Init+0x1d8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8003b00:	6891      	ldr	r1, [r2, #8]
 8003b02:	099b      	lsrs	r3, r3, #6
 8003b04:	fba0 0303 	umull	r0, r3, r0, r3
 8003b08:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8003b0c:	099b      	lsrs	r3, r3, #6
 8003b0e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8003b12:	3301      	adds	r3, #1
 8003b14:	005b      	lsls	r3, r3, #1
 8003b16:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8003b1a:	6091      	str	r1, [r2, #8]
 8003b1c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b1e:	9b01      	ldr	r3, [sp, #4]
 8003b20:	b12b      	cbz	r3, 8003b2e <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8003b22:	9b01      	ldr	r3, [sp, #4]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1f9      	bne.n	8003b22 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003b2e:	6893      	ldr	r3, [r2, #8]
 8003b30:	00d9      	lsls	r1, r3, #3
 8003b32:	d47d      	bmi.n	8003c30 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b34:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003b36:	f043 0310 	orr.w	r3, r3, #16
 8003b3a:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b3c:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8003b3e:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b40:	4303      	orrs	r3, r0
 8003b42:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003b44:	6893      	ldr	r3, [r2, #8]
 8003b46:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003b4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003b4c:	d169      	bne.n	8003c22 <HAL_ADC_Init+0x15a>
 8003b4e:	06db      	lsls	r3, r3, #27
 8003b50:	d467      	bmi.n	8003c22 <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b52:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003b54:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8003b58:	f043 0302 	orr.w	r3, r3, #2
 8003b5c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b5e:	6893      	ldr	r3, [r2, #8]
 8003b60:	07dd      	lsls	r5, r3, #31
 8003b62:	d409      	bmi.n	8003b78 <HAL_ADC_Init+0xb0>
 8003b64:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f013 0f01 	tst.w	r3, #1
 8003b6e:	4b4d      	ldr	r3, [pc, #308]	@ (8003ca4 <HAL_ADC_Init+0x1dc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	d101      	bne.n	8003b78 <HAL_ADC_Init+0xb0>
 8003b74:	07d9      	lsls	r1, r3, #31
 8003b76:	d57a      	bpl.n	8003c6e <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8003b78:	68e5      	ldr	r5, [r4, #12]
 8003b7a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003b7c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8003b80:	432b      	orrs	r3, r5
 8003b82:	68a5      	ldr	r5, [r4, #8]
 8003b84:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b86:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b88:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8003b8a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003b8e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003b92:	d055      	beq.n	8003c40 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b94:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8003b96:	b121      	cbz	r1, 8003ba2 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8003b98:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003b9a:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8003b9e:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003ba0:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003ba2:	68d5      	ldr	r5, [r2, #12]
 8003ba4:	4940      	ldr	r1, [pc, #256]	@ (8003ca8 <HAL_ADC_Init+0x1e0>)
 8003ba6:	4029      	ands	r1, r5
 8003ba8:	4319      	orrs	r1, r3
 8003baa:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003bac:	6913      	ldr	r3, [r2, #16]
 8003bae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003bb0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8003bb4:	430b      	orrs	r3, r1
 8003bb6:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003bb8:	6893      	ldr	r3, [r2, #8]
 8003bba:	071b      	lsls	r3, r3, #28
 8003bbc:	d422      	bmi.n	8003c04 <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bbe:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bc0:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8003bc4:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bc6:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003bca:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bcc:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003bd0:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bd4:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 8003bd6:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003bd8:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003bda:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8003bdc:	2900      	cmp	r1, #0
 8003bde:	d03c      	beq.n	8003c5a <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003be0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003be4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003be6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003bea:	f36f 030d 	bfc	r3, #0, #14
 8003bee:	430b      	orrs	r3, r1
 8003bf0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003bf4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d040      	beq.n	8003c7e <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003bfc:	6913      	ldr	r3, [r2, #16]
 8003bfe:	f023 0301 	bic.w	r3, r3, #1
 8003c02:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003c04:	6963      	ldr	r3, [r4, #20]
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d01f      	beq.n	8003c4a <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003c0a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8003c0c:	f023 030f 	bic.w	r3, r3, #15
 8003c10:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003c12:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003c14:	f023 0303 	bic.w	r3, r3, #3
 8003c18:	f043 0301 	orr.w	r3, r3, #1
 8003c1c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8003c1e:	b003      	add	sp, #12
 8003c20:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8003c24:	f043 0310 	orr.w	r3, r3, #16
 8003c28:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8003c2a:	2001      	movs	r0, #1
}
 8003c2c:	b003      	add	sp, #12
 8003c2e:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c30:	2000      	movs	r0, #0
 8003c32:	e787      	b.n	8003b44 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8003c34:	f7ff fbc0 	bl	80033b8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003c38:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8003c3a:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8003c3e:	e74f      	b.n	8003ae0 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003c40:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8003c42:	3901      	subs	r1, #1
 8003c44:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8003c48:	e7a4      	b.n	8003b94 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003c4a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8003c4c:	6a23      	ldr	r3, [r4, #32]
 8003c4e:	f021 010f 	bic.w	r1, r1, #15
 8003c52:	3b01      	subs	r3, #1
 8003c54:	430b      	orrs	r3, r1
 8003c56:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c58:	e7db      	b.n	8003c12 <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c5e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003c60:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8003c64:	f36f 030d 	bfc	r3, #0, #14
 8003c68:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003c6c:	e7c2      	b.n	8003bf4 <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003c6e:	490f      	ldr	r1, [pc, #60]	@ (8003cac <HAL_ADC_Init+0x1e4>)
 8003c70:	6865      	ldr	r5, [r4, #4]
 8003c72:	688b      	ldr	r3, [r1, #8]
 8003c74:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8003c78:	432b      	orrs	r3, r5
 8003c7a:	608b      	str	r3, [r1, #8]
}
 8003c7c:	e77c      	b.n	8003b78 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 8003c7e:	6911      	ldr	r1, [r2, #16]
 8003c80:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8003c82:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8003c84:	f36f 018a 	bfc	r1, #2, #9
 8003c88:	432b      	orrs	r3, r5
 8003c8a:	430b      	orrs	r3, r1
 8003c8c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8003c8e:	430b      	orrs	r3, r1
 8003c90:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8003c92:	430b      	orrs	r3, r1
 8003c94:	f043 0301 	orr.w	r3, r3, #1
 8003c98:	6113      	str	r3, [r2, #16]
 8003c9a:	e7b3      	b.n	8003c04 <HAL_ADC_Init+0x13c>
 8003c9c:	200003a8 	.word	0x200003a8
 8003ca0:	053e2d63 	.word	0x053e2d63
 8003ca4:	50000100 	.word	0x50000100
 8003ca8:	fff04007 	.word	0xfff04007
 8003cac:	50000300 	.word	0x50000300

08003cb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cb4:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8003cb8:	b082      	sub	sp, #8
 8003cba:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8003cbc:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8003cbe:	f04f 0000 	mov.w	r0, #0
 8003cc2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8003cc4:	f000 812d 	beq.w	8003f22 <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cc8:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8003cca:	2001      	movs	r0, #1
 8003ccc:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cd0:	6894      	ldr	r4, [r2, #8]
 8003cd2:	0764      	lsls	r4, r4, #29
 8003cd4:	d455      	bmi.n	8003d82 <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003cd6:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003cd8:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8003cdc:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ce0:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8003ce4:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003ce6:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8003cea:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8003cee:	f854 500e 	ldr.w	r5, [r4, lr]
 8003cf2:	261f      	movs	r6, #31
 8003cf4:	fa00 f00c 	lsl.w	r0, r0, ip
 8003cf8:	fa06 fc0c 	lsl.w	ip, r6, ip
 8003cfc:	ea25 0c0c 	bic.w	ip, r5, ip
 8003d00:	ea40 000c 	orr.w	r0, r0, ip
 8003d04:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d08:	6890      	ldr	r0, [r2, #8]
 8003d0a:	0747      	lsls	r7, r0, #29
 8003d0c:	d543      	bpl.n	8003d96 <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d0e:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d10:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003d12:	6894      	ldr	r4, [r2, #8]
 8003d14:	07e5      	lsls	r5, r4, #31
 8003d16:	d412      	bmi.n	8003d3e <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003d18:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8003d1a:	4cb0      	ldr	r4, [pc, #704]	@ (8003fdc <HAL_ADC_ConfigChannel+0x32c>)
 8003d1c:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8003d20:	f006 0718 	and.w	r7, r6, #24
 8003d24:	40fc      	lsrs	r4, r7
 8003d26:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8003d2a:	4004      	ands	r4, r0
 8003d2c:	ea25 0507 	bic.w	r5, r5, r7
 8003d30:	432c      	orrs	r4, r5
 8003d32:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003d36:	4caa      	ldr	r4, [pc, #680]	@ (8003fe0 <HAL_ADC_ConfigChannel+0x330>)
 8003d38:	42a6      	cmp	r6, r4
 8003d3a:	f000 80a2 	beq.w	8003e82 <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003d3e:	49a9      	ldr	r1, [pc, #676]	@ (8003fe4 <HAL_ADC_ConfigChannel+0x334>)
 8003d40:	4208      	tst	r0, r1
 8003d42:	d01c      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003d44:	4ca8      	ldr	r4, [pc, #672]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d46:	4da9      	ldr	r5, [pc, #676]	@ (8003fec <HAL_ADC_ConfigChannel+0x33c>)
 8003d48:	68a1      	ldr	r1, [r4, #8]
 8003d4a:	42a8      	cmp	r0, r5
 8003d4c:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8003d50:	d074      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x18c>
 8003d52:	4da7      	ldr	r5, [pc, #668]	@ (8003ff0 <HAL_ADC_ConfigChannel+0x340>)
 8003d54:	42a8      	cmp	r0, r5
 8003d56:	d071      	beq.n	8003e3c <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003d58:	4da6      	ldr	r5, [pc, #664]	@ (8003ff4 <HAL_ADC_ConfigChannel+0x344>)
 8003d5a:	42a8      	cmp	r0, r5
 8003d5c:	f000 80e5 	beq.w	8003f2a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003d60:	4da5      	ldr	r5, [pc, #660]	@ (8003ff8 <HAL_ADC_ConfigChannel+0x348>)
 8003d62:	42a8      	cmp	r0, r5
 8003d64:	d10b      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003d66:	0249      	lsls	r1, r1, #9
 8003d68:	d409      	bmi.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003d6a:	49a4      	ldr	r1, [pc, #656]	@ (8003ffc <HAL_ADC_ConfigChannel+0x34c>)
 8003d6c:	428a      	cmp	r2, r1
 8003d6e:	d006      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003d70:	68a2      	ldr	r2, [r4, #8]
 8003d72:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003d76:	4332      	orrs	r2, r6
 8003d78:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8003d7c:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d7e:	2000      	movs	r0, #0
 8003d80:	e003      	b.n	8003d8a <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d82:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003d84:	f042 0220 	orr.w	r2, r2, #32
 8003d88:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8003d90:	b002      	add	sp, #8
 8003d92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003d96:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d98:	6808      	ldr	r0, [r1, #0]
 8003d9a:	0726      	lsls	r6, r4, #28
 8003d9c:	d4b9      	bmi.n	8003d12 <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d9e:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8003da0:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8003da4:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003da6:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8003da8:	40b4      	lsls	r4, r6
 8003daa:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003dae:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8003db2:	ea6f 0404 	mvn.w	r4, r4
 8003db6:	f000 8107 	beq.w	8003fc8 <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003dba:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8003dbe:	40b5      	lsls	r5, r6
 8003dc0:	583e      	ldr	r6, [r7, r0]
 8003dc2:	4034      	ands	r4, r6
 8003dc4:	432c      	orrs	r4, r5
 8003dc6:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003dc8:	6950      	ldr	r0, [r2, #20]
 8003dca:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8003dce:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dd0:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dd4:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003dd6:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003dd8:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003dda:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003ddc:	f000 80c8 	beq.w	8003f70 <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003de0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8003de4:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8003de6:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 8003dea:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003dee:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8003df2:	4d83      	ldr	r5, [pc, #524]	@ (8004000 <HAL_ADC_ConfigChannel+0x350>)
 8003df4:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 8003df8:	ea0c 0505 	and.w	r5, ip, r5
 8003dfc:	433d      	orrs	r5, r7
 8003dfe:	4328      	orrs	r0, r5
 8003e00:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003e04:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e08:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8003e0a:	698e      	ldr	r6, [r1, #24]
 8003e0c:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8003e10:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8003e14:	4330      	orrs	r0, r6
 8003e16:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e1a:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003e1c:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8003e1e:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8003e22:	f1a5 0501 	sub.w	r5, r5, #1
 8003e26:	fab5 f585 	clz	r5, r5
 8003e2a:	096d      	lsrs	r5, r5, #5
 8003e2c:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8003e30:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8003e34:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003e38:	6808      	ldr	r0, [r1, #0]
}
 8003e3a:	e76a      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003e3c:	020c      	lsls	r4, r1, #8
 8003e3e:	d49e      	bmi.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003e40:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8003e44:	d19b      	bne.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003e46:	4968      	ldr	r1, [pc, #416]	@ (8003fe8 <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003e48:	486e      	ldr	r0, [pc, #440]	@ (8004004 <HAL_ADC_ConfigChannel+0x354>)
 8003e4a:	688a      	ldr	r2, [r1, #8]
 8003e4c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003e50:	4332      	orrs	r2, r6
 8003e52:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8003e56:	608a      	str	r2, [r1, #8]
 8003e58:	6802      	ldr	r2, [r0, #0]
 8003e5a:	496b      	ldr	r1, [pc, #428]	@ (8004008 <HAL_ADC_ConfigChannel+0x358>)
 8003e5c:	0992      	lsrs	r2, r2, #6
 8003e5e:	fba1 1202 	umull	r1, r2, r1, r2
 8003e62:	0992      	lsrs	r2, r2, #6
 8003e64:	3201      	adds	r2, #1
 8003e66:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003e6a:	0092      	lsls	r2, r2, #2
 8003e6c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e6e:	9a01      	ldr	r2, [sp, #4]
 8003e70:	2a00      	cmp	r2, #0
 8003e72:	d084      	beq.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8003e74:	9a01      	ldr	r2, [sp, #4]
 8003e76:	3a01      	subs	r2, #1
 8003e78:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003e7a:	9a01      	ldr	r2, [sp, #4]
 8003e7c:	2a00      	cmp	r2, #0
 8003e7e:	d1f9      	bne.n	8003e74 <HAL_ADC_ConfigChannel+0x1c4>
 8003e80:	e77d      	b.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003e82:	2f00      	cmp	r7, #0
 8003e84:	d060      	beq.n	8003f48 <HAL_ADC_ConfigChannel+0x298>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e86:	fa90 f4a0 	rbit	r4, r0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e8a:	2c00      	cmp	r4, #0
 8003e8c:	f000 80be 	beq.w	800400c <HAL_ADC_ConfigChannel+0x35c>
  {
    return 32U;
  }
  return __builtin_clz(value);
 8003e90:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003e94:	3401      	adds	r4, #1
 8003e96:	f004 041f 	and.w	r4, r4, #31
 8003e9a:	2c09      	cmp	r4, #9
 8003e9c:	f240 80b6 	bls.w	800400c <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ea0:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8003ea4:	2c00      	cmp	r4, #0
 8003ea6:	f000 8157 	beq.w	8004158 <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 8003eaa:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003eae:	3401      	adds	r4, #1
 8003eb0:	06a4      	lsls	r4, r4, #26
 8003eb2:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003eb6:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8003eba:	2d00      	cmp	r5, #0
 8003ebc:	f000 8156 	beq.w	800416c <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8003ec0:	fab5 f585 	clz	r5, r5
 8003ec4:	3501      	adds	r5, #1
 8003ec6:	f005 051f 	and.w	r5, r5, #31
 8003eca:	2601      	movs	r6, #1
 8003ecc:	fa06 f505 	lsl.w	r5, r6, r5
 8003ed0:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8003ed6:	2800      	cmp	r0, #0
 8003ed8:	f000 8146 	beq.w	8004168 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8003edc:	fab0 f080 	clz	r0, r0
 8003ee0:	1c45      	adds	r5, r0, #1
 8003ee2:	f005 051f 	and.w	r5, r5, #31
 8003ee6:	2003      	movs	r0, #3
 8003ee8:	f06f 061d 	mvn.w	r6, #29
 8003eec:	fb10 6005 	smlabb	r0, r0, r5, r6
 8003ef0:	0500      	lsls	r0, r0, #20
 8003ef2:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003ef6:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003ef8:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8003efa:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003efc:	f005 0504 	and.w	r5, r5, #4
 8003f00:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8003f04:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8003f08:	fa04 f700 	lsl.w	r7, r4, r0
 8003f0c:	f04f 0c07 	mov.w	ip, #7
 8003f10:	5974      	ldr	r4, [r6, r5]
 8003f12:	fa0c f000 	lsl.w	r0, ip, r0
 8003f16:	ea24 0000 	bic.w	r0, r4, r0
 8003f1a:	4338      	orrs	r0, r7
 8003f1c:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003f1e:	6808      	ldr	r0, [r1, #0]
}
 8003f20:	e70d      	b.n	8003d3e <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8003f22:	2002      	movs	r0, #2
}
 8003f24:	b002      	add	sp, #8
 8003f26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003f2a:	01c8      	lsls	r0, r1, #7
 8003f2c:	f53f af27 	bmi.w	8003d7e <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003f30:	4932      	ldr	r1, [pc, #200]	@ (8003ffc <HAL_ADC_ConfigChannel+0x34c>)
 8003f32:	428a      	cmp	r2, r1
 8003f34:	f43f af23 	beq.w	8003d7e <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003f38:	68a2      	ldr	r2, [r4, #8]
 8003f3a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8003f3e:	4332      	orrs	r2, r6
 8003f40:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8003f44:	60a2      	str	r2, [r4, #8]
}
 8003f46:	e71a      	b.n	8003d7e <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f48:	0e80      	lsrs	r0, r0, #26
 8003f4a:	3001      	adds	r0, #1
 8003f4c:	f000 051f 	and.w	r5, r0, #31
 8003f50:	2401      	movs	r4, #1
 8003f52:	0680      	lsls	r0, r0, #26
 8003f54:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8003f58:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f5a:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f5c:	ea44 0400 	orr.w	r4, r4, r0
 8003f60:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003f64:	d977      	bls.n	8004056 <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003f66:	381e      	subs	r0, #30
 8003f68:	0500      	lsls	r0, r0, #20
 8003f6a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8003f6e:	e7c2      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003f70:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8003f72:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f74:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f78:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	d16c      	bne.n	800405a <HAL_ADC_ConfigChannel+0x3aa>
 8003f80:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f84:	4284      	cmp	r4, r0
 8003f86:	f000 80a0 	beq.w	80040ca <HAL_ADC_ConfigChannel+0x41a>
 8003f8a:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8003f8c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003f8e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f92:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003f96:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8003f9a:	4285      	cmp	r5, r0
 8003f9c:	f000 80c0 	beq.w	8004120 <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fa0:	68a5      	ldr	r5, [r4, #8]
 8003fa2:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fa4:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003fa8:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8003fac:	4285      	cmp	r5, r0
 8003fae:	f000 80a1 	beq.w	80040f4 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003fb2:	68e5      	ldr	r5, [r4, #12]
 8003fb4:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003fb6:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003fba:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8003fbe:	42a0      	cmp	r0, r4
 8003fc0:	f000 80c4 	beq.w	800414c <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003fc4:	4638      	mov	r0, r7
 8003fc6:	e6a4      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8003fc8:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8003fcc:	5835      	ldr	r5, [r6, r0]
 8003fce:	402c      	ands	r4, r5
 8003fd0:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003fd2:	6950      	ldr	r0, [r2, #20]
 8003fd4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8003fd8:	6150      	str	r0, [r2, #20]
}
 8003fda:	e6f9      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x120>
 8003fdc:	0007ffff 	.word	0x0007ffff
 8003fe0:	407f0000 	.word	0x407f0000
 8003fe4:	80080000 	.word	0x80080000
 8003fe8:	50000300 	.word	0x50000300
 8003fec:	c3210000 	.word	0xc3210000
 8003ff0:	90c00010 	.word	0x90c00010
 8003ff4:	c7520000 	.word	0xc7520000
 8003ff8:	cb840000 	.word	0xcb840000
 8003ffc:	50000100 	.word	0x50000100
 8004000:	03fff000 	.word	0x03fff000
 8004004:	200003a8 	.word	0x200003a8
 8004008:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800400c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8004010:	2c00      	cmp	r4, #0
 8004012:	f000 80b7 	beq.w	8004184 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8004016:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800401a:	3401      	adds	r4, #1
 800401c:	06a4      	lsls	r4, r4, #26
 800401e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004022:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8004026:	2d00      	cmp	r5, #0
 8004028:	f000 80aa 	beq.w	8004180 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 800402c:	fab5 f585 	clz	r5, r5
 8004030:	3501      	adds	r5, #1
 8004032:	f005 051f 	and.w	r5, r5, #31
 8004036:	2601      	movs	r6, #1
 8004038:	fa06 f505 	lsl.w	r5, r6, r5
 800403c:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800403e:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8004042:	2800      	cmp	r0, #0
 8004044:	f000 8099 	beq.w	800417a <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8004048:	fab0 f080 	clz	r0, r0
 800404c:	3001      	adds	r0, #1
 800404e:	f000 001f 	and.w	r0, r0, #31
 8004052:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004056:	0500      	lsls	r0, r0, #20
 8004058:	e74d      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800405a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800405e:	b11d      	cbz	r5, 8004068 <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8004060:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004064:	42ac      	cmp	r4, r5
 8004066:	d030      	beq.n	80040ca <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004068:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800406a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800406c:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004070:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004074:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004078:	fa97 f6a7 	rbit	r6, r7
 800407c:	f104 0c08 	add.w	ip, r4, #8
 8004080:	46e0      	mov	r8, ip
  if (value == 0U)
 8004082:	2e00      	cmp	r6, #0
 8004084:	d074      	beq.n	8004170 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8004086:	fab6 f686 	clz	r6, r6
 800408a:	42ae      	cmp	r6, r5
 800408c:	d04a      	beq.n	8004124 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800408e:	f8dc 5000 	ldr.w	r5, [ip]
 8004092:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004096:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409a:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800409e:	f104 060c 	add.w	r6, r4, #12
 80040a2:	46b0      	mov	r8, r6
  if (value == 0U)
 80040a4:	f1be 0f00 	cmp.w	lr, #0
 80040a8:	d059      	beq.n	800415e <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 80040aa:	fabe fe8e 	clz	lr, lr
 80040ae:	45ae      	cmp	lr, r5
 80040b0:	d022      	beq.n	80040f8 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040b2:	6834      	ldr	r4, [r6, #0]
 80040b4:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040b6:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 80040be:	2d00      	cmp	r5, #0
 80040c0:	f43f ae27 	beq.w	8003d12 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 80040c4:	fab5 f085 	clz	r0, r5
 80040c8:	e779      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 80040ca:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80040cc:	4614      	mov	r4, r2
 80040ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80040d2:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040d6:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80040d8:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80040da:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80040dc:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040e0:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80040e4:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80040e8:	4638      	mov	r0, r7
 80040ea:	2e00      	cmp	r6, #0
 80040ec:	d1c4      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x3c8>
 80040ee:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80040f2:	e752      	b.n	8003f9a <HAL_ADC_ConfigChannel+0x2ea>
 80040f4:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80040f8:	f8dc 0000 	ldr.w	r0, [ip]
 80040fc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004100:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004104:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004106:	68e0      	ldr	r0, [r4, #12]
 8004108:	68e4      	ldr	r4, [r4, #12]
 800410a:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800410e:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004110:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004114:	4638      	mov	r0, r7
 8004116:	2d00      	cmp	r5, #0
 8004118:	d1cf      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x40a>
 800411a:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800411e:	e74e      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x30e>
 8004120:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8004124:	f8de 0000 	ldr.w	r0, [lr]
 8004128:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800412c:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004130:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004132:	68a0      	ldr	r0, [r4, #8]
 8004134:	68a5      	ldr	r5, [r4, #8]
 8004136:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800413a:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800413c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8004140:	4638      	mov	r0, r7
 8004142:	2e00      	cmp	r6, #0
 8004144:	d1a9      	bne.n	800409a <HAL_ADC_ConfigChannel+0x3ea>
 8004146:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800414a:	e72f      	b.n	8003fac <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 800414c:	6830      	ldr	r0, [r6, #0]
 800414e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8004152:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8004154:	6808      	ldr	r0, [r1, #0]
}
 8004156:	e5dc      	b.n	8003d12 <HAL_ADC_ConfigChannel+0x62>
 8004158:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 800415c:	e6ab      	b.n	8003eb6 <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800415e:	68e5      	ldr	r5, [r4, #12]
 8004160:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004162:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8004166:	e7a8      	b.n	80040ba <HAL_ADC_ConfigChannel+0x40a>
 8004168:	4808      	ldr	r0, [pc, #32]	@ (800418c <HAL_ADC_ConfigChannel+0x4dc>)
 800416a:	e6c4      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x246>
 800416c:	2502      	movs	r5, #2
 800416e:	e6af      	b.n	8003ed0 <HAL_ADC_ConfigChannel+0x220>
 8004170:	68a5      	ldr	r5, [r4, #8]
 8004172:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004174:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004178:	e78f      	b.n	800409a <HAL_ADC_ConfigChannel+0x3ea>
 800417a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 800417e:	e6ba      	b.n	8003ef6 <HAL_ADC_ConfigChannel+0x246>
 8004180:	2502      	movs	r5, #2
 8004182:	e75b      	b.n	800403c <HAL_ADC_ConfigChannel+0x38c>
 8004184:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8004188:	e74b      	b.n	8004022 <HAL_ADC_ConfigChannel+0x372>
 800418a:	bf00      	nop
 800418c:	fe500000 	.word	0xfe500000

08004190 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8004190:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004194:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8004198:	b083      	sub	sp, #12
 800419a:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 800419c:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800419e:	f04f 0000 	mov.w	r0, #0
 80041a2:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80041a4:	f000 8175 	beq.w	8004492 <HAL_ADCEx_InjectedConfigChannel+0x302>
 80041a8:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041aa:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 80041ac:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80041b0:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80041b4:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041b6:	2d00      	cmp	r5, #0
 80041b8:	d072      	beq.n	80042a0 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80041ba:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80041bc:	2d01      	cmp	r5, #1
 80041be:	d06f      	beq.n	80042a0 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80041c0:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80041c2:	f000 001f 	and.w	r0, r0, #31
 80041c6:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80041ca:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80041cc:	2f00      	cmp	r7, #0
 80041ce:	f040 811a 	bne.w	8004406 <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80041d2:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80041d4:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80041d6:	2800      	cmp	r0, #0
 80041d8:	f000 821e 	beq.w	8004618 <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80041dc:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80041de:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 80041e2:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80041e4:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80041e6:	4330      	orrs	r0, r6
 80041e8:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80041ec:	6898      	ldr	r0, [r3, #8]
 80041ee:	0700      	lsls	r0, r0, #28
 80041f0:	d410      	bmi.n	8004214 <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80041f2:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80041f6:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80041fa:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80041fc:	2d00      	cmp	r5, #0
 80041fe:	f040 80f7 	bne.w	80043f0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 8004202:	68dd      	ldr	r5, [r3, #12]
 8004204:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8004208:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 800420c:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8004210:	4328      	orrs	r0, r5
 8004212:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004214:	6898      	ldr	r0, [r3, #8]
 8004216:	f010 0004 	ands.w	r0, r0, #4
 800421a:	d057      	beq.n	80042cc <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800421c:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800421e:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004220:	689d      	ldr	r5, [r3, #8]
 8004222:	07ee      	lsls	r6, r5, #31
 8004224:	d414      	bmi.n	8004250 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004226:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8004228:	4da3      	ldr	r5, [pc, #652]	@ (80044b8 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 800422a:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800422e:	f007 0c18 	and.w	ip, r7, #24
 8004232:	fa25 f50c 	lsr.w	r5, r5, ip
 8004236:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 800423a:	4025      	ands	r5, r4
 800423c:	ea26 0c0e 	bic.w	ip, r6, lr
 8004240:	ea45 050c 	orr.w	r5, r5, ip
 8004244:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004248:	4d9c      	ldr	r5, [pc, #624]	@ (80044bc <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 800424a:	42af      	cmp	r7, r5
 800424c:	f000 80f6 	beq.w	800443c <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8004250:	499b      	ldr	r1, [pc, #620]	@ (80044c0 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8004252:	420c      	tst	r4, r1
 8004254:	d01e      	beq.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8004256:	4e9b      	ldr	r6, [pc, #620]	@ (80044c4 <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8004258:	4d9b      	ldr	r5, [pc, #620]	@ (80044c8 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 800425a:	68b1      	ldr	r1, [r6, #8]
 800425c:	42ac      	cmp	r4, r5
 800425e:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8004262:	f000 809f 	beq.w	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004266:	4d99      	ldr	r5, [pc, #612]	@ (80044cc <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8004268:	42ac      	cmp	r4, r5
 800426a:	f000 809b 	beq.w	80043a4 <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800426e:	4d98      	ldr	r5, [pc, #608]	@ (80044d0 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8004270:	42ac      	cmp	r4, r5
 8004272:	f000 8112 	beq.w	800449a <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8004276:	4d97      	ldr	r5, [pc, #604]	@ (80044d4 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8004278:	42ac      	cmp	r4, r5
 800427a:	d10b      	bne.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800427c:	0249      	lsls	r1, r1, #9
 800427e:	d409      	bmi.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8004280:	4995      	ldr	r1, [pc, #596]	@ (80044d8 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8004282:	428b      	cmp	r3, r1
 8004284:	d006      	beq.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8004286:	68b3      	ldr	r3, [r6, #8]
 8004288:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800428c:	433b      	orrs	r3, r7
 800428e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004292:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004294:	2300      	movs	r3, #0
 8004296:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800429a:	b003      	add	sp, #12
 800429c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80042a0:	2809      	cmp	r0, #9
 80042a2:	d1a3      	bne.n	80041ec <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042a4:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80042a6:	0c65      	lsrs	r5, r4, #17
 80042a8:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80042ac:	b120      	cbz	r0, 80042b8 <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80042ae:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80042b0:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80042b4:	4330      	orrs	r0, r6
 80042b6:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80042b8:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80042ba:	4e88      	ldr	r6, [pc, #544]	@ (80044dc <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80042bc:	4030      	ands	r0, r6
 80042be:	4328      	orrs	r0, r5
 80042c0:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042c2:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80042c4:	6655      	str	r5, [r2, #100]	@ 0x64
 80042c6:	0700      	lsls	r0, r0, #28
 80042c8:	d4a4      	bmi.n	8004214 <HAL_ADCEx_InjectedConfigChannel+0x84>
 80042ca:	e792      	b.n	80041f2 <HAL_ADCEx_InjectedConfigChannel+0x62>
 80042cc:	689d      	ldr	r5, [r3, #8]
 80042ce:	072f      	lsls	r7, r5, #28
 80042d0:	d4a6      	bmi.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80042d2:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80042d4:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80042d8:	2d00      	cmp	r5, #0
 80042da:	f040 80a6 	bne.w	800442a <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80042de:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80042e0:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80042e2:	f000 819b 	beq.w	800461c <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80042e6:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80042ea:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042ec:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80042ee:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80042f2:	2d01      	cmp	r5, #1
 80042f4:	f000 8185 	beq.w	8004602 <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80042f8:	691d      	ldr	r5, [r3, #16]
 80042fa:	f025 0502 	bic.w	r5, r5, #2
 80042fe:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8004300:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8004302:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8004306:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004308:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 800430a:	40bd      	lsls	r5, r7
 800430c:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004310:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8004314:	ea6f 0505 	mvn.w	r5, r5
 8004318:	f000 8169 	beq.w	80045ee <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800431c:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8004320:	40be      	lsls	r6, r7
 8004322:	f85c 7004 	ldr.w	r7, [ip, r4]
 8004326:	403d      	ands	r5, r7
 8004328:	4335      	orrs	r5, r6
 800432a:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800432e:	695c      	ldr	r4, [r3, #20]
 8004330:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004334:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004336:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004338:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800433a:	694d      	ldr	r5, [r1, #20]
 800433c:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800433e:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8004340:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8004342:	f000 810c 	beq.w	800455e <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8004346:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 800434a:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 800434c:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8004350:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004354:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8004358:	4e61      	ldr	r6, [pc, #388]	@ (80044e0 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 800435a:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 800435e:	ea0e 0606 	and.w	r6, lr, r6
 8004362:	ea46 060c 	orr.w	r6, r6, ip
 8004366:	4334      	orrs	r4, r6
 8004368:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 800436c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004370:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8004372:	698e      	ldr	r6, [r1, #24]
 8004374:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8004378:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 800437c:	4334      	orrs	r4, r6
 800437e:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004382:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8004384:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8004386:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 800438a:	f1a6 0601 	sub.w	r6, r6, #1
 800438e:	fab6 f686 	clz	r6, r6
 8004392:	0976      	lsrs	r6, r6, #5
 8004394:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8004398:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 800439c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80043a0:	680c      	ldr	r4, [r1, #0]
}
 80043a2:	e73d      	b.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80043a4:	020d      	lsls	r5, r1, #8
 80043a6:	f53f af75 	bmi.w	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043ae:	f47f af71 	bne.w	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80043b2:	4944      	ldr	r1, [pc, #272]	@ (80044c4 <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80043b4:	4c4b      	ldr	r4, [pc, #300]	@ (80044e4 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80043b6:	688b      	ldr	r3, [r1, #8]
 80043b8:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80043bc:	433b      	orrs	r3, r7
 80043be:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80043c2:	608b      	str	r3, [r1, #8]
 80043c4:	6823      	ldr	r3, [r4, #0]
 80043c6:	4948      	ldr	r1, [pc, #288]	@ (80044e8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80043c8:	099b      	lsrs	r3, r3, #6
 80043ca:	fba1 1303 	umull	r1, r3, r1, r3
 80043ce:	099b      	lsrs	r3, r3, #6
 80043d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80043d8:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80043da:	9b01      	ldr	r3, [sp, #4]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f43f af59 	beq.w	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 80043e2:	9b01      	ldr	r3, [sp, #4]
 80043e4:	3b01      	subs	r3, #1
 80043e6:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80043e8:	9b01      	ldr	r3, [sp, #4]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d1f9      	bne.n	80043e2 <HAL_ADCEx_InjectedConfigChannel+0x252>
 80043ee:	e751      	b.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 80043f0:	68dd      	ldr	r5, [r3, #12]
 80043f2:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80043f6:	4328      	orrs	r0, r5
 80043f8:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80043fa:	6898      	ldr	r0, [r3, #8]
 80043fc:	f010 0004 	ands.w	r0, r0, #4
 8004400:	f43f af64 	beq.w	80042cc <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8004404:	e70a      	b.n	800421c <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8004406:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8004408:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800440a:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 800440c:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800440e:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8004410:	2f00      	cmp	r7, #0
 8004412:	f47f aeeb 	bne.w	80041ec <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8004416:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004418:	4e30      	ldr	r6, [pc, #192]	@ (80044dc <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 800441a:	4030      	ands	r0, r6
 800441c:	4328      	orrs	r0, r5
 800441e:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004420:	6898      	ldr	r0, [r3, #8]
 8004422:	0700      	lsls	r0, r0, #28
 8004424:	f53f aef6 	bmi.w	8004214 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8004428:	e6e3      	b.n	80041f2 <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 800442a:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 800442c:	2d00      	cmp	r5, #0
 800442e:	f43f af56 	beq.w	80042de <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8004432:	2801      	cmp	r0, #1
 8004434:	f000 8118 	beq.w	8004668 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8004438:	68d8      	ldr	r0, [r3, #12]
 800443a:	e754      	b.n	80042e6 <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800443c:	f1be 0f00 	cmp.w	lr, #0
 8004440:	d154      	bne.n	80044ec <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8004442:	0ea4      	lsrs	r4, r4, #26
 8004444:	3401      	adds	r4, #1
 8004446:	f004 061f 	and.w	r6, r4, #31
 800444a:	2501      	movs	r5, #1
 800444c:	06a4      	lsls	r4, r4, #26
 800444e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8004452:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004454:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004456:	ea45 0504 	orr.w	r5, r5, r4
 800445a:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800445e:	f200 80fe 	bhi.w	800465e <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004462:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004464:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004466:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8004468:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800446a:	f006 0604 	and.w	r6, r6, #4
 800446e:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8004472:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8004476:	fa05 fc04 	lsl.w	ip, r5, r4
 800447a:	f04f 0e07 	mov.w	lr, #7
 800447e:	59bd      	ldr	r5, [r7, r6]
 8004480:	fa0e f404 	lsl.w	r4, lr, r4
 8004484:	ea25 0404 	bic.w	r4, r5, r4
 8004488:	ea44 040c 	orr.w	r4, r4, ip
 800448c:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800448e:	680c      	ldr	r4, [r1, #0]
}
 8004490:	e6de      	b.n	8004250 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 8004492:	2002      	movs	r0, #2
}
 8004494:	b003      	add	sp, #12
 8004496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800449a:	01cc      	lsls	r4, r1, #7
 800449c:	f53f aefa 	bmi.w	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044a0:	490d      	ldr	r1, [pc, #52]	@ (80044d8 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80044a2:	428b      	cmp	r3, r1
 80044a4:	f43f aef6 	beq.w	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80044a8:	68b3      	ldr	r3, [r6, #8]
 80044aa:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80044ae:	433b      	orrs	r3, r7
 80044b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80044b4:	60b3      	str	r3, [r6, #8]
}
 80044b6:	e6ed      	b.n	8004294 <HAL_ADCEx_InjectedConfigChannel+0x104>
 80044b8:	0007ffff 	.word	0x0007ffff
 80044bc:	407f0000 	.word	0x407f0000
 80044c0:	80080000 	.word	0x80080000
 80044c4:	50000300 	.word	0x50000300
 80044c8:	c3210000 	.word	0xc3210000
 80044cc:	90c00010 	.word	0x90c00010
 80044d0:	c7520000 	.word	0xc7520000
 80044d4:	cb840000 	.word	0xcb840000
 80044d8:	50000100 	.word	0x50000100
 80044dc:	04104000 	.word	0x04104000
 80044e0:	03fff000 	.word	0x03fff000
 80044e4:	200003a8 	.word	0x200003a8
 80044e8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044ec:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80044f0:	2d00      	cmp	r5, #0
 80044f2:	f000 80be 	beq.w	8004672 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 80044f6:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80044fa:	3501      	adds	r5, #1
 80044fc:	f005 051f 	and.w	r5, r5, #31
 8004500:	2d09      	cmp	r5, #9
 8004502:	f240 80b6 	bls.w	8004672 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004506:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800450a:	2d00      	cmp	r5, #0
 800450c:	f000 812b 	beq.w	8004766 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8004510:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004514:	3501      	adds	r5, #1
 8004516:	06ad      	lsls	r5, r5, #26
 8004518:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800451c:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004520:	2e00      	cmp	r6, #0
 8004522:	f000 811e 	beq.w	8004762 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8004526:	fab6 f686 	clz	r6, r6
 800452a:	3601      	adds	r6, #1
 800452c:	f006 061f 	and.w	r6, r6, #31
 8004530:	2701      	movs	r7, #1
 8004532:	fa07 f606 	lsl.w	r6, r7, r6
 8004536:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004538:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800453c:	2c00      	cmp	r4, #0
 800453e:	f000 8109 	beq.w	8004754 <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 8004542:	fab4 f484 	clz	r4, r4
 8004546:	1c66      	adds	r6, r4, #1
 8004548:	f006 061f 	and.w	r6, r6, #31
 800454c:	2403      	movs	r4, #3
 800454e:	f06f 071d 	mvn.w	r7, #29
 8004552:	fb14 7406 	smlabb	r4, r4, r6, r7
 8004556:	0524      	lsls	r4, r4, #20
 8004558:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800455c:	e782      	b.n	8004464 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800455e:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8004560:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004562:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004566:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800456a:	2e00      	cmp	r6, #0
 800456c:	d05a      	beq.n	8004624 <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8004572:	b126      	cbz	r6, 800457e <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8004574:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004578:	42b5      	cmp	r5, r6
 800457a:	f000 80ce 	beq.w	800471a <HAL_ADCEx_InjectedConfigChannel+0x58a>
 800457e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8004580:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004582:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004586:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800458a:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800458e:	fa9c f7ac 	rbit	r7, ip
 8004592:	f105 0e08 	add.w	lr, r5, #8
 8004596:	46f1      	mov	r9, lr
  if (value == 0U)
 8004598:	2f00      	cmp	r7, #0
 800459a:	f000 80dd 	beq.w	8004758 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 800459e:	fab7 f787 	clz	r7, r7
 80045a2:	42b7      	cmp	r7, r6
 80045a4:	f000 80a3 	beq.w	80046ee <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045a8:	f8de 6000 	ldr.w	r6, [lr]
 80045ac:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80045b0:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b4:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80045b8:	f105 070c 	add.w	r7, r5, #12
 80045bc:	46b9      	mov	r9, r7
  if (value == 0U)
 80045be:	f1b8 0f00 	cmp.w	r8, #0
 80045c2:	f000 80d3 	beq.w	800476c <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 80045c6:	fab8 f888 	clz	r8, r8
 80045ca:	45b0      	cmp	r8, r6
 80045cc:	d077      	beq.n	80046be <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80045ce:	683d      	ldr	r5, [r7, #0]
 80045d0:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80045d2:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d6:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80045da:	2e00      	cmp	r6, #0
 80045dc:	f43f ae20 	beq.w	8004220 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 80045e0:	fab6 f486 	clz	r4, r6
 80045e4:	42ac      	cmp	r4, r5
 80045e6:	f000 80af 	beq.w	8004748 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80045ea:	4664      	mov	r4, ip
 80045ec:	e618      	b.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80045ee:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80045f2:	593e      	ldr	r6, [r7, r4]
 80045f4:	4035      	ands	r5, r6
 80045f6:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80045f8:	695c      	ldr	r4, [r3, #20]
 80045fa:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80045fe:	615c      	str	r4, [r3, #20]
}
 8004600:	e699      	b.n	8004336 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8004602:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8004606:	691e      	ldr	r6, [r3, #16]
 8004608:	433d      	orrs	r5, r7
 800460a:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 800460e:	4335      	orrs	r5, r6
 8004610:	f045 0502 	orr.w	r5, r5, #2
 8004614:	611d      	str	r5, [r3, #16]
 8004616:	e673      	b.n	8004300 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8004618:	4628      	mov	r0, r5
 800461a:	e5e4      	b.n	80041e6 <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800461c:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8004620:	60d8      	str	r0, [r3, #12]
 8004622:	e663      	b.n	80042ec <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004624:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004628:	42a5      	cmp	r5, r4
 800462a:	d076      	beq.n	800471a <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800462c:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800462e:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004630:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004634:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004638:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 800463c:	42a6      	cmp	r6, r4
 800463e:	d054      	beq.n	80046ea <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004640:	68ae      	ldr	r6, [r5, #8]
 8004642:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004644:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004648:	f3c6 6684 	ubfx	r6, r6, #26, #5
 800464c:	42a6      	cmp	r6, r4
 800464e:	d034      	beq.n	80046ba <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004650:	68ee      	ldr	r6, [r5, #12]
 8004652:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004654:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004658:	f3c6 6584 	ubfx	r5, r6, #26, #5
 800465c:	e7c2      	b.n	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800465e:	3c1e      	subs	r4, #30
 8004660:	0524      	lsls	r4, r4, #20
 8004662:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8004666:	e6fd      	b.n	8004464 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004668:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 800466a:	f045 0520 	orr.w	r5, r5, #32
 800466e:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8004670:	e63d      	b.n	80042ee <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004672:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8004676:	2d00      	cmp	r5, #0
 8004678:	f000 8082 	beq.w	8004780 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 800467c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004680:	3501      	adds	r5, #1
 8004682:	06ad      	lsls	r5, r5, #26
 8004684:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004688:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800468c:	2e00      	cmp	r6, #0
 800468e:	d075      	beq.n	800477c <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8004690:	fab6 f686 	clz	r6, r6
 8004694:	3601      	adds	r6, #1
 8004696:	f006 061f 	and.w	r6, r6, #31
 800469a:	2701      	movs	r7, #1
 800469c:	fa07 f606 	lsl.w	r6, r7, r6
 80046a0:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046a2:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80046a6:	2c00      	cmp	r4, #0
 80046a8:	d065      	beq.n	8004776 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 80046aa:	fab4 f484 	clz	r4, r4
 80046ae:	3401      	adds	r4, #1
 80046b0:	f004 041f 	and.w	r4, r4, #31
 80046b4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80046b8:	e6d3      	b.n	8004462 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 80046ba:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 80046be:	f8de 4000 	ldr.w	r4, [lr]
 80046c2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80046c6:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046ca:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046ce:	68ec      	ldr	r4, [r5, #12]
 80046d0:	68ed      	ldr	r5, [r5, #12]
 80046d2:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80046d6:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046d8:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046dc:	4664      	mov	r4, ip
 80046de:	2e00      	cmp	r6, #0
 80046e0:	f47f af79 	bne.w	80045d6 <HAL_ADCEx_InjectedConfigChannel+0x446>
 80046e4:	f3cc 6484 	ubfx	r4, ip, #26, #5
 80046e8:	e77c      	b.n	80045e4 <HAL_ADCEx_InjectedConfigChannel+0x454>
 80046ea:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 80046ee:	f8d8 4000 	ldr.w	r4, [r8]
 80046f2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80046f6:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80046fa:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80046fe:	68ac      	ldr	r4, [r5, #8]
 8004700:	68ae      	ldr	r6, [r5, #8]
 8004702:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004706:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004708:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800470c:	4664      	mov	r4, ip
 800470e:	2f00      	cmp	r7, #0
 8004710:	f47f af50 	bne.w	80045b4 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8004714:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8004718:	e798      	b.n	800464c <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 800471a:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 800471c:	461d      	mov	r5, r3
 800471e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004722:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8004726:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800472a:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800472c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 800472e:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004732:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004736:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800473a:	4664      	mov	r4, ip
 800473c:	2f00      	cmp	r7, #0
 800473e:	f47f af26 	bne.w	800458e <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8004742:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8004746:	e779      	b.n	800463c <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 8004748:	683c      	ldr	r4, [r7, #0]
 800474a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800474e:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8004750:	680c      	ldr	r4, [r1, #0]
}
 8004752:	e565      	b.n	8004220 <HAL_ADCEx_InjectedConfigChannel+0x90>
 8004754:	4c0c      	ldr	r4, [pc, #48]	@ (8004788 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8004756:	e685      	b.n	8004464 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004758:	68ae      	ldr	r6, [r5, #8]
 800475a:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800475c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8004760:	e728      	b.n	80045b4 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8004762:	2602      	movs	r6, #2
 8004764:	e6e7      	b.n	8004536 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8004766:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800476a:	e6d7      	b.n	800451c <HAL_ADCEx_InjectedConfigChannel+0x38c>
 800476c:	68ee      	ldr	r6, [r5, #12]
 800476e:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004770:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8004774:	e72f      	b.n	80045d6 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8004776:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800477a:	e673      	b.n	8004464 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 800477c:	2602      	movs	r6, #2
 800477e:	e78f      	b.n	80046a0 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8004780:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8004784:	e780      	b.n	8004688 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8004786:	bf00      	nop
 8004788:	fe500000 	.word	0xfe500000

0800478c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800478c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8004790:	2a01      	cmp	r2, #1
 8004792:	d045      	beq.n	8004820 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8004794:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004796:	6804      	ldr	r4, [r0, #0]
{
 8004798:	b09c      	sub	sp, #112	@ 0x70
 800479a:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800479c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800479e:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047a0:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80047a4:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 80047a6:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80047aa:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80047ac:	d008      	beq.n	80047c0 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ae:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047b0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047b4:	f041 0120 	orr.w	r1, r1, #32
 80047b8:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80047ba:	b01c      	add	sp, #112	@ 0x70
 80047bc:	bcf0      	pop	{r4, r5, r6, r7}
 80047be:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80047c0:	4a22      	ldr	r2, [pc, #136]	@ (800484c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80047c2:	6890      	ldr	r0, [r2, #8]
 80047c4:	0740      	lsls	r0, r0, #29
 80047c6:	d50b      	bpl.n	80047e0 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80047c8:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047ca:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80047cc:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80047d0:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047d2:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 80047da:	b01c      	add	sp, #112	@ 0x70
 80047dc:	bcf0      	pop	{r4, r5, r6, r7}
 80047de:	4770      	bx	lr
 80047e0:	68a0      	ldr	r0, [r4, #8]
 80047e2:	0745      	lsls	r5, r0, #29
 80047e4:	d4f1      	bmi.n	80047ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047e6:	680d      	ldr	r5, [r1, #0]
 80047e8:	b1e5      	cbz	r5, 8004824 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80047ea:	4e19      	ldr	r6, [pc, #100]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80047ec:	684f      	ldr	r7, [r1, #4]
 80047ee:	68b0      	ldr	r0, [r6, #8]
 80047f0:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80047f4:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80047f8:	4338      	orrs	r0, r7
 80047fa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80047fe:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004800:	68a0      	ldr	r0, [r4, #8]
 8004802:	6892      	ldr	r2, [r2, #8]
 8004804:	07c0      	lsls	r0, r0, #31
 8004806:	d41e      	bmi.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8004808:	07d7      	lsls	r7, r2, #31
 800480a:	d41c      	bmi.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 800480c:	68b2      	ldr	r2, [r6, #8]
 800480e:	6889      	ldr	r1, [r1, #8]
 8004810:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004814:	430d      	orrs	r5, r1
 8004816:	f022 020f 	bic.w	r2, r2, #15
 800481a:	4315      	orrs	r5, r2
 800481c:	60b5      	str	r5, [r6, #8]
 800481e:	e012      	b.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8004820:	2002      	movs	r0, #2
}
 8004822:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004824:	480a      	ldr	r0, [pc, #40]	@ (8004850 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8004826:	6881      	ldr	r1, [r0, #8]
 8004828:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 800482c:	6081      	str	r1, [r0, #8]
 800482e:	68a1      	ldr	r1, [r4, #8]
 8004830:	6892      	ldr	r2, [r2, #8]
 8004832:	07cd      	lsls	r5, r1, #31
 8004834:	d407      	bmi.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8004836:	07d4      	lsls	r4, r2, #31
 8004838:	d405      	bmi.n	8004846 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800483a:	6882      	ldr	r2, [r0, #8]
 800483c:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8004840:	f022 020f 	bic.w	r2, r2, #15
 8004844:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004846:	2000      	movs	r0, #0
 8004848:	e7c4      	b.n	80047d4 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800484a:	bf00      	nop
 800484c:	50000100 	.word	0x50000100
 8004850:	50000300 	.word	0x50000300

08004854 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8004854:	b530      	push	{r4, r5, lr}
 8004856:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8004858:	2300      	movs	r3, #0
 800485a:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800485c:	2800      	cmp	r0, #0
 800485e:	d051      	beq.n	8004904 <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8004860:	6802      	ldr	r2, [r0, #0]
 8004862:	6813      	ldr	r3, [r2, #0]
 8004864:	2b00      	cmp	r3, #0
 8004866:	4604      	mov	r4, r0
 8004868:	db4c      	blt.n	8004904 <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800486a:	7f43      	ldrb	r3, [r0, #29]
 800486c:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8004870:	2b00      	cmp	r3, #0
 8004872:	d073      	beq.n	800495c <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8004874:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8004878:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800487a:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 800487c:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 800487e:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8004880:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8004882:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8004884:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 8004886:	6921      	ldr	r1, [r4, #16]
 8004888:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 800488a:	493c      	ldr	r1, [pc, #240]	@ (800497c <HAL_COMP_Init+0x128>)
 800488c:	4001      	ands	r1, r0
 800488e:	430b      	orrs	r3, r1
 8004890:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8004892:	6813      	ldr	r3, [r2, #0]
 8004894:	021b      	lsls	r3, r3, #8
 8004896:	d501      	bpl.n	800489c <HAL_COMP_Init+0x48>
 8004898:	022d      	lsls	r5, r5, #8
 800489a:	d549      	bpl.n	8004930 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800489c:	4b38      	ldr	r3, [pc, #224]	@ (8004980 <HAL_COMP_Init+0x12c>)
 800489e:	429a      	cmp	r2, r3
 80048a0:	d062      	beq.n	8004968 <HAL_COMP_Init+0x114>
 80048a2:	4b38      	ldr	r3, [pc, #224]	@ (8004984 <HAL_COMP_Init+0x130>)
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d064      	beq.n	8004972 <HAL_COMP_Init+0x11e>
 80048a8:	3304      	adds	r3, #4
 80048aa:	429a      	cmp	r2, r3
 80048ac:	bf15      	itete	ne
 80048ae:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 80048b2:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 80048b6:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 80048ba:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80048be:	69a3      	ldr	r3, [r4, #24]
 80048c0:	0798      	lsls	r0, r3, #30
 80048c2:	d022      	beq.n	800490a <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80048c4:	4d30      	ldr	r5, [pc, #192]	@ (8004988 <HAL_COMP_Init+0x134>)
 80048c6:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80048c8:	f013 0f10 	tst.w	r3, #16
 80048cc:	bf14      	ite	ne
 80048ce:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80048d0:	4010      	andeq	r0, r2
 80048d2:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80048d4:	4d2c      	ldr	r5, [pc, #176]	@ (8004988 <HAL_COMP_Init+0x134>)
 80048d6:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80048d8:	f013 0f20 	tst.w	r3, #32
 80048dc:	bf14      	ite	ne
 80048de:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80048e0:	4010      	andeq	r0, r2
 80048e2:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80048e4:	4828      	ldr	r0, [pc, #160]	@ (8004988 <HAL_COMP_Init+0x134>)
 80048e6:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80048e8:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80048ea:	f013 0f02 	tst.w	r3, #2
 80048ee:	bf14      	ite	ne
 80048f0:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80048f2:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80048f4:	07db      	lsls	r3, r3, #31
 80048f6:	6045      	str	r5, [r0, #4]
 80048f8:	d515      	bpl.n	8004926 <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80048fa:	4b23      	ldr	r3, [pc, #140]	@ (8004988 <HAL_COMP_Init+0x134>)
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4311      	orrs	r1, r2
 8004900:	6019      	str	r1, [r3, #0]
}
 8004902:	e009      	b.n	8004918 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 8004904:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8004906:	b003      	add	sp, #12
 8004908:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800490a:	4b1f      	ldr	r3, [pc, #124]	@ (8004988 <HAL_COMP_Init+0x134>)
 800490c:	6859      	ldr	r1, [r3, #4]
 800490e:	4011      	ands	r1, r2
 8004910:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	400a      	ands	r2, r1
 8004916:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8004918:	7f63      	ldrb	r3, [r4, #29]
 800491a:	b90b      	cbnz	r3, 8004920 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 800491c:	2301      	movs	r3, #1
 800491e:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8004920:	2000      	movs	r0, #0
}
 8004922:	b003      	add	sp, #12
 8004924:	bd30      	pop	{r4, r5, pc}
 8004926:	4918      	ldr	r1, [pc, #96]	@ (8004988 <HAL_COMP_Init+0x134>)
 8004928:	680b      	ldr	r3, [r1, #0]
 800492a:	4013      	ands	r3, r2
 800492c:	600b      	str	r3, [r1, #0]
}
 800492e:	e7f3      	b.n	8004918 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004930:	4b16      	ldr	r3, [pc, #88]	@ (800498c <HAL_COMP_Init+0x138>)
 8004932:	4917      	ldr	r1, [pc, #92]	@ (8004990 <HAL_COMP_Init+0x13c>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	099b      	lsrs	r3, r3, #6
 8004938:	fba1 1303 	umull	r1, r3, r1, r3
 800493c:	099b      	lsrs	r3, r3, #6
 800493e:	3301      	adds	r3, #1
 8004940:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8004944:	009b      	lsls	r3, r3, #2
 8004946:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004948:	9b01      	ldr	r3, [sp, #4]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d0a6      	beq.n	800489c <HAL_COMP_Init+0x48>
        wait_loop_index--;
 800494e:	9b01      	ldr	r3, [sp, #4]
 8004950:	3b01      	subs	r3, #1
 8004952:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8004954:	9b01      	ldr	r3, [sp, #4]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d1f9      	bne.n	800494e <HAL_COMP_Init+0xfa>
 800495a:	e79f      	b.n	800489c <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 800495c:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 800495e:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8004960:	f7fe fdca 	bl	80034f8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8004964:	6822      	ldr	r2, [r4, #0]
 8004966:	e785      	b.n	8004874 <HAL_COMP_Init+0x20>
 8004968:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800496c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004970:	e7a5      	b.n	80048be <HAL_COMP_Init+0x6a>
 8004972:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004976:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800497a:	e7a0      	b.n	80048be <HAL_COMP_Init+0x6a>
 800497c:	ff007e0f 	.word	0xff007e0f
 8004980:	40010200 	.word	0x40010200
 8004984:	40010204 	.word	0x40010204
 8004988:	40010400 	.word	0x40010400
 800498c:	200003a8 	.word	0x200003a8
 8004990:	053e2d63 	.word	0x053e2d63

08004994 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8004994:	b1b0      	cbz	r0, 80049c4 <HAL_CORDIC_Init+0x30>
{
 8004996:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8004998:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800499c:	4604      	mov	r4, r0
 800499e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80049a2:	b153      	cbz	r3, 80049ba <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80049a4:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80049a6:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80049a8:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80049aa:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 80049ae:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 80049b2:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80049b6:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80049b8:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80049ba:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80049be:	f7fe fe0f 	bl	80035e0 <HAL_CORDIC_MspInit>
 80049c2:	e7ef      	b.n	80049a4 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80049c4:	2001      	movs	r0, #1
}
 80049c6:	4770      	bx	lr

080049c8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049c8:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80049ca:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049cc:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049ce:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049d6:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049d8:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049da:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80049de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80049e2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80049e4:	4770      	bx	lr
 80049e6:	bf00      	nop
 80049e8:	e000ed00 	.word	0xe000ed00

080049ec <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049ec:	4b1b      	ldr	r3, [pc, #108]	@ (8004a5c <HAL_NVIC_SetPriority+0x70>)
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049f6:	f1c3 0e07 	rsb	lr, r3, #7
 80049fa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049fe:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a02:	bf28      	it	cs
 8004a04:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a08:	f1bc 0f06 	cmp.w	ip, #6
 8004a0c:	d91c      	bls.n	8004a48 <HAL_NVIC_SetPriority+0x5c>
 8004a0e:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a12:	f04f 33ff 	mov.w	r3, #4294967295
 8004a16:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a1a:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004a22:	fa03 f30e 	lsl.w	r3, r3, lr
 8004a26:	ea21 0303 	bic.w	r3, r1, r3
 8004a2a:	fa03 f30c 	lsl.w	r3, r3, ip
 8004a2e:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a30:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004a32:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a34:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004a36:	db0a      	blt.n	8004a4e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a38:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004a3c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004a40:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a48:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a4a:	4694      	mov	ip, r2
 8004a4c:	e7e7      	b.n	8004a1e <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a4e:	4a04      	ldr	r2, [pc, #16]	@ (8004a60 <HAL_NVIC_SetPriority+0x74>)
 8004a50:	f000 000f 	and.w	r0, r0, #15
 8004a54:	4402      	add	r2, r0
 8004a56:	7613      	strb	r3, [r2, #24]
 8004a58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a5c:	e000ed00 	.word	0xe000ed00
 8004a60:	e000ecfc 	.word	0xe000ecfc

08004a64 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a64:	2800      	cmp	r0, #0
 8004a66:	db07      	blt.n	8004a78 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a68:	4a04      	ldr	r2, [pc, #16]	@ (8004a7c <HAL_NVIC_EnableIRQ+0x18>)
 8004a6a:	0941      	lsrs	r1, r0, #5
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f000 001f 	and.w	r0, r0, #31
 8004a72:	4083      	lsls	r3, r0
 8004a74:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a78:	4770      	bx	lr
 8004a7a:	bf00      	nop
 8004a7c:	e000e100 	.word	0xe000e100

08004a80 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a80:	3801      	subs	r0, #1
 8004a82:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004a86:	d301      	bcc.n	8004a8c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004a8a:	4770      	bx	lr
{
 8004a8c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a8e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a92:	4c07      	ldr	r4, [pc, #28]	@ (8004ab0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a94:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a96:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004a9a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a9e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aa0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aa2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aa4:	619a      	str	r2, [r3, #24]
}
 8004aa6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aaa:	6119      	str	r1, [r3, #16]
 8004aac:	4770      	bx	lr
 8004aae:	bf00      	nop
 8004ab0:	e000ed00 	.word	0xe000ed00

08004ab4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop

08004ab8 <HAL_SYSTICK_IRQHandler>:
{
 8004ab8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004aba:	f7ff fffb 	bl	8004ab4 <HAL_SYSTICK_Callback>
}
 8004abe:	bd08      	pop	{r3, pc}

08004ac0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004ac0:	b188      	cbz	r0, 8004ae6 <HAL_DAC_Init+0x26>
{
 8004ac2:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004ac4:	7903      	ldrb	r3, [r0, #4]
 8004ac6:	4604      	mov	r4, r0
 8004ac8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004acc:	b13b      	cbz	r3, 8004ade <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ace:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ad0:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004ad2:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ad4:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ad6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8004ad8:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8004ada:	4618      	mov	r0, r3
}
 8004adc:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8004ade:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8004ae0:	f7fe fd94 	bl	800360c <HAL_DAC_MspInit>
 8004ae4:	e7f3      	b.n	8004ace <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8004ae6:	2001      	movs	r0, #1
}
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop

08004aec <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8004aec:	2800      	cmp	r0, #0
 8004aee:	f000 80c2 	beq.w	8004c76 <HAL_DAC_ConfigChannel+0x18a>
{
 8004af2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004af6:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8004af8:	2900      	cmp	r1, #0
 8004afa:	f000 80be 	beq.w	8004c7a <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004afe:	7943      	ldrb	r3, [r0, #5]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8004b04:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 8004b06:	f000 80c7 	beq.w	8004c98 <HAL_DAC_ConfigChannel+0x1ac>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004b0e:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8004b10:	f04f 0302 	mov.w	r3, #2
 8004b14:	4616      	mov	r6, r2
 8004b16:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004b18:	d06f      	beq.n	8004bfa <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004b1a:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004b1c:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004b20:	69fa      	ldr	r2, [r7, #28]
 8004b22:	2a01      	cmp	r2, #1
 8004b24:	d108      	bne.n	8004b38 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 8004b26:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b28:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b2a:	241f      	movs	r4, #31
 8004b2c:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b2e:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004b30:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b34:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004b36:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004b38:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8004b3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004b3c:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004b40:	2901      	cmp	r1, #1
 8004b42:	f000 8095 	beq.w	8004c70 <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004b46:	2902      	cmp	r1, #2
 8004b48:	f000 809a 	beq.w	8004c80 <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004b4c:	fabe fc8e 	clz	ip, lr
 8004b50:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004b54:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b56:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004b58:	f1a4 0401 	sub.w	r4, r4, #1
 8004b5c:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b60:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004b64:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b66:	fab1 f181 	clz	r1, r1
 8004b6a:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8004b6c:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b6e:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8004b72:	f240 3107 	movw	r1, #775	@ 0x307
 8004b76:	40b1      	lsls	r1, r6
 8004b78:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004b7c:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b7e:	ea44 040e 	orr.w	r4, r4, lr
 8004b82:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004b84:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8004b86:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004b8a:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004b8e:	d07a      	beq.n	8004c86 <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004b90:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004b94:	40b4      	lsls	r4, r6
 8004b96:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004b9a:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004ba2:	40b1      	lsls	r1, r6
 8004ba4:	ea22 0201 	bic.w	r2, r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004baa:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8004bae:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004bb0:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8004bb4:	40b0      	lsls	r0, r6
 8004bb6:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004bba:	fa01 f006 	lsl.w	r0, r1, r6
 8004bbe:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004bc0:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 8004bc2:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8004bc4:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004bc8:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8004bcc:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004bce:	24c0      	movs	r4, #192	@ 0xc0
 8004bd0:	6819      	ldr	r1, [r3, #0]
 8004bd2:	40b4      	lsls	r4, r6
 8004bd4:	ea21 0104 	bic.w	r1, r1, r4
 8004bd8:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004bda:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8004bdc:	f640 700f 	movw	r0, #3855	@ 0xf0f
 8004be0:	40b0      	lsls	r0, r6
 8004be2:	ea21 0100 	bic.w	r1, r1, r0
 8004be6:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004be8:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004bea:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8004bec:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004bee:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8004bf0:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8004bf2:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8004bf4:	716c      	strb	r4, [r5, #5]
}
 8004bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8004bfa:	f7fe ff4d 	bl	8003a98 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004bfe:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8004c00:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8004c04:	b156      	cbz	r6, 8004c1c <HAL_DAC_ConfigChannel+0x130>
 8004c06:	e018      	b.n	8004c3a <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c08:	f7fe ff46 	bl	8003a98 <HAL_GetTick>
 8004c0c:	1b00      	subs	r0, r0, r4
 8004c0e:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c10:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c12:	d902      	bls.n	8004c1a <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c16:	0411      	lsls	r1, r2, #16
 8004c18:	d448      	bmi.n	8004cac <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004c1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c1c:	0412      	lsls	r2, r2, #16
 8004c1e:	d4f3      	bmi.n	8004c08 <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c22:	641a      	str	r2, [r3, #64]	@ 0x40
 8004c24:	e00d      	b.n	8004c42 <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c26:	f7fe ff37 	bl	8003a98 <HAL_GetTick>
 8004c2a:	1b00      	subs	r0, r0, r4
 8004c2c:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c2e:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004c30:	d902      	bls.n	8004c38 <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c34:	2a00      	cmp	r2, #0
 8004c36:	db39      	blt.n	8004cac <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004c38:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004c3a:	2a00      	cmp	r2, #0
 8004c3c:	dbf3      	blt.n	8004c26 <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004c42:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004c44:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c46:	f006 0610 	and.w	r6, r6, #16
 8004c4a:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8004c4e:	40b0      	lsls	r0, r6
 8004c50:	40b1      	lsls	r1, r6
 8004c52:	ea22 0200 	bic.w	r2, r2, r0
 8004c56:	430a      	orrs	r2, r1
 8004c58:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004c5a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c5e:	20ff      	movs	r0, #255	@ 0xff
 8004c60:	40b0      	lsls	r0, r6
 8004c62:	ea22 0200 	bic.w	r2, r2, r0
 8004c66:	40b1      	lsls	r1, r6
 8004c68:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004c6a:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004c6c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004c6e:	e757      	b.n	8004b20 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8004c70:	f04f 0c00 	mov.w	ip, #0
 8004c74:	e76e      	b.n	8004b54 <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 8004c76:	2001      	movs	r0, #1
}
 8004c78:	4770      	bx	lr
    return HAL_ERROR;
 8004c7a:	2001      	movs	r0, #1
}
 8004c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8004c80:	f04f 0c01 	mov.w	ip, #1
 8004c84:	e766      	b.n	8004b54 <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004c86:	f001 f9f1 	bl	800606c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004cbc <HAL_DAC_ConfigChannel+0x1d0>)
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	d905      	bls.n	8004c9c <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8004c90:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004c92:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8004c96:	e77d      	b.n	8004b94 <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 8004c98:	2002      	movs	r0, #2
 8004c9a:	e7ac      	b.n	8004bf6 <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004c9c:	4a08      	ldr	r2, [pc, #32]	@ (8004cc0 <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 8004c9e:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004ca0:	4290      	cmp	r0, r2
 8004ca2:	f67f af77 	bls.w	8004b94 <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004ca6:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8004caa:	e773      	b.n	8004b94 <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cac:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cae:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004cb0:	f043 0308 	orr.w	r3, r3, #8
 8004cb4:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 8004cb6:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004cb8:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8004cba:	e79c      	b.n	8004bf6 <HAL_DAC_ConfigChannel+0x10a>
 8004cbc:	09896800 	.word	0x09896800
 8004cc0:	04c4b400 	.word	0x04c4b400

08004cc4 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004cc4:	2800      	cmp	r0, #0
 8004cc6:	f000 80d9 	beq.w	8004e7c <HAL_FDCAN_Init+0x1b8>
{
 8004cca:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ccc:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8004cd0:	4604      	mov	r4, r0
 8004cd2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d071      	beq.n	8004dbe <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004cda:	6822      	ldr	r2, [r4, #0]
 8004cdc:	6993      	ldr	r3, [r2, #24]
 8004cde:	f023 0310 	bic.w	r3, r3, #16
 8004ce2:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ce4:	f7fe fed8 	bl	8003a98 <HAL_GetTick>
 8004ce8:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cea:	e004      	b.n	8004cf6 <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004cec:	f7fe fed4 	bl	8003a98 <HAL_GetTick>
 8004cf0:	1b40      	subs	r0, r0, r5
 8004cf2:	280a      	cmp	r0, #10
 8004cf4:	d85a      	bhi.n	8004dac <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004cf6:	6823      	ldr	r3, [r4, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	0711      	lsls	r1, r2, #28
 8004cfc:	d4f6      	bmi.n	8004cec <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004cfe:	699a      	ldr	r2, [r3, #24]
 8004d00:	f042 0201 	orr.w	r2, r2, #1
 8004d04:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d06:	f7fe fec7 	bl	8003a98 <HAL_GetTick>
 8004d0a:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d0c:	e004      	b.n	8004d18 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004d0e:	f7fe fec3 	bl	8003a98 <HAL_GetTick>
 8004d12:	1b40      	subs	r0, r0, r5
 8004d14:	280a      	cmp	r0, #10
 8004d16:	d849      	bhi.n	8004dac <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	699a      	ldr	r2, [r3, #24]
 8004d1c:	07d2      	lsls	r2, r2, #31
 8004d1e:	d5f6      	bpl.n	8004d0e <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d20:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8004d22:	4959      	ldr	r1, [pc, #356]	@ (8004e88 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d24:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8004d28:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004d2a:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8004d2c:	f000 80a1 	beq.w	8004e72 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8004d30:	7c22      	ldrb	r2, [r4, #16]
 8004d32:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d34:	699a      	ldr	r2, [r3, #24]
 8004d36:	bf0c      	ite	eq
 8004d38:	f022 0240 	biceq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004d3c:	f042 0240 	orrne.w	r2, r2, #64	@ 0x40
 8004d40:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004d42:	7c62      	ldrb	r2, [r4, #17]
 8004d44:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d46:	699a      	ldr	r2, [r3, #24]
 8004d48:	bf0c      	ite	eq
 8004d4a:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004d4e:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
 8004d52:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004d54:	7ca2      	ldrb	r2, [r4, #18]
 8004d56:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d58:	699a      	ldr	r2, [r3, #24]
 8004d5a:	bf0c      	ite	eq
 8004d5c:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004d60:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
 8004d64:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d66:	699a      	ldr	r2, [r3, #24]
 8004d68:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d6a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004d6c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004d70:	4302      	orrs	r2, r0
 8004d72:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004d74:	699a      	ldr	r2, [r3, #24]
 8004d76:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8004d7a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d7c:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d7e:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d80:	f022 0210 	bic.w	r2, r2, #16
 8004d84:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004d86:	d01f      	beq.n	8004dc8 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004d88:	b311      	cbz	r1, 8004dd0 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d8a:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004d8c:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004d8e:	d077      	beq.n	8004e80 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004d90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004d94:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d96:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004d98:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004d9a:	f042 0210 	orr.w	r2, r2, #16
 8004d9e:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004da0:	d116      	bne.n	8004dd0 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004da2:	699a      	ldr	r2, [r3, #24]
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	619a      	str	r2, [r3, #24]
 8004daa:	e011      	b.n	8004dd0 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004dac:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004dae:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004db6:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8004dba:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8004dbc:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8004dbe:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8004dc2:	f7fe fc3b 	bl	800363c <HAL_FDCAN_MspInit>
 8004dc6:	e788      	b.n	8004cda <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004dc8:	699a      	ldr	r2, [r3, #24]
 8004dca:	f042 0204 	orr.w	r2, r2, #4
 8004dce:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dd0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004dd4:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dd6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004dd8:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004dda:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004dde:	6a21      	ldr	r1, [r4, #32]
 8004de0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004de2:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004de4:	6961      	ldr	r1, [r4, #20]
 8004de6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004de8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004dec:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004df0:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004df2:	d10e      	bne.n	8004e12 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004df4:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004df8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004dfa:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004dfc:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004dfe:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e00:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004e02:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004e06:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004e08:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004e0a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004e0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004e10:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e12:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8004e16:	6be0      	ldr	r0, [r4, #60]	@ 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004e18:	6b61      	ldr	r1, [r4, #52]	@ 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e1a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004e1c:	4302      	orrs	r2, r0
 8004e1e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004e22:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004e26:	4819      	ldr	r0, [pc, #100]	@ (8004e8c <HAL_FDCAN_Init+0x1c8>)
 8004e28:	6420      	str	r0, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004e2a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8004e2e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8004e32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e36:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004e3a:	4915      	ldr	r1, [pc, #84]	@ (8004e90 <HAL_FDCAN_Init+0x1cc>)
 8004e3c:	6461      	str	r1, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e3e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004e42:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8004e46:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004e4a:	4b12      	ldr	r3, [pc, #72]	@ (8004e94 <HAL_FDCAN_Init+0x1d0>)
 8004e4c:	4a12      	ldr	r2, [pc, #72]	@ (8004e98 <HAL_FDCAN_Init+0x1d4>)
 8004e4e:	3140      	adds	r1, #64	@ 0x40
 8004e50:	e9c4 1312 	strd	r1, r3, [r4, #72]	@ 0x48
 8004e54:	33f0      	adds	r3, #240	@ 0xf0
 8004e56:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8004e60:	f003 fb54 	bl	800850c <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8004e64:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004e66:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004e68:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004e6a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8004e6e:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8004e70:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8004e72:	4a0a      	ldr	r2, [pc, #40]	@ (8004e9c <HAL_FDCAN_Init+0x1d8>)
 8004e74:	6861      	ldr	r1, [r4, #4]
 8004e76:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 8004e7a:	e759      	b.n	8004d30 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8004e7c:	2001      	movs	r0, #1
}
 8004e7e:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004e80:	f042 0220 	orr.w	r2, r2, #32
 8004e84:	619a      	str	r2, [r3, #24]
 8004e86:	e7a3      	b.n	8004dd0 <HAL_FDCAN_Init+0x10c>
 8004e88:	40006400 	.word	0x40006400
 8004e8c:	4000a400 	.word	0x4000a400
 8004e90:	4000a470 	.word	0x4000a470
 8004e94:	4000a588 	.word	0x4000a588
 8004e98:	4000a660 	.word	0x4000a660
 8004e9c:	40006000 	.word	0x40006000

08004ea0 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004ea0:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004ea4:	3a01      	subs	r2, #1
 8004ea6:	2a01      	cmp	r2, #1
{
 8004ea8:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8004eaa:	d905      	bls.n	8004eb8 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004eac:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004eae:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8004eb2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8004eb4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8004eb6:	4770      	bx	lr
{
 8004eb8:	b470      	push	{r4, r5, r6}
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004eba:	688a      	ldr	r2, [r1, #8]
                         sFilterConfig->FilterID2);
 8004ebc:	6948      	ldr	r0, [r1, #20]
                         (sFilterConfig->FilterID1 << 16U)    |
 8004ebe:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8004ec2:	e9d1 6100 	ldrd	r6, r1, [r1]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004ec6:	0792      	lsls	r2, r2, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8004ec8:	b956      	cbnz	r6, 8004ee0 <HAL_FDCAN_ConfigFilter+0x40>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004eca:	ea42 62c5 	orr.w	r2, r2, r5, lsl #27
 8004ece:	4302      	orrs	r2, r0
      *FilterAddress = FilterElementW1;
 8004ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8004ed2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    return HAL_OK;
 8004ed6:	2000      	movs	r0, #0
}
 8004ed8:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW1;
 8004eda:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8004ede:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8004ee2:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8004ee6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8004eea:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8004eee:	4310      	orrs	r0, r2
      *FilterAddress = FilterElementW2;
 8004ef0:	6058      	str	r0, [r3, #4]
}
 8004ef2:	bc70      	pop	{r4, r5, r6}
    return HAL_OK;
 8004ef4:	2000      	movs	r0, #0
}
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004ef8:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8004efc:	2a01      	cmp	r2, #1
{
 8004efe:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8004f00:	d005      	beq.n	8004f0e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004f02:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8004f04:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8004f08:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8004f0a:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8004f0c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f0e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f16:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f18:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8004f1a:	f022 0201 	bic.w	r2, r2, #1
 8004f1e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8004f20:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004f22:	6619      	str	r1, [r3, #96]	@ 0x60
    return HAL_OK;
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop

08004f28 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8004f28:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f2a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8004f2e:	2b02      	cmp	r3, #2
{
 8004f30:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8004f32:	d10b      	bne.n	8004f4c <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8004f34:	6805      	ldr	r5, [r0, #0]
 8004f36:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 8004f3a:	f413 1c00 	ands.w	ip, r3, #2097152	@ 0x200000
 8004f3e:	d00b      	beq.n	8004f58 <HAL_FDCAN_AddMessageToTxFifoQ+0x30>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8004f40:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004f46:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8004f48:	2001      	movs	r0, #1
}
 8004f4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8004f4c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8004f4e:	f043 0308 	orr.w	r3, r3, #8
 8004f52:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8004f54:	2001      	movs	r0, #1
}
 8004f56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004f58:	f8d5 60c4 	ldr.w	r6, [r5, #196]	@ 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004f5c:	684b      	ldr	r3, [r1, #4]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f5e:	690f      	ldr	r7, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8004f60:	6888      	ldr	r0, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8004f62:	680c      	ldr	r4, [r1, #0]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8004f64:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d137      	bne.n	8004fdc <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
                   FDCAN_STANDARD_ID |
 8004f6c:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004f6e:	ea47 4784 	orr.w	r7, r7, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 8004f72:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8004f76:	4303      	orrs	r3, r0
 8004f78:	6948      	ldr	r0, [r1, #20]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 8004f7a:	68cc      	ldr	r4, [r1, #12]
                 pTxHeader->FDFormat |
 8004f7c:	4303      	orrs	r3, r0
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f7e:	6a08      	ldr	r0, [r1, #32]
                 pTxHeader->FDFormat |
 8004f80:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8004f84:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004f88:	f8de 0054 	ldr.w	r0, [lr, #84]	@ 0x54
 8004f8c:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8004f90:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8004f94:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f98:	4c13      	ldr	r4, [pc, #76]	@ (8004fe8 <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
  *TxAddress = TxElementW2;
 8004f9a:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004f9c:	68cb      	ldr	r3, [r1, #12]
 8004f9e:	5ce3      	ldrb	r3, [r4, r3]
 8004fa0:	b1a3      	cbz	r3, 8004fcc <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004fa2:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fa4:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8004fa6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fa8:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8004fac:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8004fae:	433b      	orrs	r3, r7
 8004fb0:	7857      	ldrb	r7, [r2, #1]
 8004fb2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fb6:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004fba:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8004fbe:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8004fc0:	68cb      	ldr	r3, [r1, #12]
 8004fc2:	5ce3      	ldrb	r3, [r4, r3]
 8004fc4:	459c      	cmp	ip, r3
 8004fc6:	f102 0204 	add.w	r2, r2, #4
 8004fca:	d3ea      	bcc.n	8004fa2 <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8004fcc:	2301      	movs	r3, #1
 8004fce:	40b3      	lsls	r3, r6
 8004fd0:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    return HAL_OK;
 8004fd4:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8004fd6:	f8ce 3058 	str.w	r3, [lr, #88]	@ 0x58
}
 8004fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8004fdc:	4327      	orrs	r7, r4
 8004fde:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8004fe0:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
 8004fe4:	e7c5      	b.n	8004f72 <HAL_FDCAN_AddMessageToTxFifoQ+0x4a>
 8004fe6:	bf00      	nop
 8004fe8:	08008d30 	.word	0x08008d30

08004fec <HAL_FDCAN_GetRxMessage>:
{
 8004fec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8004ff0:	f890 405c 	ldrb.w	r4, [r0, #92]	@ 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8004ff4:	2c02      	cmp	r4, #2
 8004ff6:	d10d      	bne.n	8005014 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ff8:	2940      	cmp	r1, #64	@ 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8004ffa:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8004ffc:	d010      	beq.n	8005020 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8004ffe:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8005002:	0724      	lsls	r4, r4, #28
 8005004:	d16e      	bne.n	80050e4 <HAL_FDCAN_GetRxMessage+0xf8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8005006:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005008:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800500c:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 800500e:	2001      	movs	r0, #1
}
 8005010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8005014:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8005016:	f043 0308 	orr.w	r3, r3, #8
 800501a:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 800501c:	2001      	movs	r0, #1
 800501e:	e7f7      	b.n	8005010 <HAL_FDCAN_GetRxMessage+0x24>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8005020:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8005024:	0726      	lsls	r6, r4, #28
 8005026:	d0ee      	beq.n	8005006 <HAL_FDCAN_GetRxMessage+0x1a>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8005028:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 800502c:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8005030:	bf18      	it	ne
 8005032:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005036:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800503a:	bf18      	it	ne
 800503c:	f3c4 2440 	ubfxne	r4, r4, #9, #1
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8005040:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8005044:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8005048:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800504a:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 800504e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8005052:	6826      	ldr	r6, [r4, #0]
 8005054:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8005058:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800505a:	2e00      	cmp	r6, #0
 800505c:	d15d      	bne.n	800511a <HAL_FDCAN_GetRxMessage+0x12e>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800505e:	6826      	ldr	r6, [r4, #0]
 8005060:	f3c6 468a 	ubfx	r6, r6, #18, #11
 8005064:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8005066:	6826      	ldr	r6, [r4, #0]
 8005068:	f006 5600 	and.w	r6, r6, #536870912	@ 0x20000000
 800506c:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800506e:	6826      	ldr	r6, [r4, #0]
 8005070:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8005074:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8005076:	88a6      	ldrh	r6, [r4, #4]
 8005078:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800507a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800507e:	f00c 0c0f 	and.w	ip, ip, #15
 8005082:	f8c2 c00c 	str.w	ip, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8005086:	6866      	ldr	r6, [r4, #4]
 8005088:	f406 1680 	and.w	r6, r6, #1048576	@ 0x100000
 800508c:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800508e:	6866      	ldr	r6, [r4, #4]
 8005090:	f406 1600 	and.w	r6, r6, #2097152	@ 0x200000
 8005094:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8005096:	79e6      	ldrb	r6, [r4, #7]
 8005098:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 800509c:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800509e:	4e22      	ldr	r6, [pc, #136]	@ (8005128 <HAL_FDCAN_GetRxMessage+0x13c>)
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80050a0:	6867      	ldr	r7, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80050a2:	f816 e00c 	ldrb.w	lr, [r6, ip]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80050a6:	ea4f 7cd7 	mov.w	ip, r7, lsr #31
 80050aa:	f8c2 c024 	str.w	ip, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80050ae:	f1be 0f00 	cmp.w	lr, #0
 80050b2:	d010      	beq.n	80050d6 <HAL_FDCAN_GetRxMessage+0xea>
 80050b4:	3b01      	subs	r3, #1
 80050b6:	f104 0e07 	add.w	lr, r4, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80050ba:	46f4      	mov	ip, lr
 80050bc:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
 80050c0:	f803 5f01 	strb.w	r5, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80050c4:	68d5      	ldr	r5, [r2, #12]
 80050c6:	f1ac 0c06 	sub.w	ip, ip, #6
 80050ca:	5d75      	ldrb	r5, [r6, r5]
 80050cc:	ebac 0c04 	sub.w	ip, ip, r4
 80050d0:	4565      	cmp	r5, ip
 80050d2:	d8f2      	bhi.n	80050ba <HAL_FDCAN_GetRxMessage+0xce>
 80050d4:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80050d6:	2940      	cmp	r1, #64	@ 0x40
 80050d8:	d023      	beq.n	8005122 <HAL_FDCAN_GetRxMessage+0x136>
      hfdcan->Instance->RXF1A = GetIndex;
 80050da:	f8c5 809c 	str.w	r8, [r5, #156]	@ 0x9c
    return HAL_OK;
 80050de:	2000      	movs	r0, #0
}
 80050e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80050e4:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 80050e8:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80050ec:	bf18      	it	ne
 80050ee:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80050f2:	f8d5 7098 	ldr.w	r7, [r5, #152]	@ 0x98
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80050f6:	bf18      	it	ne
 80050f8:	f3c4 2400 	ubfxne	r4, r4, #8, #1
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80050fc:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8005100:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8005104:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8005106:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 800510a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800510e:	6826      	ldr	r6, [r4, #0]
 8005110:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8005114:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8005116:	2e00      	cmp	r6, #0
 8005118:	d0a1      	beq.n	800505e <HAL_FDCAN_GetRxMessage+0x72>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800511a:	6826      	ldr	r6, [r4, #0]
 800511c:	f026 4660 	bic.w	r6, r6, #3758096384	@ 0xe0000000
 8005120:	e7a0      	b.n	8005064 <HAL_FDCAN_GetRxMessage+0x78>
      hfdcan->Instance->RXF0A = GetIndex;
 8005122:	f8c5 8094 	str.w	r8, [r5, #148]	@ 0x94
 8005126:	e7da      	b.n	80050de <HAL_FDCAN_GetRxMessage+0xf2>
 8005128:	08008d30 	.word	0x08008d30

0800512c <HAL_FDCAN_GetRxFifoFillLevel>:
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800512c:	6803      	ldr	r3, [r0, #0]
  if (RxFifo == FDCAN_RX_FIFO0)
 800512e:	2940      	cmp	r1, #64	@ 0x40
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8005130:	bf0c      	ite	eq
 8005132:	f8d3 0090 	ldreq.w	r0, [r3, #144]	@ 0x90
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8005136:	f8d3 0098 	ldrne.w	r0, [r3, #152]	@ 0x98
 800513a:	f000 000f 	and.w	r0, r0, #15
}
 800513e:	4770      	bx	lr

08005140 <HAL_FDCAN_ActivateNotification>:
{
 8005140:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8005142:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8005146:	3801      	subs	r0, #1
 8005148:	2801      	cmp	r0, #1
 800514a:	d905      	bls.n	8005158 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800514c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800514e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8005152:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8005154:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8005156:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005158:	681b      	ldr	r3, [r3, #0]
{
 800515a:	b470      	push	{r4, r5, r6}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800515c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8005160:	6d98      	ldr	r0, [r3, #88]	@ 0x58
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8005162:	f001 0438 	and.w	r4, r1, #56	@ 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8005166:	d009      	beq.n	800517c <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8005168:	07c6      	lsls	r6, r0, #31
 800516a:	d407      	bmi.n	800517c <HAL_FDCAN_ActivateNotification+0x3c>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800516c:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800516e:	f045 0501 	orr.w	r5, r5, #1
 8005172:	65dd      	str	r5, [r3, #92]	@ 0x5c
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8005174:	b154      	cbz	r4, 800518c <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8005176:	0784      	lsls	r4, r0, #30
 8005178:	d42f      	bmi.n	80051da <HAL_FDCAN_ActivateNotification+0x9a>
 800517a:	e007      	b.n	800518c <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800517c:	b304      	cbz	r4, 80051c0 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800517e:	0786      	lsls	r6, r0, #30
 8005180:	d41e      	bmi.n	80051c0 <HAL_FDCAN_ActivateNotification+0x80>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8005182:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8005184:	f046 0601 	orr.w	r6, r6, #1
 8005188:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800518a:	bb25      	cbnz	r5, 80051d6 <HAL_FDCAN_ActivateNotification+0x96>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800518c:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 8005190:	d001      	beq.n	8005196 <HAL_FDCAN_ActivateNotification+0x56>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8005192:	0746      	lsls	r6, r0, #29
 8005194:	d421      	bmi.n	80051da <HAL_FDCAN_ActivateNotification+0x9a>
 8005196:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 800519a:	d001      	beq.n	80051a0 <HAL_FDCAN_ActivateNotification+0x60>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 800519c:	0705      	lsls	r5, r0, #28
 800519e:	d41c      	bmi.n	80051da <HAL_FDCAN_ActivateNotification+0x9a>
 80051a0:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 80051a4:	d001      	beq.n	80051aa <HAL_FDCAN_ActivateNotification+0x6a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80051a6:	06c4      	lsls	r4, r0, #27
 80051a8:	d417      	bmi.n	80051da <HAL_FDCAN_ActivateNotification+0x9a>
 80051aa:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 80051ae:	d001      	beq.n	80051b4 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80051b0:	0686      	lsls	r6, r0, #26
 80051b2:	d412      	bmi.n	80051da <HAL_FDCAN_ActivateNotification+0x9a>
 80051b4:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 80051b8:	d013      	beq.n	80051e2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80051ba:	0645      	lsls	r5, r0, #25
 80051bc:	d40d      	bmi.n	80051da <HAL_FDCAN_ActivateNotification+0x9a>
 80051be:	e010      	b.n	80051e2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80051c0:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 80051c4:	d021      	beq.n	800520a <HAL_FDCAN_ActivateNotification+0xca>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80051c6:	0746      	lsls	r6, r0, #29
 80051c8:	d41f      	bmi.n	800520a <HAL_FDCAN_ActivateNotification+0xca>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80051ca:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 80051cc:	f046 0601 	orr.w	r6, r6, #1
 80051d0:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80051d2:	2d00      	cmp	r5, #0
 80051d4:	d0ce      	beq.n	8005174 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80051d6:	07c5      	lsls	r5, r0, #31
 80051d8:	d5cc      	bpl.n	8005174 <HAL_FDCAN_ActivateNotification+0x34>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80051da:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80051dc:	f040 0002 	orr.w	r0, r0, #2
 80051e0:	65d8      	str	r0, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80051e2:	060c      	lsls	r4, r1, #24
 80051e4:	d504      	bpl.n	80051f0 <HAL_FDCAN_ActivateNotification+0xb0>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80051e6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80051ea:	4310      	orrs	r0, r2
 80051ec:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80051f0:	05c8      	lsls	r0, r1, #23
 80051f2:	d504      	bpl.n	80051fe <HAL_FDCAN_ActivateNotification+0xbe>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80051f4:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 80051f8:	4302      	orrs	r2, r0
 80051fa:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80051fe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005200:	430a      	orrs	r2, r1
    return HAL_OK;
 8005202:	2000      	movs	r0, #0
}
 8005204:	bc70      	pop	{r4, r5, r6}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8005206:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8005208:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800520a:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 800520e:	d001      	beq.n	8005214 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8005210:	0706      	lsls	r6, r0, #28
 8005212:	d5da      	bpl.n	80051ca <HAL_FDCAN_ActivateNotification+0x8a>
 8005214:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8005218:	d001      	beq.n	800521e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800521a:	06c6      	lsls	r6, r0, #27
 800521c:	d5d5      	bpl.n	80051ca <HAL_FDCAN_ActivateNotification+0x8a>
 800521e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8005222:	d001      	beq.n	8005228 <HAL_FDCAN_ActivateNotification+0xe8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8005224:	0686      	lsls	r6, r0, #26
 8005226:	d5d0      	bpl.n	80051ca <HAL_FDCAN_ActivateNotification+0x8a>
 8005228:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 800522c:	d0d1      	beq.n	80051d2 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800522e:	0646      	lsls	r6, r0, #25
 8005230:	d5cb      	bpl.n	80051ca <HAL_FDCAN_ActivateNotification+0x8a>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8005232:	2d00      	cmp	r5, #0
 8005234:	d09e      	beq.n	8005174 <HAL_FDCAN_ActivateNotification+0x34>
 8005236:	e7ce      	b.n	80051d6 <HAL_FDCAN_ActivateNotification+0x96>

08005238 <HAL_FDCAN_TxEventFifoCallback>:
}
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop

0800523c <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop

08005240 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop

08005244 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop

08005248 <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop

0800524c <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 800524c:	4770      	bx	lr
 800524e:	bf00      	nop

08005250 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 8005250:	4770      	bx	lr
 8005252:	bf00      	nop

08005254 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop

08005258 <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop

0800525c <HAL_FDCAN_ErrorStatusCallback>:
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop

08005260 <HAL_FDCAN_IRQHandler>:
{
 8005260:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8005264:	6803      	ldr	r3, [r0, #0]
 8005266:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005268:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800526a:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800526e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005270:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005272:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8005276:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8005278:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800527a:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800527c:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 8005280:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8005282:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 8005284:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005286:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 8005288:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 800528c:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 800528e:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8005290:	0669      	lsls	r1, r5, #25
{
 8005292:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8005294:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8005298:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 800529c:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 80052a0:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80052a4:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80052a8:	d502      	bpl.n	80052b0 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80052aa:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 80052ae:	d172      	bne.n	8005396 <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80052b0:	05ea      	lsls	r2, r5, #23
 80052b2:	d502      	bpl.n	80052ba <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80052b4:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80052b8:	d15d      	bne.n	8005376 <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 80052ba:	f1ba 0f00 	cmp.w	sl, #0
 80052be:	d14a      	bne.n	8005356 <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 80052c0:	f1b9 0f00 	cmp.w	r9, #0
 80052c4:	d135      	bne.n	8005332 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 80052c6:	f1b8 0f00 	cmp.w	r8, #0
 80052ca:	d13c      	bne.n	8005346 <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80052cc:	05ab      	lsls	r3, r5, #22
 80052ce:	d502      	bpl.n	80052d6 <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80052d0:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 80052d4:	d174      	bne.n	80053c0 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80052d6:	0628      	lsls	r0, r5, #24
 80052d8:	d502      	bpl.n	80052e0 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80052da:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 80052de:	d177      	bne.n	80053d0 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80052e0:	04a9      	lsls	r1, r5, #18
 80052e2:	d502      	bpl.n	80052ea <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80052e4:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 80052e8:	d15a      	bne.n	80053a0 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80052ea:	042a      	lsls	r2, r5, #16
 80052ec:	d502      	bpl.n	80052f4 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80052ee:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 80052f2:	d15d      	bne.n	80053b0 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 80052f4:	046b      	lsls	r3, r5, #17
 80052f6:	d50a      	bpl.n	800530e <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 80052f8:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 80052fc:	d007      	beq.n	800530e <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80052fe:	6823      	ldr	r3, [r4, #0]
 8005300:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8005304:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8005306:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005308:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800530c:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 800530e:	b94f      	cbnz	r7, 8005324 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8005310:	b126      	cbz	r6, 800531c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8005312:	6823      	ldr	r3, [r4, #0]
 8005314:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 8005316:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8005318:	4333      	orrs	r3, r6
 800531a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800531c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800531e:	bb2b      	cbnz	r3, 800536c <HAL_FDCAN_IRQHandler+0x10c>
}
 8005320:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005324:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8005326:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8005328:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800532a:	4620      	mov	r0, r4
 800532c:	f7ff ff96 	bl	800525c <HAL_FDCAN_ErrorStatusCallback>
 8005330:	e7ee      	b.n	8005310 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005332:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8005334:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8005336:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800533a:	4620      	mov	r0, r4
 800533c:	f7fc fa20 	bl	8001780 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 8005340:	f1b8 0f00 	cmp.w	r8, #0
 8005344:	d0c2      	beq.n	80052cc <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8005346:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8005348:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800534a:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800534e:	4620      	mov	r0, r4
 8005350:	f7ff ff74 	bl	800523c <HAL_FDCAN_RxFifo1Callback>
 8005354:	e7ba      	b.n	80052cc <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8005356:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005358:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800535a:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff ff6a 	bl	8005238 <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 8005364:	f1b9 0f00 	cmp.w	r9, #0
 8005368:	d0ad      	beq.n	80052c6 <HAL_FDCAN_IRQHandler+0x66>
 800536a:	e7e2      	b.n	8005332 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800536c:	4620      	mov	r0, r4
 800536e:	f7ff ff73 	bl	8005258 <HAL_FDCAN_ErrorCallback>
}
 8005372:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8005376:	6823      	ldr	r3, [r4, #0]
 8005378:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800537c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005380:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8005384:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8005386:	4011      	ands	r1, r2
 8005388:	4620      	mov	r0, r4
 800538a:	f7ff ff5d 	bl	8005248 <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 800538e:	f1ba 0f00 	cmp.w	sl, #0
 8005392:	d095      	beq.n	80052c0 <HAL_FDCAN_IRQHandler+0x60>
 8005394:	e7df      	b.n	8005356 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005396:	2240      	movs	r2, #64	@ 0x40
 8005398:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800539a:	f7ff ff5b 	bl	8005254 <HAL_FDCAN_HighPriorityMessageCallback>
 800539e:	e787      	b.n	80052b0 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80053a0:	6823      	ldr	r3, [r4, #0]
 80053a2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80053a6:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80053a8:	4620      	mov	r0, r4
 80053aa:	f7ff ff4f 	bl	800524c <HAL_FDCAN_TimestampWraparoundCallback>
 80053ae:	e79c      	b.n	80052ea <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80053b6:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80053b8:	4620      	mov	r0, r4
 80053ba:	f7ff ff49 	bl	8005250 <HAL_FDCAN_TimeoutOccurredCallback>
 80053be:	e799      	b.n	80052f4 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80053c0:	6823      	ldr	r3, [r4, #0]
 80053c2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80053c6:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80053c8:	4620      	mov	r0, r4
 80053ca:	f7ff ff39 	bl	8005240 <HAL_FDCAN_TxFifoEmptyCallback>
 80053ce:	e782      	b.n	80052d6 <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80053d6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80053da:	2080      	movs	r0, #128	@ 0x80
 80053dc:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80053de:	4011      	ands	r1, r2
 80053e0:	4620      	mov	r0, r4
 80053e2:	f7ff ff2f 	bl	8005244 <HAL_FDCAN_TxBufferCompleteCallback>
 80053e6:	e77b      	b.n	80052e0 <HAL_FDCAN_IRQHandler+0x80>

080053e8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053e8:	680b      	ldr	r3, [r1, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	f000 8198 	beq.w	8005720 <HAL_GPIO_Init+0x338>
{
 80053f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053f4:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 80053f8:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 80053fa:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053fe:	f04f 0b01 	mov.w	fp, #1
 8005402:	f000 810d 	beq.w	8005620 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005406:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8005754 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800540a:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 800540c:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800540e:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8005412:	ea1c 0a03 	ands.w	sl, ip, r3
 8005416:	d077      	beq.n	8005508 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005418:	684d      	ldr	r5, [r1, #4]
 800541a:	f005 0703 	and.w	r7, r5, #3
 800541e:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005420:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005422:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005426:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800542a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800542e:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005432:	f240 8119 	bls.w	8005668 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005436:	2f03      	cmp	r7, #3
 8005438:	f040 8179 	bne.w	800572e <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800543c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8005440:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005442:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005444:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005446:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800544a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800544c:	d05c      	beq.n	8005508 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800544e:	4ebe      	ldr	r6, [pc, #760]	@ (8005748 <HAL_GPIO_Init+0x360>)
 8005450:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8005452:	f044 0401 	orr.w	r4, r4, #1
 8005456:	6634      	str	r4, [r6, #96]	@ 0x60
 8005458:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800545a:	f004 0401 	and.w	r4, r4, #1
 800545e:	9403      	str	r4, [sp, #12]
 8005460:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8005462:	f022 0403 	bic.w	r4, r2, #3
 8005466:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800546a:	f002 0703 	and.w	r7, r2, #3
 800546e:	230f      	movs	r3, #15
 8005470:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8005474:	00bf      	lsls	r7, r7, #2
 8005476:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800547a:	4bb4      	ldr	r3, [pc, #720]	@ (800574c <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800547c:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800547e:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005480:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005484:	f000 8140 	beq.w	8005708 <HAL_GPIO_Init+0x320>
 8005488:	4bb1      	ldr	r3, [pc, #708]	@ (8005750 <HAL_GPIO_Init+0x368>)
 800548a:	4298      	cmp	r0, r3
 800548c:	f000 812d 	beq.w	80056ea <HAL_GPIO_Init+0x302>
 8005490:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8005758 <HAL_GPIO_Init+0x370>
 8005494:	4560      	cmp	r0, ip
 8005496:	f000 813d 	beq.w	8005714 <HAL_GPIO_Init+0x32c>
 800549a:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 800575c <HAL_GPIO_Init+0x374>
 800549e:	4560      	cmp	r0, ip
 80054a0:	f000 813f 	beq.w	8005722 <HAL_GPIO_Init+0x33a>
 80054a4:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8005760 <HAL_GPIO_Init+0x378>
 80054a8:	4560      	cmp	r0, ip
 80054aa:	bf0c      	ite	eq
 80054ac:	f04f 0c05 	moveq.w	ip, #5
 80054b0:	f04f 0c06 	movne.w	ip, #6
 80054b4:	fa0c f707 	lsl.w	r7, ip, r7
 80054b8:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80054ba:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 80054bc:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80054c0:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054c4:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80054c6:	bf54      	ite	pl
 80054c8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80054ca:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 80054ce:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80054d2:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054d6:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 80054d8:	bf54      	ite	pl
 80054da:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80054dc:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 80054e0:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 80054e4:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054e8:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 80054ea:	bf54      	ite	pl
 80054ec:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80054ee:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 80054f2:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80054f6:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054fa:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 80054fc:	bf54      	ite	pl
 80054fe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8005500:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8005504:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005508:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 800550a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800550c:	fa33 f402 	lsrs.w	r4, r3, r2
 8005510:	f47f af7c 	bne.w	800540c <HAL_GPIO_Init+0x24>
  }
}
 8005514:	b005      	add	sp, #20
 8005516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800551a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800551e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005520:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005524:	fa06 f807 	lsl.w	r8, r6, r7
 8005528:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800552c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8005530:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005534:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005538:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800553c:	fa0e fe02 	lsl.w	lr, lr, r2
 8005540:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8005544:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8005548:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800554c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800554e:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005552:	fa06 fe07 	lsl.w	lr, r6, r7
 8005556:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800555a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 800555c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005560:	d119      	bne.n	8005596 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8005562:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005566:	690e      	ldr	r6, [r1, #16]
 8005568:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800556c:	f002 0807 	and.w	r8, r2, #7
 8005570:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8005574:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005578:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 800557c:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005580:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005582:	260f      	movs	r6, #15
 8005584:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005588:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800558a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800558e:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8005592:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005596:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8005598:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800559a:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559e:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055a0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80055a4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80055a6:	d036      	beq.n	8005616 <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055a8:	4f67      	ldr	r7, [pc, #412]	@ (8005748 <HAL_GPIO_Init+0x360>)
 80055aa:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80055ac:	f044 0401 	orr.w	r4, r4, #1
 80055b0:	663c      	str	r4, [r7, #96]	@ 0x60
 80055b2:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 80055b4:	f004 0401 	and.w	r4, r4, #1
 80055b8:	9403      	str	r4, [sp, #12]
 80055ba:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80055bc:	f022 0403 	bic.w	r4, r2, #3
 80055c0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80055c4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055c8:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80055cc:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80055d0:	260f      	movs	r6, #15
 80055d2:	00bf      	lsls	r7, r7, #2
 80055d4:	fa06 f707 	lsl.w	r7, r6, r7
 80055d8:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055dc:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 80055de:	4c5d      	ldr	r4, [pc, #372]	@ (8005754 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e0:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 80055e2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 80055e4:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055e8:	d47c      	bmi.n	80056e4 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 80055ea:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 80055ec:	4e59      	ldr	r6, [pc, #356]	@ (8005754 <HAL_GPIO_Init+0x36c>)
 80055ee:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 80055f0:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055f2:	02ae      	lsls	r6, r5, #10
 80055f4:	f100 8085 	bmi.w	8005702 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 80055f8:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 80055fa:	4e56      	ldr	r6, [pc, #344]	@ (8005754 <HAL_GPIO_Init+0x36c>)
 80055fc:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 80055fe:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005600:	03ae      	lsls	r6, r5, #14
 8005602:	d47b      	bmi.n	80056fc <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8005604:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8005606:	4e53      	ldr	r6, [pc, #332]	@ (8005754 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005608:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 800560a:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 800560c:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800560e:	d472      	bmi.n	80056f6 <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8005610:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8005612:	4d50      	ldr	r5, [pc, #320]	@ (8005754 <HAL_GPIO_Init+0x36c>)
 8005614:	602c      	str	r4, [r5, #0]
    position++;
 8005616:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005618:	fa33 f402 	lsrs.w	r4, r3, r2
 800561c:	f43f af7a 	beq.w	8005514 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005620:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8005624:	ea13 0c0e 	ands.w	ip, r3, lr
 8005628:	d0f5      	beq.n	8005616 <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800562a:	684d      	ldr	r5, [r1, #4]
 800562c:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800562e:	2603      	movs	r6, #3
 8005630:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005634:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005638:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800563c:	f104 38ff 	add.w	r8, r4, #4294967295
 8005640:	f1b8 0f01 	cmp.w	r8, #1
 8005644:	f67f af69 	bls.w	800551a <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005648:	2c03      	cmp	r4, #3
 800564a:	d0a4      	beq.n	8005596 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 800564c:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005650:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8005652:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005656:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800565a:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800565e:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8005662:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005666:	e796      	b.n	8005596 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 8005668:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800566c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800566e:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005672:	fa03 f804 	lsl.w	r8, r3, r4
 8005676:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800567a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 800567e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005682:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005684:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005688:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 800568c:	fa0c fc02 	lsl.w	ip, ip, r2
 8005690:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8005694:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8005698:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800569c:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80056a0:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80056a4:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056a8:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 80056aa:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80056ae:	f47f aec5 	bne.w	800543c <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056b2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 80056b4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056b8:	f002 0c07 	and.w	ip, r2, #7
 80056bc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80056c0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056c4:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 80056c8:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056cc:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056ce:	230f      	movs	r3, #15
 80056d0:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056d4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80056d6:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80056da:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 80056de:	f8c8 c020 	str.w	ip, [r8, #32]
 80056e2:	e6ab      	b.n	800543c <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 80056e4:	ea44 040c 	orr.w	r4, r4, ip
 80056e8:	e780      	b.n	80055ec <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80056ea:	f04f 0c02 	mov.w	ip, #2
 80056ee:	fa0c f707 	lsl.w	r7, ip, r7
 80056f2:	433e      	orrs	r6, r7
 80056f4:	e6e1      	b.n	80054ba <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80056f6:	ea4c 0404 	orr.w	r4, ip, r4
 80056fa:	e78a      	b.n	8005612 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 80056fc:	ea44 040c 	orr.w	r4, r4, ip
 8005700:	e781      	b.n	8005606 <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8005702:	ea4c 0404 	orr.w	r4, ip, r4
 8005706:	e778      	b.n	80055fa <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005708:	f04f 0c01 	mov.w	ip, #1
 800570c:	fa0c f707 	lsl.w	r7, ip, r7
 8005710:	433e      	orrs	r6, r7
 8005712:	e6d2      	b.n	80054ba <HAL_GPIO_Init+0xd2>
 8005714:	f04f 0c03 	mov.w	ip, #3
 8005718:	fa0c f707 	lsl.w	r7, ip, r7
 800571c:	433e      	orrs	r6, r7
 800571e:	e6cc      	b.n	80054ba <HAL_GPIO_Init+0xd2>
 8005720:	4770      	bx	lr
 8005722:	f04f 0c04 	mov.w	ip, #4
 8005726:	fa0c f707 	lsl.w	r7, ip, r7
 800572a:	433e      	orrs	r6, r7
 800572c:	e6c5      	b.n	80054ba <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 800572e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005732:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005734:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005738:	fa03 fc04 	lsl.w	ip, r3, r4
 800573c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8005740:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005744:	e67a      	b.n	800543c <HAL_GPIO_Init+0x54>
 8005746:	bf00      	nop
 8005748:	40021000 	.word	0x40021000
 800574c:	48000400 	.word	0x48000400
 8005750:	48000800 	.word	0x48000800
 8005754:	40010400 	.word	0x40010400
 8005758:	48000c00 	.word	0x48000c00
 800575c:	48001000 	.word	0x48001000
 8005760:	48001400 	.word	0x48001400

08005764 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005764:	b10a      	cbz	r2, 800576a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005766:	6181      	str	r1, [r0, #24]
 8005768:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800576a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop

08005770 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005770:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005772:	ea01 0203 	and.w	r2, r1, r3
 8005776:	ea21 0103 	bic.w	r1, r1, r3
 800577a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800577e:	6181      	str	r1, [r0, #24]
}
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop

08005784 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8005784:	2800      	cmp	r0, #0
 8005786:	d06f      	beq.n	8005868 <HAL_OPAMP_Init+0xe4>
{
 8005788:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800578a:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800578e:	2b05      	cmp	r3, #5
{
 8005790:	b083      	sub	sp, #12
 8005792:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8005794:	d056      	beq.n	8005844 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8005796:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800579a:	2b02      	cmp	r3, #2
 800579c:	d052      	beq.n	8005844 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579e:	4b33      	ldr	r3, [pc, #204]	@ (800586c <HAL_OPAMP_Init+0xe8>)
 80057a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80057a2:	f042 0201 	orr.w	r2, r2, #1
 80057a6:	661a      	str	r2, [r3, #96]	@ 0x60
 80057a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	9301      	str	r3, [sp, #4]
 80057b0:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 80057b2:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 80057b6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80057ba:	b90b      	cbnz	r3, 80057c0 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 80057bc:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 80057c0:	4620      	mov	r0, r4
 80057c2:	f7fd ffad 	bl	8003720 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80057c6:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80057c8:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80057ca:	f023 0220 	bic.w	r2, r3, #32
 80057ce:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 80057d0:	6822      	ldr	r2, [r4, #0]
 80057d2:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80057d4:	d039      	beq.n	800584a <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80057d6:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 80057d8:	f021 0110 	bic.w	r1, r1, #16
 80057dc:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80057de:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 80057e0:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80057e2:	432b      	orrs	r3, r5
 80057e4:	4303      	orrs	r3, r0
 80057e6:	6920      	ldr	r0, [r4, #16]
 80057e8:	6811      	ldr	r1, [r2, #0]
 80057ea:	4303      	orrs	r3, r0
 80057ec:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80057ee:	4303      	orrs	r3, r0
 80057f0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80057f2:	4303      	orrs	r3, r0
 80057f4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80057f6:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80057fa:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80057fc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8005800:	481b      	ldr	r0, [pc, #108]	@ (8005870 <HAL_OPAMP_Init+0xec>)
 8005802:	4008      	ands	r0, r1
 8005804:	7d21      	ldrb	r1, [r4, #20]
 8005806:	f1a1 0101 	sub.w	r1, r1, #1
 800580a:	fab1 f181 	clz	r1, r1
 800580e:	4303      	orrs	r3, r0
 8005810:	0949      	lsrs	r1, r1, #5
 8005812:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005816:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8005818:	6993      	ldr	r3, [r2, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	db09      	blt.n	8005832 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 800581e:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8005822:	6991      	ldr	r1, [r2, #24]
 8005824:	4303      	orrs	r3, r0
 8005826:	6a20      	ldr	r0, [r4, #32]
 8005828:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800582c:	4303      	orrs	r3, r0
 800582e:	430b      	orrs	r3, r1
 8005830:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8005832:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8005836:	b913      	cbnz	r3, 800583e <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8005838:	2301      	movs	r3, #1
 800583a:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800583e:	2000      	movs	r0, #0
  }
}
 8005840:	b003      	add	sp, #12
 8005842:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8005844:	2001      	movs	r0, #1
}
 8005846:	b003      	add	sp, #12
 8005848:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 800584a:	f021 0110 	bic.w	r1, r1, #16
 800584e:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8005850:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8005852:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8005854:	4303      	orrs	r3, r0
 8005856:	6920      	ldr	r0, [r4, #16]
 8005858:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800585a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800585c:	4303      	orrs	r3, r0
 800585e:	430b      	orrs	r3, r1
 8005860:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8005862:	6811      	ldr	r1, [r2, #0]
 8005864:	432b      	orrs	r3, r5
 8005866:	e7c6      	b.n	80057f6 <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8005868:	2001      	movs	r0, #1
}
 800586a:	4770      	bx	lr
 800586c:	40021000 	.word	0x40021000
 8005870:	e0003e11 	.word	0xe0003e11

08005874 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005874:	4a35      	ldr	r2, [pc, #212]	@ (800594c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005876:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005878:	b960      	cbnz	r0, 8005894 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800587a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800587e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005882:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005886:	d01b      	beq.n	80058c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800588c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005890:	2000      	movs	r0, #0
}
 8005892:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005894:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8005898:	d006      	beq.n	80058a8 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800589a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800589e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80058a2:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 80058a4:	2000      	movs	r0, #0
}
 80058a6:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b0:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058b4:	d029      	beq.n	800590a <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058ba:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80058be:	e7f1      	b.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058c8:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058ca:	4821      	ldr	r0, [pc, #132]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80058cc:	4921      	ldr	r1, [pc, #132]	@ (8005954 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058d6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058d8:	6803      	ldr	r3, [r0, #0]
 80058da:	2032      	movs	r0, #50	@ 0x32
 80058dc:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e0:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e2:	fba1 1303 	umull	r1, r3, r1, r3
 80058e6:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058e8:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058ea:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058ee:	d506      	bpl.n	80058fe <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058f0:	e000      	b.n	80058f4 <HAL_PWREx_ControlVoltageScaling+0x80>
 80058f2:	b123      	cbz	r3, 80058fe <HAL_PWREx_ControlVoltageScaling+0x8a>
 80058f4:	6951      	ldr	r1, [r2, #20]
 80058f6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80058f8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fc:	d4f9      	bmi.n	80058f2 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80058fe:	4b13      	ldr	r3, [pc, #76]	@ (800594c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	055b      	lsls	r3, r3, #21
 8005904:	d5ce      	bpl.n	80058a4 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8005906:	2003      	movs	r0, #3
 8005908:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800590a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800590e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005912:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005914:	480e      	ldr	r0, [pc, #56]	@ (8005950 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8005916:	490f      	ldr	r1, [pc, #60]	@ (8005954 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005918:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800591c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005920:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005922:	6803      	ldr	r3, [r0, #0]
 8005924:	2032      	movs	r0, #50	@ 0x32
 8005926:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800592a:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800592c:	fba1 1303 	umull	r1, r3, r1, r3
 8005930:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005932:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005934:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005938:	d5e1      	bpl.n	80058fe <HAL_PWREx_ControlVoltageScaling+0x8a>
 800593a:	e001      	b.n	8005940 <HAL_PWREx_ControlVoltageScaling+0xcc>
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0de      	beq.n	80058fe <HAL_PWREx_ControlVoltageScaling+0x8a>
 8005940:	6951      	ldr	r1, [r2, #20]
 8005942:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005944:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005948:	d5d9      	bpl.n	80058fe <HAL_PWREx_ControlVoltageScaling+0x8a>
 800594a:	e7f7      	b.n	800593c <HAL_PWREx_ControlVoltageScaling+0xc8>
 800594c:	40007000 	.word	0x40007000
 8005950:	200003a8 	.word	0x200003a8
 8005954:	431bde83 	.word	0x431bde83

08005958 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005958:	4a02      	ldr	r2, [pc, #8]	@ (8005964 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800595a:	6893      	ldr	r3, [r2, #8]
 800595c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005960:	6093      	str	r3, [r2, #8]
}
 8005962:	4770      	bx	lr
 8005964:	40007000 	.word	0x40007000

08005968 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005968:	2800      	cmp	r0, #0
 800596a:	f000 81bd 	beq.w	8005ce8 <HAL_RCC_OscConfig+0x380>
{
 800596e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005972:	6803      	ldr	r3, [r0, #0]
 8005974:	07d9      	lsls	r1, r3, #31
{
 8005976:	b082      	sub	sp, #8
 8005978:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800597a:	d512      	bpl.n	80059a2 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800597c:	49a6      	ldr	r1, [pc, #664]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 800597e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005980:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005982:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005986:	2a0c      	cmp	r2, #12
 8005988:	f000 80d0 	beq.w	8005b2c <HAL_RCC_OscConfig+0x1c4>
 800598c:	2a08      	cmp	r2, #8
 800598e:	f040 80d2 	bne.w	8005b36 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005992:	4aa1      	ldr	r2, [pc, #644]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005994:	6812      	ldr	r2, [r2, #0]
 8005996:	0392      	lsls	r2, r2, #14
 8005998:	d503      	bpl.n	80059a2 <HAL_RCC_OscConfig+0x3a>
 800599a:	6862      	ldr	r2, [r4, #4]
 800599c:	2a00      	cmp	r2, #0
 800599e:	f000 8137 	beq.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80059a2:	079a      	lsls	r2, r3, #30
 80059a4:	d522      	bpl.n	80059ec <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059a6:	4a9c      	ldr	r2, [pc, #624]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 80059a8:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80059aa:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80059ac:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	f000 80f8 	beq.w	8005ba6 <HAL_RCC_OscConfig+0x23e>
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	f040 80fa 	bne.w	8005bb0 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80059bc:	4b96      	ldr	r3, [pc, #600]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	055b      	lsls	r3, r3, #21
 80059c2:	d503      	bpl.n	80059cc <HAL_RCC_OscConfig+0x64>
 80059c4:	68e3      	ldr	r3, [r4, #12]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8122 	beq.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	4a92      	ldr	r2, [pc, #584]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 80059ce:	6920      	ldr	r0, [r4, #16]
 80059d0:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059d2:	4992      	ldr	r1, [pc, #584]	@ (8005c1c <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059d4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80059d8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80059dc:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80059de:	6808      	ldr	r0, [r1, #0]
 80059e0:	f7fe f810 	bl	8003a04 <HAL_InitTick>
 80059e4:	2800      	cmp	r0, #0
 80059e6:	f040 8113 	bne.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ea:	6823      	ldr	r3, [r4, #0]
 80059ec:	071a      	lsls	r2, r3, #28
 80059ee:	d519      	bpl.n	8005a24 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059f0:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80059f2:	4d89      	ldr	r5, [pc, #548]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	f000 80c2 	beq.w	8005b7e <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80059fa:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80059fe:	f043 0301 	orr.w	r3, r3, #1
 8005a02:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a06:	f7fe f847 	bl	8003a98 <HAL_GetTick>
 8005a0a:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a0c:	e005      	b.n	8005a1a <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005a0e:	f7fe f843 	bl	8003a98 <HAL_GetTick>
 8005a12:	1b80      	subs	r0, r0, r6
 8005a14:	2802      	cmp	r0, #2
 8005a16:	f200 8117 	bhi.w	8005c48 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005a1a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005a1e:	079b      	lsls	r3, r3, #30
 8005a20:	d5f5      	bpl.n	8005a0e <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a22:	6823      	ldr	r3, [r4, #0]
 8005a24:	075d      	lsls	r5, r3, #29
 8005a26:	d541      	bpl.n	8005aac <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a28:	4b7b      	ldr	r3, [pc, #492]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005a2a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a2c:	00d0      	lsls	r0, r2, #3
 8005a2e:	f100 810f 	bmi.w	8005c50 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005a32:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005a34:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8005a38:	659a      	str	r2, [r3, #88]	@ 0x58
 8005a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a40:	9301      	str	r3, [sp, #4]
 8005a42:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005a44:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a46:	4e76      	ldr	r6, [pc, #472]	@ (8005c20 <HAL_RCC_OscConfig+0x2b8>)
 8005a48:	6833      	ldr	r3, [r6, #0]
 8005a4a:	05d9      	lsls	r1, r3, #23
 8005a4c:	f140 812e 	bpl.w	8005cac <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a50:	68a3      	ldr	r3, [r4, #8]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	f000 80fe 	beq.w	8005c54 <HAL_RCC_OscConfig+0x2ec>
 8005a58:	2b05      	cmp	r3, #5
 8005a5a:	f000 8184 	beq.w	8005d66 <HAL_RCC_OscConfig+0x3fe>
 8005a5e:	4e6e      	ldr	r6, [pc, #440]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005a60:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005a64:	f022 0201 	bic.w	r2, r2, #1
 8005a68:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8005a6c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8005a70:	f022 0204 	bic.w	r2, r2, #4
 8005a74:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	f040 80f2 	bne.w	8005c62 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7e:	f7fe f80b 	bl	8003a98 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a82:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005a86:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a88:	e005      	b.n	8005a96 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a8a:	f7fe f805 	bl	8003a98 <HAL_GetTick>
 8005a8e:	1bc0      	subs	r0, r0, r7
 8005a90:	4540      	cmp	r0, r8
 8005a92:	f200 80d9 	bhi.w	8005c48 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a96:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8005a9a:	0799      	lsls	r1, r3, #30
 8005a9c:	d4f5      	bmi.n	8005a8a <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005a9e:	b125      	cbz	r5, 8005aaa <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aa0:	4a5d      	ldr	r2, [pc, #372]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005aa2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8005aa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005aa8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	069a      	lsls	r2, r3, #26
 8005aae:	d518      	bpl.n	8005ae2 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ab0:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005ab2:	4d59      	ldr	r5, [pc, #356]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	f000 80e5 	beq.w	8005c84 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8005aba:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005abe:	f043 0301 	orr.w	r3, r3, #1
 8005ac2:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ac6:	f7fd ffe7 	bl	8003a98 <HAL_GetTick>
 8005aca:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005acc:	e005      	b.n	8005ada <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005ace:	f7fd ffe3 	bl	8003a98 <HAL_GetTick>
 8005ad2:	1b80      	subs	r0, r0, r6
 8005ad4:	2802      	cmp	r0, #2
 8005ad6:	f200 80b7 	bhi.w	8005c48 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005ada:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005ade:	079b      	lsls	r3, r3, #30
 8005ae0:	d5f5      	bpl.n	8005ace <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ae2:	69e3      	ldr	r3, [r4, #28]
 8005ae4:	b1f3      	cbz	r3, 8005b24 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005ae6:	4d4c      	ldr	r5, [pc, #304]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005ae8:	68aa      	ldr	r2, [r5, #8]
 8005aea:	f002 020c 	and.w	r2, r2, #12
 8005aee:	2a0c      	cmp	r2, #12
 8005af0:	f000 8147 	beq.w	8005d82 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005af4:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005af6:	682b      	ldr	r3, [r5, #0]
 8005af8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005afc:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005afe:	f000 80f5 	beq.w	8005cec <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b02:	f7fd ffc9 	bl	8003a98 <HAL_GetTick>
 8005b06:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b08:	e005      	b.n	8005b16 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b0a:	f7fd ffc5 	bl	8003a98 <HAL_GetTick>
 8005b0e:	1b00      	subs	r0, r0, r4
 8005b10:	2802      	cmp	r0, #2
 8005b12:	f200 8099 	bhi.w	8005c48 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b16:	682b      	ldr	r3, [r5, #0]
 8005b18:	019b      	lsls	r3, r3, #6
 8005b1a:	d4f6      	bmi.n	8005b0a <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005b1c:	68ea      	ldr	r2, [r5, #12]
 8005b1e:	4b41      	ldr	r3, [pc, #260]	@ (8005c24 <HAL_RCC_OscConfig+0x2bc>)
 8005b20:	4013      	ands	r3, r2
 8005b22:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8005b24:	2000      	movs	r0, #0
}
 8005b26:	b002      	add	sp, #8
 8005b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b2c:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005b30:	2903      	cmp	r1, #3
 8005b32:	f43f af2e 	beq.w	8005992 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005b36:	6863      	ldr	r3, [r4, #4]
 8005b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b3c:	d055      	beq.n	8005bea <HAL_RCC_OscConfig+0x282>
 8005b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b42:	f000 80c4 	beq.w	8005cce <HAL_RCC_OscConfig+0x366>
 8005b46:	4d34      	ldr	r5, [pc, #208]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005b48:	682a      	ldr	r2, [r5, #0]
 8005b4a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005b4e:	602a      	str	r2, [r5, #0]
 8005b50:	682a      	ldr	r2, [r5, #0]
 8005b52:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005b56:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d14b      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8005b5c:	f7fd ff9c 	bl	8003a98 <HAL_GetTick>
 8005b60:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b62:	e004      	b.n	8005b6e <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005b64:	f7fd ff98 	bl	8003a98 <HAL_GetTick>
 8005b68:	1b80      	subs	r0, r0, r6
 8005b6a:	2864      	cmp	r0, #100	@ 0x64
 8005b6c:	d86c      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b6e:	682b      	ldr	r3, [r5, #0]
 8005b70:	0399      	lsls	r1, r3, #14
 8005b72:	d4f7      	bmi.n	8005b64 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b74:	6823      	ldr	r3, [r4, #0]
 8005b76:	079a      	lsls	r2, r3, #30
 8005b78:	f57f af38 	bpl.w	80059ec <HAL_RCC_OscConfig+0x84>
 8005b7c:	e713      	b.n	80059a6 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8005b7e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005b82:	f023 0301 	bic.w	r3, r3, #1
 8005b86:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8005b8a:	f7fd ff85 	bl	8003a98 <HAL_GetTick>
 8005b8e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b90:	e004      	b.n	8005b9c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005b92:	f7fd ff81 	bl	8003a98 <HAL_GetTick>
 8005b96:	1b80      	subs	r0, r0, r6
 8005b98:	2802      	cmp	r0, #2
 8005b9a:	d855      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005b9c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8005ba0:	079f      	lsls	r7, r3, #30
 8005ba2:	d4f6      	bmi.n	8005b92 <HAL_RCC_OscConfig+0x22a>
 8005ba4:	e73d      	b.n	8005a22 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ba6:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005baa:	2a02      	cmp	r2, #2
 8005bac:	f43f af06 	beq.w	80059bc <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bb0:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005bb2:	4d19      	ldr	r5, [pc, #100]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d037      	beq.n	8005c28 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8005bb8:	682b      	ldr	r3, [r5, #0]
 8005bba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bbe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005bc0:	f7fd ff6a 	bl	8003a98 <HAL_GetTick>
 8005bc4:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bc6:	e004      	b.n	8005bd2 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bc8:	f7fd ff66 	bl	8003a98 <HAL_GetTick>
 8005bcc:	1b80      	subs	r0, r0, r6
 8005bce:	2802      	cmp	r0, #2
 8005bd0:	d83a      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bd2:	682b      	ldr	r3, [r5, #0]
 8005bd4:	055f      	lsls	r7, r3, #21
 8005bd6:	d5f7      	bpl.n	8005bc8 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd8:	686b      	ldr	r3, [r5, #4]
 8005bda:	6922      	ldr	r2, [r4, #16]
 8005bdc:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8005be0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005be4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005be6:	6823      	ldr	r3, [r4, #0]
 8005be8:	e700      	b.n	80059ec <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bea:	4a0b      	ldr	r2, [pc, #44]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
 8005bec:	6813      	ldr	r3, [r2, #0]
 8005bee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005bf2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005bf4:	f7fd ff50 	bl	8003a98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bf8:	4e07      	ldr	r6, [pc, #28]	@ (8005c18 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8005bfa:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bfc:	e004      	b.n	8005c08 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005bfe:	f7fd ff4b 	bl	8003a98 <HAL_GetTick>
 8005c02:	1b40      	subs	r0, r0, r5
 8005c04:	2864      	cmp	r0, #100	@ 0x64
 8005c06:	d81f      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	039f      	lsls	r7, r3, #14
 8005c0c:	d5f7      	bpl.n	8005bfe <HAL_RCC_OscConfig+0x296>
 8005c0e:	e7b1      	b.n	8005b74 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8005c10:	2001      	movs	r0, #1
}
 8005c12:	b002      	add	sp, #8
 8005c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	200003b0 	.word	0x200003b0
 8005c20:	40007000 	.word	0x40007000
 8005c24:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8005c28:	682b      	ldr	r3, [r5, #0]
 8005c2a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005c2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8005c30:	f7fd ff32 	bl	8003a98 <HAL_GetTick>
 8005c34:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	0559      	lsls	r1, r3, #21
 8005c3a:	f57f aed6 	bpl.w	80059ea <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005c3e:	f7fd ff2b 	bl	8003a98 <HAL_GetTick>
 8005c42:	1b80      	subs	r0, r0, r6
 8005c44:	2802      	cmp	r0, #2
 8005c46:	d9f6      	bls.n	8005c36 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8005c48:	2003      	movs	r0, #3
}
 8005c4a:	b002      	add	sp, #8
 8005c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8005c50:	2500      	movs	r5, #0
 8005c52:	e6f8      	b.n	8005a46 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c54:	4a65      	ldr	r2, [pc, #404]	@ (8005dec <HAL_RCC_OscConfig+0x484>)
 8005c56:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8005c5a:	f043 0301 	orr.w	r3, r3, #1
 8005c5e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8005c62:	f7fd ff19 	bl	8003a98 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c66:	4f61      	ldr	r7, [pc, #388]	@ (8005dec <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8005c68:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c6a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c6e:	e004      	b.n	8005c7a <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c70:	f7fd ff12 	bl	8003a98 <HAL_GetTick>
 8005c74:	1b80      	subs	r0, r0, r6
 8005c76:	4540      	cmp	r0, r8
 8005c78:	d8e6      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c7e:	079b      	lsls	r3, r3, #30
 8005c80:	d5f6      	bpl.n	8005c70 <HAL_RCC_OscConfig+0x308>
 8005c82:	e70c      	b.n	8005a9e <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8005c84:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005c88:	f023 0301 	bic.w	r3, r3, #1
 8005c8c:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8005c90:	f7fd ff02 	bl	8003a98 <HAL_GetTick>
 8005c94:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005c96:	e004      	b.n	8005ca2 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005c98:	f7fd fefe 	bl	8003a98 <HAL_GetTick>
 8005c9c:	1b80      	subs	r0, r0, r6
 8005c9e:	2802      	cmp	r0, #2
 8005ca0:	d8d2      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ca2:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8005ca6:	079f      	lsls	r7, r3, #30
 8005ca8:	d4f6      	bmi.n	8005c98 <HAL_RCC_OscConfig+0x330>
 8005caa:	e71a      	b.n	8005ae2 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cac:	6833      	ldr	r3, [r6, #0]
 8005cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cb2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005cb4:	f7fd fef0 	bl	8003a98 <HAL_GetTick>
 8005cb8:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005cba:	6833      	ldr	r3, [r6, #0]
 8005cbc:	05da      	lsls	r2, r3, #23
 8005cbe:	f53f aec7 	bmi.w	8005a50 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cc2:	f7fd fee9 	bl	8003a98 <HAL_GetTick>
 8005cc6:	1bc0      	subs	r0, r0, r7
 8005cc8:	2802      	cmp	r0, #2
 8005cca:	d9f6      	bls.n	8005cba <HAL_RCC_OscConfig+0x352>
 8005ccc:	e7bc      	b.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cce:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005cd2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005ce4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ce6:	e785      	b.n	8005bf4 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8005ce8:	2001      	movs	r0, #1
}
 8005cea:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8005cec:	f7fd fed4 	bl	8003a98 <HAL_GetTick>
 8005cf0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cf2:	e004      	b.n	8005cfe <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005cf4:	f7fd fed0 	bl	8003a98 <HAL_GetTick>
 8005cf8:	1b80      	subs	r0, r0, r6
 8005cfa:	2802      	cmp	r0, #2
 8005cfc:	d8a4      	bhi.n	8005c48 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cfe:	682b      	ldr	r3, [r5, #0]
 8005d00:	0199      	lsls	r1, r3, #6
 8005d02:	d4f7      	bmi.n	8005cf4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005d04:	68e9      	ldr	r1, [r5, #12]
 8005d06:	4b3a      	ldr	r3, [pc, #232]	@ (8005df0 <HAL_RCC_OscConfig+0x488>)
 8005d08:	6a22      	ldr	r2, [r4, #32]
 8005d0a:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8005d14:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8005d18:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8005d1c:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8005d20:	3801      	subs	r0, #1
 8005d22:	0849      	lsrs	r1, r1, #1
 8005d24:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8005d28:	3901      	subs	r1, #1
 8005d2a:	0852      	lsrs	r2, r2, #1
 8005d2c:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8005d30:	3a01      	subs	r2, #1
 8005d32:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8005d36:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8005d38:	682b      	ldr	r3, [r5, #0]
 8005d3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d3e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005d40:	68eb      	ldr	r3, [r5, #12]
 8005d42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d46:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8005d48:	f7fd fea6 	bl	8003a98 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d4c:	4d27      	ldr	r5, [pc, #156]	@ (8005dec <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8005d4e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d50:	e005      	b.n	8005d5e <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d52:	f7fd fea1 	bl	8003a98 <HAL_GetTick>
 8005d56:	1b00      	subs	r0, r0, r4
 8005d58:	2802      	cmp	r0, #2
 8005d5a:	f63f af75 	bhi.w	8005c48 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	019a      	lsls	r2, r3, #6
 8005d62:	d5f6      	bpl.n	8005d52 <HAL_RCC_OscConfig+0x3ea>
 8005d64:	e6de      	b.n	8005b24 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d66:	4b21      	ldr	r3, [pc, #132]	@ (8005dec <HAL_RCC_OscConfig+0x484>)
 8005d68:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d6c:	f042 0204 	orr.w	r2, r2, #4
 8005d70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8005d74:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d80:	e76f      	b.n	8005c62 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	f43f af44 	beq.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8005d88:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d8a:	6a22      	ldr	r2, [r4, #32]
 8005d8c:	f003 0103 	and.w	r1, r3, #3
 8005d90:	4291      	cmp	r1, r2
 8005d92:	f47f af3d 	bne.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005d96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8005d98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005d9c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8005da2:	f47f af35 	bne.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005da6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005da8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005dac:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005db0:	f47f af2e 	bne.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005db4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005db6:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005dba:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8005dbe:	f47f af27 	bne.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dc2:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8005dc4:	0852      	lsrs	r2, r2, #1
 8005dc6:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8005dca:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005dcc:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8005dd0:	f47f af1e 	bne.w	8005c10 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005dd4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8005dd6:	0852      	lsrs	r2, r2, #1
 8005dd8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8005ddc:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005dde:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8005de2:	bf14      	ite	ne
 8005de4:	2001      	movne	r0, #1
 8005de6:	2000      	moveq	r0, #0
 8005de8:	e69d      	b.n	8005b26 <HAL_RCC_OscConfig+0x1be>
 8005dea:	bf00      	nop
 8005dec:	40021000 	.word	0x40021000
 8005df0:	019f800c 	.word	0x019f800c

08005df4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005df4:	4b18      	ldr	r3, [pc, #96]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x64>)
 8005df6:	689a      	ldr	r2, [r3, #8]
 8005df8:	f002 020c 	and.w	r2, r2, #12
 8005dfc:	2a04      	cmp	r2, #4
 8005dfe:	d026      	beq.n	8005e4e <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e00:	689a      	ldr	r2, [r3, #8]
 8005e02:	f002 020c 	and.w	r2, r2, #12
 8005e06:	2a08      	cmp	r2, #8
 8005e08:	d023      	beq.n	8005e52 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	f002 020c 	and.w	r2, r2, #12
 8005e10:	2a0c      	cmp	r2, #12
 8005e12:	d001      	beq.n	8005e18 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8005e14:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8005e16:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e18:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e1a:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e1c:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e1e:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8005e22:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e24:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e28:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e2c:	bf0c      	ite	eq
 8005e2e:	4b0b      	ldreq	r3, [pc, #44]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e30:	4b0b      	ldrne	r3, [pc, #44]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e32:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e34:	fbb3 f3f2 	udiv	r3, r3, r2
 8005e38:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e3c:	4b06      	ldr	r3, [pc, #24]	@ (8005e58 <HAL_RCC_GetSysClockFreq+0x64>)
 8005e3e:	68db      	ldr	r3, [r3, #12]
 8005e40:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005e44:	3301      	adds	r3, #1
 8005e46:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8005e48:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8005e4c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005e4e:	4804      	ldr	r0, [pc, #16]	@ (8005e60 <HAL_RCC_GetSysClockFreq+0x6c>)
 8005e50:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8005e52:	4802      	ldr	r0, [pc, #8]	@ (8005e5c <HAL_RCC_GetSysClockFreq+0x68>)
 8005e54:	4770      	bx	lr
 8005e56:	bf00      	nop
 8005e58:	40021000 	.word	0x40021000
 8005e5c:	007a1200 	.word	0x007a1200
 8005e60:	00f42400 	.word	0x00f42400

08005e64 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f000 80ee 	beq.w	8006046 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e6a:	4a78      	ldr	r2, [pc, #480]	@ (800604c <HAL_RCC_ClockConfig+0x1e8>)
{
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	f003 030f 	and.w	r3, r3, #15
 8005e76:	428b      	cmp	r3, r1
 8005e78:	460d      	mov	r5, r1
 8005e7a:	4604      	mov	r4, r0
 8005e7c:	d20c      	bcs.n	8005e98 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e7e:	6813      	ldr	r3, [r2, #0]
 8005e80:	f023 030f 	bic.w	r3, r3, #15
 8005e84:	430b      	orrs	r3, r1
 8005e86:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e88:	6813      	ldr	r3, [r2, #0]
 8005e8a:	f003 030f 	and.w	r3, r3, #15
 8005e8e:	428b      	cmp	r3, r1
 8005e90:	d002      	beq.n	8005e98 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8005e92:	2001      	movs	r0, #1
}
 8005e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005e98:	6823      	ldr	r3, [r4, #0]
 8005e9a:	07df      	lsls	r7, r3, #31
 8005e9c:	d569      	bpl.n	8005f72 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005e9e:	6867      	ldr	r7, [r4, #4]
 8005ea0:	2f03      	cmp	r7, #3
 8005ea2:	f000 80a0 	beq.w	8005fe6 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ea6:	4b6a      	ldr	r3, [pc, #424]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ea8:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eaa:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005eac:	f000 8097 	beq.w	8005fde <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005eb0:	055b      	lsls	r3, r3, #21
 8005eb2:	d5ee      	bpl.n	8005e92 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005eb4:	f7ff ff9e 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8005eb8:	4b66      	ldr	r3, [pc, #408]	@ (8006054 <HAL_RCC_ClockConfig+0x1f0>)
 8005eba:	4298      	cmp	r0, r3
 8005ebc:	f240 80c0 	bls.w	8006040 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005ec0:	4a63      	ldr	r2, [pc, #396]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005ec2:	6893      	ldr	r3, [r2, #8]
 8005ec4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ecc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005ece:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ed2:	4e5f      	ldr	r6, [pc, #380]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005ed4:	68b3      	ldr	r3, [r6, #8]
 8005ed6:	f023 0303 	bic.w	r3, r3, #3
 8005eda:	433b      	orrs	r3, r7
 8005edc:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005ede:	f7fd fddb 	bl	8003a98 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ee2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005ee6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ee8:	e004      	b.n	8005ef4 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005eea:	f7fd fdd5 	bl	8003a98 <HAL_GetTick>
 8005eee:	1bc0      	subs	r0, r0, r7
 8005ef0:	4540      	cmp	r0, r8
 8005ef2:	d871      	bhi.n	8005fd8 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ef4:	68b3      	ldr	r3, [r6, #8]
 8005ef6:	6862      	ldr	r2, [r4, #4]
 8005ef8:	f003 030c 	and.w	r3, r3, #12
 8005efc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005f00:	d1f3      	bne.n	8005eea <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	079f      	lsls	r7, r3, #30
 8005f06:	d436      	bmi.n	8005f76 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8005f08:	f1b9 0f00 	cmp.w	r9, #0
 8005f0c:	d003      	beq.n	8005f16 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005f0e:	68b3      	ldr	r3, [r6, #8]
 8005f10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005f14:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f16:	4e4d      	ldr	r6, [pc, #308]	@ (800604c <HAL_RCC_ClockConfig+0x1e8>)
 8005f18:	6833      	ldr	r3, [r6, #0]
 8005f1a:	f003 030f 	and.w	r3, r3, #15
 8005f1e:	42ab      	cmp	r3, r5
 8005f20:	d846      	bhi.n	8005fb0 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f22:	6823      	ldr	r3, [r4, #0]
 8005f24:	075a      	lsls	r2, r3, #29
 8005f26:	d506      	bpl.n	8005f36 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005f28:	4949      	ldr	r1, [pc, #292]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005f2a:	68e0      	ldr	r0, [r4, #12]
 8005f2c:	688a      	ldr	r2, [r1, #8]
 8005f2e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f32:	4302      	orrs	r2, r0
 8005f34:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f36:	071b      	lsls	r3, r3, #28
 8005f38:	d507      	bpl.n	8005f4a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005f3a:	4a45      	ldr	r2, [pc, #276]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005f3c:	6921      	ldr	r1, [r4, #16]
 8005f3e:	6893      	ldr	r3, [r2, #8]
 8005f40:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8005f44:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005f48:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f4a:	f7ff ff53 	bl	8005df4 <HAL_RCC_GetSysClockFreq>
 8005f4e:	4a40      	ldr	r2, [pc, #256]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005f50:	4c41      	ldr	r4, [pc, #260]	@ (8006058 <HAL_RCC_ClockConfig+0x1f4>)
 8005f52:	6892      	ldr	r2, [r2, #8]
 8005f54:	4941      	ldr	r1, [pc, #260]	@ (800605c <HAL_RCC_ClockConfig+0x1f8>)
 8005f56:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8005f5e:	4840      	ldr	r0, [pc, #256]	@ (8006060 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005f60:	f002 021f 	and.w	r2, r2, #31
 8005f64:	40d3      	lsrs	r3, r2
 8005f66:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8005f68:	6800      	ldr	r0, [r0, #0]
}
 8005f6a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8005f6e:	f7fd bd49 	b.w	8003a04 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f72:	079e      	lsls	r6, r3, #30
 8005f74:	d5cf      	bpl.n	8005f16 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f76:	0758      	lsls	r0, r3, #29
 8005f78:	d504      	bpl.n	8005f84 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f7a:	4935      	ldr	r1, [pc, #212]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005f7c:	688a      	ldr	r2, [r1, #8]
 8005f7e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8005f82:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f84:	0719      	lsls	r1, r3, #28
 8005f86:	d506      	bpl.n	8005f96 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005f88:	4a31      	ldr	r2, [pc, #196]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005f8a:	6893      	ldr	r3, [r2, #8]
 8005f8c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f90:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005f94:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f96:	4a2e      	ldr	r2, [pc, #184]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005f98:	68a1      	ldr	r1, [r4, #8]
 8005f9a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005f9c:	4e2b      	ldr	r6, [pc, #172]	@ (800604c <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f9e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005fa2:	430b      	orrs	r3, r1
 8005fa4:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005fa6:	6833      	ldr	r3, [r6, #0]
 8005fa8:	f003 030f 	and.w	r3, r3, #15
 8005fac:	42ab      	cmp	r3, r5
 8005fae:	d9b8      	bls.n	8005f22 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fb0:	6833      	ldr	r3, [r6, #0]
 8005fb2:	f023 030f 	bic.w	r3, r3, #15
 8005fb6:	432b      	orrs	r3, r5
 8005fb8:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8005fba:	f7fd fd6d 	bl	8003a98 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fbe:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8005fc2:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fc4:	6833      	ldr	r3, [r6, #0]
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	42ab      	cmp	r3, r5
 8005fcc:	d0a9      	beq.n	8005f22 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fce:	f7fd fd63 	bl	8003a98 <HAL_GetTick>
 8005fd2:	1bc0      	subs	r0, r0, r7
 8005fd4:	4540      	cmp	r0, r8
 8005fd6:	d9f5      	bls.n	8005fc4 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8005fd8:	2003      	movs	r0, #3
}
 8005fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005fde:	039a      	lsls	r2, r3, #14
 8005fe0:	f53f af68 	bmi.w	8005eb4 <HAL_RCC_ClockConfig+0x50>
 8005fe4:	e755      	b.n	8005e92 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005fe6:	4a1a      	ldr	r2, [pc, #104]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
 8005fe8:	6811      	ldr	r1, [r2, #0]
 8005fea:	0188      	lsls	r0, r1, #6
 8005fec:	f57f af51 	bpl.w	8005e92 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ff0:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ff2:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ff4:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8005ff6:	4e17      	ldr	r6, [pc, #92]	@ (8006054 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005ff8:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8005ffc:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ffe:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006002:	bf0c      	ite	eq
 8006004:	4817      	ldreq	r0, [pc, #92]	@ (8006064 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006006:	4818      	ldrne	r0, [pc, #96]	@ (8006068 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006008:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800600a:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800600e:	4810      	ldr	r0, [pc, #64]	@ (8006050 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006010:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8006014:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006018:	68c1      	ldr	r1, [r0, #12]
 800601a:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800601e:	3101      	adds	r1, #1
 8006020:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8006022:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8006026:	42b2      	cmp	r2, r6
 8006028:	d90a      	bls.n	8006040 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800602a:	6882      	ldr	r2, [r0, #8]
 800602c:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8006030:	f43f af46 	beq.w	8005ec0 <HAL_RCC_ClockConfig+0x5c>
 8006034:	0799      	lsls	r1, r3, #30
 8006036:	d503      	bpl.n	8006040 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006038:	68a3      	ldr	r3, [r4, #8]
 800603a:	2b00      	cmp	r3, #0
 800603c:	f43f af40 	beq.w	8005ec0 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8006040:	f04f 0900 	mov.w	r9, #0
 8006044:	e745      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8006046:	2001      	movs	r0, #1
}
 8006048:	4770      	bx	lr
 800604a:	bf00      	nop
 800604c:	40022000 	.word	0x40022000
 8006050:	40021000 	.word	0x40021000
 8006054:	04c4b400 	.word	0x04c4b400
 8006058:	08008d20 	.word	0x08008d20
 800605c:	200003a8 	.word	0x200003a8
 8006060:	200003b0 	.word	0x200003b0
 8006064:	007a1200 	.word	0x007a1200
 8006068:	00f42400 	.word	0x00f42400

0800606c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 800606c:	4b01      	ldr	r3, [pc, #4]	@ (8006074 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	200003a8 	.word	0x200003a8

08006078 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8006078:	4a02      	ldr	r2, [pc, #8]	@ (8006084 <HAL_RCC_EnableCSS+0xc>)
 800607a:	6813      	ldr	r3, [r2, #0]
 800607c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006080:	6013      	str	r3, [r2, #0]
}
 8006082:	4770      	bx	lr
 8006084:	40021000 	.word	0x40021000

08006088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800608c:	6803      	ldr	r3, [r0, #0]
{
 800608e:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006090:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8006094:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006096:	d041      	beq.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006098:	4ba0      	ldr	r3, [pc, #640]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800609a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800609c:	00d5      	lsls	r5, r2, #3
 800609e:	f140 80f7 	bpl.w	8006290 <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 80060a2:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060a4:	4d9e      	ldr	r5, [pc, #632]	@ (8006320 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80060a6:	682b      	ldr	r3, [r5, #0]
 80060a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060ac:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ae:	f7fd fcf3 	bl	8003a98 <HAL_GetTick>
 80060b2:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060b4:	e004      	b.n	80060c0 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b6:	f7fd fcef 	bl	8003a98 <HAL_GetTick>
 80060ba:	1b83      	subs	r3, r0, r6
 80060bc:	2b02      	cmp	r3, #2
 80060be:	d828      	bhi.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80060c0:	682b      	ldr	r3, [r5, #0]
 80060c2:	05d8      	lsls	r0, r3, #23
 80060c4:	d5f7      	bpl.n	80060b6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060c6:	4d95      	ldr	r5, [pc, #596]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060c8:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060ca:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060ce:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 80060d2:	f000 8119 	beq.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>
 80060d6:	4293      	cmp	r3, r2
 80060d8:	f000 8116 	beq.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060dc:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060e0:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80060e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060e8:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060ec:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 80060f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060f4:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f8:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060fc:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 80060fe:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006102:	f140 8101 	bpl.w	8006308 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006106:	f7fd fcc7 	bl	8003a98 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800610a:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800610e:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006110:	e0f5      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006112:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006114:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8006116:	2f00      	cmp	r7, #0
 8006118:	f040 80c5 	bne.w	80062a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800611c:	07de      	lsls	r6, r3, #31
 800611e:	d508      	bpl.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006120:	497e      	ldr	r1, [pc, #504]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006122:	6865      	ldr	r5, [r4, #4]
 8006124:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006128:	f022 0203 	bic.w	r2, r2, #3
 800612c:	432a      	orrs	r2, r5
 800612e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006132:	079d      	lsls	r5, r3, #30
 8006134:	d508      	bpl.n	8006148 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006136:	4979      	ldr	r1, [pc, #484]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006138:	68a5      	ldr	r5, [r4, #8]
 800613a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800613e:	f022 020c 	bic.w	r2, r2, #12
 8006142:	432a      	orrs	r2, r5
 8006144:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006148:	0759      	lsls	r1, r3, #29
 800614a:	d508      	bpl.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800614c:	4973      	ldr	r1, [pc, #460]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800614e:	68e5      	ldr	r5, [r4, #12]
 8006150:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006154:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8006158:	432a      	orrs	r2, r5
 800615a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800615e:	071a      	lsls	r2, r3, #28
 8006160:	d508      	bpl.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006162:	496e      	ldr	r1, [pc, #440]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006164:	6925      	ldr	r5, [r4, #16]
 8006166:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800616a:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 800616e:	432a      	orrs	r2, r5
 8006170:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006174:	069f      	lsls	r7, r3, #26
 8006176:	d508      	bpl.n	800618a <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006178:	4968      	ldr	r1, [pc, #416]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800617a:	6965      	ldr	r5, [r4, #20]
 800617c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006180:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8006184:	432a      	orrs	r2, r5
 8006186:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800618a:	065e      	lsls	r6, r3, #25
 800618c:	d508      	bpl.n	80061a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800618e:	4963      	ldr	r1, [pc, #396]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006190:	69a5      	ldr	r5, [r4, #24]
 8006192:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006196:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800619a:	432a      	orrs	r2, r5
 800619c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061a0:	061d      	lsls	r5, r3, #24
 80061a2:	d508      	bpl.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061a4:	495d      	ldr	r1, [pc, #372]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80061a6:	69e5      	ldr	r5, [r4, #28]
 80061a8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061ac:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80061b0:	432a      	orrs	r2, r5
 80061b2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061b6:	05d9      	lsls	r1, r3, #23
 80061b8:	d508      	bpl.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061ba:	4958      	ldr	r1, [pc, #352]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80061bc:	6a25      	ldr	r5, [r4, #32]
 80061be:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061c2:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 80061c6:	432a      	orrs	r2, r5
 80061c8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80061cc:	059a      	lsls	r2, r3, #22
 80061ce:	d508      	bpl.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80061d0:	4952      	ldr	r1, [pc, #328]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80061d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80061d4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061d8:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 80061dc:	432a      	orrs	r2, r5
 80061de:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80061e2:	055f      	lsls	r7, r3, #21
 80061e4:	d50b      	bpl.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061e6:	494d      	ldr	r1, [pc, #308]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80061e8:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80061ea:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80061ee:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 80061f2:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80061f4:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80061f8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80061fc:	d059      	beq.n	80062b2 <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80061fe:	051e      	lsls	r6, r3, #20
 8006200:	d50b      	bpl.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006202:	4946      	ldr	r1, [pc, #280]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006204:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8006206:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800620a:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800620e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006210:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006214:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006218:	d050      	beq.n	80062bc <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800621a:	04dd      	lsls	r5, r3, #19
 800621c:	d50b      	bpl.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800621e:	493f      	ldr	r1, [pc, #252]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006220:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8006222:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006226:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800622a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800622c:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006230:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006234:	d047      	beq.n	80062c6 <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006236:	0499      	lsls	r1, r3, #18
 8006238:	d50b      	bpl.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800623a:	4938      	ldr	r1, [pc, #224]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800623c:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 800623e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8006242:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006246:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006248:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800624c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006250:	d03e      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006252:	045a      	lsls	r2, r3, #17
 8006254:	d50b      	bpl.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006256:	4931      	ldr	r1, [pc, #196]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006258:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800625a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800625e:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8006262:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006264:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006268:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800626c:	d035      	beq.n	80062da <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800626e:	041b      	lsls	r3, r3, #16
 8006270:	d50b      	bpl.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006272:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8006274:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006276:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800627a:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800627e:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006280:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006284:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006288:	d02c      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 800628a:	b002      	add	sp, #8
 800628c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8006290:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8006292:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8006296:	659a      	str	r2, [r3, #88]	@ 0x58
 8006298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800629a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800629e:	9301      	str	r3, [sp, #4]
 80062a0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80062a2:	2701      	movs	r7, #1
 80062a4:	e6fe      	b.n	80060a4 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80062a6:	491d      	ldr	r1, [pc, #116]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80062a8:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80062aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80062ae:	658a      	str	r2, [r1, #88]	@ 0x58
 80062b0:	e734      	b.n	800611c <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062b2:	68ca      	ldr	r2, [r1, #12]
 80062b4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80062b8:	60ca      	str	r2, [r1, #12]
 80062ba:	e7a0      	b.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062bc:	68ca      	ldr	r2, [r1, #12]
 80062be:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80062c2:	60ca      	str	r2, [r1, #12]
 80062c4:	e7a9      	b.n	800621a <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c6:	68ca      	ldr	r2, [r1, #12]
 80062c8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80062cc:	60ca      	str	r2, [r1, #12]
 80062ce:	e7b2      	b.n	8006236 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062d0:	68ca      	ldr	r2, [r1, #12]
 80062d2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80062d6:	60ca      	str	r2, [r1, #12]
 80062d8:	e7bb      	b.n	8006252 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062da:	68ca      	ldr	r2, [r1, #12]
 80062dc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80062e0:	60ca      	str	r2, [r1, #12]
 80062e2:	e7c4      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062e4:	68d3      	ldr	r3, [r2, #12]
 80062e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062ea:	60d3      	str	r3, [r2, #12]
}
 80062ec:	b002      	add	sp, #8
 80062ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062f2:	f7fd fbd1 	bl	8003a98 <HAL_GetTick>
 80062f6:	1b80      	subs	r0, r0, r6
 80062f8:	4540      	cmp	r0, r8
 80062fa:	f63f af0a 	bhi.w	8006112 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062fe:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8006302:	079b      	lsls	r3, r3, #30
 8006304:	d5f5      	bpl.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006306:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8006308:	4904      	ldr	r1, [pc, #16]	@ (800631c <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800630a:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800630e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006312:	4313      	orrs	r3, r2
 8006314:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006318:	2000      	movs	r0, #0
 800631a:	e6fb      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800631c:	40021000 	.word	0x40021000
 8006320:	40007000 	.word	0x40007000

08006324 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006324:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006326:	6a02      	ldr	r2, [r0, #32]
 8006328:	f022 0201 	bic.w	r2, r2, #1
{
 800632c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800632e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006330:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006332:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006334:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006336:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800633a:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800633e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006340:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8006342:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8006346:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006348:	4d13      	ldr	r5, [pc, #76]	@ (8006398 <TIM_OC1_SetConfig+0x74>)
 800634a:	42a8      	cmp	r0, r5
 800634c:	d00f      	beq.n	800636e <TIM_OC1_SetConfig+0x4a>
 800634e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006352:	42a8      	cmp	r0, r5
 8006354:	d00b      	beq.n	800636e <TIM_OC1_SetConfig+0x4a>
 8006356:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800635a:	42a8      	cmp	r0, r5
 800635c:	d007      	beq.n	800636e <TIM_OC1_SetConfig+0x4a>
 800635e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006362:	42a8      	cmp	r0, r5
 8006364:	d003      	beq.n	800636e <TIM_OC1_SetConfig+0x4a>
 8006366:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800636a:	42a8      	cmp	r0, r5
 800636c:	d10d      	bne.n	800638a <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800636e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8006370:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8006374:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006376:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800637a:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 800637e:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8006382:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8006386:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800638a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800638c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800638e:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8006390:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8006392:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8006394:	6203      	str	r3, [r0, #32]
}
 8006396:	4770      	bx	lr
 8006398:	40012c00 	.word	0x40012c00

0800639c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800639c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800639e:	6a02      	ldr	r2, [r0, #32]
 80063a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 80063a4:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063a6:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063a8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063aa:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063ac:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80063ae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80063b2:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80063b6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063b8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80063ba:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80063be:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80063c2:	4d14      	ldr	r5, [pc, #80]	@ (8006414 <TIM_OC3_SetConfig+0x78>)
 80063c4:	42a8      	cmp	r0, r5
 80063c6:	d00f      	beq.n	80063e8 <TIM_OC3_SetConfig+0x4c>
 80063c8:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80063cc:	42a8      	cmp	r0, r5
 80063ce:	d00b      	beq.n	80063e8 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063d0:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80063d4:	42a8      	cmp	r0, r5
 80063d6:	d00e      	beq.n	80063f6 <TIM_OC3_SetConfig+0x5a>
 80063d8:	4d0f      	ldr	r5, [pc, #60]	@ (8006418 <TIM_OC3_SetConfig+0x7c>)
 80063da:	42a8      	cmp	r0, r5
 80063dc:	d00b      	beq.n	80063f6 <TIM_OC3_SetConfig+0x5a>
 80063de:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80063e2:	42a8      	cmp	r0, r5
 80063e4:	d10f      	bne.n	8006406 <TIM_OC3_SetConfig+0x6a>
 80063e6:	e006      	b.n	80063f6 <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063e8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80063ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80063ee:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 80063f2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063f6:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80063fa:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80063fe:	ea46 0c05 	orr.w	ip, r6, r5
 8006402:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006406:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8006408:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800640a:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800640c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800640e:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8006410:	6203      	str	r3, [r0, #32]
}
 8006412:	4770      	bx	lr
 8006414:	40012c00 	.word	0x40012c00
 8006418:	40014400 	.word	0x40014400

0800641c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800641c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800641e:	6a02      	ldr	r2, [r0, #32]
 8006420:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8006424:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006426:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006428:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800642a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800642c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800642e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8006432:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006436:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800643a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800643c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006440:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006444:	4d14      	ldr	r5, [pc, #80]	@ (8006498 <TIM_OC4_SetConfig+0x7c>)
 8006446:	42a8      	cmp	r0, r5
 8006448:	d00f      	beq.n	800646a <TIM_OC4_SetConfig+0x4e>
 800644a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800644e:	42a8      	cmp	r0, r5
 8006450:	d00b      	beq.n	800646a <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006452:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8006456:	42a8      	cmp	r0, r5
 8006458:	d00e      	beq.n	8006478 <TIM_OC4_SetConfig+0x5c>
 800645a:	4d10      	ldr	r5, [pc, #64]	@ (800649c <TIM_OC4_SetConfig+0x80>)
 800645c:	42a8      	cmp	r0, r5
 800645e:	d00b      	beq.n	8006478 <TIM_OC4_SetConfig+0x5c>
 8006460:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006464:	42a8      	cmp	r0, r5
 8006466:	d10f      	bne.n	8006488 <TIM_OC4_SetConfig+0x6c>
 8006468:	e006      	b.n	8006478 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800646a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 800646c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006470:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8006474:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006478:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800647c:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006480:	ea46 0c05 	orr.w	ip, r6, r5
 8006484:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006488:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800648a:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800648c:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800648e:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8006490:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8006492:	6203      	str	r3, [r0, #32]
}
 8006494:	4770      	bx	lr
 8006496:	bf00      	nop
 8006498:	40012c00 	.word	0x40012c00
 800649c:	40014400 	.word	0x40014400

080064a0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80064a0:	2800      	cmp	r0, #0
 80064a2:	d075      	beq.n	8006590 <HAL_TIM_PWM_Init+0xf0>
{
 80064a4:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80064a6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80064aa:	4604      	mov	r4, r0
 80064ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d068      	beq.n	8006586 <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064b4:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064b6:	4e37      	ldr	r6, [pc, #220]	@ (8006594 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 80064b8:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ba:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064bc:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80064be:	2202      	movs	r2, #2
 80064c0:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c4:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80064c6:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064c8:	d04c      	beq.n	8006564 <HAL_TIM_PWM_Init+0xc4>
 80064ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ce:	d017      	beq.n	8006500 <HAL_TIM_PWM_Init+0x60>
 80064d0:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 80064d4:	42b3      	cmp	r3, r6
 80064d6:	d013      	beq.n	8006500 <HAL_TIM_PWM_Init+0x60>
 80064d8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80064dc:	42b3      	cmp	r3, r6
 80064de:	d00f      	beq.n	8006500 <HAL_TIM_PWM_Init+0x60>
 80064e0:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 80064e4:	42b3      	cmp	r3, r6
 80064e6:	d03d      	beq.n	8006564 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064e8:	4e2b      	ldr	r6, [pc, #172]	@ (8006598 <HAL_TIM_PWM_Init+0xf8>)
 80064ea:	42b3      	cmp	r3, r6
 80064ec:	d03e      	beq.n	800656c <HAL_TIM_PWM_Init+0xcc>
 80064ee:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80064f2:	42b3      	cmp	r3, r6
 80064f4:	d03a      	beq.n	800656c <HAL_TIM_PWM_Init+0xcc>
 80064f6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80064fa:	42b3      	cmp	r3, r6
 80064fc:	d108      	bne.n	8006510 <HAL_TIM_PWM_Init+0x70>
 80064fe:	e035      	b.n	800656c <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8006500:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006502:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006506:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006508:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800650a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800650e:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006510:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006514:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8006516:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006518:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800651a:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800651c:	2201      	movs	r2, #1
 800651e:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006520:	691a      	ldr	r2, [r3, #16]
 8006522:	07d2      	lsls	r2, r2, #31
 8006524:	d503      	bpl.n	800652e <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006526:	691a      	ldr	r2, [r3, #16]
 8006528:	f022 0201 	bic.w	r2, r2, #1
 800652c:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800652e:	2301      	movs	r3, #1
 8006530:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006534:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8006538:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800653c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8006540:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8006544:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006548:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800654c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8006550:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8006554:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8006558:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800655c:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8006560:	2000      	movs	r0, #0
}
 8006562:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8006564:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006566:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800656a:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800656c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800656e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006572:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006574:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006578:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800657a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800657c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 800657e:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8006580:	6962      	ldr	r2, [r4, #20]
 8006582:	631a      	str	r2, [r3, #48]	@ 0x30
 8006584:	e7ca      	b.n	800651c <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8006586:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800658a:	f7fd f93d 	bl	8003808 <HAL_TIM_PWM_MspInit>
 800658e:	e791      	b.n	80064b4 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8006590:	2001      	movs	r0, #1
}
 8006592:	4770      	bx	lr
 8006594:	40012c00 	.word	0x40012c00
 8006598:	40014000 	.word	0x40014000

0800659c <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 800659c:	2800      	cmp	r0, #0
 800659e:	f000 8099 	beq.w	80066d4 <HAL_TIM_Encoder_Init+0x138>
{
 80065a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80065a4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80065a8:	460d      	mov	r5, r1
 80065aa:	4604      	mov	r4, r0
 80065ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	f000 808a 	beq.w	80066ca <HAL_TIM_Encoder_Init+0x12e>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065b6:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065b8:	4f47      	ldr	r7, [pc, #284]	@ (80066d8 <HAL_TIM_Encoder_Init+0x13c>)
  TIMx->PSC = Structure->Prescaler;
 80065ba:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065bc:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065be:	69a6      	ldr	r6, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80065c0:	2202      	movs	r2, #2
 80065c2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	f422 32a0 	bic.w	r2, r2, #81920	@ 0x14000
 80065cc:	f022 0207 	bic.w	r2, r2, #7
 80065d0:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d2:	42bb      	cmp	r3, r7
  tmpcr1 = TIMx->CR1;
 80065d4:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80065d6:	d067      	beq.n	80066a8 <HAL_TIM_Encoder_Init+0x10c>
 80065d8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80065dc:	d017      	beq.n	800660e <HAL_TIM_Encoder_Init+0x72>
 80065de:	f5a7 3794 	sub.w	r7, r7, #75776	@ 0x12800
 80065e2:	42bb      	cmp	r3, r7
 80065e4:	d013      	beq.n	800660e <HAL_TIM_Encoder_Init+0x72>
 80065e6:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80065ea:	42bb      	cmp	r3, r7
 80065ec:	d00f      	beq.n	800660e <HAL_TIM_Encoder_Init+0x72>
 80065ee:	f507 3796 	add.w	r7, r7, #76800	@ 0x12c00
 80065f2:	42bb      	cmp	r3, r7
 80065f4:	d058      	beq.n	80066a8 <HAL_TIM_Encoder_Init+0x10c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065f6:	4f39      	ldr	r7, [pc, #228]	@ (80066dc <HAL_TIM_Encoder_Init+0x140>)
 80065f8:	42bb      	cmp	r3, r7
 80065fa:	d059      	beq.n	80066b0 <HAL_TIM_Encoder_Init+0x114>
 80065fc:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006600:	42bb      	cmp	r3, r7
 8006602:	d055      	beq.n	80066b0 <HAL_TIM_Encoder_Init+0x114>
 8006604:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8006608:	42bb      	cmp	r3, r7
 800660a:	d108      	bne.n	800661e <HAL_TIM_Encoder_Init+0x82>
 800660c:	e050      	b.n	80066b0 <HAL_TIM_Encoder_Init+0x114>
    tmpcr1 |= Structure->CounterMode;
 800660e:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006610:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8006614:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006616:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8006618:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800661c:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800661e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006622:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8006624:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006626:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8006628:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 800662a:	2201      	movs	r2, #1
 800662c:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	07d2      	lsls	r2, r2, #31
 8006632:	d503      	bpl.n	800663c <HAL_TIM_Encoder_Init+0xa0>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006634:	691a      	ldr	r2, [r3, #16]
 8006636:	f022 0201 	bic.w	r2, r2, #1
 800663a:	611a      	str	r2, [r3, #16]
  tmpsmcr = htim->Instance->SMCR;
 800663c:	689e      	ldr	r6, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 800663e:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006640:	69a8      	ldr	r0, [r5, #24]
 8006642:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006644:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006646:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800664a:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800664e:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8006652:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006654:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006656:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006658:	0112      	lsls	r2, r2, #4
 800665a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800665e:	68e8      	ldr	r0, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006660:	f421 417c 	bic.w	r1, r1, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006664:	4302      	orrs	r2, r0
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006666:	f021 01fc 	bic.w	r1, r1, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800666a:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer = htim->Instance->CCER;
 800666e:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006670:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006672:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006674:	6869      	ldr	r1, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006676:	f020 00aa 	bic.w	r0, r0, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800667a:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 800667e:	4308      	orrs	r0, r1
  tmpsmcr |= sConfig->EncoderMode;
 8006680:	6829      	ldr	r1, [r5, #0]
 8006682:	430e      	orrs	r6, r1
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006684:	2101      	movs	r1, #1
  htim->Instance->SMCR = tmpsmcr;
 8006686:	609e      	str	r6, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8006688:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 800668a:	6218      	str	r0, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800668c:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006694:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800669c:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 80066a0:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  return HAL_OK;
 80066a4:	2000      	movs	r0, #0
}
 80066a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 80066a8:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066aa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80066ae:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b0:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80066b2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b6:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066bc:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 80066be:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066c0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80066c2:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80066c4:	6962      	ldr	r2, [r4, #20]
 80066c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80066c8:	e7af      	b.n	800662a <HAL_TIM_Encoder_Init+0x8e>
    htim->Lock = HAL_UNLOCKED;
 80066ca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 80066ce:	f7fd f8b3 	bl	8003838 <HAL_TIM_Encoder_MspInit>
 80066d2:	e770      	b.n	80065b6 <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 80066d4:	2001      	movs	r0, #1
}
 80066d6:	4770      	bx	lr
 80066d8:	40012c00 	.word	0x40012c00
 80066dc:	40014000 	.word	0x40014000

080066e0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80066e0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066e2:	6a02      	ldr	r2, [r0, #32]
 80066e4:	f022 0210 	bic.w	r2, r2, #16
{
 80066e8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ea:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80066ec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80066ee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066f0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066f2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80066f6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066fa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066fe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8006700:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006704:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006708:	4d14      	ldr	r5, [pc, #80]	@ (800675c <TIM_OC2_SetConfig+0x7c>)
 800670a:	42a8      	cmp	r0, r5
 800670c:	d00f      	beq.n	800672e <TIM_OC2_SetConfig+0x4e>
 800670e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8006712:	42a8      	cmp	r0, r5
 8006714:	d00b      	beq.n	800672e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006716:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800671a:	42a8      	cmp	r0, r5
 800671c:	d00e      	beq.n	800673c <TIM_OC2_SetConfig+0x5c>
 800671e:	4d10      	ldr	r5, [pc, #64]	@ (8006760 <TIM_OC2_SetConfig+0x80>)
 8006720:	42a8      	cmp	r0, r5
 8006722:	d00b      	beq.n	800673c <TIM_OC2_SetConfig+0x5c>
 8006724:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8006728:	42a8      	cmp	r0, r5
 800672a:	d10f      	bne.n	800674c <TIM_OC2_SetConfig+0x6c>
 800672c:	e006      	b.n	800673c <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800672e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8006730:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006734:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8006738:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800673c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006740:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006744:	ea46 0c05 	orr.w	ip, r6, r5
 8006748:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 800674c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800674e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8006750:	6182      	str	r2, [r0, #24]
}
 8006752:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8006754:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8006756:	6203      	str	r3, [r0, #32]
}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	40012c00 	.word	0x40012c00
 8006760:	40014400 	.word	0x40014400

08006764 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8006764:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006768:	2b01      	cmp	r3, #1
 800676a:	f000 80dc 	beq.w	8006926 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 800676e:	2301      	movs	r3, #1
{
 8006770:	b570      	push	{r4, r5, r6, lr}
 8006772:	4604      	mov	r4, r0
 8006774:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8006776:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800677a:	2a14      	cmp	r2, #20
 800677c:	d80c      	bhi.n	8006798 <HAL_TIM_PWM_ConfigChannel+0x34>
 800677e:	e8df f002 	tbb	[pc, r2]
 8006782:	0b4f      	.short	0x0b4f
 8006784:	0b630b0b 	.word	0x0b630b0b
 8006788:	0b740b0b 	.word	0x0b740b0b
 800678c:	0b840b0b 	.word	0x0b840b0b
 8006790:	0b950b0b 	.word	0x0b950b0b
 8006794:	0b0b      	.short	0x0b0b
 8006796:	10          	.byte	0x10
 8006797:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8006798:	2300      	movs	r3, #0
 800679a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 800679e:	2001      	movs	r0, #1
}
 80067a0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80067a2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80067a6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067a8:	6a19      	ldr	r1, [r3, #32]
 80067aa:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 80067ae:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80067b0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80067b2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067b4:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 80067b8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067bc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c0:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067c2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80067c6:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ca:	4e58      	ldr	r6, [pc, #352]	@ (800692c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80067cc:	42b3      	cmp	r3, r6
 80067ce:	d00f      	beq.n	80067f0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80067d0:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80067d4:	42b3      	cmp	r3, r6
 80067d6:	d00b      	beq.n	80067f0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80067d8:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80067dc:	42b3      	cmp	r3, r6
 80067de:	d007      	beq.n	80067f0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80067e0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80067e4:	42b3      	cmp	r3, r6
 80067e6:	d003      	beq.n	80067f0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80067e8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80067ec:	42b3      	cmp	r3, r6
 80067ee:	d104      	bne.n	80067fa <HAL_TIM_PWM_ConfigChannel+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067f0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80067f2:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80067f6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067fa:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80067fc:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80067fe:	6869      	ldr	r1, [r5, #4]
 8006800:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006802:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006804:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006806:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006808:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800680c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800680e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006810:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006814:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006816:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006818:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800681c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800681e:	e00e      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006820:	6800      	ldr	r0, [r0, #0]
 8006822:	f7ff fd7f 	bl	8006324 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006826:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006828:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800682a:	f043 0308 	orr.w	r3, r3, #8
 800682e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006830:	6983      	ldr	r3, [r0, #24]
 8006832:	f023 0304 	bic.w	r3, r3, #4
 8006836:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006838:	6983      	ldr	r3, [r0, #24]
 800683a:	4313      	orrs	r3, r2
 800683c:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 800683e:	2300      	movs	r3, #0
 8006840:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006844:	2000      	movs	r0, #0
}
 8006846:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006848:	6800      	ldr	r0, [r0, #0]
 800684a:	f7ff ff49 	bl	80066e0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800684e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006850:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006852:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006856:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006858:	6983      	ldr	r3, [r0, #24]
 800685a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800685e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006860:	6983      	ldr	r3, [r0, #24]
 8006862:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006866:	6183      	str	r3, [r0, #24]
      break;
 8006868:	e7e9      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800686a:	6800      	ldr	r0, [r0, #0]
 800686c:	f7ff fd96 	bl	800639c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006870:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006872:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006874:	f043 0308 	orr.w	r3, r3, #8
 8006878:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800687a:	69c3      	ldr	r3, [r0, #28]
 800687c:	f023 0304 	bic.w	r3, r3, #4
 8006880:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006882:	69c3      	ldr	r3, [r0, #28]
 8006884:	4313      	orrs	r3, r2
 8006886:	61c3      	str	r3, [r0, #28]
      break;
 8006888:	e7d9      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800688a:	6800      	ldr	r0, [r0, #0]
 800688c:	f7ff fdc6 	bl	800641c <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006890:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006892:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006894:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006898:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800689a:	69c3      	ldr	r3, [r0, #28]
 800689c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80068a0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068a2:	69c3      	ldr	r3, [r0, #28]
 80068a4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80068a8:	61c3      	str	r3, [r0, #28]
      break;
 80068aa:	e7c8      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068ac:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80068ae:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 80068b0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80068b2:	6a19      	ldr	r1, [r3, #32]
 80068b4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80068b8:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80068ba:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80068bc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80068be:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 80068c2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 80068c6:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068c8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80068ca:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068ce:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d2:	4e16      	ldr	r6, [pc, #88]	@ (800692c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80068d4:	42b3      	cmp	r3, r6
 80068d6:	d00f      	beq.n	80068f8 <HAL_TIM_PWM_ConfigChannel+0x194>
 80068d8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80068dc:	42b3      	cmp	r3, r6
 80068de:	d00b      	beq.n	80068f8 <HAL_TIM_PWM_ConfigChannel+0x194>
 80068e0:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80068e4:	42b3      	cmp	r3, r6
 80068e6:	d007      	beq.n	80068f8 <HAL_TIM_PWM_ConfigChannel+0x194>
 80068e8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80068ec:	42b3      	cmp	r3, r6
 80068ee:	d003      	beq.n	80068f8 <HAL_TIM_PWM_ConfigChannel+0x194>
 80068f0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80068f4:	42b3      	cmp	r3, r6
 80068f6:	d104      	bne.n	8006902 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068f8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068fa:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068fe:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8006902:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8006904:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8006906:	6869      	ldr	r1, [r5, #4]
 8006908:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 800690a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800690c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800690e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006910:	f042 0208 	orr.w	r2, r2, #8
 8006914:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006916:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006918:	f022 0204 	bic.w	r2, r2, #4
 800691c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800691e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006920:	430a      	orrs	r2, r1
 8006922:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006924:	e78b      	b.n	800683e <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8006926:	2002      	movs	r0, #2
}
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	40012c00 	.word	0x40012c00

08006930 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006930:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8006934:	2b01      	cmp	r3, #1
 8006936:	d046      	beq.n	80069c6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8006938:	b470      	push	{r4, r5, r6}
 800693a:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800693c:	4e23      	ldr	r6, [pc, #140]	@ (80069cc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 800693e:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8006940:	2302      	movs	r3, #2
 8006942:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006946:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8006948:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800694a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800694c:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800694e:	d024      	beq.n	800699a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8006950:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8006954:	42b0      	cmp	r0, r6
 8006956:	d02b      	beq.n	80069b0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8006958:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800695c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006960:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006962:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8006966:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006968:	d00a      	beq.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800696a:	4b19      	ldr	r3, [pc, #100]	@ (80069d0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 800696c:	4298      	cmp	r0, r3
 800696e:	d007      	beq.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8006970:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8006974:	4298      	cmp	r0, r3
 8006976:	d003      	beq.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8006978:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 800697c:	4298      	cmp	r0, r3
 800697e:	d104      	bne.n	800698a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006980:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006982:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006986:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006988:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800698a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800698c:	2301      	movs	r3, #1
 800698e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8006992:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8006996:	bc70      	pop	{r4, r5, r6}
 8006998:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800699a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 800699c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069a0:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80069a2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80069a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069aa:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 80069ac:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069ae:	e7e7      	b.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b0:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069b2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069b6:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 80069b8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80069bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c0:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 80069c2:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069c4:	e7dc      	b.n	8006980 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 80069c6:	2002      	movs	r0, #2
}
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	40012c00 	.word	0x40012c00
 80069d0:	40000400 	.word	0x40000400

080069d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069d4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80069d8:	2b01      	cmp	r3, #1
 80069da:	d045      	beq.n	8006a68 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 80069dc:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80069de:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80069e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069e6:	4602      	mov	r2, r0
 80069e8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069ea:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069ec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80069ee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80069f2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069f4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069f8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80069fa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80069fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a00:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006a02:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a04:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a08:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006a0a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a0c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a10:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006a12:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a14:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a18:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006a1a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a22:	4c12      	ldr	r4, [pc, #72]	@ (8006a6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006a24:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006a26:	6810      	ldr	r0, [r2, #0]
 8006a28:	42a0      	cmp	r0, r4
 8006a2a:	d00b      	beq.n	8006a44 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8006a2c:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8006a30:	42a0      	cmp	r0, r4
 8006a32:	d007      	beq.n	8006a44 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8006a34:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8006a36:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8006a38:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8006a3c:	4608      	mov	r0, r1
}
 8006a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a42:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006a44:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8006a46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a4a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006a4e:	6a0c      	ldr	r4, [r1, #32]
 8006a50:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006a54:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a56:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a58:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006a5a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006a5e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006a60:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006a64:	430b      	orrs	r3, r1
 8006a66:	e7e5      	b.n	8006a34 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8006a68:	2002      	movs	r0, #2
}
 8006a6a:	4770      	bx	lr
 8006a6c:	40012c00 	.word	0x40012c00

08006a70 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8006a70:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a72:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8006a76:	2801      	cmp	r0, #1
 8006a78:	d047      	beq.n	8006b0a <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8006a7a:	6810      	ldr	r0, [r2, #0]
 8006a7c:	3801      	subs	r0, #1
 8006a7e:	280f      	cmp	r0, #15
{
 8006a80:	b4f0      	push	{r4, r5, r6, r7}
 8006a82:	d815      	bhi.n	8006ab0 <HAL_TIMEx_ConfigBreakInput+0x40>
 8006a84:	4c22      	ldr	r4, [pc, #136]	@ (8006b10 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8006a86:	4e23      	ldr	r6, [pc, #140]	@ (8006b14 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8006a88:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8006a8c:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8006a90:	4c21      	ldr	r4, [pc, #132]	@ (8006b18 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8006a92:	4e22      	ldr	r6, [pc, #136]	@ (8006b1c <HAL_TIMEx_ConfigBreakInput+0xac>)
 8006a94:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8006a98:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8006a9c:	2901      	cmp	r1, #1
 8006a9e:	d00d      	beq.n	8006abc <HAL_TIMEx_ConfigBreakInput+0x4c>
 8006aa0:	2902      	cmp	r1, #2
 8006aa2:	d01c      	beq.n	8006ade <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8006aaa:	2001      	movs	r0, #1

  return status;
}
 8006aac:	bcf0      	pop	{r4, r5, r6, r7}
 8006aae:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8006ab0:	2700      	movs	r7, #0
  switch (BreakInput)
 8006ab2:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8006ab4:	46bc      	mov	ip, r7
 8006ab6:	463c      	mov	r4, r7
 8006ab8:	463d      	mov	r5, r7
  switch (BreakInput)
 8006aba:	d1f1      	bne.n	8006aa0 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006abc:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8006abe:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006ac0:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006ac2:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8006ac4:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006ac6:	fa01 f10c 	lsl.w	r1, r1, ip
 8006aca:	ea81 0207 	eor.w	r2, r1, r7
 8006ace:	402a      	ands	r2, r5
 8006ad0:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006ad2:	ea80 0102 	eor.w	r1, r0, r2
 8006ad6:	4021      	ands	r1, r4
 8006ad8:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8006ada:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8006adc:	e00f      	b.n	8006afe <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006ade:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 8006ae0:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006ae2:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006ae4:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8006ae6:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8006ae8:	fa01 f10c 	lsl.w	r1, r1, ip
 8006aec:	ea81 0207 	eor.w	r2, r1, r7
 8006af0:	402a      	ands	r2, r5
 8006af2:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8006af4:	ea80 0102 	eor.w	r1, r0, r2
 8006af8:	4021      	ands	r1, r4
 8006afa:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8006afc:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8006b04:	2000      	movs	r0, #0
}
 8006b06:	bcf0      	pop	{r4, r5, r6, r7}
 8006b08:	4770      	bx	lr
  __HAL_LOCK(htim);
 8006b0a:	2002      	movs	r0, #2
}
 8006b0c:	4770      	bx	lr
 8006b0e:	bf00      	nop
 8006b10:	08008e00 	.word	0x08008e00
 8006b14:	08008d80 	.word	0x08008d80
 8006b18:	08008dc0 	.word	0x08008dc0
 8006b1c:	08008d40 	.word	0x08008d40

08006b20 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8006b20:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8006b22:	8803      	ldrh	r3, [r0, #0]
 8006b24:	140d      	asrs	r5, r1, #16
 8006b26:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8006b28:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8006b2c:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8006b30:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8006b34:	428b      	cmp	r3, r1
{
 8006b36:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8006b38:	da0f      	bge.n	8006b5a <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8006b3a:	8846      	ldrh	r6, [r0, #2]
 8006b3c:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8006b40:	4282      	cmp	r2, r0
 8006b42:	dd13      	ble.n	8006b6c <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8006b44:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8006b46:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8006b4a:	bfb8      	it	lt
 8006b4c:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8006b4e:	f7fb fbdf 	bl	8002310 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8006b52:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8006b54:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8006b56:	db0e      	blt.n	8006b76 <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8006b58:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8006b5a:	b2a4      	uxth	r4, r4
 8006b5c:	2000      	movs	r0, #0
 8006b5e:	f364 000f 	bfi	r0, r4, #0, #16
 8006b62:	b2ad      	uxth	r5, r5
 8006b64:	f365 401f 	bfi	r0, r5, #16, #16
}
 8006b68:	b004      	add	sp, #16
 8006b6a:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8006b6c:	1a98      	subs	r0, r3, r2
 8006b6e:	f7fb fbcf 	bl	8002310 <MCM_Sqrt>
        if (Vqd.q < 0)
 8006b72:	2c00      	cmp	r4, #0
 8006b74:	daf0      	bge.n	8006b58 <Circle_Limitation+0x38>
          new_q = - new_q;
 8006b76:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8006b78:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8006b7a:	e7ee      	b.n	8006b5a <Circle_Limitation+0x3a>

08006b7c <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8006b7c:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 8006b80:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8006b84:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 8006b86:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006b8a:	4770      	bx	lr

08006b8c <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8006b8c:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006b8e:	2200      	movs	r2, #0
{
 8006b90:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8006b92:	4611      	mov	r1, r2
 8006b94:	6840      	ldr	r0, [r0, #4]
 8006b96:	f001 fc7d 	bl	8008494 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 8006b9a:	6863      	ldr	r3, [r4, #4]
 8006b9c:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006ba0:	785a      	ldrb	r2, [r3, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8006ba2:	8618      	strh	r0, [r3, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8006ba4:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006ba6:	fb90 f2f2 	sdiv	r2, r0, r2

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8006baa:	2104      	movs	r1, #4
 8006bac:	6820      	ldr	r0, [r4, #0]
 8006bae:	80da      	strh	r2, [r3, #6]
 8006bb0:	f7fc fb14 	bl	80031dc <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	f7fc fb13 	bl	80031e4 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8006bbe:	8ae2      	ldrh	r2, [r4, #22]
 8006bc0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8006bc4:	6820      	ldr	r0, [r4, #0]
 8006bc6:	f7fc fb0d 	bl	80031e4 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006bca:	8ae3      	ldrh	r3, [r4, #22]
 8006bcc:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 8006bce:	4a04      	ldr	r2, [pc, #16]	@ (8006be0 <EAC_StartAlignment+0x54>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8006bd0:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 8006bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd8:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8006bda:	3301      	adds	r3, #1
 8006bdc:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8006bde:	bd10      	pop	{r4, pc}
 8006be0:	10624dd3 	.word	0x10624dd3

08006be4 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8006be4:	8983      	ldrh	r3, [r0, #12]
 8006be6:	b90b      	cbnz	r3, 8006bec <EAC_Exec+0x8>
  bool retVal = true;
 8006be8:	2001      	movs	r0, #1
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8006bea:	4770      	bx	lr
      pHandle->hRemainingTicks--;
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29b      	uxth	r3, r3
{
 8006bf0:	b510      	push	{r4, lr}
 8006bf2:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 8006bf4:	8183      	strh	r3, [r0, #12]
      if (0U == pHandle->hRemainingTicks)
 8006bf6:	b10b      	cbz	r3, 8006bfc <EAC_Exec+0x18>
        retVal = false;
 8006bf8:	2000      	movs	r0, #0
}
 8006bfa:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8006bfc:	7e03      	ldrb	r3, [r0, #24]
 8006bfe:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 8006c02:	6880      	ldr	r0, [r0, #8]
 8006c04:	fb91 f1f3 	sdiv	r1, r1, r3
 8006c08:	f000 f934 	bl	8006e74 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 8006c10:	2001      	movs	r0, #1
}
 8006c12:	bd10      	pop	{r4, pc}

08006c14 <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006c14:	6a03      	ldr	r3, [r0, #32]
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006c16:	f8b0 206c 	ldrh.w	r2, [r0, #108]	@ 0x6c
{
 8006c1a:	b430      	push	{r4, r5}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006c1c:	681c      	ldr	r4, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006c1e:	6f05      	ldr	r5, [r0, #112]	@ 0x70
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 8006c20:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8006c24:	f444 6400 	orr.w	r4, r4, #2048	@ 0x800
 8006c28:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006c2a:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8006c2c:	601c      	str	r4, [r3, #0]
  WRITE_REG(TIMx->CNT, Counter);
 8006c2e:	6259      	str	r1, [r3, #36]	@ 0x24
 8006c30:	6242      	str	r2, [r0, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8006c32:	f04f 32ff 	mov.w	r2, #4294967295
 8006c36:	fbb2 f2f5 	udiv	r2, r2, r5
 8006c3a:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006c3c:	699c      	ldr	r4, [r3, #24]
 8006c3e:	f8b0 2082 	ldrh.w	r2, [r0, #130]	@ 0x82
 8006c42:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
 8006c46:	ea42 020c 	orr.w	r2, r2, ip
 8006c4a:	619a      	str	r2, [r3, #24]
 8006c4c:	699a      	ldr	r2, [r3, #24]
 8006c4e:	f8b0 4082 	ldrh.w	r4, [r0, #130]	@ 0x82
 8006c52:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8006c56:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c5a:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8006c5e:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006c60:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006c62:	68da      	ldr	r2, [r3, #12]
 8006c64:	f042 0201 	orr.w	r2, r2, #1
 8006c68:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8006c6a:	681a      	ldr	r2, [r3, #0]
 8006c6c:	f042 0201 	orr.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8006c72:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c

    for (index = 0U; index < bufferSize; index++)
 8006c76:	b122      	cbz	r2, 8006c82 <ENC_Init+0x6e>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006c78:	bc30      	pop	{r4, r5}
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006c7a:	0092      	lsls	r2, r2, #2
 8006c7c:	3028      	adds	r0, #40	@ 0x28
 8006c7e:	f001 bc45 	b.w	800850c <memset>
}
 8006c82:	bc30      	pop	{r4, r5}
 8006c84:	4770      	bx	lr
 8006c86:	bf00      	nop

08006c88 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 8006c88:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006c8a:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
{
 8006c8e:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8006c90:	b122      	cbz	r2, 8006c9c <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8006c92:	0092      	lsls	r2, r2, #2
 8006c94:	2100      	movs	r1, #0
 8006c96:	3028      	adds	r0, #40	@ 0x28
 8006c98:	f001 fc38 	bl	800850c <memset>
    }
    pHandle->SensorIsReliable = true;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006ca2:	bd10      	pop	{r4, pc}

08006ca4 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8006ca4:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0x7fffffffU) * (pHandle->U32MAXdivPulseNumber);
 8006ca6:	6a02      	ldr	r2, [r0, #32]
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 8006ca8:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006cac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 8006cae:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0x7fffffffU) * (pHandle->U32MAXdivPulseNumber);
 8006cb0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8006cb4:	6e9c      	ldr	r4, [r3, #104]	@ 0x68

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006cb6:	7840      	ldrb	r0, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0x7fffffffU) * (pHandle->U32MAXdivPulseNumber);
 8006cb8:	fb04 f202 	mul.w	r2, r4, r2
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006cbc:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006cbe:	fb02 f000 	mul.w	r0, r2, r0

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8006cc2:	1a51      	subs	r1, r2, r1
    mecAngle = (int16_t)wtemp1;
 8006cc4:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006cc6:	689a      	ldr	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 8006cc8:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8006ccc:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006cce:	fa02 f281 	sxtah	r2, r2, r1
    pHandle->_Super.hElAngle = elAngle;
 8006cd2:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8006cd4:	609a      	str	r2, [r3, #8]
}
 8006cd6:	4770      	bx	lr

08006cd8 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8006cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006cda:	6a02      	ldr	r2, [r0, #32]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006cdc:	68d4      	ldr	r4, [r2, #12]
 8006cde:	f024 0401 	bic.w	r4, r4, #1
{
 8006ce2:	4603      	mov	r3, r0
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8006ce4:	f890 007c 	ldrb.w	r0, [r0, #124]	@ 0x7c
 8006ce8:	60d4      	str	r4, [r2, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8006cea:	6a54      	ldr	r4, [r2, #36]	@ 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006cec:	f8b3 5074 	ldrh.w	r5, [r3, #116]	@ 0x74
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 8006cf0:	ea5f 7ed4 	movs.w	lr, r4, lsr #31
    pHandle->TimerOverflowNb = 0;
 8006cf4:	f04f 0600 	mov.w	r6, #0
 8006cf8:	f8a3 6074 	strh.w	r6, [r3, #116]	@ 0x74
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006cfc:	bf18      	it	ne
 8006cfe:	f06f 0701 	mvnne.w	r7, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006d02:	6816      	ldr	r6, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006d04:	bf18      	it	ne
 8006d06:	6117      	strne	r7, [r2, #16]
      into accout, we must not clear the interrupt in order to accumulate it */
      LL_TIM_ClearFlag_UPDATE(TIMx);
    }

    LL_TIM_EnableIT_UPDATE(TIMx);
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 8006d08:	f024 4c00 	bic.w	ip, r4, #2147483648	@ 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006d0c:	68d4      	ldr	r4, [r2, #12]
    OverflowCntSample = pHandle->TimerOverflowNb;
 8006d0e:	b2ad      	uxth	r5, r5

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8006d10:	44ae      	add	lr, r5
 8006d12:	f044 0401 	orr.w	r4, r4, #1
 8006d16:	f5be 6f00 	cmp.w	lr, #2048	@ 0x800
 8006d1a:	60d4      	str	r4, [r2, #12]
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8006d1c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006d1e:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8006d20:	bf94      	ite	ls
 8006d22:	f893 5085 	ldrbls.w	r5, [r3, #133]	@ 0x85
      pHandle->TimerOverflowError = true;
 8006d26:	2501      	movhi	r5, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8006d28:	f006 0610 	and.w	r6, r6, #16
 8006d2c:	bf88      	it	hi
 8006d2e:	f883 5085 	strbhi.w	r5, [r3, #133]	@ 0x85
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8006d32:	ebac 0202 	sub.w	r2, ip, r2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006d36:	fb04 fe0e 	mul.w	lr, r4, lr
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 8006d3a:	2e00      	cmp	r6, #0
 8006d3c:	f000 8089 	beq.w	8006e52 <ENC_CalcAvrgMecSpeedUnit+0x17a>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006d40:	f893 6084 	ldrb.w	r6, [r3, #132]	@ 0x84
 8006d44:	360a      	adds	r6, #10
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006d46:	eba2 020e 	sub.w	r2, r2, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006d4a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d4e:	2800      	cmp	r0, #0
 8006d50:	f000 8088 	beq.w	8006e64 <ENC_CalcAvrgMecSpeedUnit+0x18c>
 8006d54:	2801      	cmp	r0, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d56:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d58:	d039      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d5a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d5c:	2802      	cmp	r0, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d5e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d60:	d035      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d62:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d64:	2803      	cmp	r0, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d66:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d68:	d031      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d6a:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d6c:	2804      	cmp	r0, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d6e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d70:	d02d      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d72:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d74:	2805      	cmp	r0, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d76:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d78:	d029      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d7a:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d7c:	2806      	cmp	r0, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d7e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d80:	d025      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d82:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d84:	2807      	cmp	r0, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d86:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d88:	d021      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d8a:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d8c:	2808      	cmp	r0, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d8e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d90:	d01d      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d92:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d94:	2809      	cmp	r0, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d96:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d98:	d019      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d9a:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006d9c:	280a      	cmp	r0, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006d9e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006da0:	d015      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006da2:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006da4:	280b      	cmp	r0, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006da6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006da8:	d011      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006daa:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dac:	280c      	cmp	r0, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dae:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006db0:	d00d      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006db2:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006db4:	280d      	cmp	r0, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006db6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006db8:	d009      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dba:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dbc:	280e      	cmp	r0, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dbe:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dc0:	d005      	beq.n	8006dce <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dc2:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006dc4:	280f      	cmp	r0, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8006dc6:	4432      	add	r2, r6
 8006dc8:	bf1c      	itt	ne
 8006dca:	6e5e      	ldrne	r6, [r3, #100]	@ 0x64
 8006dcc:	1992      	addne	r2, r2, r6
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8006dce:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8006dd0:	fb06 f202 	mul.w	r2, r6, r2
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8006dd4:	fb04 f600 	mul.w	r6, r4, r0
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8006dd8:	b10e      	cbz	r6, 8006dde <ENC_CalcAvrgMecSpeedUnit+0x106>
 8006dda:	fb92 f2f6 	sdiv	r2, r2, r6
    *pMecSpeedUnit = (int16_t)wtemp1;
 8006dde:	b216      	sxth	r6, r2
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006de0:	b292      	uxth	r2, r2
    *pMecSpeedUnit = (int16_t)wtemp1;
 8006de2:	800e      	strh	r6, [r1, #0]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006de4:	f893 e084 	ldrb.w	lr, [r3, #132]	@ 0x84
 8006de8:	f10e 0e0a 	add.w	lr, lr, #10
 8006dec:	f853 702e 	ldr.w	r7, [r3, lr, lsl #2]
    pHandle->DeltaCapturesIndex++;
 8006df0:	f893 e084 	ldrb.w	lr, [r3, #132]	@ 0x84
 8006df4:	f10e 0e01 	add.w	lr, lr, #1
 8006df8:	fa5f fe8e 	uxtb.w	lr, lr
 8006dfc:	f883 e084 	strb.w	lr, [r3, #132]	@ 0x84
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006e00:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8006e04:	819e      	strh	r6, [r3, #12]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8006e06:	eba2 020e 	sub.w	r2, r2, lr
 8006e0a:	825a      	strh	r2, [r3, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e0c:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8006e10:	785e      	ldrb	r6, [r3, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8006e12:	fb07 f202 	mul.w	r2, r7, r2
 8006e16:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8006e1a:	fb92 f2f4 	sdiv	r2, r2, r4
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)(pHandle->PulseNumber-1)) ? (pHandle->PulseNumber-1) : (uint32_t)CntCapture;
 8006e1e:	3c01      	subs	r4, #1
 8006e20:	4564      	cmp	r4, ip
 8006e22:	bf28      	it	cs
 8006e24:	4664      	movcs	r4, ip
 8006e26:	679c      	str	r4, [r3, #120]	@ 0x78
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8006e28:	69dc      	ldr	r4, [r3, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006e2a:	8b5e      	ldrh	r6, [r3, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8006e2c:	fb04 f202 	mul.w	r2, r4, r2
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8006e30:	f893 4084 	ldrb.w	r4, [r3, #132]	@ 0x84
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006e34:	fb92 f2f6 	sdiv	r2, r2, r6
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8006e38:	4284      	cmp	r4, r0
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8006e3a:	81da      	strh	r2, [r3, #14]
      pHandle->DeltaCapturesIndex = 0U;
 8006e3c:	bf24      	itt	cs
 8006e3e:	2200      	movcs	r2, #0
 8006e40:	f883 2084 	strbcs.w	r2, [r3, #132]	@ 0x84
    if (pHandle->TimerOverflowError)
 8006e44:	b18d      	cbz	r5, 8006e6a <ENC_CalcAvrgMecSpeedUnit+0x192>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006e46:	78da      	ldrb	r2, [r3, #3]
 8006e48:	701a      	strb	r2, [r3, #0]
      pHandle->SensorIsReliable = false;
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	f883 007d 	strb.w	r0, [r3, #125]	@ 0x7d
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8006e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006e52:	f893 6084 	ldrb.w	r6, [r3, #132]	@ 0x84
 8006e56:	360a      	adds	r6, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8006e58:	4472      	add	r2, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8006e5a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f47f af78 	bne.w	8006d54 <ENC_CalcAvrgMecSpeedUnit+0x7c>
 8006e64:	4602      	mov	r2, r0
 8006e66:	4606      	mov	r6, r0
 8006e68:	e7bb      	b.n	8006de2 <ENC_CalcAvrgMecSpeedUnit+0x10a>
}
 8006e6a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f001 b878 	b.w	8007f64 <SPD_IsMecSpeedReliable>

08006e74 <ENC_SetMecAngle>:
    uint32_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006e74:	7843      	ldrb	r3, [r0, #1]
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint32_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8006e76:	4a0c      	ldr	r2, [pc, #48]	@ (8006ea8 <ENC_SetMecAngle+0x34>)
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006e78:	fb01 f303 	mul.w	r3, r1, r3
{
 8006e7c:	b410      	push	{r4}
    if (localhMecAngle < 0)
 8006e7e:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8006e80:	8083      	strh	r3, [r0, #4]
 8006e82:	b28b      	uxth	r3, r1
    pHandle->_Super.hMecAngle = localhMecAngle;
 8006e84:	80c1      	strh	r1, [r0, #6]
 8006e86:	bfb8      	it	lt
 8006e88:	f103 33ff 	addlt.w	r3, r3, #4294967295
    hAngleCounts = (uint32_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8006e8c:	6f01      	ldr	r1, [r0, #112]	@ 0x70
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8006e8e:	6a04      	ldr	r4, [r0, #32]
      hMecAngleuint = ((uint16_t)65535 - ((uint16_t)localhMecAngle));
 8006e90:	bfb8      	it	lt
 8006e92:	b29b      	uxthlt	r3, r3
    hAngleCounts = (uint32_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8006e94:	fb01 f303 	mul.w	r3, r1, r3
 8006e98:	fba2 2303 	umull	r2, r3, r2, r3
 8006e9c:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint32_t)hAngleCounts;
 8006e9e:	6263      	str	r3, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8006ea0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop
 8006ea8:	80008001 	.word	0x80008001

08006eac <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8006eac:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8006eae:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8006eb0:	f8b2 3074 	ldrh.w	r3, [r2, #116]	@ 0x74
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	f8a2 3074 	strh.w	r3, [r2, #116]	@ 0x74
}
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop

08006ec0 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006ec0:	7803      	ldrb	r3, [r0, #0]
 8006ec2:	b94b      	cbnz	r3, 8006ed8 <NTC_Init+0x18>
    {
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8006ec4:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	bfcc      	ite	gt
 8006ecc:	2300      	movgt	r3, #0
 8006ece:	2301      	movle	r3, #1
 8006ed0:	425b      	negs	r3, r3
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	8043      	strh	r3, [r0, #2]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8006ed6:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006ed8:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8006eda:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8006edc:	2200      	movs	r2, #0
 8006ede:	8102      	strh	r2, [r0, #8]
}
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop

08006ee4 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8006ee4:	7802      	ldrb	r2, [r0, #0]
{
 8006ee6:	4603      	mov	r3, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8006ee8:	b9da      	cbnz	r2, 8006f22 <NTC_CalcAvTemp+0x3e>
    {
      uint16_t hAux = rawValue;

      if (0xFFFFU == hAux)
 8006eea:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8006eee:	4281      	cmp	r1, r0
      {
        /* Nothing to do */
      }
      else
      {
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8006ef0:	885a      	ldrh	r2, [r3, #2]
      if (0xFFFFU == hAux)
 8006ef2:	d004      	beq.n	8006efe <NTC_CalcAvTemp+0x1a>
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8006ef4:	1a89      	subs	r1, r1, r2
 8006ef6:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8006efa:	b292      	uxth	r2, r2
 8006efc:	805a      	strh	r2, [r3, #2]
  if (pHandle->hSensitivity > 0 )
 8006efe:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006f02:	8959      	ldrh	r1, [r3, #10]
  if (pHandle->hSensitivity > 0 )
 8006f04:	2800      	cmp	r0, #0
 8006f06:	dd07      	ble.n	8006f18 <NTC_CalcAvTemp+0x34>
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006f08:	428a      	cmp	r2, r1
 8006f0a:	d80d      	bhi.n	8006f28 <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8006f0c:	8999      	ldrh	r1, [r3, #12]
 8006f0e:	4291      	cmp	r1, r2
 8006f10:	d807      	bhi.n	8006f22 <NTC_CalcAvTemp+0x3e>
      hFault = pHandle->hFaultState;
 8006f12:	8918      	ldrh	r0, [r3, #8]
      }
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006f14:	8118      	strh	r0, [r3, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8006f16:	4770      	bx	lr
    if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8006f18:	428a      	cmp	r2, r1
 8006f1a:	d305      	bcc.n	8006f28 <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8006f1c:	8999      	ldrh	r1, [r3, #12]
 8006f1e:	4291      	cmp	r1, r2
 8006f20:	d2f7      	bcs.n	8006f12 <NTC_CalcAvTemp+0x2e>
 8006f22:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006f24:	8118      	strh	r0, [r3, #8]
}
 8006f26:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8006f28:	2008      	movs	r0, #8
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8006f2a:	8118      	strh	r0, [r3, #8]
}
 8006f2c:	4770      	bx	lr
 8006f2e:	bf00      	nop

08006f30 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8006f30:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006f32:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006f34:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8006f36:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006f38:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8006f3a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006f3c:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006f3e:	4770      	bx	lr

08006f40 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006f40:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006f42:	4770      	bx	lr

08006f44 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006f44:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8006f48:	4603      	mov	r3, r0
 8006f4a:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8006f4c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8006f50:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006f54:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006f58:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8006f5c:	b17c      	cbz	r4, 8006f7e <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8006f5e:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006f62:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8006f66:	eb15 0e01 	adds.w	lr, r5, r1
 8006f6a:	d41d      	bmi.n	8006fa8 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8006f6c:	420d      	tst	r5, r1
 8006f6e:	4914      	ldr	r1, [pc, #80]	@ (8006fc0 <PI_Controller+0x7c>)
 8006f70:	bf48      	it	mi
 8006f72:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006f74:	45a6      	cmp	lr, r4
 8006f76:	dc02      	bgt.n	8006f7e <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8006f78:	691c      	ldr	r4, [r3, #16]
 8006f7a:	4574      	cmp	r4, lr
 8006f7c:	dd1d      	ble.n	8006fba <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8006f7e:	8b99      	ldrh	r1, [r3, #28]
 8006f80:	410a      	asrs	r2, r1
 8006f82:	8bd9      	ldrh	r1, [r3, #30]
 8006f84:	fa44 f101 	asr.w	r1, r4, r1
 8006f88:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8006f8a:	4290      	cmp	r0, r2
 8006f8c:	da03      	bge.n	8006f96 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8006f8e:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8006f90:	4414      	add	r4, r2
 8006f92:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8006f94:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8006f96:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8006f98:	bfc5      	ittet	gt
 8006f9a:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8006f9e:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8006fa0:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8006fa2:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8006fa4:	609c      	str	r4, [r3, #8]
}
 8006fa6:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8006fa8:	2d00      	cmp	r5, #0
 8006faa:	dde3      	ble.n	8006f74 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8006fac:	2900      	cmp	r1, #0
 8006fae:	dde1      	ble.n	8006f74 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8006fb0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fb4:	428c      	cmp	r4, r1
 8006fb6:	d1e2      	bne.n	8006f7e <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8006fb8:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8006fba:	4674      	mov	r4, lr
 8006fbc:	e7df      	b.n	8006f7e <PI_Controller+0x3a>
 8006fbe:	bf00      	nop
 8006fc0:	80000001 	.word	0x80000001

08006fc4 <PID_Controller>:
#endif
    int32_t wDifferential_Term;
    int32_t wDeltaError;
    int32_t wTemp_output;

    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8006fc4:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	@ 0x22
{
 8006fc8:	b538      	push	{r3, r4, r5, lr}
    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8006fca:	b912      	cbnz	r2, 8006fd2 <PID_Controller+0xe>
    {
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
 8006fcc:	f7ff ffba 	bl	8006f44 <PI_Controller>
    returnValue = (int16_t) wTemp_output;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8006fd2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8006fd4:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
      pHandle->wPrevProcessVarError = wProcessVarError;
 8006fd6:	6281      	str	r1, [r0, #40]	@ 0x28
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8006fd8:	1b0c      	subs	r4, r1, r4
      wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8006fda:	fb02 f404 	mul.w	r4, r2, r4
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8006fde:	411c      	asrs	r4, r3
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8006fe0:	4605      	mov	r5, r0
 8006fe2:	f7ff ffaf 	bl	8006f44 <PI_Controller>
 8006fe6:	4603      	mov	r3, r0
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8006fe8:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8006fec:	4423      	add	r3, r4
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8006fee:	4298      	cmp	r0, r3
 8006ff0:	dbee      	blt.n	8006fd0 <PID_Controller+0xc>
      else if (wTemp_output < pHandle->hLowerOutputLimit)
 8006ff2:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
 8006ff6:	4298      	cmp	r0, r3
 8006ff8:	bfb8      	it	lt
 8006ffa:	4618      	movlt	r0, r3
    returnValue = (int16_t) wTemp_output;
 8006ffc:	b200      	sxth	r0, r0
}
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}

08007000 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8007000:	6882      	ldr	r2, [r0, #8]
{
 8007002:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007004:	8951      	ldrh	r1, [r2, #10]
 8007006:	f8b2 e014 	ldrh.w	lr, [r2, #20]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800700a:	8913      	ldrh	r3, [r2, #8]
 800700c:	f8b2 c012 	ldrh.w	ip, [r2, #18]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8007010:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8007014:	fb13 230c 	smlabb	r3, r3, ip, r2
 8007018:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800701a:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 800701e:	bfbc      	itt	lt
 8007020:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8007024:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8007026:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 800702a:	bf48      	it	mi
 800702c:	330f      	addmi	r3, #15
 800702e:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8007032:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8007034:	f85d fb04 	ldr.w	pc, [sp], #4

08007038 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007038:	6883      	ldr	r3, [r0, #8]
 800703a:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800703e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8007042:	b082      	sub	sp, #8
 8007044:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007046:	6883      	ldr	r3, [r0, #8]
 8007048:	00da      	lsls	r2, r3, #3
 800704a:	d418      	bmi.n	800707e <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800704c:	4b2e      	ldr	r3, [pc, #184]	@ (8007108 <R3_2_ADCxInit+0xd0>)
  MODIFY_REG(ADCx->CR,
 800704e:	6882      	ldr	r2, [r0, #8]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	492e      	ldr	r1, [pc, #184]	@ (800710c <R3_2_ADCxInit+0xd4>)
 8007054:	099b      	lsrs	r3, r3, #6
 8007056:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800705a:	fba1 1303 	umull	r1, r3, r1, r3
 800705e:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8007062:	099b      	lsrs	r3, r3, #6
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800706a:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800706c:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800706e:	9b01      	ldr	r3, [sp, #4]
 8007070:	b12b      	cbz	r3, 800707e <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8007072:	9b01      	ldr	r3, [sp, #4]
 8007074:	3b01      	subs	r3, #1
 8007076:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007078:	9b01      	ldr	r3, [sp, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d1f9      	bne.n	8007072 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800707e:	6883      	ldr	r3, [r0, #8]
 8007080:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8007084:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8007088:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800708c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800708e:	6883      	ldr	r3, [r0, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	dbfc      	blt.n	800708e <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8007094:	6803      	ldr	r3, [r0, #0]
 8007096:	07db      	lsls	r3, r3, #31
 8007098:	d408      	bmi.n	80070ac <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800709a:	4a1d      	ldr	r2, [pc, #116]	@ (8007110 <R3_2_ADCxInit+0xd8>)
 800709c:	6883      	ldr	r3, [r0, #8]
 800709e:	4013      	ands	r3, r2
 80070a0:	f043 0301 	orr.w	r3, r3, #1
 80070a4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80070a6:	6803      	ldr	r3, [r0, #0]
 80070a8:	07d9      	lsls	r1, r3, #31
 80070aa:	d5f7      	bpl.n	800709c <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 80070ac:	6883      	ldr	r3, [r0, #8]
 80070ae:	4a18      	ldr	r2, [pc, #96]	@ (8007110 <R3_2_ADCxInit+0xd8>)
 80070b0:	4013      	ands	r3, r2
 80070b2:	f043 0308 	orr.w	r3, r3, #8
 80070b6:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 80070b8:	6883      	ldr	r3, [r0, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	f043 0320 	orr.w	r3, r3, #32
 80070c0:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
 80070c2:	6883      	ldr	r3, [r0, #8]
 80070c4:	069b      	lsls	r3, r3, #26
 80070c6:	d4fc      	bmi.n	80070c2 <R3_2_ADCxInit+0x8a>
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 80070c8:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
  MODIFY_REG(ADCx->CR,
 80070ca:	4a11      	ldr	r2, [pc, #68]	@ (8007110 <R3_2_ADCxInit+0xd8>)
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 80070cc:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 80070d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070d4:	64c3      	str	r3, [r0, #76]	@ 0x4c
  MODIFY_REG(ADCx->CR,
 80070d6:	6883      	ldr	r3, [r0, #8]
 80070d8:	4013      	ands	r3, r2
 80070da:	f043 0308 	orr.w	r3, r3, #8
 80070de:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 80070e0:	68c3      	ldr	r3, [r0, #12]
 80070e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80070e6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80070ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070ee:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80070f0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80070f2:	f023 030f 	bic.w	r3, r3, #15
 80070f6:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 80070f8:	6883      	ldr	r3, [r0, #8]
 80070fa:	4013      	ands	r3, r2
 80070fc:	f043 0304 	orr.w	r3, r3, #4
 8007100:	6083      	str	r3, [r0, #8]
  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength( ADCx, 0U );
  LL_ADC_REG_StartConversion( ADCx) ;

}
 8007102:	b002      	add	sp, #8
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200003a8 	.word	0x200003a8
 800710c:	053e2d63 	.word	0x053e2d63
 8007110:	7fffffc0 	.word	0x7fffffc0

08007114 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007114:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8007118:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 800711c:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800711e:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8007120:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007124:	6f1d      	ldr	r5, [r3, #112]	@ 0x70
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8007126:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800712a:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 800712e:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007132:	6863      	ldr	r3, [r4, #4]
 8007134:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007138:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800713c:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 800713e:	2a05      	cmp	r2, #5
 8007140:	f200 809d 	bhi.w	800727e <R3_2_GetPhaseCurrents+0x16a>
 8007144:	e8df f002 	tbb	[pc, r2]
 8007148:	031d1d37 	.word	0x031d1d37
 800714c:	3703      	.short	0x3703
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800714e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8007152:	4a4e      	ldr	r2, [pc, #312]	@ (800728c <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007154:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8007156:	4293      	cmp	r3, r2
 8007158:	db58      	blt.n	800720c <R3_2_GetPhaseCurrents+0xf8>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800715a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800715e:	f280 8087 	bge.w	8007270 <R3_2_GetPhaseCurrents+0x15c>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 8007162:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007166:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 800716a:	4d48      	ldr	r5, [pc, #288]	@ (800728c <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 800716c:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 8007170:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 8007172:	42aa      	cmp	r2, r5
 8007174:	da5b      	bge.n	800722e <R3_2_GetPhaseCurrents+0x11a>
        {
          Iab->b = -INT16_MAX;
 8007176:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007178:	fa1f f38c 	uxth.w	r3, ip
 800717c:	f248 0201 	movw	r2, #32769	@ 0x8001
 8007180:	e030      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007182:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 8007186:	4b41      	ldr	r3, [pc, #260]	@ (800728c <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8007188:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800718a:	429c      	cmp	r4, r3
 800718c:	db39      	blt.n	8007202 <R3_2_GetPhaseCurrents+0xee>
        else  if (Aux > INT16_MAX)
 800718e:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8007192:	da62      	bge.n	800725a <R3_2_GetPhaseCurrents+0x146>
          Iab->a = (int16_t)Aux;
 8007194:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007198:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800719a:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 800719e:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80071a2:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 80071a4:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 80071a6:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80071aa:	db39      	blt.n	8007220 <R3_2_GetPhaseCurrents+0x10c>
          Iab->b = INT16_MAX;
 80071ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80071b0:	804a      	strh	r2, [r1, #2]
 80071b2:	4615      	mov	r5, r2
 80071b4:	e016      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80071b6:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 80071ba:	4b34      	ldr	r3, [pc, #208]	@ (800728c <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 80071bc:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 80071be:	429c      	cmp	r4, r3
 80071c0:	db1a      	blt.n	80071f8 <R3_2_GetPhaseCurrents+0xe4>
        else  if (Aux > INT16_MAX)
 80071c2:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80071c6:	da3d      	bge.n	8007244 <R3_2_GetPhaseCurrents+0x130>
          Iab->b = (int16_t)Aux;
 80071c8:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071ca:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80071cc:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 80071d0:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 80071d2:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 80071d4:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 80071d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80071da:	db19      	blt.n	8007210 <R3_2_GetPhaseCurrents+0xfc>
          Iab->a = INT16_MAX;
 80071dc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80071e0:	800b      	strh	r3, [r1, #0]
 80071e2:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071e4:	4413      	add	r3, r2
 80071e6:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 80071e8:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 80071ec:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80071f0:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80071f2:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 80071f6:	4770      	bx	lr
 80071f8:	461c      	mov	r4, r3
 80071fa:	f248 0201 	movw	r2, #32769	@ 0x8001
 80071fe:	461d      	mov	r5, r3
 8007200:	e7e4      	b.n	80071cc <R3_2_GetPhaseCurrents+0xb8>
 8007202:	461c      	mov	r4, r3
 8007204:	46a4      	mov	ip, r4
 8007206:	f248 0301 	movw	r3, #32769	@ 0x8001
 800720a:	e7c6      	b.n	800719a <R3_2_GetPhaseCurrents+0x86>
 800720c:	4694      	mov	ip, r2
 800720e:	e7aa      	b.n	8007166 <R3_2_GetPhaseCurrents+0x52>
        else  if (Aux < -INT16_MAX)
 8007210:	4c1e      	ldr	r4, [pc, #120]	@ (800728c <R3_2_GetPhaseCurrents+0x178>)
 8007212:	42a3      	cmp	r3, r4
 8007214:	da26      	bge.n	8007264 <R3_2_GetPhaseCurrents+0x150>
          Iab->a = -INT16_MAX;
 8007216:	800c      	strh	r4, [r1, #0]
 8007218:	f248 0301 	movw	r3, #32769	@ 0x8001
 800721c:	46a4      	mov	ip, r4
 800721e:	e7e1      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
        else  if (Aux < -INT16_MAX)
 8007220:	4d1a      	ldr	r5, [pc, #104]	@ (800728c <R3_2_GetPhaseCurrents+0x178>)
 8007222:	42aa      	cmp	r2, r5
 8007224:	da27      	bge.n	8007276 <R3_2_GetPhaseCurrents+0x162>
          Iab->b = -INT16_MAX;
 8007226:	804d      	strh	r5, [r1, #2]
 8007228:	f248 0201 	movw	r2, #32769	@ 0x8001
 800722c:	e7da      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
        else  if (Aux > INT16_MAX)
 800722e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8007232:	db0c      	blt.n	800724e <R3_2_GetPhaseCurrents+0x13a>
          Iab->b = INT16_MAX;
 8007234:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007238:	461a      	mov	r2, r3
 800723a:	804b      	strh	r3, [r1, #2]
 800723c:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800723e:	fa1f f38c 	uxth.w	r3, ip
 8007242:	e7cf      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
 8007244:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8007248:	4614      	mov	r4, r2
 800724a:	4615      	mov	r5, r2
 800724c:	e7be      	b.n	80071cc <R3_2_GetPhaseCurrents+0xb8>
          Iab->b = (int16_t)Aux;
 800724e:	b215      	sxth	r5, r2
 8007250:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007252:	fa1f f38c 	uxth.w	r3, ip
 8007256:	b292      	uxth	r2, r2
 8007258:	e7c4      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
 800725a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800725e:	461c      	mov	r4, r3
 8007260:	469c      	mov	ip, r3
 8007262:	e79a      	b.n	800719a <R3_2_GetPhaseCurrents+0x86>
          Iab->a = (int16_t)Aux;
 8007264:	fa0f fc83 	sxth.w	ip, r3
 8007268:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800726c:	b29b      	uxth	r3, r3
 800726e:	e7b9      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
 8007270:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 8007274:	e777      	b.n	8007166 <R3_2_GetPhaseCurrents+0x52>
          Iab->b = (int16_t)Aux;
 8007276:	b215      	sxth	r5, r2
 8007278:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800727a:	b292      	uxth	r2, r2
 800727c:	e7b2      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
    pHandle->_Super.Ia = Iab->a;
 800727e:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 8007282:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8007286:	880b      	ldrh	r3, [r1, #0]
 8007288:	884a      	ldrh	r2, [r1, #2]
 800728a:	e7ab      	b.n	80071e4 <R3_2_GetPhaseCurrents+0xd0>
 800728c:	ffff8001 	.word	0xffff8001

08007290 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Returns the value of R3_2_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8007290:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007292:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8007296:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800729a:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800729e:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80072a2:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 80072a4:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 80072a8:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80072aa:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 80072ac:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 80072b0:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 80072b4:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 80072b6:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 80072b8:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80072ba:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80072bc:	4904      	ldr	r1, [pc, #16]	@ (80072d0 <R3_2_SetADCSampPointPolarization+0x40>)
 80072be:	685b      	ldr	r3, [r3, #4]
}
 80072c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 80072c4:	420b      	tst	r3, r1
}
 80072c6:	bf14      	ite	ne
 80072c8:	2001      	movne	r0, #1
 80072ca:	2000      	moveq	r0, #0
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	02000070 	.word	0x02000070

080072d4 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 80072d4:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80072d6:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 80072da:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 80072de:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80072e0:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80072e4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80072e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 80072ea:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80072ee:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80072f2:	6853      	ldr	r3, [r2, #4]
 80072f4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80072f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072fc:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80072fe:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8007302:	2b0f      	cmp	r3, #15
 8007304:	d80d      	bhi.n	8007322 <R3_2_HFCurrentsPolarizationAB+0x4e>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 8007306:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800730a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800730e:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8007310:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007314:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 8007316:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 8007318:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 800731c:	b2db      	uxtb	r3, r3
 800731e:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8007322:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007324:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 8007326:	600b      	str	r3, [r1, #0]
}
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop

0800732c <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800732c:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 8007330:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8007332:	3322      	adds	r3, #34	@ 0x22
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007334:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8007338:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800733a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800733e:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 8007342:	6853      	ldr	r3, [r2, #4]
 8007344:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007348:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734c:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800734e:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8007352:	2b0f      	cmp	r3, #15
 8007354:	d80a      	bhi.n	800736c <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 8007356:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800735a:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800735e:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007360:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 8007362:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 8007364:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 8007368:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800736c:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800736e:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 8007372:	600b      	str	r3, [r1, #0]
}
 8007374:	4770      	bx	lr
 8007376:	bf00      	nop

08007378 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007378:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800737c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007380:	681b      	ldr	r3, [r3, #0]
{
 8007382:	b4f0      	push	{r4, r5, r6, r7}
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007384:	699c      	ldr	r4, [r3, #24]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8007386:	2100      	movs	r1, #0
 8007388:	f024 0408 	bic.w	r4, r4, #8
 800738c:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
 8007390:	619c      	str	r4, [r3, #24]
 8007392:	699c      	ldr	r4, [r3, #24]
 8007394:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 8007398:	619c      	str	r4, [r3, #24]
 800739a:	69dc      	ldr	r4, [r3, #28]
 800739c:	f024 0408 	bic.w	r4, r4, #8
 80073a0:	61dc      	str	r4, [r3, #28]
 80073a2:	69dc      	ldr	r4, [r3, #28]
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80073a4:	0851      	lsrs	r1, r2, #1
 80073a6:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 80073aa:	3a05      	subs	r2, #5
 80073ac:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80073ae:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80073b0:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80073b2:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 80073b4:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80073b6:	699a      	ldr	r2, [r3, #24]
 80073b8:	f042 0208 	orr.w	r2, r2, #8
 80073bc:	619a      	str	r2, [r3, #24]
 80073be:	699a      	ldr	r2, [r3, #24]
 80073c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073c4:	619a      	str	r2, [r3, #24]
 80073c6:	69da      	ldr	r2, [r3, #28]
 80073c8:	f042 0208 	orr.w	r2, r2, #8
 80073cc:	61da      	str	r2, [r3, #28]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80073d4:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80073d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073d8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80073dc:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80073de:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073e0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80073e4:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 80073e6:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80073ea:	2a02      	cmp	r2, #2
 80073ec:	d004      	beq.n	80073f8 <R3_2_SwitchOnPWM+0x80>
  }
  else
  {
    /* Nothing to do */
  }
  pHandle->_Super.PWMState = true;
 80073ee:	2301      	movs	r3, #1
}
 80073f0:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 80073f2:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 80073f6:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 80073f8:	6a1f      	ldr	r7, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80073fa:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 80073fc:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007400:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8007402:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007406:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8007408:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800740c:	f240 5c55 	movw	ip, #1365	@ 0x555
 8007410:	ea17 0f0c 	tst.w	r7, ip
 8007414:	d007      	beq.n	8007426 <R3_2_SwitchOnPWM+0xae>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007416:	61ae      	str	r6, [r5, #24]
 8007418:	618c      	str	r4, [r1, #24]
 800741a:	619a      	str	r2, [r3, #24]
  pHandle->_Super.PWMState = true;
 800741c:	2301      	movs	r3, #1
}
 800741e:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 8007420:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 8007424:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8007426:	62ae      	str	r6, [r5, #40]	@ 0x28
 8007428:	628c      	str	r4, [r1, #40]	@ 0x28
 800742a:	629a      	str	r2, [r3, #40]	@ 0x28
  pHandle->_Super.PWMState = true;
 800742c:	2301      	movs	r3, #1
}
 800742e:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 8007430:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop

08007438 <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 8007438:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800743a:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800743e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007440:	6853      	ldr	r3, [r2, #4]
 8007442:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800744a:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800744c:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8007450:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8007454:	480c      	ldr	r0, [pc, #48]	@ (8007488 <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8007456:	3222      	adds	r2, #34	@ 0x22
 8007458:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800745c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8007460:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8007464:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 8007466:	4293      	cmp	r3, r2
 8007468:	bfa8      	it	ge
 800746a:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 800746c:	4283      	cmp	r3, r0
 800746e:	bfb8      	it	lt
 8007470:	4603      	movlt	r3, r0
 8007472:	b21b      	sxth	r3, r3
 8007474:	2200      	movs	r2, #0
 8007476:	f363 020f 	bfi	r2, r3, #0, #16
 800747a:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800747e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8007482:	600a      	str	r2, [r1, #0]
}
 8007484:	4770      	bx	lr
 8007486:	bf00      	nop
 8007488:	ffff8001 	.word	0xffff8001

0800748c <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800748c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

    /* Disable TIMx preload */
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007490:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007494:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007496:	6999      	ldr	r1, [r3, #24]
 8007498:	f021 0108 	bic.w	r1, r1, #8
{
 800749c:	b4f0      	push	{r4, r5, r6, r7}
 800749e:	6199      	str	r1, [r3, #24]
 80074a0:	69d9      	ldr	r1, [r3, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 80074a2:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074a4:	2401      	movs	r4, #1
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80074a6:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 80074aa:	61d9      	str	r1, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80074ac:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 80074ae:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80074b0:	699a      	ldr	r2, [r3, #24]
 80074b2:	f042 0208 	orr.w	r2, r2, #8
 80074b6:	619a      	str	r2, [r3, #24]
 80074b8:	69da      	ldr	r2, [r3, #28]
 80074ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80074be:	61da      	str	r2, [r3, #28]
    /* Apply new CC values */
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 80074c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80074c6:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80074c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074ce:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 80074d0:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80074d4:	2a02      	cmp	r2, #2
 80074d6:	d113      	bne.n	8007500 <R3_2_RLSwitchOnPWM+0x74>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80074d8:	6a1f      	ldr	r7, [r3, #32]
      {
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80074da:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80074dc:	6c01      	ldr	r1, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80074de:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80074e0:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80074e4:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80074e8:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80074ec:	f240 5c55 	movw	ip, #1365	@ 0x555
 80074f0:	ea17 0f0c 	tst.w	r7, ip
  WRITE_REG(GPIOx->BSRR, PinMask);
 80074f4:	bf15      	itete	ne
 80074f6:	61ae      	strne	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80074f8:	62ae      	streq	r6, [r5, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80074fa:	618c      	strne	r4, [r1, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80074fc:	628c      	streq	r4, [r1, #40]	@ 0x28
 80074fe:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 8007500:	2203      	movs	r2, #3
    pHandle->_Super.PWMState = true;
 8007502:	2301      	movs	r3, #1
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007504:	bcf0      	pop	{r4, r5, r6, r7}
    pHdl->Sector = SECTOR_4;
 8007506:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
    pHandle->_Super.PWMState = true;
 800750a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 800750e:	4770      	bx	lr

08007510 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007510:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007514:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8007516:	2201      	movs	r2, #1
 8007518:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800751c:	699a      	ldr	r2, [r3, #24]
 800751e:	f022 0208 	bic.w	r2, r2, #8
 8007522:	619a      	str	r2, [r3, #24]
 8007524:	699a      	ldr	r2, [r3, #24]
 8007526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800752a:	619a      	str	r2, [r3, #24]
 800752c:	69da      	ldr	r2, [r3, #28]
 800752e:	f022 0208 	bic.w	r2, r2, #8
 8007532:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007534:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007536:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007538:	63d9      	str	r1, [r3, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	f042 0208 	orr.w	r2, r2, #8
 8007540:	619a      	str	r2, [r3, #24]
 8007542:	699a      	ldr	r2, [r3, #24]
 8007544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007548:	619a      	str	r2, [r3, #24]
 800754a:	69da      	ldr	r2, [r3, #28]
 800754c:	f042 0208 	orr.w	r2, r2, #8
 8007550:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007552:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007554:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007558:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800755a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800755e:	2b02      	cmp	r3, #2
 8007560:	d000      	beq.n	8007564 <R3_2_TurnOnLowSides+0x54>
 8007562:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007564:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8007568:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800756a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800756c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007570:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007572:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007576:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800757a:	618c      	str	r4, [r1, #24]
}
 800757c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007580:	619a      	str	r2, [r3, #24]
 8007582:	4770      	bx	lr

08007584 <R3_2_SwitchOffPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007584:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007588:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800758a:	6c53      	ldr	r3, [r2, #68]	@ 0x44
{
 800758c:	b410      	push	{r4}
  if (true == pHandle->_Super.BrakeActionLock)
 800758e:	f890 4083 	ldrb.w	r4, [r0, #131]	@ 0x83
  pHandle->_Super.PWMState = false;
 8007592:	2100      	movs	r1, #0
 8007594:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007598:	f880 1084 	strb.w	r1, [r0, #132]	@ 0x84
  pHandle->_Super.TurnOnLowSidesAction = false;
 800759c:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
 80075a0:	6453      	str	r3, [r2, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 80075a2:	b91c      	cbnz	r4, 80075ac <R3_2_SwitchOffPWM+0x28>
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80075a4:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 80075a8:	2b02      	cmp	r3, #2
 80075aa:	d002      	beq.n	80075b2 <R3_2_SwitchOffPWM+0x2e>
}
 80075ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b0:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80075b2:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80075b6:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80075ba:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 80075bc:	6294      	str	r4, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80075be:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80075c2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 80075c6:	628c      	str	r4, [r1, #40]	@ 0x28
}
 80075c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075cc:	629a      	str	r2, [r3, #40]	@ 0x28
 80075ce:	4770      	bx	lr

080075d0 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 80075d0:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 80075d4:	b510      	push	{r4, lr}
 80075d6:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 80075da:	f101 0e08 	add.w	lr, r1, #8
 80075de:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 80075e0:	f85e 300c 	ldr.w	r3, [lr, ip]
 80075e4:	f36f 130f 	bfc	r3, #4, #12
 80075e8:	4313      	orrs	r3, r2
 80075ea:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 80075ee:	684a      	ldr	r2, [r1, #4]
 80075f0:	f000 0303 	and.w	r3, r0, #3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 80075f8:	680a      	ldr	r2, [r1, #0]
 80075fa:	f000 0010 	and.w	r0, r0, #16
 80075fe:	2301      	movs	r3, #1
 8007600:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8007602:	ea33 0202 	bics.w	r2, r3, r2
 8007606:	d014      	beq.n	8007632 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8007608:	4a14      	ldr	r2, [pc, #80]	@ (800765c <R3_2_SetAOReferenceVoltage+0x8c>)
 800760a:	4815      	ldr	r0, [pc, #84]	@ (8007660 <R3_2_SetAOReferenceVoltage+0x90>)
 800760c:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800760e:	680c      	ldr	r4, [r1, #0]
 8007610:	fba0 0202 	umull	r0, r2, r0, r2
 8007614:	0cd2      	lsrs	r2, r2, #19
 8007616:	4323      	orrs	r3, r4
 8007618:	00d2      	lsls	r2, r2, #3
 800761a:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800761c:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800761e:	9b00      	ldr	r3, [sp, #0]
 8007620:	b12b      	cbz	r3, 800762e <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8007622:	9b00      	ldr	r3, [sp, #0]
 8007624:	3b01      	subs	r3, #1
 8007626:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8007628:	9b00      	ldr	r3, [sp, #0]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d1f9      	bne.n	8007622 <R3_2_SetAOReferenceVoltage+0x52>
}
 800762e:	b002      	add	sp, #8
 8007630:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8007632:	4b0a      	ldr	r3, [pc, #40]	@ (800765c <R3_2_SetAOReferenceVoltage+0x8c>)
 8007634:	4a0a      	ldr	r2, [pc, #40]	@ (8007660 <R3_2_SetAOReferenceVoltage+0x90>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	fba2 2303 	umull	r2, r3, r2, r3
 800763c:	0cdb      	lsrs	r3, r3, #19
 800763e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8007642:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007644:	9b01      	ldr	r3, [sp, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d0f1      	beq.n	800762e <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800764a:	9b01      	ldr	r3, [sp, #4]
 800764c:	3b01      	subs	r3, #1
 800764e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8007650:	9b01      	ldr	r3, [sp, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f9      	bne.n	800764a <R3_2_SetAOReferenceVoltage+0x7a>
}
 8007656:	b002      	add	sp, #8
 8007658:	bd10      	pop	{r4, pc}
 800765a:	bf00      	nop
 800765c:	200003a8 	.word	0x200003a8
 8007660:	431bde83 	.word	0x431bde83

08007664 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007664:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007668:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800766a:	699a      	ldr	r2, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800766c:	2100      	movs	r1, #0
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800766e:	f022 0208 	bic.w	r2, r2, #8
 8007672:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007674:	6359      	str	r1, [r3, #52]	@ 0x34
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007676:	699a      	ldr	r2, [r3, #24]
 8007678:	f042 0208 	orr.w	r2, r2, #8
 800767c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800767e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007680:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007684:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8007686:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800768a:	2b02      	cmp	r3, #2
 800768c:	d000      	beq.n	8007690 <R3_2_RLTurnOnLowSides+0x2c>
 800768e:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007690:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8007694:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007696:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007698:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800769c:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800769e:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80076a2:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 80076a6:	628c      	str	r4, [r1, #40]	@ 0x28
}
 80076a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80076ac:	629a      	str	r2, [r3, #40]	@ 0x28
 80076ae:	4770      	bx	lr

080076b0 <R3_2_Init>:
{
 80076b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 80076b4:	f8d0 509c 	ldr.w	r5, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 80076b8:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 80076ba:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80076be:	6872      	ldr	r2, [r6, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80076c0:	682c      	ldr	r4, [r5, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80076c2:	f8d5 b00c 	ldr.w	fp, [r5, #12]
{
 80076c6:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80076c8:	e9d5 c006 	ldrd	ip, r0, [r5, #24]
{
 80076cc:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80076ce:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80076d2:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 80076d6:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 80076d8:	6a28      	ldr	r0, [r5, #32]
 80076da:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 80076dc:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 80076e0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80076e2:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 80076e4:	e9d5 a904 	ldrd	sl, r9, [r5, #16]
 80076e8:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80076ea:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80076ee:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80076f0:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80076f2:	f022 0220 	bic.w	r2, r2, #32
 80076f6:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80076f8:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80076fa:	687a      	ldr	r2, [r7, #4]
 80076fc:	f022 0204 	bic.w	r2, r2, #4
 8007700:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8007702:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8007706:	687a      	ldr	r2, [r7, #4]
 8007708:	f022 0220 	bic.w	r2, r2, #32
 800770c:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800770e:	6038      	str	r0, [r7, #0]
      if (TIM1 ==  TIMx)
 8007710:	4a8f      	ldr	r2, [pc, #572]	@ (8007950 <R3_2_Init+0x2a0>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8007712:	4890      	ldr	r0, [pc, #576]	@ (8007954 <R3_2_Init+0x2a4>)
 8007714:	4294      	cmp	r4, r2
 8007716:	6902      	ldr	r2, [r0, #16]
 8007718:	bf0c      	ite	eq
 800771a:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800771e:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 8007722:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8007724:	b181      	cbz	r1, 8007748 <R3_2_Init+0x98>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8007726:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800772a:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800772e:	6989      	ldr	r1, [r1, #24]
 8007730:	f04e 0e01 	orr.w	lr, lr, #1
 8007734:	f8c2 e000 	str.w	lr, [r2]
 8007738:	6802      	ldr	r2, [r0, #0]
 800773a:	f042 0201 	orr.w	r2, r2, #1
 800773e:	6002      	str	r2, [r0, #0]
 8007740:	680a      	ldr	r2, [r1, #0]
 8007742:	f042 0201 	orr.w	r2, r2, #1
 8007746:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 8007748:	b1b3      	cbz	r3, 8007778 <R3_2_Init+0xc8>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800774a:	f895 20a5 	ldrb.w	r2, [r5, #165]	@ 0xa5
 800774e:	2a01      	cmp	r2, #1
 8007750:	d00a      	beq.n	8007768 <R3_2_Init+0xb8>
 8007752:	f1bc 0f00 	cmp.w	ip, #0
 8007756:	d007      	beq.n	8007768 <R3_2_Init+0xb8>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8007758:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 800775c:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800775e:	9303      	str	r3, [sp, #12]
 8007760:	4661      	mov	r1, ip
 8007762:	f7ff ff35 	bl	80075d0 <R3_2_SetAOReferenceVoltage>
 8007766:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007768:	681a      	ldr	r2, [r3, #0]
 800776a:	f042 0201 	orr.w	r2, r2, #1
 800776e:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007776:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8007778:	f1bb 0f00 	cmp.w	fp, #0
 800777c:	d017      	beq.n	80077ae <R3_2_Init+0xfe>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800777e:	f895 30a6 	ldrb.w	r3, [r5, #166]	@ 0xa6
 8007782:	2b01      	cmp	r3, #1
 8007784:	d007      	beq.n	8007796 <R3_2_Init+0xe6>
 8007786:	9b00      	ldr	r3, [sp, #0]
 8007788:	b12b      	cbz	r3, 8007796 <R3_2_Init+0xe6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800778a:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 800778e:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8007790:	4619      	mov	r1, r3
 8007792:	f7ff ff1d 	bl	80075d0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007796:	f8db 3000 	ldr.w	r3, [fp]
 800779a:	f043 0301 	orr.w	r3, r3, #1
 800779e:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80077a2:	f8db 3000 	ldr.w	r3, [fp]
 80077a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077aa:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 80077ae:	f1ba 0f00 	cmp.w	sl, #0
 80077b2:	d017      	beq.n	80077e4 <R3_2_Init+0x134>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 80077b4:	f895 30a7 	ldrb.w	r3, [r5, #167]	@ 0xa7
 80077b8:	2b01      	cmp	r3, #1
 80077ba:	d007      	beq.n	80077cc <R3_2_Init+0x11c>
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	b12b      	cbz	r3, 80077cc <R3_2_Init+0x11c>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 80077c0:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 80077c4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80077c6:	4619      	mov	r1, r3
 80077c8:	f7ff ff02 	bl	80075d0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 80077cc:	f8da 3000 	ldr.w	r3, [sl]
 80077d0:	f043 0301 	orr.w	r3, r3, #1
 80077d4:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 80077d8:	f8da 3000 	ldr.w	r3, [sl]
 80077dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80077e0:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 80077e4:	f1b9 0f00 	cmp.w	r9, #0
 80077e8:	d017      	beq.n	800781a <R3_2_Init+0x16a>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 80077ea:	f895 30a8 	ldrb.w	r3, [r5, #168]	@ 0xa8
 80077ee:	2b01      	cmp	r3, #1
 80077f0:	d007      	beq.n	8007802 <R3_2_Init+0x152>
 80077f2:	9b02      	ldr	r3, [sp, #8]
 80077f4:	b12b      	cbz	r3, 8007802 <R3_2_Init+0x152>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 80077f6:	f8b5 20a2 	ldrh.w	r2, [r5, #162]	@ 0xa2
 80077fa:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 80077fc:	4619      	mov	r1, r3
 80077fe:	f7ff fee7 	bl	80075d0 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8007802:	f8d9 3000 	ldr.w	r3, [r9]
 8007806:	f043 0301 	orr.w	r3, r3, #1
 800780a:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800780e:	f8d9 3000 	ldr.w	r3, [r9]
 8007812:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007816:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800781a:	68b3      	ldr	r3, [r6, #8]
 800781c:	07da      	lsls	r2, r3, #31
 800781e:	d56d      	bpl.n	80078fc <R3_2_Init+0x24c>
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	07db      	lsls	r3, r3, #31
 8007824:	d566      	bpl.n	80078f4 <R3_2_Init+0x244>
  volatile uint32_t Brk2Timeout = 1000;
 8007826:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800782a:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800782c:	6823      	ldr	r3, [r4, #0]
 800782e:	f023 0301 	bic.w	r3, r3, #1
 8007832:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007834:	6863      	ldr	r3, [r4, #4]
 8007836:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800783a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800783e:	f043 0320 	orr.w	r3, r3, #32
 8007842:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007844:	69a3      	ldr	r3, [r4, #24]
 8007846:	f043 0308 	orr.w	r3, r3, #8
 800784a:	61a3      	str	r3, [r4, #24]
 800784c:	69a3      	ldr	r3, [r4, #24]
 800784e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007852:	61a3      	str	r3, [r4, #24]
 8007854:	69e3      	ldr	r3, [r4, #28]
 8007856:	f043 0308 	orr.w	r3, r3, #8
 800785a:	61e3      	str	r3, [r4, #28]
 800785c:	69e3      	ldr	r3, [r4, #28]
 800785e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007862:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007864:	6963      	ldr	r3, [r4, #20]
 8007866:	f043 0301 	orr.w	r3, r3, #1
 800786a:	6163      	str	r3, [r4, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800786c:	f895 30a9 	ldrb.w	r3, [r5, #169]	@ 0xa9
 8007870:	2b02      	cmp	r3, #2
 8007872:	d058      	beq.n	8007926 <R3_2_Init+0x276>
    if (M1 == pHandle->_Super.Motor)
 8007874:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 8007878:	2b00      	cmp	r3, #0
 800787a:	d046      	beq.n	800790a <R3_2_Init+0x25a>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800787c:	6863      	ldr	r3, [r4, #4]
 800787e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007882:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007886:	f06f 0280 	mvn.w	r2, #128	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800788a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800788e:	6063      	str	r3, [r4, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8007890:	6122      	str	r2, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8007892:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8007894:	9a05      	ldr	r2, [sp, #20]
 8007896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800789a:	b172      	cbz	r2, 80078ba <R3_2_Init+0x20a>
 800789c:	b16b      	cbz	r3, 80078ba <R3_2_Init+0x20a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800789e:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 80078a2:	e000      	b.n	80078a6 <R3_2_Init+0x1f6>
 80078a4:	b14b      	cbz	r3, 80078ba <R3_2_Init+0x20a>
 80078a6:	6121      	str	r1, [r4, #16]
    Brk2Timeout--;
 80078a8:	9b05      	ldr	r3, [sp, #20]
 80078aa:	3b01      	subs	r3, #1
 80078ac:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80078ae:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 80078b0:	9a05      	ldr	r2, [sp, #20]
 80078b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b6:	2a00      	cmp	r2, #0
 80078b8:	d1f4      	bne.n	80078a4 <R3_2_Init+0x1f4>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80078ba:	68e3      	ldr	r3, [r4, #12]
 80078bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c0:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 80078c2:	6a23      	ldr	r3, [r4, #32]
 80078c4:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80078c8:	f06f 0201 	mvn.w	r2, #1
  SET_BIT(TIMx->CCER, Channels);
 80078cc:	f043 0305 	orr.w	r3, r3, #5
 80078d0:	6223      	str	r3, [r4, #32]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80078d2:	6122      	str	r2, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80078d4:	68e3      	ldr	r3, [r4, #12]
 80078d6:	f043 0301 	orr.w	r3, r3, #1
 80078da:	60e3      	str	r3, [r4, #12]
      pHandle->ADCTriggerEdge = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 80078dc:	2280      	movs	r2, #128	@ 0x80
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80078de:	2340      	movs	r3, #64	@ 0x40
 80078e0:	f8a8 2096 	strh.w	r2, [r8, #150]	@ 0x96
 80078e4:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80078e6:	6873      	ldr	r3, [r6, #4]
 80078e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078ec:	6073      	str	r3, [r6, #4]
}
 80078ee:	b007      	add	sp, #28
 80078f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 80078f4:	4638      	mov	r0, r7
 80078f6:	f7ff fb9f 	bl	8007038 <R3_2_ADCxInit>
 80078fa:	e794      	b.n	8007826 <R3_2_Init+0x176>
        R3_2_ADCxInit(ADCx_1);
 80078fc:	4630      	mov	r0, r6
 80078fe:	f7ff fb9b 	bl	8007038 <R3_2_ADCxInit>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007902:	68bb      	ldr	r3, [r7, #8]
 8007904:	07db      	lsls	r3, r3, #31
 8007906:	d48e      	bmi.n	8007826 <R3_2_Init+0x176>
 8007908:	e7f4      	b.n	80078f4 <R3_2_Init+0x244>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800790a:	f895 30a4 	ldrb.w	r3, [r5, #164]	@ 0xa4
 800790e:	2b01      	cmp	r3, #1
 8007910:	d00d      	beq.n	800792e <R3_2_Init+0x27e>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8007912:	2b03      	cmp	r3, #3
 8007914:	d1b2      	bne.n	800787c <R3_2_Init+0x1cc>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007916:	2201      	movs	r2, #1
 8007918:	6322      	str	r2, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800791a:	6962      	ldr	r2, [r4, #20]
 800791c:	f042 0201 	orr.w	r2, r2, #1
 8007920:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007922:	6323      	str	r3, [r4, #48]	@ 0x30
}
 8007924:	e7aa      	b.n	800787c <R3_2_Init+0x1cc>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8007926:	f895 30aa 	ldrb.w	r3, [r5, #170]	@ 0xaa
 800792a:	2b01      	cmp	r3, #1
 800792c:	d004      	beq.n	8007938 <R3_2_Init+0x288>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800792e:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 8007932:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8007934:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8007936:	e7a1      	b.n	800787c <R3_2_Init+0x1cc>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8007938:	f895 20a4 	ldrb.w	r2, [r5, #164]	@ 0xa4
 800793c:	2a03      	cmp	r2, #3
 800793e:	d1f6      	bne.n	800792e <R3_2_Init+0x27e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8007940:	6323      	str	r3, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8007942:	6963      	ldr	r3, [r4, #20]
 8007944:	f043 0301 	orr.w	r3, r3, #1
 8007948:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800794a:	6322      	str	r2, [r4, #48]	@ 0x30
}
 800794c:	e7ef      	b.n	800792e <R3_2_Init+0x27e>
 800794e:	bf00      	nop
 8007950:	40012c00 	.word	0x40012c00
 8007954:	e0042000 	.word	0xe0042000

08007958 <R3_2_SetOffsetCalib>:
{
 8007958:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800795a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800795e:	680b      	ldr	r3, [r1, #0]
 8007960:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 8007964:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8007966:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800796a:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800796e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007972:	4770      	bx	lr

08007974 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 8007974:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8007978:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800797c:	608b      	str	r3, [r1, #8]
 800797e:	e9c1 0200 	strd	r0, r2, [r1]
}
 8007982:	4770      	bx	lr

08007984 <R3_2_CurrentReadingPolarization>:
{
 8007984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007988:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800798c:	6803      	ldr	r3, [r0, #0]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800798e:	6815      	ldr	r5, [r2, #0]
{
 8007990:	b083      	sub	sp, #12
    pHandle->PhaseAOffset = 0U;
 8007992:	2600      	movs	r6, #0
 8007994:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8007998:	9300      	str	r3, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800799a:	6943      	ldr	r3, [r0, #20]
 800799c:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800799e:	f880 6098 	strb.w	r6, [r0, #152]	@ 0x98
  CLEAR_BIT(TIMx->CCER, Channels);
 80079a2:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 80079a4:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 80079a8:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 80079ac:	f023 0305 	bic.w	r3, r3, #5
 80079b0:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 80079b2:	4b3b      	ldr	r3, [pc, #236]	@ (8007aa0 <R3_2_CurrentReadingPolarization+0x11c>)
 80079b4:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 80079b6:	4b3b      	ldr	r3, [pc, #236]	@ (8007aa4 <R3_2_CurrentReadingPolarization+0x120>)
 80079b8:	6143      	str	r3, [r0, #20]
{
 80079ba:	4604      	mov	r4, r0
    pHandle->PolarizationSector=SECTOR_5;
 80079bc:	2704      	movs	r7, #4
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80079be:	2380      	movs	r3, #128	@ 0x80
 80079c0:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    pHandle->PolarizationSector=SECTOR_5;
 80079c4:	f880 7099 	strb.w	r7, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 80079c8:	f880 707a 	strb.w	r7, [r0, #122]	@ 0x7a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80079cc:	f7ff fcd4 	bl	8007378 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 80079d0:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 80079d4:	f104 0856 	add.w	r8, r4, #86	@ 0x56
 80079d8:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 80079dc:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80079e0:	4641      	mov	r1, r8
 80079e2:	464b      	mov	r3, r9
 80079e4:	4628      	mov	r0, r5
 80079e6:	f7fb f97f 	bl	8002ce8 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 80079ea:	4620      	mov	r0, r4
 80079ec:	f7ff fdca 	bl	8007584 <R3_2_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 80079f0:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa8 <R3_2_CurrentReadingPolarization+0x124>)
 80079f2:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 80079f4:	4620      	mov	r0, r4
    pHandle->PolarizationCounter = 0U;
 80079f6:	f884 6098 	strb.w	r6, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 80079fa:	f884 6099 	strb.w	r6, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 80079fe:	f884 607a 	strb.w	r6, [r4, #122]	@ 0x7a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8007a02:	f7ff fcb9 	bl	8007378 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8007a06:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 8007a0a:	464b      	mov	r3, r9
 8007a0c:	f892 20a4 	ldrb.w	r2, [r2, #164]	@ 0xa4
 8007a10:	4641      	mov	r1, r8
 8007a12:	4628      	mov	r0, r5
 8007a14:	f7fb f968 	bl	8002ce8 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8007a18:	4620      	mov	r0, r4
 8007a1a:	f7ff fdb3 	bl	8007584 <R3_2_SwitchOffPWM>
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8007a1e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 8007a22:	40fb      	lsrs	r3, r7
 8007a24:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8007a28:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 8007a2c:	40fb      	lsrs	r3, r7
 8007a2e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8007a32:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 8007a36:	40fb      	lsrs	r3, r7
 8007a38:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    pHandle->_Super.offsetCalibStatus = true;
 8007a3c:	2301      	movs	r3, #1
 8007a3e:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8007a42:	9b00      	ldr	r3, [sp, #0]
 8007a44:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8007a46:	9b01      	ldr	r3, [sp, #4]
 8007a48:	6163      	str	r3, [r4, #20]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007a4a:	69ab      	ldr	r3, [r5, #24]
 8007a4c:	f023 0308 	bic.w	r3, r3, #8
 8007a50:	61ab      	str	r3, [r5, #24]
 8007a52:	69ab      	ldr	r3, [r5, #24]
 8007a54:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a58:	61ab      	str	r3, [r5, #24]
 8007a5a:	69eb      	ldr	r3, [r5, #28]
 8007a5c:	f023 0308 	bic.w	r3, r3, #8
 8007a60:	61eb      	str	r3, [r5, #28]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8007a62:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
 8007a66:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007a68:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007a6a:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007a6c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007a6e:	69ab      	ldr	r3, [r5, #24]
 8007a70:	f043 0308 	orr.w	r3, r3, #8
 8007a74:	61ab      	str	r3, [r5, #24]
 8007a76:	69ab      	ldr	r3, [r5, #24]
 8007a78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007a7c:	61ab      	str	r3, [r5, #24]
 8007a7e:	69eb      	ldr	r3, [r5, #28]
 8007a80:	f043 0308 	orr.w	r3, r3, #8
 8007a84:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007a86:	6a2b      	ldr	r3, [r5, #32]
 8007a88:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8007a8c:	f043 0305 	orr.w	r3, r3, #5
 8007a90:	622b      	str	r3, [r5, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8007a92:	f884 707a 	strb.w	r7, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 8007a96:	f884 6083 	strb.w	r6, [r4, #131]	@ 0x83
}
 8007a9a:	b003      	add	sp, #12
 8007a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007aa0:	080072d5 	.word	0x080072d5
 8007aa4:	08007291 	.word	0x08007291
 8007aa8:	0800732d 	.word	0x0800732d

08007aac <R3_2_SetADCSampPointSectX>:
{
 8007aac:	b530      	push	{r4, r5, lr}
    if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 8007aae:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8007ab2:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 8007ab6:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8007aba:	ebae 0203 	sub.w	r2, lr, r3
 8007abe:	f8b1 4068 	ldrh.w	r4, [r1, #104]	@ 0x68
 8007ac2:	b292      	uxth	r2, r2
 8007ac4:	42a2      	cmp	r2, r4
 8007ac6:	d917      	bls.n	8007af8 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 8007ac8:	2204      	movs	r2, #4
      SamplingPoint = pHandle->Half_PWMPeriod - 1u;
 8007aca:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8007ace:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint = pHandle->Half_PWMPeriod - 1u;
 8007ad2:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007ad4:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8007ad6:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8007ada:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8007ade:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007ae2:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007ae4:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007ae6:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007ae8:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007aea:	6852      	ldr	r2, [r2, #4]
 8007aec:	4b10      	ldr	r3, [pc, #64]	@ (8007b30 <R3_2_SetADCSampPointSectX+0x84>)
 8007aee:	421a      	tst	r2, r3
}
 8007af0:	bf14      	ite	ne
 8007af2:	2001      	movne	r0, #1
 8007af4:	2000      	moveq	r0, #0
 8007af6:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8007af8:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 8007afc:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8007b00:	fa1f fc8c 	uxth.w	ip, ip
 8007b04:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8007b08:	d904      	bls.n	8007b14 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8007b0a:	f8b1 206a 	ldrh.w	r2, [r1, #106]	@ 0x6a
 8007b0e:	1a9b      	subs	r3, r3, r2
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	e7df      	b.n	8007ad4 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8007b14:	4423      	add	r3, r4
 8007b16:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8007b18:	459e      	cmp	lr, r3
 8007b1a:	d8db      	bhi.n	8007ad4 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 8007b1c:	43db      	mvns	r3, r3
          pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8007b1e:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 8007b22:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8007b26:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 8007b2a:	b29b      	uxth	r3, r3
 8007b2c:	e7d2      	b.n	8007ad4 <R3_2_SetADCSampPointSectX+0x28>
 8007b2e:	bf00      	nop
 8007b30:	02000070 	.word	0x02000070

08007b34 <R3_2_TIMx_UP_IRQHandler>:
{
 8007b34:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b36:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007b3a:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8007b3e:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007b40:	681d      	ldr	r5, [r3, #0]
{
 8007b42:	4601      	mov	r1, r0
 8007b44:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 8007b48:	6f02      	ldr	r2, [r0, #112]	@ 0x70
    if (OPAMPParams != NULL)
 8007b4a:	b1d6      	cbz	r6, 8007b82 <R3_2_TIMx_UP_IRQHandler+0x4e>
 8007b4c:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8007b50:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1fc      	bne.n	8007b50 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8007b56:	eb06 030c 	add.w	r3, r6, ip
 8007b5a:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 8007b5c:	f1b7 3fff 	cmp.w	r7, #4294967295
 8007b60:	d006      	beq.n	8007b70 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8007b62:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8007b66:	6834      	ldr	r4, [r6, #0]
 8007b68:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 8007b6c:	433c      	orrs	r4, r7
 8007b6e:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8007b70:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 8007b72:	1c66      	adds	r6, r4, #1
 8007b74:	d005      	beq.n	8007b82 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8007b76:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8007b78:	6833      	ldr	r3, [r6, #0]
 8007b7a:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 8007b7e:	4323      	orrs	r3, r4
 8007b80:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 8007b82:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 8007b86:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8007b88:	431c      	orrs	r4, r3
 8007b8a:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 8007b8c:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8007b90:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 8007b92:	4303      	orrs	r3, r0
 8007b94:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007b96:	686b      	ldr	r3, [r5, #4]
 8007b98:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007b9c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007ba0:	2280      	movs	r2, #128	@ 0x80
 8007ba2:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 8007ba6:	606b      	str	r3, [r5, #4]
}
 8007ba8:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 8007bac:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8007bae:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 8007bb2:	4770      	bx	lr

08007bb4 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 8007bb4:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 8007bb8:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 8007bba:	2900      	cmp	r1, #0
 8007bbc:	d13d      	bne.n	8007c3a <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007bbe:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8007bc2:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007bc4:	699a      	ldr	r2, [r3, #24]
 8007bc6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007bca:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8007bce:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007bd2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007bd4:	6a1a      	ldr	r2, [r3, #32]
 8007bd6:	f042 0201 	orr.w	r2, r2, #1
 8007bda:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007bdc:	6a1a      	ldr	r2, [r3, #32]
 8007bde:	f022 0204 	bic.w	r2, r2, #4
 8007be2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007be4:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007be6:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8007bea:	2a01      	cmp	r2, #1
 8007bec:	d033      	beq.n	8007c56 <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 8007bee:	2a02      	cmp	r2, #2
 8007bf0:	d10f      	bne.n	8007c12 <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007bf2:	699a      	ldr	r2, [r3, #24]
 8007bf4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007bf8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8007bfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007c00:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007c02:	6a1a      	ldr	r2, [r3, #32]
 8007c04:	f042 0210 	orr.w	r2, r2, #16
 8007c08:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c0a:	6a1a      	ldr	r2, [r3, #32]
 8007c0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c10:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c12:	69da      	ldr	r2, [r3, #28]
 8007c14:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007c18:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8007c1c:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 8007c20:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c22:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 8007c24:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 8007c28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c2c:	621a      	str	r2, [r3, #32]
 8007c2e:	6a1a      	ldr	r2, [r3, #32]
 8007c30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007c34:	621a      	str	r2, [r3, #32]
 8007c36:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007c3a:	4b0f      	ldr	r3, [pc, #60]	@ (8007c78 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 8007c3c:	490f      	ldr	r1, [pc, #60]	@ (8007c7c <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007c3e:	4a10      	ldr	r2, [pc, #64]	@ (8007c80 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007c40:	4c10      	ldr	r4, [pc, #64]	@ (8007c84 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 8007c42:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 8007c44:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 8007c46:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007c48:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8007c4c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 8007c50:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 8007c54:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c56:	699a      	ldr	r2, [r3, #24]
 8007c58:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007c5c:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8007c60:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8007c64:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007c66:	6a1a      	ldr	r2, [r3, #32]
 8007c68:	f022 0210 	bic.w	r2, r2, #16
 8007c6c:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8007c6e:	6a1a      	ldr	r2, [r3, #32]
 8007c70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007c74:	621a      	str	r2, [r3, #32]
}
 8007c76:	e7cc      	b.n	8007c12 <R3_2_RLDetectionModeEnable+0x5e>
 8007c78:	08007665 	.word	0x08007665
 8007c7c:	0800748d 	.word	0x0800748d
 8007c80:	08007585 	.word	0x08007585
 8007c84:	08007439 	.word	0x08007439

08007c88 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 8007c88:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d03d      	beq.n	8007d0c <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007c90:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8007c94:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007c98:	681b      	ldr	r3, [r3, #0]
{
 8007c9a:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007c9c:	699a      	ldr	r2, [r3, #24]
 8007c9e:	4c40      	ldr	r4, [pc, #256]	@ (8007da0 <R3_2_RLDetectionModeDisable+0x118>)
 8007ca0:	4022      	ands	r2, r4
 8007ca2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007ca6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007ca8:	6a1a      	ldr	r2, [r3, #32]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007cb0:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8007cb4:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 8007cb6:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 8007cba:	d028      	beq.n	8007d0e <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8007cbc:	2a02      	cmp	r2, #2
 8007cbe:	d04a      	beq.n	8007d56 <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007cc0:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007cc2:	699a      	ldr	r2, [r3, #24]
 8007cc4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007cc8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8007ccc:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8007cd0:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007cd2:	6a1a      	ldr	r2, [r3, #32]
 8007cd4:	f042 0210 	orr.w	r2, r2, #16
 8007cd8:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007cda:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007cdc:	69da      	ldr	r2, [r3, #28]
 8007cde:	4022      	ands	r2, r4
 8007ce0:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007ce4:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007ce6:	6a1a      	ldr	r2, [r3, #32]
 8007ce8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007cec:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007cee:	4a2d      	ldr	r2, [pc, #180]	@ (8007da4 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007cf0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 8007cf2:	492d      	ldr	r1, [pc, #180]	@ (8007da8 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 8007cf4:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007cf6:	4a2d      	ldr	r2, [pc, #180]	@ (8007dac <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 8007cf8:	4c2d      	ldr	r4, [pc, #180]	@ (8007db0 <R3_2_RLDetectionModeDisable+0x128>)
 8007cfa:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8007cfc:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 8007cfe:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 8007d02:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8007d06:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 8007d0a:	4770      	bx	lr
 8007d0c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8007d0e:	6a1a      	ldr	r2, [r3, #32]
 8007d10:	f042 0204 	orr.w	r2, r2, #4
 8007d14:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d16:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d18:	699a      	ldr	r2, [r3, #24]
 8007d1a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007d1e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8007d22:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8007d26:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007d28:	6a1a      	ldr	r2, [r3, #32]
 8007d2a:	f042 0210 	orr.w	r2, r2, #16
 8007d2e:	621a      	str	r2, [r3, #32]
 8007d30:	6a1a      	ldr	r2, [r3, #32]
 8007d32:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d36:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d38:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d3a:	69da      	ldr	r2, [r3, #28]
 8007d3c:	4022      	ands	r2, r4
 8007d3e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007d42:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007d44:	6a1a      	ldr	r2, [r3, #32]
 8007d46:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d4a:	621a      	str	r2, [r3, #32]
 8007d4c:	6a1a      	ldr	r2, [r3, #32]
 8007d4e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007d52:	621a      	str	r2, [r3, #32]
}
 8007d54:	e7cb      	b.n	8007cee <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d56:	6a1a      	ldr	r2, [r3, #32]
 8007d58:	f022 0204 	bic.w	r2, r2, #4
 8007d5c:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007d5e:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d60:	699a      	ldr	r2, [r3, #24]
 8007d62:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8007d66:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 8007d6a:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 8007d6e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8007d70:	6a1a      	ldr	r2, [r3, #32]
 8007d72:	f042 0210 	orr.w	r2, r2, #16
 8007d76:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d78:	6a1a      	ldr	r2, [r3, #32]
 8007d7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007d7e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007d80:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	4022      	ands	r2, r4
 8007d86:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8007d8a:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8007d8c:	6a1a      	ldr	r2, [r3, #32]
 8007d8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007d92:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8007d94:	6a1a      	ldr	r2, [r3, #32]
 8007d96:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007d9a:	621a      	str	r2, [r3, #32]
}
 8007d9c:	e7a7      	b.n	8007cee <R3_2_RLDetectionModeDisable+0x66>
 8007d9e:	bf00      	nop
 8007da0:	fffeff8c 	.word	0xfffeff8c
 8007da4:	08007115 	.word	0x08007115
 8007da8:	08007379 	.word	0x08007379
 8007dac:	08007585 	.word	0x08007585
 8007db0:	08007511 	.word	0x08007511

08007db4 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007db4:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8007db8:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007dbc:	6812      	ldr	r2, [r2, #0]
{
 8007dbe:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8007dc0:	69d0      	ldr	r0, [r2, #28]
 8007dc2:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 8007dc6:	fb0c f101 	mul.w	r1, ip, r1
 8007dca:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
 8007dce:	0c09      	lsrs	r1, r1, #16
 8007dd0:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
{
 8007dd4:	b410      	push	{r4}
    pHandle->_Super.CntPhA = (uint16_t)val;
 8007dd6:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 8007dda:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8007ddc:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 8007de0:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 8007de4:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007de8:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007dea:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007dec:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8007dee:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8007df0:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 8007df4:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 8007df8:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 8007dfc:	f04f 0c03 	mov.w	ip, #3
 8007e00:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 8007e04:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8007e06:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 8007e08:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007e0c:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 8007e0e:	d007      	beq.n	8007e20 <R3_2_RLDetectionModeSetDuty+0x6c>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007e10:	4b06      	ldr	r3, [pc, #24]	@ (8007e2c <R3_2_RLDetectionModeSetDuty+0x78>)
}
 8007e12:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8007e16:	421a      	tst	r2, r3
 8007e18:	bf14      	ite	ne
 8007e1a:	2001      	movne	r0, #1
 8007e1c:	2000      	moveq	r0, #0
}
 8007e1e:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 8007e20:	2200      	movs	r2, #0
}
 8007e22:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 8007e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 8007e2a:	4770      	bx	lr
 8007e2c:	02000070 	.word	0x02000070

08007e30 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e30:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007e34:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8007e38:	681b      	ldr	r3, [r3, #0]
{
 8007e3a:	b430      	push	{r4, r5}
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007e3c:	699c      	ldr	r4, [r3, #24]
 8007e3e:	f024 0408 	bic.w	r4, r4, #8
 8007e42:	619c      	str	r4, [r3, #24]
 8007e44:	699c      	ldr	r4, [r3, #24]
 8007e46:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 8007e4a:	619c      	str	r4, [r3, #24]
 8007e4c:	69dc      	ldr	r4, [r3, #28]
 8007e4e:	f024 0408 	bic.w	r4, r4, #8
 8007e52:	61dc      	str	r4, [r3, #28]
 8007e54:	69dc      	ldr	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e56:	2100      	movs	r1, #0
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8007e58:	3a05      	subs	r2, #5
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007e5a:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 8007e5e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8007e60:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8007e62:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8007e64:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8007e66:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8007e68:	699a      	ldr	r2, [r3, #24]
 8007e6a:	f042 0208 	orr.w	r2, r2, #8
 8007e6e:	619a      	str	r2, [r3, #24]
 8007e70:	699a      	ldr	r2, [r3, #24]
 8007e72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e76:	619a      	str	r2, [r3, #24]
 8007e78:	69da      	ldr	r2, [r3, #28]
 8007e7a:	f042 0208 	orr.w	r2, r2, #8
 8007e7e:	61da      	str	r2, [r3, #28]
 8007e80:	69da      	ldr	r2, [r3, #28]
 8007e82:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e86:	61da      	str	r2, [r3, #28]
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    
    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8007e88:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e8a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007e8e:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8007e90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007e92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e96:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 8007e98:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 8007e9c:	2a02      	cmp	r2, #2
 8007e9e:	d10b      	bne.n	8007eb8 <R3_2_RLTurnOnLowSidesAndStart+0x88>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007ea0:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8007ea4:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007ea8:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 8007eaa:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8007eac:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 8007eb0:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8007eb2:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 8007eb6:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 8007eb8:	2203      	movs	r2, #3
 8007eba:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 8007ebe:	6a1a      	ldr	r2, [r3, #32]
 8007ec0:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);

#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8007ec4:	bc30      	pop	{r4, r5}
 8007ec6:	621a      	str	r2, [r3, #32]
 8007ec8:	4770      	bx	lr
 8007eca:	bf00      	nop

08007ecc <RVBS_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.AvBusVoltage_d = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8007ecc:	8943      	ldrh	r3, [r0, #10]
 8007ece:	8a02      	ldrh	r2, [r0, #16]
 8007ed0:	4413      	add	r3, r2
 8007ed2:	085b      	lsrs	r3, r3, #1
 8007ed4:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 8007ed6:	4770      	bx	lr

08007ed8 <RVBS_CalcAvVbus>:
  else
  {
#endif
    uint16_t hAux = rawValue;

    if (0xFFFFU == hAux)
 8007ed8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007edc:	4291      	cmp	r1, r2
 8007ede:	d101      	bne.n	8007ee4 <RVBS_CalcAvVbus+0xc>
  uint16_t tempValue = 0U;
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	4770      	bx	lr
    {
      /* Nothing to do */
    }
    else
    {
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8007ee4:	88c2      	ldrh	r2, [r0, #6]
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	1a89      	subs	r1, r1, r2
  */
uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
  uint16_t fault;
  /* If both thresholds are equal, single threshold feature is used */
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007eea:	8940      	ldrh	r0, [r0, #10]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8007eec:	eb02 2221 	add.w	r2, r2, r1, asr #8
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007ef0:	8999      	ldrh	r1, [r3, #12]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8007ef2:	b292      	uxth	r2, r2
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007ef4:	4288      	cmp	r0, r1
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 8007ef6:	80da      	strh	r2, [r3, #6]
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8007ef8:	d012      	beq.n	8007f20 <RVBS_CalcAvVbus+0x48>
    }
  }
  else
  {
    /* If both thresholds are different, hysteresis feature is used (Brake mode) */
    if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007efa:	f8b3 c010 	ldrh.w	ip, [r3, #16]
 8007efe:	4594      	cmp	ip, r2
 8007f00:	d818      	bhi.n	8007f34 <RVBS_CalcAvVbus+0x5c>
{
 8007f02:	b410      	push	{r4}
    {
      fault = MC_UNDER_VOLT;
    }
    else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8007f04:	7b9c      	ldrb	r4, [r3, #14]
 8007f06:	b134      	cbz	r4, 8007f16 <RVBS_CalcAvVbus+0x3e>
        fault = MC_OVER_VOLT;
      }
    }
    else
    {
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007f08:	4282      	cmp	r2, r0
 8007f0a:	d816      	bhi.n	8007f3a <RVBS_CalcAvVbus+0x62>
      {
        pHandle->OverVoltageHysteresisUpDir = false;
        fault = MC_OVER_VOLT;
      }
      else{
        fault = MC_NO_ERROR;
 8007f0c:	2000      	movs	r0, #0
}
 8007f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8007f12:	8118      	strh	r0, [r3, #8]
}
 8007f14:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8007f16:	428a      	cmp	r2, r1
 8007f18:	d211      	bcs.n	8007f3e <RVBS_CalcAvVbus+0x66>
        pHandle->OverVoltageHysteresisUpDir = true;
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	739a      	strb	r2, [r3, #14]
        fault = MC_NO_ERROR;
 8007f1e:	e7f5      	b.n	8007f0c <RVBS_CalcAvVbus+0x34>
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8007f20:	4282      	cmp	r2, r0
 8007f22:	d80e      	bhi.n	8007f42 <RVBS_CalcAvVbus+0x6a>
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8007f24:	8a18      	ldrh	r0, [r3, #16]
 8007f26:	4290      	cmp	r0, r2
 8007f28:	bf94      	ite	ls
 8007f2a:	2000      	movls	r0, #0
 8007f2c:	2001      	movhi	r0, #1
 8007f2e:	0080      	lsls	r0, r0, #2
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8007f30:	8118      	strh	r0, [r3, #8]
}
 8007f32:	4770      	bx	lr
      fault = MC_UNDER_VOLT;
 8007f34:	2004      	movs	r0, #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8007f36:	8118      	strh	r0, [r3, #8]
}
 8007f38:	4770      	bx	lr
        pHandle->OverVoltageHysteresisUpDir = false;
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	739a      	strb	r2, [r3, #14]
        fault = MC_OVER_VOLT;
 8007f3e:	2002      	movs	r0, #2
 8007f40:	e7e5      	b.n	8007f0e <RVBS_CalcAvVbus+0x36>
 8007f42:	2002      	movs	r0, #2
 8007f44:	e7f4      	b.n	8007f30 <RVBS_CalcAvVbus+0x58>
 8007f46:	bf00      	nop

08007f48 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 8007f48:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8007f4a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8007f4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8007f50:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8007f54:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 8007f56:	4770      	bx	lr

08007f58 <SPD_GetMecAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->wMecAngle);
#else
  return (pHandle->wMecAngle);
#endif
}
 8007f58:	6880      	ldr	r0, [r0, #8]
 8007f5a:	4770      	bx	lr

08007f5c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8007f5c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop

08007f64 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8007f64:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 8007f68:	4603      	mov	r3, r0
 8007f6a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 8007f6c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 8007f70:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 8007f74:	bfb8      	it	lt
 8007f76:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007f78:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007f7c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007f7e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8007f80:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 8007f82:	bfb8      	it	lt
 8007f84:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8007f86:	458c      	cmp	ip, r1
 8007f88:	d818      	bhi.n	8007fbc <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8007f8a:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 8007f8e:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 8007f92:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8007f96:	bfb8      	it	lt
 8007f98:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8007f9c:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 8007fa0:	bfb8      	it	lt
 8007fa2:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8007fa6:	45e6      	cmp	lr, ip
 8007fa8:	d308      	bcc.n	8007fbc <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 8007faa:	428c      	cmp	r4, r1
 8007fac:	d306      	bcc.n	8007fbc <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8007fae:	4290      	cmp	r0, r2
 8007fb0:	d809      	bhi.n	8007fc6 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8007fb2:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007fb4:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 8007fb6:	bf18      	it	ne
 8007fb8:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8007fba:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8007fbc:	4290      	cmp	r0, r2
 8007fbe:	d9f8      	bls.n	8007fb2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 8007fc0:	3201      	adds	r2, #1
 8007fc2:	b2d2      	uxtb	r2, r2
 8007fc4:	e7f5      	b.n	8007fb2 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 8007fc6:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007fc8:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 8007fca:	2001      	movs	r0, #1
}
 8007fcc:	bd10      	pop	{r4, pc}
 8007fce:	bf00      	nop

08007fd0 <TC_Init>:
 
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t *pPIDPosReg, SpeednTorqCtrl_Handle_t *pSTC, ENCODER_Handle_t *pENC)
{

  pHandle->MovementDuration = 0.0f;
 8007fd0:	f04f 0c00 	mov.w	ip, #0
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 8007fd4:	6643      	str	r3, [r0, #100]	@ 0x64
  pHandle->TcTick = 0;
 8007fd6:	2300      	movs	r3, #0
  pHandle->pSTC = pSTC;
 8007fd8:	e9c0 211a 	strd	r2, r1, [r0, #104]	@ 0x68
  pHandle->MovementDuration = 0.0f;
 8007fdc:	f8c0 c000 	str.w	ip, [r0]
  pHandle->AngleStep = 0.0f;
 8007fe0:	f8c0 c00c 	str.w	ip, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 8007fe4:	f8c0 c010 	str.w	ip, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 8007fe8:	f8c0 c014 	str.w	ip, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 8007fec:	f8c0 c018 	str.w	ip, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 8007ff0:	f8c0 c01c 	str.w	ip, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 8007ff4:	f8c0 c020 	str.w	ip, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 8007ff8:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
  pHandle->SubStepDuration = 0;
 8007ffc:	f8c0 c028 	str.w	ip, [r0, #40]	@ 0x28
  pHandle->ElapseTime = 0.0f;
 8008000:	f8c0 c02c 	str.w	ip, [r0, #44]	@ 0x2c
  pHandle->Jerk = 0.0f;
 8008004:	f8c0 c034 	str.w	ip, [r0, #52]	@ 0x34
  pHandle->CruiseSpeed = 0.0f;
 8008008:	f8c0 c038 	str.w	ip, [r0, #56]	@ 0x38
  pHandle->Acceleration = 0.0f;
 800800c:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
  pHandle->Omega = 0.0f;
 8008010:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
  pHandle->OmegaPrev = 0.0f;
 8008014:	f8c0 c044 	str.w	ip, [r0, #68]	@ 0x44
  pHandle->Theta = 0.0f;
 8008018:	f8c0 c048 	str.w	ip, [r0, #72]	@ 0x48
  pHandle->ThetaPrev = 0.0f;
 800801c:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
  pHandle->TcTick = 0;
 8008020:	6583      	str	r3, [r0, #88]	@ 0x58
  pHandle->ReceivedTh = 0.0f;
 8008022:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008026:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 800802a:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
}
 800802e:	4770      	bx	lr

08008030 <TC_MoveCommand>:
  * This function implements the Trajectory Control mode. When fDuration is different from 0,
  * the trajectory of the movement, and therefore its acceleration and speed, are computed. 
  * 
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 8008030:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008032:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
 8008036:	2803      	cmp	r0, #3
 8008038:	d061      	beq.n	80080fe <TC_MoveCommand+0xce>
  else
  {
    /* Nothing to do */
  }

  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800803a:	b108      	cbz	r0, 8008040 <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 800803c:	2000      	movs	r0, #0
  else
  {
    /* Nothing to do */
  }
  return (RetConfigStatus);
}
 800803e:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 8008040:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008048:	ddf9      	ble.n	800803e <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800804a:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800804e:	ed9f 4a2f 	vldr	s8, [pc, #188]	@ 800810c <TC_MoveCommand+0xdc>
    pHandle->StartingAngle = startingAngle;
 8008052:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 8008056:	eef2 7a02 	vmov.f32	s15, #34	@ 0x41100000  9.0
 800805a:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800805e:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 8008110 <TC_MoveCommand+0xe0>
    pHandle->AngleStep = angleStep;
 8008062:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008066:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 800806a:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 800806c:	2001      	movs	r0, #1
 800806e:	f883 0051 	strb.w	r0, [r3, #81]	@ 0x51
    pHandle->ElapseTime = 0.0f;
 8008072:	62da      	str	r2, [r3, #44]	@ 0x2c
    pHandle->Omega = 0.0f;
 8008074:	641a      	str	r2, [r3, #64]	@ 0x40
    pHandle->Acceleration = 0.0f;
 8008076:	63da      	str	r2, [r3, #60]	@ 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 8008078:	f883 0060 	strb.w	r0, [r3, #96]	@ 0x60
    pHandle->FinalAngle = startingAngle + angleStep;
 800807c:	ee70 3a20 	vadd.f32	s7, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008080:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008084:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008088:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->FinalAngle = startingAngle + angleStep;
 800808c:	edc3 3a02 	vstr	s7, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 8008090:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008094:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008098:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800809c:	ed83 7a00 	vstr	s14, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80080a0:	ee27 7aa7 	vmul.f32	s14, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80080a4:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80080a8:	ee67 6a87 	vmul.f32	s13, s15, s14
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80080ac:	ee37 7a07 	vadd.f32	s14, s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80080b0:	eec4 3a26 	vdiv.f32	s7, s8, s13
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80080b4:	eeb1 5a08 	vmov.f32	s10, #24	@ 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80080b8:	eef1 5a0c 	vmov.f32	s11, #28	@ 0x40e00000  7.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80080bc:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80080c0:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80080c4:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80080c8:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80080cc:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80080d0:	ee27 7a23 	vmul.f32	s14, s14, s7
    pHandle->Theta = startingAngle;
 80080d4:	ed83 0a12 	vstr	s0, [r3, #72]	@ 0x48
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80080d8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 80080dc:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 80080e0:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80080e4:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80080e8:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 80080ec:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 80080f0:	edc3 6a09 	vstr	s13, [r3, #36]	@ 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80080f4:	edc3 3a0d 	vstr	s7, [r3, #52]	@ 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80080f8:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
  return (RetConfigStatus);
 80080fc:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 80080fe:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 8008102:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008106:	dca0      	bgt.n	800804a <TC_MoveCommand+0x1a>
 8008108:	e798      	b.n	800803c <TC_MoveCommand+0xc>
 800810a:	bf00      	nop
 800810c:	3daaaaab 	.word	0x3daaaaab
 8008110:	3de38e39 	.word	0x3de38e39

08008114 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;

  /* Estimate speed */
  if (pHandle->ReceivedTh > 0)
 8008114:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 8008118:	b383      	cbz	r3, 800817c <TC_FollowCommand+0x68>
  {
    /* Calculate dt */
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800811a:	edd0 7a16 	vldr	s15, [r0, #88]	@ 0x58
 800811e:	ed90 7a17 	vldr	s14, [r0, #92]	@ 0x5c
    pHandle->TcTick = 0;
    if (dt > 0)
 8008122:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 80081a8 <TC_FollowCommand+0x94>
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 8008126:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800812a:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800812c:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 8008130:	6582      	str	r2, [r0, #88]	@ 0x58
    if (dt > 0)
 8008132:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813a:	dd1d      	ble.n	8008178 <TC_FollowCommand+0x64>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800813c:	edd0 6a13 	vldr	s13, [r0, #76]	@ 0x4c
 8008140:	ee70 6a66 	vsub.f32	s13, s0, s13
  {
    /* Nothing to do */
  }

  /* Estimated acceleration */
  if (pHandle->ReceivedTh > 1)
 8008144:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 8008146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1)
 800814a:	d019      	beq.n	8008180 <TC_FollowCommand+0x6c>
  {
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800814c:	ed90 6a11 	vldr	s12, [r0, #68]	@ 0x44
  {
    /* Nothing to do */
  }

  /* Update state variable */
  pHandle->ThetaPrev  = Angle;
 8008150:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 8008154:	ee37 6a46 	vsub.f32	s12, s14, s12
  pHandle->OmegaPrev = omega;
 8008158:	ed80 7a11 	vstr	s14, [r0, #68]	@ 0x44
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800815c:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;

  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 8008160:	2300      	movs	r3, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 8008162:	2203      	movs	r2, #3
 8008164:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
  pHandle->MovementDuration = 0;
 8008168:	6003      	str	r3, [r0, #0]
  pHandle->Acceleration = acceleration;
 800816a:	edc0 6a0f 	vstr	s13, [r0, #60]	@ 0x3c
  pHandle->Omega = omega;
 800816e:	ed80 7a10 	vstr	s14, [r0, #64]	@ 0x40
  pHandle->Theta = Angle;
 8008172:	ed80 0a12 	vstr	s0, [r0, #72]	@ 0x48
}
 8008176:	4770      	bx	lr
  if (pHandle->ReceivedTh > 1)
 8008178:	2b01      	cmp	r3, #1
 800817a:	d10b      	bne.n	8008194 <TC_FollowCommand+0x80>
  float omega = 0, acceleration = 0, dt = 0;
 800817c:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 80081a8 <TC_FollowCommand+0x94>
  pHandle->ThetaPrev  = Angle;
 8008180:	eddf 6a09 	vldr	s13, [pc, #36]	@ 80081a8 <TC_FollowCommand+0x94>
 8008184:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
    pHandle->ReceivedTh++;
 8008188:	3301      	adds	r3, #1
  pHandle->OmegaPrev = omega;
 800818a:	ed80 7a11 	vstr	s14, [r0, #68]	@ 0x44
    pHandle->ReceivedTh++;
 800818e:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 8008192:	e7e5      	b.n	8008160 <TC_FollowCommand+0x4c>
  float omega = 0, acceleration = 0, dt = 0;
 8008194:	eef0 6a46 	vmov.f32	s13, s12
  pHandle->ThetaPrev  = Angle;
 8008198:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
  float omega = 0, acceleration = 0, dt = 0;
 800819c:	eeb0 7a46 	vmov.f32	s14, s12
  pHandle->OmegaPrev = omega;
 80081a0:	ed80 6a11 	vstr	s12, [r0, #68]	@ 0x44
  if (pHandle->ReceivedTh < 2)
 80081a4:	e7dc      	b.n	8008160 <TC_FollowCommand+0x4c>
 80081a6:	bf00      	nop
 80081a8:	00000000 	.word	0x00000000

080081ac <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 80081ac:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
 80081b0:	ed90 6a04 	vldr	s12, [r0, #16]
  }
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
  {

  }
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 80081b4:	edd0 6a00 	vldr	s13, [r0]
  else
  {
    /* Nothing to do */
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 80081b8:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 80081bc:	eef4 7ac6 	vcmpe.f32	s15, s12
 80081c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80081c4:	d531      	bpl.n	800822a <TC_MoveExecution+0x7e>
    jerkApplied = pHandle->Jerk;
 80081c6:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 80081ca:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80081ce:	2b01      	cmp	r3, #1
 80081d0:	d113      	bne.n	80081fa <TC_MoveExecution+0x4e>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80081d2:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80081d6:	ed90 6a10 	vldr	s12, [r0, #64]	@ 0x40
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80081da:	eee5 5a07 	vfma.f32	s11, s10, s14
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80081de:	ed90 5a12 	vldr	s10, [r0, #72]	@ 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 80081e2:	edc0 5a0f 	vstr	s11, [r0, #60]	@ 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80081e6:	eea5 6a87 	vfma.f32	s12, s11, s14
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80081ea:	eef0 5a45 	vmov.f32	s11, s10
 80081ee:	eee6 5a07 	vfma.f32	s11, s12, s14
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80081f2:	ed80 6a10 	vstr	s12, [r0, #64]	@ 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 80081f6:	edc0 5a12 	vstr	s11, [r0, #72]	@ 0x48
  pHandle->ElapseTime += pHandle->SamplingTime;
 80081fa:	ee77 7a87 	vadd.f32	s15, s15, s14
static inline bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  /* Check that entire sequence (Acceleration - Cruise - Deceleration) is completed */
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 80081fe:	ee76 6a87 	vadd.f32	s13, s13, s14
  pHandle->ElapseTime += pHandle->SamplingTime;
 8008202:	edc0 7a0b 	vstr	s15, [r0, #44]	@ 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 8008206:	eef4 7ae6 	vcmpe.f32	s15, s13
 800820a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800820e:	dd0b      	ble.n	8008228 <TC_MoveExecution+0x7c>
    if (TC_ZERO_ALIGNMENT_START == pHandle->AlignmentStatus)
 8008210:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8008214:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 8008216:	bf04      	itt	eq
 8008218:	2305      	moveq	r3, #5
 800821a:	f880 3062 	strbeq.w	r3, [r0, #98]	@ 0x62
    pHandle->ElapseTime = 0;
 800821e:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008220:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 8008222:	62c2      	str	r2, [r0, #44]	@ 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008224:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
}
 8008228:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])       /* 2nd Sub-Step interval time of acceleration phase */
 800822a:	ed90 6a05 	vldr	s12, [r0, #20]
 800822e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008236:	d502      	bpl.n	800823e <TC_MoveExecution+0x92>
  float jerkApplied = 0;
 8008238:	ed9f 5a19 	vldr	s10, [pc, #100]	@ 80082a0 <TC_MoveExecution+0xf4>
 800823c:	e7c5      	b.n	80081ca <TC_MoveExecution+0x1e>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])       /* 3rd Sub-Step interval time of acceleration phase */
 800823e:	ed90 6a06 	vldr	s12, [r0, #24]
 8008242:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824a:	d412      	bmi.n	8008272 <TC_MoveExecution+0xc6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])       /* Speed Cruise phase (after acceleration and before
 800824c:	ed90 6a07 	vldr	s12, [r0, #28]
 8008250:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008258:	d504      	bpl.n	8008264 <TC_MoveExecution+0xb8>
    pHandle->Omega = pHandle->CruiseSpeed;
 800825a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800825c:	6403      	str	r3, [r0, #64]	@ 0x40
    pHandle->Acceleration = 0.0f;
 800825e:	2200      	movs	r2, #0
 8008260:	63c2      	str	r2, [r0, #60]	@ 0x3c
    pHandle->Omega = pHandle->CruiseSpeed;
 8008262:	e7e9      	b.n	8008238 <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])       /* 1st Sub-Step interval time of deceleration phase */
 8008264:	ed90 6a08 	vldr	s12, [r0, #32]
 8008268:	eef4 7ac6 	vcmpe.f32	s15, s12
 800826c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008270:	d504      	bpl.n	800827c <TC_MoveExecution+0xd0>
    jerkApplied = -(pHandle->Jerk);
 8008272:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 8008276:	eeb1 5a45 	vneg.f32	s10, s10
 800827a:	e7a6      	b.n	80081ca <TC_MoveExecution+0x1e>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
 800827c:	ed90 6a09 	vldr	s12, [r0, #36]	@ 0x24
 8008280:	eef4 7ac6 	vcmpe.f32	s15, s12
 8008284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008288:	d4d6      	bmi.n	8008238 <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 800828a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800828e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008292:	d498      	bmi.n	80081c6 <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 8008294:	6882      	ldr	r2, [r0, #8]
 8008296:	6482      	str	r2, [r0, #72]	@ 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 8008298:	2302      	movs	r3, #2
 800829a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 800829e:	e7ac      	b.n	80081fa <TC_MoveExecution+0x4e>
 80082a0:	00000000 	.word	0x00000000

080082a4 <TC_PositionRegulation>:
{
 80082a4:	b538      	push	{r3, r4, r5, lr}
  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 80082a6:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 80082aa:	2b01      	cmp	r3, #1
{
 80082ac:	4604      	mov	r4, r0
  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 80082ae:	d035      	beq.n	800831c <TC_PositionRegulation+0x78>
  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 80082b0:	2b03      	cmp	r3, #3
 80082b2:	d10f      	bne.n	80082d4 <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80082b4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80082b8:	edd4 7a10 	vldr	s15, [r4, #64]	@ 0x40
 80082bc:	ed94 6a0f 	vldr	s12, [r4, #60]	@ 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80082c0:	ed94 7a12 	vldr	s14, [r4, #72]	@ 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80082c4:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80082c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 80082cc:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 80082d0:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 80082d4:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 80082d8:	b903      	cbnz	r3, 80082dc <TC_PositionRegulation+0x38>
}
 80082da:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80082dc:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8008328 <TC_PositionRegulation+0x84>
 80082e0:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 80082e4:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80082e6:	ee67 7a87 	vmul.f32	s15, s15, s14
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80082ea:	6958      	ldr	r0, [r3, #20]
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 80082ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80082f0:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 80082f4:	f7ff fe30 	bl	8007f58 <SPD_GetMecAngle>
    wError = wMecAngleRef - wMecAngle;
 80082f8:	1a29      	subs	r1, r5, r0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 80082fa:	f301 010f 	ssat	r1, #16, r1
 80082fe:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 8008300:	f7fe fe60 	bl	8006fc4 <PID_Controller>
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008304:	2104      	movs	r1, #4
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 8008306:	4605      	mov	r5, r0
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8008308:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800830a:	f7fa ff67 	bl	80031dc <STC_SetControlMode>
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 800830e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 8008310:	4629      	mov	r1, r5
 8008312:	2200      	movs	r2, #0
}
 8008314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 8008318:	f7fa bf64 	b.w	80031e4 <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 800831c:	f7ff ff46 	bl	80081ac <TC_MoveExecution>
  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 8008320:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8008324:	e7c4      	b.n	80082b0 <TC_PositionRegulation+0xc>
 8008326:	bf00      	nop
 8008328:	4622f983 	.word	0x4622f983

0800832c <TC_EncAlignmentCommand>:
{
 800832c:	b510      	push	{r4, lr}
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 800832e:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8008332:	2b02      	cmp	r3, #2
{
 8008334:	b082      	sub	sp, #8
 8008336:	4604      	mov	r4, r0
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 8008338:	d010      	beq.n	800835c <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800833a:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800833e:	2b04      	cmp	r3, #4
 8008340:	d011      	beq.n	8008366 <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 8008342:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 8008344:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 8008346:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 8008348:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 800834a:	6083      	str	r3, [r0, #8]
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800834c:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 8008350:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      pHandle->PositionControlRegulation = ENABLE;
 8008354:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 8008358:	b002      	add	sp, #8
 800835a:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800835c:	2300      	movs	r3, #0
 800835e:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
}
 8008362:	b002      	add	sp, #8
 8008364:	bd10      	pop	{r4, pc}
 8008366:	6e82      	ldr	r2, [r0, #104]	@ 0x68
      pHandle->EncoderAbsoluteAligned = false;
 8008368:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800836a:	6950      	ldr	r0, [r2, #20]
      pHandle->EncoderAbsoluteAligned = false;
 800836c:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008370:	f7ff fdf2 	bl	8007f58 <SPD_GetMecAngle>
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 8008374:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 8008378:	9001      	str	r0, [sp, #4]
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800837a:	2b03      	cmp	r3, #3
 800837c:	d005      	beq.n	800838a <TC_EncAlignmentCommand+0x5e>
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800837e:	b123      	cbz	r3, 800838a <TC_EncAlignmentCommand+0x5e>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 8008380:	2301      	movs	r3, #1
 8008382:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8008386:	b002      	add	sp, #8
 8008388:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800838a:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800838e:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 8008454 <TC_EncAlignmentCommand+0x128>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 8008392:	eddf 5a31 	vldr	s11, [pc, #196]	@ 8008458 <TC_EncAlignmentCommand+0x12c>
    pHandle->AngleStep = angleStep;
 8008396:	eddf 3a31 	vldr	s7, [pc, #196]	@ 800845c <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800839a:	ed9f 2a31 	vldr	s4, [pc, #196]	@ 8008460 <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 800839e:	edc4 3a03 	vstr	s7, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80083a2:	eec6 6a27 	vdiv.f32	s13, s12, s15
    pHandle->ElapseTime = 0.0f;
 80083a6:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 80083a8:	2201      	movs	r2, #1
 80083aa:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
    pHandle->ElapseTime = 0.0f;
 80083ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
    pHandle->Omega = 0.0f;
 80083b0:	6423      	str	r3, [r4, #64]	@ 0x40
    pHandle->Acceleration = 0.0f;
 80083b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 80083b4:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80083b8:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80083bc:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 80083c0:	ee27 6a87 	vmul.f32	s12, s15, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80083c4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80083c8:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8008464 <TC_EncAlignmentCommand+0x138>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80083cc:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80083d0:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80083d4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 80083d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 80083dc:	edc4 6a00 	vstr	s13, [r4]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80083e0:	ee67 6aa7 	vmul.f32	s13, s15, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 80083e4:	ee27 7a25 	vmul.f32	s14, s14, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80083e8:	ee26 6aa7 	vmul.f32	s12, s13, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 80083ec:	ee77 2a23 	vadd.f32	s5, s14, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 80083f0:	eec2 3a06 	vdiv.f32	s7, s4, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 80083f4:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 80083f8:	eeb0 4a08 	vmov.f32	s8, #8	@ 0x40400000  3.0
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 80083fc:	eef1 4a08 	vmov.f32	s9, #24	@ 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008400:	eeb1 5a0c 	vmov.f32	s10, #28	@ 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008404:	eef2 5a00 	vmov.f32	s11, #32	@ 0x41000000  8.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008408:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800840c:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008410:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 8008414:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008418:	ee27 6aa5 	vmul.f32	s12, s15, s11
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800841c:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->StartingAngle = startingAngle;
 8008420:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->FinalAngle = startingAngle + angleStep;
 8008424:	edc4 2a02 	vstr	s5, [r4, #8]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 8008428:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800842c:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 8008430:	ed84 3a05 	vstr	s6, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 8008434:	ed84 4a06 	vstr	s8, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 8008438:	edc4 4a07 	vstr	s9, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800843c:	ed84 5a08 	vstr	s10, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 8008440:	ed84 6a09 	vstr	s12, [r4, #36]	@ 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 8008444:	edc4 3a0d 	vstr	s7, [r4, #52]	@ 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 8008448:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
    pHandle->Theta = startingAngle;
 800844c:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
  return (RetConfigStatus);
 8008450:	e796      	b.n	8008380 <TC_EncAlignmentCommand+0x54>
 8008452:	bf00      	nop
 8008454:	3e638e39 	.word	0x3e638e39
 8008458:	38c90fdb 	.word	0x38c90fdb
 800845c:	40c90fdb 	.word	0x40c90fdb
 8008460:	3f060a92 	.word	0x3f060a92
 8008464:	3de38e39 	.word	0x3de38e39

08008468 <TC_IncTick>:
  * @brief  Increments Tick counter used in follow mode.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 8008468:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800846a:	3301      	adds	r3, #1
 800846c:	6583      	str	r3, [r0, #88]	@ 0x58
}
 800846e:	4770      	bx	lr

08008470 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8008470:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008472:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8008474:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8008476:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800847a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800847c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800847e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8008480:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 8008482:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8008484:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 8008486:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 8008488:	4770      	bx	lr
 800848a:	bf00      	nop

0800848c <VSS_Init>:
{
 800848c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800848e:	f7ff ffef 	bl	8008470 <VSS_Clear>
}
 8008492:	bd08      	pop	{r3, pc}

08008494 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8008494:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 8008498:	b9a3      	cbnz	r3, 80084c4 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800849a:	8b43      	ldrh	r3, [r0, #26]
{
 800849c:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800849e:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80084a0:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80084a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 80084a8:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80084ac:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 80084ae:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 80084b2:	b942      	cbnz	r2, 80084c6 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80084b4:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 80084b8:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80084ba:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 80084be:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80084c0:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 80084c2:	bd10      	pop	{r4, pc}
 80084c4:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 80084c6:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 80084c8:	fb02 f303 	mul.w	r3, r2, r3
 80084cc:	4a0e      	ldr	r2, [pc, #56]	@ (8008508 <VSS_SetMecAcceleration+0x74>)
 80084ce:	fba2 2303 	umull	r2, r3, r2, r3
 80084d2:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 80084d6:	3301      	adds	r3, #1
 80084d8:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80084da:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 80084de:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 80084e0:	b91b      	cbnz	r3, 80084ea <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80084e2:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 80084e4:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80084e6:	6242      	str	r2, [r0, #36]	@ 0x24
}
 80084e8:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80084ea:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80084ee:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80084f2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80084f6:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80084f8:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80084fc:	fb0e f303 	mul.w	r3, lr, r3
 8008500:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8008502:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8008504:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 8008506:	e7ef      	b.n	80084e8 <VSS_SetMecAcceleration+0x54>
 8008508:	10624dd3 	.word	0x10624dd3

0800850c <memset>:
 800850c:	4402      	add	r2, r0
 800850e:	4603      	mov	r3, r0
 8008510:	4293      	cmp	r3, r2
 8008512:	d100      	bne.n	8008516 <memset+0xa>
 8008514:	4770      	bx	lr
 8008516:	f803 1b01 	strb.w	r1, [r3], #1
 800851a:	e7f9      	b.n	8008510 <memset+0x4>

0800851c <__libc_init_array>:
 800851c:	b570      	push	{r4, r5, r6, lr}
 800851e:	4d0d      	ldr	r5, [pc, #52]	@ (8008554 <__libc_init_array+0x38>)
 8008520:	4c0d      	ldr	r4, [pc, #52]	@ (8008558 <__libc_init_array+0x3c>)
 8008522:	1b64      	subs	r4, r4, r5
 8008524:	10a4      	asrs	r4, r4, #2
 8008526:	2600      	movs	r6, #0
 8008528:	42a6      	cmp	r6, r4
 800852a:	d109      	bne.n	8008540 <__libc_init_array+0x24>
 800852c:	4d0b      	ldr	r5, [pc, #44]	@ (800855c <__libc_init_array+0x40>)
 800852e:	4c0c      	ldr	r4, [pc, #48]	@ (8008560 <__libc_init_array+0x44>)
 8008530:	f000 f818 	bl	8008564 <_init>
 8008534:	1b64      	subs	r4, r4, r5
 8008536:	10a4      	asrs	r4, r4, #2
 8008538:	2600      	movs	r6, #0
 800853a:	42a6      	cmp	r6, r4
 800853c:	d105      	bne.n	800854a <__libc_init_array+0x2e>
 800853e:	bd70      	pop	{r4, r5, r6, pc}
 8008540:	f855 3b04 	ldr.w	r3, [r5], #4
 8008544:	4798      	blx	r3
 8008546:	3601      	adds	r6, #1
 8008548:	e7ee      	b.n	8008528 <__libc_init_array+0xc>
 800854a:	f855 3b04 	ldr.w	r3, [r5], #4
 800854e:	4798      	blx	r3
 8008550:	3601      	adds	r6, #1
 8008552:	e7f2      	b.n	800853a <__libc_init_array+0x1e>
 8008554:	08008e40 	.word	0x08008e40
 8008558:	08008e40 	.word	0x08008e40
 800855c:	08008e40 	.word	0x08008e40
 8008560:	08008e44 	.word	0x08008e44

08008564 <_init>:
 8008564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008566:	bf00      	nop
 8008568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856a:	bc08      	pop	{r3}
 800856c:	469e      	mov	lr, r3
 800856e:	4770      	bx	lr

08008570 <_fini>:
 8008570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008572:	bf00      	nop
 8008574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008576:	bc08      	pop	{r3}
 8008578:	469e      	mov	lr, r3
 800857a:	4770      	bx	lr


ARM2025WAIST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b3fc  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b28  0800b5d4  0800b5d4  0000c5d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0fc  0800c0fc  0000e488  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c0fc  0800c0fc  0000d0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c104  0800c104  0000e488  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c104  0800c104  0000d104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c108  0800c108  0000d108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000488  20000000  0800c10c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  20000488  0800c594  0000e488  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c5c  0800c594  0000ec5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e488  2**0
                  CONTENTS, READONLY
 12 .debug_line   00054cb5  00000000  00000000  0000e4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000091  00000000  00000000  0006316d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0005678b  00000000  00000000  000631fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a3ff  00000000  00000000  000b9989  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000024f0  00000000  00000000  000c3d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00112882  00000000  00000000  000c6278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000407c  00000000  00000000  001d8afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 0002258d  00000000  00000000  001dcb76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000318bd  00000000  00000000  001ff103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  002309c0  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000656c  00000000  00000000  00230a04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000488 	.word	0x20000488
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800b5bc 	.word	0x0800b5bc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000048c 	.word	0x2000048c
 8000214:	0800b5bc 	.word	0x0800b5bc

08000218 <__aeabi_dmul>:
 8000218:	b570      	push	{r4, r5, r6, lr}
 800021a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800021e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000222:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000226:	bf1d      	ittte	ne
 8000228:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800022c:	ea94 0f0c 	teqne	r4, ip
 8000230:	ea95 0f0c 	teqne	r5, ip
 8000234:	f000 f8de 	bleq	80003f4 <__aeabi_dmul+0x1dc>
 8000238:	442c      	add	r4, r5
 800023a:	ea81 0603 	eor.w	r6, r1, r3
 800023e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000242:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000246:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800024a:	bf18      	it	ne
 800024c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000250:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000254:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000258:	d038      	beq.n	80002cc <__aeabi_dmul+0xb4>
 800025a:	fba0 ce02 	umull	ip, lr, r0, r2
 800025e:	f04f 0500 	mov.w	r5, #0
 8000262:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000266:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800026a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800026e:	f04f 0600 	mov.w	r6, #0
 8000272:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000276:	f09c 0f00 	teq	ip, #0
 800027a:	bf18      	it	ne
 800027c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000280:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000284:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000288:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800028c:	d204      	bcs.n	8000298 <__aeabi_dmul+0x80>
 800028e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000292:	416d      	adcs	r5, r5
 8000294:	eb46 0606 	adc.w	r6, r6, r6
 8000298:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800029c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80002b0:	bf88      	it	hi
 80002b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80002b6:	d81e      	bhi.n	80002f6 <__aeabi_dmul+0xde>
 80002b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80002bc:	bf08      	it	eq
 80002be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002c2:	f150 0000 	adcs.w	r0, r0, #0
 80002c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ca:	bd70      	pop	{r4, r5, r6, pc}
 80002cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80002d0:	ea46 0101 	orr.w	r1, r6, r1
 80002d4:	ea40 0002 	orr.w	r0, r0, r2
 80002d8:	ea81 0103 	eor.w	r1, r1, r3
 80002dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002e0:	bfc2      	ittt	gt
 80002e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002ea:	bd70      	popgt	{r4, r5, r6, pc}
 80002ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002f0:	f04f 0e00 	mov.w	lr, #0
 80002f4:	3c01      	subs	r4, #1
 80002f6:	f300 80ab 	bgt.w	8000450 <__aeabi_dmul+0x238>
 80002fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80002fe:	bfde      	ittt	le
 8000300:	2000      	movle	r0, #0
 8000302:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000306:	bd70      	pople	{r4, r5, r6, pc}
 8000308:	f1c4 0400 	rsb	r4, r4, #0
 800030c:	3c20      	subs	r4, #32
 800030e:	da35      	bge.n	800037c <__aeabi_dmul+0x164>
 8000310:	340c      	adds	r4, #12
 8000312:	dc1b      	bgt.n	800034c <__aeabi_dmul+0x134>
 8000314:	f104 0414 	add.w	r4, r4, #20
 8000318:	f1c4 0520 	rsb	r5, r4, #32
 800031c:	fa00 f305 	lsl.w	r3, r0, r5
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f205 	lsl.w	r2, r1, r5
 8000328:	ea40 0002 	orr.w	r0, r0, r2
 800032c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000330:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000338:	fa21 f604 	lsr.w	r6, r1, r4
 800033c:	eb42 0106 	adc.w	r1, r2, r6
 8000340:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000344:	bf08      	it	eq
 8000346:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800034a:	bd70      	pop	{r4, r5, r6, pc}
 800034c:	f1c4 040c 	rsb	r4, r4, #12
 8000350:	f1c4 0520 	rsb	r5, r4, #32
 8000354:	fa00 f304 	lsl.w	r3, r0, r4
 8000358:	fa20 f005 	lsr.w	r0, r0, r5
 800035c:	fa01 f204 	lsl.w	r2, r1, r4
 8000360:	ea40 0002 	orr.w	r0, r0, r2
 8000364:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000368:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000374:	bf08      	it	eq
 8000376:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800037a:	bd70      	pop	{r4, r5, r6, pc}
 800037c:	f1c4 0520 	rsb	r5, r4, #32
 8000380:	fa00 f205 	lsl.w	r2, r0, r5
 8000384:	ea4e 0e02 	orr.w	lr, lr, r2
 8000388:	fa20 f304 	lsr.w	r3, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea43 0302 	orr.w	r3, r3, r2
 8000394:	fa21 f004 	lsr.w	r0, r1, r4
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	fa21 f204 	lsr.w	r2, r1, r4
 80003a0:	ea20 0002 	bic.w	r0, r0, r2
 80003a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f094 0f00 	teq	r4, #0
 80003b8:	d10f      	bne.n	80003da <__aeabi_dmul+0x1c2>
 80003ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80003be:	0040      	lsls	r0, r0, #1
 80003c0:	eb41 0101 	adc.w	r1, r1, r1
 80003c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80003c8:	bf08      	it	eq
 80003ca:	3c01      	subeq	r4, #1
 80003cc:	d0f7      	beq.n	80003be <__aeabi_dmul+0x1a6>
 80003ce:	ea41 0106 	orr.w	r1, r1, r6
 80003d2:	f095 0f00 	teq	r5, #0
 80003d6:	bf18      	it	ne
 80003d8:	4770      	bxne	lr
 80003da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80003de:	0052      	lsls	r2, r2, #1
 80003e0:	eb43 0303 	adc.w	r3, r3, r3
 80003e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80003e8:	bf08      	it	eq
 80003ea:	3d01      	subeq	r5, #1
 80003ec:	d0f7      	beq.n	80003de <__aeabi_dmul+0x1c6>
 80003ee:	ea43 0306 	orr.w	r3, r3, r6
 80003f2:	4770      	bx	lr
 80003f4:	ea94 0f0c 	teq	r4, ip
 80003f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003fc:	bf18      	it	ne
 80003fe:	ea95 0f0c 	teqne	r5, ip
 8000402:	d00c      	beq.n	800041e <__aeabi_dmul+0x206>
 8000404:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000408:	bf18      	it	ne
 800040a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800040e:	d1d1      	bne.n	80003b4 <__aeabi_dmul+0x19c>
 8000410:	ea81 0103 	eor.w	r1, r1, r3
 8000414:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000418:	f04f 0000 	mov.w	r0, #0
 800041c:	bd70      	pop	{r4, r5, r6, pc}
 800041e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000422:	bf06      	itte	eq
 8000424:	4610      	moveq	r0, r2
 8000426:	4619      	moveq	r1, r3
 8000428:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800042c:	d019      	beq.n	8000462 <__aeabi_dmul+0x24a>
 800042e:	ea94 0f0c 	teq	r4, ip
 8000432:	d102      	bne.n	800043a <__aeabi_dmul+0x222>
 8000434:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000438:	d113      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800043a:	ea95 0f0c 	teq	r5, ip
 800043e:	d105      	bne.n	800044c <__aeabi_dmul+0x234>
 8000440:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000444:	bf1c      	itt	ne
 8000446:	4610      	movne	r0, r2
 8000448:	4619      	movne	r1, r3
 800044a:	d10a      	bne.n	8000462 <__aeabi_dmul+0x24a>
 800044c:	ea81 0103 	eor.w	r1, r1, r3
 8000450:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd70      	pop	{r4, r5, r6, pc}
 8000462:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000466:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800046a:	bd70      	pop	{r4, r5, r6, pc}

0800046c <__aeabi_drsub>:
 800046c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	e002      	b.n	8000478 <__adddf3>
 8000472:	bf00      	nop

08000474 <__aeabi_dsub>:
 8000474:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000478 <__adddf3>:
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800047e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000482:	ea94 0f05 	teq	r4, r5
 8000486:	bf08      	it	eq
 8000488:	ea90 0f02 	teqeq	r0, r2
 800048c:	bf1f      	itttt	ne
 800048e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000492:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000496:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800049a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800049e:	f000 80e2 	beq.w	8000666 <__adddf3+0x1ee>
 80004a2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004a6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004aa:	bfb8      	it	lt
 80004ac:	426d      	neglt	r5, r5
 80004ae:	dd0c      	ble.n	80004ca <__adddf3+0x52>
 80004b0:	442c      	add	r4, r5
 80004b2:	ea80 0202 	eor.w	r2, r0, r2
 80004b6:	ea81 0303 	eor.w	r3, r1, r3
 80004ba:	ea82 0000 	eor.w	r0, r2, r0
 80004be:	ea83 0101 	eor.w	r1, r3, r1
 80004c2:	ea80 0202 	eor.w	r2, r0, r2
 80004c6:	ea81 0303 	eor.w	r3, r1, r3
 80004ca:	2d36      	cmp	r5, #54	@ 0x36
 80004cc:	bf88      	it	hi
 80004ce:	bd30      	pophi	{r4, r5, pc}
 80004d0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80004d4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004d8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80004dc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004e0:	d002      	beq.n	80004e8 <__adddf3+0x70>
 80004e2:	4240      	negs	r0, r0
 80004e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004e8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80004ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004f0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004f4:	d002      	beq.n	80004fc <__adddf3+0x84>
 80004f6:	4252      	negs	r2, r2
 80004f8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004fc:	ea94 0f05 	teq	r4, r5
 8000500:	f000 80a7 	beq.w	8000652 <__adddf3+0x1da>
 8000504:	f1a4 0401 	sub.w	r4, r4, #1
 8000508:	f1d5 0e20 	rsbs	lr, r5, #32
 800050c:	db0d      	blt.n	800052a <__adddf3+0xb2>
 800050e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000512:	fa22 f205 	lsr.w	r2, r2, r5
 8000516:	1880      	adds	r0, r0, r2
 8000518:	f141 0100 	adc.w	r1, r1, #0
 800051c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000520:	1880      	adds	r0, r0, r2
 8000522:	fa43 f305 	asr.w	r3, r3, r5
 8000526:	4159      	adcs	r1, r3
 8000528:	e00e      	b.n	8000548 <__adddf3+0xd0>
 800052a:	f1a5 0520 	sub.w	r5, r5, #32
 800052e:	f10e 0e20 	add.w	lr, lr, #32
 8000532:	2a01      	cmp	r2, #1
 8000534:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000538:	bf28      	it	cs
 800053a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800053e:	fa43 f305 	asr.w	r3, r3, r5
 8000542:	18c0      	adds	r0, r0, r3
 8000544:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000548:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800054c:	d507      	bpl.n	800055e <__adddf3+0xe6>
 800054e:	f04f 0e00 	mov.w	lr, #0
 8000552:	f1dc 0c00 	rsbs	ip, ip, #0
 8000556:	eb7e 0000 	sbcs.w	r0, lr, r0
 800055a:	eb6e 0101 	sbc.w	r1, lr, r1
 800055e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000562:	d31b      	bcc.n	800059c <__adddf3+0x124>
 8000564:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000568:	d30c      	bcc.n	8000584 <__adddf3+0x10c>
 800056a:	0849      	lsrs	r1, r1, #1
 800056c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000570:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000574:	f104 0401 	add.w	r4, r4, #1
 8000578:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800057c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000580:	f080 809a 	bcs.w	80006b8 <__adddf3+0x240>
 8000584:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000588:	bf08      	it	eq
 800058a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800058e:	f150 0000 	adcs.w	r0, r0, #0
 8000592:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000596:	ea41 0105 	orr.w	r1, r1, r5
 800059a:	bd30      	pop	{r4, r5, pc}
 800059c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005a0:	4140      	adcs	r0, r0
 80005a2:	eb41 0101 	adc.w	r1, r1, r1
 80005a6:	3c01      	subs	r4, #1
 80005a8:	bf28      	it	cs
 80005aa:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80005ae:	d2e9      	bcs.n	8000584 <__adddf3+0x10c>
 80005b0:	f091 0f00 	teq	r1, #0
 80005b4:	bf04      	itt	eq
 80005b6:	4601      	moveq	r1, r0
 80005b8:	2000      	moveq	r0, #0
 80005ba:	fab1 f381 	clz	r3, r1
 80005be:	bf08      	it	eq
 80005c0:	3320      	addeq	r3, #32
 80005c2:	f1a3 030b 	sub.w	r3, r3, #11
 80005c6:	f1b3 0220 	subs.w	r2, r3, #32
 80005ca:	da0c      	bge.n	80005e6 <__adddf3+0x16e>
 80005cc:	320c      	adds	r2, #12
 80005ce:	dd08      	ble.n	80005e2 <__adddf3+0x16a>
 80005d0:	f102 0c14 	add.w	ip, r2, #20
 80005d4:	f1c2 020c 	rsb	r2, r2, #12
 80005d8:	fa01 f00c 	lsl.w	r0, r1, ip
 80005dc:	fa21 f102 	lsr.w	r1, r1, r2
 80005e0:	e00c      	b.n	80005fc <__adddf3+0x184>
 80005e2:	f102 0214 	add.w	r2, r2, #20
 80005e6:	bfd8      	it	le
 80005e8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ec:	fa01 f102 	lsl.w	r1, r1, r2
 80005f0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005f4:	bfdc      	itt	le
 80005f6:	ea41 010c 	orrle.w	r1, r1, ip
 80005fa:	4090      	lslle	r0, r2
 80005fc:	1ae4      	subs	r4, r4, r3
 80005fe:	bfa2      	ittt	ge
 8000600:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000604:	4329      	orrge	r1, r5
 8000606:	bd30      	popge	{r4, r5, pc}
 8000608:	ea6f 0404 	mvn.w	r4, r4
 800060c:	3c1f      	subs	r4, #31
 800060e:	da1c      	bge.n	800064a <__adddf3+0x1d2>
 8000610:	340c      	adds	r4, #12
 8000612:	dc0e      	bgt.n	8000632 <__adddf3+0x1ba>
 8000614:	f104 0414 	add.w	r4, r4, #20
 8000618:	f1c4 0220 	rsb	r2, r4, #32
 800061c:	fa20 f004 	lsr.w	r0, r0, r4
 8000620:	fa01 f302 	lsl.w	r3, r1, r2
 8000624:	ea40 0003 	orr.w	r0, r0, r3
 8000628:	fa21 f304 	lsr.w	r3, r1, r4
 800062c:	ea45 0103 	orr.w	r1, r5, r3
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	f1c4 040c 	rsb	r4, r4, #12
 8000636:	f1c4 0220 	rsb	r2, r4, #32
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 f304 	lsl.w	r3, r1, r4
 8000642:	ea40 0003 	orr.w	r0, r0, r3
 8000646:	4629      	mov	r1, r5
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	fa21 f004 	lsr.w	r0, r1, r4
 800064e:	4629      	mov	r1, r5
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	f094 0f00 	teq	r4, #0
 8000656:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800065a:	bf06      	itte	eq
 800065c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000660:	3401      	addeq	r4, #1
 8000662:	3d01      	subne	r5, #1
 8000664:	e74e      	b.n	8000504 <__adddf3+0x8c>
 8000666:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800066a:	bf18      	it	ne
 800066c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000670:	d029      	beq.n	80006c6 <__adddf3+0x24e>
 8000672:	ea94 0f05 	teq	r4, r5
 8000676:	bf08      	it	eq
 8000678:	ea90 0f02 	teqeq	r0, r2
 800067c:	d005      	beq.n	800068a <__adddf3+0x212>
 800067e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000682:	bf04      	itt	eq
 8000684:	4619      	moveq	r1, r3
 8000686:	4610      	moveq	r0, r2
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	ea91 0f03 	teq	r1, r3
 800068e:	bf1e      	ittt	ne
 8000690:	2100      	movne	r1, #0
 8000692:	2000      	movne	r0, #0
 8000694:	bd30      	popne	{r4, r5, pc}
 8000696:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800069a:	d105      	bne.n	80006a8 <__adddf3+0x230>
 800069c:	0040      	lsls	r0, r0, #1
 800069e:	4149      	adcs	r1, r1
 80006a0:	bf28      	it	cs
 80006a2:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd30      	pop	{r4, r5, pc}
 80006a8:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80006ac:	bf3c      	itt	cc
 80006ae:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80006b2:	bd30      	popcc	{r4, r5, pc}
 80006b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b8:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80006bc:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80006c0:	f04f 0000 	mov.w	r0, #0
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006ca:	bf1a      	itte	ne
 80006cc:	4619      	movne	r1, r3
 80006ce:	4610      	movne	r0, r2
 80006d0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006d4:	bf1c      	itt	ne
 80006d6:	460b      	movne	r3, r1
 80006d8:	4602      	movne	r2, r0
 80006da:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006de:	bf06      	itte	eq
 80006e0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006e4:	ea91 0f03 	teqeq	r1, r3
 80006e8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop

080006f0 <__aeabi_ui2d>:
 80006f0:	f090 0f00 	teq	r0, #0
 80006f4:	bf04      	itt	eq
 80006f6:	2100      	moveq	r1, #0
 80006f8:	4770      	bxeq	lr
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000700:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000704:	f04f 0500 	mov.w	r5, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	e750      	b.n	80005b0 <__adddf3+0x138>
 800070e:	bf00      	nop

08000710 <__aeabi_i2d>:
 8000710:	f090 0f00 	teq	r0, #0
 8000714:	bf04      	itt	eq
 8000716:	2100      	moveq	r1, #0
 8000718:	4770      	bxeq	lr
 800071a:	b530      	push	{r4, r5, lr}
 800071c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000720:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000724:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000728:	bf48      	it	mi
 800072a:	4240      	negmi	r0, r0
 800072c:	f04f 0100 	mov.w	r1, #0
 8000730:	e73e      	b.n	80005b0 <__adddf3+0x138>
 8000732:	bf00      	nop

08000734 <__aeabi_f2d>:
 8000734:	0042      	lsls	r2, r0, #1
 8000736:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800073a:	ea4f 0131 	mov.w	r1, r1, rrx
 800073e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000742:	bf1f      	itttt	ne
 8000744:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000748:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800074c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000750:	4770      	bxne	lr
 8000752:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000756:	bf08      	it	eq
 8000758:	4770      	bxeq	lr
 800075a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800075e:	bf04      	itt	eq
 8000760:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000764:	4770      	bxeq	lr
 8000766:	b530      	push	{r4, r5, lr}
 8000768:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800076c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000774:	e71c      	b.n	80005b0 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_ul2d>:
 8000778:	ea50 0201 	orrs.w	r2, r0, r1
 800077c:	bf08      	it	eq
 800077e:	4770      	bxeq	lr
 8000780:	b530      	push	{r4, r5, lr}
 8000782:	f04f 0500 	mov.w	r5, #0
 8000786:	e00a      	b.n	800079e <__aeabi_l2d+0x16>

08000788 <__aeabi_l2d>:
 8000788:	ea50 0201 	orrs.w	r2, r0, r1
 800078c:	bf08      	it	eq
 800078e:	4770      	bxeq	lr
 8000790:	b530      	push	{r4, r5, lr}
 8000792:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000796:	d502      	bpl.n	800079e <__aeabi_l2d+0x16>
 8000798:	4240      	negs	r0, r0
 800079a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800079e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a2:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007aa:	f43f aed8 	beq.w	800055e <__adddf3+0xe6>
 80007ae:	f04f 0203 	mov.w	r2, #3
 80007b2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007b6:	bf18      	it	ne
 80007b8:	3203      	addne	r2, #3
 80007ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007be:	bf18      	it	ne
 80007c0:	3203      	addne	r2, #3
 80007c2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007c6:	f1c2 0320 	rsb	r3, r2, #32
 80007ca:	fa00 fc03 	lsl.w	ip, r0, r3
 80007ce:	fa20 f002 	lsr.w	r0, r0, r2
 80007d2:	fa01 fe03 	lsl.w	lr, r1, r3
 80007d6:	ea40 000e 	orr.w	r0, r0, lr
 80007da:	fa21 f102 	lsr.w	r1, r1, r2
 80007de:	4414      	add	r4, r2
 80007e0:	e6bd      	b.n	800055e <__adddf3+0xe6>
 80007e2:	bf00      	nop

080007e4 <__gedf2>:
 80007e4:	f04f 3cff 	mov.w	ip, #4294967295
 80007e8:	e006      	b.n	80007f8 <__cmpdf2+0x4>
 80007ea:	bf00      	nop

080007ec <__ledf2>:
 80007ec:	f04f 0c01 	mov.w	ip, #1
 80007f0:	e002      	b.n	80007f8 <__cmpdf2+0x4>
 80007f2:	bf00      	nop

080007f4 <__cmpdf2>:
 80007f4:	f04f 0c01 	mov.w	ip, #1
 80007f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000800:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800080e:	d01b      	beq.n	8000848 <__cmpdf2+0x54>
 8000810:	b001      	add	sp, #4
 8000812:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000816:	bf0c      	ite	eq
 8000818:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800081c:	ea91 0f03 	teqne	r1, r3
 8000820:	bf02      	ittt	eq
 8000822:	ea90 0f02 	teqeq	r0, r2
 8000826:	2000      	moveq	r0, #0
 8000828:	4770      	bxeq	lr
 800082a:	f110 0f00 	cmn.w	r0, #0
 800082e:	ea91 0f03 	teq	r1, r3
 8000832:	bf58      	it	pl
 8000834:	4299      	cmppl	r1, r3
 8000836:	bf08      	it	eq
 8000838:	4290      	cmpeq	r0, r2
 800083a:	bf2c      	ite	cs
 800083c:	17d8      	asrcs	r0, r3, #31
 800083e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000842:	f040 0001 	orr.w	r0, r0, #1
 8000846:	4770      	bx	lr
 8000848:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800084c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000850:	d102      	bne.n	8000858 <__cmpdf2+0x64>
 8000852:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000856:	d107      	bne.n	8000868 <__cmpdf2+0x74>
 8000858:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800085c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000860:	d1d6      	bne.n	8000810 <__cmpdf2+0x1c>
 8000862:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000866:	d0d3      	beq.n	8000810 <__cmpdf2+0x1c>
 8000868:	f85d 0b04 	ldr.w	r0, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop

08000870 <__aeabi_cdrcmple>:
 8000870:	4684      	mov	ip, r0
 8000872:	4610      	mov	r0, r2
 8000874:	4662      	mov	r2, ip
 8000876:	468c      	mov	ip, r1
 8000878:	4619      	mov	r1, r3
 800087a:	4663      	mov	r3, ip
 800087c:	e000      	b.n	8000880 <__aeabi_cdcmpeq>
 800087e:	bf00      	nop

08000880 <__aeabi_cdcmpeq>:
 8000880:	b501      	push	{r0, lr}
 8000882:	f7ff ffb7 	bl	80007f4 <__cmpdf2>
 8000886:	2800      	cmp	r0, #0
 8000888:	bf48      	it	mi
 800088a:	f110 0f00 	cmnmi.w	r0, #0
 800088e:	bd01      	pop	{r0, pc}

08000890 <__aeabi_dcmpeq>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff fff4 	bl	8000880 <__aeabi_cdcmpeq>
 8000898:	bf0c      	ite	eq
 800089a:	2001      	moveq	r0, #1
 800089c:	2000      	movne	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_dcmplt>:
 80008a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008a8:	f7ff ffea 	bl	8000880 <__aeabi_cdcmpeq>
 80008ac:	bf34      	ite	cc
 80008ae:	2001      	movcc	r0, #1
 80008b0:	2000      	movcs	r0, #0
 80008b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80008b6:	bf00      	nop

080008b8 <__aeabi_dcmple>:
 80008b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008bc:	f7ff ffe0 	bl	8000880 <__aeabi_cdcmpeq>
 80008c0:	bf94      	ite	ls
 80008c2:	2001      	movls	r0, #1
 80008c4:	2000      	movhi	r0, #0
 80008c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80008ca:	bf00      	nop

080008cc <__aeabi_dcmpge>:
 80008cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008d0:	f7ff ffce 	bl	8000870 <__aeabi_cdrcmple>
 80008d4:	bf94      	ite	ls
 80008d6:	2001      	movls	r0, #1
 80008d8:	2000      	movhi	r0, #0
 80008da:	f85d fb08 	ldr.w	pc, [sp], #8
 80008de:	bf00      	nop

080008e0 <__aeabi_dcmpgt>:
 80008e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80008e4:	f7ff ffc4 	bl	8000870 <__aeabi_cdrcmple>
 80008e8:	bf34      	ite	cc
 80008ea:	2001      	movcc	r0, #1
 80008ec:	2000      	movcs	r0, #0
 80008ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80008f2:	bf00      	nop

080008f4 <__aeabi_d2f>:
 80008f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008fc:	bf24      	itt	cs
 80008fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000902:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000906:	d90d      	bls.n	8000924 <__aeabi_d2f+0x30>
 8000908:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800090c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000910:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000914:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000918:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800091c:	bf08      	it	eq
 800091e:	f020 0001 	biceq.w	r0, r0, #1
 8000922:	4770      	bx	lr
 8000924:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000928:	d121      	bne.n	800096e <__aeabi_d2f+0x7a>
 800092a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 800092e:	bfbc      	itt	lt
 8000930:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000934:	4770      	bxlt	lr
 8000936:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800093a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800093e:	f1c2 0218 	rsb	r2, r2, #24
 8000942:	f1c2 0c20 	rsb	ip, r2, #32
 8000946:	fa10 f30c 	lsls.w	r3, r0, ip
 800094a:	fa20 f002 	lsr.w	r0, r0, r2
 800094e:	bf18      	it	ne
 8000950:	f040 0001 	orrne.w	r0, r0, #1
 8000954:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000958:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800095c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000960:	ea40 000c 	orr.w	r0, r0, ip
 8000964:	fa23 f302 	lsr.w	r3, r3, r2
 8000968:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800096c:	e7cc      	b.n	8000908 <__aeabi_d2f+0x14>
 800096e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000972:	d107      	bne.n	8000984 <__aeabi_d2f+0x90>
 8000974:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000978:	bf1e      	ittt	ne
 800097a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800097e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000982:	4770      	bxne	lr
 8000984:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000988:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800098c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop

08000994 <__aeabi_uldivmod>:
 8000994:	b953      	cbnz	r3, 80009ac <__aeabi_uldivmod+0x18>
 8000996:	b94a      	cbnz	r2, 80009ac <__aeabi_uldivmod+0x18>
 8000998:	2900      	cmp	r1, #0
 800099a:	bf08      	it	eq
 800099c:	2800      	cmpeq	r0, #0
 800099e:	bf1c      	itt	ne
 80009a0:	f04f 31ff 	movne.w	r1, #4294967295
 80009a4:	f04f 30ff 	movne.w	r0, #4294967295
 80009a8:	f000 b988 	b.w	8000cbc <__aeabi_idiv0>
 80009ac:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009b4:	f000 f806 	bl	80009c4 <__udivmoddi4>
 80009b8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c0:	b004      	add	sp, #16
 80009c2:	4770      	bx	lr

080009c4 <__udivmoddi4>:
 80009c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009c8:	9d08      	ldr	r5, [sp, #32]
 80009ca:	468e      	mov	lr, r1
 80009cc:	4604      	mov	r4, r0
 80009ce:	4688      	mov	r8, r1
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d14a      	bne.n	8000a6a <__udivmoddi4+0xa6>
 80009d4:	428a      	cmp	r2, r1
 80009d6:	4617      	mov	r7, r2
 80009d8:	d962      	bls.n	8000aa0 <__udivmoddi4+0xdc>
 80009da:	fab2 f682 	clz	r6, r2
 80009de:	b14e      	cbz	r6, 80009f4 <__udivmoddi4+0x30>
 80009e0:	f1c6 0320 	rsb	r3, r6, #32
 80009e4:	fa01 f806 	lsl.w	r8, r1, r6
 80009e8:	fa20 f303 	lsr.w	r3, r0, r3
 80009ec:	40b7      	lsls	r7, r6
 80009ee:	ea43 0808 	orr.w	r8, r3, r8
 80009f2:	40b4      	lsls	r4, r6
 80009f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f8:	fa1f fc87 	uxth.w	ip, r7
 80009fc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000a00:	0c23      	lsrs	r3, r4, #16
 8000a02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000a06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d909      	bls.n	8000a26 <__udivmoddi4+0x62>
 8000a12:	18fb      	adds	r3, r7, r3
 8000a14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000a18:	f080 80ea 	bcs.w	8000bf0 <__udivmoddi4+0x22c>
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	f240 80e7 	bls.w	8000bf0 <__udivmoddi4+0x22c>
 8000a22:	3902      	subs	r1, #2
 8000a24:	443b      	add	r3, r7
 8000a26:	1a9a      	subs	r2, r3, r2
 8000a28:	b2a3      	uxth	r3, r4
 8000a2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000a36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a3a:	459c      	cmp	ip, r3
 8000a3c:	d909      	bls.n	8000a52 <__udivmoddi4+0x8e>
 8000a3e:	18fb      	adds	r3, r7, r3
 8000a40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a44:	f080 80d6 	bcs.w	8000bf4 <__udivmoddi4+0x230>
 8000a48:	459c      	cmp	ip, r3
 8000a4a:	f240 80d3 	bls.w	8000bf4 <__udivmoddi4+0x230>
 8000a4e:	443b      	add	r3, r7
 8000a50:	3802      	subs	r0, #2
 8000a52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a56:	eba3 030c 	sub.w	r3, r3, ip
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	b11d      	cbz	r5, 8000a66 <__udivmoddi4+0xa2>
 8000a5e:	40f3      	lsrs	r3, r6
 8000a60:	2200      	movs	r2, #0
 8000a62:	e9c5 3200 	strd	r3, r2, [r5]
 8000a66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a6a:	428b      	cmp	r3, r1
 8000a6c:	d905      	bls.n	8000a7a <__udivmoddi4+0xb6>
 8000a6e:	b10d      	cbz	r5, 8000a74 <__udivmoddi4+0xb0>
 8000a70:	e9c5 0100 	strd	r0, r1, [r5]
 8000a74:	2100      	movs	r1, #0
 8000a76:	4608      	mov	r0, r1
 8000a78:	e7f5      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000a7a:	fab3 f183 	clz	r1, r3
 8000a7e:	2900      	cmp	r1, #0
 8000a80:	d146      	bne.n	8000b10 <__udivmoddi4+0x14c>
 8000a82:	4573      	cmp	r3, lr
 8000a84:	d302      	bcc.n	8000a8c <__udivmoddi4+0xc8>
 8000a86:	4282      	cmp	r2, r0
 8000a88:	f200 8105 	bhi.w	8000c96 <__udivmoddi4+0x2d2>
 8000a8c:	1a84      	subs	r4, r0, r2
 8000a8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000a92:	2001      	movs	r0, #1
 8000a94:	4690      	mov	r8, r2
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d0e5      	beq.n	8000a66 <__udivmoddi4+0xa2>
 8000a9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000a9e:	e7e2      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000aa0:	2a00      	cmp	r2, #0
 8000aa2:	f000 8090 	beq.w	8000bc6 <__udivmoddi4+0x202>
 8000aa6:	fab2 f682 	clz	r6, r2
 8000aaa:	2e00      	cmp	r6, #0
 8000aac:	f040 80a4 	bne.w	8000bf8 <__udivmoddi4+0x234>
 8000ab0:	1a8a      	subs	r2, r1, r2
 8000ab2:	0c03      	lsrs	r3, r0, #16
 8000ab4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab8:	b280      	uxth	r0, r0
 8000aba:	b2bc      	uxth	r4, r7
 8000abc:	2101      	movs	r1, #1
 8000abe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ac2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000aca:	fb04 f20c 	mul.w	r2, r4, ip
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	d907      	bls.n	8000ae2 <__udivmoddi4+0x11e>
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ad8:	d202      	bcs.n	8000ae0 <__udivmoddi4+0x11c>
 8000ada:	429a      	cmp	r2, r3
 8000adc:	f200 80e0 	bhi.w	8000ca0 <__udivmoddi4+0x2dc>
 8000ae0:	46c4      	mov	ip, r8
 8000ae2:	1a9b      	subs	r3, r3, r2
 8000ae4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ae8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000aec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000af0:	fb02 f404 	mul.w	r4, r2, r4
 8000af4:	429c      	cmp	r4, r3
 8000af6:	d907      	bls.n	8000b08 <__udivmoddi4+0x144>
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x142>
 8000b00:	429c      	cmp	r4, r3
 8000b02:	f200 80ca 	bhi.w	8000c9a <__udivmoddi4+0x2d6>
 8000b06:	4602      	mov	r2, r0
 8000b08:	1b1b      	subs	r3, r3, r4
 8000b0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000b0e:	e7a5      	b.n	8000a5c <__udivmoddi4+0x98>
 8000b10:	f1c1 0620 	rsb	r6, r1, #32
 8000b14:	408b      	lsls	r3, r1
 8000b16:	fa22 f706 	lsr.w	r7, r2, r6
 8000b1a:	431f      	orrs	r7, r3
 8000b1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000b20:	fa20 f306 	lsr.w	r3, r0, r6
 8000b24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000b28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000b2c:	4323      	orrs	r3, r4
 8000b2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b32:	fa1f fc87 	uxth.w	ip, r7
 8000b36:	fbbe f0f9 	udiv	r0, lr, r9
 8000b3a:	0c1c      	lsrs	r4, r3, #16
 8000b3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000b40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000b44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000b48:	45a6      	cmp	lr, r4
 8000b4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b4e:	d909      	bls.n	8000b64 <__udivmoddi4+0x1a0>
 8000b50:	193c      	adds	r4, r7, r4
 8000b52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000b56:	f080 809c 	bcs.w	8000c92 <__udivmoddi4+0x2ce>
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	f240 8099 	bls.w	8000c92 <__udivmoddi4+0x2ce>
 8000b60:	3802      	subs	r0, #2
 8000b62:	443c      	add	r4, r7
 8000b64:	eba4 040e 	sub.w	r4, r4, lr
 8000b68:	fa1f fe83 	uxth.w	lr, r3
 8000b6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b70:	fb09 4413 	mls	r4, r9, r3, r4
 8000b74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000b78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b7c:	45a4      	cmp	ip, r4
 8000b7e:	d908      	bls.n	8000b92 <__udivmoddi4+0x1ce>
 8000b80:	193c      	adds	r4, r7, r4
 8000b82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000b86:	f080 8082 	bcs.w	8000c8e <__udivmoddi4+0x2ca>
 8000b8a:	45a4      	cmp	ip, r4
 8000b8c:	d97f      	bls.n	8000c8e <__udivmoddi4+0x2ca>
 8000b8e:	3b02      	subs	r3, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000b96:	eba4 040c 	sub.w	r4, r4, ip
 8000b9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000b9e:	4564      	cmp	r4, ip
 8000ba0:	4673      	mov	r3, lr
 8000ba2:	46e1      	mov	r9, ip
 8000ba4:	d362      	bcc.n	8000c6c <__udivmoddi4+0x2a8>
 8000ba6:	d05f      	beq.n	8000c68 <__udivmoddi4+0x2a4>
 8000ba8:	b15d      	cbz	r5, 8000bc2 <__udivmoddi4+0x1fe>
 8000baa:	ebb8 0203 	subs.w	r2, r8, r3
 8000bae:	eb64 0409 	sbc.w	r4, r4, r9
 8000bb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000bb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000bba:	431e      	orrs	r6, r3
 8000bbc:	40cc      	lsrs	r4, r1
 8000bbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	e74f      	b.n	8000a66 <__udivmoddi4+0xa2>
 8000bc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000bca:	0c01      	lsrs	r1, r0, #16
 8000bcc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000bd0:	b280      	uxth	r0, r0
 8000bd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000bd6:	463b      	mov	r3, r7
 8000bd8:	4638      	mov	r0, r7
 8000bda:	463c      	mov	r4, r7
 8000bdc:	46b8      	mov	r8, r7
 8000bde:	46be      	mov	lr, r7
 8000be0:	2620      	movs	r6, #32
 8000be2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000be6:	eba2 0208 	sub.w	r2, r2, r8
 8000bea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000bee:	e766      	b.n	8000abe <__udivmoddi4+0xfa>
 8000bf0:	4601      	mov	r1, r0
 8000bf2:	e718      	b.n	8000a26 <__udivmoddi4+0x62>
 8000bf4:	4610      	mov	r0, r2
 8000bf6:	e72c      	b.n	8000a52 <__udivmoddi4+0x8e>
 8000bf8:	f1c6 0220 	rsb	r2, r6, #32
 8000bfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	40b1      	lsls	r1, r6
 8000c04:	fa20 f202 	lsr.w	r2, r0, r2
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	430a      	orrs	r2, r1
 8000c0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000c12:	b2bc      	uxth	r4, r7
 8000c14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c1e:	fb08 f904 	mul.w	r9, r8, r4
 8000c22:	40b0      	lsls	r0, r6
 8000c24:	4589      	cmp	r9, r1
 8000c26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000c2a:	b280      	uxth	r0, r0
 8000c2c:	d93e      	bls.n	8000cac <__udivmoddi4+0x2e8>
 8000c2e:	1879      	adds	r1, r7, r1
 8000c30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000c34:	d201      	bcs.n	8000c3a <__udivmoddi4+0x276>
 8000c36:	4589      	cmp	r9, r1
 8000c38:	d81f      	bhi.n	8000c7a <__udivmoddi4+0x2b6>
 8000c3a:	eba1 0109 	sub.w	r1, r1, r9
 8000c3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c42:	fb09 f804 	mul.w	r8, r9, r4
 8000c46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c4a:	b292      	uxth	r2, r2
 8000c4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c50:	4542      	cmp	r2, r8
 8000c52:	d229      	bcs.n	8000ca8 <__udivmoddi4+0x2e4>
 8000c54:	18ba      	adds	r2, r7, r2
 8000c56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000c5a:	d2c4      	bcs.n	8000be6 <__udivmoddi4+0x222>
 8000c5c:	4542      	cmp	r2, r8
 8000c5e:	d2c2      	bcs.n	8000be6 <__udivmoddi4+0x222>
 8000c60:	f1a9 0102 	sub.w	r1, r9, #2
 8000c64:	443a      	add	r2, r7
 8000c66:	e7be      	b.n	8000be6 <__udivmoddi4+0x222>
 8000c68:	45f0      	cmp	r8, lr
 8000c6a:	d29d      	bcs.n	8000ba8 <__udivmoddi4+0x1e4>
 8000c6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000c70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000c74:	3801      	subs	r0, #1
 8000c76:	46e1      	mov	r9, ip
 8000c78:	e796      	b.n	8000ba8 <__udivmoddi4+0x1e4>
 8000c7a:	eba7 0909 	sub.w	r9, r7, r9
 8000c7e:	4449      	add	r1, r9
 8000c80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000c84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c88:	fb09 f804 	mul.w	r8, r9, r4
 8000c8c:	e7db      	b.n	8000c46 <__udivmoddi4+0x282>
 8000c8e:	4673      	mov	r3, lr
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1ce>
 8000c92:	4650      	mov	r0, sl
 8000c94:	e766      	b.n	8000b64 <__udivmoddi4+0x1a0>
 8000c96:	4608      	mov	r0, r1
 8000c98:	e6fd      	b.n	8000a96 <__udivmoddi4+0xd2>
 8000c9a:	443b      	add	r3, r7
 8000c9c:	3a02      	subs	r2, #2
 8000c9e:	e733      	b.n	8000b08 <__udivmoddi4+0x144>
 8000ca0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ca4:	443b      	add	r3, r7
 8000ca6:	e71c      	b.n	8000ae2 <__udivmoddi4+0x11e>
 8000ca8:	4649      	mov	r1, r9
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x222>
 8000cac:	eba1 0109 	sub.w	r1, r1, r9
 8000cb0:	46c4      	mov	ip, r8
 8000cb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cb6:	fb09 f804 	mul.w	r8, r9, r4
 8000cba:	e7c4      	b.n	8000c46 <__udivmoddi4+0x282>

08000cbc <__aeabi_idiv0>:
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop

08000cc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cc0:	480d      	ldr	r0, [pc, #52]	@ (8000cf8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cc2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cc4:	f005 f88a 	bl	8005ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc8:	480c      	ldr	r0, [pc, #48]	@ (8000cfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000cca:	490d      	ldr	r1, [pc, #52]	@ (8000d00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ccc:	4a0d      	ldr	r2, [pc, #52]	@ (8000d04 <LoopForever+0xe>)
  movs r3, #0
 8000cce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000cd0:	e002      	b.n	8000cd8 <LoopCopyDataInit>

08000cd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cd6:	3304      	adds	r3, #4

08000cd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cdc:	d3f9      	bcc.n	8000cd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cde:	4a0a      	ldr	r2, [pc, #40]	@ (8000d08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ce0:	4c0a      	ldr	r4, [pc, #40]	@ (8000d0c <LoopForever+0x16>)
  movs r3, #0
 8000ce2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce4:	e001      	b.n	8000cea <LoopFillZerobss>

08000ce6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ce6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce8:	3204      	adds	r2, #4

08000cea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cec:	d3fb      	bcc.n	8000ce6 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000cee:	f00a fc33 	bl	800b558 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cf2:	f001 fc79 	bl	80025e8 <main>

08000cf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf6:	e7fe      	b.n	8000cf6 <LoopForever>
  ldr   r0, =_estack
 8000cf8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d00:	20000488 	.word	0x20000488
  ldr r2, =_sidata
 8000d04:	0800c10c 	.word	0x0800c10c
  ldr r2, =_sbss
 8000d08:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8000d0c:	20001c5c 	.word	0x20001c5c

08000d10 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d10:	e7fe      	b.n	8000d10 <BusFault_Handler>
	...

08000d14 <CalibrateSingleMotor>:

}

bool CalibrateSingleMotor(void){

	isCalibrating = true;
 8000d14:	4b1a      	ldr	r3, [pc, #104]	@ (8000d80 <CalibrateSingleMotor+0x6c>)
bool CalibrateSingleMotor(void){
 8000d16:	b510      	push	{r4, lr}
	isCalibrating = true;
 8000d18:	2201      	movs	r2, #1
 8000d1a:	701a      	strb	r2, [r3, #0]
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 8000d1c:	f002 f84c 	bl	8002db8 <MC_GetSTMStateMotor1>
	uint32_t tStart;



	if (motorState != IDLE){
 8000d20:	b1a8      	cbz	r0, 8000d4e <CalibrateSingleMotor+0x3a>
		MC_StopMotor1();
 8000d22:	f002 f811 	bl	8002d48 <MC_StopMotor1>

		//  Wait for motor to become IDLE
		tStart = HAL_GetTick();
 8000d26:	f005 f8ad 	bl	8005e84 <HAL_GetTick>
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	e005      	b.n	8000d3a <CalibrateSingleMotor+0x26>
				 uart_debug_print("Motor is now stopped \r\n");
				////////////////////////////////////////////////////////////////////////////////////////////////////////
				 break;
			}

			if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 8000d2e:	f005 f8a9 	bl	8005e84 <HAL_GetTick>
 8000d32:	1b00      	subs	r0, r0, r4
 8000d34:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8000d38:	d813      	bhi.n	8000d62 <CalibrateSingleMotor+0x4e>
			HAL_Delay(5); // poll the state until it IDLE
 8000d3a:	2005      	movs	r0, #5
 8000d3c:	f005 f8a8 	bl	8005e90 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8000d40:	f002 f83a 	bl	8002db8 <MC_GetSTMStateMotor1>
			if (currState == IDLE) {
 8000d44:	2800      	cmp	r0, #0
 8000d46:	d1f2      	bne.n	8000d2e <CalibrateSingleMotor+0x1a>
				 uart_debug_print("Motor is now stopped \r\n");
 8000d48:	480e      	ldr	r0, [pc, #56]	@ (8000d84 <CalibrateSingleMotor+0x70>)
 8000d4a:	f004 ffbb 	bl	8005cc4 <uart_debug_print>
				return false;
			}
		}
	}

	MC_ProgramPositionCommandMotor1(0, 0); //Hold current position after Start
 8000d4e:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000d88 <CalibrateSingleMotor+0x74>
 8000d52:	eeb0 0a60 	vmov.f32	s0, s1
 8000d56:	f002 f805 	bl	8002d64 <MC_ProgramPositionCommandMotor1>
	if (!MC_StartMotor1()) {
 8000d5a:	f001 ffef 	bl	8002d3c <MC_StartMotor1>
 8000d5e:	b158      	cbz	r0, 8000d78 <CalibrateSingleMotor+0x64>
				////////////////////////////////////////////////////////////////////////////////////////////////////////
				return false; // start failed
			}
		return true;
	}
}
 8000d60:	bd10      	pop	{r4, pc}
				uart_debug_print("Motor failed to stop in time!!\r\n");
 8000d62:	480a      	ldr	r0, [pc, #40]	@ (8000d8c <CalibrateSingleMotor+0x78>)
 8000d64:	f004 ffae 	bl	8005cc4 <uart_debug_print>
				MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000d68:	4809      	ldr	r0, [pc, #36]	@ (8000d90 <CalibrateSingleMotor+0x7c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000d70:	f002 f896 	bl	8002ea0 <MCI_FaultProcessing>
				return false;
 8000d74:	2000      	movs	r0, #0
}
 8000d76:	bd10      	pop	{r4, pc}
			 uart_debug_print("Start Failed...");
 8000d78:	4806      	ldr	r0, [pc, #24]	@ (8000d94 <CalibrateSingleMotor+0x80>)
 8000d7a:	f004 ffa3 	bl	8005cc4 <uart_debug_print>
			return false; // start failed
 8000d7e:	e7f9      	b.n	8000d74 <CalibrateSingleMotor+0x60>
 8000d80:	200004a5 	.word	0x200004a5
 8000d84:	0800b5d4 	.word	0x0800b5d4
 8000d88:	00000000 	.word	0x00000000
 8000d8c:	0800b5ec 	.word	0x0800b5ec
 8000d90:	20000008 	.word	0x20000008
 8000d94:	0800b610 	.word	0x0800b610

08000d98 <runSingleMotorPosition>:
	}

	return;
}

void runSingleMotorPosition(float posSetpointDegrees){
 8000d98:	b510      	push	{r4, lr}
bool isValidPos(float rawPosDegrees){
	/*
	 * This function takes as argument the final position that the motor will be at after a maneouvre, and returns weather or not is is a valid position.
	 */

	switch((MotorID)ESC_ID){
 8000d9a:	4c45      	ldr	r4, [pc, #276]	@ (8000eb0 <runSingleMotorPosition+0x118>)
 8000d9c:	7823      	ldrb	r3, [r4, #0]
 8000d9e:	2b09      	cmp	r3, #9
void runSingleMotorPosition(float posSetpointDegrees){
 8000da0:	ed2d 8b02 	vpush	{d8}
 8000da4:	eef0 8a40 	vmov.f32	s17, s0
	switch((MotorID)ESC_ID){
 8000da8:	d043      	beq.n	8000e32 <runSingleMotorPosition+0x9a>
 8000daa:	2b0a      	cmp	r3, #10
 8000dac:	d041      	beq.n	8000e32 <runSingleMotorPosition+0x9a>
 8000dae:	2b08      	cmp	r3, #8
 8000db0:	d10b      	bne.n	8000dca <runSingleMotorPosition+0x32>

		case(WAIST):
				return !(rawPosDegrees > WAIST_UPPER_LIMIT || rawPosDegrees < WAIST_LOWER_LIMIT);
 8000db2:	eddf 7a40 	vldr	s15, [pc, #256]	@ 8000eb4 <runSingleMotorPosition+0x11c>
 8000db6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dbe:	d83f      	bhi.n	8000e40 <runSingleMotorPosition+0xa8>
 8000dc0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8000dc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc8:	db3a      	blt.n	8000e40 <runSingleMotorPosition+0xa8>
			return -1;
	}
}

float getCurrentPosition() {
	int16_t DPPPosition = MC_GetElAngledppMotor1();
 8000dca:	f001 ffe3 	bl	8002d94 <MC_GetElAngledppMotor1>
 8000dce:	ee07 0a90 	vmov	s15, r0
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8000dd2:	7823      	ldrb	r3, [r4, #0]
 8000dd4:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000eb8 <runSingleMotorPosition+0x120>
	float elecAngle = ((float)elDPPangle) * 360/65536;
 8000dd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	switch((MotorID)ESC_ID){
 8000ddc:	2b09      	cmp	r3, #9
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8000dde:	ee67 7a87 	vmul.f32	s15, s15, s14
	switch((MotorID)ESC_ID){
 8000de2:	d056      	beq.n	8000e92 <runSingleMotorPosition+0xfa>
 8000de4:	2b0a      	cmp	r3, #10
 8000de6:	d03c      	beq.n	8000e62 <runSingleMotorPosition+0xca>
 8000de8:	2b08      	cmp	r3, #8
 8000dea:	d130      	bne.n	8000e4e <runSingleMotorPosition+0xb6>
			return (mechDegreeInputShaft*WAIST_GEAR_RATIO);
 8000dec:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8000ebc <runSingleMotorPosition+0x124>
			return (mechDegreeInputShaft/WAIST_GEAR_RATIO);
 8000df0:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000ec0 <runSingleMotorPosition+0x128>
	return positionDegrees*(M_PI /180.0f);
 8000df4:	ee68 6aa6 	vmul.f32	s13, s17, s13
			return (mechDegreeInputShaft/WAIST_GEAR_RATIO);
 8000df8:	ee27 8a87 	vmul.f32	s16, s15, s14
	return positionDegrees*(M_PI /180.0f);
 8000dfc:	ee16 0a90 	vmov	r0, s13
 8000e00:	f7ff fc98 	bl	8000734 <__aeabi_f2d>
 8000e04:	a328      	add	r3, pc, #160	@ (adr r3, 8000ea8 <runSingleMotorPosition+0x110>)
 8000e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e0a:	f7ff fa05 	bl	8000218 <__aeabi_dmul>
 8000e0e:	f7ff fd71 	bl	80008f4 <__aeabi_d2f>
 8000e12:	ee00 0a10 	vmov	s0, r0
            angular_velocity = WAIST_ANGULAR_VELOCITY;
 8000e16:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
    float delta_degrees = fabsf(targetPositionSetpoint - currentPosition);
 8000e1a:	ee78 7a68 	vsub.f32	s15, s16, s17
}
 8000e1e:	ecbd 8b02 	vpop	{d8}
    float delta_degrees = fabsf(targetPositionSetpoint - currentPosition);
 8000e22:	eef0 7ae7 	vabs.f32	s15, s15
    return delta_degrees / angular_velocity; // Time in seconds
 8000e26:	eec7 0a87 	vdiv.f32	s1, s15, s14
}
 8000e2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	MC_ProgramPositionCommandMotor1(inputShaftPositionInRad, computeTrajectoryTime(currentPositionDegrees,posSetpointDegrees));
 8000e2e:	f001 bf99 	b.w	8002d64 <MC_ProgramPositionCommandMotor1>
				return !(rawPosDegrees > ELBOW_UPPER_LIMIT || rawPosDegrees < ELBOW_LOWER_LIMIT);
 8000e32:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8000ec4 <runSingleMotorPosition+0x12c>
 8000e36:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3e:	d9bf      	bls.n	8000dc0 <runSingleMotorPosition+0x28>
}
 8000e40:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Position setpoint is not valid\r\n");
 8000e44:	4820      	ldr	r0, [pc, #128]	@ (8000ec8 <runSingleMotorPosition+0x130>)
}
 8000e46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_debug_print("Position setpoint is not valid\r\n");
 8000e4a:	f004 bf3b 	b.w	8005cc4 <uart_debug_print>
}
 8000e4e:	ecbd 8b02 	vpop	{d8}
	switch((MotorID)ESC_ID){
 8000e52:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8000ecc <runSingleMotorPosition+0x134>
}
 8000e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	switch((MotorID)ESC_ID){
 8000e5a:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
	MC_ProgramPositionCommandMotor1(inputShaftPositionInRad, computeTrajectoryTime(currentPositionDegrees,posSetpointDegrees));
 8000e5e:	f001 bf81 	b.w	8002d64 <MC_ProgramPositionCommandMotor1>
				return (mechDegreeInputShaft/ELBOW_GEAR_RATIO);
 8000e62:	eddf 6a1b 	vldr	s13, [pc, #108]	@ 8000ed0 <runSingleMotorPosition+0x138>
				return (mechDegreeInputShaft*ELBOW_GEAR_RATIO);
 8000e66:	ed9f 7a1b 	vldr	s14, [pc, #108]	@ 8000ed4 <runSingleMotorPosition+0x13c>
				return (mechDegreeInputShaft/ELBOW_GEAR_RATIO);
 8000e6a:	ee27 8aa6 	vmul.f32	s16, s15, s13
				return (mechDegreeInputShaft*ELBOW_GEAR_RATIO);
 8000e6e:	ee68 7a87 	vmul.f32	s15, s17, s14
	return positionDegrees*(M_PI /180.0f);
 8000e72:	ee17 0a90 	vmov	r0, s15
 8000e76:	f7ff fc5d 	bl	8000734 <__aeabi_f2d>
 8000e7a:	a30b      	add	r3, pc, #44	@ (adr r3, 8000ea8 <runSingleMotorPosition+0x110>)
 8000e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e80:	f7ff f9ca 	bl	8000218 <__aeabi_dmul>
 8000e84:	f7ff fd36 	bl	80008f4 <__aeabi_d2f>
            angular_velocity = SHOULDER_ANGULAR_VELOCITY;
 8000e88:	eeb1 7a04 	vmov.f32	s14, #20	@ 0x40a00000  5.0
	return positionDegrees*(M_PI /180.0f);
 8000e8c:	ee00 0a10 	vmov	s0, r0
    switch ((MotorID)ESC_ID) {
 8000e90:	e7c3      	b.n	8000e1a <runSingleMotorPosition+0x82>
				return (mechDegreeInputShaft/SHOULDER_GEAR_RATIO);
 8000e92:	eddf 6a11 	vldr	s13, [pc, #68]	@ 8000ed8 <runSingleMotorPosition+0x140>
				return (mechDegreeInputShaft*SHOULDER_GEAR_RATIO);
 8000e96:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000edc <runSingleMotorPosition+0x144>
				return (mechDegreeInputShaft/SHOULDER_GEAR_RATIO);
 8000e9a:	ee27 8aa6 	vmul.f32	s16, s15, s13
				return (mechDegreeInputShaft*SHOULDER_GEAR_RATIO);
 8000e9e:	ee68 7a87 	vmul.f32	s15, s17, s14
 8000ea2:	e7e6      	b.n	8000e72 <runSingleMotorPosition+0xda>
 8000ea4:	f3af 8000 	nop.w
 8000ea8:	a2529d39 	.word	0xa2529d39
 8000eac:	3f91df46 	.word	0x3f91df46
 8000eb0:	20000004 	.word	0x20000004
 8000eb4:	42700000 	.word	0x42700000
 8000eb8:	3a4db6dc 	.word	0x3a4db6dc
 8000ebc:	425c0000 	.word	0x425c0000
 8000ec0:	3c94f209 	.word	0x3c94f209
 8000ec4:	42340000 	.word	0x42340000
 8000ec8:	0800b620 	.word	0x0800b620
 8000ecc:	bc8efa35 	.word	0xbc8efa35
 8000ed0:	3c23d70a 	.word	0x3c23d70a
 8000ed4:	42c80000 	.word	0x42c80000
 8000ed8:	3c088889 	.word	0x3c088889
 8000edc:	42f00000 	.word	0x42f00000

08000ee0 <runSingleMotorPositionIncrement>:
void runSingleMotorPositionIncrement(float degreeIncrement){
 8000ee0:	b508      	push	{r3, lr}
 8000ee2:	ed2d 8b02 	vpush	{d8}
 8000ee6:	eeb0 8a40 	vmov.f32	s16, s0
	int16_t DPPPosition = MC_GetElAngledppMotor1();
 8000eea:	f001 ff53 	bl	8002d94 <MC_GetElAngledppMotor1>
	switch((MotorID)ESC_ID){
 8000eee:	4b48      	ldr	r3, [pc, #288]	@ (8001010 <runSingleMotorPositionIncrement+0x130>)
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8000ef0:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001014 <runSingleMotorPositionIncrement+0x134>
 8000ef4:	781b      	ldrb	r3, [r3, #0]
	int16_t DPPPosition = MC_GetElAngledppMotor1();
 8000ef6:	ee07 0a90 	vmov	s15, r0
	float elecAngle = ((float)elDPPangle) * 360/65536;
 8000efa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	switch((MotorID)ESC_ID){
 8000efe:	2b09      	cmp	r3, #9
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8000f00:	ee67 7a87 	vmul.f32	s15, s15, s14
	switch((MotorID)ESC_ID){
 8000f04:	d040      	beq.n	8000f88 <runSingleMotorPositionIncrement+0xa8>
 8000f06:	2b0a      	cmp	r3, #10
 8000f08:	d027      	beq.n	8000f5a <runSingleMotorPositionIncrement+0x7a>
 8000f0a:	2b08      	cmp	r3, #8
 8000f0c:	d150      	bne.n	8000fb0 <runSingleMotorPositionIncrement+0xd0>
	float targetPositionDegrees = currentPositionDegrees + degreeIncrement;
 8000f0e:	ed9f 6a42 	vldr	s12, [pc, #264]	@ 8001018 <runSingleMotorPositionIncrement+0x138>
				return !(rawPosDegrees > WAIST_UPPER_LIMIT || rawPosDegrees < WAIST_LOWER_LIMIT);
 8000f12:	eddf 6a42 	vldr	s13, [pc, #264]	@ 800101c <runSingleMotorPositionIncrement+0x13c>
	float targetPositionDegrees = currentPositionDegrees + degreeIncrement;
 8000f16:	eeb0 7a48 	vmov.f32	s14, s16
 8000f1a:	eea7 7a86 	vfma.f32	s14, s15, s12
				return !(rawPosDegrees > WAIST_UPPER_LIMIT || rawPosDegrees < WAIST_LOWER_LIMIT);
 8000f1e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f26:	d83c      	bhi.n	8000fa2 <runSingleMotorPositionIncrement+0xc2>
 8000f28:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000f2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f30:	db37      	blt.n	8000fa2 <runSingleMotorPositionIncrement+0xc2>
			return (mechDegreeInputShaft*WAIST_GEAR_RATIO);
 8000f32:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8001020 <runSingleMotorPositionIncrement+0x140>
	return positionDegrees*(M_PI /180.0f);
 8000f36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f3a:	ee17 0a90 	vmov	r0, s15
 8000f3e:	f7ff fbf9 	bl	8000734 <__aeabi_f2d>
 8000f42:	a331      	add	r3, pc, #196	@ (adr r3, 8001008 <runSingleMotorPositionIncrement+0x128>)
 8000f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f48:	f7ff f966 	bl	8000218 <__aeabi_dmul>
 8000f4c:	f7ff fcd2 	bl	80008f4 <__aeabi_d2f>
            angular_velocity = WAIST_ANGULAR_VELOCITY;
 8000f50:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
	return positionDegrees*(M_PI /180.0f);
 8000f54:	ee00 0a10 	vmov	s0, r0
    switch ((MotorID)ESC_ID) {
 8000f58:	e04c      	b.n	8000ff4 <runSingleMotorPositionIncrement+0x114>
	float targetPositionDegrees = currentPositionDegrees + degreeIncrement;
 8000f5a:	ed9f 6a32 	vldr	s12, [pc, #200]	@ 8001024 <runSingleMotorPositionIncrement+0x144>
				return !(rawPosDegrees > ELBOW_UPPER_LIMIT || rawPosDegrees < ELBOW_LOWER_LIMIT);
 8000f5e:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001028 <runSingleMotorPositionIncrement+0x148>
	float targetPositionDegrees = currentPositionDegrees + degreeIncrement;
 8000f62:	eeb0 7a48 	vmov.f32	s14, s16
 8000f66:	eea7 7a86 	vfma.f32	s14, s15, s12
				return !(rawPosDegrees > ELBOW_UPPER_LIMIT || rawPosDegrees < ELBOW_LOWER_LIMIT);
 8000f6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f72:	d816      	bhi.n	8000fa2 <runSingleMotorPositionIncrement+0xc2>
 8000f74:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f7c:	db11      	blt.n	8000fa2 <runSingleMotorPositionIncrement+0xc2>
				return (mechDegreeInputShaft*ELBOW_GEAR_RATIO);
 8000f7e:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800102c <runSingleMotorPositionIncrement+0x14c>
 8000f82:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f86:	e026      	b.n	8000fd6 <runSingleMotorPositionIncrement+0xf6>
	float targetPositionDegrees = currentPositionDegrees + degreeIncrement;
 8000f88:	ed9f 6a29 	vldr	s12, [pc, #164]	@ 8001030 <runSingleMotorPositionIncrement+0x150>
				return !(rawPosDegrees > SHOULDER_UPPER_LIMIT || rawPosDegrees < SHOULDER_LOWER_LIMIT);
 8000f8c:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8001028 <runSingleMotorPositionIncrement+0x148>
	float targetPositionDegrees = currentPositionDegrees + degreeIncrement;
 8000f90:	eeb0 7a48 	vmov.f32	s14, s16
 8000f94:	eea7 7a86 	vfma.f32	s14, s15, s12
				return !(rawPosDegrees > SHOULDER_UPPER_LIMIT || rawPosDegrees < SHOULDER_LOWER_LIMIT);
 8000f98:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8000f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa0:	d910      	bls.n	8000fc4 <runSingleMotorPositionIncrement+0xe4>
}
 8000fa2:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Position setpoint is not valid\r\n");
 8000fa6:	4823      	ldr	r0, [pc, #140]	@ (8001034 <runSingleMotorPositionIncrement+0x154>)
}
 8000fa8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Position setpoint is not valid\r\n");
 8000fac:	f004 be8a 	b.w	8005cc4 <uart_debug_print>
}
 8000fb0:	ecbd 8b02 	vpop	{d8}
	switch((MotorID)ESC_ID){
 8000fb4:	ed9f 0a20 	vldr	s0, [pc, #128]	@ 8001038 <runSingleMotorPositionIncrement+0x158>
}
 8000fb8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	switch((MotorID)ESC_ID){
 8000fbc:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
	MC_ProgramPositionCommandMotor1(inputShaftPositionInRad, computeTrajectoryTime(targetPositionDegrees, currentPositionDegrees));
 8000fc0:	f001 bed0 	b.w	8002d64 <MC_ProgramPositionCommandMotor1>
				return !(rawPosDegrees > SHOULDER_UPPER_LIMIT || rawPosDegrees < SHOULDER_LOWER_LIMIT);
 8000fc4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8000fc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fcc:	dbe9      	blt.n	8000fa2 <runSingleMotorPositionIncrement+0xc2>
				return (mechDegreeInputShaft*SHOULDER_GEAR_RATIO);
 8000fce:	eddf 7a1b 	vldr	s15, [pc, #108]	@ 800103c <runSingleMotorPositionIncrement+0x15c>
 8000fd2:	ee27 7a27 	vmul.f32	s14, s14, s15
	return positionDegrees*(M_PI /180.0f);
 8000fd6:	ee17 0a10 	vmov	r0, s14
 8000fda:	f7ff fbab 	bl	8000734 <__aeabi_f2d>
 8000fde:	a30a      	add	r3, pc, #40	@ (adr r3, 8001008 <runSingleMotorPositionIncrement+0x128>)
 8000fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fe4:	f7ff f918 	bl	8000218 <__aeabi_dmul>
 8000fe8:	f7ff fc84 	bl	80008f4 <__aeabi_d2f>
 8000fec:	ee00 0a10 	vmov	s0, r0
            angular_velocity = SHOULDER_ANGULAR_VELOCITY;
 8000ff0:	eef1 7a04 	vmov.f32	s15, #20	@ 0x40a00000  5.0
    float delta_degrees = fabsf(targetPositionSetpoint - currentPosition);
 8000ff4:	eeb0 8ac8 	vabs.f32	s16, s16
    return delta_degrees / angular_velocity; // Time in seconds
 8000ff8:	eec8 0a27 	vdiv.f32	s1, s16, s15
}
 8000ffc:	ecbd 8b02 	vpop	{d8}
 8001000:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MC_ProgramPositionCommandMotor1(inputShaftPositionInRad, computeTrajectoryTime(targetPositionDegrees, currentPositionDegrees));
 8001004:	f001 beae 	b.w	8002d64 <MC_ProgramPositionCommandMotor1>
 8001008:	a2529d39 	.word	0xa2529d39
 800100c:	3f91df46 	.word	0x3f91df46
 8001010:	20000004 	.word	0x20000004
 8001014:	3a4db6dc 	.word	0x3a4db6dc
 8001018:	3c94f209 	.word	0x3c94f209
 800101c:	42700000 	.word	0x42700000
 8001020:	425c0000 	.word	0x425c0000
 8001024:	3c23d70a 	.word	0x3c23d70a
 8001028:	42340000 	.word	0x42340000
 800102c:	42c80000 	.word	0x42c80000
 8001030:	3c088889 	.word	0x3c088889
 8001034:	0800b620 	.word	0x0800b620
 8001038:	bc8efa35 	.word	0xbc8efa35
 800103c:	42f00000 	.word	0x42f00000

08001040 <runSingleMotorV2>:

	return;
}


void runSingleMotorV2(float newSpeed){
 8001040:	b570      	push	{r4, r5, r6, lr}
	 * The main purpose of this function is to make sure that the speed demanded falls within the actual range at which the motor
	 * is capable of operating in.
	 */

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	 uart_debug_print("Checking speed...\r\n");
 8001042:	488b      	ldr	r0, [pc, #556]	@ (8001270 <runSingleMotorV2+0x230>)
void runSingleMotorV2(float newSpeed){
 8001044:	ed2d 8b04 	vpush	{d8-d9}
 8001048:	eeb0 8a40 	vmov.f32	s16, s0
	////////////////////////////////////////////////////////////////////////////////////////////////////////

    //Deadzone for small speeds
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 800104c:	eddf 8a89 	vldr	s17, [pc, #548]	@ 8001274 <runSingleMotorV2+0x234>
	 uart_debug_print("Checking speed...\r\n");
 8001050:	f004 fe38 	bl	8005cc4 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8001054:	eef0 7ac8 	vabs.f32	s15, s16
 8001058:	eef4 7ae8 	vcmpe.f32	s15, s17
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	d43c      	bmi.n	80010dc <runSingleMotorV2+0x9c>
    	targetSpeed = 0.0f;
    }

    // Check for out of bound setpoint
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8001062:	ed9f 9a85 	vldr	s18, [pc, #532]	@ 8001278 <runSingleMotorV2+0x238>
 8001066:	eef4 7ac9 	vcmpe.f32	s15, s18
 800106a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800106e:	f340 80b9 	ble.w	80011e4 <runSingleMotorV2+0x1a4>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001072:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800107a:	f340 80d6 	ble.w	800122a <runSingleMotorV2+0x1ea>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 800107e:	f001 fe77 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    // Convert from RPM to rad/s
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;

    // If the magnitude is below threshold, treat as 0 for more stable math
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001082:	eef0 7ac0 	vabs.f32	s15, s0
 8001086:	eef4 7ae8 	vcmpe.f32	s15, s17
 800108a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800108e:	f140 80d9 	bpl.w	8001244 <runSingleMotorV2+0x204>
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8001092:	f001 fe6d 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8001096:	4879      	ldr	r0, [pc, #484]	@ (800127c <runSingleMotorV2+0x23c>)
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8001098:	4d79      	ldr	r5, [pc, #484]	@ (8001280 <runSingleMotorV2+0x240>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 800109a:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 800109e:	f004 fe11 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 80010a2:	4878      	ldr	r0, [pc, #480]	@ (8001284 <runSingleMotorV2+0x244>)
 80010a4:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 80010a8:	f004 fe0c 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 80010ac:	4876      	ldr	r0, [pc, #472]	@ (8001288 <runSingleMotorV2+0x248>)
 80010ae:	2164      	movs	r1, #100	@ 0x64
 80010b0:	f004 fe08 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 80010b4:	4875      	ldr	r0, [pc, #468]	@ (800128c <runSingleMotorV2+0x24c>)
 80010b6:	6829      	ldr	r1, [r5, #0]
 80010b8:	f004 fe04 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 80010bc:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80010c0:	4873      	ldr	r0, [pc, #460]	@ (8001290 <runSingleMotorV2+0x250>)
 80010c2:	ee17 1a90 	vmov	r1, s15
 80010c6:	f004 fdfd 	bl	8005cc4 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 80010ca:	2064      	movs	r0, #100	@ 0x64
 80010cc:	eeb0 0a49 	vmov.f32	s0, s18
 80010d0:	f001 fe40 	bl	8002d54 <MC_ProgramSpeedRampMotor1_F>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 80010d4:	eeb0 8a49 	vmov.f32	s16, s18
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 80010d8:	2201      	movs	r2, #1
 80010da:	e056      	b.n	800118a <runSingleMotorV2+0x14a>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 80010dc:	f001 fe48 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80010e0:	eef0 7ac0 	vabs.f32	s15, s0
 80010e4:	eef4 7ae8 	vcmpe.f32	s15, s17
 80010e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ec:	d454      	bmi.n	8001198 <runSingleMotorV2+0x158>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80010ee:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8001294 <runSingleMotorV2+0x254>
    // Time (seconds) = delta_omega / alpha
    float deltaW = fabsf(w2 - w1);
    float timeSec = deltaW / alpha;

    // Convert to milliseconds
    float timeMs = timeSec * 1000.0f;
 80010f2:	ed9f 7a69 	vldr	s14, [pc, #420]	@ 8001298 <runSingleMotorV2+0x258>
    	targetSpeed = 0.0f;
 80010f6:	ed9f 8a69 	vldr	s16, [pc, #420]	@ 800129c <runSingleMotorV2+0x25c>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80010fa:	ee20 0a27 	vmul.f32	s0, s0, s15
    float timeMs = timeSec * 1000.0f;
 80010fe:	2600      	movs	r6, #0
    float deltaW = fabsf(w2 - w1);
 8001100:	eef0 7ac0 	vabs.f32	s15, s0
    float timeMs = timeSec * 1000.0f;
 8001104:	ee27 7a87 	vmul.f32	s14, s15, s14

    // For safety, clamp time to at least 200 ms or so
    float tMin = isStartup ? RAMP_MIN_MS_STARTUP : RAMP_MIN_MS_RUN;
    if (timeMs < tMin)   timeMs = tMin;
 8001108:	eddf 6a65 	vldr	s13, [pc, #404]	@ 80012a0 <runSingleMotorV2+0x260>
 800110c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001114:	f100 8086 	bmi.w	8001224 <runSingleMotorV2+0x1e4>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8001118:	eddf 6a62 	vldr	s13, [pc, #392]	@ 80012a4 <runSingleMotorV2+0x264>
 800111c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8001120:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001124:	dc7a      	bgt.n	800121c <runSingleMotorV2+0x1dc>
    return (uint16_t)(timeMs + 0.5f);
 8001126:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800112a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800112e:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8001132:	ee17 3a10 	vmov	r3, s14
 8001136:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8001138:	4625      	mov	r5, r4
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 800113a:	f001 fe19 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 800113e:	484f      	ldr	r0, [pc, #316]	@ (800127c <runSingleMotorV2+0x23c>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8001140:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8001144:	f004 fdbe 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8001148:	484e      	ldr	r0, [pc, #312]	@ (8001284 <runSingleMotorV2+0x244>)
 800114a:	4631      	mov	r1, r6
 800114c:	f004 fdba 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8001150:	4629      	mov	r1, r5
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8001152:	4d4b      	ldr	r5, [pc, #300]	@ (8001280 <runSingleMotorV2+0x240>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8001154:	484c      	ldr	r0, [pc, #304]	@ (8001288 <runSingleMotorV2+0x248>)
 8001156:	f004 fdb5 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 800115a:	484c      	ldr	r0, [pc, #304]	@ (800128c <runSingleMotorV2+0x24c>)
 800115c:	6829      	ldr	r1, [r5, #0]
 800115e:	f004 fdb1 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8001162:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8001166:	484a      	ldr	r0, [pc, #296]	@ (8001290 <runSingleMotorV2+0x250>)
 8001168:	ee17 1a90 	vmov	r1, s15
 800116c:	f004 fdaa 	bl	8005cc4 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8001170:	4620      	mov	r0, r4
 8001172:	eeb0 0a48 	vmov.f32	s0, s16
 8001176:	f001 fded 	bl	8002d54 <MC_ProgramSpeedRampMotor1_F>
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 800117a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800117e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001182:	bfcc      	ite	gt
 8001184:	2201      	movgt	r2, #1
 8001186:	f04f 32ff 	movle.w	r2, #4294967295
    g_lastCommandedSpeed = speedCmd;
 800118a:	4b47      	ldr	r3, [pc, #284]	@ (80012a8 <runSingleMotorV2+0x268>)
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 800118c:	602a      	str	r2, [r5, #0]
    g_lastCommandedSpeed = speedCmd;
 800118e:	ed83 8a00 	vstr	s16, [r3]
}
 8001192:	ecbd 8b04 	vpop	{d8-d9}
 8001196:	bd70      	pop	{r4, r5, r6, pc}
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001198:	ed9f 8a40 	vldr	s16, [pc, #256]	@ 800129c <runSingleMotorV2+0x25c>
 800119c:	2400      	movs	r4, #0
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 800119e:	f001 fde7 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 80011a2:	4836      	ldr	r0, [pc, #216]	@ (800127c <runSingleMotorV2+0x23c>)
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 80011a4:	4d36      	ldr	r5, [pc, #216]	@ (8001280 <runSingleMotorV2+0x240>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 80011a6:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 80011aa:	f004 fd8b 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 80011ae:	4835      	ldr	r0, [pc, #212]	@ (8001284 <runSingleMotorV2+0x244>)
 80011b0:	4621      	mov	r1, r4
 80011b2:	f004 fd87 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 80011b6:	4834      	ldr	r0, [pc, #208]	@ (8001288 <runSingleMotorV2+0x248>)
 80011b8:	2164      	movs	r1, #100	@ 0x64
 80011ba:	f004 fd83 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 80011be:	4833      	ldr	r0, [pc, #204]	@ (800128c <runSingleMotorV2+0x24c>)
 80011c0:	6829      	ldr	r1, [r5, #0]
 80011c2:	f004 fd7f 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 80011c6:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80011ca:	4831      	ldr	r0, [pc, #196]	@ (8001290 <runSingleMotorV2+0x250>)
 80011cc:	ee17 1a90 	vmov	r1, s15
 80011d0:	f004 fd78 	bl	8005cc4 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 80011d4:	2064      	movs	r0, #100	@ 0x64
 80011d6:	eeb0 0a48 	vmov.f32	s0, s16
 80011da:	f001 fdbb 	bl	8002d54 <MC_ProgramSpeedRampMotor1_F>
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 80011de:	f04f 32ff 	mov.w	r2, #4294967295
 80011e2:	e7d2      	b.n	800118a <runSingleMotorV2+0x14a>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 80011e4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80011e8:	ee17 6a90 	vmov	r6, s15
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 80011ec:	f001 fdc0 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80011f0:	eef0 7ac0 	vabs.f32	s15, s0
 80011f4:	eef4 7ae8 	vcmpe.f32	s15, s17
 80011f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fc:	d412      	bmi.n	8001224 <runSingleMotorV2+0x1e4>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80011fe:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8001294 <runSingleMotorV2+0x254>
 8001202:	ee68 7a07 	vmul.f32	s15, s16, s14
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001206:	ee20 0a07 	vmul.f32	s0, s0, s14
    float deltaW = fabsf(w2 - w1);
 800120a:	ee77 7ac0 	vsub.f32	s15, s15, s0
    float timeMs = timeSec * 1000.0f;
 800120e:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8001298 <runSingleMotorV2+0x258>
    float deltaW = fabsf(w2 - w1);
 8001212:	eef0 7ae7 	vabs.f32	s15, s15
    float timeMs = timeSec * 1000.0f;
 8001216:	ee27 7a87 	vmul.f32	s14, s15, s14
 800121a:	e775      	b.n	8001108 <runSingleMotorV2+0xc8>
 800121c:	f241 3588 	movw	r5, #5000	@ 0x1388
 8001220:	462c      	mov	r4, r5
 8001222:	e78a      	b.n	800113a <runSingleMotorV2+0xfa>
 8001224:	2564      	movs	r5, #100	@ 0x64
 8001226:	462c      	mov	r4, r5
 8001228:	e787      	b.n	800113a <runSingleMotorV2+0xfa>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 800122a:	f001 fda1 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 800122e:	eef0 7ac0 	vabs.f32	s15, s0
 8001232:	eef4 7ae8 	vcmpe.f32	s15, s17
 8001236:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800123a:	d50e      	bpl.n	800125a <runSingleMotorV2+0x21a>
 800123c:	4c1b      	ldr	r4, [pc, #108]	@ (80012ac <runSingleMotorV2+0x26c>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 800123e:	ed9f 8a1c 	vldr	s16, [pc, #112]	@ 80012b0 <runSingleMotorV2+0x270>
 8001242:	e7ac      	b.n	800119e <runSingleMotorV2+0x15e>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001244:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001294 <runSingleMotorV2+0x254>
 8001248:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80012b4 <runSingleMotorV2+0x274>
 800124c:	ee20 0a07 	vmul.f32	s0, s0, s14
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001250:	eeb0 8a49 	vmov.f32	s16, s18
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001254:	f44f 6648 	mov.w	r6, #3200	@ 0xc80
 8001258:	e7d7      	b.n	800120a <runSingleMotorV2+0x1ca>
 800125a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001294 <runSingleMotorV2+0x254>
 800125e:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80012b8 <runSingleMotorV2+0x278>
 8001262:	4e12      	ldr	r6, [pc, #72]	@ (80012ac <runSingleMotorV2+0x26c>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001264:	ed9f 8a12 	vldr	s16, [pc, #72]	@ 80012b0 <runSingleMotorV2+0x270>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001268:	ee20 0a07 	vmul.f32	s0, s0, s14
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 800126c:	e7cd      	b.n	800120a <runSingleMotorV2+0x1ca>
 800126e:	bf00      	nop
 8001270:	0800b6d0 	.word	0x0800b6d0
 8001274:	42480000 	.word	0x42480000
 8001278:	45480000 	.word	0x45480000
 800127c:	0800b6e4 	.word	0x0800b6e4
 8001280:	200004b0 	.word	0x200004b0
 8001284:	0800b724 	.word	0x0800b724
 8001288:	0800b740 	.word	0x0800b740
 800128c:	0800b760 	.word	0x0800b760
 8001290:	0800b77c 	.word	0x0800b77c
 8001294:	3dd67751 	.word	0x3dd67751
 8001298:	3d29930c 	.word	0x3d29930c
 800129c:	00000000 	.word	0x00000000
 80012a0:	4516f759 	.word	0x4516f759
 80012a4:	47ebe27a 	.word	0x47ebe27a
 80012a8:	200004b4 	.word	0x200004b4
 80012ac:	fffff380 	.word	0xfffff380
 80012b0:	c5480000 	.word	0xc5480000
 80012b4:	43a78d37 	.word	0x43a78d37
 80012b8:	c3a78d37 	.word	0xc3a78d37
 80012bc:	00000000 	.word	0x00000000

080012c0 <IdleSingleMotor>:
void IdleSingleMotor(float newSpeed){
 80012c0:	b538      	push	{r3, r4, r5, lr}
	 uart_debug_print("Checking speed...\r\n");
 80012c2:	4865      	ldr	r0, [pc, #404]	@ (8001458 <IdleSingleMotor+0x198>)
void IdleSingleMotor(float newSpeed){
 80012c4:	ed2d 8b02 	vpush	{d8}
 80012c8:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 80012cc:	f004 fcfa 	bl	8005cc4 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 80012d0:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 800145c <IdleSingleMotor+0x19c>
 80012d4:	eef0 7ac8 	vabs.f32	s15, s16
 80012d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e0:	d506      	bpl.n	80012f0 <IdleSingleMotor+0x30>
}
 80012e2:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 80012e6:	485e      	ldr	r0, [pc, #376]	@ (8001460 <IdleSingleMotor+0x1a0>)
}
 80012e8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 80012ec:	f004 bcea 	b.w	8005cc4 <uart_debug_print>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 80012f0:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8001464 <IdleSingleMotor+0x1a4>
 80012f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fc:	dd08      	ble.n	8001310 <IdleSingleMotor+0x50>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 80012fe:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	f340 8099 	ble.w	800143c <IdleSingleMotor+0x17c>
 800130a:	eeb0 8a47 	vmov.f32	s16, s14
	if (fabsf(speedCmd) < 0.001){
 800130e:	e00a      	b.n	8001326 <IdleSingleMotor+0x66>
 8001310:	ee17 0a90 	vmov	r0, s15
 8001314:	f7ff fa0e 	bl	8000734 <__aeabi_f2d>
 8001318:	a34d      	add	r3, pc, #308	@ (adr r3, 8001450 <IdleSingleMotor+0x190>)
 800131a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131e:	f7ff fac1 	bl	80008a4 <__aeabi_dcmplt>
 8001322:	2800      	cmp	r0, #0
 8001324:	d1dd      	bne.n	80012e2 <IdleSingleMotor+0x22>
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8001326:	4d50      	ldr	r5, [pc, #320]	@ (8001468 <IdleSingleMotor+0x1a8>)
    uint32_t now = HAL_GetTick();
 8001328:	f004 fdac 	bl	8005e84 <HAL_GetTick>
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001332:	1ac3      	subs	r3, r0, r3
 8001334:	4293      	cmp	r3, r2
    uint32_t now = HAL_GetTick();
 8001336:	4604      	mov	r4, r0
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8001338:	d866      	bhi.n	8001408 <IdleSingleMotor+0x148>
	 uart_debug_print("Amount of start attempts within 1s of eachother: %d\r\n", s_startWd.attempts);
 800133a:	7929      	ldrb	r1, [r5, #4]
 800133c:	484b      	ldr	r0, [pc, #300]	@ (800146c <IdleSingleMotor+0x1ac>)
 800133e:	f004 fcc1 	bl	8005cc4 <uart_debug_print>
    if (++s_startWd.attempts >= START_WD_THRESHOLD) {
 8001342:	792b      	ldrb	r3, [r5, #4]
 8001344:	3301      	adds	r3, #1
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2b02      	cmp	r3, #2
 800134a:	712b      	strb	r3, [r5, #4]
 800134c:	d851      	bhi.n	80013f2 <IdleSingleMotor+0x132>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, true);
 800134e:	f001 fd0f 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001352:	eddf 7a42 	vldr	s15, [pc, #264]	@ 800145c <IdleSingleMotor+0x19c>
 8001356:	eeb0 7ac0 	vabs.f32	s14, s0
 800135a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800135e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001362:	d419      	bmi.n	8001398 <IdleSingleMotor+0xd8>
    float deltaW = fabsf(w2 - w1);
 8001364:	ee38 0a40 	vsub.f32	s0, s16, s0
 8001368:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8001470 <IdleSingleMotor+0x1b0>
    if (timeMs < tMin)   timeMs = tMin;
 800136c:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8001474 <IdleSingleMotor+0x1b4>
    float deltaW = fabsf(w2 - w1);
 8001370:	ee20 0a07 	vmul.f32	s0, s0, s14
 8001374:	eeb0 0ac0 	vabs.f32	s0, s0
    if (timeMs < tMin)   timeMs = tMin;
 8001378:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800137c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001380:	d40a      	bmi.n	8001398 <IdleSingleMotor+0xd8>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8001382:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8001478 <IdleSingleMotor+0x1b8>
 8001386:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800138a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138e:	dd48      	ble.n	8001422 <IdleSingleMotor+0x162>
 8001390:	f241 3588 	movw	r5, #5000	@ 0x1388
 8001394:	462c      	mov	r4, r5
 8001396:	e001      	b.n	800139c <IdleSingleMotor+0xdc>
 8001398:	25c8      	movs	r5, #200	@ 0xc8
 800139a:	462c      	mov	r4, r5
	 uart_debug_print("Motor will begin to ramp!\r\n");
 800139c:	4837      	ldr	r0, [pc, #220]	@ (800147c <IdleSingleMotor+0x1bc>)
 800139e:	f004 fc91 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 80013a2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80013a6:	4836      	ldr	r0, [pc, #216]	@ (8001480 <IdleSingleMotor+0x1c0>)
 80013a8:	ee17 1a90 	vmov	r1, s15
 80013ac:	f004 fc8a 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 80013b0:	4629      	mov	r1, r5
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 80013b2:	4d34      	ldr	r5, [pc, #208]	@ (8001484 <IdleSingleMotor+0x1c4>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 80013b4:	4834      	ldr	r0, [pc, #208]	@ (8001488 <IdleSingleMotor+0x1c8>)
 80013b6:	f004 fc85 	bl	8005cc4 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 80013ba:	4834      	ldr	r0, [pc, #208]	@ (800148c <IdleSingleMotor+0x1cc>)
 80013bc:	6829      	ldr	r1, [r5, #0]
 80013be:	f004 fc81 	bl	8005cc4 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime); // Must set a setpoint before startup --> otherwise unpredictable behavior
 80013c2:	4620      	mov	r0, r4
 80013c4:	eeb0 0a48 	vmov.f32	s0, s16
 80013c8:	f001 fcc4 	bl	8002d54 <MC_ProgramSpeedRampMotor1_F>
	if (!MC_StartMotor1()) {
 80013cc:	f001 fcb6 	bl	8002d3c <MC_StartMotor1>
 80013d0:	2800      	cmp	r0, #0
 80013d2:	d036      	beq.n	8001442 <IdleSingleMotor+0x182>
	g_lastCommandedSpeed = speedCmd;
 80013d4:	4b2e      	ldr	r3, [pc, #184]	@ (8001490 <IdleSingleMotor+0x1d0>)
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 80013d6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	g_lastCommandedSpeed = speedCmd;
 80013da:	ed83 8a00 	vstr	s16, [r3]
}
 80013de:	ecbd 8b02 	vpop	{d8}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 80013e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013e6:	bfcc      	ite	gt
 80013e8:	2201      	movgt	r2, #1
 80013ea:	f04f 32ff 	movle.w	r2, #4294967295
 80013ee:	602a      	str	r2, [r5, #0]
}
 80013f0:	bd38      	pop	{r3, r4, r5, pc}
        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 80013f2:	4828      	ldr	r0, [pc, #160]	@ (8001494 <IdleSingleMotor+0x1d4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80013fa:	f001 fd51 	bl	8002ea0 <MCI_FaultProcessing>
        s_startWd.attempts = 0;
 80013fe:	2300      	movs	r3, #0
 8001400:	712b      	strb	r3, [r5, #4]
}
 8001402:	ecbd 8b02 	vpop	{d8}
 8001406:	bd38      	pop	{r3, r4, r5, pc}
    	 uart_debug_print("Safe amount of time since last start!\r\n");
 8001408:	4823      	ldr	r0, [pc, #140]	@ (8001498 <IdleSingleMotor+0x1d8>)
 800140a:	f004 fc5b 	bl	8005cc4 <uart_debug_print>
    	 uart_debug_print("Amount of time since last start: %d \r\n", (int) now - s_startWd.firstTick );
 800140e:	6829      	ldr	r1, [r5, #0]
 8001410:	4822      	ldr	r0, [pc, #136]	@ (800149c <IdleSingleMotor+0x1dc>)
 8001412:	1a61      	subs	r1, r4, r1
 8001414:	f004 fc56 	bl	8005cc4 <uart_debug_print>
        s_startWd.attempts  = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	4619      	mov	r1, r3
        s_startWd.firstTick = now; // sets last time start was issued
 800141c:	602c      	str	r4, [r5, #0]
        s_startWd.attempts  = 0;
 800141e:	712b      	strb	r3, [r5, #4]
 8001420:	e78c      	b.n	800133c <IdleSingleMotor+0x7c>
    return (uint16_t)(timeMs + 0.5f);
 8001422:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 80014a0 <IdleSingleMotor+0x1e0>
 8001426:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800142a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800142e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001432:	ee17 3a90 	vmov	r3, s15
 8001436:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8001438:	4625      	mov	r5, r4
 800143a:	e7af      	b.n	800139c <IdleSingleMotor+0xdc>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 800143c:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 80014a4 <IdleSingleMotor+0x1e4>
 8001440:	e771      	b.n	8001326 <IdleSingleMotor+0x66>
}
 8001442:	ecbd 8b02 	vpop	{d8}
		 uart_debug_print("Start Failed...");
 8001446:	4818      	ldr	r0, [pc, #96]	@ (80014a8 <IdleSingleMotor+0x1e8>)
}
 8001448:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 uart_debug_print("Start Failed...");
 800144c:	f004 bc3a 	b.w	8005cc4 <uart_debug_print>
 8001450:	d2f1a9fc 	.word	0xd2f1a9fc
 8001454:	3f50624d 	.word	0x3f50624d
 8001458:	0800b6d0 	.word	0x0800b6d0
 800145c:	42480000 	.word	0x42480000
 8001460:	0800b79c 	.word	0x0800b79c
 8001464:	45480000 	.word	0x45480000
 8001468:	200004a8 	.word	0x200004a8
 800146c:	0800b83c 	.word	0x0800b83c
 8001470:	3dd67751 	.word	0x3dd67751
 8001474:	4516f759 	.word	0x4516f759
 8001478:	476be27a 	.word	0x476be27a
 800147c:	0800b874 	.word	0x0800b874
 8001480:	0800b724 	.word	0x0800b724
 8001484:	200004b0 	.word	0x200004b0
 8001488:	0800b740 	.word	0x0800b740
 800148c:	0800b760 	.word	0x0800b760
 8001490:	200004b4 	.word	0x200004b4
 8001494:	20000008 	.word	0x20000008
 8001498:	0800b7ec 	.word	0x0800b7ec
 800149c:	0800b814 	.word	0x0800b814
 80014a0:	3da9930c 	.word	0x3da9930c
 80014a4:	c5480000 	.word	0xc5480000
 80014a8:	0800b610 	.word	0x0800b610

080014ac <safeStopMotor>:
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 80014ac:	b570      	push	{r4, r5, r6, lr}
 80014ae:	4604      	mov	r4, r0
 80014b0:	ed2d 8b0a 	vpush	{d8-d12}
	 uart_debug_print("Performing a safe stop\r\n");
 80014b4:	489e      	ldr	r0, [pc, #632]	@ (8001730 <safeStopMotor+0x284>)
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 80014b6:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Performing a safe stop\r\n");
 80014ba:	f004 fc03 	bl	8005cc4 <uart_debug_print>
	if (fabsf(currentSpeedRpm) > SAFE_STOP_SPEED_THRESHOLD && motorState != START && motorState != SWITCH_OVER){
 80014be:	eddf 7a9d 	vldr	s15, [pc, #628]	@ 8001734 <safeStopMotor+0x288>
 80014c2:	eeb0 7ae8 	vabs.f32	s14, s17
 80014c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80014ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014ce:	f340 8088 	ble.w	80015e2 <safeStopMotor+0x136>
 80014d2:	2c04      	cmp	r4, #4
 80014d4:	f000 8085 	beq.w	80015e2 <safeStopMotor+0x136>
 80014d8:	2c13      	cmp	r4, #19
 80014da:	f000 8082 	beq.w	80015e2 <safeStopMotor+0x136>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 80014de:	4896      	ldr	r0, [pc, #600]	@ (8001738 <safeStopMotor+0x28c>)
 80014e0:	ed9f ca96 	vldr	s24, [pc, #600]	@ 800173c <safeStopMotor+0x290>
 80014e4:	ed9f ba96 	vldr	s22, [pc, #600]	@ 8001740 <safeStopMotor+0x294>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80014e8:	eddf 9a96 	vldr	s19, [pc, #600]	@ 8001744 <safeStopMotor+0x298>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80014ec:	ed9f 9a96 	vldr	s18, [pc, #600]	@ 8001748 <safeStopMotor+0x29c>
    if (timeMs < tMin)   timeMs = tMin;
 80014f0:	eddf aa96 	vldr	s21, [pc, #600]	@ 800174c <safeStopMotor+0x2a0>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 80014f4:	eddf ba96 	vldr	s23, [pc, #600]	@ 8001750 <safeStopMotor+0x2a4>
    return (uint16_t)(timeMs + 0.5f);
 80014f8:	eddf ca96 	vldr	s25, [pc, #600]	@ 8001754 <safeStopMotor+0x2a8>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 80014fc:	f004 fbe2 	bl	8005cc4 <uart_debug_print>
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 8001500:	eddf 7a95 	vldr	s15, [pc, #596]	@ 8001758 <safeStopMotor+0x2ac>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8001504:	4b95      	ldr	r3, [pc, #596]	@ (800175c <safeStopMotor+0x2b0>)
 8001506:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800150a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800150e:	bfd8      	it	le
 8001510:	eeb0 ca67 	vmovle.f32	s24, s15
 8001514:	ed93 7a00 	vldr	s14, [r3]
		float deltaSpeed = currentSpeedRpm - rampTarget;
 8001518:	ee78 6acc 	vsub.f32	s13, s17, s24
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 800151c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001520:	eeb0 6ae6 	vabs.f32	s12, s13
 8001524:	eec6 7a07 	vdiv.f32	s15, s12, s14
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001528:	f04f 0401 	mov.w	r4, #1
 800152c:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 8001760 <safeStopMotor+0x2b4>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8001530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001534:	bfd8      	it	le
 8001536:	eeb0 ba47 	vmovle.f32	s22, s14
 800153a:	ee17 6a90 	vmov	r6, s15
		if (rampDownDivisions < 1) rampDownDivisions = 1;  // Ensure at least one division
 800153e:	42a6      	cmp	r6, r4
 8001540:	bfb8      	it	lt
 8001542:	4626      	movlt	r6, r4
		float stepSize = deltaSpeed / rampDownDivisions;
 8001544:	ee07 6a90 	vmov	s15, r6
 8001548:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154c:	ee86 aaa7 	vdiv.f32	s20, s13, s15
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001550:	e02a      	b.n	80015a8 <safeStopMotor+0xfc>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001552:	ee60 7a29 	vmul.f32	s15, s0, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8001556:	eef4 6ac9 	vcmpe.f32	s13, s18
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float deltaW = fabsf(w2 - w1);
 800155e:	bf54      	ite	pl
 8001560:	ee37 7a67 	vsubpl.f32	s14, s14, s15
        w2 = 0.0f;
 8001564:	eeb1 7a67 	vnegmi.f32	s14, s15
    float deltaW = fabsf(w2 - w1);
 8001568:	eeb0 7ac7 	vabs.f32	s14, s14
    if (timeMs < tMin)   timeMs = tMin;
 800156c:	eeb4 7aea 	vcmpe.f32	s14, s21
 8001570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001574:	d432      	bmi.n	80015dc <safeStopMotor+0x130>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8001576:	eeb4 7aeb 	vcmpe.f32	s14, s23
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	dc72      	bgt.n	8001666 <safeStopMotor+0x1ba>
    return (uint16_t)(timeMs + 0.5f);
 8001580:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8001584:	eee7 7a2c 	vfma.f32	s15, s14, s25
 8001588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800158c:	ee17 3a90 	vmov	r3, s15
 8001590:	b298      	uxth	r0, r3
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 8001592:	4605      	mov	r5, r0
			MC_ProgramSpeedRampMotor1_F(intermediateTarget, rampTime);
 8001594:	eeb0 0a48 	vmov.f32	s0, s16
 8001598:	f001 fbdc 	bl	8002d54 <MC_ProgramSpeedRampMotor1_F>
		for (int i = 1; i <= rampDownDivisions; i++) {
 800159c:	3401      	adds	r4, #1
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 800159e:	4628      	mov	r0, r5
 80015a0:	f004 fc76 	bl	8005e90 <HAL_Delay>
		for (int i = 1; i <= rampDownDivisions; i++) {
 80015a4:	42a6      	cmp	r6, r4
 80015a6:	db62      	blt.n	800166e <safeStopMotor+0x1c2>
			float intermediateTarget = currentSpeedRpm - (stepSize * i);
 80015a8:	ee07 4a90 	vmov	s15, r4
 80015ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b0:	eeb0 8a68 	vmov.f32	s16, s17
 80015b4:	eea7 8aca 	vfms.f32	s16, s15, s20
			uint16_t rampTime = computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), intermediateTarget, false);
 80015b8:	f001 fbda 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80015bc:	eef0 7ac0 	vabs.f32	s15, s0
 80015c0:	eef4 7ac9 	vcmpe.f32	s15, s18
 80015c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80015c8:	ee28 7a29 	vmul.f32	s14, s16, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 80015cc:	eef0 6ac8 	vabs.f32	s13, s16
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80015d0:	d5bf      	bpl.n	8001552 <safeStopMotor+0xa6>
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 80015d2:	eef4 6ac9 	vcmpe.f32	s13, s18
 80015d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015da:	d5c5      	bpl.n	8001568 <safeStopMotor+0xbc>
 80015dc:	2564      	movs	r5, #100	@ 0x64
 80015de:	4628      	mov	r0, r5
 80015e0:	e7d8      	b.n	8001594 <safeStopMotor+0xe8>
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 80015e2:	4860      	ldr	r0, [pc, #384]	@ (8001764 <safeStopMotor+0x2b8>)
			 uart_debug_print("current state is %d\r\n", currState);
 80015e4:	4e60      	ldr	r6, [pc, #384]	@ (8001768 <safeStopMotor+0x2bc>)
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 80015e6:	f004 fb6d 	bl	8005cc4 <uart_debug_print>
	    MC_StopMotor1();
 80015ea:	f001 fbad 	bl	8002d48 <MC_StopMotor1>
		uint32_t tStart = HAL_GetTick();
 80015ee:	f004 fc49 	bl	8005e84 <HAL_GetTick>
 80015f2:	4605      	mov	r5, r0
 80015f4:	e005      	b.n	8001602 <safeStopMotor+0x156>
		    if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 80015f6:	f004 fc45 	bl	8005e84 <HAL_GetTick>
 80015fa:	1b40      	subs	r0, r0, r5
 80015fc:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8001600:	d81e      	bhi.n	8001640 <safeStopMotor+0x194>
			HAL_Delay(5); // poll the state until it IDLE
 8001602:	2005      	movs	r0, #5
 8001604:	f004 fc44 	bl	8005e90 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8001608:	f001 fbd6 	bl	8002db8 <MC_GetSTMStateMotor1>
 800160c:	4604      	mov	r4, r0
			 uart_debug_print("current state is %d\r\n", currState);
 800160e:	4601      	mov	r1, r0
 8001610:	4630      	mov	r0, r6
 8001612:	f004 fb57 	bl	8005cc4 <uart_debug_print>
			if (currState == IDLE) {
 8001616:	2c00      	cmp	r4, #0
 8001618:	d1ed      	bne.n	80015f6 <safeStopMotor+0x14a>
				 uart_debug_print("Block wait \r\n");
 800161a:	4854      	ldr	r0, [pc, #336]	@ (800176c <safeStopMotor+0x2c0>)
 800161c:	f004 fb52 	bl	8005cc4 <uart_debug_print>
				HAL_Delay(WAIT_AFTER_STOP); // Tune this value for seemless transition
 8001620:	20fa      	movs	r0, #250	@ 0xfa
 8001622:	f004 fc35 	bl	8005e90 <HAL_Delay>
				 uart_debug_print("Motor is now stopped \r\n");
 8001626:	4852      	ldr	r0, [pc, #328]	@ (8001770 <safeStopMotor+0x2c4>)
 8001628:	f004 fb4c 	bl	8005cc4 <uart_debug_print>
}
 800162c:	ecbd 8b0a 	vpop	{d8-d12}
				s_previousDirection = 0;
 8001630:	4950      	ldr	r1, [pc, #320]	@ (8001774 <safeStopMotor+0x2c8>)
				g_lastCommandedSpeed = 0;
 8001632:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <safeStopMotor+0x2cc>)
				s_previousDirection = 0;
 8001634:	2000      	movs	r0, #0
				g_lastCommandedSpeed = 0;
 8001636:	2200      	movs	r2, #0
				s_previousDirection = 0;
 8001638:	6008      	str	r0, [r1, #0]
				g_lastCommandedSpeed = 0;
 800163a:	601a      	str	r2, [r3, #0]
				return true;
 800163c:	2001      	movs	r0, #1
}
 800163e:	bd70      	pop	{r4, r5, r6, pc}
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 8001640:	484e      	ldr	r0, [pc, #312]	@ (800177c <safeStopMotor+0x2d0>)
			    s_previousDirection = 0;
 8001642:	4d4c      	ldr	r5, [pc, #304]	@ (8001774 <safeStopMotor+0x2c8>)
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 8001644:	f004 fb3e 	bl	8005cc4 <uart_debug_print>
			    g_lastCommandedSpeed = 0;
 8001648:	4b4b      	ldr	r3, [pc, #300]	@ (8001778 <safeStopMotor+0x2cc>)
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 800164a:	484d      	ldr	r0, [pc, #308]	@ (8001780 <safeStopMotor+0x2d4>)
			    s_previousDirection = 0;
 800164c:	2400      	movs	r4, #0
			    g_lastCommandedSpeed = 0;
 800164e:	2100      	movs	r1, #0
 8001650:	6019      	str	r1, [r3, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8001652:	4622      	mov	r2, r4
 8001654:	f44f 6180 	mov.w	r1, #1024	@ 0x400
			    s_previousDirection = 0;
 8001658:	602c      	str	r4, [r5, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 800165a:	f001 fc21 	bl	8002ea0 <MCI_FaultProcessing>
}
 800165e:	ecbd 8b0a 	vpop	{d8-d12}
		        return false;
 8001662:	4620      	mov	r0, r4
}
 8001664:	bd70      	pop	{r4, r5, r6, pc}
 8001666:	f241 3588 	movw	r5, #5000	@ 0x1388
 800166a:	4628      	mov	r0, r5
 800166c:	e792      	b.n	8001594 <safeStopMotor+0xe8>
		uint16_t finalRampTime = computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), rampTarget, false);
 800166e:	f001 fb7f 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001672:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8001748 <safeStopMotor+0x29c>
 8001676:	eeb0 7ac0 	vabs.f32	s14, s0
 800167a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	d450      	bmi.n	8001726 <safeStopMotor+0x27a>
    float deltaW = fabsf(w2 - w1);
 8001684:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 8001744 <safeStopMotor+0x298>
    if (timeMs < tMin)   timeMs = tMin;
 8001688:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 800174c <safeStopMotor+0x2a0>
    float deltaW = fabsf(w2 - w1);
 800168c:	eea0 ba67 	vfms.f32	s22, s0, s15
 8001690:	eef0 7acb 	vabs.f32	s15, s22
    if (timeMs < tMin)   timeMs = tMin;
 8001694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800169c:	d443      	bmi.n	8001726 <safeStopMotor+0x27a>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 800169e:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001750 <safeStopMotor+0x2a4>
 80016a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016aa:	dc3e      	bgt.n	800172a <safeStopMotor+0x27e>
    return (uint16_t)(timeMs + 0.5f);
 80016ac:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8001754 <safeStopMotor+0x2a8>
 80016b0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80016b4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80016b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80016bc:	ee17 3a90 	vmov	r3, s15
 80016c0:	b298      	uxth	r0, r3
		MC_ProgramSpeedRampMotor1_F(rampTarget, finalRampTime);
 80016c2:	eeb0 0a4c 	vmov.f32	s0, s24
 80016c6:	f001 fb45 	bl	8002d54 <MC_ProgramSpeedRampMotor1_F>
		uint32_t tStart = HAL_GetTick();
 80016ca:	f004 fbdb 	bl	8005e84 <HAL_GetTick>
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 80016ce:	ed9f 8a2d 	vldr	s16, [pc, #180]	@ 8001784 <safeStopMotor+0x2d8>
		uint32_t tStart = HAL_GetTick();
 80016d2:	4604      	mov	r4, r0
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 80016d4:	e00a      	b.n	80016ec <safeStopMotor+0x240>
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 80016d6:	f004 fbd5 	bl	8005e84 <HAL_GetTick>
 80016da:	4603      	mov	r3, r0
 80016dc:	1b1b      	subs	r3, r3, r4
 80016de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
			HAL_Delay(10);
 80016e2:	f04f 000a 	mov.w	r0, #10
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 80016e6:	d80a      	bhi.n	80016fe <safeStopMotor+0x252>
			HAL_Delay(10);
 80016e8:	f004 fbd2 	bl	8005e90 <HAL_Delay>
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 80016ec:	f001 fb40 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
 80016f0:	eeb0 0ac0 	vabs.f32	s0, s0
 80016f4:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80016f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fc:	dceb      	bgt.n	80016d6 <safeStopMotor+0x22a>
	    MC_StopMotor1();
 80016fe:	f001 fb23 	bl	8002d48 <MC_StopMotor1>
	    tStart = HAL_GetTick();
 8001702:	f004 fbbf 	bl	8005e84 <HAL_GetTick>
 8001706:	4604      	mov	r4, r0
 8001708:	e005      	b.n	8001716 <safeStopMotor+0x26a>
		    if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 800170a:	f004 fbbb 	bl	8005e84 <HAL_GetTick>
 800170e:	1b00      	subs	r0, r0, r4
 8001710:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8001714:	d894      	bhi.n	8001640 <safeStopMotor+0x194>
			HAL_Delay(5); // poll the state until it IDLE
 8001716:	2005      	movs	r0, #5
 8001718:	f004 fbba 	bl	8005e90 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 800171c:	f001 fb4c 	bl	8002db8 <MC_GetSTMStateMotor1>
			if (currState == IDLE) {
 8001720:	2800      	cmp	r0, #0
 8001722:	d1f2      	bne.n	800170a <safeStopMotor+0x25e>
 8001724:	e779      	b.n	800161a <safeStopMotor+0x16e>
 8001726:	2064      	movs	r0, #100	@ 0x64
 8001728:	e7cb      	b.n	80016c2 <safeStopMotor+0x216>
 800172a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800172e:	e7c8      	b.n	80016c2 <safeStopMotor+0x216>
 8001730:	0800b890 	.word	0x0800b890
 8001734:	43c80000 	.word	0x43c80000
 8001738:	0800b8ac 	.word	0x0800b8ac
 800173c:	42c80000 	.word	0x42c80000
 8001740:	41278d37 	.word	0x41278d37
 8001744:	3dd67751 	.word	0x3dd67751
 8001748:	42480000 	.word	0x42480000
 800174c:	4516f759 	.word	0x4516f759
 8001750:	47ebe27a 	.word	0x47ebe27a
 8001754:	3d29930c 	.word	0x3d29930c
 8001758:	c2c80000 	.word	0xc2c80000
 800175c:	20000000 	.word	0x20000000
 8001760:	c1278d37 	.word	0xc1278d37
 8001764:	0800b8e0 	.word	0x0800b8e0
 8001768:	0800b938 	.word	0x0800b938
 800176c:	0800b8d0 	.word	0x0800b8d0
 8001770:	0800b5d4 	.word	0x0800b5d4
 8001774:	200004b0 	.word	0x200004b0
 8001778:	200004b4 	.word	0x200004b4
 800177c:	0800b5ec 	.word	0x0800b5ec
 8001780:	20000008 	.word	0x20000008
 8001784:	42f00000 	.word	0x42f00000

08001788 <StartSingleMotor>:
void StartSingleMotor (float newSpeed){
 8001788:	b508      	push	{r3, lr}
	 uart_debug_print("Checking speed...\r\n");
 800178a:	483b      	ldr	r0, [pc, #236]	@ (8001878 <StartSingleMotor+0xf0>)
void StartSingleMotor (float newSpeed){
 800178c:	ed2d 8b02 	vpush	{d8}
 8001790:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 8001794:	f004 fa96 	bl	8005cc4 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8001798:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800187c <StartSingleMotor+0xf4>
 800179c:	eef0 7ac8 	vabs.f32	s15, s16
 80017a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	d43b      	bmi.n	8001822 <StartSingleMotor+0x9a>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 80017aa:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001880 <StartSingleMotor+0xf8>
 80017ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b6:	dc25      	bgt.n	8001804 <StartSingleMotor+0x7c>
	if (fabs(speedCmd) < 0.001){
 80017b8:	ee17 0a90 	vmov	r0, s15
 80017bc:	f7fe ffba 	bl	8000734 <__aeabi_f2d>
 80017c0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001870 <StartSingleMotor+0xe8>)
 80017c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017c6:	f7ff f86d 	bl	80008a4 <__aeabi_dcmplt>
 80017ca:	bb50      	cbnz	r0, 8001822 <StartSingleMotor+0x9a>
	 uart_debug_print("Checking reversing...\r\n");
 80017cc:	482d      	ldr	r0, [pc, #180]	@ (8001884 <StartSingleMotor+0xfc>)
 80017ce:	f004 fa79 	bl	8005cc4 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 80017d2:	4b2d      	ldr	r3, [pc, #180]	@ (8001888 <StartSingleMotor+0x100>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	dd3a      	ble.n	8001850 <StartSingleMotor+0xc8>
 80017da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80017de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e2:	d51b      	bpl.n	800181c <StartSingleMotor+0x94>
		if (safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), START)){
 80017e4:	f001 fac4 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
 80017e8:	2004      	movs	r0, #4
 80017ea:	f7ff fe5f 	bl	80014ac <safeStopMotor>
 80017ee:	b340      	cbz	r0, 8001842 <StartSingleMotor+0xba>
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 80017f0:	4826      	ldr	r0, [pc, #152]	@ (800188c <StartSingleMotor+0x104>)
 80017f2:	f004 fa67 	bl	8005cc4 <uart_debug_print>
}
 80017f6:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 80017fa:	4825      	ldr	r0, [pc, #148]	@ (8001890 <StartSingleMotor+0x108>)
}
 80017fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 8001800:	f004 ba60 	b.w	8005cc4 <uart_debug_print>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001804:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 uart_debug_print("Checking reversing...\r\n");
 800180c:	481d      	ldr	r0, [pc, #116]	@ (8001884 <StartSingleMotor+0xfc>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 800180e:	dd26      	ble.n	800185e <StartSingleMotor+0xd6>
	 uart_debug_print("Checking reversing...\r\n");
 8001810:	f004 fa58 	bl	8005cc4 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8001814:	4b1c      	ldr	r3, [pc, #112]	@ (8001888 <StartSingleMotor+0x100>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	dd27      	ble.n	800186c <StartSingleMotor+0xe4>
}
 800181c:	ecbd 8b02 	vpop	{d8}
 8001820:	bd08      	pop	{r3, pc}
		uart_debug_print("Motor received command that is or was considered to be 0\r\n");
 8001822:	481c      	ldr	r0, [pc, #112]	@ (8001894 <StartSingleMotor+0x10c>)
 8001824:	f004 fa4e 	bl	8005cc4 <uart_debug_print>
		if (safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), START)){
 8001828:	f001 faa2 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
 800182c:	2004      	movs	r0, #4
 800182e:	f7ff fe3d 	bl	80014ac <safeStopMotor>
 8001832:	b130      	cbz	r0, 8001842 <StartSingleMotor+0xba>
}
 8001834:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001838:	4814      	ldr	r0, [pc, #80]	@ (800188c <StartSingleMotor+0x104>)
}
 800183a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 800183e:	f004 ba41 	b.w	8005cc4 <uart_debug_print>
}
 8001842:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 8001846:	4814      	ldr	r0, [pc, #80]	@ (8001898 <StartSingleMotor+0x110>)
}
 8001848:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 800184c:	f004 ba3a 	b.w	8005cc4 <uart_debug_print>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8001850:	d0e4      	beq.n	800181c <StartSingleMotor+0x94>
 8001852:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	dcc3      	bgt.n	80017e4 <StartSingleMotor+0x5c>
 800185c:	e7de      	b.n	800181c <StartSingleMotor+0x94>
	 uart_debug_print("Checking reversing...\r\n");
 800185e:	f004 fa31 	bl	8005cc4 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <StartSingleMotor+0x100>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	dcbc      	bgt.n	80017e4 <StartSingleMotor+0x5c>
 800186a:	e7d7      	b.n	800181c <StartSingleMotor+0x94>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 800186c:	d1ba      	bne.n	80017e4 <StartSingleMotor+0x5c>
 800186e:	e7d5      	b.n	800181c <StartSingleMotor+0x94>
 8001870:	d2f1a9fc 	.word	0xd2f1a9fc
 8001874:	3f50624d 	.word	0x3f50624d
 8001878:	0800b6d0 	.word	0x0800b6d0
 800187c:	42480000 	.word	0x42480000
 8001880:	45480000 	.word	0x45480000
 8001884:	0800b950 	.word	0x0800b950
 8001888:	200004b0 	.word	0x200004b0
 800188c:	0800b9a4 	.word	0x0800b9a4
 8001890:	0800b9fc 	.word	0x0800b9fc
 8001894:	0800b968 	.word	0x0800b968
 8001898:	0800b9cc 	.word	0x0800b9cc

0800189c <ControlSingleMotor>:
void ControlSingleMotor(float newSpeed){
 800189c:	b508      	push	{r3, lr}
 800189e:	ed2d 8b02 	vpush	{d8}
 80018a2:	eeb0 8a40 	vmov.f32	s16, s0
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 80018a6:	f001 fa87 	bl	8002db8 <MC_GetSTMStateMotor1>
	switch (motorState){
 80018aa:	2813      	cmp	r0, #19
 80018ac:	d80b      	bhi.n	80018c6 <ControlSingleMotor+0x2a>
 80018ae:	e8df f000 	tbb	[pc, r0]
 80018b2:	0a12      	.short	0x0a12
 80018b4:	0a1d0a0a 	.word	0x0a1d0a0a
 80018b8:	0a0a0a28 	.word	0x0a0a0a28
 80018bc:	0a0a3a33 	.word	0x0a0a3a33
 80018c0:	410a0a0a 	.word	0x410a0a0a
 80018c4:	430a      	.short	0x430a
}
 80018c6:	ecbd 8b02 	vpop	{d8}
 80018ca:	4601      	mov	r1, r0
 80018cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    uart_debug_print("Motor state not explicitly handled: %d\r\n", motorState);
 80018d0:	481a      	ldr	r0, [pc, #104]	@ (800193c <ControlSingleMotor+0xa0>)
 80018d2:	f004 b9f7 	b.w	8005cc4 <uart_debug_print>
		uart_debug_print("Motor State: Idle\r\n");
 80018d6:	481a      	ldr	r0, [pc, #104]	@ (8001940 <ControlSingleMotor+0xa4>)
 80018d8:	f004 f9f4 	bl	8005cc4 <uart_debug_print>
		IdleSingleMotor(newSpeed);
 80018dc:	eeb0 0a48 	vmov.f32	s0, s16
}
 80018e0:	ecbd 8b02 	vpop	{d8}
 80018e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		IdleSingleMotor(newSpeed);
 80018e8:	f7ff bcea 	b.w	80012c0 <IdleSingleMotor>
		uart_debug_print("Motor State: Start\r\n");
 80018ec:	4815      	ldr	r0, [pc, #84]	@ (8001944 <ControlSingleMotor+0xa8>)
		uart_debug_print("Motor State: Switch over\r\n");
 80018ee:	f004 f9e9 	bl	8005cc4 <uart_debug_print>
		StartSingleMotor(newSpeed);
 80018f2:	eeb0 0a48 	vmov.f32	s0, s16
}
 80018f6:	ecbd 8b02 	vpop	{d8}
 80018fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StartSingleMotor(newSpeed);
 80018fe:	f7ff bf43 	b.w	8001788 <StartSingleMotor>
		uart_debug_print("Motor State: Run\r\n");
 8001902:	4811      	ldr	r0, [pc, #68]	@ (8001948 <ControlSingleMotor+0xac>)
 8001904:	f004 f9de 	bl	8005cc4 <uart_debug_print>
		runSingleMotorV2(newSpeed);
 8001908:	eeb0 0a48 	vmov.f32	s0, s16
}
 800190c:	ecbd 8b02 	vpop	{d8}
 8001910:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		runSingleMotorV2(newSpeed);
 8001914:	f7ff bb94 	b.w	8001040 <runSingleMotorV2>
}
 8001918:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Now \r\n");
 800191c:	480b      	ldr	r0, [pc, #44]	@ (800194c <ControlSingleMotor+0xb0>)
}
 800191e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Now \r\n");
 8001922:	f004 b9cf 	b.w	8005cc4 <uart_debug_print>
}
 8001926:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Over \r\n");
 800192a:	4809      	ldr	r0, [pc, #36]	@ (8001950 <ControlSingleMotor+0xb4>)
}
 800192c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001930:	f004 b9c8 	b.w	8005cc4 <uart_debug_print>
		uart_debug_print("Motor State: Offset Calibration\r\n");
 8001934:	4807      	ldr	r0, [pc, #28]	@ (8001954 <ControlSingleMotor+0xb8>)
 8001936:	e7da      	b.n	80018ee <ControlSingleMotor+0x52>
		uart_debug_print("Motor State: Switch over\r\n");
 8001938:	4807      	ldr	r0, [pc, #28]	@ (8001958 <ControlSingleMotor+0xbc>)
 800193a:	e7d8      	b.n	80018ee <ControlSingleMotor+0x52>
 800193c:	0800ba98 	.word	0x0800ba98
 8001940:	0800ba2c 	.word	0x0800ba2c
 8001944:	0800ba40 	.word	0x0800ba40
 8001948:	0800b644 	.word	0x0800b644
 800194c:	0800b674 	.word	0x0800b674
 8001950:	0800b658 	.word	0x0800b658
 8001954:	0800ba74 	.word	0x0800ba74
 8001958:	0800ba58 	.word	0x0800ba58

0800195c <Process_Multiple_ESC_Command>:
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 800195c:	b538      	push	{r3, r4, r5, lr}
 800195e:	4604      	mov	r4, r0
 8001960:	ed2d 8b02 	vpush	{d8}
	 uart_debug_print("Running Multiple Motors...\r\n");
 8001964:	481d      	ldr	r0, [pc, #116]	@ (80019dc <Process_Multiple_ESC_Command+0x80>)
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001966:	460d      	mov	r5, r1
	 uart_debug_print("Running Multiple Motors...\r\n");
 8001968:	f004 f9ac 	bl	8005cc4 <uart_debug_print>
	switch(CANMessageID->runSpec){
 800196c:	7963      	ldrb	r3, [r4, #5]
 800196e:	b323      	cbz	r3, 80019ba <Process_Multiple_ESC_Command+0x5e>
 8001970:	2b02      	cmp	r3, #2
 8001972:	d002      	beq.n	800197a <Process_Multiple_ESC_Command+0x1e>
}
 8001974:	ecbd 8b02 	vpop	{d8}
 8001978:	bd38      	pop	{r3, r4, r5, pc}
    return value;
}


int16_t extract_multiple_speeds(const uint8_t *rxData){
    uint16_t offset = ESC_ID * 2;
 800197a:	4b19      	ldr	r3, [pc, #100]	@ (80019e0 <Process_Multiple_ESC_Command+0x84>)
			 uart_debug_print("Running This Motor\r\n");
 800197c:	4819      	ldr	r0, [pc, #100]	@ (80019e4 <Process_Multiple_ESC_Command+0x88>)
    uint16_t offset = ESC_ID * 2;
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	005b      	lsls	r3, r3, #1
    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
 8001982:	b29b      	uxth	r3, r3
 8001984:	18ea      	adds	r2, r5, r3
 8001986:	5cec      	ldrb	r4, [r5, r3]
 8001988:	7853      	ldrb	r3, [r2, #1]
 800198a:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 800198e:	b224      	sxth	r4, r4
			 uart_debug_print("Running This Motor\r\n");
 8001990:	f004 f998 	bl	8005cc4 <uart_debug_print>
			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
 8001994:	4621      	mov	r1, r4
 8001996:	4814      	ldr	r0, [pc, #80]	@ (80019e8 <Process_Multiple_ESC_Command+0x8c>)
 8001998:	f004 f994 	bl	8005cc4 <uart_debug_print>
			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 800199c:	4b13      	ldr	r3, [pc, #76]	@ (80019ec <Process_Multiple_ESC_Command+0x90>)
 800199e:	4814      	ldr	r0, [pc, #80]	@ (80019f0 <Process_Multiple_ESC_Command+0x94>)
 80019a0:	6819      	ldr	r1, [r3, #0]
 80019a2:	f004 f98f 	bl	8005cc4 <uart_debug_print>
}
 80019a6:	ecbd 8b02 	vpop	{d8}
			ControlSingleMotor(curESCSpeed);
 80019aa:	ee07 4a90 	vmov	s15, r4
}
 80019ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ControlSingleMotor(curESCSpeed);
 80019b2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80019b6:	f7ff bf71 	b.w	800189c <ControlSingleMotor>
			 uart_debug_print("Stop this motor\r\n");
 80019ba:	480e      	ldr	r0, [pc, #56]	@ (80019f4 <Process_Multiple_ESC_Command+0x98>)
 80019bc:	f004 f982 	bl	8005cc4 <uart_debug_print>
	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 80019c0:	f001 f9d6 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
 80019c4:	eeb0 8a40 	vmov.f32	s16, s0
 80019c8:	f001 f9f6 	bl	8002db8 <MC_GetSTMStateMotor1>
 80019cc:	eeb0 0a48 	vmov.f32	s0, s16
}
 80019d0:	ecbd 8b02 	vpop	{d8}
 80019d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 80019d8:	f7ff bd68 	b.w	80014ac <safeStopMotor>
 80019dc:	0800bac4 	.word	0x0800bac4
 80019e0:	20000004 	.word	0x20000004
 80019e4:	0800bae4 	.word	0x0800bae4
 80019e8:	0800bafc 	.word	0x0800bafc
 80019ec:	200004b0 	.word	0x200004b0
 80019f0:	0800bb10 	.word	0x0800bb10
 80019f4:	0800bb28 	.word	0x0800bb28

080019f8 <sendCANResponse>:
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 80019f8:	b530      	push	{r4, r5, lr}
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80019fa:	7843      	ldrb	r3, [r0, #1]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80019fc:	f890 c004 	ldrb.w	ip, [r0, #4]
    txID |= (CANMessageID->motorID & 0x0f);
 8001a00:	7984      	ldrb	r4, [r0, #6]
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001a02:	7881      	ldrb	r1, [r0, #2]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8001a04:	78c2      	ldrb	r2, [r0, #3]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8001a06:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 8001a0a:	01db      	lsls	r3, r3, #7
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8001a0c:	f00c 0070 	and.w	r0, ip, #112	@ 0x70
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 8001a10:	b2db      	uxtb	r3, r3
    txID |= (CANMessageID->motorID & 0x0f);
 8001a12:	4303      	orrs	r3, r0
 8001a14:	f004 040f 	and.w	r4, r4, #15
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001a18:	0209      	lsls	r1, r1, #8
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8001a1a:	b08f      	sub	sp, #60	@ 0x3c
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001a1c:	f401 7180 	and.w	r1, r1, #256	@ 0x100
    txID |= (CANMessageID->motorID & 0x0f);
 8001a20:	431c      	orrs	r4, r3
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8001a22:	0253      	lsls	r3, r2, #9
    txID |= (CANMessageID->motorID & 0x0f);
 8001a24:	430c      	orrs	r4, r1
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8001a26:	ed8d 0a01 	vstr	s0, [sp, #4]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8001a2a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001a2e:	480f      	ldr	r0, [pc, #60]	@ (8001a6c <sendCANResponse+0x74>)
    txID |= (CANMessageID->motorID & 0x0f);
 8001a30:	431c      	orrs	r4, r3
    memcpy(txData, &information, sizeof(float)); // data[0] --> data[3] now stores float
 8001a32:	9b01      	ldr	r3, [sp, #4]
 8001a34:	9303      	str	r3, [sp, #12]
    txID |= (CANMessageID->motorID & 0x0f);
 8001a36:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001a3a:	f004 f943 	bl	8005cc4 <uart_debug_print>
    txHeader.DataLength          = FDCAN_DLC_BYTES_8;
 8001a3e:	2508      	movs	r5, #8
    txHeader.IdType              = FDCAN_STANDARD_ID;
 8001a40:	2300      	movs	r3, #0
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8001a42:	480b      	ldr	r0, [pc, #44]	@ (8001a70 <sendCANResponse+0x78>)
    txHeader.Identifier          = txID;
 8001a44:	9405      	str	r4, [sp, #20]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8001a46:	aa03      	add	r2, sp, #12
 8001a48:	a905      	add	r1, sp, #20
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8001a4a:	e9cd 3306 	strd	r3, r3, [sp, #24]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001a4e:	e9cd 5308 	strd	r5, r3, [sp, #32]
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 8001a52:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    txHeader.MessageMarker       = 0;
 8001a56:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8001a5a:	f005 fcff 	bl	800745c <HAL_FDCAN_AddMessageToTxFifoQ>
 8001a5e:	b908      	cbnz	r0, 8001a64 <sendCANResponse+0x6c>
}
 8001a60:	b00f      	add	sp, #60	@ 0x3c
 8001a62:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 8001a64:	f001 f968 	bl	8002d38 <Error_Handler>
}
 8001a68:	b00f      	add	sp, #60	@ 0x3c
 8001a6a:	bd30      	pop	{r4, r5, pc}
 8001a6c:	0800bb3c 	.word	0x0800bb3c
 8001a70:	20000790 	.word	0x20000790

08001a74 <Process_Single_ESC_Command>:
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001a74:	b510      	push	{r4, lr}
 8001a76:	ed2d 8b02 	vpush	{d8}
	if (CANMessageID->commandType == ACTION_RUN){
 8001a7a:	78c2      	ldrb	r2, [r0, #3]
    reorderedData[0] = data[0];
 8001a7c:	680b      	ldr	r3, [r1, #0]
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001a7e:	4604      	mov	r4, r0
	if (CANMessageID->commandType == ACTION_RUN){
 8001a80:	b94a      	cbnz	r2, 8001a96 <Process_Single_ESC_Command+0x22>
		switch(CANMessageID->runSpec){
 8001a82:	7942      	ldrb	r2, [r0, #5]
 8001a84:	ee08 3a10 	vmov	s16, r3
 8001a88:	2a05      	cmp	r2, #5
 8001a8a:	d814      	bhi.n	8001ab6 <Process_Single_ESC_Command+0x42>
 8001a8c:	e8df f002 	tbb	[pc, r2]
 8001a90:	2d132716 	.word	0x2d132716
 8001a94:	0c4c      	.short	0x0c4c
		switch(CANMessageID->readSpec){
 8001a96:	7903      	ldrb	r3, [r0, #4]
 8001a98:	2b07      	cmp	r3, #7
 8001a9a:	d80c      	bhi.n	8001ab6 <Process_Single_ESC_Command+0x42>
 8001a9c:	e8df f003 	tbb	[pc, r3]
 8001aa0:	5f9b849e 	.word	0x5f9b849e
 8001aa4:	7c0b796c 	.word	0x7c0b796c
				uart_debug_print("In case RUN_POSIITON_INCREMENT\r\n");
 8001aa8:	4869      	ldr	r0, [pc, #420]	@ (8001c50 <Process_Single_ESC_Command+0x1dc>)
 8001aaa:	f004 f90b 	bl	8005cc4 <uart_debug_print>
				isCalibrated = CalibrateSingleMotor();
 8001aae:	f7ff f931 	bl	8000d14 <CalibrateSingleMotor>
 8001ab2:	4b68      	ldr	r3, [pc, #416]	@ (8001c54 <Process_Single_ESC_Command+0x1e0>)
 8001ab4:	7018      	strb	r0, [r3, #0]
}
 8001ab6:	ecbd 8b02 	vpop	{d8}
 8001aba:	bd10      	pop	{r4, pc}
				uart_debug_print("Motor Stopped \r\n");
 8001abc:	4866      	ldr	r0, [pc, #408]	@ (8001c58 <Process_Single_ESC_Command+0x1e4>)
 8001abe:	f004 f901 	bl	8005cc4 <uart_debug_print>
				safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 8001ac2:	f001 f955 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
 8001ac6:	eeb0 8a40 	vmov.f32	s16, s0
 8001aca:	f001 f975 	bl	8002db8 <MC_GetSTMStateMotor1>
 8001ace:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001ad2:	ecbd 8b02 	vpop	{d8}
 8001ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 8001ada:	f7ff bce7 	b.w	80014ac <safeStopMotor>
}
 8001ade:	ecbd 8b02 	vpop	{d8}
 8001ae2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				MC_AcknowledgeFaultMotor1();
 8001ae6:	f001 b95b 	b.w	8002da0 <MC_AcknowledgeFaultMotor1>
				uart_debug_print("In case RUN_POSIITON_INCREMENT\r\n");
 8001aea:	4859      	ldr	r0, [pc, #356]	@ (8001c50 <Process_Single_ESC_Command+0x1dc>)
 8001aec:	f004 f8ea 	bl	8005cc4 <uart_debug_print>
				if (isCalibrated){
 8001af0:	4b58      	ldr	r3, [pc, #352]	@ (8001c54 <Process_Single_ESC_Command+0x1e0>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d07a      	beq.n	8001bee <Process_Single_ESC_Command+0x17a>
				uart_debug_print("In case RUN_POSIITON\r\n");
 8001af8:	4858      	ldr	r0, [pc, #352]	@ (8001c5c <Process_Single_ESC_Command+0x1e8>)
 8001afa:	f004 f8e3 	bl	8005cc4 <uart_debug_print>
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 8001afe:	f001 f95b 	bl	8002db8 <MC_GetSTMStateMotor1>
	switch (motorState){
 8001b02:	280a      	cmp	r0, #10
 8001b04:	f000 8086 	beq.w	8001c14 <Process_Single_ESC_Command+0x1a0>
 8001b08:	280b      	cmp	r0, #11
 8001b0a:	d07c      	beq.n	8001c06 <Process_Single_ESC_Command+0x192>
 8001b0c:	2806      	cmp	r0, #6
 8001b0e:	f040 8097 	bne.w	8001c40 <Process_Single_ESC_Command+0x1cc>
		uart_debug_print("Motor State: Run\r\n");
 8001b12:	4853      	ldr	r0, [pc, #332]	@ (8001c60 <Process_Single_ESC_Command+0x1ec>)
 8001b14:	f004 f8d6 	bl	8005cc4 <uart_debug_print>
		runSingleMotorPositionIncrement(newPosition);
 8001b18:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001b1c:	ecbd 8b02 	vpop	{d8}
 8001b20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		runSingleMotorPositionIncrement(newPosition);
 8001b24:	f7ff b9dc 	b.w	8000ee0 <runSingleMotorPositionIncrement>
				if (isCalibrated){
 8001b28:	4b4a      	ldr	r3, [pc, #296]	@ (8001c54 <Process_Single_ESC_Command+0x1e0>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d05e      	beq.n	8001bee <Process_Single_ESC_Command+0x17a>
				uart_debug_print("In case RUN_POSIITON\r\n");
 8001b30:	484a      	ldr	r0, [pc, #296]	@ (8001c5c <Process_Single_ESC_Command+0x1e8>)
 8001b32:	f004 f8c7 	bl	8005cc4 <uart_debug_print>
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 8001b36:	f001 f93f 	bl	8002db8 <MC_GetSTMStateMotor1>
	switch (motorState){
 8001b3a:	280a      	cmp	r0, #10
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 8001b3c:	4601      	mov	r1, r0
	switch (motorState){
 8001b3e:	d069      	beq.n	8001c14 <Process_Single_ESC_Command+0x1a0>
 8001b40:	280b      	cmp	r0, #11
 8001b42:	d060      	beq.n	8001c06 <Process_Single_ESC_Command+0x192>
 8001b44:	2806      	cmp	r0, #6
 8001b46:	d174      	bne.n	8001c32 <Process_Single_ESC_Command+0x1be>
		uart_debug_print("Motor State: Run\r\n");
 8001b48:	4845      	ldr	r0, [pc, #276]	@ (8001c60 <Process_Single_ESC_Command+0x1ec>)
 8001b4a:	f004 f8bb 	bl	8005cc4 <uart_debug_print>
		runSingleMotorPosition(newPosition);
 8001b4e:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001b52:	ecbd 8b02 	vpop	{d8}
 8001b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		runSingleMotorPosition(newPosition);
 8001b5a:	f7ff b91d 	b.w	8000d98 <runSingleMotorPosition>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 8001b5e:	f001 f90d 	bl	8002d7c <MC_GetPhaseCurrentAmplitudeMotor1>
 8001b62:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, phaseCurrent);
 8001b66:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8001b6a:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, currentState);
 8001b6e:	4620      	mov	r0, r4
}
 8001b70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentState);
 8001b74:	f7ff bf40 	b.w	80019f8 <sendCANResponse>
				float currentFaults = MC_GetOccurredFaultsMotor1();
 8001b78:	f001 f918 	bl	8002dac <MC_GetOccurredFaultsMotor1>
}
 8001b7c:	ecbd 8b02 	vpop	{d8}
				float currentState = MC_GetSTMStateMotor1();
 8001b80:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, currentState);
 8001b84:	4620      	mov	r0, r4
 8001b86:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8001b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentState);
 8001b8e:	f7ff bf33 	b.w	80019f8 <sendCANResponse>
				float currentState = MC_GetSTMStateMotor1();
 8001b92:	f001 f911 	bl	8002db8 <MC_GetSTMStateMotor1>
 8001b96:	e7f1      	b.n	8001b7c <Process_Single_ESC_Command+0x108>
}
 8001b98:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, feedback);
 8001b9c:	ed9f 0a31 	vldr	s0, [pc, #196]	@ 8001c64 <Process_Single_ESC_Command+0x1f0>
}
 8001ba0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, feedback);
 8001ba4:	f7ff bf28 	b.w	80019f8 <sendCANResponse>
	int16_t DPPPosition = MC_GetElAngledppMotor1();
 8001ba8:	f001 f8f4 	bl	8002d94 <MC_GetElAngledppMotor1>
	switch((MotorID)ESC_ID){
 8001bac:	4b2e      	ldr	r3, [pc, #184]	@ (8001c68 <Process_Single_ESC_Command+0x1f4>)
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8001bae:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001c6c <Process_Single_ESC_Command+0x1f8>
 8001bb2:	781b      	ldrb	r3, [r3, #0]
	int16_t DPPPosition = MC_GetElAngledppMotor1();
 8001bb4:	ee07 0a90 	vmov	s15, r0
	float elecAngle = ((float)elDPPangle) * 360/65536;
 8001bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	switch((MotorID)ESC_ID){
 8001bbc:	2b09      	cmp	r3, #9
	float mechAngle = elecAngle/POLE_PAIR_NUM;
 8001bbe:	ee67 7a87 	vmul.f32	s15, s15, s14
	switch((MotorID)ESC_ID){
 8001bc2:	d01b      	beq.n	8001bfc <Process_Single_ESC_Command+0x188>
 8001bc4:	2b0a      	cmp	r3, #10
 8001bc6:	d02f      	beq.n	8001c28 <Process_Single_ESC_Command+0x1b4>
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d12a      	bne.n	8001c22 <Process_Single_ESC_Command+0x1ae>
			return (mechDegreeInputShaft/WAIST_GEAR_RATIO);
 8001bcc:	ed9f 7a28 	vldr	s14, [pc, #160]	@ 8001c70 <Process_Single_ESC_Command+0x1fc>
 8001bd0:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001bd4:	e7c9      	b.n	8001b6a <Process_Single_ESC_Command+0xf6>
				float phaseVoltage = MC_GetPhaseVoltageAmplitudeMotor1();
 8001bd6:	f001 f8d7 	bl	8002d88 <MC_GetPhaseVoltageAmplitudeMotor1>
 8001bda:	e7c2      	b.n	8001b62 <Process_Single_ESC_Command+0xee>
				float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8001bdc:	f001 f8c8 	bl	8002d70 <MC_GetMecSpeedReferenceMotor1_F>
}
 8001be0:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, currentSpeed);
 8001be4:	4620      	mov	r0, r4
}
 8001be6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentSpeed);
 8001bea:	f7ff bf05 	b.w	80019f8 <sendCANResponse>
}
 8001bee:	ecbd 8b02 	vpop	{d8}
					uart_debug_print("Motor tried to run but is not calibrated\r\n");
 8001bf2:	4820      	ldr	r0, [pc, #128]	@ (8001c74 <Process_Single_ESC_Command+0x200>)
}
 8001bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					uart_debug_print("Motor tried to run but is not calibrated\r\n");
 8001bf8:	f004 b864 	b.w	8005cc4 <uart_debug_print>
				return (mechDegreeInputShaft/SHOULDER_GEAR_RATIO);
 8001bfc:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8001c78 <Process_Single_ESC_Command+0x204>
 8001c00:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001c04:	e7b1      	b.n	8001b6a <Process_Single_ESC_Command+0xf6>
}
 8001c06:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001c0a:	481c      	ldr	r0, [pc, #112]	@ (8001c7c <Process_Single_ESC_Command+0x208>)
}
 8001c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001c10:	f004 b858 	b.w	8005cc4 <uart_debug_print>
}
 8001c14:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Now \r\n");
 8001c18:	4819      	ldr	r0, [pc, #100]	@ (8001c80 <Process_Single_ESC_Command+0x20c>)
}
 8001c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_debug_print("Motor State: Fault Now \r\n");
 8001c1e:	f004 b851 	b.w	8005cc4 <uart_debug_print>
	switch((MotorID)ESC_ID){
 8001c22:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
				sendCANResponse(CANMessageID,positionAdjusted);
 8001c26:	e7a0      	b.n	8001b6a <Process_Single_ESC_Command+0xf6>
				return (mechDegreeInputShaft/ELBOW_GEAR_RATIO);
 8001c28:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001c84 <Process_Single_ESC_Command+0x210>
 8001c2c:	ee27 0a87 	vmul.f32	s0, s15, s14
 8001c30:	e79b      	b.n	8001b6a <Process_Single_ESC_Command+0xf6>
}
 8001c32:	ecbd 8b02 	vpop	{d8}
	    uart_debug_print("Motor state is not valid. State:  %d\r\n", motorState);
 8001c36:	4814      	ldr	r0, [pc, #80]	@ (8001c88 <Process_Single_ESC_Command+0x214>)
}
 8001c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    uart_debug_print("Motor state is not valid. State:  %d\r\n", motorState);
 8001c3c:	f004 b842 	b.w	8005cc4 <uart_debug_print>
}
 8001c40:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor not Calibrated");
 8001c44:	4811      	ldr	r0, [pc, #68]	@ (8001c8c <Process_Single_ESC_Command+0x218>)
}
 8001c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		uart_debug_print("Motor not Calibrated");
 8001c4a:	f004 b83b 	b.w	8005cc4 <uart_debug_print>
 8001c4e:	bf00      	nop
 8001c50:	0800bb6c 	.word	0x0800bb6c
 8001c54:	200004a4 	.word	0x200004a4
 8001c58:	0800bb58 	.word	0x0800bb58
 8001c5c:	0800bb90 	.word	0x0800bb90
 8001c60:	0800b644 	.word	0x0800b644
 8001c64:	428a0000 	.word	0x428a0000
 8001c68:	20000004 	.word	0x20000004
 8001c6c:	3a4db6dc 	.word	0x3a4db6dc
 8001c70:	3c94f209 	.word	0x3c94f209
 8001c74:	0800bba8 	.word	0x0800bba8
 8001c78:	3c088889 	.word	0x3c088889
 8001c7c:	0800b658 	.word	0x0800b658
 8001c80:	0800b674 	.word	0x0800b674
 8001c84:	3c23d70a 	.word	0x3c23d70a
 8001c88:	0800b690 	.word	0x0800b690
 8001c8c:	0800b6b8 	.word	0x0800b6b8

08001c90 <CAN_Parse_MSG>:
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	4604      	mov	r4, r0
 8001c94:	b083      	sub	sp, #12
	uart_debug_print("Parsing the ID...\r\n");
 8001c96:	4823      	ldr	r0, [pc, #140]	@ (8001d24 <CAN_Parse_MSG+0x94>)
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 8001c98:	460e      	mov	r6, r1
	uart_debug_print("Parsing the ID...\r\n");
 8001c9a:	f004 f813 	bl	8005cc4 <uart_debug_print>
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8001c9e:	8825      	ldrh	r5, [r4, #0]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 8001ca0:	f3c5 2380 	ubfx	r3, r5, #10, #1
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8001ca4:	f3c5 040a 	ubfx	r4, r5, #0, #11
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 8001ca8:	f88d 3000 	strb.w	r3, [sp]
	if (CANMessage.messageSender == SLAVE){
 8001cac:	b9f3      	cbnz	r3, 8001cec <CAN_Parse_MSG+0x5c>
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 8001cae:	0a63      	lsrs	r3, r4, #9
 8001cb0:	f88d 3003 	strb.w	r3, [sp, #3]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 8001cb4:	f3c4 1702 	ubfx	r7, r4, #4, #3
	if (CANMessage.commandType == ACTION_RUN){
 8001cb8:	b1d3      	cbz	r3, 8001cf0 <CAN_Parse_MSG+0x60>
		uart_debug_print("Read Command Detected\r\n");
 8001cba:	481b      	ldr	r0, [pc, #108]	@ (8001d28 <CAN_Parse_MSG+0x98>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8001cbc:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Read Command Detected\r\n");
 8001cc0:	f004 f800 	bl	8005cc4 <uart_debug_print>
		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 8001cc4:	f88d 7004 	strb.w	r7, [sp, #4]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8001cc8:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8001ccc:	b1dc      	cbz	r4, 8001d06 <CAN_Parse_MSG+0x76>
		if (CANMessage.motorID == ESC_ID){
 8001cce:	4b17      	ldr	r3, [pc, #92]	@ (8001d2c <CAN_Parse_MSG+0x9c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f005 050f 	and.w	r5, r5, #15
 8001cd6:	429d      	cmp	r5, r3
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 8001cd8:	f88d 5006 	strb.w	r5, [sp, #6]
		if (CANMessage.motorID == ESC_ID){
 8001cdc:	d11c      	bne.n	8001d18 <CAN_Parse_MSG+0x88>
			uart_debug_print("Processing Single Command\r\n");
 8001cde:	4814      	ldr	r0, [pc, #80]	@ (8001d30 <CAN_Parse_MSG+0xa0>)
 8001ce0:	f003 fff0 	bl	8005cc4 <uart_debug_print>
			Process_Single_ESC_Command(&CANMessage, rxData);
 8001ce4:	4631      	mov	r1, r6
 8001ce6:	4668      	mov	r0, sp
 8001ce8:	f7ff fec4 	bl	8001a74 <Process_Single_ESC_Command>
}
 8001cec:	b003      	add	sp, #12
 8001cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_debug_print("Run Command Detected\r\n");
 8001cf0:	4810      	ldr	r0, [pc, #64]	@ (8001d34 <CAN_Parse_MSG+0xa4>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8001cf2:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Run Command Detected\r\n");
 8001cf6:	f003 ffe5 	bl	8005cc4 <uart_debug_print>
			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 8001cfa:	f88d 7005 	strb.w	r7, [sp, #5]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8001cfe:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8001d02:	2c00      	cmp	r4, #0
 8001d04:	d1e3      	bne.n	8001cce <CAN_Parse_MSG+0x3e>
		uart_debug_print("Processing Multiple Commands\r\n");
 8001d06:	480c      	ldr	r0, [pc, #48]	@ (8001d38 <CAN_Parse_MSG+0xa8>)
 8001d08:	f003 ffdc 	bl	8005cc4 <uart_debug_print>
		Process_Multiple_ESC_Command(&CANMessage, rxData);
 8001d0c:	4631      	mov	r1, r6
 8001d0e:	4668      	mov	r0, sp
 8001d10:	f7ff fe24 	bl	800195c <Process_Multiple_ESC_Command>
}
 8001d14:	b003      	add	sp, #12
 8001d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 uart_debug_print("Not My IDr\n");
 8001d18:	4808      	ldr	r0, [pc, #32]	@ (8001d3c <CAN_Parse_MSG+0xac>)
}
 8001d1a:	b003      	add	sp, #12
 8001d1c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			 uart_debug_print("Not My IDr\n");
 8001d20:	f003 bfd0 	b.w	8005cc4 <uart_debug_print>
 8001d24:	0800bbd4 	.word	0x0800bbd4
 8001d28:	0800bc00 	.word	0x0800bc00
 8001d2c:	20000004 	.word	0x20000004
 8001d30:	0800bc18 	.word	0x0800bc18
 8001d34:	0800bbe8 	.word	0x0800bbe8
 8001d38:	0800bc40 	.word	0x0800bc40
 8001d3c:	0800bc34 	.word	0x0800bc34

08001d40 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8001d40:	b570      	push	{r4, r5, r6, lr}
 8001d42:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8001d44:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001d46:	6940      	ldr	r0, [r0, #20]
 8001d48:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8001d4a:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001d4c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8001d4e:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8001d52:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001d56:	6960      	ldr	r0, [r4, #20]
 8001d58:	f104 011c 	add.w	r1, r4, #28
 8001d5c:	462b      	mov	r3, r5
 8001d5e:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001d60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001d64:	4718      	bx	r3
 8001d66:	bf00      	nop

08001d68 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8001d68:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8001d6a:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8001d6c:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8001d6e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001d72:	4c1e      	ldr	r4, [pc, #120]	@ (8001dec <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8001d74:	01db      	lsls	r3, r3, #7
 8001d76:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8001d7a:	784a      	ldrb	r2, [r1, #1]
 8001d7c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8001d80:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8001d82:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8001d86:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8001d90:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001d94:	5ca2      	ldrb	r2, [r4, r2]
 8001d96:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8001d9a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001d9c:	5ca2      	ldrb	r2, [r4, r2]
 8001d9e:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8001da2:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001da4:	5ca2      	ldrb	r2, [r4, r2]
 8001da6:	4c12      	ldr	r4, [pc, #72]	@ (8001df0 <ASPEP_sendBeacon+0x88>)
 8001da8:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8001dac:	5ca2      	ldrb	r2, [r4, r2]
 8001dae:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001db2:	f043 0305 	orr.w	r3, r3, #5
 8001db6:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001db8:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001dba:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001dbc:	b14b      	cbz	r3, 8001dd2 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8001dbe:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8001dc0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001dc4:	b913      	cbnz	r3, 8001dcc <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8001dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001dd0:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001dd2:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001ddc:	6481      	str	r1, [r0, #72]	@ 0x48
 8001dde:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001de0:	2204      	movs	r2, #4
 8001de2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8001de4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001de8:	6940      	ldr	r0, [r0, #20]
 8001dea:	4718      	bx	r3
 8001dec:	0800bce8 	.word	0x0800bce8
 8001df0:	0800bcd8 	.word	0x0800bcd8

08001df4 <ASPEP_sendPing>:
{
 8001df4:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8001df6:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8001df8:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8001dfc:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001e00:	4d1d      	ldr	r5, [pc, #116]	@ (8001e78 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8001e02:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001e06:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8001e0a:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001e0e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001e12:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8001e16:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001e1a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	4c16      	ldr	r4, [pc, #88]	@ (8001e7c <ASPEP_sendPing+0x88>)
 8001e22:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001e26:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001e2a:	5ca2      	ldrb	r2, [r4, r2]
 8001e2c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8001e30:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001e32:	5ca2      	ldrb	r2, [r4, r2]
 8001e34:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8001e38:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001e3a:	5ca2      	ldrb	r2, [r4, r2]
 8001e3c:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8001e40:	5ceb      	ldrb	r3, [r5, r3]
 8001e42:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8001e46:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001e48:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001e4a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8001e4c:	b143      	cbz	r3, 8001e60 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8001e4e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001e50:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001e54:	b913      	cbnz	r3, 8001e5c <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8001e56:	2302      	movs	r3, #2
 8001e58:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8001e5c:	bc30      	pop	{r4, r5}
 8001e5e:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001e60:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8001e64:	2303      	movs	r3, #3
 8001e66:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001e6a:	6481      	str	r1, [r0, #72]	@ 0x48
 8001e6c:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001e6e:	2204      	movs	r2, #4
 8001e70:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001e72:	6940      	ldr	r0, [r0, #20]
}
 8001e74:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001e76:	4718      	bx	r3
 8001e78:	0800bcd8 	.word	0x0800bcd8
 8001e7c:	0800bce8 	.word	0x0800bce8

08001e80 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8001e80:	2a0a      	cmp	r2, #10
 8001e82:	d009      	beq.n	8001e98 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8001e84:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d91d      	bls.n	8001ec8 <ASPEP_getBuffer+0x48>
 8001e8c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d90d      	bls.n	8001eb0 <ASPEP_getBuffer+0x30>
        result = false;
 8001e94:	2000      	movs	r0, #0
}
 8001e96:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8001e98:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d8f9      	bhi.n	8001e94 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001ea0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8001ea2:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8001ea8:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8001eac:	2001      	movs	r0, #1
 8001eae:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001eb0:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8001eb2:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001eb6:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001eba:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8001ebc:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001ec0:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001ec2:	600b      	str	r3, [r1, #0]
  bool result = true;
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001ec8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8001eca:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8001ece:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001ed2:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8001ed4:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8001ed8:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001eda:	600b      	str	r3, [r1, #0]
 8001edc:	e7f2      	b.n	8001ec4 <ASPEP_getBuffer+0x44>
 8001ede:	bf00      	nop

08001ee0 <ASPEP_sendPacket>:
{
 8001ee0:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8001ee2:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8001ee6:	2802      	cmp	r0, #2
 8001ee8:	d001      	beq.n	8001eee <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8001eea:	2002      	movs	r0, #2
 8001eec:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8001eee:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8001ef2:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8001ef6:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8001efa:	2801      	cmp	r0, #1
 8001efc:	d104      	bne.n	8001f08 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8001efe:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8001f02:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8001f04:	3202      	adds	r2, #2
 8001f06:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8001f08:	2b0a      	cmp	r3, #10
 8001f0a:	d105      	bne.n	8001f18 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8001f0c:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8001f10:	b348      	cbz	r0, 8001f66 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8001f12:	2000      	movs	r0, #0
 8001f14:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8001f18:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8001f1c:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001f1e:	4d34      	ldr	r5, [pc, #208]	@ (8001ff0 <ASPEP_sendPacket+0x110>)
 8001f20:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001f22:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001f24:	5d2e      	ldrb	r6, [r5, r4]
 8001f26:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8001f2a:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8001f2c:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001f30:	5d2e      	ldrb	r6, [r5, r4]
 8001f32:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8001f36:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001f38:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001f3a:	5d2c      	ldrb	r4, [r5, r4]
 8001f3c:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8001f40:	406c      	eors	r4, r5
 8001f42:	4d2c      	ldr	r5, [pc, #176]	@ (8001ff4 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8001f44:	5d2c      	ldrb	r4, [r5, r4]
 8001f46:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8001f4a:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8001f4e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001f50:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8001f54:	b1b9      	cbz	r1, 8001f86 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8001f56:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8001f58:	2b09      	cmp	r3, #9
 8001f5a:	d006      	beq.n	8001f6a <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8001f5c:	2b0a      	cmp	r3, #10
 8001f5e:	d02a      	beq.n	8001fb6 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8001f60:	b37b      	cbz	r3, 8001fc2 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8001f62:	2000      	movs	r0, #0
}
 8001f64:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8001f66:	2001      	movs	r0, #1
}
 8001f68:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8001f6a:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8001f6e:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8001f70:	458e      	cmp	lr, r1
 8001f72:	bf14      	ite	ne
 8001f74:	2003      	movne	r0, #3
 8001f76:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8001f78:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8001f7c:	b3a1      	cbz	r1, 8001fe8 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8001f7e:	2102      	movs	r1, #2
 8001f80:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8001f82:	809a      	strh	r2, [r3, #4]
}
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8001f86:	2b09      	cmp	r3, #9
 8001f88:	d029      	beq.n	8001fde <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8001f8a:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8001f8c:	f04f 0303 	mov.w	r3, #3
 8001f90:	bf0b      	itete	eq
 8001f92:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8001f96:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001f9a:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001f9e:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001fa2:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8001fa6:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001fa8:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8001fac:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8001fb0:	4671      	mov	r1, lr
 8001fb2:	4798      	blx	r3
 8001fb4:	e7d5      	b.n	8001f62 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8001fb6:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d009      	beq.n	8001fd2 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8001fbe:	2003      	movs	r0, #3
}
 8001fc0:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8001fc2:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f9      	bne.n	8001fbe <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8001fd0:	e7c7      	b.n	8001f62 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8001fd8:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8001fdc:	e7c1      	b.n	8001f62 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8001fde:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8001fe2:	2103      	movs	r1, #3
 8001fe4:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001fe6:	e7dc      	b.n	8001fa2 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8001fe8:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8001fec:	e7c7      	b.n	8001f7e <ASPEP_sendPacket+0x9e>
 8001fee:	bf00      	nop
 8001ff0:	0800bce8 	.word	0x0800bce8
 8001ff4:	0800bcd8 	.word	0x0800bcd8

08001ff8 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8001ff8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8001ffa:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001ffe:	2b03      	cmp	r3, #3
{
 8002000:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8002002:	d013      	beq.n	800202c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8002004:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8002006:	2100      	movs	r1, #0
 8002008:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800200a:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 800200e:	2a02      	cmp	r2, #2
 8002010:	d013      	beq.n	800203a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8002012:	2b02      	cmp	r3, #2
 8002014:	d11d      	bne.n	8002052 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8002016:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800201a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800201c:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800201e:	2204      	movs	r2, #4
 8002020:	6940      	ldr	r0, [r0, #20]
 8002022:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8002024:	2303      	movs	r3, #3
 8002026:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800202a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 800202c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8002030:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8002032:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8002034:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8002038:	d10b      	bne.n	8002052 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800203a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800203e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8002040:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8002042:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8002044:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002046:	6960      	ldr	r0, [r4, #20]
 8002048:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 800204a:	2303      	movs	r3, #3
 800204c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8002050:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8002052:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8002054:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002056:	b1cb      	cbz	r3, 800208c <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8002058:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 800205a:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 800205c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800205e:	6819      	ldr	r1, [r3, #0]
 8002060:	889a      	ldrh	r2, [r3, #4]
 8002062:	6960      	ldr	r0, [r4, #20]
 8002064:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8002066:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8002068:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 800206c:	2b02      	cmp	r3, #2
 800206e:	d007      	beq.n	8002080 <ASPEP_HWDataTransmittedIT+0x88>
 8002070:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8002074:	2b02      	cmp	r3, #2
 8002076:	d003      	beq.n	8002080 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8002078:	2300      	movs	r3, #0
 800207a:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800207c:	b662      	cpsie	i
}
 800207e:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8002080:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002082:	0063      	lsls	r3, r4, #1
 8002084:	3368      	adds	r3, #104	@ 0x68
 8002086:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8002088:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 800208a:	e7f7      	b.n	800207c <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 800208c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800208e:	e7f5      	b.n	800207c <ASPEP_HWDataTransmittedIT+0x84>

08002090 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8002090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8002094:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8002098:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 800209a:	2300      	movs	r3, #0
{
 800209c:	4604      	mov	r4, r0
    *packetLength = 0;
 800209e:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80020a0:	b19d      	cbz	r5, 80020ca <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80020a2:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80020a6:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 80020aa:	2d01      	cmp	r5, #1
 80020ac:	d04e      	beq.n	800214c <ASPEP_RXframeProcess+0xbc>
 80020ae:	2d02      	cmp	r5, #2
 80020b0:	d012      	beq.n	80020d8 <ASPEP_RXframeProcess+0x48>
 80020b2:	b9d5      	cbnz	r5, 80020ea <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 80020b4:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80020b6:	2b05      	cmp	r3, #5
 80020b8:	d062      	beq.n	8002180 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 80020ba:	2b06      	cmp	r3, #6
 80020bc:	d115      	bne.n	80020ea <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80020be:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80020c2:	4629      	mov	r1, r5
 80020c4:	f7ff fe96 	bl	8001df4 <ASPEP_sendPing>
 80020c8:	e00f      	b.n	80020ea <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80020ca:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80020ce:	b9b3      	cbnz	r3, 80020fe <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80020d0:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80020d2:	4628      	mov	r0, r5
 80020d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 80020d8:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 80020da:	2d05      	cmp	r5, #5
 80020dc:	f000 80d9 	beq.w	8002292 <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 80020e0:	2d06      	cmp	r5, #6
 80020e2:	f000 8125 	beq.w	8002330 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 80020e6:	2d09      	cmp	r5, #9
 80020e8:	d03e      	beq.n	8002168 <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80020ea:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80020ec:	6960      	ldr	r0, [r4, #20]
 80020ee:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80020f0:	2204      	movs	r2, #4
 80020f2:	f104 011c 	add.w	r1, r4, #28
 80020f6:	4798      	blx	r3
}
 80020f8:	4628      	mov	r0, r5
 80020fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80020fe:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8002102:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8002104:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8002108:	488c      	ldr	r0, [pc, #560]	@ (800233c <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800210a:	4d8d      	ldr	r5, [pc, #564]	@ (8002340 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800210c:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8002110:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8002114:	5c82      	ldrb	r2, [r0, r2]
 8002116:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 800211a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800211c:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 800211e:	5ceb      	ldrb	r3, [r5, r3]
 8002120:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8002124:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8002126:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8002128:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800212a:	2b00      	cmp	r3, #0
 800212c:	f000 80f4 	beq.w	8002318 <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8002130:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8002132:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002136:	b913      	cbnz	r3, 800213e <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8002138:	2302      	movs	r3, #2
 800213a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800213e:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8002140:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8002142:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8002144:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8002148:	4798      	blx	r3
 800214a:	e7c1      	b.n	80020d0 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 800214c:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800214e:	2905      	cmp	r1, #5
 8002150:	d064      	beq.n	800221c <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 8002152:	2906      	cmp	r1, #6
 8002154:	d1c9      	bne.n	80020ea <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8002156:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800215a:	4629      	mov	r1, r5
 800215c:	f7ff fe4a 	bl	8001df4 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8002160:	2302      	movs	r3, #2
 8002162:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8002166:	e7c0      	b.n	80020ea <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8002168:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 800216c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8002170:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8002172:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8002174:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8002176:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800217a:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 800217c:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800217e:	e7b5      	b.n	80020ec <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8002180:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8002184:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8002188:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800218a:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800218e:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8002192:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8002196:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800219a:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800219c:	4563      	cmp	r3, ip
 800219e:	bf28      	it	cs
 80021a0:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80021a2:	42b0      	cmp	r0, r6
 80021a4:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80021a6:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80021aa:	bf28      	it	cs
 80021ac:	4631      	movcs	r1, r6
 80021ae:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80021b2:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80021b6:	45b8      	cmp	r8, r7
 80021b8:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80021ba:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80021be:	bf28      	it	cs
 80021c0:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80021c2:	45ca      	cmp	sl, r9
 80021c4:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80021c6:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80021ca:	bf28      	it	cs
 80021cc:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80021ce:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80021d2:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80021d4:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80021d6:	d81b      	bhi.n	8002210 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80021d8:	459c      	cmp	ip, r3
 80021da:	d819      	bhi.n	8002210 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80021dc:	45b8      	cmp	r8, r7
 80021de:	d817      	bhi.n	8002210 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80021e0:	45ca      	cmp	sl, r9
 80021e2:	d815      	bhi.n	8002210 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80021e4:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 80021e8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80021ec:	4290      	cmp	r0, r2
 80021ee:	d10f      	bne.n	8002210 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80021f0:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80021f2:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80021f4:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80021f6:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80021f8:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80021fa:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80021fe:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8002200:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8002202:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8002204:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8002208:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 800220c:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8002210:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8002214:	4620      	mov	r0, r4
 8002216:	f7ff fda7 	bl	8001d68 <ASPEP_sendBeacon>
 800221a:	e766      	b.n	80020ea <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800221c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800221e:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8002222:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8002224:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8002228:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800222c:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8002230:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8002234:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8002236:	42a8      	cmp	r0, r5
 8002238:	bf28      	it	cs
 800223a:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800223c:	4561      	cmp	r1, ip
 800223e:	460f      	mov	r7, r1
 8002240:	bf28      	it	cs
 8002242:	4667      	movcs	r7, ip
 8002244:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8002248:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800224c:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8002250:	42b7      	cmp	r7, r6
 8002252:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8002254:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8002258:	bf28      	it	cs
 800225a:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800225c:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800225e:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8002262:	46c1      	mov	r9, r8
 8002264:	bf28      	it	cs
 8002266:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8002268:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800226c:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800226e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8002270:	d80b      	bhi.n	800228a <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8002272:	4285      	cmp	r5, r0
 8002274:	d809      	bhi.n	800228a <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8002276:	42b7      	cmp	r7, r6
 8002278:	d807      	bhi.n	800228a <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800227a:	45f0      	cmp	r8, lr
 800227c:	d805      	bhi.n	800228a <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800227e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8002282:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002286:	4293      	cmp	r3, r2
 8002288:	d0c2      	beq.n	8002210 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 800228a:	2300      	movs	r3, #0
 800228c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8002290:	e7be      	b.n	8002210 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8002292:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8002296:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 800229a:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800229c:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80022a0:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80022a4:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80022a8:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80022ac:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80022ae:	4565      	cmp	r5, ip
 80022b0:	bf28      	it	cs
 80022b2:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80022b4:	4570      	cmp	r0, lr
 80022b6:	4607      	mov	r7, r0
 80022b8:	4619      	mov	r1, r3
 80022ba:	bf28      	it	cs
 80022bc:	4677      	movcs	r7, lr
 80022be:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80022c2:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80022c6:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80022ca:	42b7      	cmp	r7, r6
 80022cc:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80022ce:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80022d2:	bf28      	it	cs
 80022d4:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80022d6:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80022d8:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80022dc:	46ca      	mov	sl, r9
 80022de:	bf28      	it	cs
 80022e0:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80022e2:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80022e6:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80022e8:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80022ea:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80022ee:	d80d      	bhi.n	800230c <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80022f0:	45ac      	cmp	ip, r5
 80022f2:	d80b      	bhi.n	800230c <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80022f4:	42b7      	cmp	r7, r6
 80022f6:	d809      	bhi.n	800230c <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80022f8:	45c1      	cmp	r9, r8
 80022fa:	d807      	bhi.n	800230c <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80022fc:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8002300:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	fab3 f383 	clz	r3, r3
 800230a:	095b      	lsrs	r3, r3, #5
 800230c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8002310:	4620      	mov	r0, r4
 8002312:	f7ff fd29 	bl	8001d68 <ASPEP_sendBeacon>
 8002316:	e6e8      	b.n	80020ea <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8002318:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 800231c:	2303      	movs	r3, #3
 800231e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8002322:	64a1      	str	r1, [r4, #72]	@ 0x48
 8002324:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8002326:	2204      	movs	r2, #4
 8002328:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800232a:	6960      	ldr	r0, [r4, #20]
 800232c:	4798      	blx	r3
 800232e:	e706      	b.n	800213e <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8002330:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8002334:	2101      	movs	r1, #1
 8002336:	f7ff fd5d 	bl	8001df4 <ASPEP_sendPing>
 800233a:	e6d6      	b.n	80020ea <ASPEP_RXframeProcess+0x5a>
 800233c:	0800bce8 	.word	0x0800bce8
 8002340:	0800bcd8 	.word	0x0800bcd8

08002344 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8002344:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8002346:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 800234a:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 800234c:	b143      	cbz	r3, 8002360 <ASPEP_HWDataReceivedIT+0x1c>
 800234e:	2b01      	cmp	r3, #1
 8002350:	d000      	beq.n	8002354 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8002352:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8002354:	2200      	movs	r2, #0
 8002356:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 800235a:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 800235e:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8002360:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8002362:	4a1f      	ldr	r2, [pc, #124]	@ (80023e0 <ASPEP_HWDataReceivedIT+0x9c>)
 8002364:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8002366:	5cd3      	ldrb	r3, [r2, r3]
 8002368:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800236c:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800236e:	5cd3      	ldrb	r3, [r2, r3]
 8002370:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8002374:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8002376:	5cd3      	ldrb	r3, [r2, r3]
 8002378:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800237c:	5cd3      	ldrb	r3, [r2, r3]
 800237e:	b95b      	cbnz	r3, 8002398 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8002380:	7f03      	ldrb	r3, [r0, #28]
 8002382:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8002386:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8002388:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 800238a:	d809      	bhi.n	80023a0 <ASPEP_HWDataReceivedIT+0x5c>
 800238c:	2b04      	cmp	r3, #4
 800238e:	d91f      	bls.n	80023d0 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 8002390:	2301      	movs	r3, #1
 8002392:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8002396:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8002398:	2304      	movs	r3, #4
 800239a:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 800239e:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 80023a0:	2b09      	cmp	r3, #9
 80023a2:	d115      	bne.n	80023d0 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80023a4:	8b83      	ldrh	r3, [r0, #28]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ef      	beq.n	8002390 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 80023b0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d30f      	bcc.n	80023d8 <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80023b8:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 80023bc:	6981      	ldr	r1, [r0, #24]
 80023be:	6940      	ldr	r0, [r0, #20]
 80023c0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80023c4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80023c6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80023c8:	2301      	movs	r3, #1
 80023ca:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 80023ce:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80023d0:	2301      	movs	r3, #1
 80023d2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 80023d6:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80023d8:	2302      	movs	r3, #2
 80023da:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80023de:	bd10      	pop	{r4, pc}
 80023e0:	0800bce8 	.word	0x0800bce8

080023e4 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 80023e4:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 80023e6:	2200      	movs	r2, #0
 80023e8:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80023ec:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80023ee:	6940      	ldr	r0, [r0, #20]
 80023f0:	2204      	movs	r2, #4
 80023f2:	311c      	adds	r1, #28
 80023f4:	4718      	bx	r3
 80023f6:	bf00      	nop

080023f8 <HF_GetIDSize>:
#include "register_interface.h"
#include "mc_config.h"

uint8_t HF_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80023f8:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 80023fc:	3808      	subs	r0, #8
 80023fe:	b2c0      	uxtb	r0, r0
 8002400:	2810      	cmp	r0, #16
 8002402:	bf9a      	itte	ls
 8002404:	4b01      	ldrls	r3, [pc, #4]	@ (800240c <HF_GetIDSize+0x14>)
 8002406:	5c18      	ldrbls	r0, [r3, r0]
 8002408:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 800240a:	4770      	bx	lr
 800240c:	0800bde8 	.word	0x0800bde8

08002410 <HF_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8002410:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8002414:	2b10      	cmp	r3, #16
 8002416:	d003      	beq.n	8002420 <HF_GetPtrReg+0x10>
 8002418:	4b3f      	ldr	r3, [pc, #252]	@ (8002518 <HF_GetPtrReg+0x108>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = HF_ERROR_UNKNOWN_REG;
 800241a:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800241c:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800241e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8002420:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 8002424:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
    uint16_t regID = dataID & REG_MASK;
 8002428:	b282      	uxth	r2, r0
        switch (regID)
 800242a:	d067      	beq.n	80024fc <HF_GetPtrReg+0xec>
 800242c:	d810      	bhi.n	8002450 <HF_GetPtrReg+0x40>
 800242e:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 8002432:	d045      	beq.n	80024c0 <HF_GetPtrReg+0xb0>
 8002434:	d82e      	bhi.n	8002494 <HF_GetPtrReg+0x84>
 8002436:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 800243a:	d055      	beq.n	80024e8 <HF_GetPtrReg+0xd8>
 800243c:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 8002440:	d048      	beq.n	80024d4 <HF_GetPtrReg+0xc4>
 8002442:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8002446:	d1e7      	bne.n	8002418 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8002448:	4b34      	ldr	r3, [pc, #208]	@ (800251c <HF_GetPtrReg+0x10c>)
  uint8_t retVal = HF_CMD_OK;
 800244a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800244c:	6a1b      	ldr	r3, [r3, #32]
             break;
 800244e:	e7e5      	b.n	800241c <HF_GetPtrReg+0xc>
        switch (regID)
 8002450:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 8002454:	d039      	beq.n	80024ca <HF_GetPtrReg+0xba>
 8002456:	d80d      	bhi.n	8002474 <HF_GetPtrReg+0x64>
 8002458:	f5b2 6f21 	cmp.w	r2, #2576	@ 0xa10
 800245c:	d049      	beq.n	80024f2 <HF_GetPtrReg+0xe2>
 800245e:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 8002462:	d03c      	beq.n	80024de <HF_GetPtrReg+0xce>
 8002464:	f5b2 6f1d 	cmp.w	r2, #2512	@ 0x9d0
 8002468:	d1d6      	bne.n	8002418 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800246a:	4b2c      	ldr	r3, [pc, #176]	@ (800251c <HF_GetPtrReg+0x10c>)
 800246c:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 800246e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8002470:	3312      	adds	r3, #18
            break;
 8002472:	e7d3      	b.n	800241c <HF_GetPtrReg+0xc>
        switch (regID)
 8002474:	f5b2 6f31 	cmp.w	r2, #2832	@ 0xb10
 8002478:	d04a      	beq.n	8002510 <HF_GetPtrReg+0x100>
 800247a:	f641 43d0 	movw	r3, #7376	@ 0x1cd0
 800247e:	429a      	cmp	r2, r3
 8002480:	d01b      	beq.n	80024ba <HF_GetPtrReg+0xaa>
 8002482:	4827      	ldr	r0, [pc, #156]	@ (8002520 <HF_GetPtrReg+0x110>)
 8002484:	4b24      	ldr	r3, [pc, #144]	@ (8002518 <HF_GetPtrReg+0x108>)
 8002486:	f5b2 6f2d 	cmp.w	r2, #2768	@ 0xad0
 800248a:	bf0a      	itet	eq
 800248c:	4603      	moveq	r3, r0
 800248e:	2005      	movne	r0, #5
 8002490:	2000      	moveq	r0, #0
 8002492:	e7c3      	b.n	800241c <HF_GetPtrReg+0xc>
 8002494:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 8002498:	d035      	beq.n	8002506 <HF_GetPtrReg+0xf6>
 800249a:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 800249e:	d007      	beq.n	80024b0 <HF_GetPtrReg+0xa0>
 80024a0:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 80024a4:	d1b8      	bne.n	8002418 <HF_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80024a6:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024a8:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024aa:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80024ac:	3308      	adds	r3, #8
            break;
 80024ae:	e7b5      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024b2:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024b4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80024b6:	330c      	adds	r3, #12
            break;
 80024b8:	e7b0      	b.n	800241c <HF_GetPtrReg+0xc>
        switch (regID)
 80024ba:	4b1a      	ldr	r3, [pc, #104]	@ (8002524 <HF_GetPtrReg+0x114>)
 80024bc:	2000      	movs	r0, #0
 80024be:	e7ad      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80024c0:	4b16      	ldr	r3, [pc, #88]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024c4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 80024c6:	3306      	adds	r3, #6
            break;
 80024c8:	e7a8      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024ce:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80024d0:	3318      	adds	r3, #24
            break;
 80024d2:	e7a3      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80024d4:	4b11      	ldr	r3, [pc, #68]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024d6:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024d8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80024da:	3304      	adds	r3, #4
            break;
 80024dc:	e79e      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024e0:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024e2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 80024e4:	3316      	adds	r3, #22
            break;
 80024e6:	e799      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80024e8:	4b0c      	ldr	r3, [pc, #48]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024ea:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024ec:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80024ee:	3302      	adds	r3, #2
            break;
 80024f0:	e794      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024f4:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 80024f6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80024f8:	3314      	adds	r3, #20
            break;
 80024fa:	e78f      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 80024fc:	4b07      	ldr	r3, [pc, #28]	@ (800251c <HF_GetPtrReg+0x10c>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 8002500:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8002502:	330e      	adds	r3, #14
            break;
 8002504:	e78a      	b.n	800241c <HF_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HF_GetPtrReg+0x10c>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
  uint8_t retVal = HF_CMD_OK;
 800250a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800250c:	330a      	adds	r3, #10
            break;
 800250e:	e785      	b.n	800241c <HF_GetPtrReg+0xc>
        switch (regID)
 8002510:	4b05      	ldr	r3, [pc, #20]	@ (8002528 <HF_GetPtrReg+0x118>)
  uint8_t retVal = HF_CMD_OK;
 8002512:	2000      	movs	r0, #0
 8002514:	e782      	b.n	800241c <HF_GetPtrReg+0xc>
 8002516:	bf00      	nop
 8002518:	200004b8 	.word	0x200004b8
 800251c:	20000008 	.word	0x20000008
 8002520:	20000310 	.word	0x20000310
 8002524:	200002bc 	.word	0x200002bc
 8002528:	20000318 	.word	0x20000318

0800252c <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 0 */


//keep latest command only
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 800252c:	07ca      	lsls	r2, r1, #31
 800252e:	d515      	bpl.n	800255c <HAL_FDCAN_RxFifo0Callback+0x30>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        // Keep reading until FIFO is empty, but only keep the last message
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8002532:	4f0b      	ldr	r7, [pc, #44]	@ (8002560 <HAL_FDCAN_RxFifo0Callback+0x34>)
 8002534:	4e0b      	ldr	r6, [pc, #44]	@ (8002564 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8002536:	4604      	mov	r4, r0
 8002538:	e001      	b.n	800253e <HAL_FDCAN_RxFifo0Callback+0x12>
 800253a:	f004 fff1 	bl	8007520 <HAL_FDCAN_GetRxMessage>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 800253e:	2140      	movs	r1, #64	@ 0x40
 8002540:	4620      	mov	r0, r4
 8002542:	f005 f88d 	bl	8007660 <HAL_FDCAN_GetRxFifoFillLevel>
 8002546:	4605      	mov	r5, r0
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8002548:	2140      	movs	r1, #64	@ 0x40
 800254a:	463b      	mov	r3, r7
 800254c:	4632      	mov	r2, r6
 800254e:	4620      	mov	r0, r4
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8002550:	2d00      	cmp	r5, #0
 8002552:	d1f2      	bne.n	800253a <HAL_FDCAN_RxFifo0Callback+0xe>
        }

        received_CAN_command = true;
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8002556:	2201      	movs	r2, #1
 8002558:	701a      	strb	r2, [r3, #0]
    }
}
 800255a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	200004bc 	.word	0x200004bc
 8002564:	200004c4 	.word	0x200004c4
 8002568:	200004ec 	.word	0x200004ec
 800256c:	00000000 	.word	0x00000000

08002570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002570:	b510      	push	{r4, lr}
 8002572:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002574:	2238      	movs	r2, #56	@ 0x38
 8002576:	2100      	movs	r1, #0
 8002578:	a806      	add	r0, sp, #24
 800257a:	f008 ffe5 	bl	800b548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257e:	2000      	movs	r0, #0
 8002580:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8002584:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8002588:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800258a:	f005 fc0d 	bl	8007da8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800258e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 80025e0 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002592:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8002594:	2255      	movs	r2, #85	@ 0x55
 8002596:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800259a:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800259c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800259e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025a0:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025a4:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 80025a8:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80025ac:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025ae:	f005 fc75 	bl	8007e9c <HAL_RCC_OscConfig>
 80025b2:	b108      	cbz	r0, 80025b8 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025b8:	2104      	movs	r1, #4
 80025ba:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025bc:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025be:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80025c2:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80025c6:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80025ca:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80025cc:	f005 fee4 	bl	8008398 <HAL_RCC_ClockConfig>
 80025d0:	b108      	cbz	r0, 80025d6 <SystemClock_Config+0x66>
 80025d2:	b672      	cpsid	i
  while (1)
 80025d4:	e7fe      	b.n	80025d4 <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 80025d6:	f006 f80d 	bl	80085f4 <HAL_RCC_EnableCSS>
}
 80025da:	b014      	add	sp, #80	@ 0x50
 80025dc:	bd10      	pop	{r4, pc}
 80025de:	bf00      	nop
 80025e0:	00000001 	.word	0x00000001
 80025e4:	00010000 	.word	0x00010000

080025e8 <main>:
{
 80025e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ec:	2500      	movs	r5, #0
{
 80025ee:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 80025f0:	f003 fc24 	bl	8005e3c <HAL_Init>
  SystemClock_Config();
 80025f4:	f7ff ffbc 	bl	8002570 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025f8:	e9cd 5517 	strd	r5, r5, [sp, #92]	@ 0x5c
 80025fc:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002600:	4eb0      	ldr	r6, [pc, #704]	@ (80028c4 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002602:	951b      	str	r5, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002604:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002606:	48b0      	ldr	r0, [pc, #704]	@ (80028c8 <main+0x2e0>)
  hadc1.Instance = ADC1;
 8002608:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8002908 <main+0x320>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8002612:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	9305      	str	r3, [sp, #20]
 800261a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800261c:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800261e:	f043 0320 	orr.w	r3, r3, #32
 8002622:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8002624:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8002626:	f003 0320 	and.w	r3, r3, #32
 800262a:	9306      	str	r3, [sp, #24]
 800262c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8002630:	f043 0301 	orr.w	r3, r3, #1
 8002634:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8002636:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8002638:	f003 0301 	and.w	r3, r3, #1
 800263c:	9307      	str	r3, [sp, #28]
 800263e:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002640:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8002648:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800264a:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800264e:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002650:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8002652:	2140      	movs	r1, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002656:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002658:	2740      	movs	r7, #64	@ 0x40
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 800265a:	f005 fb1d 	bl	8007c98 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800265e:	489a      	ldr	r0, [pc, #616]	@ (80028c8 <main+0x2e0>)
 8002660:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002662:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002666:	e9cd 7417 	strd	r7, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f005 f957 	bl	800791c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800266e:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8002672:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8002676:	4894      	ldr	r0, [pc, #592]	@ (80028c8 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	9519      	str	r5, [sp, #100]	@ 0x64
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800267a:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800267c:	e9cd c317 	strd	ip, r3, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8002680:	f005 f94c 	bl	800791c <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002684:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8002686:	f043 0304 	orr.w	r3, r3, #4
 800268a:	64b3      	str	r3, [r6, #72]	@ 0x48
 800268c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	9303      	str	r3, [sp, #12]
 8002694:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002696:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8002698:	4323      	orrs	r3, r4
 800269a:	64b3      	str	r3, [r6, #72]	@ 0x48
 800269c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 800269e:	950c      	str	r5, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026a0:	4023      	ands	r3, r4
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80026a2:	4629      	mov	r1, r5
 80026a4:	223c      	movs	r2, #60	@ 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026a6:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80026a8:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 80026aa:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 80026ae:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80026b0:	f008 ff4a 	bl	800b548 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80026b4:	2220      	movs	r2, #32
 80026b6:	4629      	mov	r1, r5
 80026b8:	a80f      	add	r0, sp, #60	@ 0x3c
 80026ba:	f008 ff45 	bl	800b548 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80026be:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80026c2:	e9ca 5501 	strd	r5, r5, [sl, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80026c6:	e9ca 5404 	strd	r5, r4, [sl, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80026ca:	e9ca 550b 	strd	r5, r5, [sl, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80026ce:	f8aa 501c 	strh.w	r5, [sl, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80026d2:	f88a 5024 	strb.w	r5, [sl, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80026d6:	f88a 5038 	strb.w	r5, [sl, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80026da:	f8ca 503c 	str.w	r5, [sl, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80026de:	f88a 5040 	strb.w	r5, [sl, #64]	@ 0x40
  hadc1.Instance = ADC1;
 80026e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026e6:	2504      	movs	r5, #4
  hadc1.Init.NbrOfConversion = 2;
 80026e8:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026ea:	4650      	mov	r0, sl
  hadc1.Instance = ADC1;
 80026ec:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80026f0:	f8ca 800c 	str.w	r8, [sl, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80026f4:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc1.Init.NbrOfConversion = 2;
 80026f8:	f8ca 6020 	str.w	r6, [sl, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80026fc:	f003 fbda 	bl	8005eb4 <HAL_ADC_Init>
 8002700:	b108      	cbz	r0, 8002706 <main+0x11e>
 8002702:	b672      	cpsid	i
  while (1)
 8002704:	e7fe      	b.n	8002704 <main+0x11c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002706:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002708:	a90c      	add	r1, sp, #48	@ 0x30
 800270a:	4650      	mov	r0, sl
 800270c:	f004 fa34 	bl	8006b78 <HAL_ADCEx_MultiModeConfigChannel>
 8002710:	b108      	cbz	r0, 8002716 <main+0x12e>
 8002712:	b672      	cpsid	i
  while (1)
 8002714:	e7fe      	b.n	8002714 <main+0x12c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002716:	4b6d      	ldr	r3, [pc, #436]	@ (80028cc <main+0x2e4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002718:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800271c:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 8002720:	e9cd 501b 	strd	r5, r0, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002724:	e9cd 3b17 	strd	r3, fp, [sp, #92]	@ 0x5c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002728:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800272c:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002730:	2380      	movs	r3, #128	@ 0x80
 8002732:	2084      	movs	r0, #132	@ 0x84
 8002734:	e9cd 0321 	strd	r0, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002738:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800273c:	a917      	add	r1, sp, #92	@ 0x5c
 800273e:	4650      	mov	r0, sl
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002740:	9419      	str	r4, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002742:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002744:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002748:	f003 ff18 	bl	800657c <HAL_ADCEx_InjectedConfigChannel>
 800274c:	b108      	cbz	r0, 8002752 <main+0x16a>
 800274e:	b672      	cpsid	i
  while (1)
 8002750:	e7fe      	b.n	8002750 <main+0x168>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002752:	4a5f      	ldr	r2, [pc, #380]	@ (80028d0 <main+0x2e8>)
 8002754:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002758:	a917      	add	r1, sp, #92	@ 0x5c
 800275a:	4650      	mov	r0, sl
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800275c:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002760:	f003 ff0c 	bl	800657c <HAL_ADCEx_InjectedConfigChannel>
 8002764:	b108      	cbz	r0, 800276a <main+0x182>
 8002766:	b672      	cpsid	i
  while (1)
 8002768:	e7fe      	b.n	8002768 <main+0x180>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800276a:	495a      	ldr	r1, [pc, #360]	@ (80028d4 <main+0x2ec>)
  sConfig.Offset = 0;
 800276c:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800276e:	2206      	movs	r2, #6
 8002770:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002774:	4650      	mov	r0, sl
 8002776:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002778:	e9cd 5911 	strd	r5, r9, [sp, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800277c:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800277e:	f003 fc8d 	bl	800609c <HAL_ADC_ConfigChannel>
 8002782:	b108      	cbz	r0, 8002788 <main+0x1a0>
 8002784:	b672      	cpsid	i
  while (1)
 8002786:	e7fe      	b.n	8002786 <main+0x19e>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002788:	4a53      	ldr	r2, [pc, #332]	@ (80028d8 <main+0x2f0>)
 800278a:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800278c:	a90f      	add	r1, sp, #60	@ 0x3c
 800278e:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002790:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002794:	f003 fc82 	bl	800609c <HAL_ADC_ConfigChannel>
 8002798:	4601      	mov	r1, r0
 800279a:	b108      	cbz	r0, 80027a0 <main+0x1b8>
 800279c:	b672      	cpsid	i
  while (1)
 800279e:	e7fe      	b.n	800279e <main+0x1b6>
  hadc2.Instance = ADC2;
 80027a0:	f8df a168 	ldr.w	sl, [pc, #360]	@ 800290c <main+0x324>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80027a4:	9001      	str	r0, [sp, #4]
 80027a6:	223c      	movs	r2, #60	@ 0x3c
 80027a8:	a817      	add	r0, sp, #92	@ 0x5c
 80027aa:	f008 fecd 	bl	800b548 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80027ae:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80027b0:	4a4a      	ldr	r2, [pc, #296]	@ (80028dc <main+0x2f4>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80027b2:	f8ca 800c 	str.w	r8, [sl, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027b6:	4650      	mov	r0, sl
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80027b8:	e9ca 1101 	strd	r1, r1, [sl, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80027bc:	e9ca 1404 	strd	r1, r4, [sl, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80027c0:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80027c4:	f8aa 101c 	strh.w	r1, [sl, #28]
  hadc2.Init.NbrOfConversion = 1;
 80027c8:	f8ca 4020 	str.w	r4, [sl, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80027cc:	f88a 1024 	strb.w	r1, [sl, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80027d0:	f88a 1038 	strb.w	r1, [sl, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80027d4:	f8ca 103c 	str.w	r1, [sl, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80027d8:	f88a 1040 	strb.w	r1, [sl, #64]	@ 0x40
  hadc2.Instance = ADC2;
 80027dc:	f8ca 2000 	str.w	r2, [sl]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80027e0:	f003 fb68 	bl	8005eb4 <HAL_ADC_Init>
 80027e4:	b108      	cbz	r0, 80027ea <main+0x202>
 80027e6:	b672      	cpsid	i
  while (1)
 80027e8:	e7fe      	b.n	80027e8 <main+0x200>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80027ea:	e9cd b418 	strd	fp, r4, [sp, #96]	@ 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80027ee:	4a3c      	ldr	r2, [pc, #240]	@ (80028e0 <main+0x2f8>)
  sConfigInjected.InjectedOffset = 0;
 80027f0:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80027f2:	f04f 0b84 	mov.w	fp, #132	@ 0x84
 80027f6:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80027f8:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 80027fc:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002800:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002804:	a917      	add	r1, sp, #92	@ 0x5c
 8002806:	4650      	mov	r0, sl
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002808:	e9cd 951a 	strd	r9, r5, [sp, #104]	@ 0x68
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800280c:	e9cd b321 	strd	fp, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002810:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002812:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002814:	f003 feb2 	bl	800657c <HAL_ADCEx_InjectedConfigChannel>
 8002818:	b108      	cbz	r0, 800281e <main+0x236>
 800281a:	b672      	cpsid	i
  while (1)
 800281c:	e7fe      	b.n	800281c <main+0x234>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800281e:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80028cc <main+0x2e4>
 8002822:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002826:	4650      	mov	r0, sl
 8002828:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800282a:	e9cd 9317 	strd	r9, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800282e:	f003 fea5 	bl	800657c <HAL_ADCEx_InjectedConfigChannel>
 8002832:	4603      	mov	r3, r0
 8002834:	b108      	cbz	r0, 800283a <main+0x252>
 8002836:	b672      	cpsid	i
  while (1)
 8002838:	e7fe      	b.n	8002838 <main+0x250>
  hcomp1.Instance = COMP1;
 800283a:	482a      	ldr	r0, [pc, #168]	@ (80028e4 <main+0x2fc>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800283c:	e9c0 3701 	strd	r3, r7, [r0, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002840:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002844:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Instance = COMP1;
 8002848:	4b27      	ldr	r3, [pc, #156]	@ (80028e8 <main+0x300>)
 800284a:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800284c:	f004 f9f8 	bl	8006c40 <HAL_COMP_Init>
 8002850:	b108      	cbz	r0, 8002856 <main+0x26e>
 8002852:	b672      	cpsid	i
  while (1)
 8002854:	e7fe      	b.n	8002854 <main+0x26c>
  hcomp2.Instance = COMP2;
 8002856:	4825      	ldr	r0, [pc, #148]	@ (80028ec <main+0x304>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002858:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 8002910 <main+0x328>
 800285c:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800285e:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002860:	e9c0 8300 	strd	r8, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002864:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002868:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800286c:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 800286e:	f004 f9e7 	bl	8006c40 <HAL_COMP_Init>
 8002872:	4603      	mov	r3, r0
 8002874:	b108      	cbz	r0, 800287a <main+0x292>
 8002876:	b672      	cpsid	i
  while (1)
 8002878:	e7fe      	b.n	8002878 <main+0x290>
  hcomp4.Instance = COMP4;
 800287a:	481d      	ldr	r0, [pc, #116]	@ (80028f0 <main+0x308>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800287c:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002880:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002884:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8002888:	4b1a      	ldr	r3, [pc, #104]	@ (80028f4 <main+0x30c>)
 800288a:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800288c:	f004 f9d8 	bl	8006c40 <HAL_COMP_Init>
 8002890:	b108      	cbz	r0, 8002896 <main+0x2ae>
 8002892:	b672      	cpsid	i
  while (1)
 8002894:	e7fe      	b.n	8002894 <main+0x2ac>
  hcordic.Instance = CORDIC;
 8002896:	4818      	ldr	r0, [pc, #96]	@ (80028f8 <main+0x310>)
 8002898:	4b18      	ldr	r3, [pc, #96]	@ (80028fc <main+0x314>)
 800289a:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800289c:	f004 fa70 	bl	8006d80 <HAL_CORDIC_Init>
 80028a0:	4601      	mov	r1, r0
 80028a2:	b108      	cbz	r0, 80028a8 <main+0x2c0>
 80028a4:	b672      	cpsid	i
  while (1)
 80028a6:	e7fe      	b.n	80028a6 <main+0x2be>
  hdac3.Instance = DAC3;
 80028a8:	4d15      	ldr	r5, [pc, #84]	@ (8002900 <main+0x318>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80028aa:	2230      	movs	r2, #48	@ 0x30
 80028ac:	a817      	add	r0, sp, #92	@ 0x5c
 80028ae:	f008 fe4b 	bl	800b548 <memset>
  hdac3.Instance = DAC3;
 80028b2:	4b14      	ldr	r3, [pc, #80]	@ (8002904 <main+0x31c>)
 80028b4:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 80028b6:	4628      	mov	r0, r5
 80028b8:	f004 fb0a 	bl	8006ed0 <HAL_DAC_Init>
 80028bc:	4602      	mov	r2, r0
 80028be:	b348      	cbz	r0, 8002914 <main+0x32c>
 80028c0:	b672      	cpsid	i
  while (1)
 80028c2:	e7fe      	b.n	80028c2 <main+0x2da>
 80028c4:	40021000 	.word	0x40021000
 80028c8:	48000800 	.word	0x48000800
 80028cc:	0c900008 	.word	0x0c900008
 80028d0:	32601000 	.word	0x32601000
 80028d4:	04300002 	.word	0x04300002
 80028d8:	14f00020 	.word	0x14f00020
 80028dc:	50000100 	.word	0x50000100
 80028e0:	cb8c0000 	.word	0xcb8c0000
 80028e4:	20000878 	.word	0x20000878
 80028e8:	40010200 	.word	0x40010200
 80028ec:	20000854 	.word	0x20000854
 80028f0:	20000830 	.word	0x20000830
 80028f4:	4001020c 	.word	0x4001020c
 80028f8:	20000808 	.word	0x20000808
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	200007f4 	.word	0x200007f4
 8002904:	50001000 	.word	0x50001000
 8002908:	20000908 	.word	0x20000908
 800290c:	2000089c 	.word	0x2000089c
 8002910:	40010204 	.word	0x40010204
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002914:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002916:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800291a:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800291e:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002920:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002922:	a917      	add	r1, sp, #92	@ 0x5c
 8002924:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8002926:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800292a:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800292c:	f004 fae6 	bl	8006efc <HAL_DAC_ConfigChannel>
 8002930:	b108      	cbz	r0, 8002936 <main+0x34e>
 8002932:	b672      	cpsid	i
  while (1)
 8002934:	e7fe      	b.n	8002934 <main+0x34c>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002936:	4628      	mov	r0, r5
 8002938:	2210      	movs	r2, #16
 800293a:	a917      	add	r1, sp, #92	@ 0x5c
 800293c:	f004 fade 	bl	8006efc <HAL_DAC_ConfigChannel>
 8002940:	4603      	mov	r3, r0
 8002942:	b108      	cbz	r0, 8002948 <main+0x360>
 8002944:	b672      	cpsid	i
  while (1)
 8002946:	e7fe      	b.n	8002946 <main+0x35e>
  hopamp1.Instance = OPAMP1;
 8002948:	4897      	ldr	r0, [pc, #604]	@ (8002ba8 <main+0x5c0>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800294a:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800294e:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002952:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002954:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002956:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002958:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800295a:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 800295e:	4b93      	ldr	r3, [pc, #588]	@ (8002bac <main+0x5c4>)
 8002960:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002962:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8002966:	f005 f9a7 	bl	8007cb8 <HAL_OPAMP_Init>
 800296a:	4603      	mov	r3, r0
 800296c:	b108      	cbz	r0, 8002972 <main+0x38a>
 800296e:	b672      	cpsid	i
  while (1)
 8002970:	e7fe      	b.n	8002970 <main+0x388>
  hopamp2.Instance = OPAMP2;
 8002972:	488f      	ldr	r0, [pc, #572]	@ (8002bb0 <main+0x5c8>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002974:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002978:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 800297a:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800297c:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800297e:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8002980:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb4 <main+0x5cc>)
 8002982:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002984:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002988:	f005 f996 	bl	8007cb8 <HAL_OPAMP_Init>
 800298c:	4603      	mov	r3, r0
 800298e:	b108      	cbz	r0, 8002994 <main+0x3ac>
 8002990:	b672      	cpsid	i
  while (1)
 8002992:	e7fe      	b.n	8002992 <main+0x3aa>
  hopamp3.Instance = OPAMP3;
 8002994:	4888      	ldr	r0, [pc, #544]	@ (8002bb8 <main+0x5d0>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002996:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 800299a:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800299c:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800299e:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80029a0:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 80029a2:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 80029a4:	4b85      	ldr	r3, [pc, #532]	@ (8002bbc <main+0x5d4>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80029a6:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 80029a8:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80029aa:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80029ac:	f005 f984 	bl	8007cb8 <HAL_OPAMP_Init>
 80029b0:	4604      	mov	r4, r0
 80029b2:	b108      	cbz	r0, 80029b8 <main+0x3d0>
 80029b4:	b672      	cpsid	i
  while (1)
 80029b6:	e7fe      	b.n	80029b6 <main+0x3ce>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80029b8:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80029bc:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80029c0:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80029c4:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 80029c8:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80029cc:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80029d0:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80029d2:	4601      	mov	r1, r0
 80029d4:	2234      	movs	r2, #52	@ 0x34
 80029d6:	a817      	add	r0, sp, #92	@ 0x5c
 80029d8:	f008 fdb6 	bl	800b548 <memset>
  htim1.Instance = TIM1;
 80029dc:	4878      	ldr	r0, [pc, #480]	@ (8002bc0 <main+0x5d8>)
 80029de:	4b79      	ldr	r3, [pc, #484]	@ (8002bc4 <main+0x5dc>)
 80029e0:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80029e2:	f04f 0e20 	mov.w	lr, #32
 80029e6:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 80029ea:	e9c0 e302 	strd	lr, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80029ee:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80029f2:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80029f4:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80029f6:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80029f8:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80029fa:	f006 f80f 	bl	8008a1c <HAL_TIM_PWM_Init>
 80029fe:	b108      	cbz	r0, 8002a04 <main+0x41c>
 8002a00:	b672      	cpsid	i
  while (1)
 8002a02:	e7fe      	b.n	8002a02 <main+0x41a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002a04:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002a06:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a08:	486d      	ldr	r0, [pc, #436]	@ (8002bc0 <main+0x5d8>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002a0a:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a0c:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002a0e:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002a12:	f006 fa4b 	bl	8008eac <HAL_TIMEx_MasterConfigSynchronization>
 8002a16:	b108      	cbz	r0, 8002a1c <main+0x434>
 8002a18:	b672      	cpsid	i
  while (1)
 8002a1a:	e7fe      	b.n	8002a1a <main+0x432>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002a1c:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002a1e:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002a20:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a22:	4867      	ldr	r0, [pc, #412]	@ (8002bc0 <main+0x5d8>)
 8002a24:	aa0c      	add	r2, sp, #48	@ 0x30
 8002a26:	4629      	mov	r1, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002a28:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a2c:	f006 fade 	bl	8008fec <HAL_TIMEx_ConfigBreakInput>
 8002a30:	b108      	cbz	r0, 8002a36 <main+0x44e>
 8002a32:	b672      	cpsid	i
  while (1)
 8002a34:	e7fe      	b.n	8002a34 <main+0x44c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8002a36:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a38:	4861      	ldr	r0, [pc, #388]	@ (8002bc0 <main+0x5d8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8002a3a:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a3c:	aa0c      	add	r2, sp, #48	@ 0x30
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f006 fad4 	bl	8008fec <HAL_TIMEx_ConfigBreakInput>
 8002a44:	b108      	cbz	r0, 8002a4a <main+0x462>
 8002a46:	b672      	cpsid	i
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <main+0x460>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a4a:	aa0c      	add	r2, sp, #48	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8002a4c:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a4e:	485c      	ldr	r0, [pc, #368]	@ (8002bc0 <main+0x5d8>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8002a50:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002a52:	4629      	mov	r1, r5
 8002a54:	f006 faca 	bl	8008fec <HAL_TIMEx_ConfigBreakInput>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	b108      	cbz	r0, 8002a60 <main+0x478>
 8002a5c:	b672      	cpsid	i
  while (1)
 8002a5e:	e7fe      	b.n	8002a5e <main+0x476>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002a60:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002a64:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002a68:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8002a6a:	2760      	movs	r7, #96	@ 0x60
 8002a6c:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a70:	4853      	ldr	r0, [pc, #332]	@ (8002bc0 <main+0x5d8>)
 8002a72:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8002a74:	e9cd 730f 	strd	r7, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002a78:	f006 f932 	bl	8008ce0 <HAL_TIM_PWM_ConfigChannel>
 8002a7c:	b108      	cbz	r0, 8002a82 <main+0x49a>
 8002a7e:	b672      	cpsid	i
  while (1)
 8002a80:	e7fe      	b.n	8002a80 <main+0x498>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002a82:	484f      	ldr	r0, [pc, #316]	@ (8002bc0 <main+0x5d8>)
 8002a84:	4632      	mov	r2, r6
 8002a86:	a90f      	add	r1, sp, #60	@ 0x3c
 8002a88:	f006 f92a 	bl	8008ce0 <HAL_TIM_PWM_ConfigChannel>
 8002a8c:	b108      	cbz	r0, 8002a92 <main+0x4aa>
 8002a8e:	b672      	cpsid	i
  while (1)
 8002a90:	e7fe      	b.n	8002a90 <main+0x4a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002a92:	484b      	ldr	r0, [pc, #300]	@ (8002bc0 <main+0x5d8>)
 8002a94:	2208      	movs	r2, #8
 8002a96:	a90f      	add	r1, sp, #60	@ 0x3c
 8002a98:	f006 f922 	bl	8008ce0 <HAL_TIM_PWM_ConfigChannel>
 8002a9c:	b108      	cbz	r0, 8002aa2 <main+0x4ba>
 8002a9e:	b672      	cpsid	i
  while (1)
 8002aa0:	e7fe      	b.n	8002aa0 <main+0x4b8>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8002aa2:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002aa6:	4846      	ldr	r0, [pc, #280]	@ (8002bc0 <main+0x5d8>)
 8002aa8:	220c      	movs	r2, #12
 8002aaa:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8002aac:	e9cd 430f 	strd	r4, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002ab0:	f006 f916 	bl	8008ce0 <HAL_TIM_PWM_ConfigChannel>
 8002ab4:	b108      	cbz	r0, 8002aba <main+0x4d2>
 8002ab6:	b672      	cpsid	i
  while (1)
 8002ab8:	e7fe      	b.n	8002ab8 <main+0x4d0>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002aba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002abe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac2:	e9cd 1217 	strd	r1, r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakFilter = 3;
 8002ac6:	2603      	movs	r6, #3
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8002ac8:	223f      	movs	r2, #63	@ 0x3f
 8002aca:	e9cd 0219 	strd	r0, r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002ace:	e9cd 601d 	strd	r6, r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002ad2:	e9cd 6021 	strd	r6, r0, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002ad6:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8002ada:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8002ade:	901f      	str	r0, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002ae0:	9023      	str	r0, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ae2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002ae6:	4836      	ldr	r0, [pc, #216]	@ (8002bc0 <main+0x5d8>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002ae8:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002aea:	a917      	add	r1, sp, #92	@ 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002aec:	e9cd 421b 	strd	r4, r2, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002af0:	f006 fa2e 	bl	8008f50 <HAL_TIMEx_ConfigBreakDeadTime>
 8002af4:	4604      	mov	r4, r0
 8002af6:	b108      	cbz	r0, 8002afc <main+0x514>
 8002af8:	b672      	cpsid	i
  while (1)
 8002afa:	e7fe      	b.n	8002afa <main+0x512>
  HAL_TIM_MspPostInit(&htim1);
 8002afc:	4830      	ldr	r0, [pc, #192]	@ (8002bc0 <main+0x5d8>)
 8002afe:	f002 f8b7 	bl	8004c70 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 8002b02:	4831      	ldr	r0, [pc, #196]	@ (8002bc8 <main+0x5e0>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002b04:	9617      	str	r6, [sp, #92]	@ 0x5c
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8002b06:	230c      	movs	r3, #12
 8002b08:	931b      	str	r3, [sp, #108]	@ 0x6c
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8002b0a:	931f      	str	r3, [sp, #124]	@ 0x7c
  htim4.Instance = TIM4;
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	@ (8002bcc <main+0x5e4>)
 8002b0e:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b10:	a917      	add	r1, sp, #92	@ 0x5c
  htim4.Init.Period = M1_PULSE_NBR;
 8002b12:	f641 73ff 	movw	r3, #8191	@ 0x1fff
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b16:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b1a:	e9c0 4401 	strd	r4, r4, [r0, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b1e:	9418      	str	r4, [sp, #96]	@ 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b20:	9411      	str	r4, [sp, #68]	@ 0x44
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002b22:	9519      	str	r5, [sp, #100]	@ 0x64
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002b24:	951d      	str	r5, [sp, #116]	@ 0x74
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002b26:	941a      	str	r4, [sp, #104]	@ 0x68
 8002b28:	941c      	str	r4, [sp, #112]	@ 0x70
 8002b2a:	941e      	str	r4, [sp, #120]	@ 0x78
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b2c:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b2e:	6184      	str	r4, [r0, #24]
  htim4.Init.Period = M1_PULSE_NBR;
 8002b30:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8002b32:	f005 fff1 	bl	8008b18 <HAL_TIM_Encoder_Init>
 8002b36:	b108      	cbz	r0, 8002b3c <main+0x554>
 8002b38:	b672      	cpsid	i
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <main+0x552>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b3c:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b3e:	4822      	ldr	r0, [pc, #136]	@ (8002bc8 <main+0x5e0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002b40:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b42:	a90f      	add	r1, sp, #60	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b44:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b46:	f006 f9b1 	bl	8008eac <HAL_TIMEx_MasterConfigSynchronization>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	b108      	cbz	r0, 8002b52 <main+0x56a>
 8002b4e:	b672      	cpsid	i
  while (1)
 8002b50:	e7fe      	b.n	8002b50 <main+0x568>
  huart2.Instance = USART2;
 8002b52:	4c1f      	ldr	r4, [pc, #124]	@ (8002bd0 <main+0x5e8>)
  huart2.Init.BaudRate = 1843200;
 8002b54:	491f      	ldr	r1, [pc, #124]	@ (8002bd4 <main+0x5ec>)
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002b56:	62a3      	str	r3, [r4, #40]	@ 0x28
  huart2.Init.BaudRate = 1843200;
 8002b58:	f44f 12e1 	mov.w	r2, #1843200	@ 0x1c2000
 8002b5c:	e9c4 1200 	strd	r1, r2, [r4]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b60:	4620      	mov	r0, r4
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b62:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b64:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b68:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b6c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002b70:	e9c4 3308 	strd	r3, r3, [r4, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002b74:	f006 fd52 	bl	800961c <HAL_UART_Init>
 8002b78:	4601      	mov	r1, r0
 8002b7a:	b108      	cbz	r0, 8002b80 <main+0x598>
 8002b7c:	b672      	cpsid	i
  while (1)
 8002b7e:	e7fe      	b.n	8002b7e <main+0x596>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b80:	4620      	mov	r0, r4
 8002b82:	f006 fd9d 	bl	80096c0 <HAL_UARTEx_SetTxFifoThreshold>
 8002b86:	4601      	mov	r1, r0
 8002b88:	b108      	cbz	r0, 8002b8e <main+0x5a6>
 8002b8a:	b672      	cpsid	i
  while (1)
 8002b8c:	e7fe      	b.n	8002b8c <main+0x5a4>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002b8e:	4620      	mov	r0, r4
 8002b90:	f006 fdd8 	bl	8009744 <HAL_UARTEx_SetRxFifoThreshold>
 8002b94:	b108      	cbz	r0, 8002b9a <main+0x5b2>
 8002b96:	b672      	cpsid	i
  while (1)
 8002b98:	e7fe      	b.n	8002b98 <main+0x5b0>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002b9a:	4620      	mov	r0, r4
 8002b9c:	f006 fd72 	bl	8009684 <HAL_UARTEx_DisableFifoMode>
 8002ba0:	4605      	mov	r5, r0
 8002ba2:	b1c8      	cbz	r0, 8002bd8 <main+0x5f0>
 8002ba4:	b672      	cpsid	i
  while (1)
 8002ba6:	e7fe      	b.n	8002ba6 <main+0x5be>
 8002ba8:	20000754 	.word	0x20000754
 8002bac:	40010300 	.word	0x40010300
 8002bb0:	20000718 	.word	0x20000718
 8002bb4:	40010304 	.word	0x40010304
 8002bb8:	200006dc 	.word	0x200006dc
 8002bbc:	40010308 	.word	0x40010308
 8002bc0:	20000690 	.word	0x20000690
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	20000644 	.word	0x20000644
 8002bcc:	40000800 	.word	0x40000800
 8002bd0:	200005b0 	.word	0x200005b0
 8002bd4:	40004400 	.word	0x40004400
  MX_MotorControl_Init();
 8002bd8:	f001 f95e 	bl	8003e98 <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 8002bdc:	4c4c      	ldr	r4, [pc, #304]	@ (8002d10 <main+0x728>)
 8002bde:	4b4d      	ldr	r3, [pc, #308]	@ (8002d14 <main+0x72c>)
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8002be0:	8225      	strh	r5, [r4, #16]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8002be2:	2601      	movs	r6, #1
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002be4:	2702      	movs	r7, #2
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8002be6:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002bea:	4620      	mov	r0, r4
  hfdcan1.Init.NominalPrescaler = 68;
 8002bec:	2344      	movs	r3, #68	@ 0x44
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002bee:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002bf2:	e9c4 6706 	strd	r6, r7, [r4, #24]
  hfdcan1.Init.DataPrescaler = 1;
 8002bf6:	e9c4 7608 	strd	r7, r6, [r4, #32]
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002bfa:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
  hfdcan1.Init.StdFiltersNbr = 0;
 8002bfe:	e9c4 650c 	strd	r6, r5, [r4, #48]	@ 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002c02:	e9c4 550e 	strd	r5, r5, [r4, #56]	@ 0x38
  hfdcan1.Init.ProtocolException = DISABLE;
 8002c06:	74a5      	strb	r5, [r4, #18]
  hfdcan1.Init.NominalPrescaler = 68;
 8002c08:	6163      	str	r3, [r4, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002c0a:	f004 faf5 	bl	80071f8 <HAL_FDCAN_Init>
 8002c0e:	b108      	cbz	r0, 8002c14 <main+0x62c>
 8002c10:	b672      	cpsid	i
  while (1)
 8002c12:	e7fe      	b.n	8002c12 <main+0x62a>
  sFilterConfig.FilterIndex = 0;
 8002c14:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
  sFilterConfig.FilterID2 = 0x000;
 8002c18:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8002c1c:	a917      	add	r1, sp, #92	@ 0x5c
 8002c1e:	4620      	mov	r0, r4
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002c20:	e9cd 7619 	strd	r7, r6, [sp, #100]	@ 0x64
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8002c24:	f004 fbd6 	bl	80073d4 <HAL_FDCAN_ConfigFilter>
 8002c28:	b108      	cbz	r0, 8002c2e <main+0x646>
 8002c2a:	b672      	cpsid	i
  while (1)
 8002c2c:	e7fe      	b.n	8002c2c <main+0x644>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8002c2e:	4620      	mov	r0, r4
 8002c30:	f004 fbfc 	bl	800742c <HAL_FDCAN_Start>
 8002c34:	4602      	mov	r2, r0
 8002c36:	b108      	cbz	r0, 8002c3c <main+0x654>
 8002c38:	b672      	cpsid	i
  while (1)
 8002c3a:	e7fe      	b.n	8002c3a <main+0x652>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8002c3c:	4620      	mov	r0, r4
 8002c3e:	4631      	mov	r1, r6
 8002c40:	f004 fd18 	bl	8007674 <HAL_FDCAN_ActivateNotification>
 8002c44:	4604      	mov	r4, r0
 8002c46:	b108      	cbz	r0, 8002c4c <main+0x664>
 8002c48:	b672      	cpsid	i
  while (1)
 8002c4a:	e7fe      	b.n	8002c4a <main+0x662>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002c4c:	4632      	mov	r2, r6
 8002c4e:	2103      	movs	r1, #3
 8002c50:	2026      	movs	r0, #38	@ 0x26
 8002c52:	f004 f8c1 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002c56:	2026      	movs	r0, #38	@ 0x26
 8002c58:	f004 f8fa 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002c5c:	4622      	mov	r2, r4
 8002c5e:	2103      	movs	r1, #3
 8002c60:	200b      	movs	r0, #11
 8002c62:	f004 f8b9 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002c66:	200b      	movs	r0, #11
 8002c68:	f004 f8f2 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8002c6c:	4632      	mov	r2, r6
 8002c6e:	2104      	movs	r1, #4
 8002c70:	2018      	movs	r0, #24
 8002c72:	f004 f8b1 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002c76:	2018      	movs	r0, #24
 8002c78:	f004 f8ea 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002c7c:	4622      	mov	r2, r4
 8002c7e:	4621      	mov	r1, r4
 8002c80:	2019      	movs	r0, #25
 8002c82:	f004 f8a9 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002c86:	2019      	movs	r0, #25
 8002c88:	f004 f8e2 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8002c8c:	4622      	mov	r2, r4
 8002c8e:	4639      	mov	r1, r7
 8002c90:	2012      	movs	r0, #18
 8002c92:	f004 f8a1 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002c96:	2012      	movs	r0, #18
 8002c98:	f004 f8da 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 8002c9c:	4622      	mov	r2, r4
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	201e      	movs	r0, #30
 8002ca2:	f004 f899 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ca6:	201e      	movs	r0, #30
 8002ca8:	f004 f8d2 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8002cac:	4622      	mov	r2, r4
 8002cae:	2103      	movs	r1, #3
 8002cb0:	2028      	movs	r0, #40	@ 0x28
 8002cb2:	f004 f891 	bl	8006dd8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002cb6:	2028      	movs	r0, #40	@ 0x28
 8002cb8:	f004 f8ca 	bl	8006e50 <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8002cbc:	4622      	mov	r2, r4
 8002cbe:	2140      	movs	r1, #64	@ 0x40
 8002cc0:	4815      	ldr	r0, [pc, #84]	@ (8002d18 <main+0x730>)
 8002cc2:	4d16      	ldr	r5, [pc, #88]	@ (8002d1c <main+0x734>)
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002cc4:	4c14      	ldr	r4, [pc, #80]	@ (8002d18 <main+0x730>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8002cc6:	f004 ffe7 	bl	8007c98 <HAL_GPIO_WritePin>
     uart_debug_print("UART is initialized and ready to go\r\n");
 8002cca:	4815      	ldr	r0, [pc, #84]	@ (8002d20 <main+0x738>)
 8002ccc:	f002 fffa 	bl	8005cc4 <uart_debug_print>
  	 uart_debug_print("ESC ID is set to: %d\r\n", (int)ESC_ID);
 8002cd0:	4b14      	ldr	r3, [pc, #80]	@ (8002d24 <main+0x73c>)
 8002cd2:	4815      	ldr	r0, [pc, #84]	@ (8002d28 <main+0x740>)
 8002cd4:	6819      	ldr	r1, [r3, #0]
 8002cd6:	f002 fff5 	bl	8005cc4 <uart_debug_print>
	 if (received_CAN_command){
 8002cda:	782b      	ldrb	r3, [r5, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0fc      	beq.n	8002cda <main+0x6f2>
		 received_CAN_command = false;
 8002ce0:	2300      	movs	r3, #0
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002ce2:	2140      	movs	r1, #64	@ 0x40
 8002ce4:	4620      	mov	r0, r4
		 received_CAN_command = false;
 8002ce6:	702b      	strb	r3, [r5, #0]
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002ce8:	f004 ffdc 	bl	8007ca4 <HAL_GPIO_TogglePin>
		 HAL_Delay(5);
 8002cec:	2005      	movs	r0, #5
 8002cee:	f003 f8cf 	bl	8005e90 <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002cf2:	2140      	movs	r1, #64	@ 0x40
 8002cf4:	4620      	mov	r0, r4
 8002cf6:	f004 ffd5 	bl	8007ca4 <HAL_GPIO_TogglePin>
		 HAL_Delay(5);
 8002cfa:	2005      	movs	r0, #5
 8002cfc:	f003 f8c8 	bl	8005e90 <HAL_Delay>
		 uart_debug_print("---------->>>>>>Received CAN command<<<<<<-----------\r\n");
 8002d00:	480a      	ldr	r0, [pc, #40]	@ (8002d2c <main+0x744>)
 8002d02:	f002 ffdf 	bl	8005cc4 <uart_debug_print>
		 CAN_Parse_MSG(&rxHeader, rxData);
 8002d06:	490a      	ldr	r1, [pc, #40]	@ (8002d30 <main+0x748>)
 8002d08:	480a      	ldr	r0, [pc, #40]	@ (8002d34 <main+0x74c>)
 8002d0a:	f7fe ffc1 	bl	8001c90 <CAN_Parse_MSG>
 8002d0e:	e7e4      	b.n	8002cda <main+0x6f2>
 8002d10:	20000790 	.word	0x20000790
 8002d14:	40006400 	.word	0x40006400
 8002d18:	48000800 	.word	0x48000800
 8002d1c:	200004ec 	.word	0x200004ec
 8002d20:	0800bc60 	.word	0x0800bc60
 8002d24:	20000004 	.word	0x20000004
 8002d28:	0800bc88 	.word	0x0800bc88
 8002d2c:	0800bca0 	.word	0x0800bca0
 8002d30:	200004bc 	.word	0x200004bc
 8002d34:	200004c4 	.word	0x200004c4

08002d38 <Error_Handler>:
 8002d38:	b672      	cpsid	i
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <Error_Handler+0x2>

08002d3c <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8002d3c:	4b01      	ldr	r3, [pc, #4]	@ (8002d44 <MC_StartMotor1+0x8>)
 8002d3e:	6818      	ldr	r0, [r3, #0]
 8002d40:	f000 b8fc 	b.w	8002f3c <MCI_StartMotor>
 8002d44:	20001c38 	.word	0x20001c38

08002d48 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8002d48:	4b01      	ldr	r3, [pc, #4]	@ (8002d50 <MC_StopMotor1+0x8>)
 8002d4a:	6818      	ldr	r0, [r3, #0]
 8002d4c:	f000 b90c 	b.w	8002f68 <MCI_StopMotor>
 8002d50:	20001c38 	.word	0x20001c38

08002d54 <MC_ProgramSpeedRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
{
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8002d54:	4b02      	ldr	r3, [pc, #8]	@ (8002d60 <MC_ProgramSpeedRampMotor1_F+0xc>)
{
 8002d56:	4601      	mov	r1, r0
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8002d58:	6818      	ldr	r0, [r3, #0]
 8002d5a:	f000 b843 	b.w	8002de4 <MCI_ExecSpeedRamp_F>
 8002d5e:	bf00      	nop
 8002d60:	20001c38 	.word	0x20001c38

08002d64 <MC_ProgramPositionCommandMotor1>:
  * @param  fDuration Duration of the movement expressed in seconds.
  *         It is possible to set 0 to perform an instantaneous angular change (follow mode).
  */
__weak void MC_ProgramPositionCommandMotor1(float_t fTargetPosition, float_t fDuration)
{
  MCI_ExecPositionCommand(pMCI[M1], fTargetPosition, fDuration);
 8002d64:	4b01      	ldr	r3, [pc, #4]	@ (8002d6c <MC_ProgramPositionCommandMotor1+0x8>)
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	f000 b860 	b.w	8002e2c <MCI_ExecPositionCommand>
 8002d6c:	20001c38 	.word	0x20001c38

08002d70 <MC_GetMecSpeedReferenceMotor1_F>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
{
  return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 8002d70:	4b01      	ldr	r3, [pc, #4]	@ (8002d78 <MC_GetMecSpeedReferenceMotor1_F+0x8>)
 8002d72:	6818      	ldr	r0, [r3, #0]
 8002d74:	f000 b946 	b.w	8003004 <MCI_GetMecSpeedRef_F>
 8002d78:	20001c38 	.word	0x20001c38

08002d7c <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
  return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 8002d7c:	4b01      	ldr	r3, [pc, #4]	@ (8002d84 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8002d7e:	6818      	ldr	r0, [r3, #0]
 8002d80:	f000 b992 	b.w	80030a8 <MCI_GetPhaseCurrentAmplitude>
 8002d84:	20001c38 	.word	0x20001c38

08002d88 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
  return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 8002d88:	4b01      	ldr	r3, [pc, #4]	@ (8002d90 <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 8002d8a:	6818      	ldr	r0, [r3, #0]
 8002d8c:	f000 b99e 	b.w	80030cc <MCI_GetPhaseVoltageAmplitude>
 8002d90:	20001c38 	.word	0x20001c38

08002d94 <MC_GetElAngledppMotor1>:
/**
 * @brief returns the electrical angle of the rotor of Motor 1, in DDP format
 */
__weak int16_t MC_GetElAngledppMotor1(void)
{
  return (MCI_GetElAngledpp(pMCI[M1]));
 8002d94:	4b01      	ldr	r3, [pc, #4]	@ (8002d9c <MC_GetElAngledppMotor1+0x8>)
 8002d96:	6818      	ldr	r0, [r3, #0]
 8002d98:	f000 b97e 	b.w	8003098 <MCI_GetElAngledpp>
 8002d9c:	20001c38 	.word	0x20001c38

08002da0 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8002da0:	4b01      	ldr	r3, [pc, #4]	@ (8002da8 <MC_AcknowledgeFaultMotor1+0x8>)
 8002da2:	6818      	ldr	r0, [r3, #0]
 8002da4:	f000 b8fc 	b.w	8002fa0 <MCI_FaultAcknowledged>
 8002da8:	20001c38 	.word	0x20001c38

08002dac <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 8002dac:	4b01      	ldr	r3, [pc, #4]	@ (8002db4 <MC_GetOccurredFaultsMotor1+0x8>)
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	f000 b8c0 	b.w	8002f34 <MCI_GetOccurredFaults>
 8002db4:	20001c38 	.word	0x20001c38

08002db8 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8002db8:	4b01      	ldr	r3, [pc, #4]	@ (8002dc0 <MC_GetSTMStateMotor1+0x8>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f000 b8b4 	b.w	8002f28 <MCI_GetSTMState>
 8002dc0:	20001c38 	.word	0x20001c38

08002dc4 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	4770      	bx	lr

08002dc8 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop

08002dcc <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop

08002dd0 <MCI_ExecSpeedRamp>:
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002dd0:	f240 1c01 	movw	ip, #257	@ 0x101
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8002dd4:	2303      	movs	r3, #3
    pHandle->hFinalSpeed = hFinalSpeed;
 8002dd6:	8281      	strh	r1, [r0, #20]
    pHandle->hDurationms = hDurationms;
 8002dd8:	8302      	strh	r2, [r0, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002dda:	f8a0 c006 	strh.w	ip, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;
 8002dde:	7203      	strb	r3, [r0, #8]

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002de0:	4770      	bx	lr
 8002de2:	bf00      	nop

08002de4 <MCI_ExecSpeedRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
 8002de4:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8002e00 <MCI_ExecSpeedRamp_F+0x1c>
 8002de8:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8002dec:	b508      	push	{r3, lr}
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8002dee:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 8002df2:	460a      	mov	r2, r1
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8002df4:	ee10 3a10 	vmov	r3, s0
 8002df8:	b219      	sxth	r1, r3
 8002dfa:	f7ff ffe9 	bl	8002dd0 <MCI_ExecSpeedRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002dfe:	bd08      	pop	{r3, pc}
 8002e00:	3e2aaaab 	.word	0x3e2aaaab

08002e04 <MCI_ExecTorqueRamp>:
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002e04:	f240 2c01 	movw	ip, #513	@ 0x201
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002e08:	2304      	movs	r3, #4
    pHandle->hFinalTorque = hFinalTorque;
 8002e0a:	82c1      	strh	r1, [r0, #22]
    pHandle->hDurationms = hDurationms;
 8002e0c:	8302      	strh	r2, [r0, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002e0e:	f8a0 c006 	strh.w	ip, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002e12:	7203      	strb	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop

08002e18 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8002e18:	b082      	sub	sp, #8
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002e1a:	f240 3201 	movw	r2, #769	@ 0x301
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002e1e:	2304      	movs	r3, #4
    pHandle->Iqdref.q = Iqdref.q;
 8002e20:	6241      	str	r1, [r0, #36]	@ 0x24
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002e22:	80c2      	strh	r2, [r0, #6]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002e24:	7203      	strb	r3, [r0, #8]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002e26:	b002      	add	sp, #8
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop

08002e2c <MCI_ExecPositionCommand>:
  *
  * Users can check the status of the command by calling the MCI_IsCommandAcknowledged()
  * function.
  */
__weak void MCI_ExecPositionCommand(MCI_Handle_t *pHandle, float_t FinalPosition, float_t Duration)
{
 8002e2c:	b510      	push	{r4, lr}
 8002e2e:	ed2d 8b02 	vpush	{d8}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002e32:	6a03      	ldr	r3, [r0, #32]
 8002e34:	2200      	movs	r2, #0
{
 8002e36:	b082      	sub	sp, #8
    pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002e38:	f883 2020 	strb.w	r2, [r3, #32]
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8002e3c:	69c3      	ldr	r3, [r0, #28]
{
 8002e3e:	4604      	mov	r4, r0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002e40:	6958      	ldr	r0, [r3, #20]
{
 8002e42:	eeb0 8a60 	vmov.f32	s16, s1
 8002e46:	eef0 8a40 	vmov.f32	s17, s0
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002e4a:	f008 f87f 	bl	800af4c <SPD_GetMecAngle>
    if (Duration > 0)
 8002e4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002e56:	9001      	str	r0, [sp, #4]
    if (Duration > 0)
 8002e58:	dd14      	ble.n	8002e84 <MCI_ExecPositionCommand+0x58>
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002e5a:	ee07 0a90 	vmov	s15, r0
 8002e5e:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002e9c <MCI_ExecPositionCommand+0x70>
    {
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002e62:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002e64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002e68:	eeb0 1a48 	vmov.f32	s2, s16
    float_t currentPositionRad = (float_t)(SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16;
 8002e6c:	ee27 0a87 	vmul.f32	s0, s15, s14
      TC_MoveCommand(pHandle->pPosCtrl, currentPositionRad, FinalPosition - currentPositionRad, Duration);
 8002e70:	ee78 0ac0 	vsub.f32	s1, s17, s0
 8002e74:	f008 f8da 	bl	800b02c <TC_MoveCommand>
    else
    {
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
    }

    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002e78:	2304      	movs	r3, #4
 8002e7a:	7223      	strb	r3, [r4, #8]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002e7c:	b002      	add	sp, #8
 8002e7e:	ecbd 8b02 	vpop	{d8}
 8002e82:	bd10      	pop	{r4, pc}
      TC_FollowCommand(pHandle->pPosCtrl, FinalPosition);
 8002e84:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8002e86:	eeb0 0a68 	vmov.f32	s0, s17
 8002e8a:	f008 f941 	bl	800b110 <TC_FollowCommand>
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
 8002e8e:	2304      	movs	r3, #4
 8002e90:	7223      	strb	r3, [r4, #8]
}
 8002e92:	b002      	add	sp, #8
 8002e94:	ecbd 8b02 	vpop	{d8}
 8002e98:	bd10      	pop	{r4, pc}
 8002e9a:	bf00      	nop
 8002e9c:	38c90fdb 	.word	0x38c90fdb

08002ea0 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8002ea0:	8843      	ldrh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 8002ea2:	f8b0 c004 	ldrh.w	ip, [r0, #4]
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8002ea6:	430b      	orrs	r3, r1
 8002ea8:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8002eac:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors) & (~hResetErrors);
 8002eb0:	8043      	strh	r3, [r0, #2]
    pHandle->PastFaults |= hSetErrors;
 8002eb2:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop

08002eb8 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED)
 8002eb8:	7983      	ldrb	r3, [r0, #6]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d000      	beq.n	8002ec0 <MCI_ExecBufferedCommands+0x8>
 8002ebe:	4770      	bx	lr
{
 8002ec0:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8002ec2:	79c2      	ldrb	r2, [r0, #7]
 8002ec4:	2a02      	cmp	r2, #2
 8002ec6:	4604      	mov	r4, r0
 8002ec8:	d01e      	beq.n	8002f08 <MCI_ExecBufferedCommands+0x50>
 8002eca:	2a03      	cmp	r2, #3
 8002ecc:	d013      	beq.n	8002ef6 <MCI_ExecBufferedCommands+0x3e>
 8002ece:	2a01      	cmp	r2, #1
 8002ed0:	d117      	bne.n	8002f02 <MCI_ExecBufferedCommands+0x4a>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002ed2:	6a03      	ldr	r3, [r0, #32]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 2020 	strb.w	r2, [r3, #32]
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002eda:	69c0      	ldr	r0, [r0, #28]
 8002edc:	2103      	movs	r1, #3
 8002ede:	f001 fac1 	bl	8004464 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8002ee2:	8b22      	ldrh	r2, [r4, #24]
 8002ee4:	f9b4 1014 	ldrsh.w	r1, [r4, #20]
 8002ee8:	69e0      	ldr	r0, [r4, #28]
 8002eea:	f001 fabf 	bl	800446c <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 8002eee:	b140      	cbz	r0, 8002f02 <MCI_ExecBufferedCommands+0x4a>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8002ef0:	2302      	movs	r3, #2
 8002ef2:	71a3      	strb	r3, [r4, #6]
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002ef4:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8002ef6:	6a02      	ldr	r2, [r0, #32]
 8002ef8:	f882 3020 	strb.w	r3, [r2, #32]
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002efc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002efe:	60d0      	str	r0, [r2, #12]
      if (commandHasBeenExecuted)
 8002f00:	e7f6      	b.n	8002ef0 <MCI_ExecBufferedCommands+0x38>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8002f02:	2303      	movs	r3, #3
 8002f04:	71a3      	strb	r3, [r4, #6]
}
 8002f06:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002f08:	6a03      	ldr	r3, [r0, #32]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2020 	strb.w	r2, [r3, #32]
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8002f10:	69c0      	ldr	r0, [r0, #28]
 8002f12:	2104      	movs	r1, #4
 8002f14:	f001 faa6 	bl	8004464 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002f18:	8b22      	ldrh	r2, [r4, #24]
 8002f1a:	f9b4 1016 	ldrsh.w	r1, [r4, #22]
 8002f1e:	69e0      	ldr	r0, [r4, #28]
 8002f20:	f001 faa4 	bl	800446c <STC_ExecRamp>
          break;
 8002f24:	e7e3      	b.n	8002eee <MCI_ExecBufferedCommands+0x36>
 8002f26:	bf00      	nop

08002f28 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8002f28:	7840      	ldrb	r0, [r0, #1]
 8002f2a:	4770      	bx	lr

08002f2c <MCI_GetCurrentPosition>:
__weak float_t MCI_GetCurrentPosition(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : TC_GetCurrentPosition(pHandle->pPosCtrl));
#else
  return (TC_GetCurrentPosition(pHandle->pPosCtrl));
 8002f2c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8002f2e:	f008 ba99 	b.w	800b464 <TC_GetCurrentPosition>
 8002f32:	bf00      	nop

08002f34 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8002f34:	8880      	ldrh	r0, [r0, #4]
 8002f36:	4770      	bx	lr

08002f38 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8002f38:	8840      	ldrh	r0, [r0, #2]
 8002f3a:	4770      	bx	lr

08002f3c <MCI_StartMotor>:
{
 8002f3c:	b510      	push	{r4, lr}
 8002f3e:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8002f40:	f7ff fff2 	bl	8002f28 <MCI_GetSTMState>
 8002f44:	b108      	cbz	r0, 8002f4a <MCI_StartMotor+0xe>
  bool retVal = false;
 8002f46:	2000      	movs	r0, #0
}
 8002f48:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	f7ff fff2 	bl	8002f34 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8002f50:	2800      	cmp	r0, #0
 8002f52:	d1f8      	bne.n	8002f46 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002f54:	4620      	mov	r0, r4
 8002f56:	f7ff ffef 	bl	8002f38 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002f5a:	2800      	cmp	r0, #0
 8002f5c:	d1f3      	bne.n	8002f46 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8002f5e:	2001      	movs	r0, #1
 8002f60:	7020      	strb	r0, [r4, #0]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002f62:	71a0      	strb	r0, [r4, #6]
}
 8002f64:	bd10      	pop	{r4, pc}
 8002f66:	bf00      	nop

08002f68 <MCI_StopMotor>:
{
 8002f68:	b538      	push	{r3, r4, r5, lr}
 8002f6a:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8002f6c:	f7ff ffdc 	bl	8002f28 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8002f70:	4604      	mov	r4, r0
 8002f72:	b118      	cbz	r0, 8002f7c <MCI_StopMotor+0x14>
 8002f74:	f1b0 040c 	subs.w	r4, r0, #12
 8002f78:	bf18      	it	ne
 8002f7a:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002f7c:	4628      	mov	r0, r5
 8002f7e:	f7ff ffd9 	bl	8002f34 <MCI_GetOccurredFaults>
 8002f82:	b110      	cbz	r0, 8002f8a <MCI_StopMotor+0x22>
  bool retVal = false;
 8002f84:	2400      	movs	r4, #0
}
 8002f86:	4620      	mov	r0, r4
 8002f88:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002f8a:	4628      	mov	r0, r5
 8002f8c:	f7ff ffd4 	bl	8002f38 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002f90:	2800      	cmp	r0, #0
 8002f92:	d1f7      	bne.n	8002f84 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002f94:	2c00      	cmp	r4, #0
 8002f96:	d0f5      	beq.n	8002f84 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8002f98:	2305      	movs	r3, #5
 8002f9a:	702b      	strb	r3, [r5, #0]
      retVal = true;
 8002f9c:	e7f3      	b.n	8002f86 <MCI_StopMotor+0x1e>
 8002f9e:	bf00      	nop

08002fa0 <MCI_FaultAcknowledged>:
{
 8002fa0:	b510      	push	{r4, lr}
 8002fa2:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002fa4:	f7ff ffc0 	bl	8002f28 <MCI_GetSTMState>
 8002fa8:	280b      	cmp	r0, #11
 8002faa:	d001      	beq.n	8002fb0 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8002fac:	2000      	movs	r0, #0
}
 8002fae:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002fb0:	4620      	mov	r0, r4
 8002fb2:	f7ff ffc1 	bl	8002f38 <MCI_GetCurrentFaults>
 8002fb6:	2800      	cmp	r0, #0
 8002fb8:	d1f8      	bne.n	8002fac <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8002fba:	2302      	movs	r3, #2
 8002fbc:	7023      	strb	r3, [r4, #0]
      pHandle->PastFaults = MC_NO_FAULTS;
 8002fbe:	80a0      	strh	r0, [r4, #4]
      reVal = true;
 8002fc0:	2001      	movs	r0, #1
}
 8002fc2:	bd10      	pop	{r4, pc}

08002fc4 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8002fc4:	8883      	ldrh	r3, [r0, #4]
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8002fc6:	8840      	ldrh	r0, [r0, #2]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8002fc8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8002fd0:	7a00      	ldrb	r0, [r0, #8]
 8002fd2:	4770      	bx	lr

08002fd4 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8002fd4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8002fdc:	f9b0 0016 	ldrsh.w	r0, [r0, #22]
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop

08002fe4 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8002fe4:	8b00      	ldrh	r0, [r0, #24]
 8002fe6:	4770      	bx	lr

08002fe8 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002fe8:	69c3      	ldr	r3, [r0, #28]
    pHandle->RampRemainingStep = 0U;
 8002fea:	2200      	movs	r2, #0
 8002fec:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8002fee:	61da      	str	r2, [r3, #28]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop

08002ff4 <MCI_GetAvrgMecSpeedUnit>:
  return (pHandle->SPD);
 8002ff4:	69c3      	ldr	r3, [r0, #28]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002ff6:	6958      	ldr	r0, [r3, #20]
 8002ff8:	f007 bfaa 	b.w	800af50 <SPD_GetAvrgMecSpeedUnit>

08002ffc <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8002ffc:	69c0      	ldr	r0, [r0, #28]
 8002ffe:	f001 ba2d 	b.w	800445c <STC_GetMecSpeedRefUnit>
 8003002:	bf00      	nop

08003004 <MCI_GetMecSpeedRef_F>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
{
 8003004:	b508      	push	{r3, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0.0f :
          (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
#else
  return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
 8003006:	69c0      	ldr	r0, [r0, #28]
 8003008:	f001 fa28 	bl	800445c <STC_GetMecSpeedRefUnit>
 800300c:	ee07 0a90 	vmov	s15, r0
 8003010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003014:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#endif
}
 8003018:	ee27 0a80 	vmul.f32	s0, s15, s0
 800301c:	bd08      	pop	{r3, pc}
 800301e:	bf00      	nop

08003020 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8003020:	6a03      	ldr	r3, [r0, #32]
 8003022:	6818      	ldr	r0, [r3, #0]
 8003024:	b283      	uxth	r3, r0
 8003026:	f36f 000f 	bfc	r0, #0, #16
{
 800302a:	b082      	sub	sp, #8
#endif
}
 800302c:	4318      	orrs	r0, r3
 800302e:	b002      	add	sp, #8
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop

08003034 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8003034:	6a03      	ldr	r3, [r0, #32]
 8003036:	6858      	ldr	r0, [r3, #4]
 8003038:	b283      	uxth	r3, r0
 800303a:	f36f 000f 	bfc	r0, #0, #16
{
 800303e:	b082      	sub	sp, #8
#endif
}
 8003040:	4318      	orrs	r0, r3
 8003042:	b002      	add	sp, #8
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop

08003048 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8003048:	6a03      	ldr	r3, [r0, #32]
 800304a:	6898      	ldr	r0, [r3, #8]
 800304c:	b283      	uxth	r3, r0
 800304e:	f36f 000f 	bfc	r0, #0, #16
{
 8003052:	b082      	sub	sp, #8
#endif
}
 8003054:	4318      	orrs	r0, r3
 8003056:	b002      	add	sp, #8
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop

0800305c <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 800305c:	6a03      	ldr	r3, [r0, #32]
 800305e:	68d8      	ldr	r0, [r3, #12]
 8003060:	b283      	uxth	r3, r0
 8003062:	f36f 000f 	bfc	r0, #0, #16
{
 8003066:	b082      	sub	sp, #8
#endif
}
 8003068:	4318      	orrs	r0, r3
 800306a:	b002      	add	sp, #8
 800306c:	4770      	bx	lr
 800306e:	bf00      	nop

08003070 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8003070:	6a03      	ldr	r3, [r0, #32]
 8003072:	f8d3 0012 	ldr.w	r0, [r3, #18]
 8003076:	b283      	uxth	r3, r0
 8003078:	f36f 000f 	bfc	r0, #0, #16
{
 800307c:	b082      	sub	sp, #8
#endif
}
 800307e:	4318      	orrs	r0, r3
 8003080:	b002      	add	sp, #8
 8003082:	4770      	bx	lr

08003084 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8003084:	6a03      	ldr	r3, [r0, #32]
 8003086:	f8d3 0016 	ldr.w	r0, [r3, #22]
 800308a:	b283      	uxth	r3, r0
 800308c:	f36f 000f 	bfc	r0, #0, #16
{
 8003090:	b082      	sub	sp, #8
#endif
}
 8003092:	4318      	orrs	r0, r3
 8003094:	b002      	add	sp, #8
 8003096:	4770      	bx	lr

08003098 <MCI_GetElAngledpp>:
__weak int16_t MCI_GetElAngledpp(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hElAngle);
#else
  return (pHandle->pFOCVars->hElAngle);
 8003098:	6a03      	ldr	r3, [r0, #32]
#endif
}
 800309a:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 800309e:	4770      	bx	lr

080030a0 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 80030a0:	6a03      	ldr	r3, [r0, #32]
#endif
}
 80030a2:	f9b3 001a 	ldrsh.w	r0, [r3, #26]
 80030a6:	4770      	bx	lr

080030a8 <MCI_GetPhaseCurrentAmplitude>:
{
  uint32_t temp_val;
  __disable_irq();
  /* Configure and call to CORDIC- */
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
  LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (((uint32_t)alpha) & 0x0000FFFFU)));
 80030a8:	6a03      	ldr	r3, [r0, #32]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	b672      	cpsid	i
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 80030ae:	4a05      	ldr	r2, [pc, #20]	@ (80030c4 <MCI_GetPhaseCurrentAmplitude+0x1c>)
 80030b0:	4905      	ldr	r1, [pc, #20]	@ (80030c8 <MCI_GetPhaseCurrentAmplitude+0x20>)
 80030b2:	6011      	str	r1, [r2, #0]
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 80030b4:	6053      	str	r3, [r2, #4]
  return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 80030b6:	6813      	ldr	r3, [r2, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	dafc      	bge.n	80030b6 <MCI_GetPhaseCurrentAmplitude+0xe>
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80030bc:	6890      	ldr	r0, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 80030be:	b662      	cpsie	i
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif

  return (wAux);
}
 80030c0:	b200      	sxth	r0, r0
 80030c2:	4770      	bx	lr
 80030c4:	40020c00 	.word	0x40020c00
 80030c8:	00600063 	.word	0x00600063

080030cc <MCI_GetPhaseVoltageAmplitude>:
#endif
    alphabeta_t Local_Voltage;
    int32_t wAux1;
    int32_t wAux2;

    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 80030cc:	6a02      	ldr	r2, [r0, #32]
{
 80030ce:	b508      	push	{r3, lr}
    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 80030d0:	f9b2 3018 	ldrsh.w	r3, [r2, #24]
 80030d4:	f9b2 0016 	ldrsh.w	r0, [r2, #22]
    wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
    wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 80030d8:	fb03 f303 	mul.w	r3, r3, r3

    wAux1 += wAux2;
    wAux1 = MCM_Sqrt(wAux1);
 80030dc:	fb00 3000 	mla	r0, r0, r0, r3
 80030e0:	f000 f8ac 	bl	800323c <MCM_Sqrt>

    if (wAux1 > INT16_MAX)
 80030e4:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80030e8:	4298      	cmp	r0, r3
 80030ea:	bfa8      	it	ge
 80030ec:	4618      	movge	r0, r3
    temp_wAux = (int16_t)wAux1;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_wAux);
}
 80030ee:	b200      	sxth	r0, r0
 80030f0:	bd08      	pop	{r3, pc}
 80030f2:	bf00      	nop

080030f4 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80030f4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80030f6:	e9d0 0407 	ldrd	r0, r4, [r0, #28]
 80030fa:	f001 fa39 	bl	8004570 <STC_GetDefaultIqdref>
 80030fe:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003102:	81a0      	strh	r0, [r4, #12]
 8003104:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8003106:	bd10      	pop	{r4, pc}

08003108 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8003108:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800310c:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8003110:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8003114:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8003118:	fb10 f202 	smulbb	r2, r0, r2
 800311c:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8003120:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8003124:	b084      	sub	sp, #16
 8003126:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8003128:	da05      	bge.n	8003136 <MCM_Clarke+0x2e>
 800312a:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800312c:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8003130:	da0c      	bge.n	800314c <MCM_Clarke+0x44>
 8003132:	4a09      	ldr	r2, [pc, #36]	@ (8003158 <MCM_Clarke+0x50>)
 8003134:	e001      	b.n	800313a <MCM_Clarke+0x32>
 8003136:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 800313a:	b29b      	uxth	r3, r3
 800313c:	2000      	movs	r0, #0
 800313e:	f363 000f 	bfi	r0, r3, #0, #16
 8003142:	b293      	uxth	r3, r2
 8003144:	f363 401f 	bfi	r0, r3, #16, #16
}
 8003148:	b004      	add	sp, #16
 800314a:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800314c:	4802      	ldr	r0, [pc, #8]	@ (8003158 <MCM_Clarke+0x50>)
 800314e:	b20a      	sxth	r2, r1
 8003150:	4282      	cmp	r2, r0
 8003152:	bfb8      	it	lt
 8003154:	4602      	movlt	r2, r0
 8003156:	e7f0      	b.n	800313a <MCM_Clarke+0x32>
 8003158:	ffff8001 	.word	0xffff8001

0800315c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800315c:	4b06      	ldr	r3, [pc, #24]	@ (8003178 <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 800315e:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8003162:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8003166:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 800316a:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 800316c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800316e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8003170:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8003172:	b002      	add	sp, #8
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40020c00 	.word	0x40020c00

0800317c <MCM_Park>:
{
 800317c:	b530      	push	{r4, r5, lr}
 800317e:	4605      	mov	r5, r0
 8003180:	4604      	mov	r4, r0
 8003182:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8003184:	4608      	mov	r0, r1
 8003186:	f7ff ffe9 	bl	800315c <MCM_Trig_Functions>
 800318a:	b22d      	sxth	r5, r5
 800318c:	b201      	sxth	r1, r0
 800318e:	1424      	asrs	r4, r4, #16
 8003190:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8003192:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8003196:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800319e:	da05      	bge.n	80031ac <MCM_Park+0x30>
 80031a0:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 80031a2:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 80031a6:	da22      	bge.n	80031ee <MCM_Park+0x72>
 80031a8:	4a14      	ldr	r2, [pc, #80]	@ (80031fc <MCM_Park+0x80>)
 80031aa:	e001      	b.n	80031b0 <MCM_Park+0x34>
 80031ac:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80031b0:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80031b4:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 80031b8:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80031bc:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80031c0:	da04      	bge.n	80031cc <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 80031c2:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80031c6:	da0c      	bge.n	80031e2 <MCM_Park+0x66>
 80031c8:	4b0c      	ldr	r3, [pc, #48]	@ (80031fc <MCM_Park+0x80>)
 80031ca:	e001      	b.n	80031d0 <MCM_Park+0x54>
 80031cc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 80031d0:	b292      	uxth	r2, r2
 80031d2:	2000      	movs	r0, #0
 80031d4:	f362 000f 	bfi	r0, r2, #0, #16
 80031d8:	b29b      	uxth	r3, r3
 80031da:	f363 401f 	bfi	r0, r3, #16, #16
}
 80031de:	b005      	add	sp, #20
 80031e0:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 80031e2:	4906      	ldr	r1, [pc, #24]	@ (80031fc <MCM_Park+0x80>)
 80031e4:	b21b      	sxth	r3, r3
 80031e6:	428b      	cmp	r3, r1
 80031e8:	bfb8      	it	lt
 80031ea:	460b      	movlt	r3, r1
 80031ec:	e7f0      	b.n	80031d0 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 80031ee:	4b03      	ldr	r3, [pc, #12]	@ (80031fc <MCM_Park+0x80>)
 80031f0:	b212      	sxth	r2, r2
 80031f2:	429a      	cmp	r2, r3
 80031f4:	bfb8      	it	lt
 80031f6:	461a      	movlt	r2, r3
 80031f8:	e7da      	b.n	80031b0 <MCM_Park+0x34>
 80031fa:	bf00      	nop
 80031fc:	ffff8001 	.word	0xffff8001

08003200 <MCM_Rev_Park>:
{
 8003200:	b530      	push	{r4, r5, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	b085      	sub	sp, #20
 8003206:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8003208:	4608      	mov	r0, r1
 800320a:	f7ff ffa7 	bl	800315c <MCM_Trig_Functions>
 800320e:	1424      	asrs	r4, r4, #16
 8003210:	1402      	asrs	r2, r0, #16
 8003212:	b22d      	sxth	r5, r5
 8003214:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8003216:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800321a:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800321e:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8003222:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8003226:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800322a:	2000      	movs	r0, #0
 800322c:	f363 000f 	bfi	r0, r3, #0, #16
 8003230:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8003234:	f364 401f 	bfi	r0, r4, #16, #16
}
 8003238:	b005      	add	sp, #20
 800323a:	bd30      	pop	{r4, r5, pc}

0800323c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 800323c:	2800      	cmp	r0, #0
 800323e:	dd09      	ble.n	8003254 <MCM_Sqrt+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8003240:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8003242:	4b05      	ldr	r3, [pc, #20]	@ (8003258 <MCM_Sqrt+0x1c>)
 8003244:	f240 1269 	movw	r2, #361	@ 0x169
 8003248:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800324a:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800324c:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800324e:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8003250:	b662      	cpsie	i
}
 8003252:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8003254:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8003256:	4770      	bx	lr
 8003258:	40020c00 	.word	0x40020c00

0800325c <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 800325c:	b318      	cbz	r0, 80032a6 <MCboot+0x4a>
{
 800325e:	b510      	push	{r4, lr}
    bMCBootCompleted = (uint8_t )0;

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    pMCIList[M1] = &Mci[M1];
 8003260:	4a11      	ldr	r2, [pc, #68]	@ (80032a8 <MCboot+0x4c>)
    bMCBootCompleted = (uint8_t )0;
 8003262:	4c12      	ldr	r4, [pc, #72]	@ (80032ac <MCboot+0x50>)
    pMCIList[M1] = &Mci[M1];
 8003264:	6002      	str	r2, [r0, #0]
    bMCBootCompleted = (uint8_t )0;
 8003266:	2300      	movs	r3, #0
 8003268:	7023      	strb	r3, [r4, #0]
    FOC_Init();
 800326a:	f000 fa15 	bl	8003698 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 800326e:	4810      	ldr	r0, [pc, #64]	@ (80032b0 <MCboot+0x54>)
 8003270:	f7fe fd66 	bl	8001d40 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8003274:	480f      	ldr	r0, [pc, #60]	@ (80032b4 <MCboot+0x58>)
 8003276:	f006 fdff 	bl	8009e78 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 800327a:	480f      	ldr	r0, [pc, #60]	@ (80032b8 <MCboot+0x5c>)
 800327c:	f008 f924 	bl	800b4c8 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8003280:	480e      	ldr	r0, [pc, #56]	@ (80032bc <MCboot+0x60>)
 8003282:	f001 f809 	bl	8004298 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8003286:	480e      	ldr	r0, [pc, #56]	@ (80032c0 <MCboot+0x64>)
 8003288:	f007 fe1a 	bl	800aec0 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 800328c:	480d      	ldr	r0, [pc, #52]	@ (80032c4 <MCboot+0x68>)
 800328e:	f001 f803 	bl	8004298 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8003292:	480d      	ldr	r0, [pc, #52]	@ (80032c8 <MCboot+0x6c>)
 8003294:	f006 fda6 	bl	8009de4 <NTC_Init>

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8003298:	f7ff fd96 	bl	8002dc8 <MC_APP_BootHook>

    /**************************************/
    /*    Start timers synchronously      */
    /**************************************/
    startTimers();
 800329c:	f000 fe1a 	bl	8003ed4 <startTimers>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80032a0:	2301      	movs	r3, #1
 80032a2:	7023      	strb	r3, [r4, #0]
  }
}
 80032a4:	bd10      	pop	{r4, pc}
 80032a6:	4770      	bx	lr
 80032a8:	20000008 	.word	0x20000008
 80032ac:	200009a4 	.word	0x200009a4
 80032b0:	200003f0 	.word	0x200003f0
 80032b4:	20000230 	.word	0x20000230
 80032b8:	200002b8 	.word	0x200002b8
 80032bc:	20000280 	.word	0x20000280
 80032c0:	2000026c 	.word	0x2000026c
 80032c4:	200002a8 	.word	0x200002a8
 80032c8:	20000290 	.word	0x20000290

080032cc <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 80032cc:	4b01      	ldr	r3, [pc, #4]	@ (80032d4 <TSK_SetChargeBootCapDelayM1+0x8>)
 80032ce:	8018      	strh	r0, [r3, #0]
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	200009a8 	.word	0x200009a8

080032d8 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 80032da:	8818      	ldrh	r0, [r3, #0]
 80032dc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80032de:	fab0 f080 	clz	r0, r0
 80032e2:	0940      	lsrs	r0, r0, #5
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	200009a8 	.word	0x200009a8

080032ec <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80032ec:	4b01      	ldr	r3, [pc, #4]	@ (80032f4 <TSK_SetStopPermanencyTimeM1+0x8>)
 80032ee:	8018      	strh	r0, [r3, #0]
}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200009a6 	.word	0x200009a6

080032f8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80032f8:	4b03      	ldr	r3, [pc, #12]	@ (8003308 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80032fa:	8818      	ldrh	r0, [r3, #0]
 80032fc:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80032fe:	fab0 f080 	clz	r0, r0
 8003302:	0940      	lsrs	r0, r0, #5
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	200009a6 	.word	0x200009a6

0800330c <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 800330c:	b508      	push	{r3, lr}
  bMotorNbr = 0;

  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 800330e:	2000      	movs	r0, #0
 8003310:	f000 fbbc 	bl	8003a8c <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */
  GLOBAL_TIMESTAMP++;
 8003314:	4a06      	ldr	r2, [pc, #24]	@ (8003330 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 8003316:	4807      	ldr	r0, [pc, #28]	@ (8003334 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8003318:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800331a:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 800331e:	3301      	adds	r3, #1
 8003320:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8003322:	b909      	cbnz	r1, 8003328 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 8003324:	2000      	movs	r0, #0
 8003326:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8003328:	f006 fc24 	bl	8009b74 <MCPA_dataLog>
}
 800332c:	2000      	movs	r0, #0
 800332e:	bd08      	pop	{r3, pc}
 8003330:	20001c58 	.word	0x20001c58
 8003334:	200003b4 	.word	0x200003b4

08003338 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8003338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 800333a:	4604      	mov	r4, r0
 800333c:	b320      	cbz	r0, 8003388 <TSK_SafetyTask_PWMOFF+0x50>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800333e:	4e1e      	ldr	r6, [pc, #120]	@ (80033b8 <TSK_SafetyTask_PWMOFF+0x80>)
 8003340:	6830      	ldr	r0, [r6, #0]
 8003342:	f000 ff8d 	bl	8004260 <PWMC_IsFaultOccurred>
 8003346:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8003348:	4d1c      	ldr	r5, [pc, #112]	@ (80033bc <TSK_SafetyTask_PWMOFF+0x84>)
 800334a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 800334e:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8003352:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8003356:	43ca      	mvns	r2, r1
 8003358:	4628      	mov	r0, r5
 800335a:	b292      	uxth	r2, r2
 800335c:	f7ff fda0 	bl	8002ea0 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8003360:	4628      	mov	r0, r5
 8003362:	f7ff fe2f 	bl	8002fc4 <MCI_GetFaultState>
 8003366:	b170      	cbz	r0, 8003386 <TSK_SafetyTask_PWMOFF+0x4e>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8003368:	4b15      	ldr	r3, [pc, #84]	@ (80033c0 <TSK_SafetyTask_PWMOFF+0x88>)
 800336a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800336e:	b10b      	cbz	r3, 8003374 <TSK_SafetyTask_PWMOFF+0x3c>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8003370:	2200      	movs	r2, #0
 8003372:	73da      	strb	r2, [r3, #15]
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003374:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8003378:	f000 ff3c 	bl	80041f4 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 800337c:	4620      	mov	r0, r4
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800337e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8003382:	f000 b953 	b.w	800362c <FOC_Clear>
}
 8003386:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
static inline uint16_t RCM_GetRegularConv(const RegConv_t *regConv)
{
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  return ((MC_NULL == regConv) ? 0U : regConv->data);
#else
  return (regConv->data);
 8003388:	4b0e      	ldr	r3, [pc, #56]	@ (80033c4 <TSK_SafetyTask_PWMOFF+0x8c>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 800338a:	480f      	ldr	r0, [pc, #60]	@ (80033c8 <TSK_SafetyTask_PWMOFF+0x90>)
 800338c:	8959      	ldrh	r1, [r3, #10]
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 800338e:	4e0a      	ldr	r6, [pc, #40]	@ (80033b8 <TSK_SafetyTask_PWMOFF+0x80>)
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8003390:	f006 fd3a 	bl	8009e08 <NTC_CalcAvTemp>
 8003394:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8003396:	6830      	ldr	r0, [r6, #0]
 8003398:	f000 ff62 	bl	8004260 <PWMC_IsFaultOccurred>
 800339c:	4b0b      	ldr	r3, [pc, #44]	@ (80033cc <TSK_SafetyTask_PWMOFF+0x94>)
 800339e:	4605      	mov	r5, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80033a0:	8959      	ldrh	r1, [r3, #10]
 80033a2:	480b      	ldr	r0, [pc, #44]	@ (80033d0 <TSK_SafetyTask_PWMOFF+0x98>)
 80033a4:	f007 fd92 	bl	800aecc <RVBS_CalcAvVbus>
 80033a8:	4307      	orrs	r7, r0
 80033aa:	f007 070e 	and.w	r7, r7, #14
 80033ae:	ea45 0107 	orr.w	r1, r5, r7
 80033b2:	b289      	uxth	r1, r1
 80033b4:	e7c8      	b.n	8003348 <TSK_SafetyTask_PWMOFF+0x10>
 80033b6:	bf00      	nop
 80033b8:	2000099c 	.word	0x2000099c
 80033bc:	20000008 	.word	0x20000008
 80033c0:	200009a0 	.word	0x200009a0
 80033c4:	200002a8 	.word	0x200002a8
 80033c8:	20000290 	.word	0x20000290
 80033cc:	20000280 	.word	0x20000280
 80033d0:	2000026c 	.word	0x2000026c

080033d4 <TSK_SafetyTask>:
{
 80033d4:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 80033d6:	4b04      	ldr	r3, [pc, #16]	@ (80033e8 <TSK_SafetyTask+0x14>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d000      	beq.n	80033e0 <TSK_SafetyTask+0xc>
}
 80033de:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 80033e0:	2000      	movs	r0, #0
 80033e2:	f7ff ffa9 	bl	8003338 <TSK_SafetyTask_PWMOFF>
}
 80033e6:	bd08      	pop	{r3, pc}
 80033e8:	200009a4 	.word	0x200009a4

080033ec <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 80033ec:	4b1e      	ldr	r3, [pc, #120]	@ (8003468 <MC_RunMotorControlTasks+0x7c>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	b1cb      	cbz	r3, 8003426 <MC_RunMotorControlTasks+0x3a>
{
 80033f2:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 80033f4:	4c1d      	ldr	r4, [pc, #116]	@ (800346c <MC_RunMotorControlTasks+0x80>)
 80033f6:	8823      	ldrh	r3, [r4, #0]
 80033f8:	b1b3      	cbz	r3, 8003428 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 80033fa:	3b01      	subs	r3, #1
 80033fc:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 80033fe:	4a1c      	ldr	r2, [pc, #112]	@ (8003470 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8003400:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8003402:	8813      	ldrh	r3, [r2, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	b11b      	cbz	r3, 8003410 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8003408:	8813      	ldrh	r3, [r2, #0]
 800340a:	3b01      	subs	r3, #1
 800340c:	b29b      	uxth	r3, r3
 800340e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8003410:	4a18      	ldr	r2, [pc, #96]	@ (8003474 <MC_RunMotorControlTasks+0x88>)
 8003412:	8813      	ldrh	r3, [r2, #0]
 8003414:	b29b      	uxth	r3, r3
 8003416:	b11b      	cbz	r3, 8003420 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8003418:	8813      	ldrh	r3, [r2, #0]
 800341a:	3b01      	subs	r3, #1
 800341c:	b29b      	uxth	r3, r3
 800341e:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8003420:	f7ff ffd8 	bl	80033d4 <TSK_SafetyTask>
}
 8003424:	bd70      	pop	{r4, r5, r6, pc}
 8003426:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8003428:	4d13      	ldr	r5, [pc, #76]	@ (8003478 <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 800342a:	f000 f9dd 	bl	80037e8 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 800342e:	f7ff fccd 	bl	8002dcc <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8003432:	4629      	mov	r1, r5
 8003434:	f851 0b0c 	ldr.w	r0, [r1], #12
 8003438:	6883      	ldr	r3, [r0, #8]
 800343a:	4798      	blx	r3
 800343c:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 800343e:	b130      	cbz	r0, 800344e <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8003440:	4629      	mov	r1, r5
 8003442:	220a      	movs	r2, #10
 8003444:	f851 0b08 	ldr.w	r0, [r1], #8
 8003448:	6803      	ldr	r3, [r0, #0]
 800344a:	4798      	blx	r3
 800344c:	b908      	cbnz	r0, 8003452 <MC_RunMotorControlTasks+0x66>
{
 800344e:	2301      	movs	r3, #1
 8003450:	e7d5      	b.n	80033fe <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8003452:	4628      	mov	r0, r5
 8003454:	f000 fc58 	bl	8003d08 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8003458:	6828      	ldr	r0, [r5, #0]
 800345a:	89ea      	ldrh	r2, [r5, #14]
 800345c:	6846      	ldr	r6, [r0, #4]
 800345e:	68a9      	ldr	r1, [r5, #8]
 8003460:	230a      	movs	r3, #10
 8003462:	47b0      	blx	r6
 8003464:	e7f3      	b.n	800344e <MC_RunMotorControlTasks+0x62>
 8003466:	bf00      	nop
 8003468:	200009a4 	.word	0x200009a4
 800346c:	200009aa 	.word	0x200009aa
 8003470:	200009a8 	.word	0x200009a8
 8003474:	200009a6 	.word	0x200009a6
 8003478:	200003e0 	.word	0x200003e0

0800347c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800347c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 800347e:	2000      	movs	r0, #0
 8003480:	f000 f8d4 	bl	800362c <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8003484:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8003488:	4802      	ldr	r0, [pc, #8]	@ (8003494 <TSK_HardwareFaultTask+0x18>)
 800348a:	2200      	movs	r2, #0
 800348c:	2180      	movs	r1, #128	@ 0x80
 800348e:	f7ff bd07 	b.w	8002ea0 <MCI_FaultProcessing>
 8003492:	bf00      	nop
 8003494:	20000008 	.word	0x20000008

08003498 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8003498:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 800349a:	f7ff fc8d 	bl	8002db8 <MC_GetSTMStateMotor1>
 800349e:	b918      	cbnz	r0, 80034a8 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80034a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80034a4:	f7ff bc4a 	b.w	8002d3c <MC_StartMotor1>
}
 80034a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80034ac:	f7ff bc4c 	b.w	8002d48 <MC_StopMotor1>

080034b0 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 80034b0:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034b2:	4a55      	ldr	r2, [pc, #340]	@ (8003608 <mc_lock_pins+0x158>)
 80034b4:	4855      	ldr	r0, [pc, #340]	@ (800360c <mc_lock_pins+0x15c>)
 80034b6:	4c56      	ldr	r4, [pc, #344]	@ (8003610 <mc_lock_pins+0x160>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034b8:	2604      	movs	r6, #4
 80034ba:	b094      	sub	sp, #80	@ 0x50
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034bc:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034be:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034c0:	61d0      	str	r0, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 80034c2:	69d3      	ldr	r3, [r2, #28]
 80034c4:	9313      	str	r3, [sp, #76]	@ 0x4c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034c6:	2702      	movs	r7, #2
  (void) temp;
 80034c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034ca:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034cc:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034ce:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80034d0:	69d3      	ldr	r3, [r2, #28]
 80034d2:	9312      	str	r3, [sp, #72]	@ 0x48
  (void) temp;
 80034d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034d6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034da:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 80034de:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034e0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034e2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80034e4:	69d1      	ldr	r1, [r2, #28]
 80034e6:	9111      	str	r1, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034e8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 80034ec:	9911      	ldr	r1, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034ee:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034f0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80034f4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80034f6:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80034f8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80034fa:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 80034fe:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
  (void) temp;
 8003502:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003506:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003508:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800350a:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800350c:	69d1      	ldr	r1, [r2, #28]
 800350e:	910f      	str	r1, [sp, #60]	@ 0x3c
  (void) temp;
 8003510:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003512:	4940      	ldr	r1, [pc, #256]	@ (8003614 <mc_lock_pins+0x164>)
 8003514:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003516:	2580      	movs	r5, #128	@ 0x80
 8003518:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800351a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800351c:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8003520:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 8003524:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003528:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800352a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800352c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800352e:	69dc      	ldr	r4, [r3, #28]
 8003530:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8003532:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003534:	4c38      	ldr	r4, [pc, #224]	@ (8003618 <mc_lock_pins+0x168>)
 8003536:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003538:	2708      	movs	r7, #8
 800353a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800353c:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800353e:	69dc      	ldr	r4, [r3, #28]
 8003540:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8003542:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003544:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003546:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003548:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800354a:	69d8      	ldr	r0, [r3, #28]
 800354c:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 800354e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003550:	4832      	ldr	r0, [pc, #200]	@ (800361c <mc_lock_pins+0x16c>)
 8003552:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003554:	2440      	movs	r4, #64	@ 0x40
 8003556:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003558:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800355a:	69de      	ldr	r6, [r3, #28]
 800355c:	960a      	str	r6, [sp, #40]	@ 0x28
  (void) temp;
 800355e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003560:	4e2f      	ldr	r6, [pc, #188]	@ (8003620 <mc_lock_pins+0x170>)
 8003562:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003564:	2720      	movs	r7, #32
 8003566:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003568:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800356a:	69de      	ldr	r6, [r3, #28]
 800356c:	9609      	str	r6, [sp, #36]	@ 0x24
  (void) temp;
 800356e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003570:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003572:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003574:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003576:	69d0      	ldr	r0, [r2, #28]
 8003578:	9008      	str	r0, [sp, #32]
  (void) temp;
 800357a:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800357c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800357e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003580:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003582:	69d1      	ldr	r1, [r2, #28]
 8003584:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003586:	f44f 7080 	mov.w	r0, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800358a:	4926      	ldr	r1, [pc, #152]	@ (8003624 <mc_lock_pins+0x174>)
  (void) temp;
 800358c:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800358e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003590:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8003592:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8003594:	69d9      	ldr	r1, [r3, #28]
 8003596:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8003598:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800359c:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 80035a0:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035a2:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035a4:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035a6:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80035a8:	69d9      	ldr	r1, [r3, #28]
 80035aa:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035ac:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035b0:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 80035b4:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035b6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035b8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035ba:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80035bc:	69d9      	ldr	r1, [r3, #28]
 80035be:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035c0:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035c4:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 80035c8:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035ca:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035cc:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035ce:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80035d0:	69db      	ldr	r3, [r3, #28]
 80035d2:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035d4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035d8:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 80035dc:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035de:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035e0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035e2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80035e4:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035e6:	4b10      	ldr	r3, [pc, #64]	@ (8003628 <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 80035e8:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035ea:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035ee:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 80035f2:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035f4:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80035f6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80035f8:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	9301      	str	r3, [sp, #4]
  (void) temp;
 80035fe:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8003600:	b014      	add	sp, #80	@ 0x50
 8003602:	bcf0      	pop	{r4, r5, r6, r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	48000400 	.word	0x48000400
 800360c:	00010004 	.word	0x00010004
 8003610:	00010002 	.word	0x00010002
 8003614:	00010080 	.word	0x00010080
 8003618:	00010008 	.word	0x00010008
 800361c:	00010040 	.word	0x00010040
 8003620:	00010020 	.word	0x00010020
 8003624:	00010100 	.word	0x00010100
 8003628:	48000800 	.word	0x48000800

0800362c <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 800362c:	b538      	push	{r3, r4, r5, lr}
 800362e:	eb00 1100 	add.w	r1, r0, r0, lsl #4
 8003632:	4b14      	ldr	r3, [pc, #80]	@ (8003684 <FOC_Clear+0x58>)

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8003634:	2400      	movs	r4, #0
 8003636:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 800363a:	f843 4011 	str.w	r4, [r3, r1, lsl #1]
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800363e:	4912      	ldr	r1, [pc, #72]	@ (8003688 <FOC_Clear+0x5c>)
  FOCVars[bMotor].Iab = NULL_ab;
 8003640:	6054      	str	r4, [r2, #4]
{
 8003642:	4605      	mov	r5, r0
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8003644:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
  FOCVars[bMotor].Iab = NULL_ab;
 8003648:	6094      	str	r4, [r2, #8]
 800364a:	60d4      	str	r4, [r2, #12]
  FOCVars[bMotor].Vqd = NULL_qd;
 800364c:	f8c2 4012 	str.w	r4, [r2, #18]
 8003650:	f8c2 4016 	str.w	r4, [r2, #22]
 8003654:	f8c2 401a 	str.w	r4, [r2, #26]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8003658:	4621      	mov	r1, r4
 800365a:	f006 fc21 	bl	8009ea0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800365e:	4b0b      	ldr	r3, [pc, #44]	@ (800368c <FOC_Clear+0x60>)
 8003660:	4621      	mov	r1, r4
 8003662:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003666:	f006 fc1b 	bl	8009ea0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 800366a:	4b09      	ldr	r3, [pc, #36]	@ (8003690 <FOC_Clear+0x64>)
 800366c:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8003670:	f000 fee8 	bl	8004444 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8003674:	4b07      	ldr	r3, [pc, #28]	@ (8003694 <FOC_Clear+0x68>)
 8003676:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 800367a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800367e:	f000 bdb9 	b.w	80041f4 <PWMC_SwitchOffPWM>
 8003682:	bf00      	nop
 8003684:	20000978 	.word	0x20000978
 8003688:	20000040 	.word	0x20000040
 800368c:	2000003c 	.word	0x2000003c
 8003690:	20000044 	.word	0x20000044
 8003694:	2000099c 	.word	0x2000099c

08003698 <FOC_Init>:
{
 8003698:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800369a:	4b2b      	ldr	r3, [pc, #172]	@ (8003748 <FOC_Init+0xb0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 800369c:	4e2b      	ldr	r6, [pc, #172]	@ (800374c <FOC_Init+0xb4>)
    ENC_Init (&ENCODER_M1);
 800369e:	4c2c      	ldr	r4, [pc, #176]	@ (8003750 <FOC_Init+0xb8>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80036a0:	482c      	ldr	r0, [pc, #176]	@ (8003754 <FOC_Init+0xbc>)
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80036a2:	4d2d      	ldr	r5, [pc, #180]	@ (8003758 <FOC_Init+0xc0>)
 80036a4:	4f2d      	ldr	r7, [pc, #180]	@ (800375c <FOC_Init+0xc4>)
{
 80036a6:	b083      	sub	sp, #12
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80036a8:	6018      	str	r0, [r3, #0]
    R3_2_Init(&PWM_Handle_M1);
 80036aa:	f006 fffb 	bl	800a6a4 <R3_2_Init>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80036ae:	4630      	mov	r0, r6
 80036b0:	f006 fbe2 	bl	8009e78 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 80036b4:	4620      	mov	r0, r4
 80036b6:	f006 f907 	bl	80098c8 <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 80036ba:	6829      	ldr	r1, [r5, #0]
 80036bc:	4a28      	ldr	r2, [pc, #160]	@ (8003760 <FOC_Init+0xc8>)
 80036be:	4623      	mov	r3, r4
 80036c0:	4638      	mov	r0, r7
 80036c2:	f006 f8b5 	bl	8009830 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 80036c6:	4b27      	ldr	r3, [pc, #156]	@ (8003764 <FOC_Init+0xcc>)
 80036c8:	601f      	str	r7, [r3, #0]
    PID_HandleInit(&PID_PosParamsM1);
 80036ca:	4f27      	ldr	r7, [pc, #156]	@ (8003768 <FOC_Init+0xd0>)
 80036cc:	4638      	mov	r0, r7
 80036ce:	f006 fbd3 	bl	8009e78 <PID_HandleInit>
    TC_Init(&PosCtrlM1, &PID_PosParamsM1, &SpeednTorqCtrlM1, &ENCODER_M1);
 80036d2:	4623      	mov	r3, r4
 80036d4:	4639      	mov	r1, r7
 80036d6:	4a25      	ldr	r2, [pc, #148]	@ (800376c <FOC_Init+0xd4>)
 80036d8:	4825      	ldr	r0, [pc, #148]	@ (8003770 <FOC_Init+0xd8>)
 80036da:	f007 fc77 	bl	800afcc <TC_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80036de:	4631      	mov	r1, r6
 80036e0:	4622      	mov	r2, r4
 80036e2:	6828      	ldr	r0, [r5, #0]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80036e4:	4c23      	ldr	r4, [pc, #140]	@ (8003774 <FOC_Init+0xdc>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 80036e6:	f000 fe95 	bl	8004414 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80036ea:	4823      	ldr	r0, [pc, #140]	@ (8003778 <FOC_Init+0xe0>)
 80036ec:	f006 fbc4 	bl	8009e78 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80036f0:	4822      	ldr	r0, [pc, #136]	@ (800377c <FOC_Init+0xe4>)
 80036f2:	f006 fbc1 	bl	8009e78 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80036f6:	4b22      	ldr	r3, [pc, #136]	@ (8003780 <FOC_Init+0xe8>)
 80036f8:	4a22      	ldr	r2, [pc, #136]	@ (8003784 <FOC_Init+0xec>)
 80036fa:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80036fc:	4822      	ldr	r0, [pc, #136]	@ (8003788 <FOC_Init+0xf0>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80036fe:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8003702:	4b22      	ldr	r3, [pc, #136]	@ (800378c <FOC_Init+0xf4>)
 8003704:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8003706:	f007 fc19 	bl	800af3c <REMNG_Init>
    FOC_Clear(M1);
 800370a:	2000      	movs	r0, #0
 800370c:	f7ff ff8e 	bl	800362c <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8003710:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003712:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8003714:	f884 3020 	strb.w	r3, [r4, #32]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003718:	f000 ff2a 	bl	8004570 <STC_GetDefaultIqdref>
 800371c:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8003720:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003722:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8003724:	81e2      	strh	r2, [r4, #14]
 8003726:	81a3      	strh	r3, [r4, #12]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003728:	f000 ff22 	bl	8004570 <STC_GetDefaultIqdref>
 800372c:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 8003730:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8003732:	8223      	strh	r3, [r4, #16]
    MCI_ExecSpeedRamp(&Mci[M1],
 8003734:	f000 ff18 	bl	8004568 <STC_GetMecSpeedRefUnitDefault>
 8003738:	4601      	mov	r1, r0
 800373a:	4815      	ldr	r0, [pc, #84]	@ (8003790 <FOC_Init+0xf8>)
 800373c:	2200      	movs	r2, #0
}
 800373e:	b003      	add	sp, #12
 8003740:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8003744:	f7ff bb44 	b.w	8002dd0 <MCI_ExecSpeedRamp>
 8003748:	2000099c 	.word	0x2000099c
 800374c:	20000230 	.word	0x20000230
 8003750:	2000030c 	.word	0x2000030c
 8003754:	20000064 	.word	0x20000064
 8003758:	20000044 	.word	0x20000044
 800375c:	200002f0 	.word	0x200002f0
 8003760:	200002b8 	.word	0x200002b8
 8003764:	200009a0 	.word	0x200009a0
 8003768:	200001ac 	.word	0x200001ac
 800376c:	20000104 	.word	0x20000104
 8003770:	2000013c 	.word	0x2000013c
 8003774:	20000978 	.word	0x20000978
 8003778:	20000204 	.word	0x20000204
 800377c:	200001d8 	.word	0x200001d8
 8003780:	20000038 	.word	0x20000038
 8003784:	2000026c 	.word	0x2000026c
 8003788:	2000004c 	.word	0x2000004c
 800378c:	20000974 	.word	0x20000974
 8003790:	20000008 	.word	0x20000008

08003794 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop

08003798 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8003798:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800379c:	4604      	mov	r4, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800379e:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 80037a0:	4e0f      	ldr	r6, [pc, #60]	@ (80037e0 <FOC_CalcCurrRef+0x48>)
 80037a2:	eb00 1500 	add.w	r5, r0, r0, lsl #4
 80037a6:	eb06 0545 	add.w	r5, r6, r5, lsl #1
 80037aa:	0107      	lsls	r7, r0, #4
 80037ac:	f9b5 800e 	ldrsh.w	r8, [r5, #14]
 80037b0:	f9b5 000c 	ldrsh.w	r0, [r5, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80037b4:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80037b6:	f895 3020 	ldrb.w	r3, [r5, #32]
 80037ba:	b14b      	cbz	r3, 80037d0 <FOC_CalcCurrRef+0x38>
  __ASM volatile ("cpsid i" : : : "memory");
 80037bc:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 80037be:	4427      	add	r7, r4
 80037c0:	eb06 0647 	add.w	r6, r6, r7, lsl #1
 80037c4:	81b0      	strh	r0, [r6, #12]
 80037c6:	f8a6 800e 	strh.w	r8, [r6, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 80037ca:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80037cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80037d0:	4b04      	ldr	r3, [pc, #16]	@ (80037e4 <FOC_CalcCurrRef+0x4c>)
 80037d2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80037d6:	f000 fe91 	bl	80044fc <STC_CalcTorqueReference>
 80037da:	8368      	strh	r0, [r5, #26]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 80037dc:	e7ee      	b.n	80037bc <FOC_CalcCurrRef+0x24>
 80037de:	bf00      	nop
 80037e0:	20000978 	.word	0x20000978
 80037e4:	20000044 	.word	0x20000044

080037e8 <TSK_MediumFrequencyTaskM1>:
{
 80037e8:	b570      	push	{r4, r5, r6, lr}
 80037ea:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80037ec:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80037ee:	f10d 0106 	add.w	r1, sp, #6
 80037f2:	489d      	ldr	r0, [pc, #628]	@ (8003a68 <TSK_MediumFrequencyTaskM1+0x280>)
  int16_t wAux = 0;
 80037f4:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80037f8:	f006 f8c8 	bl	800998c <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80037fc:	4b9b      	ldr	r3, [pc, #620]	@ (8003a6c <TSK_MediumFrequencyTaskM1+0x284>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80037fe:	4c9c      	ldr	r4, [pc, #624]	@ (8003a70 <TSK_MediumFrequencyTaskM1+0x288>)
  PQD_CalcElMotorPower(pMPM[M1]);
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	f006 fbdd 	bl	8009fc0 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003806:	4620      	mov	r0, r4
 8003808:	f7ff fb96 	bl	8002f38 <MCI_GetCurrentFaults>
 800380c:	b118      	cbz	r0, 8003816 <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 800380e:	230a      	movs	r3, #10
 8003810:	7063      	strb	r3, [r4, #1]
}
 8003812:	b002      	add	sp, #8
 8003814:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003816:	4620      	mov	r0, r4
 8003818:	f7ff fb8c 	bl	8002f34 <MCI_GetOccurredFaults>
 800381c:	bb80      	cbnz	r0, 8003880 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 800381e:	7863      	ldrb	r3, [r4, #1]
 8003820:	2b14      	cmp	r3, #20
 8003822:	d8f6      	bhi.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
 8003824:	a201      	add	r2, pc, #4	@ (adr r2, 800382c <TSK_MediumFrequencyTaskM1+0x44>)
 8003826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800382a:	bf00      	nop
 800382c:	080039d5 	.word	0x080039d5
 8003830:	08003813 	.word	0x08003813
 8003834:	08003983 	.word	0x08003983
 8003838:	08003813 	.word	0x08003813
 800383c:	08003813 	.word	0x08003813
 8003840:	08003813 	.word	0x08003813
 8003844:	08003967 	.word	0x08003967
 8003848:	08003813 	.word	0x08003813
 800384c:	0800395b 	.word	0x0800395b
 8003850:	08003813 	.word	0x08003813
 8003854:	08003881 	.word	0x08003881
 8003858:	0800394d 	.word	0x0800394d
 800385c:	08003813 	.word	0x08003813
 8003860:	08003813 	.word	0x08003813
 8003864:	08003813 	.word	0x08003813
 8003868:	08003813 	.word	0x08003813
 800386c:	08003901 	.word	0x08003901
 8003870:	080038cf 	.word	0x080038cf
 8003874:	08003813 	.word	0x08003813
 8003878:	08003813 	.word	0x08003813
 800387c:	08003889 	.word	0x08003889
      Mci[M1].State = FAULT_OVER;
 8003880:	230b      	movs	r3, #11
 8003882:	7063      	strb	r3, [r4, #1]
}
 8003884:	b002      	add	sp, #8
 8003886:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003888:	7823      	ldrb	r3, [r4, #0]
 800388a:	2b05      	cmp	r3, #5
 800388c:	f000 80b2 	beq.w	80039f4 <TSK_MediumFrequencyTaskM1+0x20c>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8003890:	f7ff fd32 	bl	80032f8 <TSK_StopPermanencyTimeHasElapsedM1>
 8003894:	2800      	cmp	r0, #0
 8003896:	d0bc      	beq.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 8003898:	4873      	ldr	r0, [pc, #460]	@ (8003a68 <TSK_MediumFrequencyTaskM1+0x280>)
 800389a:	f006 f84f 	bl	800993c <ENC_Clear>
              R3_2_SwitchOnPWM(pwmcHandle[M1]);
 800389e:	4b75      	ldr	r3, [pc, #468]	@ (8003a74 <TSK_MediumFrequencyTaskM1+0x28c>)
 80038a0:	6818      	ldr	r0, [r3, #0]
 80038a2:	f006 fd63 	bl	800a36c <R3_2_SwitchOnPWM>
              TC_EncAlignmentCommand(pPosCtrl[M1]);
 80038a6:	4b74      	ldr	r3, [pc, #464]	@ (8003a78 <TSK_MediumFrequencyTaskM1+0x290>)
 80038a8:	6818      	ldr	r0, [r3, #0]
 80038aa:	f007 fd3d 	bl	800b328 <TC_EncAlignmentCommand>
              FOC_InitAdditionalMethods(M1);
 80038ae:	2000      	movs	r0, #0
 80038b0:	f7ff ff70 	bl	8003794 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80038b4:	4b71      	ldr	r3, [pc, #452]	@ (8003a7c <TSK_MediumFrequencyTaskM1+0x294>)
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	f000 fe60 	bl	800457c <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80038bc:	486c      	ldr	r0, [pc, #432]	@ (8003a70 <TSK_MediumFrequencyTaskM1+0x288>)
 80038be:	f7ff fafb 	bl	8002eb8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 80038c2:	2000      	movs	r0, #0
 80038c4:	f7ff ff68 	bl	8003798 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 80038c8:	2306      	movs	r3, #6
 80038ca:	7063      	strb	r3, [r4, #1]
 80038cc:	e7a1      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80038ce:	7823      	ldrb	r3, [r4, #0]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80038d0:	4d68      	ldr	r5, [pc, #416]	@ (8003a74 <TSK_MediumFrequencyTaskM1+0x28c>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 80038d2:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80038d4:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 80038d6:	f000 808f 	beq.w	80039f8 <TSK_MediumFrequencyTaskM1+0x210>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80038da:	2101      	movs	r1, #1
 80038dc:	f000 fc8e 	bl	80041fc <PWMC_CurrentReadingCalibr>
 80038e0:	2800      	cmp	r0, #0
 80038e2:	d096      	beq.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80038e4:	7823      	ldrb	r3, [r4, #0]
 80038e6:	2b03      	cmp	r3, #3
 80038e8:	f000 80a2 	beq.w	8003a30 <TSK_MediumFrequencyTaskM1+0x248>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80038ec:	6828      	ldr	r0, [r5, #0]
 80038ee:	2100      	movs	r1, #0
 80038f0:	f006 fe08 	bl	800a504 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80038f4:	2014      	movs	r0, #20
 80038f6:	f7ff fce9 	bl	80032cc <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 80038fa:	2310      	movs	r3, #16
 80038fc:	7063      	strb	r3, [r4, #1]
 80038fe:	e788      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003900:	7823      	ldrb	r3, [r4, #0]
 8003902:	2b05      	cmp	r3, #5
 8003904:	d076      	beq.n	80039f4 <TSK_MediumFrequencyTaskM1+0x20c>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8003906:	f7ff fce7 	bl	80032d8 <TSK_ChargeBootCapDelayHasElapsedM1>
 800390a:	2800      	cmp	r0, #0
 800390c:	d081      	beq.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800390e:	4d59      	ldr	r5, [pc, #356]	@ (8003a74 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003910:	4e5a      	ldr	r6, [pc, #360]	@ (8003a7c <TSK_MediumFrequencyTaskM1+0x294>)
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8003912:	6828      	ldr	r0, [r5, #0]
 8003914:	f006 fe30 	bl	800a578 <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 8003918:	4b59      	ldr	r3, [pc, #356]	@ (8003a80 <TSK_MediumFrequencyTaskM1+0x298>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800391a:	495a      	ldr	r1, [pc, #360]	@ (8003a84 <TSK_MediumFrequencyTaskM1+0x29c>)
 800391c:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 800391e:	2201      	movs	r2, #1
 8003920:	f883 2020 	strb.w	r2, [r3, #32]
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003924:	f000 fd8c 	bl	8004440 <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 8003928:	484f      	ldr	r0, [pc, #316]	@ (8003a68 <TSK_MediumFrequencyTaskM1+0x280>)
 800392a:	f006 f807 	bl	800993c <ENC_Clear>
              FOC_Clear( M1 );
 800392e:	2000      	movs	r0, #0
 8003930:	f7ff fe7c 	bl	800362c <FOC_Clear>
static inline bool EAC_IsAligned(EncAlign_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 8003934:	4854      	ldr	r0, [pc, #336]	@ (8003a88 <TSK_MediumFrequencyTaskM1+0x2a0>)
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 8003936:	7b83      	ldrb	r3, [r0, #14]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d17f      	bne.n	8003a3c <TSK_MediumFrequencyTaskM1+0x254>
                EAC_StartAlignment(&EncAlignCtrlM1);
 800393c:	f005 ff80 	bl	8009840 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 8003940:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8003942:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 8003944:	7063      	strb	r3, [r4, #1]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8003946:	f000 fc57 	bl	80041f8 <PWMC_SwitchOnPWM>
 800394a:	e762      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 800394c:	7823      	ldrb	r3, [r4, #0]
 800394e:	2b02      	cmp	r3, #2
 8003950:	f47f af5f 	bne.w	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003954:	2300      	movs	r3, #0
 8003956:	8023      	strh	r3, [r4, #0]
 8003958:	e75b      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800395a:	f7ff fccd 	bl	80032f8 <TSK_StopPermanencyTimeHasElapsedM1>
 800395e:	2800      	cmp	r0, #0
 8003960:	f43f af57 	beq.w	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
 8003964:	e7f6      	b.n	8003954 <TSK_MediumFrequencyTaskM1+0x16c>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003966:	7823      	ldrb	r3, [r4, #0]
 8003968:	2b05      	cmp	r3, #5
 800396a:	d043      	beq.n	80039f4 <TSK_MediumFrequencyTaskM1+0x20c>
            TC_PositionRegulation(pPosCtrl[M1]);
 800396c:	4b42      	ldr	r3, [pc, #264]	@ (8003a78 <TSK_MediumFrequencyTaskM1+0x290>)
 800396e:	6818      	ldr	r0, [r3, #0]
 8003970:	f007 fc96 	bl	800b2a0 <TC_PositionRegulation>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8003974:	483e      	ldr	r0, [pc, #248]	@ (8003a70 <TSK_MediumFrequencyTaskM1+0x288>)
 8003976:	f7ff fa9f 	bl	8002eb8 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800397a:	2000      	movs	r0, #0
 800397c:	f7ff ff0c 	bl	8003798 <FOC_CalcCurrRef>
 8003980:	e747      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003982:	7823      	ldrb	r3, [r4, #0]
 8003984:	2b05      	cmp	r3, #5
 8003986:	d035      	beq.n	80039f4 <TSK_MediumFrequencyTaskM1+0x20c>
 8003988:	483f      	ldr	r0, [pc, #252]	@ (8003a88 <TSK_MediumFrequencyTaskM1+0x2a0>)
 800398a:	7b86      	ldrb	r6, [r0, #14]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 800398c:	f005 ff84 	bl	8009898 <EAC_Exec>
 8003990:	4605      	mov	r5, r0
            if ((isAligned == false)  && (EACDone == false))
 8003992:	b90e      	cbnz	r6, 8003998 <TSK_MediumFrequencyTaskM1+0x1b0>
 8003994:	2800      	cmp	r0, #0
 8003996:	d043      	beq.n	8003a20 <TSK_MediumFrequencyTaskM1+0x238>
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003998:	4e36      	ldr	r6, [pc, #216]	@ (8003a74 <TSK_MediumFrequencyTaskM1+0x28c>)
              STC_Clear(pSTC[M1]);
 800399a:	4d38      	ldr	r5, [pc, #224]	@ (8003a7c <TSK_MediumFrequencyTaskM1+0x294>)
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800399c:	6830      	ldr	r0, [r6, #0]
 800399e:	f006 fdeb 	bl	800a578 <R3_2_SwitchOffPWM>
              STC_Clear(pSTC[M1]);
 80039a2:	6828      	ldr	r0, [r5, #0]
 80039a4:	f000 fd4e 	bl	8004444 <STC_Clear>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80039a8:	6828      	ldr	r0, [r5, #0]
 80039aa:	2103      	movs	r1, #3
 80039ac:	f000 fd5a 	bl	8004464 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 80039b0:	492d      	ldr	r1, [pc, #180]	@ (8003a68 <TSK_MediumFrequencyTaskM1+0x280>)
 80039b2:	6828      	ldr	r0, [r5, #0]
 80039b4:	f000 fd44 	bl	8004440 <STC_SetSpeedSensor>
              FOC_Clear(M1);
 80039b8:	2000      	movs	r0, #0
 80039ba:	f7ff fe37 	bl	800362c <FOC_Clear>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80039be:	6830      	ldr	r0, [r6, #0]
 80039c0:	2100      	movs	r1, #0
 80039c2:	f006 fd9f 	bl	800a504 <R3_2_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80039c6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80039ca:	f7ff fc8f 	bl	80032ec <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 80039ce:	2314      	movs	r3, #20
 80039d0:	7063      	strb	r3, [r4, #1]
 80039d2:	e71e      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 80039d4:	7823      	ldrb	r3, [r4, #0]
 80039d6:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f47f af19 	bne.w	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 80039e0:	4d24      	ldr	r5, [pc, #144]	@ (8003a74 <TSK_MediumFrequencyTaskM1+0x28c>)
 80039e2:	6828      	ldr	r0, [r5, #0]
 80039e4:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 80039e8:	b991      	cbnz	r1, 8003a10 <TSK_MediumFrequencyTaskM1+0x228>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 80039ea:	f000 fc07 	bl	80041fc <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 80039ee:	2311      	movs	r3, #17
 80039f0:	7063      	strb	r3, [r4, #1]
 80039f2:	e70e      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
  R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80039f4:	4b1f      	ldr	r3, [pc, #124]	@ (8003a74 <TSK_MediumFrequencyTaskM1+0x28c>)
 80039f6:	6818      	ldr	r0, [r3, #0]
 80039f8:	f006 fdbe 	bl	800a578 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 80039fc:	2000      	movs	r0, #0
 80039fe:	f7ff fe15 	bl	800362c <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8003a02:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8003a06:	f7ff fc71 	bl	80032ec <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8003a0a:	2308      	movs	r3, #8
 8003a0c:	7063      	strb	r3, [r4, #1]
}
 8003a0e:	e700      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8003a10:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8003a12:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8003a16:	f000 fbf1 	bl	80041fc <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8003a1a:	6828      	ldr	r0, [r5, #0]
 8003a1c:	2100      	movs	r1, #0
 8003a1e:	e767      	b.n	80038f0 <TSK_MediumFrequencyTaskM1+0x108>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 8003a20:	4b16      	ldr	r3, [pc, #88]	@ (8003a7c <TSK_MediumFrequencyTaskM1+0x294>)
 8003a22:	6818      	ldr	r0, [r3, #0]
 8003a24:	f000 fd6a 	bl	80044fc <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 8003a28:	4b15      	ldr	r3, [pc, #84]	@ (8003a80 <TSK_MediumFrequencyTaskM1+0x298>)
 8003a2a:	819d      	strh	r5, [r3, #12]
 8003a2c:	81d8      	strh	r0, [r3, #14]
            {
 8003a2e:	e6f0      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 8003a30:	2000      	movs	r0, #0
 8003a32:	f7ff fdfb 	bl	800362c <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003a36:	2300      	movs	r3, #0
 8003a38:	8023      	strh	r3, [r4, #0]
 8003a3a:	e6ea      	b.n	8003812 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8003a3c:	6830      	ldr	r0, [r6, #0]
 8003a3e:	2103      	movs	r1, #3
 8003a40:	f000 fd10 	bl	8004464 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 8003a44:	4908      	ldr	r1, [pc, #32]	@ (8003a68 <TSK_MediumFrequencyTaskM1+0x280>)
 8003a46:	6830      	ldr	r0, [r6, #0]
 8003a48:	f000 fcfa 	bl	8004440 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7ff fea1 	bl	8003794 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 8003a52:	2000      	movs	r0, #0
 8003a54:	f7ff fea0 	bl	8003798 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8003a58:	6830      	ldr	r0, [r6, #0]
 8003a5a:	f000 fd8f 	bl	800457c <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8003a5e:	4804      	ldr	r0, [pc, #16]	@ (8003a70 <TSK_MediumFrequencyTaskM1+0x288>)
 8003a60:	f7ff fa2a 	bl	8002eb8 <MCI_ExecBufferedCommands>
 8003a64:	2306      	movs	r3, #6
 8003a66:	e76c      	b.n	8003942 <TSK_MediumFrequencyTaskM1+0x15a>
 8003a68:	2000030c 	.word	0x2000030c
 8003a6c:	20000038 	.word	0x20000038
 8003a70:	20000008 	.word	0x20000008
 8003a74:	2000099c 	.word	0x2000099c
 8003a78:	20000034 	.word	0x20000034
 8003a7c:	20000044 	.word	0x20000044
 8003a80:	20000978 	.word	0x20000978
 8003a84:	200002b8 	.word	0x200002b8
 8003a88:	200002f0 	.word	0x200002f0

08003a8c <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  * @param bMotorNbr Motor reference number defined
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8003a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a90:	b086      	sub	sp, #24
 8003a92:	4605      	mov	r5, r0
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  RCM_ReadOngoingConv();
 8003a94:	f000 fc9c 	bl	80043d0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8003a98:	f000 fc64 	bl	8004364 <RCM_ExecNextConv>

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8003a9c:	4837      	ldr	r0, [pc, #220]	@ (8003b7c <FOC_HighFrequencyTask+0xf0>)
  int16_t hElAngle;
  uint16_t hCodeError = MC_NO_FAULTS;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003a9e:	f8df 80f8 	ldr.w	r8, [pc, #248]	@ 8003b98 <FOC_HighFrequencyTask+0x10c>
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8003aa2:	f005 ff59 	bl	8009958 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8003aa6:	4b36      	ldr	r3, [pc, #216]	@ (8003b80 <FOC_HighFrequencyTask+0xf4>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003aa8:	f8d8 0000 	ldr.w	r0, [r8]
 8003aac:	681b      	ldr	r3, [r3, #0]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8003aae:	695a      	ldr	r2, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8003ab0:	6803      	ldr	r3, [r0, #0]
 8003ab2:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 8003ab6:	a903      	add	r1, sp, #12
 8003ab8:	4798      	blx	r3
  Ialphabeta = MCM_Clarke(Iab);
 8003aba:	9803      	ldr	r0, [sp, #12]
 8003abc:	f7ff fb24 	bl	8003108 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003ac0:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8003ac2:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003ac4:	f7ff fb5a 	bl	800317c <MCM_Park>
static inline bool PWMC_GetPWMState(PWMC_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? false : pHandle->PWMState);
#else
  return (pHandle->PWMState);
 8003ac8:	f8d8 3000 	ldr.w	r3, [r8]
 8003acc:	9001      	str	r0, [sp, #4]
  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 8003ace:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ad2:	bb23      	cbnz	r3, 8003b1e <FOC_HighFrequencyTask+0x92>
 8003ad4:	4c2b      	ldr	r4, [pc, #172]	@ (8003b84 <FOC_HighFrequencyTask+0xf8>)
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
  }
  else
  {
    Vqd.q = 0;
 8003ad6:	461f      	mov	r7, r3
    Vqd.d = 0;
  }
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8003ad8:	f8ad 300a 	strh.w	r3, [sp, #10]
 8003adc:	f8ad 7008 	strh.w	r7, [sp, #8]
 8003ae0:	9902      	ldr	r1, [sp, #8]
 8003ae2:	4829      	ldr	r0, [pc, #164]	@ (8003b88 <FOC_HighFrequencyTask+0xfc>)
 8003ae4:	f005 fe76 	bl	80097d4 <Circle_Limitation>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003ae8:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8003aea:	4607      	mov	r7, r0
 8003aec:	9002      	str	r0, [sp, #8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003aee:	f7ff fb87 	bl	8003200 <MCM_Rev_Park>
 8003af2:	4601      	mov	r1, r0

  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 8003af4:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8003af8:	9105      	str	r1, [sp, #20]
  if (PWMC_GetPWMState(pwmcHandle[M1]) == true)
 8003afa:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8003afe:	bb23      	cbnz	r3, 8003b4a <FOC_HighFrequencyTask+0xbe>
  {
    /* Nothing to do. No PWM setting to prevent possible ChargeBootCap conflict */
  }

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8003b00:	9803      	ldr	r0, [sp, #12]
 8003b02:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003b04:	9804      	ldr	r0, [sp, #16]
 8003b06:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8003b08:	9801      	ldr	r0, [sp, #4]
  FOCVars[M1].Vqd = Vqd;
 8003b0a:	f8c4 7012 	str.w	r7, [r4, #18]
  FOCVars[M1].Iqd = Iqd;
 8003b0e:	60a0      	str	r0, [r4, #8]
  FOCVars[M1].Valphabeta = Valphabeta;
 8003b10:	f8c4 1016 	str.w	r1, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8003b14:	83a6      	strh	r6, [r4, #28]
}
 8003b16:	4628      	mov	r0, r5
 8003b18:	b006      	add	sp, #24
 8003b1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003b1e:	4c19      	ldr	r4, [pc, #100]	@ (8003b84 <FOC_HighFrequencyTask+0xf8>)
 8003b20:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8003b24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 8003b28:	1ac9      	subs	r1, r1, r3
 8003b2a:	4b18      	ldr	r3, [pc, #96]	@ (8003b8c <FOC_HighFrequencyTask+0x100>)
 8003b2c:	6818      	ldr	r0, [r3, #0]
 8003b2e:	f006 f9e9 	bl	8009f04 <PI_Controller>
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003b32:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8003b36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b3a:	1ac9      	subs	r1, r1, r3
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <FOC_HighFrequencyTask+0x104>)
    Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003b3e:	4607      	mov	r7, r0
    Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	f006 f9df 	bl	8009f04 <PI_Controller>
 8003b46:	4603      	mov	r3, r0
 8003b48:	e7c6      	b.n	8003ad8 <FOC_HighFrequencyTask+0x4c>
    hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8003b4a:	f000 fa2f 	bl	8003fac <PWMC_SetPhaseVoltage>
 8003b4e:	4601      	mov	r1, r0
  FOCVars[M1].Iab = Iab;
 8003b50:	9803      	ldr	r0, [sp, #12]
 8003b52:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8003b54:	9804      	ldr	r0, [sp, #16]
 8003b56:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 8003b58:	9801      	ldr	r0, [sp, #4]
 8003b5a:	60a0      	str	r0, [r4, #8]
  if(hFOCreturn == MC_DURATION)
 8003b5c:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 8003b5e:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 8003b60:	f8c4 7012 	str.w	r7, [r4, #18]
  FOCVars[M1].Valphabeta = Valphabeta;
 8003b64:	f8c4 0016 	str.w	r0, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 8003b68:	83a6      	strh	r6, [r4, #28]
  if(hFOCreturn == MC_DURATION)
 8003b6a:	d1d4      	bne.n	8003b16 <FOC_HighFrequencyTask+0x8a>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8003b6c:	4809      	ldr	r0, [pc, #36]	@ (8003b94 <FOC_HighFrequencyTask+0x108>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f7ff f996 	bl	8002ea0 <MCI_FaultProcessing>
}
 8003b74:	4628      	mov	r0, r5
 8003b76:	b006      	add	sp, #24
 8003b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b7c:	2000030c 	.word	0x2000030c
 8003b80:	20000044 	.word	0x20000044
 8003b84:	20000978 	.word	0x20000978
 8003b88:	20000048 	.word	0x20000048
 8003b8c:	20000040 	.word	0x20000040
 8003b90:	2000003c 	.word	0x2000003c
 8003b94:	20000008 	.word	0x20000008
 8003b98:	2000099c 	.word	0x2000099c

08003b9c <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003b9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba0:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8003ba2:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8003ba4:	4b33      	ldr	r3, [pc, #204]	@ (8003c74 <RI_SetRegCommandParser+0xd8>)
 8003ba6:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8003ba8:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8003bac:	4b32      	ldr	r3, [pc, #200]	@ (8003c78 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 8003bae:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8003bb0:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 8003bb4:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8003bb8:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8003bba:	f8a0 800e 	strh.w	r8, [r0, #14]
 8003bbe:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 8003bc0:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8003bc4:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8003bc6:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003bca:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 8003bce:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003bd0:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003bd4:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003bd8:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8003bdc:	dd36      	ble.n	8003c4c <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 8003bde:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003be2:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 8003be6:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8003bea:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8003bee:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003bf2:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 8003bf4:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8003bf6:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003bfa:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8003bfe:	d12d      	bne.n	8003c5c <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003c00:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8003c04:	f8cd e000 	str.w	lr, [sp]
 8003c08:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8003c0a:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8003c0e:	eb05 0309 	add.w	r3, r5, r9
 8003c12:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8003c14:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003c18:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8003c1a:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8003c1c:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003c1e:	d012      	beq.n	8003c46 <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8003c20:	42bd      	cmp	r5, r7
 8003c22:	d021      	beq.n	8003c68 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 8003c24:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8003c28:	89f3      	ldrh	r3, [r6, #14]
 8003c2a:	3301      	adds	r3, #1
 8003c2c:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8003c2e:	2800      	cmp	r0, #0
 8003c30:	d0cb      	beq.n	8003bca <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003c32:	2807      	cmp	r0, #7
 8003c34:	d012      	beq.n	8003c5c <RI_SetRegCommandParser+0xc0>
 8003c36:	2301      	movs	r3, #1
 8003c38:	280a      	cmp	r0, #10
 8003c3a:	9303      	str	r3, [sp, #12]
 8003c3c:	d1c5      	bne.n	8003bca <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003c3e:	9803      	ldr	r0, [sp, #12]
 8003c40:	b009      	add	sp, #36	@ 0x24
 8003c42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8003c46:	2a00      	cmp	r2, #0
 8003c48:	d1ea      	bne.n	8003c20 <RI_SetRegCommandParser+0x84>
 8003c4a:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8003c4c:	9b03      	ldr	r3, [sp, #12]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f5      	bne.n	8003c3e <RI_SetRegCommandParser+0xa2>
}
 8003c52:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 8003c54:	81f3      	strh	r3, [r6, #14]
}
 8003c56:	b009      	add	sp, #36	@ 0x24
 8003c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	9303      	str	r3, [sp, #12]
}
 8003c60:	9803      	ldr	r0, [sp, #12]
 8003c62:	b009      	add	sp, #36	@ 0x24
 8003c64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003c68:	2308      	movs	r3, #8
 8003c6a:	9303      	str	r3, [sp, #12]
}
 8003c6c:	9803      	ldr	r0, [sp, #12]
 8003c6e:	b009      	add	sp, #36	@ 0x24
 8003c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c74:	08004eb9 	.word	0x08004eb9
 8003c78:	08004fb9 	.word	0x08004fb9

08003c7c <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c80:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8003c82:	2300      	movs	r3, #0
 8003c84:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8003c88:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8003c8a:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8003c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8003d00 <RI_GetRegCommandParser+0x84>)
 8003c90:	9304      	str	r3, [sp, #16]
 8003c92:	4b1c      	ldr	r3, [pc, #112]	@ (8003d04 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 8003c94:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8003c98:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8003c9a:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8003c9c:	f1b8 0f00 	cmp.w	r8, #0
 8003ca0:	d029      	beq.n	8003cf6 <RI_GetRegCommandParser+0x7a>
 8003ca2:	4607      	mov	r7, r0
 8003ca4:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8003ca6:	464d      	mov	r5, r9
 8003ca8:	e012      	b.n	8003cd0 <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003caa:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8003cae:	9400      	str	r4, [sp, #0]
 8003cb0:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8003cb2:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 8003cb6:	fa19 f383 	uxtah	r3, r9, r3
 8003cba:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8003cbc:	b9e0      	cbnz	r0, 8003cf8 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 8003cbe:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8003cc2:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8003cc4:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 8003cc6:	440a      	add	r2, r1
          txData = txData+size;
 8003cc8:	440e      	add	r6, r1
          pHandle->txLength += size;
 8003cca:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8003ccc:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8003cce:	b19b      	cbz	r3, 8003cf8 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 8003cd0:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003cd4:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 8003cd8:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8003cdc:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8003ce0:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003ce4:	f10d 030e 	add.w	r3, sp, #14
 8003ce8:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8003cea:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8003cec:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003cf0:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8003cf4:	d0d9      	beq.n	8003caa <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 8003cf6:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003cf8:	b006      	add	sp, #24
 8003cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003cfe:	bf00      	nop
 8003d00:	0800547d 	.word	0x0800547d
 8003d04:	080055b1 	.word	0x080055b1

08003d08 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8003d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d0a:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003d0c:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003d0e:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003d10:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003d14:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003d16:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003d18:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003d1c:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003d1e:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003d20:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003d24:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003d28:	b291      	uxth	r1, r2
{
 8003d2a:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003d2c:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003d2e:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003d32:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003d34:	d03c      	beq.n	8003db0 <MCP_ReceivedPacket+0xa8>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8003d36:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003d38:	f003 0307 	and.w	r3, r3, #7
 8003d3c:	4d54      	ldr	r5, [pc, #336]	@ (8003e90 <MCP_ReceivedPacket+0x188>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003d3e:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003d40:	eb03 0783 	add.w	r7, r3, r3, lsl #2
 8003d44:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 8003d48:	eb05 0783 	add.w	r7, r5, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;

    switch (command)
 8003d4c:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->txLength = 0U;
 8003d50:	f04f 0500 	mov.w	r5, #0
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8003d54:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8003d56:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8003d58:	d835      	bhi.n	8003dc6 <MCP_ReceivedPacket+0xbe>
 8003d5a:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8003d5e:	d81e      	bhi.n	8003d9e <MCP_ReceivedPacket+0x96>
 8003d60:	e8df f00c 	tbb	[pc, ip]
 8003d64:	1d1d1d6c 	.word	0x1d1d1d6c
 8003d68:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d6c:	1d1d1d74 	.word	0x1d1d1d74
 8003d70:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d74:	1d1d1d59 	.word	0x1d1d1d59
 8003d78:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d7c:	1d1d1d4b 	.word	0x1d1d1d4b
 8003d80:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d84:	1d1d1d53 	.word	0x1d1d1d53
 8003d88:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d8c:	1d1d1d5e 	.word	0x1d1d1d5e
 8003d90:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d94:	1d1d1d47 	.word	0x1d1d1d47
 8003d98:	1d1d1d1d 	.word	0x1d1d1d1d
 8003d9c:	66          	.byte	0x66
 8003d9d:	00          	.byte	0x00
 8003d9e:	2300      	movs	r3, #0
 8003da0:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003da2:	68a2      	ldr	r2, [r4, #8]
 8003da4:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8003da6:	89e3      	ldrh	r3, [r4, #14]
 8003da8:	3301      	adds	r3, #1
 8003daa:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8003dac:	b003      	add	sp, #12
 8003dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8003db0:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8003db4:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8003db6:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003dba:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8003dbc:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8003dbe:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8003dc0:	d951      	bls.n	8003e66 <MCP_ReceivedPacket+0x15e>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8003dc2:	200d      	movs	r0, #13
 8003dc4:	e7ed      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
    switch (command)
 8003dc6:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8003dca:	d009      	beq.n	8003de0 <MCP_ReceivedPacket+0xd8>
 8003dcc:	d843      	bhi.n	8003e56 <MCP_ReceivedPacket+0x14e>
 8003dce:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8003dd2:	d1e4      	bne.n	8003d9e <MCP_ReceivedPacket+0x96>
        MCI_Clear_Iqdref(pMCI);
 8003dd4:	4638      	mov	r0, r7
 8003dd6:	f7ff f98d 	bl	80030f4 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003dda:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003ddc:	4628      	mov	r0, r5
        break;
 8003dde:	e7e0      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8003de0:	68a3      	ldr	r3, [r4, #8]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	4631      	mov	r1, r6
 8003de6:	f104 030e 	add.w	r3, r4, #14
 8003dea:	f7fe ffeb 	bl	8002dc4 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003dee:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003df0:	e7d7      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        if (IDLE == MCI_GetSTMState(pMCI))
 8003df2:	4638      	mov	r0, r7
 8003df4:	f7ff f898 	bl	8002f28 <MCI_GetSTMState>
 8003df8:	b938      	cbnz	r0, 8003e0a <MCP_ReceivedPacket+0x102>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8003dfa:	4638      	mov	r0, r7
 8003dfc:	f7ff f89e 	bl	8002f3c <MCI_StartMotor>
 8003e00:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e04:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8003e06:	b2c0      	uxtb	r0, r0
 8003e08:	e7cb      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
          (void)MCI_StopMotor(pMCI);
 8003e0a:	4638      	mov	r0, r7
 8003e0c:	f7ff f8ac 	bl	8002f68 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e10:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003e12:	2000      	movs	r0, #0
 8003e14:	e7c5      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8003e16:	4620      	mov	r0, r4
 8003e18:	f7ff ff30 	bl	8003c7c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e1c:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003e1e:	e7c0      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        if (RUN == MCI_GetSTMState(pMCI))
 8003e20:	4638      	mov	r0, r7
 8003e22:	f7ff f881 	bl	8002f28 <MCI_GetSTMState>
 8003e26:	2806      	cmp	r0, #6
 8003e28:	d029      	beq.n	8003e7e <MCP_ReceivedPacket+0x176>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e2a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	e7b8      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        (void)MCI_FaultAcknowledged(pMCI);
 8003e30:	4638      	mov	r0, r7
 8003e32:	f7ff f8b5 	bl	8002fa0 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e36:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003e38:	2000      	movs	r0, #0
        break;
 8003e3a:	e7b2      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        *pHandle->txBuffer = MCP_VERSION;
 8003e3c:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8003e3e:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8003e40:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8003e42:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8003e44:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e46:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003e48:	2000      	movs	r0, #0
        break;
 8003e4a:	e7aa      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8003e4c:	4620      	mov	r0, r4
 8003e4e:	f7ff fea5 	bl	8003b9c <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e52:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003e54:	e7a5      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
    switch (command)
 8003e56:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 8003e5a:	d1a0      	bne.n	8003d9e <MCP_ReceivedPacket+0x96>
        HAL_NVIC_SystemReset();
 8003e5c:	f003 f806 	bl	8006e6c <HAL_NVIC_SystemReset>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e60:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003e62:	4628      	mov	r0, r5
        break;
 8003e64:	e79d      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8003e66:	4b0b      	ldr	r3, [pc, #44]	@ (8003e94 <MCP_ReceivedPacket+0x18c>)
 8003e68:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8003e6c:	b16d      	cbz	r5, 8003e8a <MCP_ReceivedPacket+0x182>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8003e6e:	68a3      	ldr	r3, [r4, #8]
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	4631      	mov	r1, r6
 8003e74:	f104 030e 	add.w	r3, r4, #14
 8003e78:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e7a:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8003e7c:	e791      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
          MCI_StopRamp(pMCI);
 8003e7e:	4638      	mov	r0, r7
 8003e80:	f7ff f8b2 	bl	8002fe8 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003e84:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003e86:	2000      	movs	r0, #0
 8003e88:	e78b      	b.n	8003da2 <MCP_ReceivedPacket+0x9a>
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	e799      	b.n	8003dc2 <MCP_ReceivedPacket+0xba>
 8003e8e:	bf00      	nop
 8003e90:	20000008 	.word	0x20000008
 8003e94:	200009ac 	.word	0x200009ac

08003e98 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8003e98:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8003e9a:	f004 fb81 	bl	80085a0 <HAL_RCC_GetHCLKFreq>
 8003e9e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ec8 <MX_MotorControl_Init+0x30>)
 8003ea0:	fba3 3000 	umull	r3, r0, r3, r0
 8003ea4:	09c0      	lsrs	r0, r0, #7
 8003ea6:	f002 fff3 	bl	8006e90 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8003eaa:	4b08      	ldr	r3, [pc, #32]	@ (8003ecc <MX_MotorControl_Init+0x34>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	6819      	ldr	r1, [r3, #0]
 8003eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb4:	f002 ff90 	bl	8006dd8 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8003eb8:	4805      	ldr	r0, [pc, #20]	@ (8003ed0 <MX_MotorControl_Init+0x38>)
 8003eba:	f7ff f9cf 	bl	800325c <MCboot>
  mc_lock_pins();
}
 8003ebe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8003ec2:	f7ff baf5 	b.w	80034b0 <mc_lock_pins>
 8003ec6:	bf00      	nop
 8003ec8:	10624dd3 	.word	0x10624dd3
 8003ecc:	20000484 	.word	0x20000484
 8003ed0:	20001c38 	.word	0x20001c38

08003ed4 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8003ed4:	4922      	ldr	r1, [pc, #136]	@ (8003f60 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8003ed6:	4a23      	ldr	r2, [pc, #140]	@ (8003f64 <startTimers+0x90>)
 8003ed8:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8003eda:	b410      	push	{r4}
 8003edc:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee4:	f043 0310 	orr.w	r3, r3, #16
 8003ee8:	b083      	sub	sp, #12
 8003eea:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8003eec:	688b      	ldr	r3, [r1, #8]
 8003eee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ef2:	f023 0307 	bic.w	r3, r3, #7
 8003ef6:	f043 0306 	orr.w	r3, r3, #6
 8003efa:	608b      	str	r3, [r1, #8]
 8003efc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003efe:	07db      	lsls	r3, r3, #31
 8003f00:	d416      	bmi.n	8003f30 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003f02:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003f04:	f043 0301 	orr.w	r3, r3, #1
 8003f08:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003f0a:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003f0c:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003f10:	f003 0301 	and.w	r3, r3, #1
 8003f14:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8003f16:	9b01      	ldr	r3, [sp, #4]
 8003f18:	694b      	ldr	r3, [r1, #20]
 8003f1a:	f043 0301 	orr.w	r3, r3, #1
 8003f1e:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003f20:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003f22:	f023 0301 	bic.w	r3, r3, #1
 8003f26:	6593      	str	r3, [r2, #88]	@ 0x58
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }

}
 8003f28:	b003      	add	sp, #12
 8003f2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f2e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8003f30:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003f34:	480c      	ldr	r0, [pc, #48]	@ (8003f68 <startTimers+0x94>)
 8003f36:	685a      	ldr	r2, [r3, #4]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	4c0c      	ldr	r4, [pc, #48]	@ (8003f6c <startTimers+0x98>)
 8003f3c:	4001      	ands	r1, r0
 8003f3e:	f041 0120 	orr.w	r1, r1, #32
 8003f42:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003f44:	6959      	ldr	r1, [r3, #20]
 8003f46:	f041 0101 	orr.w	r1, r1, #1
 8003f4a:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003f4c:	6859      	ldr	r1, [r3, #4]
 8003f4e:	4022      	ands	r2, r4
 8003f50:	4001      	ands	r1, r0
 8003f52:	430a      	orrs	r2, r1
 8003f54:	605a      	str	r2, [r3, #4]
}
 8003f56:	b003      	add	sp, #12
 8003f58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40012c00 	.word	0x40012c00
 8003f64:	40021000 	.word	0x40021000
 8003f68:	fdffff8f 	.word	0xfdffff8f
 8003f6c:	02000070 	.word	0x02000070

08003f70 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8003f70:	3201      	adds	r2, #1
{
 8003f72:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8003f74:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003f76:	f06f 0602 	mvn.w	r6, #2
 8003f7a:	0155      	lsls	r5, r2, #5
 8003f7c:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8003f7e:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8003f80:	f893 c000 	ldrb.w	ip, [r3]
 8003f84:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8003f88:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8003f8c:	d80c      	bhi.n	8003fa8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003f8e:	6904      	ldr	r4, [r0, #16]
 8003f90:	07a4      	lsls	r4, r4, #30
 8003f92:	d5f5      	bpl.n	8003f80 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8003f94:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8003f98:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8003f9a:	6106      	str	r6, [r0, #16]
 8003f9c:	d8f0      	bhi.n	8003f80 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8003f9e:	781c      	ldrb	r4, [r3, #0]
 8003fa0:	2c0f      	cmp	r4, #15
 8003fa2:	d8ed      	bhi.n	8003f80 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8003fa8:	bd70      	pop	{r4, r5, r6, pc}
 8003faa:	bf00      	nop

08003fac <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8003fac:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003fae:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
 8003fb2:	140b      	asrs	r3, r1, #16
 8003fb4:	fb04 f303 	mul.w	r3, r4, r3
 8003fb8:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
 8003fbc:	ea4f 0e43 	mov.w	lr, r3, lsl #1

    wX = wUBeta;
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8003fc0:	f343 7280 	sbfx	r2, r3, #30, #1
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003fc4:	f8b0 304e 	ldrh.w	r3, [r0, #78]	@ 0x4e
 8003fc8:	b209      	sxth	r1, r1
 8003fca:	fb03 f101 	mul.w	r1, r3, r1
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8003fce:	eb1e 0301 	adds.w	r3, lr, r1
    if (wY < 0)
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003fd2:	ea4f 0594 	mov.w	r5, r4, lsr #2
    wY = ((int64_t)wUBeta + wUAlpha)>>1;
 8003fd6:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8003fda:	eb42 74e1 	adc.w	r4, r2, r1, asr #31
    wZ = ((int64_t)wUBeta - wUAlpha)>>1;
 8003fde:	ebbe 0c01 	subs.w	ip, lr, r1
 8003fe2:	eb62 72e1 	sbc.w	r2, r2, r1, asr #31
 8003fe6:	ea4f 015c 	mov.w	r1, ip, lsr #1
    if (wY < 0)
 8003fea:	ea53 73c4 	orrs.w	r3, r3, r4, lsl #31
{
 8003fee:	b083      	sub	sp, #12
    wZ = ((int64_t)wUBeta - wUAlpha)>>1;
 8003ff0:	ea41 71c2 	orr.w	r1, r1, r2, lsl #31
    if (wY < 0)
 8003ff4:	d457      	bmi.n	80040a6 <PWMC_SetPhaseVoltage+0xfa>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	db35      	blt.n	8004066 <PWMC_SetPhaseVoltage+0xba>
      {
        pHandle->Sector = SECTOR_2;
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8004000:	1a5a      	subs	r2, r3, r1
 8004002:	bf44      	itt	mi
 8004004:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8004008:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
        wTimePhC = wTimePhA - (wY / 131072);
 800400c:	2b00      	cmp	r3, #0
 800400e:	bfb8      	it	lt
 8004010:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00

        if(true == pHandle->SingleShuntTopology)
 8004014:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8004018:	eb05 42a2 	add.w	r2, r5, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800401c:	bfb8      	it	lt
 800401e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8004022:	eb02 4161 	add.w	r1, r2, r1, asr #17
        wTimePhC = wTimePhA - (wY / 131072);
 8004026:	eba2 4363 	sub.w	r3, r2, r3, asr #17
        if(true == pHandle->SingleShuntTopology)
 800402a:	2c00      	cmp	r4, #0
 800402c:	d160      	bne.n	80040f0 <PWMC_SetPhaseVoltage+0x144>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800402e:	fa1f fc81 	uxth.w	ip, r1
        pHandle->midDuty = (uint16_t)wTimePhA;
 8004032:	b295      	uxth	r5, r2
        pHandle->highDuty = (uint16_t)wTimePhC;
 8004034:	b29c      	uxth	r4, r3
            pHandle->highDuty = 2U;
 8004036:	f8a0 405c 	strh.w	r4, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800403a:	6944      	ldr	r4, [r0, #20]
            pHandle->lowDuty = 0U;
 800403c:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8004040:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8004044:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8004048:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800404c:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8004050:	4623      	mov	r3, r4
            pHandle->midDuty = 1U;
 8004052:	f8a0 505a 	strh.w	r5, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8004056:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 800405a:	f8a0 1052 	strh.w	r1, [r0, #82]	@ 0x52
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800405e:	b003      	add	sp, #12
 8004060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8004064:	4718      	bx	r3
        if ( wX <= 0 )
 8004066:	f1be 0f00 	cmp.w	lr, #0
 800406a:	dd67      	ble.n	800413c <PWMC_SetPhaseVoltage+0x190>
          pHandle->Sector = SECTOR_1;
 800406c:	2300      	movs	r3, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800406e:	ebae 0201 	sub.w	r2, lr, r1
          pHandle->Sector = SECTOR_1;
 8004072:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhA + (wZ / 131072);
 8004076:	f501 33ff 	add.w	r3, r1, #130560	@ 0x1fe00
 800407a:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800407e:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8004082:	f890 407d 	ldrb.w	r4, [r0, #125]	@ 0x7d
          wTimePhB = wTimePhA + (wZ / 131072);
 8004086:	eb02 4163 	add.w	r1, r2, r3, asr #17
          wTimePhC = wTimePhB - (wX / 131072);
 800408a:	eba1 436e 	sub.w	r3, r1, lr, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 800408e:	2c00      	cmp	r4, #0
 8004090:	f040 809b 	bne.w	80041ca <PWMC_SetPhaseVoltage+0x21e>
 8004094:	f890 5086 	ldrb.w	r5, [r0, #134]	@ 0x86
 8004098:	2d00      	cmp	r5, #0
 800409a:	f000 80a5 	beq.w	80041e8 <PWMC_SetPhaseVoltage+0x23c>
 800409e:	f04f 0c02 	mov.w	ip, #2
 80040a2:	2501      	movs	r5, #1
 80040a4:	e7c7      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
      if (wZ < 0)
 80040a6:	2900      	cmp	r1, #0
        if(true == pHandle->SingleShuntTopology)
 80040a8:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
      if (wZ < 0)
 80040ac:	db61      	blt.n	8004172 <PWMC_SetPhaseVoltage+0x1c6>
        if (wX <= 0)
 80040ae:	f1be 0f00 	cmp.w	lr, #0
 80040b2:	dd22      	ble.n	80040fa <PWMC_SetPhaseVoltage+0x14e>
          pHandle->Sector = SECTOR_3;
 80040b4:	2202      	movs	r2, #2
 80040b6:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80040ba:	ebb3 020e 	subs.w	r2, r3, lr
 80040be:	bf44      	itt	mi
 80040c0:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 80040c4:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	bfb8      	it	lt
 80040cc:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80040d0:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80040d4:	bfb8      	it	lt
 80040d6:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80040da:	eba2 4363 	sub.w	r3, r2, r3, asr #17
          wTimePhB = wTimePhC + (wX / 131072);
 80040de:	eb03 416e 	add.w	r1, r3, lr, asr #17
          if(true == pHandle->SingleShuntTopology)
 80040e2:	2c00      	cmp	r4, #0
 80040e4:	d16c      	bne.n	80041c0 <PWMC_SetPhaseVoltage+0x214>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80040e6:	fa1f fc81 	uxth.w	ip, r1
          pHandle->midDuty = (uint16_t)wTimePhC;
 80040ea:	b29d      	uxth	r5, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 80040ec:	b294      	uxth	r4, r2
 80040ee:	e7a2      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
 80040f0:	f04f 0c02 	mov.w	ip, #2
 80040f4:	2500      	movs	r5, #0
 80040f6:	2401      	movs	r4, #1
 80040f8:	e79d      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80040fa:	ebbe 0201 	subs.w	r2, lr, r1
 80040fe:	bf48      	it	mi
 8004100:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8004104:	f04f 0303 	mov.w	r3, #3
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8004108:	bf48      	it	mi
 800410a:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800410e:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8004112:	f1be 0300 	subs.w	r3, lr, #0
 8004116:	bfb8      	it	lt
 8004118:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800411c:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8004120:	eb02 4161 	add.w	r1, r2, r1, asr #17
          wTimePhC = wTimePhB - (wX / 131072);
 8004124:	bfb8      	it	lt
 8004126:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800412a:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 800412e:	2c00      	cmp	r4, #0
 8004130:	d055      	beq.n	80041de <PWMC_SetPhaseVoltage+0x232>
 8004132:	f04f 0c00 	mov.w	ip, #0
 8004136:	2501      	movs	r5, #1
 8004138:	2402      	movs	r4, #2
 800413a:	e77c      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
          pHandle->Sector = SECTOR_6;
 800413c:	f04f 0205 	mov.w	r2, #5
 8004140:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8004144:	eba3 020e 	sub.w	r2, r3, lr
          wTimePhB = wTimePhC + (wX / 131072);
 8004148:	4671      	mov	r1, lr
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800414a:	eb05 42a2 	add.w	r2, r5, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 800414e:	bfb8      	it	lt
 8004150:	f50e 31ff 	addlt.w	r1, lr, #130560	@ 0x1fe00
          if(true == pHandle->SingleShuntTopology)
 8004154:	f890 4086 	ldrb.w	r4, [r0, #134]	@ 0x86
          wTimePhC = wTimePhA - (wY / 131072);
 8004158:	eba2 4363 	sub.w	r3, r2, r3, asr #17
          wTimePhB = wTimePhC + (wX / 131072);
 800415c:	bfb8      	it	lt
 800415e:	f201 11ff 	addwlt	r1, r1, #511	@ 0x1ff
 8004162:	eb03 4161 	add.w	r1, r3, r1, asr #17
          if(true == pHandle->SingleShuntTopology)
 8004166:	b3ac      	cbz	r4, 80041d4 <PWMC_SetPhaseVoltage+0x228>
 8004168:	f04f 0c01 	mov.w	ip, #1
 800416c:	2502      	movs	r5, #2
 800416e:	2400      	movs	r4, #0
 8004170:	e761      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
        pHandle->Sector = SECTOR_5;
 8004172:	2204      	movs	r2, #4
 8004174:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8004178:	1a5a      	subs	r2, r3, r1
 800417a:	bf44      	itt	mi
 800417c:	f502 327f 	addmi.w	r2, r2, #261120	@ 0x3fc00
 8004180:	f202 32ff 	addwmi	r2, r2, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8004184:	2900      	cmp	r1, #0
 8004186:	bfbc      	itt	lt
 8004188:	f501 31ff 	addlt.w	r1, r1, #130560	@ 0x1fe00
 800418c:	f201 11ff 	addwlt	r1, r1, #511	@ 0x1ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8004190:	2b00      	cmp	r3, #0
 8004192:	bfb8      	it	lt
 8004194:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8004198:	eb05 42a2 	add.w	r2, r5, r2, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 800419c:	bfb8      	it	lt
 800419e:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80041a2:	eb02 4161 	add.w	r1, r2, r1, asr #17
        wTimePhC = wTimePhA - (wY / 131072) ;
 80041a6:	eba2 4363 	sub.w	r3, r2, r3, asr #17
        if(true == pHandle->SingleShuntTopology)
 80041aa:	b924      	cbnz	r4, 80041b6 <PWMC_SetPhaseVoltage+0x20a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80041ac:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhA;
 80041b0:	b295      	uxth	r5, r2
          pHandle->highDuty = (uint16_t)wTimePhB;
 80041b2:	b28c      	uxth	r4, r1
 80041b4:	e73f      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
 80041b6:	f04f 0c01 	mov.w	ip, #1
 80041ba:	2500      	movs	r5, #0
 80041bc:	2402      	movs	r4, #2
 80041be:	e73a      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
 80041c0:	f04f 0c00 	mov.w	ip, #0
 80041c4:	2502      	movs	r5, #2
 80041c6:	2401      	movs	r4, #1
 80041c8:	e735      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
 80041ca:	f04f 0c02 	mov.w	ip, #2
 80041ce:	2501      	movs	r5, #1
 80041d0:	2400      	movs	r4, #0
 80041d2:	e730      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80041d4:	fa1f fc82 	uxth.w	ip, r2
            pHandle->midDuty = (uint16_t)wTimePhC;
 80041d8:	b29d      	uxth	r5, r3
            pHandle->highDuty = (uint16_t)wTimePhB;
 80041da:	b28c      	uxth	r4, r1
 80041dc:	e72b      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80041de:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhB;
 80041e2:	b28d      	uxth	r5, r1
          pHandle->highDuty = (uint16_t)wTimePhA;
 80041e4:	b294      	uxth	r4, r2
 80041e6:	e726      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80041e8:	fa1f fc82 	uxth.w	ip, r2
            pHandle->midDuty = (uint16_t)wTimePhB;
 80041ec:	b28d      	uxth	r5, r1
            pHandle->highDuty = (uint16_t)wTimePhC;
 80041ee:	b29c      	uxth	r4, r3
 80041f0:	e721      	b.n	8004036 <PWMC_SetPhaseVoltage+0x8a>
 80041f2:	bf00      	nop

080041f4 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 80041f4:	6843      	ldr	r3, [r0, #4]
 80041f6:	4718      	bx	r3

080041f8 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 80041f8:	6883      	ldr	r3, [r0, #8]
 80041fa:	4718      	bx	r3

080041fc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80041fc:	b510      	push	{r4, lr}
 80041fe:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8004200:	b179      	cbz	r1, 8004222 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8004202:	2901      	cmp	r1, #1
 8004204:	d001      	beq.n	800420a <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8004206:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8004208:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800420a:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 800420e:	b16b      	cbz	r3, 800422c <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8004210:	3b01      	subs	r3, #1
 8004212:	b29b      	uxth	r3, r3
 8004214:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1f4      	bne.n	8004206 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 800421c:	68c3      	ldr	r3, [r0, #12]
 800421e:	4798      	blx	r3
          retVal = true;
 8004220:	e004      	b.n	800422c <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8004222:	f7ff ffe7 	bl	80041f4 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8004226:	68e3      	ldr	r3, [r4, #12]
 8004228:	4620      	mov	r0, r4
 800422a:	4798      	blx	r3
      retVal = true;
 800422c:	2001      	movs	r0, #1
}
 800422e:	bd10      	pop	{r4, pc}

08004230 <PWMC_OCP_Handler>:
  * @brief  Manages HW overcurrent protection.
  *
  * @param  pHandle: Handler of the current instance of the PWM component.
  */
__weak void *PWMC_OCP_Handler(PWMC_Handle_t *pHandle)
{
 8004230:	b510      	push	{r4, lr}
 8004232:	4604      	mov	r4, r0
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    PWMC_SwitchOffPWM(pHandle);
 8004234:	f7ff ffde 	bl	80041f4 <PWMC_SwitchOffPWM>
    pHandle->OverCurrentFlag = true;
 8004238:	2301      	movs	r3, #1
 800423a:	f884 3080 	strb.w	r3, [r4, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 800423e:	f104 0078 	add.w	r0, r4, #120	@ 0x78
 8004242:	bd10      	pop	{r4, pc}

08004244 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8004244:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8004246:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8004248:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800424c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004250:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8004252:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8004254:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8004258:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 800425c:	4770      	bx	lr
 800425e:	bf00      	nop

08004260 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8004260:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8004262:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8004266:	b1a8      	cbz	r0, 8004294 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 800426e:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8004270:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8004272:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8004276:	b11a      	cbz	r2, 8004280 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 800427e:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8004280:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8004284:	b12a      	cbz	r2, 8004292 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8004286:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 800428a:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 800428c:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 800428e:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8004292:	4770      	bx	lr
 8004294:	2140      	movs	r1, #64	@ 0x40
 8004296:	e7ec      	b.n	8004272 <PWMC_IsFaultOccurred+0x12>

08004298 <RCM_RegisterRegConv>:
  }
  else
  {
#endif

    if (RCM_conversion_nb < RCM_MAX_CONV)
 8004298:	492f      	ldr	r1, [pc, #188]	@ (8004358 <RCM_RegisterRegConv+0xc0>)
 800429a:	780a      	ldrb	r2, [r1, #0]
 800429c:	2a03      	cmp	r2, #3
 800429e:	d856      	bhi.n	800434e <RCM_RegisterRegConv+0xb6>
{
 80042a0:	b510      	push	{r4, lr}
    {
      RCM_handle_array[RCM_conversion_nb] = regConv;
 80042a2:	4c2e      	ldr	r4, [pc, #184]	@ (800435c <RCM_RegisterRegConv+0xc4>)
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
      RCM_conversion_nb++;

      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80042a4:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array[RCM_conversion_nb] = regConv;
 80042a6:	f844 0022 	str.w	r0, [r4, r2, lsl #2]
      RCM_handle_array[RCM_conversion_nb]->id = RCM_conversion_nb;
 80042aa:	7302      	strb	r2, [r0, #12]
      RCM_conversion_nb++;
 80042ac:	3201      	adds	r2, #1
 80042ae:	700a      	strb	r2, [r1, #0]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80042b0:	689a      	ldr	r2, [r3, #8]
 80042b2:	07d4      	lsls	r4, r2, #31
 80042b4:	d422      	bmi.n	80042fc <RCM_RegisterRegConv+0x64>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80042b6:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80042b8:	2104      	movs	r1, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80042c0:	6019      	str	r1, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80042c2:	685a      	ldr	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80042c4:	2120      	movs	r1, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80042c6:	f022 0220 	bic.w	r2, r2, #32
 80042ca:	605a      	str	r2, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80042cc:	6019      	str	r1, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80042ce:	689a      	ldr	r2, [r3, #8]
 80042d0:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 80042d4:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80042d8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80042dc:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80042de:	689a      	ldr	r2, [r3, #8]
 80042e0:	2a00      	cmp	r2, #0
 80042e2:	dbfc      	blt.n	80042de <RCM_RegisterRegConv+0x46>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	07d1      	lsls	r1, r2, #31
 80042e8:	d408      	bmi.n	80042fc <RCM_RegisterRegConv+0x64>
  MODIFY_REG(ADCx->CR,
 80042ea:	491d      	ldr	r1, [pc, #116]	@ (8004360 <RCM_RegisterRegConv+0xc8>)
 80042ec:	689a      	ldr	r2, [r3, #8]
 80042ee:	400a      	ands	r2, r1
 80042f0:	f042 0201 	orr.w	r2, r2, #1
 80042f4:	609a      	str	r2, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	07d2      	lsls	r2, r2, #31
 80042fa:	d5f7      	bpl.n	80042ec <RCM_RegisterRegConv+0x54>
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80042fc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80042fe:	f021 010f 	bic.w	r1, r1, #15
 8004302:	6319      	str	r1, [r3, #48]	@ 0x30
      {
        /* Nothing to do */
      }
      LL_ADC_REG_SetSequencerLength(regConv->regADC, LL_ADC_REG_SEQ_SCAN_DISABLE);
      /* Configure the sampling time (should already be configured by for non user conversions) */
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004304:	7a01      	ldrb	r1, [r0, #8]
 8004306:	2201      	movs	r2, #1
 8004308:	408a      	lsls	r2, r1
 800430a:	2909      	cmp	r1, #9
 800430c:	ea42 6281 	orr.w	r2, r2, r1, lsl #26
 8004310:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8004314:	d91d      	bls.n	8004352 <RCM_RegisterRegConv+0xba>
 8004316:	f1ac 0c1e 	sub.w	ip, ip, #30
 800431a:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 800431e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004322:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 8004326:	f00c 0c04 	and.w	ip, ip, #4
 800432a:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800432c:	6840      	ldr	r0, [r0, #4]
 800432e:	f853 100c 	ldr.w	r1, [r3, ip]
 8004332:	f3c2 5204 	ubfx	r2, r2, #20, #5
 8004336:	f04f 0e07 	mov.w	lr, #7
 800433a:	4090      	lsls	r0, r2
 800433c:	fa0e f202 	lsl.w	r2, lr, r2
 8004340:	ea21 0202 	bic.w	r2, r1, r2
 8004344:	4302      	orrs	r2, r0
 8004346:	f843 200c 	str.w	r2, [r3, ip]
  bool retVal = true;
 800434a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  return retVal;
}
 800434c:	bd10      	pop	{r4, pc}
      retVal = false;
 800434e:	2000      	movs	r0, #0
}
 8004350:	4770      	bx	lr
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004352:	ea42 520c 	orr.w	r2, r2, ip, lsl #20
 8004356:	e7e4      	b.n	8004322 <RCM_RegisterRegConv+0x8a>
 8004358:	20001c3c 	.word	0x20001c3c
 800435c:	20001c40 	.word	0x20001c40
 8004360:	7fffffc0 	.word	0x7fffffc0

08004364 <RCM_ExecNextConv>:
 *
 * @note: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (RCM_conversion_nb > 0u)
 8004364:	4b17      	ldr	r3, [pc, #92]	@ (80043c4 <RCM_ExecNextConv+0x60>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	b353      	cbz	r3, 80043c0 <RCM_ExecNextConv+0x5c>
  {

    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 800436a:	4b17      	ldr	r3, [pc, #92]	@ (80043c8 <RCM_ExecNextConv+0x64>)
 800436c:	4a17      	ldr	r2, [pc, #92]	@ (80043cc <RCM_ExecNextConv+0x68>)
 800436e:	7819      	ldrb	r1, [r3, #0]
 8004370:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 8004374:	7a11      	ldrb	r1, [r2, #8]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 8004376:	6812      	ldr	r2, [r2, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 8004378:	2301      	movs	r3, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 800437a:	2909      	cmp	r1, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_array_index]->channel));
 800437c:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8004380:	fa03 f301 	lsl.w	r3, r3, r1
 8004384:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
 8004388:	bf84      	itt	hi
 800438a:	381e      	subhi	r0, #30
 800438c:	ea43 5300 	orrhi.w	r3, r3, r0, lsl #20
  MODIFY_REG(*preg,
 8004390:	6b11      	ldr	r1, [r2, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_array_index]->regADC,
 8004392:	bf94      	ite	ls
 8004394:	ea43 5300 	orrls.w	r3, r3, r0, lsl #20
 8004398:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
 800439c:	0d1b      	lsrs	r3, r3, #20
 800439e:	f421 61f8 	bic.w	r1, r1, #1984	@ 0x7c0
 80043a2:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 80043a6:	430b      	orrs	r3, r1
 80043a8:	6313      	str	r3, [r2, #48]	@ 0x30
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80043aa:	2304      	movs	r3, #4
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 80043ac:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 80043ae:	6013      	str	r3, [r2, #0]
  MODIFY_REG(ADCx->CR,
 80043b0:	6893      	ldr	r3, [r2, #8]
 80043b2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80043b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80043ba:	f043 0304 	orr.w	r3, r3, #4
 80043be:	6093      	str	r3, [r2, #8]
  }
  else
  {
     /* no conversion registered */
  }
}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	20001c3c 	.word	0x20001c3c
 80043c8:	20001c3d 	.word	0x20001c3d
 80043cc:	20001c40 	.word	0x20001c40

080043d0 <RCM_ReadOngoingConv>:
 */
void RCM_ReadOngoingConv(void)
{
  uint32_t result;

  if (RCM_conversion_nb > 0u)
 80043d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004408 <RCM_ReadOngoingConv+0x38>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	b1b3      	cbz	r3, 8004404 <RCM_ReadOngoingConv+0x34>
{
 80043d6:	b430      	push	{r4, r5}
  {
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_array_index]->regADC);
 80043d8:	490c      	ldr	r1, [pc, #48]	@ (800440c <RCM_ReadOngoingConv+0x3c>)
 80043da:	480d      	ldr	r0, [pc, #52]	@ (8004410 <RCM_ReadOngoingConv+0x40>)
 80043dc:	780a      	ldrb	r2, [r1, #0]
 80043de:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 80043e2:	6804      	ldr	r4, [r0, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	076d      	lsls	r5, r5, #29
 80043e8:	d503      	bpl.n	80043f2 <RCM_ReadOngoingConv+0x22>
 80043ea:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 80043ec:	f024 040f 	bic.w	r4, r4, #15
    }
    else
    {
      /* Reading of ADC Converted Value */
      RCM_handle_array[RCM_array_index]->data
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_array_index]->regADC);
 80043f0:	8144      	strh	r4, [r0, #10]
    }

    /* Prepare next conversion */
    if (RCM_array_index == (RCM_conversion_nb - 1U))
 80043f2:	3b01      	subs	r3, #1
 80043f4:	429a      	cmp	r2, r3
    {
      RCM_array_index = 0U;
 80043f6:	bf0b      	itete	eq
 80043f8:	2300      	moveq	r3, #0
    }
    else
    {
      RCM_array_index++;
 80043fa:	3201      	addne	r2, #1
      RCM_array_index = 0U;
 80043fc:	700b      	strbeq	r3, [r1, #0]
      RCM_array_index++;
 80043fe:	700a      	strbne	r2, [r1, #0]
  }
  else
  {
     /* no conversion registered */
  }
}
 8004400:	bc30      	pop	{r4, r5}
 8004402:	4770      	bx	lr
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	20001c3c 	.word	0x20001c3c
 800440c:	20001c3d 	.word	0x20001c3d
 8004410:	20001c40 	.word	0x20001c40

08004414 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 8004414:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8004416:	f9b0 c030 	ldrsh.w	ip, [r0, #48]	@ 0x30
    pHandle->PISpeed = pPI;
 800441a:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800441c:	f9b0 1032 	ldrsh.w	r1, [r0, #50]	@ 0x32
    pHandle->Mode = pHandle->ModeDefault;
 8004420:	f890 402e 	ldrb.w	r4, [r0, #46]	@ 0x2e
 8004424:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8004426:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8004428:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800442c:	0409      	lsls	r1, r1, #16
 800442e:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 8004432:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004434:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 8004438:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800443a:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800443c:	61c3      	str	r3, [r0, #28]
}
 800443e:	4770      	bx	lr

08004440 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8004440:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004442:	4770      	bx	lr

08004444 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8004444:	7803      	ldrb	r3, [r0, #0]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d004      	beq.n	8004454 <STC_Clear+0x10>
    {
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
    else if (MCM_TORQUE_MODE == pHandle->Mode)
 800444a:	2b04      	cmp	r3, #4
    {
      pHandle->TorqueRef = 0U;
 800444c:	bf04      	itt	eq
 800444e:	2300      	moveq	r3, #0
 8004450:	6083      	streq	r3, [r0, #8]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 8004452:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8004454:	6900      	ldr	r0, [r0, #16]
 8004456:	2100      	movs	r1, #0
 8004458:	f005 bd22 	b.w	8009ea0 <PID_SetIntegralTerm>

0800445c <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800445c:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8004464:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8004466:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 8004468:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800446a:	4770      	bx	lr

0800446c <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800446c:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800446e:	7803      	ldrb	r3, [r0, #0]
 8004470:	2b04      	cmp	r3, #4
 8004472:	d019      	beq.n	80044a8 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8004474:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
 8004478:	458c      	cmp	ip, r1
 800447a:	da03      	bge.n	8004484 <STC_ExecRamp+0x18>
 800447c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800447e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004482:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8004484:	f9b0 4028 	ldrsh.w	r4, [r0, #40]	@ 0x28
 8004488:	428c      	cmp	r4, r1
 800448a:	dcf7      	bgt.n	800447c <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800448c:	8c84      	ldrh	r4, [r0, #36]	@ 0x24
 800448e:	428c      	cmp	r4, r1
 8004490:	dd03      	ble.n	800449a <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8004492:	f9b0 4026 	ldrsh.w	r4, [r0, #38]	@ 0x26
 8004496:	428c      	cmp	r4, r1
 8004498:	dbf0      	blt.n	800447c <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800449a:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800449c:	b9aa      	cbnz	r2, 80044ca <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800449e:	2b03      	cmp	r3, #3
 80044a0:	d10a      	bne.n	80044b8 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 80044a2:	0409      	lsls	r1, r1, #16
 80044a4:	6041      	str	r1, [r0, #4]
 80044a6:	e009      	b.n	80044bc <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 80044a8:	8d43      	ldrh	r3, [r0, #42]	@ 0x2a
 80044aa:	428b      	cmp	r3, r1
 80044ac:	dbe6      	blt.n	800447c <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 80044ae:	f9b0 302c 	ldrsh.w	r3, [r0, #44]	@ 0x2c
 80044b2:	428b      	cmp	r3, r1
 80044b4:	dce2      	bgt.n	800447c <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 80044b6:	b9e2      	cbnz	r2, 80044f2 <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 80044b8:	0409      	lsls	r1, r1, #16
 80044ba:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 80044c0:	61c3      	str	r3, [r0, #28]
{
 80044c2:	2001      	movs	r0, #1
}
 80044c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80044c8:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 80044ca:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80044ce:	8c03      	ldrh	r3, [r0, #32]
        wAux /= 1000U;
 80044d0:	4c09      	ldr	r4, [pc, #36]	@ (80044f8 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 80044d2:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 80044d4:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 80044d8:	fba4 4303 	umull	r4, r3, r4, r3
 80044dc:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 80044de:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 80044e0:	eba1 0c0c 	sub.w	ip, r1, ip
 80044e4:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 80044e8:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 80044ea:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 80044ee:	61c2      	str	r2, [r0, #28]
 80044f0:	e7e7      	b.n	80044c2 <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 80044f2:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80044f6:	e7ea      	b.n	80044ce <STC_ExecRamp+0x62>
 80044f8:	10624dd3 	.word	0x10624dd3

080044fc <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80044fc:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 80044fe:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 8004500:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004502:	2a04      	cmp	r2, #4
{
 8004504:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8004506:	d012      	beq.n	800452e <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 8004508:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800450a:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800450c:	d908      	bls.n	8004520 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800450e:	69c1      	ldr	r1, [r0, #28]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8004510:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8004512:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8004514:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 8004516:	2a03      	cmp	r2, #3
 8004518:	d011      	beq.n	800453e <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800451a:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800451c:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800451e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8004520:	d1f9      	bne.n	8004516 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8004522:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8004526:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8004528:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800452a:	60c3      	str	r3, [r0, #12]
 800452c:	e7f3      	b.n	8004516 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800452e:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 8004530:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 8004532:	d911      	bls.n	8004558 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 8004534:	69c2      	ldr	r2, [r0, #28]
      pHandle->RampRemainingStep--;
 8004536:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8004538:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800453a:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800453c:	e7ed      	b.n	800451a <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800453e:	6960      	ldr	r0, [r4, #20]
 8004540:	f006 fd06 	bl	800af50 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8004544:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8004548:	b209      	sxth	r1, r1
 800454a:	6920      	ldr	r0, [r4, #16]
 800454c:	f005 fcda 	bl	8009f04 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 8004550:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8004552:	0405      	lsls	r5, r0, #16
 8004554:	60a5      	str	r5, [r4, #8]
}
 8004556:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8004558:	d1df      	bne.n	800451a <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800455a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800455e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8004560:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 8004562:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 8004564:	e7d9      	b.n	800451a <STC_CalcTorqueReference+0x1e>
 8004566:	bf00      	nop

08004568 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8004568:	f9b0 0030 	ldrsh.w	r0, [r0, #48]	@ 0x30
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop

08004570 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 8004570:	f8d0 0032 	ldr.w	r0, [r0, #50]	@ 0x32
{
 8004574:	b082      	sub	sp, #8
}
 8004576:	b002      	add	sp, #8
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop

0800457c <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800457c:	b510      	push	{r4, lr}
 800457e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8004580:	6940      	ldr	r0, [r0, #20]
 8004582:	f006 fce5 	bl	800af50 <SPD_GetAvrgMecSpeedUnit>
 8004586:	0400      	lsls	r0, r0, #16
 8004588:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800458a:	bd10      	pop	{r4, pc}

0800458c <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE(ENCODER_M1.TIMx) != 0U)
 800458c:	4806      	ldr	r0, [pc, #24]	@ (80045a8 <TIM4_IRQHandler+0x1c>)
 800458e:	6a03      	ldr	r3, [r0, #32]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004590:	68da      	ldr	r2, [r3, #12]
 8004592:	07d1      	lsls	r1, r2, #31
 8004594:	d507      	bpl.n	80045a6 <TIM4_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004596:	691a      	ldr	r2, [r3, #16]
 8004598:	07d2      	lsls	r2, r2, #31
 800459a:	d504      	bpl.n	80045a6 <TIM4_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800459c:	f06f 0201 	mvn.w	r2, #1
 80045a0:	611a      	str	r2, [r3, #16]
  {
    if (LL_TIM_IsActiveFlag_UPDATE(ENCODER_M1.TIMx) != 0U)
    {
      LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
      (void)ENC_IRQHandler(&ENCODER_M1);
 80045a2:	f005 badd 	b.w	8009b60 <ENC_IRQHandler>
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 80045a6:	4770      	bx	lr
 80045a8:	2000030c 	.word	0x2000030c

080045ac <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80045ac:	4b44      	ldr	r3, [pc, #272]	@ (80046c0 <USART2_IRQHandler+0x114>)
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 80045b2:	b510      	push	{r4, lr}
 80045b4:	d509      	bpl.n	80045ca <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80045b6:	4943      	ldr	r1, [pc, #268]	@ (80046c4 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 80045b8:	4843      	ldr	r0, [pc, #268]	@ (80046c8 <USART2_IRQHandler+0x11c>)
 80045ba:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80045bc:	2440      	movs	r4, #64	@ 0x40
 80045be:	f022 0201 	bic.w	r2, r2, #1
 80045c2:	61ca      	str	r2, [r1, #28]
 80045c4:	621c      	str	r4, [r3, #32]
 80045c6:	f7fd fd17 	bl	8001ff8 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80045ca:	4b3d      	ldr	r3, [pc, #244]	@ (80046c0 <USART2_IRQHandler+0x114>)
 80045cc:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80045ce:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80045d0:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80045d2:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 80045d4:	074c      	lsls	r4, r1, #29
 80045d6:	d56a      	bpl.n	80046ae <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80045d8:	07d8      	lsls	r0, r3, #31
 80045da:	d51e      	bpl.n	800461a <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 80045dc:	4b38      	ldr	r3, [pc, #224]	@ (80046c0 <USART2_IRQHandler+0x114>)
 80045de:	220e      	movs	r2, #14
 80045e0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045e2:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80045e6:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80045ea:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 80045ee:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f2:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80045f6:	e840 3100 	strex	r1, r3, [r0]
 80045fa:	2900      	cmp	r1, #0
 80045fc:	d1f3      	bne.n	80045e6 <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fe:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004602:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004606:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800460a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460e:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004612:	e840 3100 	strex	r1, r3, [r0]
 8004616:	2900      	cmp	r1, #0
 8004618:	d1f3      	bne.n	8004602 <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800461a:	4b29      	ldr	r3, [pc, #164]	@ (80046c0 <USART2_IRQHandler+0x114>)
 800461c:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800461e:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004620:	06d2      	lsls	r2, r2, #27
 8004622:	d543      	bpl.n	80046ac <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004624:	06db      	lsls	r3, r3, #27
 8004626:	d541      	bpl.n	80046ac <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004628:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800462c:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004630:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004634:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004638:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 800463c:	e840 3100 	strex	r1, r3, [r0]
 8004640:	2900      	cmp	r1, #0
 8004642:	d1f3      	bne.n	800462c <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004648:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800464c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004650:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004658:	e840 3100 	strex	r1, r3, [r0]
 800465c:	2900      	cmp	r1, #0
 800465e:	d1f3      	bne.n	8004648 <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004660:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004664:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004668:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 800466c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004670:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004674:	e840 3100 	strex	r1, r3, [r0]
 8004678:	2900      	cmp	r1, #0
 800467a:	d1f3      	bne.n	8004664 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 800467c:	4b10      	ldr	r3, [pc, #64]	@ (80046c0 <USART2_IRQHandler+0x114>)
 800467e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004680:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004684:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004688:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800468c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004690:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004694:	e840 3100 	strex	r1, r3, [r0]
 8004698:	2900      	cmp	r1, #0
 800469a:	d1f3      	bne.n	8004684 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 800469c:	4b09      	ldr	r3, [pc, #36]	@ (80046c4 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 800469e:	480a      	ldr	r0, [pc, #40]	@ (80046c8 <USART2_IRQHandler+0x11c>)
 80046a0:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80046a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80046a6:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 80046a8:	f7fd be9c 	b.w	80023e4 <ASPEP_HWReset>
}
 80046ac:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80046ae:	07d9      	lsls	r1, r3, #31
 80046b0:	d5b3      	bpl.n	800461a <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80046b2:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 80046b6:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 80046ba:	4302      	orrs	r2, r0
 80046bc:	d18e      	bne.n	80045dc <USART2_IRQHandler+0x30>
 80046be:	e7ac      	b.n	800461a <USART2_IRQHandler+0x6e>
 80046c0:	40004400 	.word	0x40004400
 80046c4:	40020000 	.word	0x40020000
 80046c8:	200003f0 	.word	0x200003f0

080046cc <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 80046cc:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 80046ce:	f7fe fed5 	bl	800347c <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 80046d2:	e7fe      	b.n	80046d2 <HardFault_Handler+0x6>

080046d4 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 80046d4:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80046d6:	4c0e      	ldr	r4, [pc, #56]	@ (8004710 <SysTick_Handler+0x3c>)
 80046d8:	7823      	ldrb	r3, [r4, #0]
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d012      	beq.n	8004704 <SysTick_Handler+0x30>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 80046de:	3301      	adds	r3, #1
 80046e0:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 80046e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004714 <SysTick_Handler+0x40>)
 80046e4:	7023      	strb	r3, [r4, #0]
 80046e6:	6813      	ldr	r3, [r2, #0]
 80046e8:	079b      	lsls	r3, r3, #30
 80046ea:	d504      	bpl.n	80046f6 <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80046ec:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 80046ee:	480a      	ldr	r0, [pc, #40]	@ (8004718 <SysTick_Handler+0x44>)
 80046f0:	6053      	str	r3, [r2, #4]
 80046f2:	f7fd fe27 	bl	8002344 <ASPEP_HWDataReceivedIT>
  }
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */

    MC_RunMotorControlTasks();
 80046f6:	f7fe fe79 	bl	80033ec <MC_RunMotorControlTasks>
    TC_IncTick(&PosCtrlM1);

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 80046fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    TC_IncTick(&PosCtrlM1);
 80046fe:	4807      	ldr	r0, [pc, #28]	@ (800471c <SysTick_Handler+0x48>)
 8004700:	f006 bed0 	b.w	800b4a4 <TC_IncTick>
    HAL_IncTick();
 8004704:	f001 fbb2 	bl	8005e6c <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004708:	f002 fbde 	bl	8006ec8 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 800470c:	2301      	movs	r3, #1
 800470e:	e7e8      	b.n	80046e2 <SysTick_Handler+0xe>
 8004710:	20000478 	.word	0x20000478
 8004714:	40020000 	.word	0x40020000
 8004718:	200003f0 	.word	0x200003f0
 800471c:	2000013c 	.word	0x2000013c

08004720 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004720:	4b04      	ldr	r3, [pc, #16]	@ (8004734 <EXTI15_10_IRQHandler+0x14>)
 8004722:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (0U != LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8004724:	0552      	lsls	r2, r2, #21
 8004726:	d400      	bmi.n	800472a <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8004728:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800472a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800472e:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8004730:	f7fe beb2 	b.w	8003498 <UI_HandleStartStopButton_cb>
 8004734:	40010400 	.word	0x40010400

08004738 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004738:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800473a:	4b0e      	ldr	r3, [pc, #56]	@ (8004774 <HAL_MspInit+0x3c>)
 800473c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800473e:	f042 0201 	orr.w	r2, r2, #1
{
 8004742:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004744:	661a      	str	r2, [r3, #96]	@ 0x60
 8004746:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004748:	f002 0201 	and.w	r2, r2, #1
 800474c:	9200      	str	r2, [sp, #0]
 800474e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004750:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004752:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004756:	659a      	str	r2, [r3, #88]	@ 0x58
 8004758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800475e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004760:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8004762:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004764:	f002 fb26 	bl	8006db4 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004768:	b003      	add	sp, #12
 800476a:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 800476e:	f003 bb8d 	b.w	8007e8c <HAL_PWREx_DisableUCPDDeadBattery>
 8004772:	bf00      	nop
 8004774:	40021000 	.word	0x40021000

08004778 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004778:	b510      	push	{r4, lr}
 800477a:	4604      	mov	r4, r0
 800477c:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800477e:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004780:	2244      	movs	r2, #68	@ 0x44
 8004782:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004784:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004788:	e9cd 1108 	strd	r1, r1, [sp, #32]
 800478c:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800478e:	f006 fedb 	bl	800b548 <memset>
  if(hadc->Instance==ADC1)
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004798:	d004      	beq.n	80047a4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 800479a:	4a43      	ldr	r2, [pc, #268]	@ (80048a8 <HAL_ADC_MspInit+0x130>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d046      	beq.n	800482e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80047a0:	b01c      	add	sp, #112	@ 0x70
 80047a2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80047a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80047a8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047ac:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80047ae:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80047b0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047b2:	f003 ff27 	bl	8008604 <HAL_RCCEx_PeriphCLKConfig>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d16a      	bne.n	8004890 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047ba:	4a3c      	ldr	r2, [pc, #240]	@ (80048ac <HAL_ADC_MspInit+0x134>)
 80047bc:	6813      	ldr	r3, [r2, #0]
 80047be:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047c0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80047c2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80047c4:	d109      	bne.n	80047da <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80047c6:	4b3a      	ldr	r3, [pc, #232]	@ (80048b0 <HAL_ADC_MspInit+0x138>)
 80047c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80047ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80047d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80047d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047d6:	9301      	str	r3, [sp, #4]
 80047d8:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047da:	4b35      	ldr	r3, [pc, #212]	@ (80048b0 <HAL_ADC_MspInit+0x138>)
 80047dc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047de:	f042 0201 	orr.w	r2, r2, #1
 80047e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80047e4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047e6:	f002 0201 	and.w	r2, r2, #1
 80047ea:	9202      	str	r2, [sp, #8]
 80047ec:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047f0:	f042 0202 	orr.w	r2, r2, #2
 80047f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80047f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 80047f8:	2005      	movs	r0, #5
 80047fa:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047fc:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8004800:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004804:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004806:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004808:	a906      	add	r1, sp, #24
 800480a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800480e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004810:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004812:	f003 f883 	bl	800791c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004816:	f244 0202 	movw	r2, #16386	@ 0x4002
 800481a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800481c:	4825      	ldr	r0, [pc, #148]	@ (80048b4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004820:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004822:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004826:	f003 f879 	bl	800791c <HAL_GPIO_Init>
}
 800482a:	b01c      	add	sp, #112	@ 0x70
 800482c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800482e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004832:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004836:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004838:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800483a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800483c:	f003 fee2 	bl	8008604 <HAL_RCCEx_PeriphCLKConfig>
 8004840:	bb48      	cbnz	r0, 8004896 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004842:	4a1a      	ldr	r2, [pc, #104]	@ (80048ac <HAL_ADC_MspInit+0x134>)
 8004844:	6813      	ldr	r3, [r2, #0]
 8004846:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004848:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800484a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800484c:	d109      	bne.n	8004862 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800484e:	4b18      	ldr	r3, [pc, #96]	@ (80048b0 <HAL_ADC_MspInit+0x138>)
 8004850:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004852:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004856:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004858:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800485e:	9304      	str	r3, [sp, #16]
 8004860:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004862:	4b13      	ldr	r3, [pc, #76]	@ (80048b0 <HAL_ADC_MspInit+0x138>)
 8004864:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004866:	f042 0201 	orr.w	r2, r2, #1
 800486a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800486c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 800486e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80048a0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004872:	f003 0301 	and.w	r3, r3, #1
 8004876:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004878:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 800487c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8004880:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004884:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004886:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004888:	f003 f848 	bl	800791c <HAL_GPIO_Init>
}
 800488c:	b01c      	add	sp, #112	@ 0x70
 800488e:	bd10      	pop	{r4, pc}
      Error_Handler();
 8004890:	f7fe fa52 	bl	8002d38 <Error_Handler>
 8004894:	e791      	b.n	80047ba <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8004896:	f7fe fa4f 	bl	8002d38 <Error_Handler>
 800489a:	e7d2      	b.n	8004842 <HAL_ADC_MspInit+0xca>
 800489c:	f3af 8000 	nop.w
 80048a0:	00000040 	.word	0x00000040
 80048a4:	00000003 	.word	0x00000003
 80048a8:	50000100 	.word	0x50000100
 80048ac:	20001c50 	.word	0x20001c50
 80048b0:	40021000 	.word	0x40021000
 80048b4:	48000400 	.word	0x48000400

080048b8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80048b8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80048ba:	6802      	ldr	r2, [r0, #0]
 80048bc:	4934      	ldr	r1, [pc, #208]	@ (8004990 <HAL_COMP_MspInit+0xd8>)
{
 80048be:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c0:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80048c2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80048c8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80048cc:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80048ce:	d008      	beq.n	80048e2 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 80048d0:	4b30      	ldr	r3, [pc, #192]	@ (8004994 <HAL_COMP_MspInit+0xdc>)
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d01e      	beq.n	8004914 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 80048d6:	4b30      	ldr	r3, [pc, #192]	@ (8004998 <HAL_COMP_MspInit+0xe0>)
 80048d8:	429a      	cmp	r2, r3
 80048da:	d034      	beq.n	8004946 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 80048dc:	b00b      	add	sp, #44	@ 0x2c
 80048de:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048e2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80048e6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 80048ea:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8004978 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80048f0:	f042 0201 	orr.w	r2, r2, #1
 80048f4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80048f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048f8:	f003 0301 	and.w	r3, r3, #1
 80048fc:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 80048fe:	a904      	add	r1, sp, #16
 8004900:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004904:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004908:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800490a:	f003 f807 	bl	800791c <HAL_GPIO_Init>
}
 800490e:	b00b      	add	sp, #44	@ 0x2c
 8004910:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004914:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004918:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800491c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800491e:	f042 0201 	orr.w	r2, r2, #1
 8004922:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004924:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004926:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004980 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800492a:	f003 0301 	and.w	r3, r3, #1
 800492e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004930:	a904      	add	r1, sp, #16
 8004932:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004936:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800493a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800493c:	f002 ffee 	bl	800791c <HAL_GPIO_Init>
}
 8004940:	b00b      	add	sp, #44	@ 0x2c
 8004942:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004946:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800494a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800494e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004950:	4812      	ldr	r0, [pc, #72]	@ (800499c <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004952:	f042 0202 	orr.w	r2, r2, #2
 8004956:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004958:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800495a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8004988 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004964:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004966:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800496a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800496c:	f002 ffd6 	bl	800791c <HAL_GPIO_Init>
}
 8004970:	b00b      	add	sp, #44	@ 0x2c
 8004972:	f85d fb04 	ldr.w	pc, [sp], #4
 8004976:	bf00      	nop
 8004978:	00000002 	.word	0x00000002
 800497c:	00000003 	.word	0x00000003
 8004980:	00000080 	.word	0x00000080
 8004984:	00000003 	.word	0x00000003
 8004988:	00000001 	.word	0x00000001
 800498c:	00000003 	.word	0x00000003
 8004990:	40010200 	.word	0x40010200
 8004994:	40010204 	.word	0x40010204
 8004998:	4001020c 	.word	0x4001020c
 800499c:	48000400 	.word	0x48000400

080049a0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80049a0:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_CORDIC_MspInit+0x28>)
 80049a2:	6802      	ldr	r2, [r0, #0]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d000      	beq.n	80049aa <HAL_CORDIC_MspInit+0xa>
 80049a8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80049aa:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80049ae:	f042 0208 	orr.w	r2, r2, #8
{
 80049b2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80049b4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80049b8:	649a      	str	r2, [r3, #72]	@ 0x48
 80049ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049bc:	f003 0308 	and.w	r3, r3, #8
 80049c0:	9301      	str	r3, [sp, #4]
 80049c2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80049c4:	b002      	add	sp, #8
 80049c6:	4770      	bx	lr
 80049c8:	40020c00 	.word	0x40020c00

080049cc <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 80049cc:	4b0a      	ldr	r3, [pc, #40]	@ (80049f8 <HAL_DAC_MspInit+0x2c>)
 80049ce:	6802      	ldr	r2, [r0, #0]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d000      	beq.n	80049d6 <HAL_DAC_MspInit+0xa>
 80049d4:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 80049d6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 80049da:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 80049de:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 80049e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049e2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80049e6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80049e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80049ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 80049f2:	b002      	add	sp, #8
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	50001000 	.word	0x50001000

080049fc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80049fc:	b5d0      	push	{r4, r6, r7, lr}
 80049fe:	4604      	mov	r4, r0
 8004a00:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a02:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a04:	2244      	movs	r2, #68	@ 0x44
 8004a06:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a08:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004a0c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004a10:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a12:	f006 fd99 	bl	800b548 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004a16:	4b2f      	ldr	r3, [pc, #188]	@ (8004ad4 <HAL_FDCAN_MspInit+0xd8>)
 8004a18:	6822      	ldr	r2, [r4, #0]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d001      	beq.n	8004a22 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004a1e:	b01a      	add	sp, #104	@ 0x68
 8004a20:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a22:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004a26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a2a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004a2c:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004a2e:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a30:	f003 fde8 	bl	8008604 <HAL_RCCEx_PeriphCLKConfig>
 8004a34:	2800      	cmp	r0, #0
 8004a36:	d149      	bne.n	8004acc <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004a38:	4b27      	ldr	r3, [pc, #156]	@ (8004ad8 <HAL_FDCAN_MspInit+0xdc>)
 8004a3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a3c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004a40:	659a      	str	r2, [r3, #88]	@ 0x58
 8004a42:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004a44:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a4e:	f042 0201 	orr.w	r2, r2, #1
 8004a52:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004a54:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a56:	f002 0201 	and.w	r2, r2, #1
 8004a5a:	9202      	str	r2, [sp, #8]
 8004a5c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a60:	f042 0202 	orr.w	r2, r2, #2
 8004a64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a68:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004a6c:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a6e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a72:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a76:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a78:	2600      	movs	r6, #0
 8004a7a:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a7c:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7e:	a904      	add	r1, sp, #16
 8004a80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a84:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a86:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004a88:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a8c:	f002 ff46 	bl	800791c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a90:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a92:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a94:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a98:	4810      	ldr	r0, [pc, #64]	@ (8004adc <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004a9a:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004a9c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004aa0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004aa4:	f002 ff3a 	bl	800791c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	4611      	mov	r1, r2
 8004aac:	2015      	movs	r0, #21
 8004aae:	f002 f993 	bl	8006dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004ab2:	2015      	movs	r0, #21
 8004ab4:	f002 f9cc 	bl	8006e50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8004ab8:	2200      	movs	r2, #0
 8004aba:	4611      	mov	r1, r2
 8004abc:	2016      	movs	r0, #22
 8004abe:	f002 f98b 	bl	8006dd8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004ac2:	2016      	movs	r0, #22
 8004ac4:	f002 f9c4 	bl	8006e50 <HAL_NVIC_EnableIRQ>
}
 8004ac8:	b01a      	add	sp, #104	@ 0x68
 8004aca:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8004acc:	f7fe f934 	bl	8002d38 <Error_Handler>
 8004ad0:	e7b2      	b.n	8004a38 <HAL_FDCAN_MspInit+0x3c>
 8004ad2:	bf00      	nop
 8004ad4:	40006400 	.word	0x40006400
 8004ad8:	40021000 	.word	0x40021000
 8004adc:	48000400 	.word	0x48000400

08004ae0 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004ae0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8004ae2:	6802      	ldr	r2, [r0, #0]
 8004ae4:	4934      	ldr	r1, [pc, #208]	@ (8004bb8 <HAL_OPAMP_MspInit+0xd8>)
{
 8004ae6:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ae8:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8004aea:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aec:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004af0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004af4:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8004af6:	d008      	beq.n	8004b0a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8004af8:	4b30      	ldr	r3, [pc, #192]	@ (8004bbc <HAL_OPAMP_MspInit+0xdc>)
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d01e      	beq.n	8004b3c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8004afe:	4b30      	ldr	r3, [pc, #192]	@ (8004bc0 <HAL_OPAMP_MspInit+0xe0>)
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d033      	beq.n	8004b6c <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004b04:	b00b      	add	sp, #44	@ 0x2c
 8004b06:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b0a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b0e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8004b12:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8004ba0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b18:	f042 0201 	orr.w	r2, r2, #1
 8004b1c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b20:	f003 0301 	and.w	r3, r3, #1
 8004b24:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b26:	a904      	add	r1, sp, #16
 8004b28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8004b2c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b30:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b32:	f002 fef3 	bl	800791c <HAL_GPIO_Init>
}
 8004b36:	b00b      	add	sp, #44	@ 0x2c
 8004b38:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b3c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004b40:	33fc      	adds	r3, #252	@ 0xfc
 8004b42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b44:	f042 0201 	orr.w	r2, r2, #1
 8004b48:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8004b4c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004ba8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b50:	f003 0301 	and.w	r3, r3, #1
 8004b54:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b56:	a904      	add	r1, sp, #16
 8004b58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8004b5c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b60:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b62:	f002 fedb 	bl	800791c <HAL_GPIO_Init>
}
 8004b66:	b00b      	add	sp, #44	@ 0x2c
 8004b68:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b6c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004b70:	33f8      	adds	r3, #248	@ 0xf8
 8004b72:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b74:	4813      	ldr	r0, [pc, #76]	@ (8004bc4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b76:	f042 0202 	orr.w	r2, r2, #2
 8004b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004b7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8004bb0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b88:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004b8a:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8e:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b90:	f002 fec4 	bl	800791c <HAL_GPIO_Init>
}
 8004b94:	b00b      	add	sp, #44	@ 0x2c
 8004b96:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b9a:	bf00      	nop
 8004b9c:	f3af 8000 	nop.w
 8004ba0:	0000000e 	.word	0x0000000e
 8004ba4:	00000003 	.word	0x00000003
 8004ba8:	000000e0 	.word	0x000000e0
 8004bac:	00000003 	.word	0x00000003
 8004bb0:	00000007 	.word	0x00000007
 8004bb4:	00000003 	.word	0x00000003
 8004bb8:	40010300 	.word	0x40010300
 8004bbc:	40010304 	.word	0x40010304
 8004bc0:	40010308 	.word	0x40010308
 8004bc4:	48000400 	.word	0x48000400

08004bc8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004bc8:	4b09      	ldr	r3, [pc, #36]	@ (8004bf0 <HAL_TIM_PWM_MspInit+0x28>)
 8004bca:	6802      	ldr	r2, [r0, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d000      	beq.n	8004bd2 <HAL_TIM_PWM_MspInit+0xa>
 8004bd0:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bd2:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8004bd6:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004bd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004bda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bde:	661a      	str	r2, [r3, #96]	@ 0x60
 8004be0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004be2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004be6:	9301      	str	r3, [sp, #4]
 8004be8:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004bea:	b002      	add	sp, #8
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	40012c00 	.word	0x40012c00
 8004bf4:	00000000 	.word	0x00000000

08004bf8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004bf8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 8004bfa:	4a1b      	ldr	r2, [pc, #108]	@ (8004c68 <HAL_TIM_Encoder_MspInit+0x70>)
 8004bfc:	6801      	ldr	r1, [r0, #0]
{
 8004bfe:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c00:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8004c02:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c04:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004c08:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c0c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 8004c0e:	d002      	beq.n	8004c16 <HAL_TIM_Encoder_MspInit+0x1e>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8004c10:	b009      	add	sp, #36	@ 0x24
 8004c12:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c16:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c1a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004c1e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8004c60 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c22:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c24:	4811      	ldr	r0, [pc, #68]	@ (8004c6c <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004c26:	f042 0204 	orr.w	r2, r2, #4
 8004c2a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c2c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c2e:	f002 0204 	and.w	r2, r2, #4
 8004c32:	9200      	str	r2, [sp, #0]
 8004c34:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c38:	f042 0202 	orr.w	r2, r2, #2
 8004c3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c46:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c48:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 8004c4a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c4e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004c50:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c52:	f002 fe63 	bl	800791c <HAL_GPIO_Init>
}
 8004c56:	b009      	add	sp, #36	@ 0x24
 8004c58:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c5c:	f3af 8000 	nop.w
 8004c60:	000000c0 	.word	0x000000c0
 8004c64:	00000002 	.word	0x00000002
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	48000400 	.word	0x48000400

08004c70 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004c70:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004c72:	4a2b      	ldr	r2, [pc, #172]	@ (8004d20 <HAL_TIM_MspPostInit+0xb0>)
 8004c74:	6801      	ldr	r1, [r0, #0]
{
 8004c76:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c78:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004c7a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c7c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004c80:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004c84:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8004c86:	d001      	beq.n	8004c8c <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004c88:	b00a      	add	sp, #40	@ 0x28
 8004c8a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c8c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004c90:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004c94:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c9a:	f042 0204 	orr.w	r2, r2, #4
 8004c9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004ca0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ca2:	f002 0204 	and.w	r2, r2, #4
 8004ca6:	9201      	str	r2, [sp, #4]
 8004ca8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004caa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cac:	f042 0202 	orr.w	r2, r2, #2
 8004cb0:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004cb2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cb4:	f002 0202 	and.w	r2, r2, #2
 8004cb8:	9202      	str	r2, [sp, #8]
 8004cba:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cbc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004cc6:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004ccc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cd0:	2402      	movs	r4, #2
 8004cd2:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cd4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004cd6:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004cd8:	a904      	add	r1, sp, #16
 8004cda:	4812      	ldr	r0, [pc, #72]	@ (8004d24 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cdc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004cde:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004ce0:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004ce4:	f002 fe1a 	bl	800791c <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004ce8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004cea:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004cee:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004cf0:	480d      	ldr	r0, [pc, #52]	@ (8004d28 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004cf2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004cf4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004cf8:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004cfc:	f002 fe0e 	bl	800791c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8004d00:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004d04:	2302      	movs	r3, #2
 8004d06:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d0c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d0e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8004d12:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004d16:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d18:	f002 fe00 	bl	800791c <HAL_GPIO_Init>
}
 8004d1c:	b00a      	add	sp, #40	@ 0x28
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	40012c00 	.word	0x40012c00
 8004d24:	48000800 	.word	0x48000800
 8004d28:	48000400 	.word	0x48000400
 8004d2c:	00000000 	.word	0x00000000

08004d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004d30:	b570      	push	{r4, r5, r6, lr}
 8004d32:	4604      	mov	r4, r0
 8004d34:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d36:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d38:	2244      	movs	r2, #68	@ 0x44
 8004d3a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d3c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004d40:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004d44:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004d46:	f006 fbff 	bl	800b548 <memset>
  if(huart->Instance==USART2)
 8004d4a:	4b35      	ldr	r3, [pc, #212]	@ (8004e20 <HAL_UART_MspInit+0xf0>)
 8004d4c:	6822      	ldr	r2, [r4, #0]
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d001      	beq.n	8004d56 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004d52:	b018      	add	sp, #96	@ 0x60
 8004d54:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d56:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d58:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004d5a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d5c:	f003 fc52 	bl	8008604 <HAL_RCCEx_PeriphCLKConfig>
 8004d60:	2800      	cmp	r0, #0
 8004d62:	d14c      	bne.n	8004dfe <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d64:	4b2f      	ldr	r3, [pc, #188]	@ (8004e24 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d66:	4830      	ldr	r0, [pc, #192]	@ (8004e28 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d68:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004d6a:	4e30      	ldr	r6, [pc, #192]	@ (8004e2c <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004d6c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004d70:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d72:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004d74:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004d78:	9200      	str	r2, [sp, #0]
 8004d7a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d7c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004d7e:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8004e10 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d82:	f042 0202 	orr.w	r2, r2, #2
 8004d86:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004d8a:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004d8e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8004e18 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d98:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d9a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d9e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004da0:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004da4:	f002 fdba 	bl	800791c <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004da8:	4921      	ldr	r1, [pc, #132]	@ (8004e30 <HAL_UART_MspInit+0x100>)
 8004daa:	221a      	movs	r2, #26
 8004dac:	2300      	movs	r3, #0
 8004dae:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004db2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004db4:	2280      	movs	r2, #128	@ 0x80
 8004db6:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8004dba:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8004dbe:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8004dc2:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004dc4:	f002 f986 	bl	80070d4 <HAL_DMA_Init>
 8004dc8:	b9f8      	cbnz	r0, 8004e0a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004dca:	4d1a      	ldr	r5, [pc, #104]	@ (8004e34 <HAL_UART_MspInit+0x104>)
 8004dcc:	491a      	ldr	r1, [pc, #104]	@ (8004e38 <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004dce:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004dd2:	221b      	movs	r2, #27
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004dda:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004ddc:	2110      	movs	r1, #16
 8004dde:	2280      	movs	r2, #128	@ 0x80
 8004de0:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8004de4:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8004de8:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004dec:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004dee:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004df0:	f002 f970 	bl	80070d4 <HAL_DMA_Init>
 8004df4:	b930      	cbnz	r0, 8004e04 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004df6:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8004df8:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8004dfa:	b018      	add	sp, #96	@ 0x60
 8004dfc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004dfe:	f7fd ff9b 	bl	8002d38 <Error_Handler>
 8004e02:	e7af      	b.n	8004d64 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004e04:	f7fd ff98 	bl	8002d38 <Error_Handler>
 8004e08:	e7f5      	b.n	8004df6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8004e0a:	f7fd ff95 	bl	8002d38 <Error_Handler>
 8004e0e:	e7dc      	b.n	8004dca <HAL_UART_MspInit+0x9a>
 8004e10:	00000018 	.word	0x00000018
 8004e14:	00000002 	.word	0x00000002
	...
 8004e20:	40004400 	.word	0x40004400
 8004e24:	40021000 	.word	0x40021000
 8004e28:	48000400 	.word	0x48000400
 8004e2c:	20000550 	.word	0x20000550
 8004e30:	40020008 	.word	0x40020008
 8004e34:	200004f0 	.word	0x200004f0
 8004e38:	4002001c 	.word	0x4002001c

08004e3c <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004e3c:	4801      	ldr	r0, [pc, #4]	@ (8004e44 <FDCAN1_IT0_IRQHandler+0x8>)
 8004e3e:	f002 bca9 	b.w	8007794 <HAL_FDCAN_IRQHandler>
 8004e42:	bf00      	nop
 8004e44:	20000790 	.word	0x20000790

08004e48 <FDCAN1_IT1_IRQHandler>:
}

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
 8004e48:	4801      	ldr	r0, [pc, #4]	@ (8004e50 <FDCAN1_IT1_IRQHandler+0x8>)
 8004e4a:	f002 bca3 	b.w	8007794 <HAL_FDCAN_IRQHandler>
 8004e4e:	bf00      	nop
 8004e50:	20000790 	.word	0x20000790

08004e54 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8004e54:	4b02      	ldr	r3, [pc, #8]	@ (8004e60 <ADC1_2_IRQHandler+0xc>)
 8004e56:	2240      	movs	r2, #64	@ 0x40
 8004e58:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8004e5a:	f7fe ba57 	b.w	800330c <TSK_HighFrequencyTask>
 8004e5e:	bf00      	nop
 8004e60:	50000100 	.word	0x50000100

08004e64 <TIM1_UP_TIM16_IRQHandler>:
 8004e64:	4b03      	ldr	r3, [pc, #12]	@ (8004e74 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004e66:	4804      	ldr	r0, [pc, #16]	@ (8004e78 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004e68:	f06f 0201 	mvn.w	r2, #1
 8004e6c:	611a      	str	r2, [r3, #16]
 8004e6e:	f005 be5b 	b.w	800ab28 <R3_2_TIMx_UP_IRQHandler>
 8004e72:	bf00      	nop
 8004e74:	40012c00 	.word	0x40012c00
 8004e78:	20000064 	.word	0x20000064

08004e7c <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8004e7c:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8004e7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004e80:	691a      	ldr	r2, [r3, #16]
 8004e82:	0612      	lsls	r2, r2, #24
 8004e84:	d505      	bpl.n	8004e92 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8004e86:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8004e8a:	480a      	ldr	r0, [pc, #40]	@ (8004eb4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004e8c:	611a      	str	r2, [r3, #16]
 8004e8e:	f7ff f9cf 	bl	8004230 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8004e92:	4907      	ldr	r1, [pc, #28]	@ (8004eb0 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8004e94:	690b      	ldr	r3, [r1, #16]
 8004e96:	05db      	lsls	r3, r3, #23
 8004e98:	d505      	bpl.n	8004ea6 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8004e9a:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8004e9e:	4805      	ldr	r0, [pc, #20]	@ (8004eb4 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8004ea0:	610b      	str	r3, [r1, #16]
 8004ea2:	f7ff f9cf 	bl	8004244 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8004ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8004eaa:	f7fe ba9f 	b.w	80033ec <MC_RunMotorControlTasks>
 8004eae:	bf00      	nop
 8004eb0:	40012c00 	.word	0x40012c00
 8004eb4:	20000064 	.word	0x20000064

08004eb8 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8004eb8:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8004eba:	3908      	subs	r1, #8
{
 8004ebc:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8004ec0:	2920      	cmp	r1, #32
 8004ec2:	d812      	bhi.n	8004eea <RI_SetRegisterGlobal+0x32>
 8004ec4:	e8df f001 	tbb	[pc, r1]
 8004ec8:	11111117 	.word	0x11111117
 8004ecc:	11111111 	.word	0x11111111
 8004ed0:	11111121 	.word	0x11111121
 8004ed4:	11111111 	.word	0x11111111
 8004ed8:	1111112f 	.word	0x1111112f
 8004edc:	11111111 	.word	0x11111111
 8004ee0:	11111139 	.word	0x11111139
 8004ee4:	11111111 	.word	0x11111111
 8004ee8:	4d          	.byte	0x4d
 8004ee9:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8004eea:	2200      	movs	r2, #0
 8004eec:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8004eee:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8004ef0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ef4:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8004ef6:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8004ef8:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8004efc:	bf14      	ite	ne
 8004efe:	2005      	movne	r0, #5
 8004f00:	2004      	moveq	r0, #4
}
 8004f02:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8004f06:	801a      	strh	r2, [r3, #0]
}
 8004f08:	4770      	bx	lr
      switch (regID)
 8004f0a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8004f0e:	d039      	beq.n	8004f84 <RI_SetRegisterGlobal+0xcc>
 8004f10:	d942      	bls.n	8004f98 <RI_SetRegisterGlobal+0xe0>
 8004f12:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8004f16:	d035      	beq.n	8004f84 <RI_SetRegisterGlobal+0xcc>
 8004f18:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8004f1c:	4290      	cmp	r0, r2
 8004f1e:	bf14      	ite	ne
 8004f20:	2005      	movne	r0, #5
 8004f22:	2004      	moveq	r0, #4
 8004f24:	e02f      	b.n	8004f86 <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 8004f26:	2818      	cmp	r0, #24
      *size = 4;
 8004f28:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8004f2c:	bf14      	ite	ne
 8004f2e:	2005      	movne	r0, #5
 8004f30:	4610      	moveq	r0, r2
}
 8004f32:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8004f36:	801a      	strh	r2, [r3, #0]
}
 8004f38:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004f3e:	f992 0000 	ldrsb.w	r0, [r2]
 8004f42:	b328      	cbz	r0, 8004f90 <RI_SetRegisterGlobal+0xd8>
 8004f44:	fa1f f08c 	uxth.w	r0, ip
 8004f48:	e003      	b.n	8004f52 <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8004f4a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004f4c:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8004f50:	b1f4      	cbz	r4, 8004f90 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8004f52:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004f56:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8004f58:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004f5c:	d3f5      	bcc.n	8004f4a <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 8004f5e:	2004      	movs	r0, #4
 8004f60:	e7c6      	b.n	8004ef0 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8004f62:	8812      	ldrh	r2, [r2, #0]
 8004f64:	3202      	adds	r2, #2
 8004f66:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8004f68:	fa1f fc8c 	uxth.w	ip, ip
 8004f6c:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8004f6e:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8004f70:	d81a      	bhi.n	8004fa8 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8004f72:	28a8      	cmp	r0, #168	@ 0xa8
 8004f74:	d0f3      	beq.n	8004f5e <RI_SetRegisterGlobal+0xa6>
 8004f76:	d81b      	bhi.n	8004fb0 <RI_SetRegisterGlobal+0xf8>
 8004f78:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8004f7c:	2828      	cmp	r0, #40	@ 0x28
 8004f7e:	d0ee      	beq.n	8004f5e <RI_SetRegisterGlobal+0xa6>
 8004f80:	2005      	movs	r0, #5
 8004f82:	e7b5      	b.n	8004ef0 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8004f84:	2000      	movs	r0, #0
      *size = 2;
 8004f86:	2202      	movs	r2, #2
}
 8004f88:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8004f8c:	801a      	strh	r2, [r3, #0]
}
 8004f8e:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8004f94:	2004      	movs	r0, #4
 8004f96:	e7ab      	b.n	8004ef0 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 8004f98:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8004f9c:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8004fa0:	bf14      	ite	ne
 8004fa2:	2005      	movne	r0, #5
 8004fa4:	2004      	moveq	r0, #4
 8004fa6:	e7ee      	b.n	8004f86 <RI_SetRegisterGlobal+0xce>
        *size = 0;
 8004fa8:	2200      	movs	r2, #0
 8004faa:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8004fac:	200a      	movs	r0, #10
 8004fae:	e79f      	b.n	8004ef0 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8004fb0:	28e8      	cmp	r0, #232	@ 0xe8
 8004fb2:	d1e5      	bne.n	8004f80 <RI_SetRegisterGlobal+0xc8>
 8004fb4:	e7d3      	b.n	8004f5e <RI_SetRegisterGlobal+0xa6>
 8004fb6:	bf00      	nop

08004fb8 <RI_SetRegisterMotor1>:
{
 8004fb8:	b510      	push	{r4, lr}
 8004fba:	b084      	sub	sp, #16
  switch(typeID)
 8004fbc:	3908      	subs	r1, #8
{
 8004fbe:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8004fc2:	4694      	mov	ip, r2
 8004fc4:	461c      	mov	r4, r3
  switch(typeID)
 8004fc6:	2920      	cmp	r1, #32
 8004fc8:	d812      	bhi.n	8004ff0 <RI_SetRegisterMotor1+0x38>
 8004fca:	e8df f001 	tbb	[pc, r1]
 8004fce:	1116      	.short	0x1116
 8004fd0:	11111111 	.word	0x11111111
 8004fd4:	11281111 	.word	0x11281111
 8004fd8:	11111111 	.word	0x11111111
 8004fdc:	11681111 	.word	0x11681111
 8004fe0:	11111111 	.word	0x11111111
 8004fe4:	11561111 	.word	0x11561111
 8004fe8:	11111111 	.word	0x11111111
 8004fec:	1111      	.short	0x1111
 8004fee:	75          	.byte	0x75
 8004fef:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8004ff4:	2007      	movs	r0, #7
}
 8004ff6:	b004      	add	sp, #16
 8004ff8:	bd10      	pop	{r4, pc}
      switch (regID)
 8004ffa:	2888      	cmp	r0, #136	@ 0x88
 8004ffc:	f000 80b0 	beq.w	8005160 <RI_SetRegisterMotor1+0x1a8>
 8005000:	f240 8100 	bls.w	8005204 <RI_SetRegisterMotor1+0x24c>
 8005004:	f5b0 6fa9 	cmp.w	r0, #1352	@ 0x548
 8005008:	f000 80e2 	beq.w	80051d0 <RI_SetRegisterMotor1+0x218>
            retVal = MCP_ERROR_RO_REG;
 800500c:	f5b0 6fb1 	cmp.w	r0, #1416	@ 0x588
 8005010:	bf14      	ite	ne
 8005012:	2005      	movne	r0, #5
 8005014:	2004      	moveq	r0, #4
      *size = 1;
 8005016:	2301      	movs	r3, #1
 8005018:	8023      	strh	r3, [r4, #0]
}
 800501a:	b004      	add	sp, #16
 800501c:	bd10      	pop	{r4, pc}
      switch (regID)
 800501e:	f241 33d0 	movw	r3, #5072	@ 0x13d0
 8005022:	4298      	cmp	r0, r3
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8005024:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8005026:	f000 81cf 	beq.w	80053c8 <RI_SetRegisterMotor1+0x410>
 800502a:	d867      	bhi.n	80050fc <RI_SetRegisterMotor1+0x144>
 800502c:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8005030:	f000 81c5 	beq.w	80053be <RI_SetRegisterMotor1+0x406>
 8005034:	f240 809c 	bls.w	8005170 <RI_SetRegisterMotor1+0x1b8>
 8005038:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 800503c:	f000 818e 	beq.w	800535c <RI_SetRegisterMotor1+0x3a4>
 8005040:	f240 8102 	bls.w	8005248 <RI_SetRegisterMotor1+0x290>
 8005044:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8005048:	d012      	beq.n	8005070 <RI_SetRegisterMotor1+0xb8>
 800504a:	f200 8153 	bhi.w	80052f4 <RI_SetRegisterMotor1+0x33c>
 800504e:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8005052:	f040 81d7 	bne.w	8005404 <RI_SetRegisterMotor1+0x44c>
          currComp = MCI_GetIqdref(pMCIN);
 8005056:	48b4      	ldr	r0, [pc, #720]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 8005058:	9101      	str	r1, [sp, #4]
 800505a:	f7fd ffff 	bl	800305c <MCI_GetIqdref>
          currComp.d = (int16_t)regdata16;
 800505e:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8005060:	4603      	mov	r3, r0
 8005062:	9303      	str	r3, [sp, #12]
          currComp.d = (int16_t)regdata16;
 8005064:	f8ad 100e 	strh.w	r1, [sp, #14]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8005068:	48af      	ldr	r0, [pc, #700]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 800506a:	9903      	ldr	r1, [sp, #12]
 800506c:	f7fd fed4 	bl	8002e18 <MCI_SetCurrentReferences>
  uint8_t retVal = MCP_CMD_OK;
 8005070:	2000      	movs	r0, #0
      *size = 2;
 8005072:	2302      	movs	r3, #2
 8005074:	8023      	strh	r3, [r4, #0]
}
 8005076:	b004      	add	sp, #16
 8005078:	bd10      	pop	{r4, pc}
  *size= 1U ; /* /0 is the min String size */
 800507a:	2201      	movs	r2, #1
 800507c:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800507e:	f99c 3000 	ldrsb.w	r3, [ip]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d035      	beq.n	80050f2 <RI_SetRegisterMotor1+0x13a>
 8005086:	fa1f f38e 	uxth.w	r3, lr
 800508a:	e003      	b.n	8005094 <RI_SetRegisterMotor1+0xdc>
    *size = *size + 1U;
 800508c:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800508e:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8005092:	b371      	cbz	r1, 80050f2 <RI_SetRegisterMotor1+0x13a>
    *size = *size + 1U;
 8005094:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005096:	4293      	cmp	r3, r2
    *size = *size + 1U;
 8005098:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800509a:	d8f7      	bhi.n	800508c <RI_SetRegisterMotor1+0xd4>
 800509c:	e02c      	b.n	80050f8 <RI_SetRegisterMotor1+0x140>
      switch (regID)
 800509e:	2858      	cmp	r0, #88	@ 0x58
 80050a0:	f000 80c4 	beq.w	800522c <RI_SetRegisterMotor1+0x274>
 80050a4:	2898      	cmp	r0, #152	@ 0x98
 80050a6:	d04d      	beq.n	8005144 <RI_SetRegisterMotor1+0x18c>
          retVal = MCP_ERROR_RO_REG;
 80050a8:	2818      	cmp	r0, #24
 80050aa:	bf14      	ite	ne
 80050ac:	2005      	movne	r0, #5
 80050ae:	2004      	moveq	r0, #4
      *size = 4;
 80050b0:	2304      	movs	r3, #4
 80050b2:	8023      	strh	r3, [r4, #0]
}
 80050b4:	b004      	add	sp, #16
 80050b6:	bd10      	pop	{r4, pc}
      *size = rawSize + 2U;
 80050b8:	8812      	ldrh	r2, [r2, #0]
 80050ba:	3202      	adds	r2, #2
 80050bc:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80050be:	fa1f f38e 	uxth.w	r3, lr
 80050c2:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 80050c4:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80050c6:	d839      	bhi.n	800513c <RI_SetRegisterMotor1+0x184>
        switch (regID)
 80050c8:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80050cc:	f000 80ca 	beq.w	8005264 <RI_SetRegisterMotor1+0x2ac>
 80050d0:	f200 809d 	bhi.w	800520e <RI_SetRegisterMotor1+0x256>
 80050d4:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80050d8:	d07c      	beq.n	80051d4 <RI_SetRegisterMotor1+0x21c>
 80050da:	f200 80a9 	bhi.w	8005230 <RI_SetRegisterMotor1+0x278>
 80050de:	28a8      	cmp	r0, #168	@ 0xa8
 80050e0:	d00a      	beq.n	80050f8 <RI_SetRegisterMotor1+0x140>
 80050e2:	f200 815c 	bhi.w	800539e <RI_SetRegisterMotor1+0x3e6>
 80050e6:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80050ea:	2828      	cmp	r0, #40	@ 0x28
 80050ec:	d004      	beq.n	80050f8 <RI_SetRegisterMotor1+0x140>
 80050ee:	2005      	movs	r0, #5
 80050f0:	e781      	b.n	8004ff6 <RI_SetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80050f2:	2300      	movs	r3, #0
 80050f4:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 80050f8:	2004      	movs	r0, #4
 80050fa:	e77c      	b.n	8004ff6 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 80050fc:	f241 5390 	movw	r3, #5520	@ 0x1590
 8005100:	4298      	cmp	r0, r3
 8005102:	f000 8127 	beq.w	8005354 <RI_SetRegisterMotor1+0x39c>
 8005106:	d948      	bls.n	800519a <RI_SetRegisterMotor1+0x1e2>
 8005108:	f241 6390 	movw	r3, #5776	@ 0x1690
 800510c:	4298      	cmp	r0, r3
 800510e:	f000 814a 	beq.w	80053a6 <RI_SetRegisterMotor1+0x3ee>
 8005112:	f200 80ba 	bhi.w	800528a <RI_SetRegisterMotor1+0x2d2>
 8005116:	f241 6310 	movw	r3, #5648	@ 0x1610
 800511a:	4298      	cmp	r0, r3
 800511c:	f000 814b 	beq.w	80053b6 <RI_SetRegisterMotor1+0x3fe>
 8005120:	f241 6350 	movw	r3, #5712	@ 0x1650
 8005124:	4298      	cmp	r0, r3
 8005126:	f000 8142 	beq.w	80053ae <RI_SetRegisterMotor1+0x3f6>
 800512a:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 800512e:	4298      	cmp	r0, r3
 8005130:	f040 8154 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8005134:	487d      	ldr	r0, [pc, #500]	@ (800532c <RI_SetRegisterMotor1+0x374>)
 8005136:	f004 feb7 	bl	8009ea8 <PID_SetKPDivisorPOW2>
          break;
 800513a:	e799      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
        *size = 0;
 800513c:	2300      	movs	r3, #0
 800513e:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8005140:	200a      	movs	r0, #10
 8005142:	e758      	b.n	8004ff6 <RI_SetRegisterMotor1+0x3e>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8005144:	f9b2 3000 	ldrsh.w	r3, [r2]
 8005148:	4979      	ldr	r1, [pc, #484]	@ (8005330 <RI_SetRegisterMotor1+0x378>)
 800514a:	4877      	ldr	r0, [pc, #476]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 800514c:	fb81 2103 	smull	r2, r1, r1, r3
 8005150:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8005154:	2200      	movs	r2, #0
 8005156:	b209      	sxth	r1, r1
 8005158:	f7fd fe3a 	bl	8002dd0 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 800515c:	2000      	movs	r0, #0
          break;
 800515e:	e7a7      	b.n	80050b0 <RI_SetRegisterMotor1+0xf8>
          uint8_t regdata8 = *data;
 8005160:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8005162:	2b04      	cmp	r3, #4
 8005164:	d045      	beq.n	80051f2 <RI_SetRegisterMotor1+0x23a>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8005166:	2b03      	cmp	r3, #3
 8005168:	f000 80bb 	beq.w	80052e2 <RI_SetRegisterMotor1+0x32a>
  uint8_t retVal = MCP_CMD_OK;
 800516c:	2000      	movs	r0, #0
 800516e:	e752      	b.n	8005016 <RI_SetRegisterMotor1+0x5e>
      switch (regID)
 8005170:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8005174:	f000 810a 	beq.w	800538c <RI_SetRegisterMotor1+0x3d4>
 8005178:	f200 80a6 	bhi.w	80052c8 <RI_SetRegisterMotor1+0x310>
 800517c:	28d0      	cmp	r0, #208	@ 0xd0
 800517e:	f000 8100 	beq.w	8005382 <RI_SetRegisterMotor1+0x3ca>
 8005182:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8005186:	f000 80f7 	beq.w	8005378 <RI_SetRegisterMotor1+0x3c0>
 800518a:	2890      	cmp	r0, #144	@ 0x90
 800518c:	f040 8126 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8005190:	4868      	ldr	r0, [pc, #416]	@ (8005334 <RI_SetRegisterMotor1+0x37c>)
 8005192:	b209      	sxth	r1, r1
 8005194:	f004 fe78 	bl	8009e88 <PID_SetKP>
          break;
 8005198:	e76a      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
      switch (regID)
 800519a:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800519e:	4298      	cmp	r0, r3
 80051a0:	f000 80d4 	beq.w	800534c <RI_SetRegisterMotor1+0x394>
 80051a4:	f200 8083 	bhi.w	80052ae <RI_SetRegisterMotor1+0x2f6>
 80051a8:	f241 4350 	movw	r3, #5200	@ 0x1450
 80051ac:	4298      	cmp	r0, r3
 80051ae:	f000 80b7 	beq.w	8005320 <RI_SetRegisterMotor1+0x368>
 80051b2:	f241 4390 	movw	r3, #5264	@ 0x1490
 80051b6:	4298      	cmp	r0, r3
 80051b8:	f000 80ae 	beq.w	8005318 <RI_SetRegisterMotor1+0x360>
 80051bc:	f241 4310 	movw	r3, #5136	@ 0x1410
 80051c0:	4298      	cmp	r0, r3
 80051c2:	f040 810b 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKD(&PID_PosParamsM1, regdata16);
 80051c6:	485c      	ldr	r0, [pc, #368]	@ (8005338 <RI_SetRegisterMotor1+0x380>)
 80051c8:	b209      	sxth	r1, r1
 80051ca:	f004 fe8d 	bl	8009ee8 <PID_SetKD>
          break;
 80051ce:	e74f      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
            retVal = MCP_ERROR_RO_REG;
 80051d0:	2004      	movs	r0, #4
 80051d2:	e720      	b.n	8005016 <RI_SetRegisterMotor1+0x5e>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80051d4:	f8dc 1002 	ldr.w	r1, [ip, #2]
 80051d8:	4b55      	ldr	r3, [pc, #340]	@ (8005330 <RI_SetRegisterMotor1+0x378>)
 80051da:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80051de:	fb83 0301 	smull	r0, r3, r3, r1
 80051e2:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80051e6:	4850      	ldr	r0, [pc, #320]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 80051e8:	b209      	sxth	r1, r1
 80051ea:	f7fd fdf1 	bl	8002dd0 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 80051ee:	2000      	movs	r0, #0
 80051f0:	e701      	b.n	8004ff6 <RI_SetRegisterMotor1+0x3e>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80051f2:	484d      	ldr	r0, [pc, #308]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 80051f4:	f7fd ff54 	bl	80030a0 <MCI_GetTeref>
 80051f8:	2200      	movs	r2, #0
 80051fa:	4601      	mov	r1, r0
 80051fc:	484a      	ldr	r0, [pc, #296]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 80051fe:	f7fd fe01 	bl	8002e04 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8005202:	e7b3      	b.n	800516c <RI_SetRegisterMotor1+0x1b4>
      switch (regID)
 8005204:	2848      	cmp	r0, #72	@ 0x48
 8005206:	bf0c      	ite	eq
 8005208:	2004      	moveq	r0, #4
 800520a:	2005      	movne	r0, #5
 800520c:	e703      	b.n	8005016 <RI_SetRegisterMotor1+0x5e>
        switch (regID)
 800520e:	f5b0 7f6a 	cmp.w	r0, #936	@ 0x3a8
 8005212:	d02e      	beq.n	8005272 <RI_SetRegisterMotor1+0x2ba>
 8005214:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8005218:	f47f af69 	bne.w	80050ee <RI_SetRegisterMotor1+0x136>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800521c:	4847      	ldr	r0, [pc, #284]	@ (800533c <RI_SetRegisterMotor1+0x384>)
 800521e:	f10c 0102 	add.w	r1, ip, #2
}
 8005222:	b004      	add	sp, #16
 8005224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8005228:	f004 bd62 	b.w	8009cf0 <MCPA_cfgLog>
          retVal = MCP_ERROR_RO_REG;
 800522c:	2004      	movs	r0, #4
 800522e:	e73f      	b.n	80050b0 <RI_SetRegisterMotor1+0xf8>
        switch (regID)
 8005230:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8005234:	f47f af5b 	bne.w	80050ee <RI_SetRegisterMotor1+0x136>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8005238:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800523c:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 8005240:	4839      	ldr	r0, [pc, #228]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 8005242:	f7fd fddf 	bl	8002e04 <MCI_ExecTorqueRamp>
            break;
 8005246:	e7d2      	b.n	80051ee <RI_SetRegisterMotor1+0x236>
      switch (regID)
 8005248:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800524c:	d05f      	beq.n	800530e <RI_SetRegisterMotor1+0x356>
 800524e:	f200 80c7 	bhi.w	80053e0 <RI_SetRegisterMotor1+0x428>
 8005252:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8005256:	f040 80c1 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 800525a:	4839      	ldr	r0, [pc, #228]	@ (8005340 <RI_SetRegisterMotor1+0x388>)
 800525c:	b209      	sxth	r1, r1
 800525e:	f004 fe15 	bl	8009e8c <PID_SetKI>
          break;
 8005262:	e705      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8005264:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8005268:	482f      	ldr	r0, [pc, #188]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 800526a:	9103      	str	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800526c:	f7fd fdd4 	bl	8002e18 <MCI_SetCurrentReferences>
            break;
 8005270:	e7bd      	b.n	80051ee <RI_SetRegisterMotor1+0x236>
            MCI_ExecPositionCommand(pMCIN, Position.Float_Val, Duration.Float_Val);
 8005272:	f8dc 3006 	ldr.w	r3, [ip, #6]
 8005276:	482c      	ldr	r0, [pc, #176]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 8005278:	ee00 3a90 	vmov	s1, r3
 800527c:	f8dc 3002 	ldr.w	r3, [ip, #2]
 8005280:	ee00 3a10 	vmov	s0, r3
 8005284:	f7fd fdd2 	bl	8002e2c <MCI_ExecPositionCommand>
            break;
 8005288:	e7b1      	b.n	80051ee <RI_SetRegisterMotor1+0x236>
      switch (regID)
 800528a:	f241 7310 	movw	r3, #5904	@ 0x1710
 800528e:	4298      	cmp	r0, r3
 8005290:	d058      	beq.n	8005344 <RI_SetRegisterMotor1+0x38c>
 8005292:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8005296:	4298      	cmp	r0, r3
 8005298:	f000 80b2 	beq.w	8005400 <RI_SetRegisterMotor1+0x448>
 800529c:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 80052a0:	4298      	cmp	r0, r3
 80052a2:	f040 809b 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKIDivisorPOW2(&PID_PosParamsM1, regdata16);
 80052a6:	4824      	ldr	r0, [pc, #144]	@ (8005338 <RI_SetRegisterMotor1+0x380>)
 80052a8:	f004 fe0a 	bl	8009ec0 <PID_SetKIDivisorPOW2>
          break;
 80052ac:	e6e0      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
      switch (regID)
 80052ae:	f241 5310 	movw	r3, #5392	@ 0x1510
 80052b2:	4298      	cmp	r0, r3
 80052b4:	d06f      	beq.n	8005396 <RI_SetRegisterMotor1+0x3de>
 80052b6:	f241 5350 	movw	r3, #5456	@ 0x1550
 80052ba:	4298      	cmp	r0, r3
 80052bc:	f040 808e 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80052c0:	481f      	ldr	r0, [pc, #124]	@ (8005340 <RI_SetRegisterMotor1+0x388>)
 80052c2:	f004 fdfd 	bl	8009ec0 <PID_SetKIDivisorPOW2>
          break;
 80052c6:	e6d3      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
      switch (regID)
 80052c8:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80052cc:	f000 8081 	beq.w	80053d2 <RI_SetRegisterMotor1+0x41a>
 80052d0:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 80052d4:	f040 8082 	bne.w	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 80052d8:	4814      	ldr	r0, [pc, #80]	@ (800532c <RI_SetRegisterMotor1+0x374>)
 80052da:	b209      	sxth	r1, r1
 80052dc:	f004 fe04 	bl	8009ee8 <PID_SetKD>
          break;
 80052e0:	e6c6      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80052e2:	4811      	ldr	r0, [pc, #68]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 80052e4:	f7fd fe8a 	bl	8002ffc <MCI_GetMecSpeedRefUnit>
 80052e8:	2200      	movs	r2, #0
 80052ea:	4601      	mov	r1, r0
 80052ec:	480e      	ldr	r0, [pc, #56]	@ (8005328 <RI_SetRegisterMotor1+0x370>)
 80052ee:	f7fd fd6f 	bl	8002dd0 <MCI_ExecSpeedRamp>
 80052f2:	e73b      	b.n	800516c <RI_SetRegisterMotor1+0x1b4>
      switch (regID)
 80052f4:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80052f8:	f43f aeba 	beq.w	8005070 <RI_SetRegisterMotor1+0xb8>
 80052fc:	f241 3390 	movw	r3, #5008	@ 0x1390
 8005300:	4298      	cmp	r0, r3
 8005302:	d16b      	bne.n	80053dc <RI_SetRegisterMotor1+0x424>
          PID_SetKP(&PID_PosParamsM1, regdata16);
 8005304:	480c      	ldr	r0, [pc, #48]	@ (8005338 <RI_SetRegisterMotor1+0x380>)
 8005306:	b209      	sxth	r1, r1
 8005308:	f004 fdbe 	bl	8009e88 <PID_SetKP>
          break;
 800530c:	e6b0      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 800530e:	480c      	ldr	r0, [pc, #48]	@ (8005340 <RI_SetRegisterMotor1+0x388>)
 8005310:	b209      	sxth	r1, r1
 8005312:	f004 fde9 	bl	8009ee8 <PID_SetKD>
          break;
 8005316:	e6ab      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8005318:	4806      	ldr	r0, [pc, #24]	@ (8005334 <RI_SetRegisterMotor1+0x37c>)
 800531a:	f004 fdd1 	bl	8009ec0 <PID_SetKIDivisorPOW2>
          break;
 800531e:	e6a7      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8005320:	4804      	ldr	r0, [pc, #16]	@ (8005334 <RI_SetRegisterMotor1+0x37c>)
 8005322:	f004 fdc1 	bl	8009ea8 <PID_SetKPDivisorPOW2>
          break;
 8005326:	e6a3      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
 8005328:	20000008 	.word	0x20000008
 800532c:	20000204 	.word	0x20000204
 8005330:	2aaaaaab 	.word	0x2aaaaaab
 8005334:	20000230 	.word	0x20000230
 8005338:	200001ac 	.word	0x200001ac
 800533c:	200003b4 	.word	0x200003b4
 8005340:	200001d8 	.word	0x200001d8
          PID_SetKDDivisorPOW2(&PID_PosParamsM1, regdata16);
 8005344:	4848      	ldr	r0, [pc, #288]	@ (8005468 <RI_SetRegisterMotor1+0x4b0>)
 8005346:	f004 fdd7 	bl	8009ef8 <PID_SetKDDivisorPOW2>
          break;
 800534a:	e691      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800534c:	4847      	ldr	r0, [pc, #284]	@ (800546c <RI_SetRegisterMotor1+0x4b4>)
 800534e:	f004 fdd3 	bl	8009ef8 <PID_SetKDDivisorPOW2>
          break;
 8005352:	e68d      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8005354:	4846      	ldr	r0, [pc, #280]	@ (8005470 <RI_SetRegisterMotor1+0x4b8>)
 8005356:	f004 fdcf 	bl	8009ef8 <PID_SetKDDivisorPOW2>
          break;
 800535a:	e689      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          currComp = MCI_GetIqdref(pMCIN);
 800535c:	4845      	ldr	r0, [pc, #276]	@ (8005474 <RI_SetRegisterMotor1+0x4bc>)
 800535e:	9101      	str	r1, [sp, #4]
 8005360:	f7fd fe7c 	bl	800305c <MCI_GetIqdref>
          currComp.q = (int16_t)regdata16;
 8005364:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8005366:	4603      	mov	r3, r0
 8005368:	9303      	str	r3, [sp, #12]
          currComp.q = (int16_t)regdata16;
 800536a:	f8ad 100c 	strh.w	r1, [sp, #12]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800536e:	4841      	ldr	r0, [pc, #260]	@ (8005474 <RI_SetRegisterMotor1+0x4bc>)
 8005370:	9903      	ldr	r1, [sp, #12]
 8005372:	f7fd fd51 	bl	8002e18 <MCI_SetCurrentReferences>
          break;
 8005376:	e67b      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8005378:	483c      	ldr	r0, [pc, #240]	@ (800546c <RI_SetRegisterMotor1+0x4b4>)
 800537a:	b209      	sxth	r1, r1
 800537c:	f004 fdb4 	bl	8009ee8 <PID_SetKD>
          break;
 8005380:	e676      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8005382:	483a      	ldr	r0, [pc, #232]	@ (800546c <RI_SetRegisterMotor1+0x4b4>)
 8005384:	b209      	sxth	r1, r1
 8005386:	f004 fd81 	bl	8009e8c <PID_SetKI>
          break;
 800538a:	e671      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 800538c:	483a      	ldr	r0, [pc, #232]	@ (8005478 <RI_SetRegisterMotor1+0x4c0>)
 800538e:	b209      	sxth	r1, r1
 8005390:	f004 fd7a 	bl	8009e88 <PID_SetKP>
          break;
 8005394:	e66c      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8005396:	4836      	ldr	r0, [pc, #216]	@ (8005470 <RI_SetRegisterMotor1+0x4b8>)
 8005398:	f004 fd86 	bl	8009ea8 <PID_SetKPDivisorPOW2>
          break;
 800539c:	e668      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
        switch (regID)
 800539e:	28e8      	cmp	r0, #232	@ 0xe8
 80053a0:	f43f aeaa 	beq.w	80050f8 <RI_SetRegisterMotor1+0x140>
 80053a4:	e6a3      	b.n	80050ee <RI_SetRegisterMotor1+0x136>
          PID_SetKPDivisorPOW2(&PID_PosParamsM1, regdata16);
 80053a6:	4830      	ldr	r0, [pc, #192]	@ (8005468 <RI_SetRegisterMotor1+0x4b0>)
 80053a8:	f004 fd7e 	bl	8009ea8 <PID_SetKPDivisorPOW2>
          break;
 80053ac:	e660      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80053ae:	4832      	ldr	r0, [pc, #200]	@ (8005478 <RI_SetRegisterMotor1+0x4c0>)
 80053b0:	f004 fda2 	bl	8009ef8 <PID_SetKDDivisorPOW2>
          break;
 80053b4:	e65c      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80053b6:	4830      	ldr	r0, [pc, #192]	@ (8005478 <RI_SetRegisterMotor1+0x4c0>)
 80053b8:	f004 fd82 	bl	8009ec0 <PID_SetKIDivisorPOW2>
          break;
 80053bc:	e658      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 80053be:	482c      	ldr	r0, [pc, #176]	@ (8005470 <RI_SetRegisterMotor1+0x4b8>)
 80053c0:	b209      	sxth	r1, r1
 80053c2:	f004 fd61 	bl	8009e88 <PID_SetKP>
          break;
 80053c6:	e653      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKI(&PID_PosParamsM1, regdata16);
 80053c8:	4827      	ldr	r0, [pc, #156]	@ (8005468 <RI_SetRegisterMotor1+0x4b0>)
 80053ca:	b209      	sxth	r1, r1
 80053cc:	f004 fd5e 	bl	8009e8c <PID_SetKI>
          break;
 80053d0:	e64e      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 80053d2:	4829      	ldr	r0, [pc, #164]	@ (8005478 <RI_SetRegisterMotor1+0x4c0>)
 80053d4:	b209      	sxth	r1, r1
 80053d6:	f004 fd59 	bl	8009e8c <PID_SetKI>
          break;
 80053da:	e649      	b.n	8005070 <RI_SetRegisterMotor1+0xb8>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80053dc:	2005      	movs	r0, #5
 80053de:	e648      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
      switch (regID)
 80053e0:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80053e4:	d00c      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 80053e6:	d81d      	bhi.n	8005424 <RI_SetRegisterMotor1+0x46c>
 80053e8:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80053ec:	d008      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 80053ee:	d82f      	bhi.n	8005450 <RI_SetRegisterMotor1+0x498>
 80053f0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80053f4:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80053f8:	bf14      	ite	ne
 80053fa:	2005      	movne	r0, #5
 80053fc:	2004      	moveq	r0, #4
 80053fe:	e638      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 8005400:	2004      	movs	r0, #4
 8005402:	e636      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 8005404:	d3ea      	bcc.n	80053dc <RI_SetRegisterMotor1+0x424>
 8005406:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800540a:	d0f9      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 800540c:	d817      	bhi.n	800543e <RI_SetRegisterMotor1+0x486>
 800540e:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8005412:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8005416:	d0f3      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 8005418:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800541c:	bf14      	ite	ne
 800541e:	2005      	movne	r0, #5
 8005420:	2004      	moveq	r0, #4
 8005422:	e626      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 8005424:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8005428:	d0ea      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 800542a:	d817      	bhi.n	800545c <RI_SetRegisterMotor1+0x4a4>
 800542c:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8005430:	d0e6      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 8005432:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8005436:	bf14      	ite	ne
 8005438:	2005      	movne	r0, #5
 800543a:	2004      	moveq	r0, #4
 800543c:	e619      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 800543e:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 8005442:	d0dd      	beq.n	8005400 <RI_SetRegisterMotor1+0x448>
 8005444:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 8005448:	bf14      	ite	ne
 800544a:	2005      	movne	r0, #5
 800544c:	2004      	moveq	r0, #4
 800544e:	e610      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 8005450:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8005454:	bf14      	ite	ne
 8005456:	2005      	movne	r0, #5
 8005458:	2004      	moveq	r0, #4
 800545a:	e60a      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 800545c:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8005460:	bf14      	ite	ne
 8005462:	2005      	movne	r0, #5
 8005464:	2004      	moveq	r0, #4
 8005466:	e604      	b.n	8005072 <RI_SetRegisterMotor1+0xba>
 8005468:	200001ac 	.word	0x200001ac
 800546c:	20000230 	.word	0x20000230
 8005470:	200001d8 	.word	0x200001d8
 8005474:	20000008 	.word	0x20000008
 8005478:	20000204 	.word	0x20000204

0800547c <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800547c:	b510      	push	{r4, lr}
    switch (typeID)
 800547e:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8005482:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 8005486:	f1bc 0f20 	cmp.w	ip, #32
 800548a:	d812      	bhi.n	80054b2 <RI_GetRegisterGlobal+0x36>
 800548c:	e8df f00c 	tbb	[pc, ip]
 8005490:	1111111b 	.word	0x1111111b
 8005494:	11111111 	.word	0x11111111
 8005498:	11111127 	.word	0x11111127
 800549c:	11111111 	.word	0x11111111
 80054a0:	11111122 	.word	0x11111122
 80054a4:	11111111 	.word	0x11111111
 80054a8:	11111135 	.word	0x11111135
 80054ac:	11111111 	.word	0x11111111
 80054b0:	13          	.byte	0x13
 80054b1:	00          	.byte	0x00
 80054b2:	2007      	movs	r0, #7
}
 80054b4:	bd10      	pop	{r4, pc}
        switch (regID)
 80054b6:	2828      	cmp	r0, #40	@ 0x28
 80054b8:	d029      	beq.n	800550e <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 80054ba:	8812      	ldrh	r2, [r2, #0]
 80054bc:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80054be:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80054c0:	b292      	uxth	r2, r2
 80054c2:	801a      	strh	r2, [r3, #0]
}
 80054c4:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 80054c6:	f1be 0f00 	cmp.w	lr, #0
 80054ca:	dd1e      	ble.n	800550a <RI_GetRegisterGlobal+0x8e>
 80054cc:	2201      	movs	r2, #1
            *size= 0 ; /* */
 80054ce:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80054d0:	2005      	movs	r0, #5
}
 80054d2:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 80054d4:	f1be 0f03 	cmp.w	lr, #3
 80054d8:	dd15      	ble.n	8005506 <RI_GetRegisterGlobal+0x8a>
 80054da:	2204      	movs	r2, #4
 80054dc:	e7f7      	b.n	80054ce <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 80054de:	f1be 0f01 	cmp.w	lr, #1
 80054e2:	dd10      	ble.n	8005506 <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 80054e4:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80054e8:	d05a      	beq.n	80055a0 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 80054ea:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80054ee:	bf14      	ite	ne
 80054f0:	2005      	movne	r0, #5
 80054f2:	2000      	moveq	r0, #0
          *size = 2;
 80054f4:	2202      	movs	r2, #2
 80054f6:	801a      	strh	r2, [r3, #0]
}
 80054f8:	bd10      	pop	{r4, pc}
        switch (regID)
 80054fa:	2820      	cmp	r0, #32
 80054fc:	d02c      	beq.n	8005558 <RI_GetRegisterGlobal+0xdc>
 80054fe:	2860      	cmp	r0, #96	@ 0x60
 8005500:	d00f      	beq.n	8005522 <RI_GetRegisterGlobal+0xa6>
 8005502:	2200      	movs	r2, #0
 8005504:	e7e3      	b.n	80054ce <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005506:	2008      	movs	r0, #8
}
 8005508:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800550a:	4608      	mov	r0, r1
}
 800550c:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800550e:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8005512:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005514:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8005518:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800551a:	d835      	bhi.n	8005588 <RI_GetRegisterGlobal+0x10c>
 800551c:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800551e:	2008      	movs	r0, #8
 8005520:	e7cf      	b.n	80054c2 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005522:	4c20      	ldr	r4, [pc, #128]	@ (80055a4 <RI_GetRegisterGlobal+0x128>)
 8005524:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8005528:	2101      	movs	r1, #1
 800552a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800552c:	b180      	cbz	r0, 8005550 <RI_GetRegisterGlobal+0xd4>
 800552e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8005532:	46a4      	mov	ip, r4
 8005534:	e008      	b.n	8005548 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 8005536:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800553a:	8819      	ldrh	r1, [r3, #0]
 800553c:	3101      	adds	r1, #1
 800553e:	b289      	uxth	r1, r1
 8005540:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005542:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8005546:	b118      	cbz	r0, 8005550 <RI_GetRegisterGlobal+0xd4>
 8005548:	4571      	cmp	r1, lr
 800554a:	d3f4      	bcc.n	8005536 <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 800554c:	2006      	movs	r0, #6
}
 800554e:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8005550:	2300      	movs	r3, #0
 8005552:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8005554:	2000      	movs	r0, #0
}
 8005556:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005558:	4c13      	ldr	r4, [pc, #76]	@ (80055a8 <RI_GetRegisterGlobal+0x12c>)
 800555a:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 800555e:	2101      	movs	r1, #1
 8005560:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005562:	2800      	cmp	r0, #0
 8005564:	d0f4      	beq.n	8005550 <RI_GetRegisterGlobal+0xd4>
 8005566:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800556a:	46a4      	mov	ip, r4
 800556c:	e009      	b.n	8005582 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 800556e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8005572:	8819      	ldrh	r1, [r3, #0]
 8005574:	3101      	adds	r1, #1
 8005576:	b289      	uxth	r1, r1
 8005578:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800557a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800557e:	2800      	cmp	r0, #0
 8005580:	d0e6      	beq.n	8005550 <RI_GetRegisterGlobal+0xd4>
 8005582:	458e      	cmp	lr, r1
 8005584:	d8f3      	bhi.n	800556e <RI_GetRegisterGlobal+0xf2>
 8005586:	e7e1      	b.n	800554c <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8005588:	4908      	ldr	r1, [pc, #32]	@ (80055ac <RI_GetRegisterGlobal+0x130>)
 800558a:	6848      	ldr	r0, [r1, #4]
 800558c:	680c      	ldr	r4, [r1, #0]
 800558e:	8909      	ldrh	r1, [r1, #8]
 8005590:	f8c2 0006 	str.w	r0, [r2, #6]
 8005594:	f8c2 4002 	str.w	r4, [r2, #2]
 8005598:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 800559a:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800559c:	220c      	movs	r2, #12
 800559e:	e790      	b.n	80054c2 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 80055a0:	2000      	movs	r0, #0
 80055a2:	e7a7      	b.n	80054f4 <RI_GetRegisterGlobal+0x78>
 80055a4:	0800be88 	.word	0x0800be88
 80055a8:	0800be64 	.word	0x0800be64
 80055ac:	0800be58 	.word	0x0800be58

080055b0 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	b090      	sub	sp, #64	@ 0x40
 80055b4:	461d      	mov	r5, r3
    switch (typeID)
 80055b6:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80055ba:	f9bd c050 	ldrsh.w	ip, [sp, #80]	@ 0x50
 80055be:	4614      	mov	r4, r2
    switch (typeID)
 80055c0:	2b20      	cmp	r3, #32
 80055c2:	d812      	bhi.n	80055ea <RI_GetRegisterMotor1+0x3a>
 80055c4:	e8df f003 	tbb	[pc, r3]
 80055c8:	11111132 	.word	0x11111132
 80055cc:	11111111 	.word	0x11111111
 80055d0:	11111173 	.word	0x11111173
 80055d4:	11111111 	.word	0x11111111
 80055d8:	1111114b 	.word	0x1111114b
 80055dc:	11111111 	.word	0x11111111
 80055e0:	1111116a 	.word	0x1111116a
 80055e4:	11111111 	.word	0x11111111
 80055e8:	14          	.byte	0x14
 80055e9:	00          	.byte	0x00
 80055ea:	2007      	movs	r0, #7
  }
 80055ec:	b010      	add	sp, #64	@ 0x40
 80055ee:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 80055f0:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80055f4:	f000 81bf 	beq.w	8005976 <RI_GetRegisterMotor1+0x3c6>
 80055f8:	f200 8085 	bhi.w	8005706 <RI_GetRegisterMotor1+0x156>
 80055fc:	28e8      	cmp	r0, #232	@ 0xe8
        rawData++;
 80055fe:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8005602:	f000 81ad 	beq.w	8005960 <RI_GetRegisterMotor1+0x3b0>
 8005606:	f200 813e 	bhi.w	8005886 <RI_GetRegisterMotor1+0x2d6>
 800560a:	2868      	cmp	r0, #104	@ 0x68
 800560c:	f000 819d 	beq.w	800594a <RI_GetRegisterMotor1+0x39a>
 8005610:	28a8      	cmp	r0, #168	@ 0xa8
 8005612:	f040 8170 	bne.w	80058f6 <RI_GetRegisterMotor1+0x346>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005616:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 800561a:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800561c:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8005620:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005622:	f200 824b 	bhi.w	8005abc <RI_GetRegisterMotor1+0x50c>
 8005626:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005628:	2008      	movs	r0, #8
 800562a:	e088      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
        if (freeSpace > 0)
 800562c:	f1bc 0f00 	cmp.w	ip, #0
 8005630:	f340 8152 	ble.w	80058d8 <RI_GetRegisterMotor1+0x328>
          switch (regID)
 8005634:	f5b0 6fa9 	cmp.w	r0, #1352	@ 0x548
 8005638:	f000 8157 	beq.w	80058ea <RI_GetRegisterMotor1+0x33a>
 800563c:	f200 814e 	bhi.w	80058dc <RI_GetRegisterMotor1+0x32c>
 8005640:	2848      	cmp	r0, #72	@ 0x48
 8005642:	f000 811c 	beq.w	800587e <RI_GetRegisterMotor1+0x2ce>
 8005646:	2888      	cmp	r0, #136	@ 0x88
 8005648:	f040 8153 	bne.w	80058f2 <RI_GetRegisterMotor1+0x342>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 800564c:	48ac      	ldr	r0, [pc, #688]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 800564e:	f7fd fcbf 	bl	8002fd0 <MCI_GetControlMode>
 8005652:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8005654:	2000      	movs	r0, #0
          *size = 1;
 8005656:	2301      	movs	r3, #1
 8005658:	802b      	strh	r3, [r5, #0]
  }
 800565a:	b010      	add	sp, #64	@ 0x40
 800565c:	bd70      	pop	{r4, r5, r6, pc}
        if (freeSpace >= 4)
 800565e:	f1bc 0f03 	cmp.w	ip, #3
 8005662:	dd4d      	ble.n	8005700 <RI_GetRegisterMotor1+0x150>
          switch (regID)
 8005664:	2898      	cmp	r0, #152	@ 0x98
 8005666:	f000 81a1 	beq.w	80059ac <RI_GetRegisterMotor1+0x3fc>
 800566a:	f240 80c2 	bls.w	80057f2 <RI_GetRegisterMotor1+0x242>
 800566e:	f640 2358 	movw	r3, #2648	@ 0xa58
 8005672:	4298      	cmp	r0, r3
 8005674:	f000 8192 	beq.w	800599c <RI_GetRegisterMotor1+0x3ec>
 8005678:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800567c:	4298      	cmp	r0, r3
 800567e:	f040 818b 	bne.w	8005998 <RI_GetRegisterMotor1+0x3e8>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8005682:	4ba0      	ldr	r3, [pc, #640]	@ (8005904 <RI_GetRegisterMotor1+0x354>)
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	f004 fcb7 	bl	8009ff8 <PQD_GetAvrgElMotorPowerW>
 800568a:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 800568e:	9b01      	ldr	r3, [sp, #4]
 8005690:	6023      	str	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8005692:	2000      	movs	r0, #0
          *size = 4;
 8005694:	2304      	movs	r3, #4
 8005696:	802b      	strh	r3, [r5, #0]
  }
 8005698:	b010      	add	sp, #64	@ 0x40
 800569a:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 800569c:	28a0      	cmp	r0, #160	@ 0xa0
 800569e:	f000 8090 	beq.w	80057c2 <RI_GetRegisterMotor1+0x212>
 80056a2:	28e0      	cmp	r0, #224	@ 0xe0
 80056a4:	d070      	beq.n	8005788 <RI_GetRegisterMotor1+0x1d8>
            *size= 0 ; /* */
 80056a6:	2300      	movs	r3, #0
 80056a8:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80056aa:	2005      	movs	r0, #5
            break;
 80056ac:	e79e      	b.n	80055ec <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 80056ae:	f1bc 0f01 	cmp.w	ip, #1
 80056b2:	dd25      	ble.n	8005700 <RI_GetRegisterMotor1+0x150>
          switch (regID)
 80056b4:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80056b8:	f000 82ec 	beq.w	8005c94 <RI_GetRegisterMotor1+0x6e4>
 80056bc:	d842      	bhi.n	8005744 <RI_GetRegisterMotor1+0x194>
 80056be:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 80056c2:	f000 82e2 	beq.w	8005c8a <RI_GetRegisterMotor1+0x6da>
 80056c6:	f200 80bf 	bhi.w	8005848 <RI_GetRegisterMotor1+0x298>
 80056ca:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 80056ce:	f000 8279 	beq.w	8005bc4 <RI_GetRegisterMotor1+0x614>
 80056d2:	f200 818e 	bhi.w	80059f2 <RI_GetRegisterMotor1+0x442>
 80056d6:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80056da:	f000 8255 	beq.w	8005b88 <RI_GetRegisterMotor1+0x5d8>
 80056de:	f200 81fa 	bhi.w	8005ad6 <RI_GetRegisterMotor1+0x526>
 80056e2:	2890      	cmp	r0, #144	@ 0x90
 80056e4:	f000 82a7 	beq.w	8005c36 <RI_GetRegisterMotor1+0x686>
 80056e8:	28d0      	cmp	r0, #208	@ 0xd0
 80056ea:	f040 82a2 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 80056ee:	4886      	ldr	r0, [pc, #536]	@ (8005908 <RI_GetRegisterMotor1+0x358>)
 80056f0:	f004 fbd2 	bl	8009e98 <PID_GetKI>
 80056f4:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80056f6:	2000      	movs	r0, #0
          *size = 2;
 80056f8:	2302      	movs	r3, #2
 80056fa:	802b      	strh	r3, [r5, #0]
  }
 80056fc:	b010      	add	sp, #64	@ 0x40
 80056fe:	bd70      	pop	{r4, r5, r6, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005700:	2008      	movs	r0, #8
  }
 8005702:	b010      	add	sp, #64	@ 0x40
 8005704:	bd70      	pop	{r4, r5, r6, pc}
        switch (regID)
 8005706:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 800570a:	f000 80d3 	beq.w	80058b4 <RI_GetRegisterMotor1+0x304>
 800570e:	f5b0 7f6a 	cmp.w	r0, #936	@ 0x3a8
 8005712:	f000 8105 	beq.w	8005920 <RI_GetRegisterMotor1+0x370>
 8005716:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 800571a:	f040 80ec 	bne.w	80058f6 <RI_GetRegisterMotor1+0x346>
            *rawSize = 4;
 800571e:	2304      	movs	r3, #4
 8005720:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8005722:	4877      	ldr	r0, [pc, #476]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 8005724:	f7fd fc5a 	bl	8002fdc <MCI_GetLastRampFinalTorque>
 8005728:	4603      	mov	r3, r0
 800572a:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800572c:	4874      	ldr	r0, [pc, #464]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 800572e:	f7fd fc59 	bl	8002fe4 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8005732:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8005734:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 8005736:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8005738:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800573a:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 800573c:	b29b      	uxth	r3, r3
 800573e:	802b      	strh	r3, [r5, #0]
  }
 8005740:	b010      	add	sp, #64	@ 0x40
 8005742:	bd70      	pop	{r4, r5, r6, pc}
          switch (regID)
 8005744:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8005748:	4298      	cmp	r0, r3
 800574a:	f000 8245 	beq.w	8005bd8 <RI_GetRegisterMotor1+0x628>
 800574e:	d85e      	bhi.n	800580e <RI_GetRegisterMotor1+0x25e>
 8005750:	f241 3390 	movw	r3, #5008	@ 0x1390
 8005754:	4298      	cmp	r0, r3
 8005756:	f000 824b 	beq.w	8005bf0 <RI_GetRegisterMotor1+0x640>
 800575a:	f200 815d 	bhi.w	8005a18 <RI_GetRegisterMotor1+0x468>
 800575e:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 8005762:	f000 821b 	beq.w	8005b9c <RI_GetRegisterMotor1+0x5ec>
 8005766:	f200 81c2 	bhi.w	8005aee <RI_GetRegisterMotor1+0x53e>
 800576a:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 800576e:	f000 8287 	beq.w	8005c80 <RI_GetRegisterMotor1+0x6d0>
 8005772:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8005776:	f040 825c 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 800577a:	4861      	ldr	r0, [pc, #388]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 800577c:	f7fd fc82 	bl	8003084 <MCI_GetValphabeta>
 8005780:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8005784:	8023      	strh	r3, [r4, #0]
              break;
 8005786:	e7b6      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8005788:	4b60      	ldr	r3, [pc, #384]	@ (800590c <RI_GetRegisterMotor1+0x35c>)
 800578a:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 800578c:	2301      	movs	r3, #1
 800578e:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8005790:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8005794:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8005798:	b17a      	cbz	r2, 80057ba <RI_GetRegisterMotor1+0x20a>
 800579a:	fa1f fc8c 	uxth.w	ip, ip
 800579e:	e008      	b.n	80057b2 <RI_GetRegisterMotor1+0x202>
    *tempdestString = *tempsrcString;
 80057a0:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80057a4:	882b      	ldrh	r3, [r5, #0]
 80057a6:	3301      	adds	r3, #1
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80057ac:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80057b0:	b11a      	cbz	r2, 80057ba <RI_GetRegisterMotor1+0x20a>
 80057b2:	459c      	cmp	ip, r3
 80057b4:	d8f4      	bhi.n	80057a0 <RI_GetRegisterMotor1+0x1f0>
    retVal = MCP_ERROR_STRING_FORMAT;
 80057b6:	2006      	movs	r0, #6
 80057b8:	e718      	b.n	80055ec <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 80057ba:	2300      	movs	r3, #0
 80057bc:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80057be:	2000      	movs	r0, #0
 80057c0:	e714      	b.n	80055ec <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80057c2:	4a53      	ldr	r2, [pc, #332]	@ (8005910 <RI_GetRegisterMotor1+0x360>)
  *size= 1U ; /* /0 is the min String size */
 80057c4:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80057c6:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 80057c8:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80057ca:	f991 2000 	ldrsb.w	r2, [r1]
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d0f3      	beq.n	80057ba <RI_GetRegisterMotor1+0x20a>
 80057d2:	fa1f fc8c 	uxth.w	ip, ip
 80057d6:	e009      	b.n	80057ec <RI_GetRegisterMotor1+0x23c>
    *tempdestString = *tempsrcString;
 80057d8:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80057dc:	882b      	ldrh	r3, [r5, #0]
 80057de:	3301      	adds	r3, #1
 80057e0:	b29b      	uxth	r3, r3
 80057e2:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80057e4:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80057e8:	2a00      	cmp	r2, #0
 80057ea:	d0e6      	beq.n	80057ba <RI_GetRegisterMotor1+0x20a>
 80057ec:	459c      	cmp	ip, r3
 80057ee:	d8f3      	bhi.n	80057d8 <RI_GetRegisterMotor1+0x228>
 80057f0:	e7e1      	b.n	80057b6 <RI_GetRegisterMotor1+0x206>
          switch (regID)
 80057f2:	2818      	cmp	r0, #24
 80057f4:	f000 80e2 	beq.w	80059bc <RI_GetRegisterMotor1+0x40c>
 80057f8:	2858      	cmp	r0, #88	@ 0x58
 80057fa:	f040 80cd 	bne.w	8005998 <RI_GetRegisterMotor1+0x3e8>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80057fe:	4840      	ldr	r0, [pc, #256]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 8005800:	f7fd fbf8 	bl	8002ff4 <MCI_GetAvrgMecSpeedUnit>
 8005804:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005808:	0040      	lsls	r0, r0, #1
 800580a:	6020      	str	r0, [r4, #0]
              break;
 800580c:	e741      	b.n	8005692 <RI_GetRegisterMotor1+0xe2>
          switch (regID)
 800580e:	f241 6310 	movw	r3, #5648	@ 0x1610
 8005812:	4298      	cmp	r0, r3
 8005814:	f000 8214 	beq.w	8005c40 <RI_GetRegisterMotor1+0x690>
 8005818:	f200 80d5 	bhi.w	80059c6 <RI_GetRegisterMotor1+0x416>
 800581c:	f241 5390 	movw	r3, #5520	@ 0x1590
 8005820:	4298      	cmp	r0, r3
 8005822:	f000 81b6 	beq.w	8005b92 <RI_GetRegisterMotor1+0x5e2>
 8005826:	f200 8173 	bhi.w	8005b10 <RI_GetRegisterMotor1+0x560>
 800582a:	f241 5310 	movw	r3, #5392	@ 0x1510
 800582e:	4298      	cmp	r0, r3
 8005830:	f000 8237 	beq.w	8005ca2 <RI_GetRegisterMotor1+0x6f2>
 8005834:	f241 5350 	movw	r3, #5456	@ 0x1550
 8005838:	4298      	cmp	r0, r3
 800583a:	f040 81fa 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 800583e:	4835      	ldr	r0, [pc, #212]	@ (8005914 <RI_GetRegisterMotor1+0x364>)
 8005840:	f004 fb38 	bl	8009eb4 <PID_GetKIDivisorPOW2>
 8005844:	8020      	strh	r0, [r4, #0]
              break;
 8005846:	e756      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005848:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 800584c:	f000 820e 	beq.w	8005c6c <RI_GetRegisterMotor1+0x6bc>
 8005850:	f200 80f8 	bhi.w	8005a44 <RI_GetRegisterMotor1+0x494>
 8005854:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8005858:	f000 81aa 	beq.w	8005bb0 <RI_GetRegisterMotor1+0x600>
 800585c:	f200 8162 	bhi.w	8005b24 <RI_GetRegisterMotor1+0x574>
 8005860:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8005864:	f000 81f1 	beq.w	8005c4a <RI_GetRegisterMotor1+0x69a>
 8005868:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 800586c:	f040 81e1 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8005870:	4823      	ldr	r0, [pc, #140]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 8005872:	f7fd fbd5 	bl	8003020 <MCI_GetIab>
 8005876:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800587a:	8023      	strh	r3, [r4, #0]
              break;
 800587c:	e73b      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800587e:	4820      	ldr	r0, [pc, #128]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 8005880:	f7fd fb52 	bl	8002f28 <MCI_GetSTMState>
              break;
 8005884:	e6e5      	b.n	8005652 <RI_GetRegisterMotor1+0xa2>
        switch (regID)
 8005886:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 800588a:	d134      	bne.n	80058f6 <RI_GetRegisterMotor1+0x346>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800588c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8005890:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8005892:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8005896:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8005898:	f240 80e6 	bls.w	8005a68 <RI_GetRegisterMotor1+0x4b8>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 800589c:	4a1e      	ldr	r2, [pc, #120]	@ (8005918 <RI_GetRegisterMotor1+0x368>)
 800589e:	6850      	ldr	r0, [r2, #4]
 80058a0:	6814      	ldr	r4, [r2, #0]
 80058a2:	6891      	ldr	r1, [r2, #8]
 80058a4:	68d2      	ldr	r2, [r2, #12]
 80058a6:	60da      	str	r2, [r3, #12]
 80058a8:	6058      	str	r0, [r3, #4]
 80058aa:	601c      	str	r4, [r3, #0]
 80058ac:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 80058ae:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 80058b0:	230e      	movs	r3, #14
 80058b2:	e744      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
            *rawSize = 4;
 80058b4:	2304      	movs	r3, #4
 80058b6:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80058b8:	4811      	ldr	r0, [pc, #68]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 80058ba:	f7fd fbcf 	bl	800305c <MCI_GetIqdref>
 80058be:	4603      	mov	r3, r0
 80058c0:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80058c2:	480f      	ldr	r0, [pc, #60]	@ (8005900 <RI_GetRegisterMotor1+0x350>)
 80058c4:	f7fd fbca 	bl	800305c <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 80058c8:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80058ca:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 80058ce:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80058d0:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 80058d2:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 80058d4:	2000      	movs	r0, #0
            break;
 80058d6:	e732      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80058d8:	4608      	mov	r0, r1
 80058da:	e687      	b.n	80055ec <RI_GetRegisterMotor1+0x3c>
          switch (regID)
 80058dc:	f5b0 6fb1 	cmp.w	r0, #1416	@ 0x588
 80058e0:	d107      	bne.n	80058f2 <RI_GetRegisterMotor1+0x342>
              *data = (uint8_t) TC_GetAlignmentStatus(&PosCtrlM1);
 80058e2:	480e      	ldr	r0, [pc, #56]	@ (800591c <RI_GetRegisterMotor1+0x36c>)
 80058e4:	f005 fdda 	bl	800b49c <TC_GetAlignmentStatus>
              break;
 80058e8:	e6b3      	b.n	8005652 <RI_GetRegisterMotor1+0xa2>
              *data = (uint8_t) TC_GetControlPositionStatus(&PosCtrlM1);
 80058ea:	480c      	ldr	r0, [pc, #48]	@ (800591c <RI_GetRegisterMotor1+0x36c>)
 80058ec:	f005 fdd2 	bl	800b494 <TC_GetControlPositionStatus>
              break;
 80058f0:	e6af      	b.n	8005652 <RI_GetRegisterMotor1+0xa2>
          switch (regID)
 80058f2:	2005      	movs	r0, #5
 80058f4:	e6af      	b.n	8005656 <RI_GetRegisterMotor1+0xa6>
        *size = (*rawSize) + 2U;
 80058f6:	8823      	ldrh	r3, [r4, #0]
 80058f8:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80058fa:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	e71e      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
 8005900:	20000008 	.word	0x20000008
 8005904:	20000038 	.word	0x20000038
 8005908:	20000230 	.word	0x20000230
 800590c:	20000398 	.word	0x20000398
 8005910:	200003a0 	.word	0x200003a0
 8005914:	200001d8 	.word	0x200001d8
 8005918:	200003a4 	.word	0x200003a4
 800591c:	2000013c 	.word	0x2000013c
            *rawSize = 8;
 8005920:	2308      	movs	r3, #8
 8005922:	8023      	strh	r3, [r4, #0]
            Position = TC_GetMoveDuration(&PosCtrlM1);   /* Does this duration make sense ? */
 8005924:	48b5      	ldr	r0, [pc, #724]	@ (8005bfc <RI_GetRegisterMotor1+0x64c>)
 8005926:	f005 fdb1 	bl	800b48c <TC_GetMoveDuration>
            Duration = TC_GetTargetPosition(&PosCtrlM1);
 800592a:	48b4      	ldr	r0, [pc, #720]	@ (8005bfc <RI_GetRegisterMotor1+0x64c>)
            Position = TC_GetMoveDuration(&PosCtrlM1);   /* Does this duration make sense ? */
 800592c:	ee10 6a10 	vmov	r6, s0
            Duration = TC_GetTargetPosition(&PosCtrlM1);
 8005930:	f005 fda8 	bl	800b484 <TC_GetTargetPosition>
        *size = (*rawSize) + 2U;
 8005934:	8823      	ldrh	r3, [r4, #0]
            (void)memcpy(rawData, &Position, 4);
 8005936:	f8c4 6002 	str.w	r6, [r4, #2]
            (void)memcpy(&rawData[4], &Duration, 4);
 800593a:	ee10 2a10 	vmov	r2, s0
        *size = (*rawSize) + 2U;
 800593e:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8005940:	2000      	movs	r0, #0
            (void)memcpy(&rawData[4], &Duration, 4);
 8005942:	f8c4 2006 	str.w	r2, [r4, #6]
        *size = (*rawSize) + 2U;
 8005946:	b29b      	uxth	r3, r3
 8005948:	e6f9      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800594a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 800594e:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005950:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8005954:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005956:	f200 808a 	bhi.w	8005a6e <RI_GetRegisterMotor1+0x4be>
 800595a:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800595c:	2008      	movs	r0, #8
 800595e:	e6ee      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005960:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8005964:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8005966:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800596a:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800596c:	f200 8099 	bhi.w	8005aa2 <RI_GetRegisterMotor1+0x4f2>
 8005970:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005972:	2008      	movs	r0, #8
 8005974:	e6e3      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8005976:	48a2      	ldr	r0, [pc, #648]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005978:	f7fd fb2c 	bl	8002fd4 <MCI_GetLastRampFinalSpeed>
 800597c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005980:	0043      	lsls	r3, r0, #1
 8005982:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8005986:	489e      	ldr	r0, [pc, #632]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005988:	f7fd fb2c 	bl	8002fe4 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 800598c:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800598e:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8005990:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8005992:	2000      	movs	r0, #0
            break;
 8005994:	2308      	movs	r3, #8
 8005996:	e6d2      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
          switch (regID)
 8005998:	2005      	movs	r0, #5
 800599a:	e67b      	b.n	8005694 <RI_GetRegisterMotor1+0xe4>
              ReadVal.Float_Val = MCI_GetCurrentPosition(pMCIN);
 800599c:	4898      	ldr	r0, [pc, #608]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 800599e:	f7fd fac5 	bl	8002f2c <MCI_GetCurrentPosition>
 80059a2:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val;
 80059a6:	9b01      	ldr	r3, [sp, #4]
 80059a8:	6023      	str	r3, [r4, #0]
              break;
 80059aa:	e672      	b.n	8005692 <RI_GetRegisterMotor1+0xe2>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80059ac:	4894      	ldr	r0, [pc, #592]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 80059ae:	f7fd fb25 	bl	8002ffc <MCI_GetMecSpeedRefUnit>
 80059b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80059b6:	0040      	lsls	r0, r0, #1
 80059b8:	6020      	str	r0, [r4, #0]
              break;
 80059ba:	e66a      	b.n	8005692 <RI_GetRegisterMotor1+0xe2>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80059bc:	4890      	ldr	r0, [pc, #576]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 80059be:	f7fd fb01 	bl	8002fc4 <MCI_GetFaultState>
 80059c2:	6020      	str	r0, [r4, #0]
              break;
 80059c4:	e665      	b.n	8005692 <RI_GetRegisterMotor1+0xe2>
          switch (regID)
 80059c6:	f241 63d0 	movw	r3, #5840	@ 0x16d0
 80059ca:	4298      	cmp	r0, r3
 80059cc:	f000 80f5 	beq.w	8005bba <RI_GetRegisterMotor1+0x60a>
 80059d0:	f200 80b3 	bhi.w	8005b3a <RI_GetRegisterMotor1+0x58a>
 80059d4:	f241 6350 	movw	r3, #5712	@ 0x1650
 80059d8:	4298      	cmp	r0, r3
 80059da:	f000 80f8 	beq.w	8005bce <RI_GetRegisterMotor1+0x61e>
 80059de:	f241 6390 	movw	r3, #5776	@ 0x1690
 80059e2:	4298      	cmp	r0, r3
 80059e4:	f040 8125 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdataU16 = PID_GetKPDivisorPOW2(&PID_PosParamsM1);
 80059e8:	4886      	ldr	r0, [pc, #536]	@ (8005c04 <RI_GetRegisterMotor1+0x654>)
 80059ea:	f004 fa5b 	bl	8009ea4 <PID_GetKPDivisorPOW2>
 80059ee:	8020      	strh	r0, [r4, #0]
              break;
 80059f0:	e681      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 80059f2:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 80059f6:	f000 80c2 	beq.w	8005b7e <RI_GetRegisterMotor1+0x5ce>
 80059fa:	f200 80b8 	bhi.w	8005b6e <RI_GetRegisterMotor1+0x5be>
 80059fe:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8005a02:	f000 8111 	beq.w	8005c28 <RI_GetRegisterMotor1+0x678>
 8005a06:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8005a0a:	f040 8112 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8005a0e:	487e      	ldr	r0, [pc, #504]	@ (8005c08 <RI_GetRegisterMotor1+0x658>)
 8005a10:	f004 fa42 	bl	8009e98 <PID_GetKI>
 8005a14:	8020      	strh	r0, [r4, #0]
              break;
 8005a16:	e66e      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005a18:	f241 4350 	movw	r3, #5200	@ 0x1450
 8005a1c:	4298      	cmp	r0, r3
 8005a1e:	f000 8120 	beq.w	8005c62 <RI_GetRegisterMotor1+0x6b2>
 8005a22:	f200 809b 	bhi.w	8005b5c <RI_GetRegisterMotor1+0x5ac>
 8005a26:	f241 33d0 	movw	r3, #5072	@ 0x13d0
 8005a2a:	4298      	cmp	r0, r3
 8005a2c:	f000 8123 	beq.w	8005c76 <RI_GetRegisterMotor1+0x6c6>
 8005a30:	f241 4310 	movw	r3, #5136	@ 0x1410
 8005a34:	4298      	cmp	r0, r3
 8005a36:	f040 80fc 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = PID_GetKD( &PID_PosParamsM1);
 8005a3a:	4872      	ldr	r0, [pc, #456]	@ (8005c04 <RI_GetRegisterMotor1+0x654>)
 8005a3c:	f004 fa56 	bl	8009eec <PID_GetKD>
 8005a40:	8020      	strh	r0, [r4, #0]
              break;
 8005a42:	e658      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005a44:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8005a48:	f000 8104 	beq.w	8005c54 <RI_GetRegisterMotor1+0x6a4>
 8005a4c:	d87e      	bhi.n	8005b4c <RI_GetRegisterMotor1+0x59c>
 8005a4e:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8005a52:	f000 80c6 	beq.w	8005be2 <RI_GetRegisterMotor1+0x632>
 8005a56:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8005a5a:	f040 80ea 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8005a5e:	4868      	ldr	r0, [pc, #416]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005a60:	f7fd fafc 	bl	800305c <MCI_GetIqdref>
 8005a64:	8020      	strh	r0, [r4, #0]
              break;
 8005a66:	e646      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
 8005a68:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8005a6a:	2008      	movs	r0, #8
 8005a6c:	e667      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8005a6e:	4a67      	ldr	r2, [pc, #412]	@ (8005c0c <RI_GetRegisterMotor1+0x65c>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8005a70:	6812      	ldr	r2, [r2, #0]
 8005a72:	f102 0c30 	add.w	ip, r2, #48	@ 0x30
 8005a76:	6814      	ldr	r4, [r2, #0]
 8005a78:	6850      	ldr	r0, [r2, #4]
 8005a7a:	6891      	ldr	r1, [r2, #8]
 8005a7c:	68d6      	ldr	r6, [r2, #12]
 8005a7e:	60de      	str	r6, [r3, #12]
 8005a80:	3210      	adds	r2, #16
 8005a82:	4562      	cmp	r2, ip
 8005a84:	601c      	str	r4, [r3, #0]
 8005a86:	6058      	str	r0, [r3, #4]
 8005a88:	6099      	str	r1, [r3, #8]
 8005a8a:	f103 0310 	add.w	r3, r3, #16
 8005a8e:	d1f2      	bne.n	8005a76 <RI_GetRegisterMotor1+0x4c6>
 8005a90:	6810      	ldr	r0, [r2, #0]
 8005a92:	6851      	ldr	r1, [r2, #4]
 8005a94:	6892      	ldr	r2, [r2, #8]
 8005a96:	609a      	str	r2, [r3, #8]
 8005a98:	6018      	str	r0, [r3, #0]
 8005a9a:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8005a9c:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8005a9e:	233e      	movs	r3, #62	@ 0x3e
 8005aa0:	e64d      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8005aa2:	4a5b      	ldr	r2, [pc, #364]	@ (8005c10 <RI_GetRegisterMotor1+0x660>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8005aa4:	6812      	ldr	r2, [r2, #0]
 8005aa6:	6810      	ldr	r0, [r2, #0]
 8005aa8:	6851      	ldr	r1, [r2, #4]
 8005aaa:	6894      	ldr	r4, [r2, #8]
 8005aac:	609c      	str	r4, [r3, #8]
 8005aae:	6018      	str	r0, [r3, #0]
 8005ab0:	6059      	str	r1, [r3, #4]
 8005ab2:	8992      	ldrh	r2, [r2, #12]
 8005ab4:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8005ab6:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8005ab8:	2310      	movs	r3, #16
 8005aba:	e640      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8005abc:	4a55      	ldr	r2, [pc, #340]	@ (8005c14 <RI_GetRegisterMotor1+0x664>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8005abe:	6812      	ldr	r2, [r2, #0]
 8005ac0:	6850      	ldr	r0, [r2, #4]
 8005ac2:	6814      	ldr	r4, [r2, #0]
 8005ac4:	6891      	ldr	r1, [r2, #8]
 8005ac6:	68d2      	ldr	r2, [r2, #12]
 8005ac8:	60da      	str	r2, [r3, #12]
 8005aca:	6058      	str	r0, [r3, #4]
 8005acc:	601c      	str	r4, [r3, #0]
 8005ace:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8005ad0:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8005ad2:	2312      	movs	r3, #18
 8005ad4:	e633      	b.n	800573e <RI_GetRegisterMotor1+0x18e>
          switch (regID)
 8005ad6:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8005ada:	d064      	beq.n	8005ba6 <RI_GetRegisterMotor1+0x5f6>
 8005adc:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8005ae0:	f040 80a7 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8005ae4:	484c      	ldr	r0, [pc, #304]	@ (8005c18 <RI_GetRegisterMotor1+0x668>)
 8005ae6:	f004 f9d7 	bl	8009e98 <PID_GetKI>
 8005aea:	8020      	strh	r0, [r4, #0]
              break;
 8005aec:	e603      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005aee:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8005af2:	f43f ae00 	beq.w	80056f6 <RI_GetRegisterMotor1+0x146>
 8005af6:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8005afa:	f43f adfc 	beq.w	80056f6 <RI_GetRegisterMotor1+0x146>
 8005afe:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 8005b02:	f040 8096 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8005b06:	4845      	ldr	r0, [pc, #276]	@ (8005c1c <RI_GetRegisterMotor1+0x66c>)
 8005b08:	f005 fa5c 	bl	800afc4 <SPD_GetS16Speed>
 8005b0c:	8020      	strh	r0, [r4, #0]
              break;
 8005b0e:	e5f2      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005b10:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8005b14:	4298      	cmp	r0, r3
 8005b16:	f040 808c 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8005b1a:	483f      	ldr	r0, [pc, #252]	@ (8005c18 <RI_GetRegisterMotor1+0x668>)
 8005b1c:	f004 f9c2 	bl	8009ea4 <PID_GetKPDivisorPOW2>
 8005b20:	8020      	strh	r0, [r4, #0]
              break;
 8005b22:	e5e8      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005b24:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8005b28:	f040 8083 	bne.w	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8005b2c:	4834      	ldr	r0, [pc, #208]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005b2e:	f7fd fa81 	bl	8003034 <MCI_GetIalphabeta>
 8005b32:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8005b36:	8023      	strh	r3, [r4, #0]
              break;
 8005b38:	e5dd      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005b3a:	f241 7310 	movw	r3, #5904	@ 0x1710
 8005b3e:	4298      	cmp	r0, r3
 8005b40:	d177      	bne.n	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdataU16 = PID_GetKDDivisorPOW2(&PID_PosParamsM1);
 8005b42:	4830      	ldr	r0, [pc, #192]	@ (8005c04 <RI_GetRegisterMotor1+0x654>)
 8005b44:	f004 f9d6 	bl	8009ef4 <PID_GetKDDivisorPOW2>
 8005b48:	8020      	strh	r0, [r4, #0]
              break;
 8005b4a:	e5d4      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005b4c:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8005b50:	d16f      	bne.n	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8005b52:	482b      	ldr	r0, [pc, #172]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005b54:	f7fd fa8c 	bl	8003070 <MCI_GetVqd>
 8005b58:	8020      	strh	r0, [r4, #0]
              break;
 8005b5a:	e5cc      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005b5c:	f241 4390 	movw	r3, #5264	@ 0x1490
 8005b60:	4298      	cmp	r0, r3
 8005b62:	d166      	bne.n	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8005b64:	482e      	ldr	r0, [pc, #184]	@ (8005c20 <RI_GetRegisterMotor1+0x670>)
 8005b66:	f004 f9a5 	bl	8009eb4 <PID_GetKIDivisorPOW2>
 8005b6a:	8020      	strh	r0, [r4, #0]
              break;
 8005b6c:	e5c3      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005b6e:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8005b72:	d15e      	bne.n	8005c32 <RI_GetRegisterMotor1+0x682>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8005b74:	482b      	ldr	r0, [pc, #172]	@ (8005c24 <RI_GetRegisterMotor1+0x674>)
 8005b76:	f003 fe27 	bl	80097c8 <VBS_GetAvBusVoltage_V>
 8005b7a:	8020      	strh	r0, [r4, #0]
              break;
 8005b7c:	e5bb      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8005b7e:	4822      	ldr	r0, [pc, #136]	@ (8005c08 <RI_GetRegisterMotor1+0x658>)
 8005b80:	f004 f9b4 	bl	8009eec <PID_GetKD>
 8005b84:	8020      	strh	r0, [r4, #0]
              break;
 8005b86:	e5b6      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8005b88:	4825      	ldr	r0, [pc, #148]	@ (8005c20 <RI_GetRegisterMotor1+0x670>)
 8005b8a:	f004 f9af 	bl	8009eec <PID_GetKD>
 8005b8e:	8020      	strh	r0, [r4, #0]
              break;
 8005b90:	e5b1      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8005b92:	481d      	ldr	r0, [pc, #116]	@ (8005c08 <RI_GetRegisterMotor1+0x658>)
 8005b94:	f004 f9ae 	bl	8009ef4 <PID_GetKDDivisorPOW2>
 8005b98:	8020      	strh	r0, [r4, #0]
              break;
 8005b9a:	e5ac      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
 8005b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8005c1c <RI_GetRegisterMotor1+0x66c>)
 8005b9e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8005ba2:	8023      	strh	r3, [r4, #0]
              break;
 8005ba4:	e5a7      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8005ba6:	481c      	ldr	r0, [pc, #112]	@ (8005c18 <RI_GetRegisterMotor1+0x668>)
 8005ba8:	f004 f972 	bl	8009e90 <PID_GetKP>
 8005bac:	8020      	strh	r0, [r4, #0]
              break;
 8005bae:	e5a2      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8005bb0:	4813      	ldr	r0, [pc, #76]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005bb2:	f7fd fa3f 	bl	8003034 <MCI_GetIalphabeta>
 8005bb6:	8020      	strh	r0, [r4, #0]
              break;
 8005bb8:	e59d      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = PID_GetKIDivisorPOW2(&PID_PosParamsM1);
 8005bba:	4812      	ldr	r0, [pc, #72]	@ (8005c04 <RI_GetRegisterMotor1+0x654>)
 8005bbc:	f004 f97a 	bl	8009eb4 <PID_GetKIDivisorPOW2>
 8005bc0:	8020      	strh	r0, [r4, #0]
              break;
 8005bc2:	e598      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8005bc4:	4814      	ldr	r0, [pc, #80]	@ (8005c18 <RI_GetRegisterMotor1+0x668>)
 8005bc6:	f004 f991 	bl	8009eec <PID_GetKD>
 8005bca:	8020      	strh	r0, [r4, #0]
              break;
 8005bcc:	e593      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8005bce:	4812      	ldr	r0, [pc, #72]	@ (8005c18 <RI_GetRegisterMotor1+0x668>)
 8005bd0:	f004 f990 	bl	8009ef4 <PID_GetKDDivisorPOW2>
 8005bd4:	8020      	strh	r0, [r4, #0]
              break;
 8005bd6:	e58e      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8005bd8:	4811      	ldr	r0, [pc, #68]	@ (8005c20 <RI_GetRegisterMotor1+0x670>)
 8005bda:	f004 f98b 	bl	8009ef4 <PID_GetKDDivisorPOW2>
 8005bde:	8020      	strh	r0, [r4, #0]
              break;
 8005be0:	e589      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8005be2:	4807      	ldr	r0, [pc, #28]	@ (8005c00 <RI_GetRegisterMotor1+0x650>)
 8005be4:	f7fd fa30 	bl	8003048 <MCI_GetIqd>
 8005be8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8005bec:	8023      	strh	r3, [r4, #0]
              break;
 8005bee:	e582      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = PID_GetKP( &PID_PosParamsM1);
 8005bf0:	4804      	ldr	r0, [pc, #16]	@ (8005c04 <RI_GetRegisterMotor1+0x654>)
 8005bf2:	f004 f94d 	bl	8009e90 <PID_GetKP>
 8005bf6:	8020      	strh	r0, [r4, #0]
              break;
 8005bf8:	e57d      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
 8005bfa:	bf00      	nop
 8005bfc:	2000013c 	.word	0x2000013c
 8005c00:	20000008 	.word	0x20000008
 8005c04:	200001ac 	.word	0x200001ac
 8005c08:	200001d8 	.word	0x200001d8
 8005c0c:	20000398 	.word	0x20000398
 8005c10:	2000039c 	.word	0x2000039c
 8005c14:	20000394 	.word	0x20000394
 8005c18:	20000204 	.word	0x20000204
 8005c1c:	2000030c 	.word	0x2000030c
 8005c20:	20000230 	.word	0x20000230
 8005c24:	2000026c 	.word	0x2000026c
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8005c28:	4820      	ldr	r0, [pc, #128]	@ (8005cac <RI_GetRegisterMotor1+0x6fc>)
 8005c2a:	f004 f931 	bl	8009e90 <PID_GetKP>
 8005c2e:	8020      	strh	r0, [r4, #0]
              break;
 8005c30:	e561      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
          switch (regID)
 8005c32:	2005      	movs	r0, #5
 8005c34:	e560      	b.n	80056f8 <RI_GetRegisterMotor1+0x148>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8005c36:	481e      	ldr	r0, [pc, #120]	@ (8005cb0 <RI_GetRegisterMotor1+0x700>)
 8005c38:	f004 f92a 	bl	8009e90 <PID_GetKP>
 8005c3c:	8020      	strh	r0, [r4, #0]
              break;
 8005c3e:	e55a      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8005c40:	481c      	ldr	r0, [pc, #112]	@ (8005cb4 <RI_GetRegisterMotor1+0x704>)
 8005c42:	f004 f937 	bl	8009eb4 <PID_GetKIDivisorPOW2>
 8005c46:	8020      	strh	r0, [r4, #0]
              break;
 8005c48:	e555      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8005c4a:	481b      	ldr	r0, [pc, #108]	@ (8005cb8 <RI_GetRegisterMotor1+0x708>)
 8005c4c:	f7fd f9e8 	bl	8003020 <MCI_GetIab>
 8005c50:	8020      	strh	r0, [r4, #0]
              break;
 8005c52:	e550      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8005c54:	4818      	ldr	r0, [pc, #96]	@ (8005cb8 <RI_GetRegisterMotor1+0x708>)
 8005c56:	f7fd fa01 	bl	800305c <MCI_GetIqdref>
 8005c5a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8005c5e:	8023      	strh	r3, [r4, #0]
              break;
 8005c60:	e549      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8005c62:	4813      	ldr	r0, [pc, #76]	@ (8005cb0 <RI_GetRegisterMotor1+0x700>)
 8005c64:	f004 f91e 	bl	8009ea4 <PID_GetKPDivisorPOW2>
 8005c68:	8020      	strh	r0, [r4, #0]
              break;
 8005c6a:	e544      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8005c6c:	4812      	ldr	r0, [pc, #72]	@ (8005cb8 <RI_GetRegisterMotor1+0x708>)
 8005c6e:	f7fd f9eb 	bl	8003048 <MCI_GetIqd>
 8005c72:	8020      	strh	r0, [r4, #0]
              break;
 8005c74:	e53f      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = PID_GetKI( &PID_PosParamsM1);
 8005c76:	4811      	ldr	r0, [pc, #68]	@ (8005cbc <RI_GetRegisterMotor1+0x70c>)
 8005c78:	f004 f90e 	bl	8009e98 <PID_GetKI>
 8005c7c:	8020      	strh	r0, [r4, #0]
              break;
 8005c7e:	e53a      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8005c80:	480d      	ldr	r0, [pc, #52]	@ (8005cb8 <RI_GetRegisterMotor1+0x708>)
 8005c82:	f7fd f9ff 	bl	8003084 <MCI_GetValphabeta>
 8005c86:	8020      	strh	r0, [r4, #0]
              break;
 8005c88:	e535      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8005c8a:	480d      	ldr	r0, [pc, #52]	@ (8005cc0 <RI_GetRegisterMotor1+0x710>)
 8005c8c:	f004 f8e2 	bl	8009e54 <NTC_GetAvTemp_C>
 8005c90:	8020      	strh	r0, [r4, #0]
              break;
 8005c92:	e530      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8005c94:	4808      	ldr	r0, [pc, #32]	@ (8005cb8 <RI_GetRegisterMotor1+0x708>)
 8005c96:	f7fd f9eb 	bl	8003070 <MCI_GetVqd>
 8005c9a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8005c9e:	8023      	strh	r3, [r4, #0]
              break;
 8005ca0:	e529      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8005ca2:	4802      	ldr	r0, [pc, #8]	@ (8005cac <RI_GetRegisterMotor1+0x6fc>)
 8005ca4:	f004 f8fe 	bl	8009ea4 <PID_GetKPDivisorPOW2>
 8005ca8:	8020      	strh	r0, [r4, #0]
              break;
 8005caa:	e524      	b.n	80056f6 <RI_GetRegisterMotor1+0x146>
 8005cac:	200001d8 	.word	0x200001d8
 8005cb0:	20000230 	.word	0x20000230
 8005cb4:	20000204 	.word	0x20000204
 8005cb8:	20000008 	.word	0x20000008
 8005cbc:	200001ac 	.word	0x200001ac
 8005cc0:	20000290 	.word	0x20000290

08005cc4 <uart_debug_print>:
//extern UART_HandleTypeDef huart2;
uint8_t uartTxBuffer[UART_TX_BUFFER_SIZE];
volatile bool uartTxDone = true;
//extern void MX_USART2_UART_Init(void);

void uart_debug_print(const char *format, ...) {
 8005cc4:	b40f      	push	{r0, r1, r2, r3}
        } else {
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
        }
    }
#endif
}
 8005cc6:	b004      	add	sp, #16
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop

08005ccc <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8005ccc:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8005cce:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 8005cd0:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd4:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005cd8:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	e841 3400 	strex	r4, r3, [r1]
 8005ce0:	2c00      	cmp	r4, #0
 8005ce2:	d1f7      	bne.n	8005cd4 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8005ce4:	68c1      	ldr	r1, [r0, #12]
 8005ce6:	4d19      	ldr	r5, [pc, #100]	@ (8005d4c <UASPEP_INIT+0x80>)
 8005ce8:	6843      	ldr	r3, [r0, #4]
 8005cea:	5c6c      	ldrb	r4, [r5, r1]
 8005cec:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8005cee:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 8005cf2:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005cf4:	2340      	movs	r3, #64	@ 0x40
 8005cf6:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8005cf8:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005d00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d04:	e841 3400 	strex	r4, r3, [r1]
 8005d08:	2c00      	cmp	r4, #0
 8005d0a:	d1f7      	bne.n	8005cfc <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005d0c:	2340      	movs	r3, #64	@ 0x40
 8005d0e:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d10:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8005d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d18:	e842 3100 	strex	r1, r3, [r2]
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	d1f7      	bne.n	8005d10 <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8005d20:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005d28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2c:	e841 3400 	strex	r4, r3, [r1]
 8005d30:	2c00      	cmp	r4, #0
 8005d32:	d1f7      	bne.n	8005d24 <UASPEP_INIT+0x58>
 8005d34:	6901      	ldr	r1, [r0, #16]
 8005d36:	6883      	ldr	r3, [r0, #8]
 8005d38:	5c69      	ldrb	r1, [r5, r1]
 8005d3a:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8005d3c:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005d40:	2140      	movs	r1, #64	@ 0x40
 8005d42:	6098      	str	r0, [r3, #8]
}
 8005d44:	bc30      	pop	{r4, r5}
 8005d46:	6211      	str	r1, [r2, #32]
 8005d48:	4770      	bx	lr
 8005d4a:	bf00      	nop
 8005d4c:	0800bfa4 	.word	0x0800bfa4

08005d50 <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005d50:	6903      	ldr	r3, [r0, #16]
 8005d52:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8005d54:	b410      	push	{r4}
 8005d56:	4c0b      	ldr	r4, [pc, #44]	@ (8005d84 <UASPEP_CFG_TRANSMISSION+0x34>)
 8005d58:	5ce3      	ldrb	r3, [r4, r3]
 8005d5a:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005d5c:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005d5e:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005d62:	d40c      	bmi.n	8005d7e <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005d64:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8005d68:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005d6c:	f36f 010f 	bfc	r1, #0, #16
 8005d70:	430a      	orrs	r2, r1
 8005d72:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005d76:	58c2      	ldr	r2, [r0, r3]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8005d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	0800bfa4 	.word	0x0800bfa4

08005d88 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8005d88:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005d8a:	68c3      	ldr	r3, [r0, #12]
 8005d8c:	4c0c      	ldr	r4, [pc, #48]	@ (8005dc0 <UASPEP_CFG_RECEPTION+0x38>)
 8005d8e:	6840      	ldr	r0, [r0, #4]
 8005d90:	5ce3      	ldrb	r3, [r4, r3]
 8005d92:	58c4      	ldr	r4, [r0, r3]
 8005d94:	eb00 0c03 	add.w	ip, r0, r3
 8005d98:	f024 0401 	bic.w	r4, r4, #1
 8005d9c:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005d9e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8005da2:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8005da6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005daa:	f36f 010f 	bfc	r1, #0, #16
 8005dae:	4311      	orrs	r1, r2
 8005db0:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005db4:	58c2      	ldr	r2, [r0, r3]
 8005db6:	f042 0201 	orr.w	r2, r2, #1
 8005dba:	50c2      	str	r2, [r0, r3]
 8005dbc:	4770      	bx	lr
 8005dbe:	bf00      	nop
 8005dc0:	0800bfa4 	.word	0x0800bfa4

08005dc4 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8005dc4:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005dc6:	2310      	movs	r3, #16
 8005dc8:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dca:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005dce:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd2:	e842 3100 	strex	r1, r3, [r2]
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	d1f7      	bne.n	8005dca <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8005dda:	4770      	bx	lr

08005ddc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005ddc:	4a03      	ldr	r2, [pc, #12]	@ (8005dec <SystemInit+0x10>)
 8005dde:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005de2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005de6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005dea:	4770      	bx	lr
 8005dec:	e000ed00 	.word	0xe000ed00

08005df0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005df0:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005df2:	4b0f      	ldr	r3, [pc, #60]	@ (8005e30 <HAL_InitTick+0x40>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	b90b      	cbnz	r3, 8005dfc <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8005df8:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8005dfa:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005dfc:	490d      	ldr	r1, [pc, #52]	@ (8005e34 <HAL_InitTick+0x44>)
 8005dfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005e02:	4605      	mov	r5, r0
 8005e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e08:	6808      	ldr	r0, [r1, #0]
 8005e0a:	fbb0 f0f3 	udiv	r0, r0, r3
 8005e0e:	f001 f83f 	bl	8006e90 <HAL_SYSTICK_Config>
 8005e12:	4604      	mov	r4, r0
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d1ef      	bne.n	8005df8 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005e18:	2d0f      	cmp	r5, #15
 8005e1a:	d8ed      	bhi.n	8005df8 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f04f 30ff 	mov.w	r0, #4294967295
 8005e24:	f000 ffd8 	bl	8006dd8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005e28:	4b03      	ldr	r3, [pc, #12]	@ (8005e38 <HAL_InitTick+0x48>)
 8005e2a:	4620      	mov	r0, r4
 8005e2c:	601d      	str	r5, [r3, #0]
}
 8005e2e:	bd38      	pop	{r3, r4, r5, pc}
 8005e30:	20000480 	.word	0x20000480
 8005e34:	2000047c 	.word	0x2000047c
 8005e38:	20000484 	.word	0x20000484

08005e3c <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e3c:	4a0a      	ldr	r2, [pc, #40]	@ (8005e68 <HAL_Init+0x2c>)
 8005e3e:	6813      	ldr	r3, [r2, #0]
 8005e40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8005e44:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e46:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005e48:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005e4a:	f000 ffb3 	bl	8006db4 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005e4e:	2004      	movs	r0, #4
 8005e50:	f7ff ffce 	bl	8005df0 <HAL_InitTick>
 8005e54:	b110      	cbz	r0, 8005e5c <HAL_Init+0x20>
    status = HAL_ERROR;
 8005e56:	2401      	movs	r4, #1
}
 8005e58:	4620      	mov	r0, r4
 8005e5a:	bd10      	pop	{r4, pc}
 8005e5c:	4604      	mov	r4, r0
    HAL_MspInit();
 8005e5e:	f7fe fc6b 	bl	8004738 <HAL_MspInit>
}
 8005e62:	4620      	mov	r0, r4
 8005e64:	bd10      	pop	{r4, pc}
 8005e66:	bf00      	nop
 8005e68:	40022000 	.word	0x40022000

08005e6c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005e6c:	4a03      	ldr	r2, [pc, #12]	@ (8005e7c <HAL_IncTick+0x10>)
 8005e6e:	4904      	ldr	r1, [pc, #16]	@ (8005e80 <HAL_IncTick+0x14>)
 8005e70:	6813      	ldr	r3, [r2, #0]
 8005e72:	6809      	ldr	r1, [r1, #0]
 8005e74:	440b      	add	r3, r1
 8005e76:	6013      	str	r3, [r2, #0]
}
 8005e78:	4770      	bx	lr
 8005e7a:	bf00      	nop
 8005e7c:	20001c54 	.word	0x20001c54
 8005e80:	20000480 	.word	0x20000480

08005e84 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005e84:	4b01      	ldr	r3, [pc, #4]	@ (8005e8c <HAL_GetTick+0x8>)
 8005e86:	6818      	ldr	r0, [r3, #0]
}
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	20001c54 	.word	0x20001c54

08005e90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005e90:	b538      	push	{r3, r4, r5, lr}
 8005e92:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005e94:	f7ff fff6 	bl	8005e84 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005e98:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005e9a:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005e9c:	d002      	beq.n	8005ea4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005e9e:	4b04      	ldr	r3, [pc, #16]	@ (8005eb0 <HAL_Delay+0x20>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005ea4:	f7ff ffee 	bl	8005e84 <HAL_GetTick>
 8005ea8:	1b40      	subs	r0, r0, r5
 8005eaa:	42a0      	cmp	r0, r4
 8005eac:	d3fa      	bcc.n	8005ea4 <HAL_Delay+0x14>
  {
  }
}
 8005eae:	bd38      	pop	{r3, r4, r5, pc}
 8005eb0:	20000480 	.word	0x20000480

08005eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005eb4:	b530      	push	{r4, r5, lr}
 8005eb6:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	f000 80aa 	beq.w	8006016 <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005ec2:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8005ec4:	4604      	mov	r4, r0
 8005ec6:	2d00      	cmp	r5, #0
 8005ec8:	f000 80aa 	beq.w	8006020 <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005ecc:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005ece:	6893      	ldr	r3, [r2, #8]
 8005ed0:	009d      	lsls	r5, r3, #2
 8005ed2:	d505      	bpl.n	8005ee0 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ed4:	6893      	ldr	r3, [r2, #8]
 8005ed6:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005eda:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005ede:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005ee0:	6893      	ldr	r3, [r2, #8]
 8005ee2:	00d8      	lsls	r0, r3, #3
 8005ee4:	d419      	bmi.n	8005f1a <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005ee6:	4b68      	ldr	r3, [pc, #416]	@ (8006088 <HAL_ADC_Init+0x1d4>)
 8005ee8:	4868      	ldr	r0, [pc, #416]	@ (800608c <HAL_ADC_Init+0x1d8>)
 8005eea:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005eec:	6891      	ldr	r1, [r2, #8]
 8005eee:	099b      	lsrs	r3, r3, #6
 8005ef0:	fba0 0303 	umull	r0, r3, r0, r3
 8005ef4:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8005ef8:	099b      	lsrs	r3, r3, #6
 8005efa:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005efe:	3301      	adds	r3, #1
 8005f00:	005b      	lsls	r3, r3, #1
 8005f02:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8005f06:	6091      	str	r1, [r2, #8]
 8005f08:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005f0a:	9b01      	ldr	r3, [sp, #4]
 8005f0c:	b12b      	cbz	r3, 8005f1a <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005f0e:	9b01      	ldr	r3, [sp, #4]
 8005f10:	3b01      	subs	r3, #1
 8005f12:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005f14:	9b01      	ldr	r3, [sp, #4]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1f9      	bne.n	8005f0e <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f1a:	6893      	ldr	r3, [r2, #8]
 8005f1c:	00d9      	lsls	r1, r3, #3
 8005f1e:	d47d      	bmi.n	800601c <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f20:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005f22:	f043 0310 	orr.w	r3, r3, #16
 8005f26:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f28:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005f2a:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f2c:	4303      	orrs	r3, r0
 8005f2e:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005f30:	6893      	ldr	r3, [r2, #8]
 8005f32:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005f36:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005f38:	d169      	bne.n	800600e <HAL_ADC_Init+0x15a>
 8005f3a:	06db      	lsls	r3, r3, #27
 8005f3c:	d467      	bmi.n	800600e <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005f3e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005f40:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005f44:	f043 0302 	orr.w	r3, r3, #2
 8005f48:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f4a:	6893      	ldr	r3, [r2, #8]
 8005f4c:	07dd      	lsls	r5, r3, #31
 8005f4e:	d409      	bmi.n	8005f64 <HAL_ADC_Init+0xb0>
 8005f50:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	f013 0f01 	tst.w	r3, #1
 8005f5a:	4b4d      	ldr	r3, [pc, #308]	@ (8006090 <HAL_ADC_Init+0x1dc>)
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	d101      	bne.n	8005f64 <HAL_ADC_Init+0xb0>
 8005f60:	07d9      	lsls	r1, r3, #31
 8005f62:	d57a      	bpl.n	800605a <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8005f64:	68e5      	ldr	r5, [r4, #12]
 8005f66:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005f68:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8005f6c:	432b      	orrs	r3, r5
 8005f6e:	68a5      	ldr	r5, [r4, #8]
 8005f70:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f72:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f74:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8005f76:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005f7a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005f7e:	d055      	beq.n	800602c <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005f80:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005f82:	b121      	cbz	r1, 8005f8e <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8005f84:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f86:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005f8a:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005f8c:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005f8e:	68d5      	ldr	r5, [r2, #12]
 8005f90:	4940      	ldr	r1, [pc, #256]	@ (8006094 <HAL_ADC_Init+0x1e0>)
 8005f92:	4029      	ands	r1, r5
 8005f94:	4319      	orrs	r1, r3
 8005f96:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005f98:	6913      	ldr	r3, [r2, #16]
 8005f9a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005f9c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005fa0:	430b      	orrs	r3, r1
 8005fa2:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fa4:	6893      	ldr	r3, [r2, #8]
 8005fa6:	071b      	lsls	r3, r3, #28
 8005fa8:	d422      	bmi.n	8005ff0 <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005faa:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005fac:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005fb0:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005fb2:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005fb6:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005fb8:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005fbc:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005fc0:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 8005fc2:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005fc4:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005fc6:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	d03c      	beq.n	8006046 <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005fcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005fd0:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005fd2:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005fd6:	f36f 030d 	bfc	r3, #0, #14
 8005fda:	430b      	orrs	r3, r1
 8005fdc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005fe0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d040      	beq.n	800606a <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005fe8:	6913      	ldr	r3, [r2, #16]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ff0:	6963      	ldr	r3, [r4, #20]
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d01f      	beq.n	8006036 <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ff6:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005ff8:	f023 030f 	bic.w	r3, r3, #15
 8005ffc:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ffe:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006000:	f023 0303 	bic.w	r3, r3, #3
 8006004:	f043 0301 	orr.w	r3, r3, #1
 8006008:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 800600a:	b003      	add	sp, #12
 800600c:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800600e:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006010:	f043 0310 	orr.w	r3, r3, #16
 8006014:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8006016:	2001      	movs	r0, #1
}
 8006018:	b003      	add	sp, #12
 800601a:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800601c:	2000      	movs	r0, #0
 800601e:	e787      	b.n	8005f30 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8006020:	f7fe fbaa 	bl	8004778 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8006024:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8006026:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 800602a:	e74f      	b.n	8005ecc <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800602c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800602e:	3901      	subs	r1, #1
 8006030:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8006034:	e7a4      	b.n	8005f80 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006036:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8006038:	6a23      	ldr	r3, [r4, #32]
 800603a:	f021 010f 	bic.w	r1, r1, #15
 800603e:	3b01      	subs	r3, #1
 8006040:	430b      	orrs	r3, r1
 8006042:	6313      	str	r3, [r2, #48]	@ 0x30
 8006044:	e7db      	b.n	8005ffe <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800604a:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 800604c:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8006050:	f36f 030d 	bfc	r3, #0, #14
 8006054:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8006058:	e7c2      	b.n	8005fe0 <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800605a:	490f      	ldr	r1, [pc, #60]	@ (8006098 <HAL_ADC_Init+0x1e4>)
 800605c:	6865      	ldr	r5, [r4, #4]
 800605e:	688b      	ldr	r3, [r1, #8]
 8006060:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8006064:	432b      	orrs	r3, r5
 8006066:	608b      	str	r3, [r1, #8]
}
 8006068:	e77c      	b.n	8005f64 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 800606a:	6911      	ldr	r1, [r2, #16]
 800606c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800606e:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8006070:	f36f 018a 	bfc	r1, #2, #9
 8006074:	432b      	orrs	r3, r5
 8006076:	430b      	orrs	r3, r1
 8006078:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800607a:	430b      	orrs	r3, r1
 800607c:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 800607e:	430b      	orrs	r3, r1
 8006080:	f043 0301 	orr.w	r3, r3, #1
 8006084:	6113      	str	r3, [r2, #16]
 8006086:	e7b3      	b.n	8005ff0 <HAL_ADC_Init+0x13c>
 8006088:	2000047c 	.word	0x2000047c
 800608c:	053e2d63 	.word	0x053e2d63
 8006090:	50000100 	.word	0x50000100
 8006094:	fff04007 	.word	0xfff04007
 8006098:	50000300 	.word	0x50000300

0800609c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800609c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060a0:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 80060a4:	b082      	sub	sp, #8
 80060a6:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 80060a8:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 80060aa:	f04f 0000 	mov.w	r0, #0
 80060ae:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80060b0:	f000 812d 	beq.w	800630e <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80060b4:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 80060b6:	2001      	movs	r0, #1
 80060b8:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060bc:	6894      	ldr	r4, [r2, #8]
 80060be:	0764      	lsls	r4, r4, #29
 80060c0:	d455      	bmi.n	800616e <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80060c2:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80060c4:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 80060c8:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80060cc:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80060d0:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80060d2:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80060d6:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80060da:	f854 500e 	ldr.w	r5, [r4, lr]
 80060de:	261f      	movs	r6, #31
 80060e0:	fa00 f00c 	lsl.w	r0, r0, ip
 80060e4:	fa06 fc0c 	lsl.w	ip, r6, ip
 80060e8:	ea25 0c0c 	bic.w	ip, r5, ip
 80060ec:	ea40 000c 	orr.w	r0, r0, ip
 80060f0:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80060f4:	6890      	ldr	r0, [r2, #8]
 80060f6:	0747      	lsls	r7, r0, #29
 80060f8:	d543      	bpl.n	8006182 <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80060fa:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80060fc:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060fe:	6894      	ldr	r4, [r2, #8]
 8006100:	07e5      	lsls	r5, r4, #31
 8006102:	d412      	bmi.n	800612a <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006104:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8006106:	4cb0      	ldr	r4, [pc, #704]	@ (80063c8 <HAL_ADC_ConfigChannel+0x32c>)
 8006108:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 800610c:	f006 0718 	and.w	r7, r6, #24
 8006110:	40fc      	lsrs	r4, r7
 8006112:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8006116:	4004      	ands	r4, r0
 8006118:	ea25 0507 	bic.w	r5, r5, r7
 800611c:	432c      	orrs	r4, r5
 800611e:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006122:	4caa      	ldr	r4, [pc, #680]	@ (80063cc <HAL_ADC_ConfigChannel+0x330>)
 8006124:	42a6      	cmp	r6, r4
 8006126:	f000 80a2 	beq.w	800626e <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800612a:	49a9      	ldr	r1, [pc, #676]	@ (80063d0 <HAL_ADC_ConfigChannel+0x334>)
 800612c:	4208      	tst	r0, r1
 800612e:	d01c      	beq.n	800616a <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006130:	4ca8      	ldr	r4, [pc, #672]	@ (80063d4 <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006132:	4da9      	ldr	r5, [pc, #676]	@ (80063d8 <HAL_ADC_ConfigChannel+0x33c>)
 8006134:	68a1      	ldr	r1, [r4, #8]
 8006136:	42a8      	cmp	r0, r5
 8006138:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 800613c:	d074      	beq.n	8006228 <HAL_ADC_ConfigChannel+0x18c>
 800613e:	4da7      	ldr	r5, [pc, #668]	@ (80063dc <HAL_ADC_ConfigChannel+0x340>)
 8006140:	42a8      	cmp	r0, r5
 8006142:	d071      	beq.n	8006228 <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006144:	4da6      	ldr	r5, [pc, #664]	@ (80063e0 <HAL_ADC_ConfigChannel+0x344>)
 8006146:	42a8      	cmp	r0, r5
 8006148:	f000 80e5 	beq.w	8006316 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800614c:	4da5      	ldr	r5, [pc, #660]	@ (80063e4 <HAL_ADC_ConfigChannel+0x348>)
 800614e:	42a8      	cmp	r0, r5
 8006150:	d10b      	bne.n	800616a <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006152:	0249      	lsls	r1, r1, #9
 8006154:	d409      	bmi.n	800616a <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006156:	49a4      	ldr	r1, [pc, #656]	@ (80063e8 <HAL_ADC_ConfigChannel+0x34c>)
 8006158:	428a      	cmp	r2, r1
 800615a:	d006      	beq.n	800616a <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800615c:	68a2      	ldr	r2, [r4, #8]
 800615e:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8006162:	4332      	orrs	r2, r6
 8006164:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8006168:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800616a:	2000      	movs	r0, #0
 800616c:	e003      	b.n	8006176 <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800616e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006170:	f042 0220 	orr.w	r2, r2, #32
 8006174:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 800617c:	b002      	add	sp, #8
 800617e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006182:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006184:	6808      	ldr	r0, [r1, #0]
 8006186:	0726      	lsls	r6, r4, #28
 8006188:	d4b9      	bmi.n	80060fe <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800618a:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 800618c:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8006190:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006192:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8006194:	40b4      	lsls	r4, r6
 8006196:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800619a:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 800619e:	ea6f 0404 	mvn.w	r4, r4
 80061a2:	f000 8107 	beq.w	80063b4 <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80061a6:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 80061aa:	40b5      	lsls	r5, r6
 80061ac:	583e      	ldr	r6, [r7, r0]
 80061ae:	4034      	ands	r4, r6
 80061b0:	432c      	orrs	r4, r5
 80061b2:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80061b4:	6950      	ldr	r0, [r2, #20]
 80061b6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80061ba:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80061bc:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80061c0:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80061c2:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061c4:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80061c6:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80061c8:	f000 80c8 	beq.w	800635c <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80061cc:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80061d0:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80061d2:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 80061d6:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061da:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 80061de:	4d83      	ldr	r5, [pc, #524]	@ (80063ec <HAL_ADC_ConfigChannel+0x350>)
 80061e0:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 80061e4:	ea0c 0505 	and.w	r5, ip, r5
 80061e8:	433d      	orrs	r5, r7
 80061ea:	4328      	orrs	r0, r5
 80061ec:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80061f0:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80061f4:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80061f6:	698e      	ldr	r6, [r1, #24]
 80061f8:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80061fc:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8006200:	4330      	orrs	r0, r6
 8006202:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006206:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8006208:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 800620a:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 800620e:	f1a5 0501 	sub.w	r5, r5, #1
 8006212:	fab5 f585 	clz	r5, r5
 8006216:	096d      	lsrs	r5, r5, #5
 8006218:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 800621c:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8006220:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006224:	6808      	ldr	r0, [r1, #0]
}
 8006226:	e76a      	b.n	80060fe <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006228:	020c      	lsls	r4, r1, #8
 800622a:	d49e      	bmi.n	800616a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800622c:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8006230:	d19b      	bne.n	800616a <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006232:	4968      	ldr	r1, [pc, #416]	@ (80063d4 <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006234:	486e      	ldr	r0, [pc, #440]	@ (80063f0 <HAL_ADC_ConfigChannel+0x354>)
 8006236:	688a      	ldr	r2, [r1, #8]
 8006238:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800623c:	4332      	orrs	r2, r6
 800623e:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8006242:	608a      	str	r2, [r1, #8]
 8006244:	6802      	ldr	r2, [r0, #0]
 8006246:	496b      	ldr	r1, [pc, #428]	@ (80063f4 <HAL_ADC_ConfigChannel+0x358>)
 8006248:	0992      	lsrs	r2, r2, #6
 800624a:	fba1 1202 	umull	r1, r2, r1, r2
 800624e:	0992      	lsrs	r2, r2, #6
 8006250:	3201      	adds	r2, #1
 8006252:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006256:	0092      	lsls	r2, r2, #2
 8006258:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800625a:	9a01      	ldr	r2, [sp, #4]
 800625c:	2a00      	cmp	r2, #0
 800625e:	d084      	beq.n	800616a <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8006260:	9a01      	ldr	r2, [sp, #4]
 8006262:	3a01      	subs	r2, #1
 8006264:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006266:	9a01      	ldr	r2, [sp, #4]
 8006268:	2a00      	cmp	r2, #0
 800626a:	d1f9      	bne.n	8006260 <HAL_ADC_ConfigChannel+0x1c4>
 800626c:	e77d      	b.n	800616a <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800626e:	2f00      	cmp	r7, #0
 8006270:	d060      	beq.n	8006334 <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006276:	2c00      	cmp	r4, #0
 8006278:	f000 80be 	beq.w	80063f8 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800627c:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006280:	3401      	adds	r4, #1
 8006282:	f004 041f 	and.w	r4, r4, #31
 8006286:	2c09      	cmp	r4, #9
 8006288:	f240 80b6 	bls.w	80063f8 <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800628c:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006290:	2c00      	cmp	r4, #0
 8006292:	f000 8157 	beq.w	8006544 <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 8006296:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800629a:	3401      	adds	r4, #1
 800629c:	06a4      	lsls	r4, r4, #26
 800629e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062a2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80062a6:	2d00      	cmp	r5, #0
 80062a8:	f000 8156 	beq.w	8006558 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 80062ac:	fab5 f585 	clz	r5, r5
 80062b0:	3501      	adds	r5, #1
 80062b2:	f005 051f 	and.w	r5, r5, #31
 80062b6:	2601      	movs	r6, #1
 80062b8:	fa06 f505 	lsl.w	r5, r6, r5
 80062bc:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062be:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80062c2:	2800      	cmp	r0, #0
 80062c4:	f000 8146 	beq.w	8006554 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 80062c8:	fab0 f080 	clz	r0, r0
 80062cc:	1c45      	adds	r5, r0, #1
 80062ce:	f005 051f 	and.w	r5, r5, #31
 80062d2:	2003      	movs	r0, #3
 80062d4:	f06f 061d 	mvn.w	r6, #29
 80062d8:	fb10 6005 	smlabb	r0, r0, r5, r6
 80062dc:	0500      	lsls	r0, r0, #20
 80062de:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80062e2:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80062e4:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80062e6:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80062e8:	f005 0504 	and.w	r5, r5, #4
 80062ec:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80062f0:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80062f4:	fa04 f700 	lsl.w	r7, r4, r0
 80062f8:	f04f 0c07 	mov.w	ip, #7
 80062fc:	5974      	ldr	r4, [r6, r5]
 80062fe:	fa0c f000 	lsl.w	r0, ip, r0
 8006302:	ea24 0000 	bic.w	r0, r4, r0
 8006306:	4338      	orrs	r0, r7
 8006308:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800630a:	6808      	ldr	r0, [r1, #0]
}
 800630c:	e70d      	b.n	800612a <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 800630e:	2002      	movs	r0, #2
}
 8006310:	b002      	add	sp, #8
 8006312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006316:	01c8      	lsls	r0, r1, #7
 8006318:	f53f af27 	bmi.w	800616a <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800631c:	4932      	ldr	r1, [pc, #200]	@ (80063e8 <HAL_ADC_ConfigChannel+0x34c>)
 800631e:	428a      	cmp	r2, r1
 8006320:	f43f af23 	beq.w	800616a <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006324:	68a2      	ldr	r2, [r4, #8]
 8006326:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800632a:	4332      	orrs	r2, r6
 800632c:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006330:	60a2      	str	r2, [r4, #8]
}
 8006332:	e71a      	b.n	800616a <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006334:	0e80      	lsrs	r0, r0, #26
 8006336:	3001      	adds	r0, #1
 8006338:	f000 051f 	and.w	r5, r0, #31
 800633c:	2401      	movs	r4, #1
 800633e:	0680      	lsls	r0, r0, #26
 8006340:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8006344:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006346:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006348:	ea44 0400 	orr.w	r4, r4, r0
 800634c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006350:	d977      	bls.n	8006442 <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006352:	381e      	subs	r0, #30
 8006354:	0500      	lsls	r0, r0, #20
 8006356:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 800635a:	e7c2      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800635c:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 800635e:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006360:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006364:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006368:	2d00      	cmp	r5, #0
 800636a:	d16c      	bne.n	8006446 <HAL_ADC_ConfigChannel+0x3aa>
 800636c:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006370:	4284      	cmp	r4, r0
 8006372:	f000 80a0 	beq.w	80064b6 <HAL_ADC_ConfigChannel+0x41a>
 8006376:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8006378:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800637a:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800637e:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006382:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8006386:	4285      	cmp	r5, r0
 8006388:	f000 80c0 	beq.w	800650c <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800638c:	68a5      	ldr	r5, [r4, #8]
 800638e:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006390:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006394:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006398:	4285      	cmp	r5, r0
 800639a:	f000 80a1 	beq.w	80064e0 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800639e:	68e5      	ldr	r5, [r4, #12]
 80063a0:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063a2:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063a6:	f3c5 6484 	ubfx	r4, r5, #26, #5
 80063aa:	42a0      	cmp	r0, r4
 80063ac:	f000 80c4 	beq.w	8006538 <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80063b0:	4638      	mov	r0, r7
 80063b2:	e6a4      	b.n	80060fe <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80063b4:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80063b8:	5835      	ldr	r5, [r6, r0]
 80063ba:	402c      	ands	r4, r5
 80063bc:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80063be:	6950      	ldr	r0, [r2, #20]
 80063c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80063c4:	6150      	str	r0, [r2, #20]
}
 80063c6:	e6f9      	b.n	80061bc <HAL_ADC_ConfigChannel+0x120>
 80063c8:	0007ffff 	.word	0x0007ffff
 80063cc:	407f0000 	.word	0x407f0000
 80063d0:	80080000 	.word	0x80080000
 80063d4:	50000300 	.word	0x50000300
 80063d8:	c3210000 	.word	0xc3210000
 80063dc:	90c00010 	.word	0x90c00010
 80063e0:	c7520000 	.word	0xc7520000
 80063e4:	cb840000 	.word	0xcb840000
 80063e8:	50000100 	.word	0x50000100
 80063ec:	03fff000 	.word	0x03fff000
 80063f0:	2000047c 	.word	0x2000047c
 80063f4:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063f8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80063fc:	2c00      	cmp	r4, #0
 80063fe:	f000 80b7 	beq.w	8006570 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8006402:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006406:	3401      	adds	r4, #1
 8006408:	06a4      	lsls	r4, r4, #26
 800640a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800640e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006412:	2d00      	cmp	r5, #0
 8006414:	f000 80aa 	beq.w	800656c <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8006418:	fab5 f585 	clz	r5, r5
 800641c:	3501      	adds	r5, #1
 800641e:	f005 051f 	and.w	r5, r5, #31
 8006422:	2601      	movs	r6, #1
 8006424:	fa06 f505 	lsl.w	r5, r6, r5
 8006428:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642a:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800642e:	2800      	cmp	r0, #0
 8006430:	f000 8099 	beq.w	8006566 <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8006434:	fab0 f080 	clz	r0, r0
 8006438:	3001      	adds	r0, #1
 800643a:	f000 001f 	and.w	r0, r0, #31
 800643e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8006442:	0500      	lsls	r0, r0, #20
 8006444:	e74d      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006446:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800644a:	b11d      	cbz	r5, 8006454 <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 800644c:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006450:	42ac      	cmp	r4, r5
 8006452:	d030      	beq.n	80064b6 <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006454:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8006456:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006458:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800645c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006460:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006464:	fa97 f6a7 	rbit	r6, r7
 8006468:	f104 0c08 	add.w	ip, r4, #8
 800646c:	46e0      	mov	r8, ip
  if (value == 0U)
 800646e:	2e00      	cmp	r6, #0
 8006470:	d074      	beq.n	800655c <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8006472:	fab6 f686 	clz	r6, r6
 8006476:	42ae      	cmp	r6, r5
 8006478:	d04a      	beq.n	8006510 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800647a:	f8dc 5000 	ldr.w	r5, [ip]
 800647e:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006482:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800648a:	f104 060c 	add.w	r6, r4, #12
 800648e:	46b0      	mov	r8, r6
  if (value == 0U)
 8006490:	f1be 0f00 	cmp.w	lr, #0
 8006494:	d059      	beq.n	800654a <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8006496:	fabe fe8e 	clz	lr, lr
 800649a:	45ae      	cmp	lr, r5
 800649c:	d022      	beq.n	80064e4 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800649e:	6834      	ldr	r4, [r6, #0]
 80064a0:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064a2:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a6:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 80064aa:	2d00      	cmp	r5, #0
 80064ac:	f43f ae27 	beq.w	80060fe <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 80064b0:	fab5 f085 	clz	r0, r5
 80064b4:	e779      	b.n	80063aa <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 80064b6:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80064b8:	4614      	mov	r4, r2
 80064ba:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80064be:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80064c2:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064c4:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80064c6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80064c8:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064cc:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80064d0:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80064d4:	4638      	mov	r0, r7
 80064d6:	2e00      	cmp	r6, #0
 80064d8:	d1c4      	bne.n	8006464 <HAL_ADC_ConfigChannel+0x3c8>
 80064da:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80064de:	e752      	b.n	8006386 <HAL_ADC_ConfigChannel+0x2ea>
 80064e0:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80064e4:	f8dc 0000 	ldr.w	r0, [ip]
 80064e8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80064ec:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80064f0:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064f2:	68e0      	ldr	r0, [r4, #12]
 80064f4:	68e4      	ldr	r4, [r4, #12]
 80064f6:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064fa:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064fc:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006500:	4638      	mov	r0, r7
 8006502:	2d00      	cmp	r5, #0
 8006504:	d1cf      	bne.n	80064a6 <HAL_ADC_ConfigChannel+0x40a>
 8006506:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800650a:	e74e      	b.n	80063aa <HAL_ADC_ConfigChannel+0x30e>
 800650c:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 8006510:	f8de 0000 	ldr.w	r0, [lr]
 8006514:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006518:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800651c:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800651e:	68a0      	ldr	r0, [r4, #8]
 8006520:	68a5      	ldr	r5, [r4, #8]
 8006522:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006526:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006528:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800652c:	4638      	mov	r0, r7
 800652e:	2e00      	cmp	r6, #0
 8006530:	d1a9      	bne.n	8006486 <HAL_ADC_ConfigChannel+0x3ea>
 8006532:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8006536:	e72f      	b.n	8006398 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8006538:	6830      	ldr	r0, [r6, #0]
 800653a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800653e:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006540:	6808      	ldr	r0, [r1, #0]
}
 8006542:	e5dc      	b.n	80060fe <HAL_ADC_ConfigChannel+0x62>
 8006544:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8006548:	e6ab      	b.n	80062a2 <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800654a:	68e5      	ldr	r5, [r4, #12]
 800654c:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800654e:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8006552:	e7a8      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x40a>
 8006554:	4808      	ldr	r0, [pc, #32]	@ (8006578 <HAL_ADC_ConfigChannel+0x4dc>)
 8006556:	e6c4      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x246>
 8006558:	2502      	movs	r5, #2
 800655a:	e6af      	b.n	80062bc <HAL_ADC_ConfigChannel+0x220>
 800655c:	68a5      	ldr	r5, [r4, #8]
 800655e:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006560:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006564:	e78f      	b.n	8006486 <HAL_ADC_ConfigChannel+0x3ea>
 8006566:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 800656a:	e6ba      	b.n	80062e2 <HAL_ADC_ConfigChannel+0x246>
 800656c:	2502      	movs	r5, #2
 800656e:	e75b      	b.n	8006428 <HAL_ADC_ConfigChannel+0x38c>
 8006570:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8006574:	e74b      	b.n	800640e <HAL_ADC_ConfigChannel+0x372>
 8006576:	bf00      	nop
 8006578:	fe500000 	.word	0xfe500000

0800657c <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 800657c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006580:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8006584:	b083      	sub	sp, #12
 8006586:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8006588:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 800658a:	f04f 0000 	mov.w	r0, #0
 800658e:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8006590:	f000 8175 	beq.w	800687e <HAL_ADCEx_InjectedConfigChannel+0x302>
 8006594:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006596:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8006598:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800659c:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80065a0:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80065a2:	2d00      	cmp	r5, #0
 80065a4:	d072      	beq.n	800668c <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80065a6:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80065a8:	2d01      	cmp	r5, #1
 80065aa:	d06f      	beq.n	800668c <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80065ac:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80065ae:	f000 001f 	and.w	r0, r0, #31
 80065b2:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80065b6:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80065b8:	2f00      	cmp	r7, #0
 80065ba:	f040 811a 	bne.w	80067f2 <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80065be:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80065c0:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f000 821e 	beq.w	8006a04 <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80065c8:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80065ca:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 80065ce:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80065d0:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80065d2:	4330      	orrs	r0, r6
 80065d4:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80065d8:	6898      	ldr	r0, [r3, #8]
 80065da:	0700      	lsls	r0, r0, #28
 80065dc:	d410      	bmi.n	8006600 <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80065de:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80065e2:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80065e6:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80065e8:	2d00      	cmp	r5, #0
 80065ea:	f040 80f7 	bne.w	80067dc <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 80065ee:	68dd      	ldr	r5, [r3, #12]
 80065f0:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 80065f4:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80065f8:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80065fc:	4328      	orrs	r0, r5
 80065fe:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006600:	6898      	ldr	r0, [r3, #8]
 8006602:	f010 0004 	ands.w	r0, r0, #4
 8006606:	d057      	beq.n	80066b8 <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006608:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800660a:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800660c:	689d      	ldr	r5, [r3, #8]
 800660e:	07ee      	lsls	r6, r5, #31
 8006610:	d414      	bmi.n	800663c <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006612:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8006614:	4da3      	ldr	r5, [pc, #652]	@ (80068a4 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006616:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 800661a:	f007 0c18 	and.w	ip, r7, #24
 800661e:	fa25 f50c 	lsr.w	r5, r5, ip
 8006622:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8006626:	4025      	ands	r5, r4
 8006628:	ea26 0c0e 	bic.w	ip, r6, lr
 800662c:	ea45 050c 	orr.w	r5, r5, ip
 8006630:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006634:	4d9c      	ldr	r5, [pc, #624]	@ (80068a8 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006636:	42af      	cmp	r7, r5
 8006638:	f000 80f6 	beq.w	8006828 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800663c:	499b      	ldr	r1, [pc, #620]	@ (80068ac <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800663e:	420c      	tst	r4, r1
 8006640:	d01e      	beq.n	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006642:	4e9b      	ldr	r6, [pc, #620]	@ (80068b0 <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006644:	4d9b      	ldr	r5, [pc, #620]	@ (80068b4 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8006646:	68b1      	ldr	r1, [r6, #8]
 8006648:	42ac      	cmp	r4, r5
 800664a:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 800664e:	f000 809f 	beq.w	8006790 <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006652:	4d99      	ldr	r5, [pc, #612]	@ (80068b8 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8006654:	42ac      	cmp	r4, r5
 8006656:	f000 809b 	beq.w	8006790 <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 800665a:	4d98      	ldr	r5, [pc, #608]	@ (80068bc <HAL_ADCEx_InjectedConfigChannel+0x340>)
 800665c:	42ac      	cmp	r4, r5
 800665e:	f000 8112 	beq.w	8006886 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8006662:	4d97      	ldr	r5, [pc, #604]	@ (80068c0 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8006664:	42ac      	cmp	r4, r5
 8006666:	d10b      	bne.n	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006668:	0249      	lsls	r1, r1, #9
 800666a:	d409      	bmi.n	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 800666c:	4995      	ldr	r1, [pc, #596]	@ (80068c4 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800666e:	428b      	cmp	r3, r1
 8006670:	d006      	beq.n	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006672:	68b3      	ldr	r3, [r6, #8]
 8006674:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006678:	433b      	orrs	r3, r7
 800667a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800667e:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006680:	2300      	movs	r3, #0
 8006682:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8006686:	b003      	add	sp, #12
 8006688:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 800668c:	2809      	cmp	r0, #9
 800668e:	d1a3      	bne.n	80065d8 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006690:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006692:	0c65      	lsrs	r5, r4, #17
 8006694:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006698:	b120      	cbz	r0, 80066a4 <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800669a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 800669c:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80066a0:	4330      	orrs	r0, r6
 80066a2:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80066a4:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80066a6:	4e88      	ldr	r6, [pc, #544]	@ (80068c8 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80066a8:	4030      	ands	r0, r6
 80066aa:	4328      	orrs	r0, r5
 80066ac:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80066ae:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80066b0:	6655      	str	r5, [r2, #100]	@ 0x64
 80066b2:	0700      	lsls	r0, r0, #28
 80066b4:	d4a4      	bmi.n	8006600 <HAL_ADCEx_InjectedConfigChannel+0x84>
 80066b6:	e792      	b.n	80065de <HAL_ADCEx_InjectedConfigChannel+0x62>
 80066b8:	689d      	ldr	r5, [r3, #8]
 80066ba:	072f      	lsls	r7, r5, #28
 80066bc:	d4a6      	bmi.n	800660c <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80066be:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80066c0:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80066c4:	2d00      	cmp	r5, #0
 80066c6:	f040 80a6 	bne.w	8006816 <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80066ca:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80066cc:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80066ce:	f000 819b 	beq.w	8006a08 <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80066d2:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80066d6:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80066d8:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80066da:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80066de:	2d01      	cmp	r5, #1
 80066e0:	f000 8185 	beq.w	80069ee <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80066e4:	691d      	ldr	r5, [r3, #16]
 80066e6:	f025 0502 	bic.w	r5, r5, #2
 80066ea:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80066ec:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80066ee:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80066f2:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80066f4:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80066f6:	40bd      	lsls	r5, r7
 80066f8:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80066fc:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8006700:	ea6f 0505 	mvn.w	r5, r5
 8006704:	f000 8169 	beq.w	80069da <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006708:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 800670c:	40be      	lsls	r6, r7
 800670e:	f85c 7004 	ldr.w	r7, [ip, r4]
 8006712:	403d      	ands	r5, r7
 8006714:	4335      	orrs	r5, r6
 8006716:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800671a:	695c      	ldr	r4, [r3, #20]
 800671c:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006720:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006722:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006724:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006726:	694d      	ldr	r5, [r1, #20]
 8006728:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800672a:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 800672c:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800672e:	f000 810c 	beq.w	800694a <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006732:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8006736:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8006738:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 800673c:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006740:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8006744:	4e61      	ldr	r6, [pc, #388]	@ (80068cc <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8006746:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 800674a:	ea0e 0606 	and.w	r6, lr, r6
 800674e:	ea46 060c 	orr.w	r6, r6, ip
 8006752:	4334      	orrs	r4, r6
 8006754:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006758:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800675c:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800675e:	698e      	ldr	r6, [r1, #24]
 8006760:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8006764:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8006768:	4334      	orrs	r4, r6
 800676a:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800676e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8006770:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8006772:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8006776:	f1a6 0601 	sub.w	r6, r6, #1
 800677a:	fab6 f686 	clz	r6, r6
 800677e:	0976      	lsrs	r6, r6, #5
 8006780:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8006784:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8006788:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800678c:	680c      	ldr	r4, [r1, #0]
}
 800678e:	e73d      	b.n	800660c <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006790:	020d      	lsls	r5, r1, #8
 8006792:	f53f af75 	bmi.w	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006796:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800679a:	f47f af71 	bne.w	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800679e:	4944      	ldr	r1, [pc, #272]	@ (80068b0 <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80067a0:	4c4b      	ldr	r4, [pc, #300]	@ (80068d0 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80067a2:	688b      	ldr	r3, [r1, #8]
 80067a4:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80067a8:	433b      	orrs	r3, r7
 80067aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80067ae:	608b      	str	r3, [r1, #8]
 80067b0:	6823      	ldr	r3, [r4, #0]
 80067b2:	4948      	ldr	r1, [pc, #288]	@ (80068d4 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80067b4:	099b      	lsrs	r3, r3, #6
 80067b6:	fba1 1303 	umull	r1, r3, r1, r3
 80067ba:	099b      	lsrs	r3, r3, #6
 80067bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067c0:	009b      	lsls	r3, r3, #2
 80067c2:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80067c4:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f43f af59 	beq.w	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 80067ce:	9b01      	ldr	r3, [sp, #4]
 80067d0:	3b01      	subs	r3, #1
 80067d2:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80067d4:	9b01      	ldr	r3, [sp, #4]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1f9      	bne.n	80067ce <HAL_ADCEx_InjectedConfigChannel+0x252>
 80067da:	e751      	b.n	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 80067dc:	68dd      	ldr	r5, [r3, #12]
 80067de:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80067e2:	4328      	orrs	r0, r5
 80067e4:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80067e6:	6898      	ldr	r0, [r3, #8]
 80067e8:	f010 0004 	ands.w	r0, r0, #4
 80067ec:	f43f af64 	beq.w	80066b8 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 80067f0:	e70a      	b.n	8006608 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80067f2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80067f4:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80067f6:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80067f8:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80067fa:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80067fc:	2f00      	cmp	r7, #0
 80067fe:	f47f aeeb 	bne.w	80065d8 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8006802:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006804:	4e30      	ldr	r6, [pc, #192]	@ (80068c8 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8006806:	4030      	ands	r0, r6
 8006808:	4328      	orrs	r0, r5
 800680a:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800680c:	6898      	ldr	r0, [r3, #8]
 800680e:	0700      	lsls	r0, r0, #28
 8006810:	f53f aef6 	bmi.w	8006600 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8006814:	e6e3      	b.n	80065de <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006816:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8006818:	2d00      	cmp	r5, #0
 800681a:	f43f af56 	beq.w	80066ca <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800681e:	2801      	cmp	r0, #1
 8006820:	f000 8118 	beq.w	8006a54 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006824:	68d8      	ldr	r0, [r3, #12]
 8006826:	e754      	b.n	80066d2 <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006828:	f1be 0f00 	cmp.w	lr, #0
 800682c:	d154      	bne.n	80068d8 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 800682e:	0ea4      	lsrs	r4, r4, #26
 8006830:	3401      	adds	r4, #1
 8006832:	f004 061f 	and.w	r6, r4, #31
 8006836:	2501      	movs	r5, #1
 8006838:	06a4      	lsls	r4, r4, #26
 800683a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800683e:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006840:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006842:	ea45 0504 	orr.w	r5, r5, r4
 8006846:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800684a:	f200 80fe 	bhi.w	8006a4a <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800684e:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006850:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006852:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8006854:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006856:	f006 0604 	and.w	r6, r6, #4
 800685a:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800685e:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8006862:	fa05 fc04 	lsl.w	ip, r5, r4
 8006866:	f04f 0e07 	mov.w	lr, #7
 800686a:	59bd      	ldr	r5, [r7, r6]
 800686c:	fa0e f404 	lsl.w	r4, lr, r4
 8006870:	ea25 0404 	bic.w	r4, r5, r4
 8006874:	ea44 040c 	orr.w	r4, r4, ip
 8006878:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 800687a:	680c      	ldr	r4, [r1, #0]
}
 800687c:	e6de      	b.n	800663c <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 800687e:	2002      	movs	r0, #2
}
 8006880:	b003      	add	sp, #12
 8006882:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006886:	01cc      	lsls	r4, r1, #7
 8006888:	f53f aefa 	bmi.w	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800688c:	490d      	ldr	r1, [pc, #52]	@ (80068c4 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800688e:	428b      	cmp	r3, r1
 8006890:	f43f aef6 	beq.w	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006894:	68b3      	ldr	r3, [r6, #8]
 8006896:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 800689a:	433b      	orrs	r3, r7
 800689c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80068a0:	60b3      	str	r3, [r6, #8]
}
 80068a2:	e6ed      	b.n	8006680 <HAL_ADCEx_InjectedConfigChannel+0x104>
 80068a4:	0007ffff 	.word	0x0007ffff
 80068a8:	407f0000 	.word	0x407f0000
 80068ac:	80080000 	.word	0x80080000
 80068b0:	50000300 	.word	0x50000300
 80068b4:	c3210000 	.word	0xc3210000
 80068b8:	90c00010 	.word	0x90c00010
 80068bc:	c7520000 	.word	0xc7520000
 80068c0:	cb840000 	.word	0xcb840000
 80068c4:	50000100 	.word	0x50000100
 80068c8:	04104000 	.word	0x04104000
 80068cc:	03fff000 	.word	0x03fff000
 80068d0:	2000047c 	.word	0x2000047c
 80068d4:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068d8:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80068dc:	2d00      	cmp	r5, #0
 80068de:	f000 80be 	beq.w	8006a5e <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 80068e2:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80068e6:	3501      	adds	r5, #1
 80068e8:	f005 051f 	and.w	r5, r5, #31
 80068ec:	2d09      	cmp	r5, #9
 80068ee:	f240 80b6 	bls.w	8006a5e <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068f2:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80068f6:	2d00      	cmp	r5, #0
 80068f8:	f000 812b 	beq.w	8006b52 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80068fc:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006900:	3501      	adds	r5, #1
 8006902:	06ad      	lsls	r5, r5, #26
 8006904:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006908:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800690c:	2e00      	cmp	r6, #0
 800690e:	f000 811e 	beq.w	8006b4e <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8006912:	fab6 f686 	clz	r6, r6
 8006916:	3601      	adds	r6, #1
 8006918:	f006 061f 	and.w	r6, r6, #31
 800691c:	2701      	movs	r7, #1
 800691e:	fa07 f606 	lsl.w	r6, r7, r6
 8006922:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006924:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006928:	2c00      	cmp	r4, #0
 800692a:	f000 8109 	beq.w	8006b40 <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 800692e:	fab4 f484 	clz	r4, r4
 8006932:	1c66      	adds	r6, r4, #1
 8006934:	f006 061f 	and.w	r6, r6, #31
 8006938:	2403      	movs	r4, #3
 800693a:	f06f 071d 	mvn.w	r7, #29
 800693e:	fb14 7406 	smlabb	r4, r4, r6, r7
 8006942:	0524      	lsls	r4, r4, #20
 8006944:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8006948:	e782      	b.n	8006850 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800694a:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 800694c:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800694e:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006952:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006956:	2e00      	cmp	r6, #0
 8006958:	d05a      	beq.n	8006a10 <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800695a:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800695e:	b126      	cbz	r6, 800696a <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8006960:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006964:	42b5      	cmp	r5, r6
 8006966:	f000 80ce 	beq.w	8006b06 <HAL_ADCEx_InjectedConfigChannel+0x58a>
 800696a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800696c:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800696e:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006972:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006976:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697a:	fa9c f7ac 	rbit	r7, ip
 800697e:	f105 0e08 	add.w	lr, r5, #8
 8006982:	46f1      	mov	r9, lr
  if (value == 0U)
 8006984:	2f00      	cmp	r7, #0
 8006986:	f000 80dd 	beq.w	8006b44 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 800698a:	fab7 f787 	clz	r7, r7
 800698e:	42b7      	cmp	r7, r6
 8006990:	f000 80a3 	beq.w	8006ada <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006994:	f8de 6000 	ldr.w	r6, [lr]
 8006998:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800699c:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069a0:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069a4:	f105 070c 	add.w	r7, r5, #12
 80069a8:	46b9      	mov	r9, r7
  if (value == 0U)
 80069aa:	f1b8 0f00 	cmp.w	r8, #0
 80069ae:	f000 80d3 	beq.w	8006b58 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 80069b2:	fab8 f888 	clz	r8, r8
 80069b6:	45b0      	cmp	r8, r6
 80069b8:	d077      	beq.n	8006aaa <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069ba:	683d      	ldr	r5, [r7, #0]
 80069bc:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069be:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069c2:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	f43f ae20 	beq.w	800660c <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 80069cc:	fab6 f486 	clz	r4, r6
 80069d0:	42ac      	cmp	r4, r5
 80069d2:	f000 80af 	beq.w	8006b34 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80069d6:	4664      	mov	r4, ip
 80069d8:	e618      	b.n	800660c <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80069da:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80069de:	593e      	ldr	r6, [r7, r4]
 80069e0:	4035      	ands	r5, r6
 80069e2:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80069e4:	695c      	ldr	r4, [r3, #20]
 80069e6:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80069ea:	615c      	str	r4, [r3, #20]
}
 80069ec:	e699      	b.n	8006722 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 80069ee:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80069f2:	691e      	ldr	r6, [r3, #16]
 80069f4:	433d      	orrs	r5, r7
 80069f6:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80069fa:	4335      	orrs	r5, r6
 80069fc:	f045 0502 	orr.w	r5, r5, #2
 8006a00:	611d      	str	r5, [r3, #16]
 8006a02:	e673      	b.n	80066ec <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8006a04:	4628      	mov	r0, r5
 8006a06:	e5e4      	b.n	80065d2 <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006a08:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8006a0c:	60d8      	str	r0, [r3, #12]
 8006a0e:	e663      	b.n	80066d8 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006a10:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a14:	42a5      	cmp	r5, r4
 8006a16:	d076      	beq.n	8006b06 <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a18:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006a1a:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a1c:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a20:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006a24:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8006a28:	42a6      	cmp	r6, r4
 8006a2a:	d054      	beq.n	8006ad6 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a2c:	68ae      	ldr	r6, [r5, #8]
 8006a2e:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a30:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a34:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006a38:	42a6      	cmp	r6, r4
 8006a3a:	d034      	beq.n	8006aa6 <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a3c:	68ee      	ldr	r6, [r5, #12]
 8006a3e:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a40:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a44:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8006a48:	e7c2      	b.n	80069d0 <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a4a:	3c1e      	subs	r4, #30
 8006a4c:	0524      	lsls	r4, r4, #20
 8006a4e:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8006a52:	e6fd      	b.n	8006850 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a54:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8006a56:	f045 0520 	orr.w	r5, r5, #32
 8006a5a:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8006a5c:	e63d      	b.n	80066da <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a5e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006a62:	2d00      	cmp	r5, #0
 8006a64:	f000 8082 	beq.w	8006b6c <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8006a68:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006a6c:	3501      	adds	r5, #1
 8006a6e:	06ad      	lsls	r5, r5, #26
 8006a70:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a74:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006a78:	2e00      	cmp	r6, #0
 8006a7a:	d075      	beq.n	8006b68 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006a7c:	fab6 f686 	clz	r6, r6
 8006a80:	3601      	adds	r6, #1
 8006a82:	f006 061f 	and.w	r6, r6, #31
 8006a86:	2701      	movs	r7, #1
 8006a88:	fa07 f606 	lsl.w	r6, r7, r6
 8006a8c:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a8e:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006a92:	2c00      	cmp	r4, #0
 8006a94:	d065      	beq.n	8006b62 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8006a96:	fab4 f484 	clz	r4, r4
 8006a9a:	3401      	adds	r4, #1
 8006a9c:	f004 041f 	and.w	r4, r4, #31
 8006aa0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006aa4:	e6d3      	b.n	800684e <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 8006aa6:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8006aaa:	f8de 4000 	ldr.w	r4, [lr]
 8006aae:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006ab2:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006ab6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006aba:	68ec      	ldr	r4, [r5, #12]
 8006abc:	68ed      	ldr	r5, [r5, #12]
 8006abe:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006ac2:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006ac4:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006ac8:	4664      	mov	r4, ip
 8006aca:	2e00      	cmp	r6, #0
 8006acc:	f47f af79 	bne.w	80069c2 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8006ad0:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006ad4:	e77c      	b.n	80069d0 <HAL_ADCEx_InjectedConfigChannel+0x454>
 8006ad6:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8006ada:	f8d8 4000 	ldr.w	r4, [r8]
 8006ade:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006ae2:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006ae6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006aea:	68ac      	ldr	r4, [r5, #8]
 8006aec:	68ae      	ldr	r6, [r5, #8]
 8006aee:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006af2:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006af4:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006af8:	4664      	mov	r4, ip
 8006afa:	2f00      	cmp	r7, #0
 8006afc:	f47f af50 	bne.w	80069a0 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8006b00:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006b04:	e798      	b.n	8006a38 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 8006b06:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8006b08:	461d      	mov	r5, r3
 8006b0a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006b0e:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006b12:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b16:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8006b18:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8006b1a:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b1e:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006b22:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006b26:	4664      	mov	r4, ip
 8006b28:	2f00      	cmp	r7, #0
 8006b2a:	f47f af26 	bne.w	800697a <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8006b2e:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006b32:	e779      	b.n	8006a28 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 8006b34:	683c      	ldr	r4, [r7, #0]
 8006b36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006b3a:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006b3c:	680c      	ldr	r4, [r1, #0]
}
 8006b3e:	e565      	b.n	800660c <HAL_ADCEx_InjectedConfigChannel+0x90>
 8006b40:	4c0c      	ldr	r4, [pc, #48]	@ (8006b74 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8006b42:	e685      	b.n	8006850 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006b44:	68ae      	ldr	r6, [r5, #8]
 8006b46:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006b48:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006b4c:	e728      	b.n	80069a0 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8006b4e:	2602      	movs	r6, #2
 8006b50:	e6e7      	b.n	8006922 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8006b52:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006b56:	e6d7      	b.n	8006908 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8006b58:	68ee      	ldr	r6, [r5, #12]
 8006b5a:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006b5c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006b60:	e72f      	b.n	80069c2 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8006b62:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8006b66:	e673      	b.n	8006850 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 8006b68:	2602      	movs	r6, #2
 8006b6a:	e78f      	b.n	8006a8c <HAL_ADCEx_InjectedConfigChannel+0x510>
 8006b6c:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006b70:	e780      	b.n	8006a74 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8006b72:	bf00      	nop
 8006b74:	fe500000 	.word	0xfe500000

08006b78 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006b78:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8006b7c:	2a01      	cmp	r2, #1
 8006b7e:	d045      	beq.n	8006c0c <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8006b80:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006b82:	6804      	ldr	r4, [r0, #0]
{
 8006b84:	b09c      	sub	sp, #112	@ 0x70
 8006b86:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006b88:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006b8a:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006b8c:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006b90:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8006b92:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006b96:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006b98:	d008      	beq.n	8006bac <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b9a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006b9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ba0:	f041 0120 	orr.w	r1, r1, #32
 8006ba4:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006ba6:	b01c      	add	sp, #112	@ 0x70
 8006ba8:	bcf0      	pop	{r4, r5, r6, r7}
 8006baa:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006bac:	4a22      	ldr	r2, [pc, #136]	@ (8006c38 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8006bae:	6890      	ldr	r0, [r2, #8]
 8006bb0:	0740      	lsls	r0, r0, #29
 8006bb2:	d50b      	bpl.n	8006bcc <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8006bb4:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bb6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006bb8:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006bbc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006bbe:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8006bc6:	b01c      	add	sp, #112	@ 0x70
 8006bc8:	bcf0      	pop	{r4, r5, r6, r7}
 8006bca:	4770      	bx	lr
 8006bcc:	68a0      	ldr	r0, [r4, #8]
 8006bce:	0745      	lsls	r5, r0, #29
 8006bd0:	d4f1      	bmi.n	8006bb6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006bd2:	680d      	ldr	r5, [r1, #0]
 8006bd4:	b1e5      	cbz	r5, 8006c10 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006bd6:	4e19      	ldr	r6, [pc, #100]	@ (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006bd8:	684f      	ldr	r7, [r1, #4]
 8006bda:	68b0      	ldr	r0, [r6, #8]
 8006bdc:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8006be0:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8006be4:	4338      	orrs	r0, r7
 8006be6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8006bea:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006bec:	68a0      	ldr	r0, [r4, #8]
 8006bee:	6892      	ldr	r2, [r2, #8]
 8006bf0:	07c0      	lsls	r0, r0, #31
 8006bf2:	d41e      	bmi.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8006bf4:	07d7      	lsls	r7, r2, #31
 8006bf6:	d41c      	bmi.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8006bf8:	68b2      	ldr	r2, [r6, #8]
 8006bfa:	6889      	ldr	r1, [r1, #8]
 8006bfc:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006c00:	430d      	orrs	r5, r1
 8006c02:	f022 020f 	bic.w	r2, r2, #15
 8006c06:	4315      	orrs	r5, r2
 8006c08:	60b5      	str	r5, [r6, #8]
 8006c0a:	e012      	b.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8006c0c:	2002      	movs	r0, #2
}
 8006c0e:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006c10:	480a      	ldr	r0, [pc, #40]	@ (8006c3c <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006c12:	6881      	ldr	r1, [r0, #8]
 8006c14:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006c18:	6081      	str	r1, [r0, #8]
 8006c1a:	68a1      	ldr	r1, [r4, #8]
 8006c1c:	6892      	ldr	r2, [r2, #8]
 8006c1e:	07cd      	lsls	r5, r1, #31
 8006c20:	d407      	bmi.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8006c22:	07d4      	lsls	r4, r2, #31
 8006c24:	d405      	bmi.n	8006c32 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006c26:	6882      	ldr	r2, [r0, #8]
 8006c28:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006c2c:	f022 020f 	bic.w	r2, r2, #15
 8006c30:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006c32:	2000      	movs	r0, #0
 8006c34:	e7c4      	b.n	8006bc0 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8006c36:	bf00      	nop
 8006c38:	50000100 	.word	0x50000100
 8006c3c:	50000300 	.word	0x50000300

08006c40 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006c40:	b530      	push	{r4, r5, lr}
 8006c42:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006c44:	2300      	movs	r3, #0
 8006c46:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006c48:	2800      	cmp	r0, #0
 8006c4a:	d051      	beq.n	8006cf0 <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006c4c:	6802      	ldr	r2, [r0, #0]
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	4604      	mov	r4, r0
 8006c54:	db4c      	blt.n	8006cf0 <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006c56:	7f43      	ldrb	r3, [r0, #29]
 8006c58:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d073      	beq.n	8006d48 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8006c60:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8006c64:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006c66:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8006c68:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8006c6a:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8006c6c:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006c6e:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8006c70:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 8006c72:	6921      	ldr	r1, [r4, #16]
 8006c74:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 8006c76:	493c      	ldr	r1, [pc, #240]	@ (8006d68 <HAL_COMP_Init+0x128>)
 8006c78:	4001      	ands	r1, r0
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006c7e:	6813      	ldr	r3, [r2, #0]
 8006c80:	021b      	lsls	r3, r3, #8
 8006c82:	d501      	bpl.n	8006c88 <HAL_COMP_Init+0x48>
 8006c84:	022d      	lsls	r5, r5, #8
 8006c86:	d549      	bpl.n	8006d1c <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006c88:	4b38      	ldr	r3, [pc, #224]	@ (8006d6c <HAL_COMP_Init+0x12c>)
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d062      	beq.n	8006d54 <HAL_COMP_Init+0x114>
 8006c8e:	4b38      	ldr	r3, [pc, #224]	@ (8006d70 <HAL_COMP_Init+0x130>)
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d064      	beq.n	8006d5e <HAL_COMP_Init+0x11e>
 8006c94:	3304      	adds	r3, #4
 8006c96:	429a      	cmp	r2, r3
 8006c98:	bf15      	itete	ne
 8006c9a:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 8006c9e:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 8006ca2:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8006ca6:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006caa:	69a3      	ldr	r3, [r4, #24]
 8006cac:	0798      	lsls	r0, r3, #30
 8006cae:	d022      	beq.n	8006cf6 <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006cb0:	4d30      	ldr	r5, [pc, #192]	@ (8006d74 <HAL_COMP_Init+0x134>)
 8006cb2:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006cb4:	f013 0f10 	tst.w	r3, #16
 8006cb8:	bf14      	ite	ne
 8006cba:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006cbc:	4010      	andeq	r0, r2
 8006cbe:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006cc0:	4d2c      	ldr	r5, [pc, #176]	@ (8006d74 <HAL_COMP_Init+0x134>)
 8006cc2:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006cc4:	f013 0f20 	tst.w	r3, #32
 8006cc8:	bf14      	ite	ne
 8006cca:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006ccc:	4010      	andeq	r0, r2
 8006cce:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006cd0:	4828      	ldr	r0, [pc, #160]	@ (8006d74 <HAL_COMP_Init+0x134>)
 8006cd2:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006cd4:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006cd6:	f013 0f02 	tst.w	r3, #2
 8006cda:	bf14      	ite	ne
 8006cdc:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006cde:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006ce0:	07db      	lsls	r3, r3, #31
 8006ce2:	6045      	str	r5, [r0, #4]
 8006ce4:	d515      	bpl.n	8006d12 <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006ce6:	4b23      	ldr	r3, [pc, #140]	@ (8006d74 <HAL_COMP_Init+0x134>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4311      	orrs	r1, r2
 8006cec:	6019      	str	r1, [r3, #0]
}
 8006cee:	e009      	b.n	8006d04 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 8006cf0:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8006cf2:	b003      	add	sp, #12
 8006cf4:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006cf6:	4b1f      	ldr	r3, [pc, #124]	@ (8006d74 <HAL_COMP_Init+0x134>)
 8006cf8:	6859      	ldr	r1, [r3, #4]
 8006cfa:	4011      	ands	r1, r2
 8006cfc:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006cfe:	6819      	ldr	r1, [r3, #0]
 8006d00:	400a      	ands	r2, r1
 8006d02:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006d04:	7f63      	ldrb	r3, [r4, #29]
 8006d06:	b90b      	cbnz	r3, 8006d0c <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8006d0c:	2000      	movs	r0, #0
}
 8006d0e:	b003      	add	sp, #12
 8006d10:	bd30      	pop	{r4, r5, pc}
 8006d12:	4918      	ldr	r1, [pc, #96]	@ (8006d74 <HAL_COMP_Init+0x134>)
 8006d14:	680b      	ldr	r3, [r1, #0]
 8006d16:	4013      	ands	r3, r2
 8006d18:	600b      	str	r3, [r1, #0]
}
 8006d1a:	e7f3      	b.n	8006d04 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006d1c:	4b16      	ldr	r3, [pc, #88]	@ (8006d78 <HAL_COMP_Init+0x138>)
 8006d1e:	4917      	ldr	r1, [pc, #92]	@ (8006d7c <HAL_COMP_Init+0x13c>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	099b      	lsrs	r3, r3, #6
 8006d24:	fba1 1303 	umull	r1, r3, r1, r3
 8006d28:	099b      	lsrs	r3, r3, #6
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006d30:	009b      	lsls	r3, r3, #2
 8006d32:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006d34:	9b01      	ldr	r3, [sp, #4]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d0a6      	beq.n	8006c88 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8006d3a:	9b01      	ldr	r3, [sp, #4]
 8006d3c:	3b01      	subs	r3, #1
 8006d3e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006d40:	9b01      	ldr	r3, [sp, #4]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1f9      	bne.n	8006d3a <HAL_COMP_Init+0xfa>
 8006d46:	e79f      	b.n	8006c88 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8006d48:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8006d4a:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8006d4c:	f7fd fdb4 	bl	80048b8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006d50:	6822      	ldr	r2, [r4, #0]
 8006d52:	e785      	b.n	8006c60 <HAL_COMP_Init+0x20>
 8006d54:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006d58:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d5c:	e7a5      	b.n	8006caa <HAL_COMP_Init+0x6a>
 8006d5e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006d62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006d66:	e7a0      	b.n	8006caa <HAL_COMP_Init+0x6a>
 8006d68:	ff007e0f 	.word	0xff007e0f
 8006d6c:	40010200 	.word	0x40010200
 8006d70:	40010204 	.word	0x40010204
 8006d74:	40010400 	.word	0x40010400
 8006d78:	2000047c 	.word	0x2000047c
 8006d7c:	053e2d63 	.word	0x053e2d63

08006d80 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006d80:	b1b0      	cbz	r0, 8006db0 <HAL_CORDIC_Init+0x30>
{
 8006d82:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006d84:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8006d88:	4604      	mov	r4, r0
 8006d8a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006d8e:	b153      	cbz	r3, 8006da6 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006d90:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006d92:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006d94:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006d96:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8006d9a:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8006d9e:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006da2:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8006da4:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8006da6:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006daa:	f7fd fdf9 	bl	80049a0 <HAL_CORDIC_MspInit>
 8006dae:	e7ef      	b.n	8006d90 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006db0:	2001      	movs	r0, #1
}
 8006db2:	4770      	bx	lr

08006db4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006db4:	4907      	ldr	r1, [pc, #28]	@ (8006dd4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006db6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006db8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dba:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006dbe:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006dc2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006dc4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006dc6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006dca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006dce:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	e000ed00 	.word	0xe000ed00

08006dd8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006dd8:	4b1b      	ldr	r3, [pc, #108]	@ (8006e48 <HAL_NVIC_SetPriority+0x70>)
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006de0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006de2:	f1c3 0e07 	rsb	lr, r3, #7
 8006de6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006dea:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006dee:	bf28      	it	cs
 8006df0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006df4:	f1bc 0f06 	cmp.w	ip, #6
 8006df8:	d91c      	bls.n	8006e34 <HAL_NVIC_SetPriority+0x5c>
 8006dfa:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006dfe:	f04f 33ff 	mov.w	r3, #4294967295
 8006e02:	fa03 f30c 	lsl.w	r3, r3, ip
 8006e06:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8006e0e:	fa03 f30e 	lsl.w	r3, r3, lr
 8006e12:	ea21 0303 	bic.w	r3, r1, r3
 8006e16:	fa03 f30c 	lsl.w	r3, r3, ip
 8006e1a:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e1c:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8006e1e:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e20:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006e22:	db0a      	blt.n	8006e3a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e24:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006e28:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006e2c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006e30:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e34:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006e36:	4694      	mov	ip, r2
 8006e38:	e7e7      	b.n	8006e0a <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006e3a:	4a04      	ldr	r2, [pc, #16]	@ (8006e4c <HAL_NVIC_SetPriority+0x74>)
 8006e3c:	f000 000f 	and.w	r0, r0, #15
 8006e40:	4402      	add	r2, r0
 8006e42:	7613      	strb	r3, [r2, #24]
 8006e44:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e48:	e000ed00 	.word	0xe000ed00
 8006e4c:	e000ecfc 	.word	0xe000ecfc

08006e50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006e50:	2800      	cmp	r0, #0
 8006e52:	db07      	blt.n	8006e64 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006e54:	4a04      	ldr	r2, [pc, #16]	@ (8006e68 <HAL_NVIC_EnableIRQ+0x18>)
 8006e56:	0941      	lsrs	r1, r0, #5
 8006e58:	2301      	movs	r3, #1
 8006e5a:	f000 001f 	and.w	r0, r0, #31
 8006e5e:	4083      	lsls	r3, r0
 8006e60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	e000e100 	.word	0xe000e100

08006e6c <HAL_NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
 8006e6c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e70:	4905      	ldr	r1, [pc, #20]	@ (8006e88 <HAL_NVIC_SystemReset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e72:	4b06      	ldr	r3, [pc, #24]	@ (8006e8c <HAL_NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006e74:	68ca      	ldr	r2, [r1, #12]
 8006e76:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	60cb      	str	r3, [r1, #12]
 8006e7e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006e82:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 8006e84:	e7fd      	b.n	8006e82 <HAL_NVIC_SystemReset+0x16>
 8006e86:	bf00      	nop
 8006e88:	e000ed00 	.word	0xe000ed00
 8006e8c:	05fa0004 	.word	0x05fa0004

08006e90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006e90:	3801      	subs	r0, #1
 8006e92:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006e96:	d301      	bcc.n	8006e9c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006e98:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006e9a:	4770      	bx	lr
{
 8006e9c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006e9e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea2:	4c07      	ldr	r4, [pc, #28]	@ (8006ec0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006ea4:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ea6:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8006eaa:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eae:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eb0:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006eb2:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006eb4:	619a      	str	r2, [r3, #24]
}
 8006eb6:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006eba:	6119      	str	r1, [r3, #16]
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	e000ed00 	.word	0xe000ed00

08006ec4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop

08006ec8 <HAL_SYSTICK_IRQHandler>:
{
 8006ec8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8006eca:	f7ff fffb 	bl	8006ec4 <HAL_SYSTICK_Callback>
}
 8006ece:	bd08      	pop	{r3, pc}

08006ed0 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006ed0:	b188      	cbz	r0, 8006ef6 <HAL_DAC_Init+0x26>
{
 8006ed2:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006ed4:	7903      	ldrb	r3, [r0, #4]
 8006ed6:	4604      	mov	r4, r0
 8006ed8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006edc:	b13b      	cbz	r3, 8006eee <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006ede:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006ee0:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006ee2:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006ee4:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006ee6:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006ee8:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8006eea:	4618      	mov	r0, r3
}
 8006eec:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006eee:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006ef0:	f7fd fd6c 	bl	80049cc <HAL_DAC_MspInit>
 8006ef4:	e7f3      	b.n	8006ede <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8006ef6:	2001      	movs	r0, #1
}
 8006ef8:	4770      	bx	lr
 8006efa:	bf00      	nop

08006efc <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006efc:	2800      	cmp	r0, #0
 8006efe:	f000 80c2 	beq.w	8007086 <HAL_DAC_ConfigChannel+0x18a>
{
 8006f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f06:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8006f08:	2900      	cmp	r1, #0
 8006f0a:	f000 80be 	beq.w	800708a <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006f0e:	7943      	ldrb	r3, [r0, #5]
 8006f10:	2b01      	cmp	r3, #1
 8006f12:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006f14:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 8006f16:	f000 80c7 	beq.w	80070a8 <HAL_DAC_ConfigChannel+0x1ac>
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006f1e:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8006f20:	f04f 0302 	mov.w	r3, #2
 8006f24:	4616      	mov	r6, r2
 8006f26:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006f28:	d06f      	beq.n	800700a <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006f2a:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006f2c:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006f30:	69fa      	ldr	r2, [r7, #28]
 8006f32:	2a01      	cmp	r2, #1
 8006f34:	d108      	bne.n	8006f48 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 8006f36:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f38:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006f3a:	241f      	movs	r4, #31
 8006f3c:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f3e:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006f40:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006f44:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006f48:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8006f4a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006f4c:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006f50:	2901      	cmp	r1, #1
 8006f52:	f000 8095 	beq.w	8007080 <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006f56:	2902      	cmp	r1, #2
 8006f58:	f000 809a 	beq.w	8007090 <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006f5c:	fabe fc8e 	clz	ip, lr
 8006f60:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006f64:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f66:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006f68:	f1a4 0401 	sub.w	r4, r4, #1
 8006f6c:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f70:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006f74:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f76:	fab1 f181 	clz	r1, r1
 8006f7a:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006f7c:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f7e:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006f82:	f240 3107 	movw	r1, #775	@ 0x307
 8006f86:	40b1      	lsls	r1, r6
 8006f88:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006f8c:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f8e:	ea44 040e 	orr.w	r4, r4, lr
 8006f92:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006f94:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006f96:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006f9a:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006f9e:	d07a      	beq.n	8007096 <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006fa0:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006fa4:	40b4      	lsls	r4, r6
 8006fa6:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006faa:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006fac:	681a      	ldr	r2, [r3, #0]
 8006fae:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006fb2:	40b1      	lsls	r1, r6
 8006fb4:	ea22 0201 	bic.w	r2, r2, r1
 8006fb8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006fba:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8006fbe:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006fc0:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8006fc4:	40b0      	lsls	r0, r6
 8006fc6:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006fca:	fa01 f006 	lsl.w	r0, r1, r6
 8006fce:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006fd0:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 8006fd2:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006fd4:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006fd8:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8006fdc:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006fde:	24c0      	movs	r4, #192	@ 0xc0
 8006fe0:	6819      	ldr	r1, [r3, #0]
 8006fe2:	40b4      	lsls	r4, r6
 8006fe4:	ea21 0104 	bic.w	r1, r1, r4
 8006fe8:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006fea:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8006fec:	f640 700f 	movw	r0, #3855	@ 0xf0f
 8006ff0:	40b0      	lsls	r0, r6
 8006ff2:	ea21 0100 	bic.w	r1, r1, r0
 8006ff6:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006ff8:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ffa:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8006ffc:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ffe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8007000:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8007002:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8007004:	716c      	strb	r4, [r5, #5]
}
 8007006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 800700a:	f7fe ff3b 	bl	8005e84 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800700e:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007010:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007012:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8007014:	b156      	cbz	r6, 800702c <HAL_DAC_ConfigChannel+0x130>
 8007016:	e018      	b.n	800704a <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007018:	f7fe ff34 	bl	8005e84 <HAL_GetTick>
 800701c:	1b00      	subs	r0, r0, r4
 800701e:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007020:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007022:	d902      	bls.n	800702a <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007026:	0411      	lsls	r1, r2, #16
 8007028:	d448      	bmi.n	80070bc <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800702a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800702c:	0412      	lsls	r2, r2, #16
 800702e:	d4f3      	bmi.n	8007018 <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8007030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007032:	641a      	str	r2, [r3, #64]	@ 0x40
 8007034:	e00d      	b.n	8007052 <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007036:	f7fe ff25 	bl	8005e84 <HAL_GetTick>
 800703a:	1b00      	subs	r0, r0, r4
 800703c:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800703e:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007040:	d902      	bls.n	8007048 <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007042:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007044:	2a00      	cmp	r2, #0
 8007046:	db39      	blt.n	80070bc <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8007048:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800704a:	2a00      	cmp	r2, #0
 800704c:	dbf3      	blt.n	8007036 <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800704e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007050:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8007052:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007054:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007056:	f006 0610 	and.w	r6, r6, #16
 800705a:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 800705e:	40b0      	lsls	r0, r6
 8007060:	40b1      	lsls	r1, r6
 8007062:	ea22 0200 	bic.w	r2, r2, r0
 8007066:	430a      	orrs	r2, r1
 8007068:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800706a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800706c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800706e:	20ff      	movs	r0, #255	@ 0xff
 8007070:	40b0      	lsls	r0, r6
 8007072:	ea22 0200 	bic.w	r2, r2, r0
 8007076:	40b1      	lsls	r1, r6
 8007078:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800707a:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800707c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800707e:	e757      	b.n	8006f30 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8007080:	f04f 0c00 	mov.w	ip, #0
 8007084:	e76e      	b.n	8006f64 <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 8007086:	2001      	movs	r0, #1
}
 8007088:	4770      	bx	lr
    return HAL_ERROR;
 800708a:	2001      	movs	r0, #1
}
 800708c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8007090:	f04f 0c01 	mov.w	ip, #1
 8007094:	e766      	b.n	8006f64 <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8007096:	f001 fa83 	bl	80085a0 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800709a:	4b0c      	ldr	r3, [pc, #48]	@ (80070cc <HAL_DAC_ConfigChannel+0x1d0>)
 800709c:	4298      	cmp	r0, r3
 800709e:	d905      	bls.n	80070ac <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 80070a0:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80070a2:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 80070a6:	e77d      	b.n	8006fa4 <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 80070a8:	2002      	movs	r0, #2
 80070aa:	e7ac      	b.n	8007006 <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80070ac:	4a08      	ldr	r2, [pc, #32]	@ (80070d0 <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 80070ae:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80070b0:	4290      	cmp	r0, r2
 80070b2:	f67f af77 	bls.w	8006fa4 <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80070b6:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 80070ba:	e773      	b.n	8006fa4 <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80070bc:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80070be:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80070c0:	f043 0308 	orr.w	r3, r3, #8
 80070c4:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 80070c6:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80070c8:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 80070ca:	e79c      	b.n	8007006 <HAL_DAC_ConfigChannel+0x10a>
 80070cc:	09896800 	.word	0x09896800
 80070d0:	04c4b400 	.word	0x04c4b400

080070d4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80070d4:	2800      	cmp	r0, #0
 80070d6:	d076      	beq.n	80071c6 <HAL_DMA_Init+0xf2>
{
 80070d8:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070da:	4a3c      	ldr	r2, [pc, #240]	@ (80071cc <HAL_DMA_Init+0xf8>)
 80070dc:	6804      	ldr	r4, [r0, #0]
 80070de:	4294      	cmp	r4, r2
 80070e0:	4603      	mov	r3, r0
 80070e2:	d95c      	bls.n	800719e <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80070e4:	493a      	ldr	r1, [pc, #232]	@ (80071d0 <HAL_DMA_Init+0xfc>)
 80070e6:	4a3b      	ldr	r2, [pc, #236]	@ (80071d4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 80070e8:	483b      	ldr	r0, [pc, #236]	@ (80071d8 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80070ea:	4421      	add	r1, r4
 80070ec:	fba2 2101 	umull	r2, r1, r2, r1
 80070f0:	0909      	lsrs	r1, r1, #4
 80070f2:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80070f4:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80070f6:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80070f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80070fc:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80070fe:	4e35      	ldr	r6, [pc, #212]	@ (80071d4 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007100:	4f36      	ldr	r7, [pc, #216]	@ (80071dc <HAL_DMA_Init+0x108>)
 8007102:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007106:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8007108:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800710a:	4302      	orrs	r2, r0
 800710c:	6958      	ldr	r0, [r3, #20]
 800710e:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007110:	6998      	ldr	r0, [r3, #24]
 8007112:	4302      	orrs	r2, r0
 8007114:	69d8      	ldr	r0, [r3, #28]
 8007116:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007118:	b2e0      	uxtb	r0, r4
 800711a:	3808      	subs	r0, #8
 800711c:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8007120:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007122:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8007126:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007128:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 800712c:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 800712e:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8007132:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007134:	4e25      	ldr	r6, [pc, #148]	@ (80071cc <HAL_DMA_Init+0xf8>)
 8007136:	4a2a      	ldr	r2, [pc, #168]	@ (80071e0 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007138:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800713c:	42b4      	cmp	r4, r6
 800713e:	bf98      	it	ls
 8007140:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007142:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007146:	2401      	movs	r4, #1
 8007148:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800714c:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800714e:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007152:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007156:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007158:	649e      	str	r6, [r3, #72]	@ 0x48
 800715a:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800715e:	d027      	beq.n	80071b0 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007160:	685e      	ldr	r6, [r3, #4]
 8007162:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007164:	3e01      	subs	r6, #1
 8007166:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007168:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800716c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007170:	d824      	bhi.n	80071bc <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007172:	4a1c      	ldr	r2, [pc, #112]	@ (80071e4 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007174:	481c      	ldr	r0, [pc, #112]	@ (80071e8 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007176:	442a      	add	r2, r5
 8007178:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800717a:	3d01      	subs	r5, #1
 800717c:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800717e:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007180:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007184:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007186:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007188:	4a18      	ldr	r2, [pc, #96]	@ (80071ec <HAL_DMA_Init+0x118>)
 800718a:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800718c:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800718e:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007190:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8007192:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8007196:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800719a:	bcf0      	pop	{r4, r5, r6, r7}
 800719c:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800719e:	4914      	ldr	r1, [pc, #80]	@ (80071f0 <HAL_DMA_Init+0x11c>)
 80071a0:	4a0c      	ldr	r2, [pc, #48]	@ (80071d4 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 80071a2:	4814      	ldr	r0, [pc, #80]	@ (80071f4 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80071a4:	4421      	add	r1, r4
 80071a6:	fba2 2101 	umull	r2, r1, r2, r1
 80071aa:	0909      	lsrs	r1, r1, #4
 80071ac:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 80071ae:	e7a1      	b.n	80070f4 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80071b0:	2400      	movs	r4, #0
 80071b2:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80071b4:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80071b8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 80071bc:	2200      	movs	r2, #0
 80071be:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80071c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80071c4:	e7e2      	b.n	800718c <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80071c6:	2001      	movs	r0, #1
}
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40020407 	.word	0x40020407
 80071d0:	bffdfbf8 	.word	0xbffdfbf8
 80071d4:	cccccccd 	.word	0xcccccccd
 80071d8:	40020400 	.word	0x40020400
 80071dc:	40020800 	.word	0x40020800
 80071e0:	40020820 	.word	0x40020820
 80071e4:	1000823f 	.word	0x1000823f
 80071e8:	40020940 	.word	0x40020940
 80071ec:	40020900 	.word	0x40020900
 80071f0:	bffdfff8 	.word	0xbffdfff8
 80071f4:	40020000 	.word	0x40020000

080071f8 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80071f8:	2800      	cmp	r0, #0
 80071fa:	f000 80d9 	beq.w	80073b0 <HAL_FDCAN_Init+0x1b8>
{
 80071fe:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007200:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8007204:	4604      	mov	r4, r0
 8007206:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800720a:	2b00      	cmp	r3, #0
 800720c:	d071      	beq.n	80072f2 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800720e:	6822      	ldr	r2, [r4, #0]
 8007210:	6993      	ldr	r3, [r2, #24]
 8007212:	f023 0310 	bic.w	r3, r3, #16
 8007216:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007218:	f7fe fe34 	bl	8005e84 <HAL_GetTick>
 800721c:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800721e:	e004      	b.n	800722a <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007220:	f7fe fe30 	bl	8005e84 <HAL_GetTick>
 8007224:	1b40      	subs	r0, r0, r5
 8007226:	280a      	cmp	r0, #10
 8007228:	d85a      	bhi.n	80072e0 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800722a:	6823      	ldr	r3, [r4, #0]
 800722c:	699a      	ldr	r2, [r3, #24]
 800722e:	0711      	lsls	r1, r2, #28
 8007230:	d4f6      	bmi.n	8007220 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007232:	699a      	ldr	r2, [r3, #24]
 8007234:	f042 0201 	orr.w	r2, r2, #1
 8007238:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800723a:	f7fe fe23 	bl	8005e84 <HAL_GetTick>
 800723e:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007240:	e004      	b.n	800724c <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007242:	f7fe fe1f 	bl	8005e84 <HAL_GetTick>
 8007246:	1b40      	subs	r0, r0, r5
 8007248:	280a      	cmp	r0, #10
 800724a:	d849      	bhi.n	80072e0 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	699a      	ldr	r2, [r3, #24]
 8007250:	07d2      	lsls	r2, r2, #31
 8007252:	d5f6      	bpl.n	8007242 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007254:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007256:	4959      	ldr	r1, [pc, #356]	@ (80073bc <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007258:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 800725c:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800725e:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8007260:	f000 80a1 	beq.w	80073a6 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007264:	7c22      	ldrb	r2, [r4, #16]
 8007266:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	bf0c      	ite	eq
 800726c:	f022 0240 	biceq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007270:	f042 0240 	orrne.w	r2, r2, #64	@ 0x40
 8007274:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007276:	7c62      	ldrb	r2, [r4, #17]
 8007278:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800727a:	699a      	ldr	r2, [r3, #24]
 800727c:	bf0c      	ite	eq
 800727e:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007282:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
 8007286:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007288:	7ca2      	ldrb	r2, [r4, #18]
 800728a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	bf0c      	ite	eq
 8007290:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007294:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
 8007298:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800729a:	699a      	ldr	r2, [r3, #24]
 800729c:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800729e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80072a0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80072a4:	4302      	orrs	r2, r0
 80072a6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80072a8:	699a      	ldr	r2, [r3, #24]
 80072aa:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 80072ae:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072b0:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80072b2:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072b4:	f022 0210 	bic.w	r2, r2, #16
 80072b8:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80072ba:	d01f      	beq.n	80072fc <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80072bc:	b311      	cbz	r1, 8007304 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80072be:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072c0:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80072c2:	d077      	beq.n	80073b4 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072c4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80072c8:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072ca:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072cc:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072ce:	f042 0210 	orr.w	r2, r2, #16
 80072d2:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072d4:	d116      	bne.n	8007304 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072d6:	699a      	ldr	r2, [r3, #24]
 80072d8:	f042 0220 	orr.w	r2, r2, #32
 80072dc:	619a      	str	r2, [r3, #24]
 80072de:	e011      	b.n	8007304 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072e0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072e2:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072ea:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80072ee:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80072f0:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80072f2:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80072f6:	f7fd fb81 	bl	80049fc <HAL_FDCAN_MspInit>
 80072fa:	e788      	b.n	800720e <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80072fc:	699a      	ldr	r2, [r3, #24]
 80072fe:	f042 0204 	orr.w	r2, r2, #4
 8007302:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007304:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007308:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800730a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800730c:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800730e:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007312:	6a21      	ldr	r1, [r4, #32]
 8007314:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007316:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007318:	6961      	ldr	r1, [r4, #20]
 800731a:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800731c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007320:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007324:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007326:	d10e      	bne.n	8007346 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007328:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800732c:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800732e:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007330:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007332:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007334:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007336:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 800733a:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800733c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800733e:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007340:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007344:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007346:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800734a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800734c:	6b61      	ldr	r1, [r4, #52]	@ 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800734e:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007350:	4302      	orrs	r2, r0
 8007352:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007356:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800735a:	4819      	ldr	r0, [pc, #100]	@ (80073c0 <HAL_FDCAN_Init+0x1c8>)
 800735c:	6420      	str	r0, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800735e:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8007362:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007366:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800736a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800736e:	4915      	ldr	r1, [pc, #84]	@ (80073c4 <HAL_FDCAN_Init+0x1cc>)
 8007370:	6461      	str	r1, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007372:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007376:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800737a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800737e:	4b12      	ldr	r3, [pc, #72]	@ (80073c8 <HAL_FDCAN_Init+0x1d0>)
 8007380:	4a12      	ldr	r2, [pc, #72]	@ (80073cc <HAL_FDCAN_Init+0x1d4>)
 8007382:	3140      	adds	r1, #64	@ 0x40
 8007384:	e9c4 1312 	strd	r1, r3, [r4, #72]	@ 0x48
 8007388:	33f0      	adds	r3, #240	@ 0xf0
 800738a:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800738e:	2100      	movs	r1, #0
 8007390:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007394:	f004 f8d8 	bl	800b548 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8007398:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800739a:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800739c:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800739e:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 80073a2:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 80073a4:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80073a6:	4a0a      	ldr	r2, [pc, #40]	@ (80073d0 <HAL_FDCAN_Init+0x1d8>)
 80073a8:	6861      	ldr	r1, [r4, #4]
 80073aa:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 80073ae:	e759      	b.n	8007264 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 80073b0:	2001      	movs	r0, #1
}
 80073b2:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80073b4:	f042 0220 	orr.w	r2, r2, #32
 80073b8:	619a      	str	r2, [r3, #24]
 80073ba:	e7a3      	b.n	8007304 <HAL_FDCAN_Init+0x10c>
 80073bc:	40006400 	.word	0x40006400
 80073c0:	4000a400 	.word	0x4000a400
 80073c4:	4000a470 	.word	0x4000a470
 80073c8:	4000a588 	.word	0x4000a588
 80073cc:	4000a660 	.word	0x4000a660
 80073d0:	40006000 	.word	0x40006000

080073d4 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80073d4:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073d8:	3a01      	subs	r2, #1
 80073da:	2a01      	cmp	r2, #1
{
 80073dc:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073de:	d905      	bls.n	80073ec <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073e0:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80073e2:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80073e6:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073e8:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80073ea:	4770      	bx	lr
{
 80073ec:	b470      	push	{r4, r5, r6}
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073ee:	688a      	ldr	r2, [r1, #8]
                         sFilterConfig->FilterID2);
 80073f0:	6948      	ldr	r0, [r1, #20]
                         (sFilterConfig->FilterID1 << 16U)    |
 80073f2:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80073f6:	e9d1 6100 	ldrd	r6, r1, [r1]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073fa:	0792      	lsls	r2, r2, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80073fc:	b956      	cbnz	r6, 8007414 <HAL_FDCAN_ConfigFilter+0x40>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073fe:	ea42 62c5 	orr.w	r2, r2, r5, lsl #27
 8007402:	4302      	orrs	r2, r0
      *FilterAddress = FilterElementW1;
 8007404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007406:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    return HAL_OK;
 800740a:	2000      	movs	r0, #0
}
 800740c:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW1;
 800740e:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8007412:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007416:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
      *FilterAddress = FilterElementW1;
 800741a:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800741e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007422:	4310      	orrs	r0, r2
      *FilterAddress = FilterElementW2;
 8007424:	6058      	str	r0, [r3, #4]
}
 8007426:	bc70      	pop	{r4, r5, r6}
    return HAL_OK;
 8007428:	2000      	movs	r0, #0
}
 800742a:	4770      	bx	lr

0800742c <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800742c:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 8007430:	2a01      	cmp	r2, #1
{
 8007432:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007434:	d005      	beq.n	8007442 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007436:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007438:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 800743c:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800743e:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8007440:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007442:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007444:	2202      	movs	r2, #2
 8007446:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800744a:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800744c:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800744e:	f022 0201 	bic.w	r2, r2, #1
 8007452:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8007454:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007456:	6619      	str	r1, [r3, #96]	@ 0x60
    return HAL_OK;
 8007458:	4770      	bx	lr
 800745a:	bf00      	nop

0800745c <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 800745c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800745e:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8007462:	2b02      	cmp	r3, #2
{
 8007464:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007466:	d10b      	bne.n	8007480 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007468:	6805      	ldr	r5, [r0, #0]
 800746a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 800746e:	f413 1c00 	ands.w	ip, r3, #2097152	@ 0x200000
 8007472:	d00b      	beq.n	800748c <HAL_FDCAN_AddMessageToTxFifoQ+0x30>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007474:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007476:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800747a:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 800747c:	2001      	movs	r0, #1
}
 800747e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007480:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007482:	f043 0308 	orr.w	r3, r3, #8
 8007486:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8007488:	2001      	movs	r0, #1
}
 800748a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800748c:	f8d5 60c4 	ldr.w	r6, [r5, #196]	@ 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007490:	684b      	ldr	r3, [r1, #4]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007492:	690f      	ldr	r7, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007494:	6888      	ldr	r0, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8007496:	680c      	ldr	r4, [r1, #0]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007498:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800749c:	2b00      	cmp	r3, #0
 800749e:	d137      	bne.n	8007510 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
                   FDCAN_STANDARD_ID |
 80074a0:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80074a2:	ea47 4784 	orr.w	r7, r7, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 80074a6:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 80074aa:	4303      	orrs	r3, r0
 80074ac:	6948      	ldr	r0, [r1, #20]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 80074ae:	68cc      	ldr	r4, [r1, #12]
                 pTxHeader->FDFormat |
 80074b0:	4303      	orrs	r3, r0
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80074b2:	6a08      	ldr	r0, [r1, #32]
                 pTxHeader->FDFormat |
 80074b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80074b8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80074bc:	f8de 0054 	ldr.w	r0, [lr, #84]	@ 0x54
 80074c0:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80074c4:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80074c8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074cc:	4c13      	ldr	r4, [pc, #76]	@ (800751c <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
  *TxAddress = TxElementW2;
 80074ce:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074d0:	68cb      	ldr	r3, [r1, #12]
 80074d2:	5ce3      	ldrb	r3, [r4, r3]
 80074d4:	b1a3      	cbz	r3, 8007500 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074d6:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074d8:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074da:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074dc:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 80074e0:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80074e2:	433b      	orrs	r3, r7
 80074e4:	7857      	ldrb	r7, [r2, #1]
 80074e6:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074ea:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074ee:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074f2:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074f4:	68cb      	ldr	r3, [r1, #12]
 80074f6:	5ce3      	ldrb	r3, [r4, r3]
 80074f8:	459c      	cmp	ip, r3
 80074fa:	f102 0204 	add.w	r2, r2, #4
 80074fe:	d3ea      	bcc.n	80074d6 <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007500:	2301      	movs	r3, #1
 8007502:	40b3      	lsls	r3, r6
 8007504:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    return HAL_OK;
 8007508:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800750a:	f8ce 3058 	str.w	r3, [lr, #88]	@ 0x58
}
 800750e:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8007510:	4327      	orrs	r7, r4
 8007512:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007514:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
 8007518:	e7c5      	b.n	80074a6 <HAL_FDCAN_AddMessageToTxFifoQ+0x4a>
 800751a:	bf00      	nop
 800751c:	0800bfc4 	.word	0x0800bfc4

08007520 <HAL_FDCAN_GetRxMessage>:
{
 8007520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007524:	f890 405c 	ldrb.w	r4, [r0, #92]	@ 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8007528:	2c02      	cmp	r4, #2
 800752a:	d10d      	bne.n	8007548 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800752c:	2940      	cmp	r1, #64	@ 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800752e:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007530:	d010      	beq.n	8007554 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007532:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8007536:	0724      	lsls	r4, r4, #28
 8007538:	d16e      	bne.n	8007618 <HAL_FDCAN_GetRxMessage+0xf8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800753a:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800753c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007540:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 8007542:	2001      	movs	r0, #1
}
 8007544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007548:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800754a:	f043 0308 	orr.w	r3, r3, #8
 800754e:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 8007550:	2001      	movs	r0, #1
 8007552:	e7f7      	b.n	8007544 <HAL_FDCAN_GetRxMessage+0x24>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007554:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8007558:	0726      	lsls	r6, r4, #28
 800755a:	d0ee      	beq.n	800753a <HAL_FDCAN_GetRxMessage+0x1a>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 800755c:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8007560:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007564:	bf18      	it	ne
 8007566:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800756a:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800756e:	bf18      	it	ne
 8007570:	f3c4 2440 	ubfxne	r4, r4, #9, #1
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007574:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8007578:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800757c:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800757e:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 8007582:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007586:	6826      	ldr	r6, [r4, #0]
 8007588:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 800758c:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800758e:	2e00      	cmp	r6, #0
 8007590:	d15d      	bne.n	800764e <HAL_FDCAN_GetRxMessage+0x12e>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007592:	6826      	ldr	r6, [r4, #0]
 8007594:	f3c6 468a 	ubfx	r6, r6, #18, #11
 8007598:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800759a:	6826      	ldr	r6, [r4, #0]
 800759c:	f006 5600 	and.w	r6, r6, #536870912	@ 0x20000000
 80075a0:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80075a2:	6826      	ldr	r6, [r4, #0]
 80075a4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80075a8:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80075aa:	88a6      	ldrh	r6, [r4, #4]
 80075ac:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80075ae:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80075b2:	f00c 0c0f 	and.w	ip, ip, #15
 80075b6:	f8c2 c00c 	str.w	ip, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80075ba:	6866      	ldr	r6, [r4, #4]
 80075bc:	f406 1680 	and.w	r6, r6, #1048576	@ 0x100000
 80075c0:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80075c2:	6866      	ldr	r6, [r4, #4]
 80075c4:	f406 1600 	and.w	r6, r6, #2097152	@ 0x200000
 80075c8:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80075ca:	79e6      	ldrb	r6, [r4, #7]
 80075cc:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 80075d0:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075d2:	4e22      	ldr	r6, [pc, #136]	@ (800765c <HAL_FDCAN_GetRxMessage+0x13c>)
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80075d4:	6867      	ldr	r7, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075d6:	f816 e00c 	ldrb.w	lr, [r6, ip]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80075da:	ea4f 7cd7 	mov.w	ip, r7, lsr #31
 80075de:	f8c2 c024 	str.w	ip, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075e2:	f1be 0f00 	cmp.w	lr, #0
 80075e6:	d010      	beq.n	800760a <HAL_FDCAN_GetRxMessage+0xea>
 80075e8:	3b01      	subs	r3, #1
 80075ea:	f104 0e07 	add.w	lr, r4, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80075ee:	46f4      	mov	ip, lr
 80075f0:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
 80075f4:	f803 5f01 	strb.w	r5, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075f8:	68d5      	ldr	r5, [r2, #12]
 80075fa:	f1ac 0c06 	sub.w	ip, ip, #6
 80075fe:	5d75      	ldrb	r5, [r6, r5]
 8007600:	ebac 0c04 	sub.w	ip, ip, r4
 8007604:	4565      	cmp	r5, ip
 8007606:	d8f2      	bhi.n	80075ee <HAL_FDCAN_GetRxMessage+0xce>
 8007608:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800760a:	2940      	cmp	r1, #64	@ 0x40
 800760c:	d023      	beq.n	8007656 <HAL_FDCAN_GetRxMessage+0x136>
      hfdcan->Instance->RXF1A = GetIndex;
 800760e:	f8c5 809c 	str.w	r8, [r5, #156]	@ 0x9c
    return HAL_OK;
 8007612:	2000      	movs	r0, #0
}
 8007614:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007618:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 800761c:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007620:	bf18      	it	ne
 8007622:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007626:	f8d5 7098 	ldr.w	r7, [r5, #152]	@ 0x98
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800762a:	bf18      	it	ne
 800762c:	f3c4 2400 	ubfxne	r4, r4, #8, #1
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007630:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8007634:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007638:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 800763a:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 800763e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007642:	6826      	ldr	r6, [r4, #0]
 8007644:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8007648:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800764a:	2e00      	cmp	r6, #0
 800764c:	d0a1      	beq.n	8007592 <HAL_FDCAN_GetRxMessage+0x72>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800764e:	6826      	ldr	r6, [r4, #0]
 8007650:	f026 4660 	bic.w	r6, r6, #3758096384	@ 0xe0000000
 8007654:	e7a0      	b.n	8007598 <HAL_FDCAN_GetRxMessage+0x78>
      hfdcan->Instance->RXF0A = GetIndex;
 8007656:	f8c5 8094 	str.w	r8, [r5, #148]	@ 0x94
 800765a:	e7da      	b.n	8007612 <HAL_FDCAN_GetRxMessage+0xf2>
 800765c:	0800bfc4 	.word	0x0800bfc4

08007660 <HAL_FDCAN_GetRxFifoFillLevel>:
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8007660:	6803      	ldr	r3, [r0, #0]
  if (RxFifo == FDCAN_RX_FIFO0)
 8007662:	2940      	cmp	r1, #64	@ 0x40
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8007664:	bf0c      	ite	eq
 8007666:	f8d3 0090 	ldreq.w	r0, [r3, #144]	@ 0x90
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 800766a:	f8d3 0098 	ldrne.w	r0, [r3, #152]	@ 0x98
 800766e:	f000 000f 	and.w	r0, r0, #15
}
 8007672:	4770      	bx	lr

08007674 <HAL_FDCAN_ActivateNotification>:
{
 8007674:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007676:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800767a:	3801      	subs	r0, #1
 800767c:	2801      	cmp	r0, #1
 800767e:	d905      	bls.n	800768c <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007680:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007682:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8007686:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007688:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800768a:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 800768c:	681b      	ldr	r3, [r3, #0]
{
 800768e:	b470      	push	{r4, r5, r6}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007690:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007694:	6d98      	ldr	r0, [r3, #88]	@ 0x58
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007696:	f001 0438 	and.w	r4, r1, #56	@ 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800769a:	d009      	beq.n	80076b0 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800769c:	07c6      	lsls	r6, r0, #31
 800769e:	d407      	bmi.n	80076b0 <HAL_FDCAN_ActivateNotification+0x3c>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80076a0:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80076a2:	f045 0501 	orr.w	r5, r5, #1
 80076a6:	65dd      	str	r5, [r3, #92]	@ 0x5c
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80076a8:	b154      	cbz	r4, 80076c0 <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80076aa:	0784      	lsls	r4, r0, #30
 80076ac:	d42f      	bmi.n	800770e <HAL_FDCAN_ActivateNotification+0x9a>
 80076ae:	e007      	b.n	80076c0 <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80076b0:	b304      	cbz	r4, 80076f4 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80076b2:	0786      	lsls	r6, r0, #30
 80076b4:	d41e      	bmi.n	80076f4 <HAL_FDCAN_ActivateNotification+0x80>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80076b6:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 80076b8:	f046 0601 	orr.w	r6, r6, #1
 80076bc:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80076be:	bb25      	cbnz	r5, 800770a <HAL_FDCAN_ActivateNotification+0x96>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80076c0:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 80076c4:	d001      	beq.n	80076ca <HAL_FDCAN_ActivateNotification+0x56>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80076c6:	0746      	lsls	r6, r0, #29
 80076c8:	d421      	bmi.n	800770e <HAL_FDCAN_ActivateNotification+0x9a>
 80076ca:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 80076ce:	d001      	beq.n	80076d4 <HAL_FDCAN_ActivateNotification+0x60>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80076d0:	0705      	lsls	r5, r0, #28
 80076d2:	d41c      	bmi.n	800770e <HAL_FDCAN_ActivateNotification+0x9a>
 80076d4:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 80076d8:	d001      	beq.n	80076de <HAL_FDCAN_ActivateNotification+0x6a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80076da:	06c4      	lsls	r4, r0, #27
 80076dc:	d417      	bmi.n	800770e <HAL_FDCAN_ActivateNotification+0x9a>
 80076de:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 80076e2:	d001      	beq.n	80076e8 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80076e4:	0686      	lsls	r6, r0, #26
 80076e6:	d412      	bmi.n	800770e <HAL_FDCAN_ActivateNotification+0x9a>
 80076e8:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 80076ec:	d013      	beq.n	8007716 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80076ee:	0645      	lsls	r5, r0, #25
 80076f0:	d40d      	bmi.n	800770e <HAL_FDCAN_ActivateNotification+0x9a>
 80076f2:	e010      	b.n	8007716 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80076f4:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 80076f8:	d021      	beq.n	800773e <HAL_FDCAN_ActivateNotification+0xca>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80076fa:	0746      	lsls	r6, r0, #29
 80076fc:	d41f      	bmi.n	800773e <HAL_FDCAN_ActivateNotification+0xca>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80076fe:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8007700:	f046 0601 	orr.w	r6, r6, #1
 8007704:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007706:	2d00      	cmp	r5, #0
 8007708:	d0ce      	beq.n	80076a8 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 800770a:	07c5      	lsls	r5, r0, #31
 800770c:	d5cc      	bpl.n	80076a8 <HAL_FDCAN_ActivateNotification+0x34>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800770e:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8007710:	f040 0002 	orr.w	r0, r0, #2
 8007714:	65d8      	str	r0, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007716:	060c      	lsls	r4, r1, #24
 8007718:	d504      	bpl.n	8007724 <HAL_FDCAN_ActivateNotification+0xb0>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 800771a:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800771e:	4310      	orrs	r0, r2
 8007720:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007724:	05c8      	lsls	r0, r1, #23
 8007726:	d504      	bpl.n	8007732 <HAL_FDCAN_ActivateNotification+0xbe>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007728:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 800772c:	4302      	orrs	r2, r0
 800772e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007732:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007734:	430a      	orrs	r2, r1
    return HAL_OK;
 8007736:	2000      	movs	r0, #0
}
 8007738:	bc70      	pop	{r4, r5, r6}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800773a:	655a      	str	r2, [r3, #84]	@ 0x54
}
 800773c:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800773e:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 8007742:	d001      	beq.n	8007748 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007744:	0706      	lsls	r6, r0, #28
 8007746:	d5da      	bpl.n	80076fe <HAL_FDCAN_ActivateNotification+0x8a>
 8007748:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 800774c:	d001      	beq.n	8007752 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800774e:	06c6      	lsls	r6, r0, #27
 8007750:	d5d5      	bpl.n	80076fe <HAL_FDCAN_ActivateNotification+0x8a>
 8007752:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8007756:	d001      	beq.n	800775c <HAL_FDCAN_ActivateNotification+0xe8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007758:	0686      	lsls	r6, r0, #26
 800775a:	d5d0      	bpl.n	80076fe <HAL_FDCAN_ActivateNotification+0x8a>
 800775c:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 8007760:	d0d1      	beq.n	8007706 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8007762:	0646      	lsls	r6, r0, #25
 8007764:	d5cb      	bpl.n	80076fe <HAL_FDCAN_ActivateNotification+0x8a>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007766:	2d00      	cmp	r5, #0
 8007768:	d09e      	beq.n	80076a8 <HAL_FDCAN_ActivateNotification+0x34>
 800776a:	e7ce      	b.n	800770a <HAL_FDCAN_ActivateNotification+0x96>

0800776c <HAL_FDCAN_TxEventFifoCallback>:
}
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 8007770:	4770      	bx	lr
 8007772:	bf00      	nop

08007774 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop

08007778 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 800777c:	4770      	bx	lr
 800777e:	bf00      	nop

08007780 <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 8007780:	4770      	bx	lr
 8007782:	bf00      	nop

08007784 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop

0800778c <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <HAL_FDCAN_ErrorStatusCallback>:
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop

08007794 <HAL_FDCAN_IRQHandler>:
{
 8007794:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007798:	6803      	ldr	r3, [r0, #0]
 800779a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800779c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800779e:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80077a2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80077a4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80077a6:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80077aa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80077ac:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80077ae:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80077b0:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 80077b4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80077b6:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 80077b8:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 80077ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 80077bc:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 80077c0:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 80077c2:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80077c4:	0669      	lsls	r1, r5, #25
{
 80077c6:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80077c8:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 80077cc:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 80077d0:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 80077d4:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80077d8:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80077dc:	d502      	bpl.n	80077e4 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80077de:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 80077e2:	d172      	bne.n	80078ca <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80077e4:	05ea      	lsls	r2, r5, #23
 80077e6:	d502      	bpl.n	80077ee <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80077e8:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80077ec:	d15d      	bne.n	80078aa <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 80077ee:	f1ba 0f00 	cmp.w	sl, #0
 80077f2:	d14a      	bne.n	800788a <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 80077f4:	f1b9 0f00 	cmp.w	r9, #0
 80077f8:	d135      	bne.n	8007866 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 80077fa:	f1b8 0f00 	cmp.w	r8, #0
 80077fe:	d13c      	bne.n	800787a <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8007800:	05ab      	lsls	r3, r5, #22
 8007802:	d502      	bpl.n	800780a <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007804:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8007808:	d174      	bne.n	80078f4 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 800780a:	0628      	lsls	r0, r5, #24
 800780c:	d502      	bpl.n	8007814 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800780e:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8007812:	d177      	bne.n	8007904 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007814:	04a9      	lsls	r1, r5, #18
 8007816:	d502      	bpl.n	800781e <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007818:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 800781c:	d15a      	bne.n	80078d4 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800781e:	042a      	lsls	r2, r5, #16
 8007820:	d502      	bpl.n	8007828 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8007822:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 8007826:	d15d      	bne.n	80078e4 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007828:	046b      	lsls	r3, r5, #17
 800782a:	d50a      	bpl.n	8007842 <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800782c:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 8007830:	d007      	beq.n	8007842 <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007832:	6823      	ldr	r3, [r4, #0]
 8007834:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007838:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800783a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800783c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007840:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 8007842:	b94f      	cbnz	r7, 8007858 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8007844:	b126      	cbz	r6, 8007850 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 800784a:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800784c:	4333      	orrs	r3, r6
 800784e:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007850:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007852:	bb2b      	cbnz	r3, 80078a0 <HAL_FDCAN_IRQHandler+0x10c>
}
 8007854:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007858:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800785a:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800785c:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800785e:	4620      	mov	r0, r4
 8007860:	f7ff ff96 	bl	8007790 <HAL_FDCAN_ErrorStatusCallback>
 8007864:	e7ee      	b.n	8007844 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007866:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007868:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800786a:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800786e:	4620      	mov	r0, r4
 8007870:	f7fa fe5c 	bl	800252c <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 8007874:	f1b8 0f00 	cmp.w	r8, #0
 8007878:	d0c2      	beq.n	8007800 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800787a:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800787c:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800787e:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007882:	4620      	mov	r0, r4
 8007884:	f7ff ff74 	bl	8007770 <HAL_FDCAN_RxFifo1Callback>
 8007888:	e7ba      	b.n	8007800 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800788a:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800788c:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800788e:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007892:	4620      	mov	r0, r4
 8007894:	f7ff ff6a 	bl	800776c <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 8007898:	f1b9 0f00 	cmp.w	r9, #0
 800789c:	d0ad      	beq.n	80077fa <HAL_FDCAN_IRQHandler+0x66>
 800789e:	e7e2      	b.n	8007866 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80078a0:	4620      	mov	r0, r4
 80078a2:	f7ff ff73 	bl	800778c <HAL_FDCAN_ErrorCallback>
}
 80078a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80078aa:	6823      	ldr	r3, [r4, #0]
 80078ac:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80078b0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80078b4:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80078b8:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80078ba:	4011      	ands	r1, r2
 80078bc:	4620      	mov	r0, r4
 80078be:	f7ff ff5d 	bl	800777c <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 80078c2:	f1ba 0f00 	cmp.w	sl, #0
 80078c6:	d095      	beq.n	80077f4 <HAL_FDCAN_IRQHandler+0x60>
 80078c8:	e7df      	b.n	800788a <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80078ca:	2240      	movs	r2, #64	@ 0x40
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80078ce:	f7ff ff5b 	bl	8007788 <HAL_FDCAN_HighPriorityMessageCallback>
 80078d2:	e787      	b.n	80077e4 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80078d4:	6823      	ldr	r3, [r4, #0]
 80078d6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80078da:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80078dc:	4620      	mov	r0, r4
 80078de:	f7ff ff4f 	bl	8007780 <HAL_FDCAN_TimestampWraparoundCallback>
 80078e2:	e79c      	b.n	800781e <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80078e4:	6823      	ldr	r3, [r4, #0]
 80078e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80078ea:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80078ec:	4620      	mov	r0, r4
 80078ee:	f7ff ff49 	bl	8007784 <HAL_FDCAN_TimeoutOccurredCallback>
 80078f2:	e799      	b.n	8007828 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80078f4:	6823      	ldr	r3, [r4, #0]
 80078f6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078fa:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80078fc:	4620      	mov	r0, r4
 80078fe:	f7ff ff39 	bl	8007774 <HAL_FDCAN_TxFifoEmptyCallback>
 8007902:	e782      	b.n	800780a <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007904:	6823      	ldr	r3, [r4, #0]
 8007906:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800790a:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800790e:	2080      	movs	r0, #128	@ 0x80
 8007910:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007912:	4011      	ands	r1, r2
 8007914:	4620      	mov	r0, r4
 8007916:	f7ff ff2f 	bl	8007778 <HAL_FDCAN_TxBufferCompleteCallback>
 800791a:	e77b      	b.n	8007814 <HAL_FDCAN_IRQHandler+0x80>

0800791c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800791c:	680b      	ldr	r3, [r1, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	f000 8198 	beq.w	8007c54 <HAL_GPIO_Init+0x338>
{
 8007924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007928:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 800792c:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 800792e:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007932:	f04f 0b01 	mov.w	fp, #1
 8007936:	f000 810d 	beq.w	8007b54 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800793a:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8007c88 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800793e:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8007940:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007942:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8007946:	ea1c 0a03 	ands.w	sl, ip, r3
 800794a:	d077      	beq.n	8007a3c <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800794c:	684d      	ldr	r5, [r1, #4]
 800794e:	f005 0703 	and.w	r7, r5, #3
 8007952:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007954:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007956:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800795a:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800795e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007962:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007966:	f240 8119 	bls.w	8007b9c <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800796a:	2f03      	cmp	r7, #3
 800796c:	f040 8179 	bne.w	8007c62 <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007970:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8007974:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007976:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007978:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800797a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800797e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007980:	d05c      	beq.n	8007a3c <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007982:	4ebe      	ldr	r6, [pc, #760]	@ (8007c7c <HAL_GPIO_Init+0x360>)
 8007984:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8007986:	f044 0401 	orr.w	r4, r4, #1
 800798a:	6634      	str	r4, [r6, #96]	@ 0x60
 800798c:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800798e:	f004 0401 	and.w	r4, r4, #1
 8007992:	9403      	str	r4, [sp, #12]
 8007994:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007996:	f022 0403 	bic.w	r4, r2, #3
 800799a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800799e:	f002 0703 	and.w	r7, r2, #3
 80079a2:	230f      	movs	r3, #15
 80079a4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 80079a8:	00bf      	lsls	r7, r7, #2
 80079aa:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079ae:	4bb4      	ldr	r3, [pc, #720]	@ (8007c80 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80079b0:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079b2:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80079b4:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80079b8:	f000 8140 	beq.w	8007c3c <HAL_GPIO_Init+0x320>
 80079bc:	4bb1      	ldr	r3, [pc, #708]	@ (8007c84 <HAL_GPIO_Init+0x368>)
 80079be:	4298      	cmp	r0, r3
 80079c0:	f000 812d 	beq.w	8007c1e <HAL_GPIO_Init+0x302>
 80079c4:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8007c8c <HAL_GPIO_Init+0x370>
 80079c8:	4560      	cmp	r0, ip
 80079ca:	f000 813d 	beq.w	8007c48 <HAL_GPIO_Init+0x32c>
 80079ce:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8007c90 <HAL_GPIO_Init+0x374>
 80079d2:	4560      	cmp	r0, ip
 80079d4:	f000 813f 	beq.w	8007c56 <HAL_GPIO_Init+0x33a>
 80079d8:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8007c94 <HAL_GPIO_Init+0x378>
 80079dc:	4560      	cmp	r0, ip
 80079de:	bf0c      	ite	eq
 80079e0:	f04f 0c05 	moveq.w	ip, #5
 80079e4:	f04f 0c06 	movne.w	ip, #6
 80079e8:	fa0c f707 	lsl.w	r7, ip, r7
 80079ec:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079ee:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 80079f0:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80079f4:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079f8:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80079fa:	bf54      	ite	pl
 80079fc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80079fe:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 8007a02:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8007a06:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007a0a:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8007a0c:	bf54      	ite	pl
 8007a0e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007a10:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8007a14:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8007a18:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007a1c:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8007a1e:	bf54      	ite	pl
 8007a20:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007a22:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8007a26:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007a2a:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a2e:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8007a30:	bf54      	ite	pl
 8007a32:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007a34:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8007a38:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a3c:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8007a3e:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a40:	fa33 f402 	lsrs.w	r4, r3, r2
 8007a44:	f47f af7c 	bne.w	8007940 <HAL_GPIO_Init+0x24>
  }
}
 8007a48:	b005      	add	sp, #20
 8007a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007a4e:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a52:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a54:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a58:	fa06 f807 	lsl.w	r8, r6, r7
 8007a5c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007a60:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007a64:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a68:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a6c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8007a70:	fa0e fe02 	lsl.w	lr, lr, r2
 8007a74:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8007a78:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8007a7c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a80:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a82:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a86:	fa06 fe07 	lsl.w	lr, r6, r7
 8007a8a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a8e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8007a90:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a94:	d119      	bne.n	8007aca <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8007a96:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a9a:	690e      	ldr	r6, [r1, #16]
 8007a9c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007aa0:	f002 0807 	and.w	r8, r2, #7
 8007aa4:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8007aa8:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007aac:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 8007ab0:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ab4:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007ab6:	260f      	movs	r6, #15
 8007ab8:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007abc:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007abe:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007ac2:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8007ac6:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aca:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8007acc:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007ace:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007ad2:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ad4:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8007ad8:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ada:	d036      	beq.n	8007b4a <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007adc:	4f67      	ldr	r7, [pc, #412]	@ (8007c7c <HAL_GPIO_Init+0x360>)
 8007ade:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007ae0:	f044 0401 	orr.w	r4, r4, #1
 8007ae4:	663c      	str	r4, [r7, #96]	@ 0x60
 8007ae6:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007ae8:	f004 0401 	and.w	r4, r4, #1
 8007aec:	9403      	str	r4, [sp, #12]
 8007aee:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007af0:	f022 0403 	bic.w	r4, r2, #3
 8007af4:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007af8:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007afc:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007b00:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007b04:	260f      	movs	r6, #15
 8007b06:	00bf      	lsls	r7, r7, #2
 8007b08:	fa06 f707 	lsl.w	r7, r6, r7
 8007b0c:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007b10:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8007b12:	4c5d      	ldr	r4, [pc, #372]	@ (8007c88 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b14:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8007b16:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8007b18:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007b1c:	d47c      	bmi.n	8007c18 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8007b1e:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8007b20:	4e59      	ldr	r6, [pc, #356]	@ (8007c88 <HAL_GPIO_Init+0x36c>)
 8007b22:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8007b24:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b26:	02ae      	lsls	r6, r5, #10
 8007b28:	f100 8085 	bmi.w	8007c36 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 8007b2c:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 8007b2e:	4e56      	ldr	r6, [pc, #344]	@ (8007c88 <HAL_GPIO_Init+0x36c>)
 8007b30:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 8007b32:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b34:	03ae      	lsls	r6, r5, #14
 8007b36:	d47b      	bmi.n	8007c30 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8007b38:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8007b3a:	4e53      	ldr	r6, [pc, #332]	@ (8007c88 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b3c:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 8007b3e:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8007b40:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b42:	d472      	bmi.n	8007c2a <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8007b44:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8007b46:	4d50      	ldr	r5, [pc, #320]	@ (8007c88 <HAL_GPIO_Init+0x36c>)
 8007b48:	602c      	str	r4, [r5, #0]
    position++;
 8007b4a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b4c:	fa33 f402 	lsrs.w	r4, r3, r2
 8007b50:	f43f af7a 	beq.w	8007a48 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b54:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8007b58:	ea13 0c0e 	ands.w	ip, r3, lr
 8007b5c:	d0f5      	beq.n	8007b4a <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b5e:	684d      	ldr	r5, [r1, #4]
 8007b60:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b62:	2603      	movs	r6, #3
 8007b64:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b68:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b6c:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b70:	f104 38ff 	add.w	r8, r4, #4294967295
 8007b74:	f1b8 0f01 	cmp.w	r8, #1
 8007b78:	f67f af69 	bls.w	8007a4e <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b7c:	2c03      	cmp	r4, #3
 8007b7e:	d0a4      	beq.n	8007aca <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8007b80:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b84:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8007b86:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b8a:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b8e:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b92:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8007b96:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b9a:	e796      	b.n	8007aca <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 8007b9c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ba0:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ba2:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ba6:	fa03 f804 	lsl.w	r8, r3, r4
 8007baa:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007bae:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007bb2:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bb6:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bb8:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007bbc:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8007bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8007bc4:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8007bc8:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8007bcc:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bd0:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bd4:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bd8:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bdc:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 8007bde:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007be2:	f47f aec5 	bne.w	8007970 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007be6:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007be8:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bec:	f002 0c07 	and.w	ip, r2, #7
 8007bf0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8007bf4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bf8:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8007bfc:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c00:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c02:	230f      	movs	r3, #15
 8007c04:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c08:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007c0a:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007c0e:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8007c12:	f8c8 c020 	str.w	ip, [r8, #32]
 8007c16:	e6ab      	b.n	8007970 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8007c18:	ea44 040c 	orr.w	r4, r4, ip
 8007c1c:	e780      	b.n	8007b20 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c1e:	f04f 0c02 	mov.w	ip, #2
 8007c22:	fa0c f707 	lsl.w	r7, ip, r7
 8007c26:	433e      	orrs	r6, r7
 8007c28:	e6e1      	b.n	80079ee <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8007c2a:	ea4c 0404 	orr.w	r4, ip, r4
 8007c2e:	e78a      	b.n	8007b46 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8007c30:	ea44 040c 	orr.w	r4, r4, ip
 8007c34:	e781      	b.n	8007b3a <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8007c36:	ea4c 0404 	orr.w	r4, ip, r4
 8007c3a:	e778      	b.n	8007b2e <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c3c:	f04f 0c01 	mov.w	ip, #1
 8007c40:	fa0c f707 	lsl.w	r7, ip, r7
 8007c44:	433e      	orrs	r6, r7
 8007c46:	e6d2      	b.n	80079ee <HAL_GPIO_Init+0xd2>
 8007c48:	f04f 0c03 	mov.w	ip, #3
 8007c4c:	fa0c f707 	lsl.w	r7, ip, r7
 8007c50:	433e      	orrs	r6, r7
 8007c52:	e6cc      	b.n	80079ee <HAL_GPIO_Init+0xd2>
 8007c54:	4770      	bx	lr
 8007c56:	f04f 0c04 	mov.w	ip, #4
 8007c5a:	fa0c f707 	lsl.w	r7, ip, r7
 8007c5e:	433e      	orrs	r6, r7
 8007c60:	e6c5      	b.n	80079ee <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 8007c62:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c66:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c68:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c6c:	fa03 fc04 	lsl.w	ip, r3, r4
 8007c70:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8007c74:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c78:	e67a      	b.n	8007970 <HAL_GPIO_Init+0x54>
 8007c7a:	bf00      	nop
 8007c7c:	40021000 	.word	0x40021000
 8007c80:	48000400 	.word	0x48000400
 8007c84:	48000800 	.word	0x48000800
 8007c88:	40010400 	.word	0x40010400
 8007c8c:	48000c00 	.word	0x48000c00
 8007c90:	48001000 	.word	0x48001000
 8007c94:	48001400 	.word	0x48001400

08007c98 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007c98:	b10a      	cbz	r2, 8007c9e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007c9a:	6181      	str	r1, [r0, #24]
 8007c9c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007c9e:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop

08007ca4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007ca4:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007ca6:	ea01 0203 	and.w	r2, r1, r3
 8007caa:	ea21 0103 	bic.w	r1, r1, r3
 8007cae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007cb2:	6181      	str	r1, [r0, #24]
}
 8007cb4:	4770      	bx	lr
 8007cb6:	bf00      	nop

08007cb8 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007cb8:	2800      	cmp	r0, #0
 8007cba:	d06f      	beq.n	8007d9c <HAL_OPAMP_Init+0xe4>
{
 8007cbc:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007cbe:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007cc2:	2b05      	cmp	r3, #5
{
 8007cc4:	b083      	sub	sp, #12
 8007cc6:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007cc8:	d056      	beq.n	8007d78 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007cca:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d052      	beq.n	8007d78 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cd2:	4b33      	ldr	r3, [pc, #204]	@ (8007da0 <HAL_OPAMP_Init+0xe8>)
 8007cd4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007cd6:	f042 0201 	orr.w	r2, r2, #1
 8007cda:	661a      	str	r2, [r3, #96]	@ 0x60
 8007cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007cde:	f003 0301 	and.w	r3, r3, #1
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007ce6:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007cea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007cee:	b90b      	cbnz	r3, 8007cf4 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007cf0:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007cf4:	4620      	mov	r0, r4
 8007cf6:	f7fc fef3 	bl	8004ae0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007cfa:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007cfc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007cfe:	f023 0220 	bic.w	r2, r3, #32
 8007d02:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8007d04:	6822      	ldr	r2, [r4, #0]
 8007d06:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007d08:	d039      	beq.n	8007d7e <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007d0a:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007d0c:	f021 0110 	bic.w	r1, r1, #16
 8007d10:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007d12:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8007d14:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007d16:	432b      	orrs	r3, r5
 8007d18:	4303      	orrs	r3, r0
 8007d1a:	6920      	ldr	r0, [r4, #16]
 8007d1c:	6811      	ldr	r1, [r2, #0]
 8007d1e:	4303      	orrs	r3, r0
 8007d20:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007d22:	4303      	orrs	r3, r0
 8007d24:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007d26:	4303      	orrs	r3, r0
 8007d28:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007d2a:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8007d2e:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007d30:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007d34:	481b      	ldr	r0, [pc, #108]	@ (8007da4 <HAL_OPAMP_Init+0xec>)
 8007d36:	4008      	ands	r0, r1
 8007d38:	7d21      	ldrb	r1, [r4, #20]
 8007d3a:	f1a1 0101 	sub.w	r1, r1, #1
 8007d3e:	fab1 f181 	clz	r1, r1
 8007d42:	4303      	orrs	r3, r0
 8007d44:	0949      	lsrs	r1, r1, #5
 8007d46:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007d4a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007d4c:	6993      	ldr	r3, [r2, #24]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	db09      	blt.n	8007d66 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007d52:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8007d56:	6991      	ldr	r1, [r2, #24]
 8007d58:	4303      	orrs	r3, r0
 8007d5a:	6a20      	ldr	r0, [r4, #32]
 8007d5c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007d60:	4303      	orrs	r3, r0
 8007d62:	430b      	orrs	r3, r1
 8007d64:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007d66:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8007d6a:	b913      	cbnz	r3, 8007d72 <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007d72:	2000      	movs	r0, #0
  }
}
 8007d74:	b003      	add	sp, #12
 8007d76:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007d78:	2001      	movs	r0, #1
}
 8007d7a:	b003      	add	sp, #12
 8007d7c:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8007d7e:	f021 0110 	bic.w	r1, r1, #16
 8007d82:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007d84:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007d86:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007d88:	4303      	orrs	r3, r0
 8007d8a:	6920      	ldr	r0, [r4, #16]
 8007d8c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007d8e:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007d90:	4303      	orrs	r3, r0
 8007d92:	430b      	orrs	r3, r1
 8007d94:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007d96:	6811      	ldr	r1, [r2, #0]
 8007d98:	432b      	orrs	r3, r5
 8007d9a:	e7c6      	b.n	8007d2a <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8007d9c:	2001      	movs	r0, #1
}
 8007d9e:	4770      	bx	lr
 8007da0:	40021000 	.word	0x40021000
 8007da4:	e0003e11 	.word	0xe0003e11

08007da8 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007da8:	4a35      	ldr	r2, [pc, #212]	@ (8007e80 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007daa:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007dac:	b960      	cbnz	r0, 8007dc8 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dae:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007db6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007dba:	d01b      	beq.n	8007df4 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007dc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007dc4:	2000      	movs	r0, #0
}
 8007dc6:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007dc8:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007dcc:	d006      	beq.n	8007ddc <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007dce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dd6:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007dd8:	2000      	movs	r0, #0
}
 8007dda:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007ddc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007de0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007de4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007de8:	d029      	beq.n	8007e3e <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007dea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dee:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007df2:	e7f1      	b.n	8007dd8 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007df4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007df8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dfc:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007dfe:	4821      	ldr	r0, [pc, #132]	@ (8007e84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007e00:	4921      	ldr	r1, [pc, #132]	@ (8007e88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007e06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e0a:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e0c:	6803      	ldr	r3, [r0, #0]
 8007e0e:	2032      	movs	r0, #50	@ 0x32
 8007e10:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e14:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e16:	fba1 1303 	umull	r1, r3, r1, r3
 8007e1a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e1c:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e1e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e22:	d506      	bpl.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007e24:	e000      	b.n	8007e28 <HAL_PWREx_ControlVoltageScaling+0x80>
 8007e26:	b123      	cbz	r3, 8007e32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007e28:	6951      	ldr	r1, [r2, #20]
 8007e2a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007e2c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e30:	d4f9      	bmi.n	8007e26 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007e32:	4b13      	ldr	r3, [pc, #76]	@ (8007e80 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	055b      	lsls	r3, r3, #21
 8007e38:	d5ce      	bpl.n	8007dd8 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8007e3a:	2003      	movs	r0, #3
 8007e3c:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007e3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007e42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e46:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e48:	480e      	ldr	r0, [pc, #56]	@ (8007e84 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007e4a:	490f      	ldr	r1, [pc, #60]	@ (8007e88 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007e4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007e50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007e54:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e56:	6803      	ldr	r3, [r0, #0]
 8007e58:	2032      	movs	r0, #50	@ 0x32
 8007e5a:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e5e:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e60:	fba1 1303 	umull	r1, r3, r1, r3
 8007e64:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e66:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007e68:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e6c:	d5e1      	bpl.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007e6e:	e001      	b.n	8007e74 <HAL_PWREx_ControlVoltageScaling+0xcc>
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d0de      	beq.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007e74:	6951      	ldr	r1, [r2, #20]
 8007e76:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007e78:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007e7c:	d5d9      	bpl.n	8007e32 <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007e7e:	e7f7      	b.n	8007e70 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8007e80:	40007000 	.word	0x40007000
 8007e84:	2000047c 	.word	0x2000047c
 8007e88:	431bde83 	.word	0x431bde83

08007e8c <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007e8c:	4a02      	ldr	r2, [pc, #8]	@ (8007e98 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007e8e:	6893      	ldr	r3, [r2, #8]
 8007e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007e94:	6093      	str	r3, [r2, #8]
}
 8007e96:	4770      	bx	lr
 8007e98:	40007000 	.word	0x40007000

08007e9c <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	f000 81bd 	beq.w	800821c <HAL_RCC_OscConfig+0x380>
{
 8007ea2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007ea6:	6803      	ldr	r3, [r0, #0]
 8007ea8:	07d9      	lsls	r1, r3, #31
{
 8007eaa:	b082      	sub	sp, #8
 8007eac:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007eae:	d512      	bpl.n	8007ed6 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb0:	49a6      	ldr	r1, [pc, #664]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007eb2:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007eb4:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eb6:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007eba:	2a0c      	cmp	r2, #12
 8007ebc:	f000 80d0 	beq.w	8008060 <HAL_RCC_OscConfig+0x1c4>
 8007ec0:	2a08      	cmp	r2, #8
 8007ec2:	f040 80d2 	bne.w	800806a <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ec6:	4aa1      	ldr	r2, [pc, #644]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007ec8:	6812      	ldr	r2, [r2, #0]
 8007eca:	0392      	lsls	r2, r2, #14
 8007ecc:	d503      	bpl.n	8007ed6 <HAL_RCC_OscConfig+0x3a>
 8007ece:	6862      	ldr	r2, [r4, #4]
 8007ed0:	2a00      	cmp	r2, #0
 8007ed2:	f000 8137 	beq.w	8008144 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ed6:	079a      	lsls	r2, r3, #30
 8007ed8:	d522      	bpl.n	8007f20 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007eda:	4a9c      	ldr	r2, [pc, #624]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007edc:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ede:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007ee0:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ee4:	2b0c      	cmp	r3, #12
 8007ee6:	f000 80f8 	beq.w	80080da <HAL_RCC_OscConfig+0x23e>
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	f040 80fa 	bne.w	80080e4 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ef0:	4b96      	ldr	r3, [pc, #600]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	055b      	lsls	r3, r3, #21
 8007ef6:	d503      	bpl.n	8007f00 <HAL_RCC_OscConfig+0x64>
 8007ef8:	68e3      	ldr	r3, [r4, #12]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	f000 8122 	beq.w	8008144 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f00:	4a92      	ldr	r2, [pc, #584]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007f02:	6920      	ldr	r0, [r4, #16]
 8007f04:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f06:	4992      	ldr	r1, [pc, #584]	@ (8008150 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f08:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007f0c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007f10:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007f12:	6808      	ldr	r0, [r1, #0]
 8007f14:	f7fd ff6c 	bl	8005df0 <HAL_InitTick>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	f040 8113 	bne.w	8008144 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f1e:	6823      	ldr	r3, [r4, #0]
 8007f20:	071a      	lsls	r2, r3, #28
 8007f22:	d519      	bpl.n	8007f58 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f24:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007f26:	4d89      	ldr	r5, [pc, #548]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f000 80c2 	beq.w	80080b2 <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8007f2e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007f32:	f043 0301 	orr.w	r3, r3, #1
 8007f36:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f3a:	f7fd ffa3 	bl	8005e84 <HAL_GetTick>
 8007f3e:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f40:	e005      	b.n	8007f4e <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007f42:	f7fd ff9f 	bl	8005e84 <HAL_GetTick>
 8007f46:	1b80      	subs	r0, r0, r6
 8007f48:	2802      	cmp	r0, #2
 8007f4a:	f200 8117 	bhi.w	800817c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007f4e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007f52:	079b      	lsls	r3, r3, #30
 8007f54:	d5f5      	bpl.n	8007f42 <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007f56:	6823      	ldr	r3, [r4, #0]
 8007f58:	075d      	lsls	r5, r3, #29
 8007f5a:	d541      	bpl.n	8007fe0 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007f5c:	4b7b      	ldr	r3, [pc, #492]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007f5e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f60:	00d0      	lsls	r0, r2, #3
 8007f62:	f100 810f 	bmi.w	8008184 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f66:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007f68:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007f6c:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007f74:	9301      	str	r3, [sp, #4]
 8007f76:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007f78:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007f7a:	4e76      	ldr	r6, [pc, #472]	@ (8008154 <HAL_RCC_OscConfig+0x2b8>)
 8007f7c:	6833      	ldr	r3, [r6, #0]
 8007f7e:	05d9      	lsls	r1, r3, #23
 8007f80:	f140 812e 	bpl.w	80081e0 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007f84:	68a3      	ldr	r3, [r4, #8]
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	f000 80fe 	beq.w	8008188 <HAL_RCC_OscConfig+0x2ec>
 8007f8c:	2b05      	cmp	r3, #5
 8007f8e:	f000 8184 	beq.w	800829a <HAL_RCC_OscConfig+0x3fe>
 8007f92:	4e6e      	ldr	r6, [pc, #440]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007f94:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007f98:	f022 0201 	bic.w	r2, r2, #1
 8007f9c:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8007fa0:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007fa4:	f022 0204 	bic.w	r2, r2, #4
 8007fa8:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	f040 80f2 	bne.w	8008196 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007fb2:	f7fd ff67 	bl	8005e84 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb6:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007fba:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fbc:	e005      	b.n	8007fca <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fbe:	f7fd ff61 	bl	8005e84 <HAL_GetTick>
 8007fc2:	1bc0      	subs	r0, r0, r7
 8007fc4:	4540      	cmp	r0, r8
 8007fc6:	f200 80d9 	bhi.w	800817c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007fca:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8007fce:	0799      	lsls	r1, r3, #30
 8007fd0:	d4f5      	bmi.n	8007fbe <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007fd2:	b125      	cbz	r5, 8007fde <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fd4:	4a5d      	ldr	r2, [pc, #372]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8007fd6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007fdc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007fde:	6823      	ldr	r3, [r4, #0]
 8007fe0:	069a      	lsls	r2, r3, #26
 8007fe2:	d518      	bpl.n	8008016 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007fe4:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007fe6:	4d59      	ldr	r5, [pc, #356]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	f000 80e5 	beq.w	80081b8 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8007fee:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007ff2:	f043 0301 	orr.w	r3, r3, #1
 8007ff6:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007ffa:	f7fd ff43 	bl	8005e84 <HAL_GetTick>
 8007ffe:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008000:	e005      	b.n	800800e <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008002:	f7fd ff3f 	bl	8005e84 <HAL_GetTick>
 8008006:	1b80      	subs	r0, r0, r6
 8008008:	2802      	cmp	r0, #2
 800800a:	f200 80b7 	bhi.w	800817c <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800800e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008012:	079b      	lsls	r3, r3, #30
 8008014:	d5f5      	bpl.n	8008002 <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008016:	69e3      	ldr	r3, [r4, #28]
 8008018:	b1f3      	cbz	r3, 8008058 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800801a:	4d4c      	ldr	r5, [pc, #304]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 800801c:	68aa      	ldr	r2, [r5, #8]
 800801e:	f002 020c 	and.w	r2, r2, #12
 8008022:	2a0c      	cmp	r2, #12
 8008024:	f000 8147 	beq.w	80082b6 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008028:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800802a:	682b      	ldr	r3, [r5, #0]
 800802c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008030:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008032:	f000 80f5 	beq.w	8008220 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008036:	f7fd ff25 	bl	8005e84 <HAL_GetTick>
 800803a:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800803c:	e005      	b.n	800804a <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800803e:	f7fd ff21 	bl	8005e84 <HAL_GetTick>
 8008042:	1b00      	subs	r0, r0, r4
 8008044:	2802      	cmp	r0, #2
 8008046:	f200 8099 	bhi.w	800817c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	019b      	lsls	r3, r3, #6
 800804e:	d4f6      	bmi.n	800803e <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008050:	68ea      	ldr	r2, [r5, #12]
 8008052:	4b41      	ldr	r3, [pc, #260]	@ (8008158 <HAL_RCC_OscConfig+0x2bc>)
 8008054:	4013      	ands	r3, r2
 8008056:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8008058:	2000      	movs	r0, #0
}
 800805a:	b002      	add	sp, #8
 800805c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008060:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008064:	2903      	cmp	r1, #3
 8008066:	f43f af2e 	beq.w	8007ec6 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800806a:	6863      	ldr	r3, [r4, #4]
 800806c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008070:	d055      	beq.n	800811e <HAL_RCC_OscConfig+0x282>
 8008072:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008076:	f000 80c4 	beq.w	8008202 <HAL_RCC_OscConfig+0x366>
 800807a:	4d34      	ldr	r5, [pc, #208]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 800807c:	682a      	ldr	r2, [r5, #0]
 800807e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008082:	602a      	str	r2, [r5, #0]
 8008084:	682a      	ldr	r2, [r5, #0]
 8008086:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800808a:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800808c:	2b00      	cmp	r3, #0
 800808e:	d14b      	bne.n	8008128 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8008090:	f7fd fef8 	bl	8005e84 <HAL_GetTick>
 8008094:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008096:	e004      	b.n	80080a2 <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008098:	f7fd fef4 	bl	8005e84 <HAL_GetTick>
 800809c:	1b80      	subs	r0, r0, r6
 800809e:	2864      	cmp	r0, #100	@ 0x64
 80080a0:	d86c      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80080a2:	682b      	ldr	r3, [r5, #0]
 80080a4:	0399      	lsls	r1, r3, #14
 80080a6:	d4f7      	bmi.n	8008098 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80080a8:	6823      	ldr	r3, [r4, #0]
 80080aa:	079a      	lsls	r2, r3, #30
 80080ac:	f57f af38 	bpl.w	8007f20 <HAL_RCC_OscConfig+0x84>
 80080b0:	e713      	b.n	8007eda <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 80080b2:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 80080be:	f7fd fee1 	bl	8005e84 <HAL_GetTick>
 80080c2:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080c4:	e004      	b.n	80080d0 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80080c6:	f7fd fedd 	bl	8005e84 <HAL_GetTick>
 80080ca:	1b80      	subs	r0, r0, r6
 80080cc:	2802      	cmp	r0, #2
 80080ce:	d855      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80080d0:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80080d4:	079f      	lsls	r7, r3, #30
 80080d6:	d4f6      	bmi.n	80080c6 <HAL_RCC_OscConfig+0x22a>
 80080d8:	e73d      	b.n	8007f56 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080da:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80080de:	2a02      	cmp	r2, #2
 80080e0:	f43f af06 	beq.w	8007ef0 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080e4:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80080e6:	4d19      	ldr	r5, [pc, #100]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d037      	beq.n	800815c <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80080ec:	682b      	ldr	r3, [r5, #0]
 80080ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080f2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80080f4:	f7fd fec6 	bl	8005e84 <HAL_GetTick>
 80080f8:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80080fa:	e004      	b.n	8008106 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80080fc:	f7fd fec2 	bl	8005e84 <HAL_GetTick>
 8008100:	1b80      	subs	r0, r0, r6
 8008102:	2802      	cmp	r0, #2
 8008104:	d83a      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008106:	682b      	ldr	r3, [r5, #0]
 8008108:	055f      	lsls	r7, r3, #21
 800810a:	d5f7      	bpl.n	80080fc <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800810c:	686b      	ldr	r3, [r5, #4]
 800810e:	6922      	ldr	r2, [r4, #16]
 8008110:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008114:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8008118:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800811a:	6823      	ldr	r3, [r4, #0]
 800811c:	e700      	b.n	8007f20 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800811e:	4a0b      	ldr	r2, [pc, #44]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
 8008120:	6813      	ldr	r3, [r2, #0]
 8008122:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008126:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8008128:	f7fd feac 	bl	8005e84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800812c:	4e07      	ldr	r6, [pc, #28]	@ (800814c <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 800812e:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008130:	e004      	b.n	800813c <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008132:	f7fd fea7 	bl	8005e84 <HAL_GetTick>
 8008136:	1b40      	subs	r0, r0, r5
 8008138:	2864      	cmp	r0, #100	@ 0x64
 800813a:	d81f      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800813c:	6833      	ldr	r3, [r6, #0]
 800813e:	039f      	lsls	r7, r3, #14
 8008140:	d5f7      	bpl.n	8008132 <HAL_RCC_OscConfig+0x296>
 8008142:	e7b1      	b.n	80080a8 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8008144:	2001      	movs	r0, #1
}
 8008146:	b002      	add	sp, #8
 8008148:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800814c:	40021000 	.word	0x40021000
 8008150:	20000484 	.word	0x20000484
 8008154:	40007000 	.word	0x40007000
 8008158:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 800815c:	682b      	ldr	r3, [r5, #0]
 800815e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008162:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8008164:	f7fd fe8e 	bl	8005e84 <HAL_GetTick>
 8008168:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800816a:	682b      	ldr	r3, [r5, #0]
 800816c:	0559      	lsls	r1, r3, #21
 800816e:	f57f aed6 	bpl.w	8007f1e <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008172:	f7fd fe87 	bl	8005e84 <HAL_GetTick>
 8008176:	1b80      	subs	r0, r0, r6
 8008178:	2802      	cmp	r0, #2
 800817a:	d9f6      	bls.n	800816a <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 800817c:	2003      	movs	r0, #3
}
 800817e:	b002      	add	sp, #8
 8008180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8008184:	2500      	movs	r5, #0
 8008186:	e6f8      	b.n	8007f7a <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008188:	4a65      	ldr	r2, [pc, #404]	@ (8008320 <HAL_RCC_OscConfig+0x484>)
 800818a:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800818e:	f043 0301 	orr.w	r3, r3, #1
 8008192:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8008196:	f7fd fe75 	bl	8005e84 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800819a:	4f61      	ldr	r7, [pc, #388]	@ (8008320 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 800819c:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800819e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081a2:	e004      	b.n	80081ae <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80081a4:	f7fd fe6e 	bl	8005e84 <HAL_GetTick>
 80081a8:	1b80      	subs	r0, r0, r6
 80081aa:	4540      	cmp	r0, r8
 80081ac:	d8e6      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80081ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80081b2:	079b      	lsls	r3, r3, #30
 80081b4:	d5f6      	bpl.n	80081a4 <HAL_RCC_OscConfig+0x308>
 80081b6:	e70c      	b.n	8007fd2 <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 80081b8:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80081bc:	f023 0301 	bic.w	r3, r3, #1
 80081c0:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 80081c4:	f7fd fe5e 	bl	8005e84 <HAL_GetTick>
 80081c8:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081ca:	e004      	b.n	80081d6 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081cc:	f7fd fe5a 	bl	8005e84 <HAL_GetTick>
 80081d0:	1b80      	subs	r0, r0, r6
 80081d2:	2802      	cmp	r0, #2
 80081d4:	d8d2      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80081d6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80081da:	079f      	lsls	r7, r3, #30
 80081dc:	d4f6      	bmi.n	80081cc <HAL_RCC_OscConfig+0x330>
 80081de:	e71a      	b.n	8008016 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081e0:	6833      	ldr	r3, [r6, #0]
 80081e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80081e6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80081e8:	f7fd fe4c 	bl	8005e84 <HAL_GetTick>
 80081ec:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80081ee:	6833      	ldr	r3, [r6, #0]
 80081f0:	05da      	lsls	r2, r3, #23
 80081f2:	f53f aec7 	bmi.w	8007f84 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80081f6:	f7fd fe45 	bl	8005e84 <HAL_GetTick>
 80081fa:	1bc0      	subs	r0, r0, r7
 80081fc:	2802      	cmp	r0, #2
 80081fe:	d9f6      	bls.n	80081ee <HAL_RCC_OscConfig+0x352>
 8008200:	e7bc      	b.n	800817c <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008202:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008206:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008210:	601a      	str	r2, [r3, #0]
 8008212:	681a      	ldr	r2, [r3, #0]
 8008214:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008218:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800821a:	e785      	b.n	8008128 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 800821c:	2001      	movs	r0, #1
}
 800821e:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8008220:	f7fd fe30 	bl	8005e84 <HAL_GetTick>
 8008224:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008226:	e004      	b.n	8008232 <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008228:	f7fd fe2c 	bl	8005e84 <HAL_GetTick>
 800822c:	1b80      	subs	r0, r0, r6
 800822e:	2802      	cmp	r0, #2
 8008230:	d8a4      	bhi.n	800817c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008232:	682b      	ldr	r3, [r5, #0]
 8008234:	0199      	lsls	r1, r3, #6
 8008236:	d4f7      	bmi.n	8008228 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008238:	68e9      	ldr	r1, [r5, #12]
 800823a:	4b3a      	ldr	r3, [pc, #232]	@ (8008324 <HAL_RCC_OscConfig+0x488>)
 800823c:	6a22      	ldr	r2, [r4, #32]
 800823e:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008240:	400b      	ands	r3, r1
 8008242:	4313      	orrs	r3, r2
 8008244:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8008248:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800824c:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8008250:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 8008254:	3801      	subs	r0, #1
 8008256:	0849      	lsrs	r1, r1, #1
 8008258:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 800825c:	3901      	subs	r1, #1
 800825e:	0852      	lsrs	r2, r2, #1
 8008260:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8008264:	3a01      	subs	r2, #1
 8008266:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 800826a:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 800826c:	682b      	ldr	r3, [r5, #0]
 800826e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008272:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008274:	68eb      	ldr	r3, [r5, #12]
 8008276:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800827a:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 800827c:	f7fd fe02 	bl	8005e84 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008280:	4d27      	ldr	r5, [pc, #156]	@ (8008320 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8008282:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008284:	e005      	b.n	8008292 <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008286:	f7fd fdfd 	bl	8005e84 <HAL_GetTick>
 800828a:	1b00      	subs	r0, r0, r4
 800828c:	2802      	cmp	r0, #2
 800828e:	f63f af75 	bhi.w	800817c <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008292:	682b      	ldr	r3, [r5, #0]
 8008294:	019a      	lsls	r2, r3, #6
 8008296:	d5f6      	bpl.n	8008286 <HAL_RCC_OscConfig+0x3ea>
 8008298:	e6de      	b.n	8008058 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800829a:	4b21      	ldr	r3, [pc, #132]	@ (8008320 <HAL_RCC_OscConfig+0x484>)
 800829c:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80082a0:	f042 0204 	orr.w	r2, r2, #4
 80082a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80082a8:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80082ac:	f042 0201 	orr.w	r2, r2, #1
 80082b0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80082b4:	e76f      	b.n	8008196 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80082b6:	2b01      	cmp	r3, #1
 80082b8:	f43f af44 	beq.w	8008144 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 80082bc:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082be:	6a22      	ldr	r2, [r4, #32]
 80082c0:	f003 0103 	and.w	r1, r3, #3
 80082c4:	4291      	cmp	r1, r2
 80082c6:	f47f af3d 	bne.w	8008144 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082ca:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80082cc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80082d0:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80082d2:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80082d6:	f47f af35 	bne.w	8008144 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082da:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80082dc:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80082e0:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80082e4:	f47f af2e 	bne.w	8008144 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80082e8:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80082ea:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80082ee:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80082f2:	f47f af27 	bne.w	8008144 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80082f6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80082f8:	0852      	lsrs	r2, r2, #1
 80082fa:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80082fe:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008300:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8008304:	f47f af1e 	bne.w	8008144 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008308:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800830a:	0852      	lsrs	r2, r2, #1
 800830c:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8008310:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008312:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8008316:	bf14      	ite	ne
 8008318:	2001      	movne	r0, #1
 800831a:	2000      	moveq	r0, #0
 800831c:	e69d      	b.n	800805a <HAL_RCC_OscConfig+0x1be>
 800831e:	bf00      	nop
 8008320:	40021000 	.word	0x40021000
 8008324:	019f800c 	.word	0x019f800c

08008328 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008328:	4b18      	ldr	r3, [pc, #96]	@ (800838c <HAL_RCC_GetSysClockFreq+0x64>)
 800832a:	689a      	ldr	r2, [r3, #8]
 800832c:	f002 020c 	and.w	r2, r2, #12
 8008330:	2a04      	cmp	r2, #4
 8008332:	d026      	beq.n	8008382 <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	f002 020c 	and.w	r2, r2, #12
 800833a:	2a08      	cmp	r2, #8
 800833c:	d023      	beq.n	8008386 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800833e:	689a      	ldr	r2, [r3, #8]
 8008340:	f002 020c 	and.w	r2, r2, #12
 8008344:	2a0c      	cmp	r2, #12
 8008346:	d001      	beq.n	800834c <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8008348:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 800834a:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800834c:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800834e:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008350:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008352:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8008356:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008358:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800835c:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008360:	bf0c      	ite	eq
 8008362:	4b0b      	ldreq	r3, [pc, #44]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008364:	4b0b      	ldrne	r3, [pc, #44]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008366:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008368:	fbb3 f3f2 	udiv	r3, r3, r2
 800836c:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008370:	4b06      	ldr	r3, [pc, #24]	@ (800838c <HAL_RCC_GetSysClockFreq+0x64>)
 8008372:	68db      	ldr	r3, [r3, #12]
 8008374:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008378:	3301      	adds	r3, #1
 800837a:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 800837c:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8008380:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8008382:	4804      	ldr	r0, [pc, #16]	@ (8008394 <HAL_RCC_GetSysClockFreq+0x6c>)
 8008384:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8008386:	4802      	ldr	r0, [pc, #8]	@ (8008390 <HAL_RCC_GetSysClockFreq+0x68>)
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	40021000 	.word	0x40021000
 8008390:	007a1200 	.word	0x007a1200
 8008394:	00f42400 	.word	0x00f42400

08008398 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008398:	2800      	cmp	r0, #0
 800839a:	f000 80ee 	beq.w	800857a <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800839e:	4a78      	ldr	r2, [pc, #480]	@ (8008580 <HAL_RCC_ClockConfig+0x1e8>)
{
 80083a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80083a4:	6813      	ldr	r3, [r2, #0]
 80083a6:	f003 030f 	and.w	r3, r3, #15
 80083aa:	428b      	cmp	r3, r1
 80083ac:	460d      	mov	r5, r1
 80083ae:	4604      	mov	r4, r0
 80083b0:	d20c      	bcs.n	80083cc <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80083b2:	6813      	ldr	r3, [r2, #0]
 80083b4:	f023 030f 	bic.w	r3, r3, #15
 80083b8:	430b      	orrs	r3, r1
 80083ba:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80083bc:	6813      	ldr	r3, [r2, #0]
 80083be:	f003 030f 	and.w	r3, r3, #15
 80083c2:	428b      	cmp	r3, r1
 80083c4:	d002      	beq.n	80083cc <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80083c6:	2001      	movs	r0, #1
}
 80083c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80083cc:	6823      	ldr	r3, [r4, #0]
 80083ce:	07df      	lsls	r7, r3, #31
 80083d0:	d569      	bpl.n	80084a6 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80083d2:	6867      	ldr	r7, [r4, #4]
 80083d4:	2f03      	cmp	r7, #3
 80083d6:	f000 80a0 	beq.w	800851a <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083da:	4b6a      	ldr	r3, [pc, #424]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083dc:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80083de:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80083e0:	f000 8097 	beq.w	8008512 <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80083e4:	055b      	lsls	r3, r3, #21
 80083e6:	d5ee      	bpl.n	80083c6 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80083e8:	f7ff ff9e 	bl	8008328 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80083ec:	4b66      	ldr	r3, [pc, #408]	@ (8008588 <HAL_RCC_ClockConfig+0x1f0>)
 80083ee:	4298      	cmp	r0, r3
 80083f0:	f240 80c0 	bls.w	8008574 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80083f4:	4a63      	ldr	r2, [pc, #396]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 80083f6:	6893      	ldr	r3, [r2, #8]
 80083f8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80083fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008402:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008406:	4e5f      	ldr	r6, [pc, #380]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 8008408:	68b3      	ldr	r3, [r6, #8]
 800840a:	f023 0303 	bic.w	r3, r3, #3
 800840e:	433b      	orrs	r3, r7
 8008410:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8008412:	f7fd fd37 	bl	8005e84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008416:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800841a:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800841c:	e004      	b.n	8008428 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800841e:	f7fd fd31 	bl	8005e84 <HAL_GetTick>
 8008422:	1bc0      	subs	r0, r0, r7
 8008424:	4540      	cmp	r0, r8
 8008426:	d871      	bhi.n	800850c <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008428:	68b3      	ldr	r3, [r6, #8]
 800842a:	6862      	ldr	r2, [r4, #4]
 800842c:	f003 030c 	and.w	r3, r3, #12
 8008430:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8008434:	d1f3      	bne.n	800841e <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008436:	6823      	ldr	r3, [r4, #0]
 8008438:	079f      	lsls	r7, r3, #30
 800843a:	d436      	bmi.n	80084aa <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 800843c:	f1b9 0f00 	cmp.w	r9, #0
 8008440:	d003      	beq.n	800844a <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008442:	68b3      	ldr	r3, [r6, #8]
 8008444:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008448:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800844a:	4e4d      	ldr	r6, [pc, #308]	@ (8008580 <HAL_RCC_ClockConfig+0x1e8>)
 800844c:	6833      	ldr	r3, [r6, #0]
 800844e:	f003 030f 	and.w	r3, r3, #15
 8008452:	42ab      	cmp	r3, r5
 8008454:	d846      	bhi.n	80084e4 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008456:	6823      	ldr	r3, [r4, #0]
 8008458:	075a      	lsls	r2, r3, #29
 800845a:	d506      	bpl.n	800846a <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800845c:	4949      	ldr	r1, [pc, #292]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 800845e:	68e0      	ldr	r0, [r4, #12]
 8008460:	688a      	ldr	r2, [r1, #8]
 8008462:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8008466:	4302      	orrs	r2, r0
 8008468:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800846a:	071b      	lsls	r3, r3, #28
 800846c:	d507      	bpl.n	800847e <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800846e:	4a45      	ldr	r2, [pc, #276]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 8008470:	6921      	ldr	r1, [r4, #16]
 8008472:	6893      	ldr	r3, [r2, #8]
 8008474:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008478:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800847c:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800847e:	f7ff ff53 	bl	8008328 <HAL_RCC_GetSysClockFreq>
 8008482:	4a40      	ldr	r2, [pc, #256]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 8008484:	4c41      	ldr	r4, [pc, #260]	@ (800858c <HAL_RCC_ClockConfig+0x1f4>)
 8008486:	6892      	ldr	r2, [r2, #8]
 8008488:	4941      	ldr	r1, [pc, #260]	@ (8008590 <HAL_RCC_ClockConfig+0x1f8>)
 800848a:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800848e:	4603      	mov	r3, r0
 8008490:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8008492:	4840      	ldr	r0, [pc, #256]	@ (8008594 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008494:	f002 021f 	and.w	r2, r2, #31
 8008498:	40d3      	lsrs	r3, r2
 800849a:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 800849c:	6800      	ldr	r0, [r0, #0]
}
 800849e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80084a2:	f7fd bca5 	b.w	8005df0 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80084a6:	079e      	lsls	r6, r3, #30
 80084a8:	d5cf      	bpl.n	800844a <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80084aa:	0758      	lsls	r0, r3, #29
 80084ac:	d504      	bpl.n	80084b8 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80084ae:	4935      	ldr	r1, [pc, #212]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 80084b0:	688a      	ldr	r2, [r1, #8]
 80084b2:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80084b6:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80084b8:	0719      	lsls	r1, r3, #28
 80084ba:	d506      	bpl.n	80084ca <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80084bc:	4a31      	ldr	r2, [pc, #196]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 80084be:	6893      	ldr	r3, [r2, #8]
 80084c0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80084c4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80084c8:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084ca:	4a2e      	ldr	r2, [pc, #184]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 80084cc:	68a1      	ldr	r1, [r4, #8]
 80084ce:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084d0:	4e2b      	ldr	r6, [pc, #172]	@ (8008580 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80084d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80084d6:	430b      	orrs	r3, r1
 80084d8:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80084da:	6833      	ldr	r3, [r6, #0]
 80084dc:	f003 030f 	and.w	r3, r3, #15
 80084e0:	42ab      	cmp	r3, r5
 80084e2:	d9b8      	bls.n	8008456 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80084e4:	6833      	ldr	r3, [r6, #0]
 80084e6:	f023 030f 	bic.w	r3, r3, #15
 80084ea:	432b      	orrs	r3, r5
 80084ec:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80084ee:	f7fd fcc9 	bl	8005e84 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80084f2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80084f6:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80084f8:	6833      	ldr	r3, [r6, #0]
 80084fa:	f003 030f 	and.w	r3, r3, #15
 80084fe:	42ab      	cmp	r3, r5
 8008500:	d0a9      	beq.n	8008456 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008502:	f7fd fcbf 	bl	8005e84 <HAL_GetTick>
 8008506:	1bc0      	subs	r0, r0, r7
 8008508:	4540      	cmp	r0, r8
 800850a:	d9f5      	bls.n	80084f8 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 800850c:	2003      	movs	r0, #3
}
 800850e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008512:	039a      	lsls	r2, r3, #14
 8008514:	f53f af68 	bmi.w	80083e8 <HAL_RCC_ClockConfig+0x50>
 8008518:	e755      	b.n	80083c6 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800851a:	4a1a      	ldr	r2, [pc, #104]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
 800851c:	6811      	ldr	r1, [r2, #0]
 800851e:	0188      	lsls	r0, r1, #6
 8008520:	f57f af51 	bpl.w	80083c6 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008524:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008526:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008528:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 800852a:	4e17      	ldr	r6, [pc, #92]	@ (8008588 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800852c:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8008530:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008532:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008536:	bf0c      	ite	eq
 8008538:	4817      	ldreq	r0, [pc, #92]	@ (8008598 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800853a:	4818      	ldrne	r0, [pc, #96]	@ (800859c <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800853c:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800853e:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008542:	4810      	ldr	r0, [pc, #64]	@ (8008584 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008544:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008548:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800854c:	68c1      	ldr	r1, [r0, #12]
 800854e:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8008552:	3101      	adds	r1, #1
 8008554:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8008556:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 800855a:	42b2      	cmp	r2, r6
 800855c:	d90a      	bls.n	8008574 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800855e:	6882      	ldr	r2, [r0, #8]
 8008560:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8008564:	f43f af46 	beq.w	80083f4 <HAL_RCC_ClockConfig+0x5c>
 8008568:	0799      	lsls	r1, r3, #30
 800856a:	d503      	bpl.n	8008574 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800856c:	68a3      	ldr	r3, [r4, #8]
 800856e:	2b00      	cmp	r3, #0
 8008570:	f43f af40 	beq.w	80083f4 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8008574:	f04f 0900 	mov.w	r9, #0
 8008578:	e745      	b.n	8008406 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 800857a:	2001      	movs	r0, #1
}
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	40022000 	.word	0x40022000
 8008584:	40021000 	.word	0x40021000
 8008588:	04c4b400 	.word	0x04c4b400
 800858c:	0800bfb4 	.word	0x0800bfb4
 8008590:	2000047c 	.word	0x2000047c
 8008594:	20000484 	.word	0x20000484
 8008598:	007a1200 	.word	0x007a1200
 800859c:	00f42400 	.word	0x00f42400

080085a0 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80085a0:	4b01      	ldr	r3, [pc, #4]	@ (80085a8 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80085a2:	6818      	ldr	r0, [r3, #0]
 80085a4:	4770      	bx	lr
 80085a6:	bf00      	nop
 80085a8:	2000047c 	.word	0x2000047c

080085ac <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085ac:	4b05      	ldr	r3, [pc, #20]	@ (80085c4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80085ae:	4a06      	ldr	r2, [pc, #24]	@ (80085c8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80085b0:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80085b2:	4906      	ldr	r1, [pc, #24]	@ (80085cc <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80085b4:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80085b8:	6808      	ldr	r0, [r1, #0]
 80085ba:	5cd3      	ldrb	r3, [r2, r3]
 80085bc:	f003 031f 	and.w	r3, r3, #31
}
 80085c0:	40d8      	lsrs	r0, r3
 80085c2:	4770      	bx	lr
 80085c4:	40021000 	.word	0x40021000
 80085c8:	0800bfac 	.word	0x0800bfac
 80085cc:	2000047c 	.word	0x2000047c

080085d0 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80085d0:	4b05      	ldr	r3, [pc, #20]	@ (80085e8 <HAL_RCC_GetPCLK2Freq+0x18>)
 80085d2:	4a06      	ldr	r2, [pc, #24]	@ (80085ec <HAL_RCC_GetPCLK2Freq+0x1c>)
 80085d4:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80085d6:	4906      	ldr	r1, [pc, #24]	@ (80085f0 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80085d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80085dc:	6808      	ldr	r0, [r1, #0]
 80085de:	5cd3      	ldrb	r3, [r2, r3]
 80085e0:	f003 031f 	and.w	r3, r3, #31
}
 80085e4:	40d8      	lsrs	r0, r3
 80085e6:	4770      	bx	lr
 80085e8:	40021000 	.word	0x40021000
 80085ec:	0800bfac 	.word	0x0800bfac
 80085f0:	2000047c 	.word	0x2000047c

080085f4 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80085f4:	4a02      	ldr	r2, [pc, #8]	@ (8008600 <HAL_RCC_EnableCSS+0xc>)
 80085f6:	6813      	ldr	r3, [r2, #0]
 80085f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80085fc:	6013      	str	r3, [r2, #0]
}
 80085fe:	4770      	bx	lr
 8008600:	40021000 	.word	0x40021000

08008604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008608:	6803      	ldr	r3, [r0, #0]
{
 800860a:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800860c:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8008610:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008612:	d041      	beq.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008614:	4ba0      	ldr	r3, [pc, #640]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008616:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008618:	00d5      	lsls	r5, r2, #3
 800861a:	f140 80f7 	bpl.w	800880c <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 800861e:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008620:	4d9e      	ldr	r5, [pc, #632]	@ (800889c <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8008622:	682b      	ldr	r3, [r5, #0]
 8008624:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008628:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800862a:	f7fd fc2b 	bl	8005e84 <HAL_GetTick>
 800862e:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008630:	e004      	b.n	800863c <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008632:	f7fd fc27 	bl	8005e84 <HAL_GetTick>
 8008636:	1b83      	subs	r3, r0, r6
 8008638:	2b02      	cmp	r3, #2
 800863a:	d828      	bhi.n	800868e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800863c:	682b      	ldr	r3, [r5, #0]
 800863e:	05d8      	lsls	r0, r3, #23
 8008640:	d5f7      	bpl.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008642:	4d95      	ldr	r5, [pc, #596]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008644:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008646:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800864a:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 800864e:	f000 8119 	beq.w	8008884 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8008652:	4293      	cmp	r3, r2
 8008654:	f000 8116 	beq.w	8008884 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008658:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800865c:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008660:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008664:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008668:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800866c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008670:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008674:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008678:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 800867a:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800867e:	f140 8101 	bpl.w	8008884 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008682:	f7fd fbff 	bl	8005e84 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008686:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 800868a:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800868c:	e0f5      	b.n	800887a <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 800868e:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008690:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8008692:	2f00      	cmp	r7, #0
 8008694:	f040 80c5 	bne.w	8008822 <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008698:	07de      	lsls	r6, r3, #31
 800869a:	d508      	bpl.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800869c:	497e      	ldr	r1, [pc, #504]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800869e:	6865      	ldr	r5, [r4, #4]
 80086a0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80086a4:	f022 0203 	bic.w	r2, r2, #3
 80086a8:	432a      	orrs	r2, r5
 80086aa:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80086ae:	079d      	lsls	r5, r3, #30
 80086b0:	d508      	bpl.n	80086c4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80086b2:	4979      	ldr	r1, [pc, #484]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80086b4:	68a5      	ldr	r5, [r4, #8]
 80086b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80086ba:	f022 020c 	bic.w	r2, r2, #12
 80086be:	432a      	orrs	r2, r5
 80086c0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086c4:	0759      	lsls	r1, r3, #29
 80086c6:	d508      	bpl.n	80086da <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086c8:	4973      	ldr	r1, [pc, #460]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80086ca:	68e5      	ldr	r5, [r4, #12]
 80086cc:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80086d0:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80086d4:	432a      	orrs	r2, r5
 80086d6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086da:	071a      	lsls	r2, r3, #28
 80086dc:	d508      	bpl.n	80086f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086de:	496e      	ldr	r1, [pc, #440]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80086e0:	6925      	ldr	r5, [r4, #16]
 80086e2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80086e6:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80086ea:	432a      	orrs	r2, r5
 80086ec:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80086f0:	069f      	lsls	r7, r3, #26
 80086f2:	d508      	bpl.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80086f4:	4968      	ldr	r1, [pc, #416]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80086f6:	6965      	ldr	r5, [r4, #20]
 80086f8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80086fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008700:	432a      	orrs	r2, r5
 8008702:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008706:	065e      	lsls	r6, r3, #25
 8008708:	d508      	bpl.n	800871c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800870a:	4963      	ldr	r1, [pc, #396]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800870c:	69a5      	ldr	r5, [r4, #24]
 800870e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008712:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008716:	432a      	orrs	r2, r5
 8008718:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800871c:	061d      	lsls	r5, r3, #24
 800871e:	d508      	bpl.n	8008732 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008720:	495d      	ldr	r1, [pc, #372]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008722:	69e5      	ldr	r5, [r4, #28]
 8008724:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008728:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 800872c:	432a      	orrs	r2, r5
 800872e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008732:	05d9      	lsls	r1, r3, #23
 8008734:	d508      	bpl.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008736:	4958      	ldr	r1, [pc, #352]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008738:	6a25      	ldr	r5, [r4, #32]
 800873a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800873e:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8008742:	432a      	orrs	r2, r5
 8008744:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008748:	059a      	lsls	r2, r3, #22
 800874a:	d508      	bpl.n	800875e <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800874c:	4952      	ldr	r1, [pc, #328]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800874e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008750:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008754:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8008758:	432a      	orrs	r2, r5
 800875a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800875e:	055f      	lsls	r7, r3, #21
 8008760:	d50b      	bpl.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008762:	494d      	ldr	r1, [pc, #308]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008764:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8008766:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800876a:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 800876e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008770:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008774:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008778:	d059      	beq.n	800882e <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800877a:	051e      	lsls	r6, r3, #20
 800877c:	d50b      	bpl.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800877e:	4946      	ldr	r1, [pc, #280]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008780:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8008782:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008786:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 800878a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800878c:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008790:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008794:	d050      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008796:	04dd      	lsls	r5, r3, #19
 8008798:	d50b      	bpl.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800879a:	493f      	ldr	r1, [pc, #252]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800879c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 800879e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80087a2:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80087a6:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80087a8:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80087ac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80087b0:	d047      	beq.n	8008842 <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80087b2:	0499      	lsls	r1, r3, #18
 80087b4:	d50b      	bpl.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087b6:	4938      	ldr	r1, [pc, #224]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80087b8:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80087ba:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80087be:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80087c2:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087c4:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80087c8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80087cc:	d03e      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80087ce:	045a      	lsls	r2, r3, #17
 80087d0:	d50b      	bpl.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087d2:	4931      	ldr	r1, [pc, #196]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80087d4:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80087d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80087da:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80087de:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80087e0:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80087e4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80087e8:	d035      	beq.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80087ea:	041b      	lsls	r3, r3, #16
 80087ec:	d50b      	bpl.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80087ee:	4a2a      	ldr	r2, [pc, #168]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80087f0:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80087f2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80087f6:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80087fa:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80087fc:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008800:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008804:	d02c      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 8008806:	b002      	add	sp, #8
 8008808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 800880c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800880e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008812:	659a      	str	r2, [r3, #88]	@ 0x58
 8008814:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008816:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800881a:	9301      	str	r3, [sp, #4]
 800881c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800881e:	2701      	movs	r7, #1
 8008820:	e6fe      	b.n	8008620 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8008822:	491d      	ldr	r1, [pc, #116]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008824:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8008826:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 800882a:	658a      	str	r2, [r1, #88]	@ 0x58
 800882c:	e734      	b.n	8008698 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800882e:	68ca      	ldr	r2, [r1, #12]
 8008830:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008834:	60ca      	str	r2, [r1, #12]
 8008836:	e7a0      	b.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008838:	68ca      	ldr	r2, [r1, #12]
 800883a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800883e:	60ca      	str	r2, [r1, #12]
 8008840:	e7a9      	b.n	8008796 <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008842:	68ca      	ldr	r2, [r1, #12]
 8008844:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008848:	60ca      	str	r2, [r1, #12]
 800884a:	e7b2      	b.n	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800884c:	68ca      	ldr	r2, [r1, #12]
 800884e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008852:	60ca      	str	r2, [r1, #12]
 8008854:	e7bb      	b.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008856:	68ca      	ldr	r2, [r1, #12]
 8008858:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800885c:	60ca      	str	r2, [r1, #12]
 800885e:	e7c4      	b.n	80087ea <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008860:	68d3      	ldr	r3, [r2, #12]
 8008862:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008866:	60d3      	str	r3, [r2, #12]
}
 8008868:	b002      	add	sp, #8
 800886a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800886e:	f7fd fb09 	bl	8005e84 <HAL_GetTick>
 8008872:	1b80      	subs	r0, r0, r6
 8008874:	4540      	cmp	r0, r8
 8008876:	f63f af0a 	bhi.w	800868e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800887a:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800887e:	079b      	lsls	r3, r3, #30
 8008880:	d5f5      	bpl.n	800886e <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008882:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008884:	4904      	ldr	r1, [pc, #16]	@ (8008898 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008886:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 800888a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008894:	2000      	movs	r0, #0
 8008896:	e6fb      	b.n	8008690 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8008898:	40021000 	.word	0x40021000
 800889c:	40007000 	.word	0x40007000

080088a0 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088a0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088a2:	6a02      	ldr	r2, [r0, #32]
 80088a4:	f022 0201 	bic.w	r2, r2, #1
{
 80088a8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088aa:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088ac:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088ae:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088b0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80088b6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80088ba:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088bc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80088be:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80088c2:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088c4:	4d13      	ldr	r5, [pc, #76]	@ (8008914 <TIM_OC1_SetConfig+0x74>)
 80088c6:	42a8      	cmp	r0, r5
 80088c8:	d00f      	beq.n	80088ea <TIM_OC1_SetConfig+0x4a>
 80088ca:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80088ce:	42a8      	cmp	r0, r5
 80088d0:	d00b      	beq.n	80088ea <TIM_OC1_SetConfig+0x4a>
 80088d2:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80088d6:	42a8      	cmp	r0, r5
 80088d8:	d007      	beq.n	80088ea <TIM_OC1_SetConfig+0x4a>
 80088da:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80088de:	42a8      	cmp	r0, r5
 80088e0:	d003      	beq.n	80088ea <TIM_OC1_SetConfig+0x4a>
 80088e2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80088e6:	42a8      	cmp	r0, r5
 80088e8:	d10d      	bne.n	8008906 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088ea:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 80088ec:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 80088f0:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80088f2:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088f6:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80088fa:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 80088fe:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008902:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008906:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008908:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 800890a:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 800890c:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 800890e:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8008910:	6203      	str	r3, [r0, #32]
}
 8008912:	4770      	bx	lr
 8008914:	40012c00 	.word	0x40012c00

08008918 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008918:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800891a:	6a02      	ldr	r2, [r0, #32]
 800891c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8008920:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008922:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008924:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008926:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008928:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800892a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800892e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008932:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008934:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008936:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800893a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800893e:	4d14      	ldr	r5, [pc, #80]	@ (8008990 <TIM_OC3_SetConfig+0x78>)
 8008940:	42a8      	cmp	r0, r5
 8008942:	d00f      	beq.n	8008964 <TIM_OC3_SetConfig+0x4c>
 8008944:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008948:	42a8      	cmp	r0, r5
 800894a:	d00b      	beq.n	8008964 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894c:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008950:	42a8      	cmp	r0, r5
 8008952:	d00e      	beq.n	8008972 <TIM_OC3_SetConfig+0x5a>
 8008954:	4d0f      	ldr	r5, [pc, #60]	@ (8008994 <TIM_OC3_SetConfig+0x7c>)
 8008956:	42a8      	cmp	r0, r5
 8008958:	d00b      	beq.n	8008972 <TIM_OC3_SetConfig+0x5a>
 800895a:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800895e:	42a8      	cmp	r0, r5
 8008960:	d10f      	bne.n	8008982 <TIM_OC3_SetConfig+0x6a>
 8008962:	e006      	b.n	8008972 <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008964:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800896a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800896e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008972:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008976:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800897a:	ea46 0c05 	orr.w	ip, r6, r5
 800897e:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008982:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008984:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008986:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008988:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 800898a:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 800898c:	6203      	str	r3, [r0, #32]
}
 800898e:	4770      	bx	lr
 8008990:	40012c00 	.word	0x40012c00
 8008994:	40014400 	.word	0x40014400

08008998 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008998:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800899a:	6a02      	ldr	r2, [r0, #32]
 800899c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 80089a0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80089a2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089a4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80089a6:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089a8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80089aa:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80089ae:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089b2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089b6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80089b8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80089bc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80089c0:	4d14      	ldr	r5, [pc, #80]	@ (8008a14 <TIM_OC4_SetConfig+0x7c>)
 80089c2:	42a8      	cmp	r0, r5
 80089c4:	d00f      	beq.n	80089e6 <TIM_OC4_SetConfig+0x4e>
 80089c6:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80089ca:	42a8      	cmp	r0, r5
 80089cc:	d00b      	beq.n	80089e6 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089ce:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80089d2:	42a8      	cmp	r0, r5
 80089d4:	d00e      	beq.n	80089f4 <TIM_OC4_SetConfig+0x5c>
 80089d6:	4d10      	ldr	r5, [pc, #64]	@ (8008a18 <TIM_OC4_SetConfig+0x80>)
 80089d8:	42a8      	cmp	r0, r5
 80089da:	d00b      	beq.n	80089f4 <TIM_OC4_SetConfig+0x5c>
 80089dc:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80089e0:	42a8      	cmp	r0, r5
 80089e2:	d10f      	bne.n	8008a04 <TIM_OC4_SetConfig+0x6c>
 80089e4:	e006      	b.n	80089f4 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80089e6:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 80089e8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80089ec:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 80089f0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80089f4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80089f8:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80089fc:	ea46 0c05 	orr.w	ip, r6, r5
 8008a00:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008a04:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008a06:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008a08:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008a0a:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008a0c:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8008a0e:	6203      	str	r3, [r0, #32]
}
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40012c00 	.word	0x40012c00
 8008a18:	40014400 	.word	0x40014400

08008a1c <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d075      	beq.n	8008b0c <HAL_TIM_PWM_Init+0xf0>
{
 8008a20:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008a22:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008a26:	4604      	mov	r4, r0
 8008a28:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d068      	beq.n	8008b02 <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008a30:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a32:	4e37      	ldr	r6, [pc, #220]	@ (8008b10 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8008a34:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a36:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a38:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008a3a:	2202      	movs	r2, #2
 8008a3c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a40:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8008a42:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a44:	d04c      	beq.n	8008ae0 <HAL_TIM_PWM_Init+0xc4>
 8008a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a4a:	d017      	beq.n	8008a7c <HAL_TIM_PWM_Init+0x60>
 8008a4c:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8008a50:	42b3      	cmp	r3, r6
 8008a52:	d013      	beq.n	8008a7c <HAL_TIM_PWM_Init+0x60>
 8008a54:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008a58:	42b3      	cmp	r3, r6
 8008a5a:	d00f      	beq.n	8008a7c <HAL_TIM_PWM_Init+0x60>
 8008a5c:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8008a60:	42b3      	cmp	r3, r6
 8008a62:	d03d      	beq.n	8008ae0 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008a64:	4e2b      	ldr	r6, [pc, #172]	@ (8008b14 <HAL_TIM_PWM_Init+0xf8>)
 8008a66:	42b3      	cmp	r3, r6
 8008a68:	d03e      	beq.n	8008ae8 <HAL_TIM_PWM_Init+0xcc>
 8008a6a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008a6e:	42b3      	cmp	r3, r6
 8008a70:	d03a      	beq.n	8008ae8 <HAL_TIM_PWM_Init+0xcc>
 8008a72:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008a76:	42b3      	cmp	r3, r6
 8008a78:	d108      	bne.n	8008a8c <HAL_TIM_PWM_Init+0x70>
 8008a7a:	e035      	b.n	8008ae8 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8008a7c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a7e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a82:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a84:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a86:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a8a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a90:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8008a92:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a94:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a96:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008a98:	2201      	movs	r2, #1
 8008a9a:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008a9c:	691a      	ldr	r2, [r3, #16]
 8008a9e:	07d2      	lsls	r2, r2, #31
 8008aa0:	d503      	bpl.n	8008aaa <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008aa2:	691a      	ldr	r2, [r3, #16]
 8008aa4:	f022 0201 	bic.w	r2, r2, #1
 8008aa8:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ab0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008ab4:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008ab8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008abc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008ac0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008ac4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ac8:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008acc:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008ad0:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008ad4:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008ad8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008adc:	2000      	movs	r0, #0
}
 8008ade:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8008ae0:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ae2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008ae6:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008ae8:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008aea:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008aee:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008af0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008af4:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8008af6:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008af8:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008afa:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008afc:	6962      	ldr	r2, [r4, #20]
 8008afe:	631a      	str	r2, [r3, #48]	@ 0x30
 8008b00:	e7ca      	b.n	8008a98 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8008b02:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008b06:	f7fc f85f 	bl	8004bc8 <HAL_TIM_PWM_MspInit>
 8008b0a:	e791      	b.n	8008a30 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8008b0c:	2001      	movs	r0, #1
}
 8008b0e:	4770      	bx	lr
 8008b10:	40012c00 	.word	0x40012c00
 8008b14:	40014000 	.word	0x40014000

08008b18 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8008b18:	2800      	cmp	r0, #0
 8008b1a:	f000 8099 	beq.w	8008c50 <HAL_TIM_Encoder_Init+0x138>
{
 8008b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008b20:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008b24:	460d      	mov	r5, r1
 8008b26:	4604      	mov	r4, r0
 8008b28:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f000 808a 	beq.w	8008c46 <HAL_TIM_Encoder_Init+0x12e>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b32:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b34:	4f47      	ldr	r7, [pc, #284]	@ (8008c54 <HAL_TIM_Encoder_Init+0x13c>)
  TIMx->PSC = Structure->Prescaler;
 8008b36:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b38:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b3a:	69a6      	ldr	r6, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008b3c:	2202      	movs	r2, #2
 8008b3e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8008b42:	689a      	ldr	r2, [r3, #8]
 8008b44:	f422 32a0 	bic.w	r2, r2, #81920	@ 0x14000
 8008b48:	f022 0207 	bic.w	r2, r2, #7
 8008b4c:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b4e:	42bb      	cmp	r3, r7
  tmpcr1 = TIMx->CR1;
 8008b50:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b52:	d067      	beq.n	8008c24 <HAL_TIM_Encoder_Init+0x10c>
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008b58:	d017      	beq.n	8008b8a <HAL_TIM_Encoder_Init+0x72>
 8008b5a:	f5a7 3794 	sub.w	r7, r7, #75776	@ 0x12800
 8008b5e:	42bb      	cmp	r3, r7
 8008b60:	d013      	beq.n	8008b8a <HAL_TIM_Encoder_Init+0x72>
 8008b62:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008b66:	42bb      	cmp	r3, r7
 8008b68:	d00f      	beq.n	8008b8a <HAL_TIM_Encoder_Init+0x72>
 8008b6a:	f507 3796 	add.w	r7, r7, #76800	@ 0x12c00
 8008b6e:	42bb      	cmp	r3, r7
 8008b70:	d058      	beq.n	8008c24 <HAL_TIM_Encoder_Init+0x10c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b72:	4f39      	ldr	r7, [pc, #228]	@ (8008c58 <HAL_TIM_Encoder_Init+0x140>)
 8008b74:	42bb      	cmp	r3, r7
 8008b76:	d059      	beq.n	8008c2c <HAL_TIM_Encoder_Init+0x114>
 8008b78:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008b7c:	42bb      	cmp	r3, r7
 8008b7e:	d055      	beq.n	8008c2c <HAL_TIM_Encoder_Init+0x114>
 8008b80:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008b84:	42bb      	cmp	r3, r7
 8008b86:	d108      	bne.n	8008b9a <HAL_TIM_Encoder_Init+0x82>
 8008b88:	e050      	b.n	8008c2c <HAL_TIM_Encoder_Init+0x114>
    tmpcr1 |= Structure->CounterMode;
 8008b8a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b8c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008b90:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b92:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b94:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b98:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b9a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008b9e:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8008ba0:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008ba2:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008ba4:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008baa:	691a      	ldr	r2, [r3, #16]
 8008bac:	07d2      	lsls	r2, r2, #31
 8008bae:	d503      	bpl.n	8008bb8 <HAL_TIM_Encoder_Init+0xa0>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008bb0:	691a      	ldr	r2, [r3, #16]
 8008bb2:	f022 0201 	bic.w	r2, r2, #1
 8008bb6:	611a      	str	r2, [r3, #16]
  tmpsmcr = htim->Instance->SMCR;
 8008bb8:	689e      	ldr	r6, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 8008bba:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bbc:	69a8      	ldr	r0, [r5, #24]
 8008bbe:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bc0:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8008bc2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8008bc6:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8008bca:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8008bce:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bd0:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8008bd2:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bd4:	0112      	lsls	r2, r2, #4
 8008bd6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8008bda:	68e8      	ldr	r0, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008bdc:	f421 417c 	bic.w	r1, r1, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008be0:	4302      	orrs	r2, r0
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8008be2:	f021 01fc 	bic.w	r1, r1, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008be6:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer = htim->Instance->CCER;
 8008bea:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bec:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008bee:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bf0:	6869      	ldr	r1, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008bf2:	f020 00aa 	bic.w	r0, r0, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008bf6:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8008bfa:	4308      	orrs	r0, r1
  tmpsmcr |= sConfig->EncoderMode;
 8008bfc:	6829      	ldr	r1, [r5, #0]
 8008bfe:	430e      	orrs	r6, r1
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c00:	2101      	movs	r1, #1
  htim->Instance->SMCR = tmpsmcr;
 8008c02:	609e      	str	r6, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8008c04:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8008c06:	6218      	str	r0, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c08:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c0c:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c10:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c14:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c18:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008c1c:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008c20:	2000      	movs	r0, #0
}
 8008c22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8008c24:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c26:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c2a:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c2c:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c2e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c32:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c38:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8008c3a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c3c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c3e:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008c40:	6962      	ldr	r2, [r4, #20]
 8008c42:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c44:	e7af      	b.n	8008ba6 <HAL_TIM_Encoder_Init+0x8e>
    htim->Lock = HAL_UNLOCKED;
 8008c46:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8008c4a:	f7fb ffd5 	bl	8004bf8 <HAL_TIM_Encoder_MspInit>
 8008c4e:	e770      	b.n	8008b32 <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8008c50:	2001      	movs	r0, #1
}
 8008c52:	4770      	bx	lr
 8008c54:	40012c00 	.word	0x40012c00
 8008c58:	40014000 	.word	0x40014000

08008c5c <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8008c5c:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c5e:	6a02      	ldr	r2, [r0, #32]
 8008c60:	f022 0210 	bic.w	r2, r2, #16
{
 8008c64:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c66:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008c68:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008c6a:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c6c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008c6e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008c72:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c76:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c7a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008c7c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008c80:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008c84:	4d14      	ldr	r5, [pc, #80]	@ (8008cd8 <TIM_OC2_SetConfig+0x7c>)
 8008c86:	42a8      	cmp	r0, r5
 8008c88:	d00f      	beq.n	8008caa <TIM_OC2_SetConfig+0x4e>
 8008c8a:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008c8e:	42a8      	cmp	r0, r5
 8008c90:	d00b      	beq.n	8008caa <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c92:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008c96:	42a8      	cmp	r0, r5
 8008c98:	d00e      	beq.n	8008cb8 <TIM_OC2_SetConfig+0x5c>
 8008c9a:	4d10      	ldr	r5, [pc, #64]	@ (8008cdc <TIM_OC2_SetConfig+0x80>)
 8008c9c:	42a8      	cmp	r0, r5
 8008c9e:	d00b      	beq.n	8008cb8 <TIM_OC2_SetConfig+0x5c>
 8008ca0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008ca4:	42a8      	cmp	r0, r5
 8008ca6:	d10f      	bne.n	8008cc8 <TIM_OC2_SetConfig+0x6c>
 8008ca8:	e006      	b.n	8008cb8 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008caa:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008cb0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cb8:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008cbc:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008cc0:	ea46 0c05 	orr.w	ip, r6, r5
 8008cc4:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008cc8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008cca:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008ccc:	6182      	str	r2, [r0, #24]
}
 8008cce:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008cd0:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008cd2:	6203      	str	r3, [r0, #32]
}
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40014400 	.word	0x40014400

08008ce0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008ce0:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	f000 80dc 	beq.w	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8008cea:	2301      	movs	r3, #1
{
 8008cec:	b570      	push	{r4, r5, r6, lr}
 8008cee:	4604      	mov	r4, r0
 8008cf0:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008cf2:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008cf6:	2a14      	cmp	r2, #20
 8008cf8:	d80c      	bhi.n	8008d14 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008cfa:	e8df f002 	tbb	[pc, r2]
 8008cfe:	0b4f      	.short	0x0b4f
 8008d00:	0b630b0b 	.word	0x0b630b0b
 8008d04:	0b740b0b 	.word	0x0b740b0b
 8008d08:	0b840b0b 	.word	0x0b840b0b
 8008d0c:	0b950b0b 	.word	0x0b950b0b
 8008d10:	0b0b      	.short	0x0b0b
 8008d12:	10          	.byte	0x10
 8008d13:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008d14:	2300      	movs	r3, #0
 8008d16:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8008d1a:	2001      	movs	r0, #1
}
 8008d1c:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008d1e:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d20:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008d22:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008d24:	6a19      	ldr	r1, [r3, #32]
 8008d26:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8008d2a:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008d2c:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008d2e:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008d30:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8008d34:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d38:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d3c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d3e:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d42:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d46:	4e58      	ldr	r6, [pc, #352]	@ (8008ea8 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008d48:	42b3      	cmp	r3, r6
 8008d4a:	d00f      	beq.n	8008d6c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008d4c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008d50:	42b3      	cmp	r3, r6
 8008d52:	d00b      	beq.n	8008d6c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008d54:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008d58:	42b3      	cmp	r3, r6
 8008d5a:	d007      	beq.n	8008d6c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008d5c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008d60:	42b3      	cmp	r3, r6
 8008d62:	d003      	beq.n	8008d6c <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008d64:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008d68:	42b3      	cmp	r3, r6
 8008d6a:	d104      	bne.n	8008d76 <HAL_TIM_PWM_ConfigChannel+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d6c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d6e:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d72:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d76:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d78:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d7a:	6869      	ldr	r1, [r5, #4]
 8008d7c:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d7e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d82:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008d84:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d88:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008d8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d90:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008d92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008d94:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008d98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008d9a:	e00e      	b.n	8008dba <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008d9c:	6800      	ldr	r0, [r0, #0]
 8008d9e:	f7ff fd7f 	bl	80088a0 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008da2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008da4:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008da6:	f043 0308 	orr.w	r3, r3, #8
 8008daa:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008dac:	6983      	ldr	r3, [r0, #24]
 8008dae:	f023 0304 	bic.w	r3, r3, #4
 8008db2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008db4:	6983      	ldr	r3, [r0, #24]
 8008db6:	4313      	orrs	r3, r2
 8008db8:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008dba:	2300      	movs	r3, #0
 8008dbc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008dc0:	2000      	movs	r0, #0
}
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008dc4:	6800      	ldr	r0, [r0, #0]
 8008dc6:	f7ff ff49 	bl	8008c5c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dca:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008dcc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008dce:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008dd2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008dd4:	6983      	ldr	r3, [r0, #24]
 8008dd6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008dda:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008ddc:	6983      	ldr	r3, [r0, #24]
 8008dde:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008de2:	6183      	str	r3, [r0, #24]
      break;
 8008de4:	e7e9      	b.n	8008dba <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008de6:	6800      	ldr	r0, [r0, #0]
 8008de8:	f7ff fd96 	bl	8008918 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008dec:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dee:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008df0:	f043 0308 	orr.w	r3, r3, #8
 8008df4:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008df6:	69c3      	ldr	r3, [r0, #28]
 8008df8:	f023 0304 	bic.w	r3, r3, #4
 8008dfc:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008dfe:	69c3      	ldr	r3, [r0, #28]
 8008e00:	4313      	orrs	r3, r2
 8008e02:	61c3      	str	r3, [r0, #28]
      break;
 8008e04:	e7d9      	b.n	8008dba <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e06:	6800      	ldr	r0, [r0, #0]
 8008e08:	f7ff fdc6 	bl	8008998 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e0c:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e0e:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e10:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e14:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e16:	69c3      	ldr	r3, [r0, #28]
 8008e18:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e1c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e1e:	69c3      	ldr	r3, [r0, #28]
 8008e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e24:	61c3      	str	r3, [r0, #28]
      break;
 8008e26:	e7c8      	b.n	8008dba <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008e28:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008e2a:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008e2c:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008e2e:	6a19      	ldr	r1, [r3, #32]
 8008e30:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008e34:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008e36:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008e38:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008e3a:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008e3e:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008e42:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e44:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008e46:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008e4a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e4e:	4e16      	ldr	r6, [pc, #88]	@ (8008ea8 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008e50:	42b3      	cmp	r3, r6
 8008e52:	d00f      	beq.n	8008e74 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008e54:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008e58:	42b3      	cmp	r3, r6
 8008e5a:	d00b      	beq.n	8008e74 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008e5c:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008e60:	42b3      	cmp	r3, r6
 8008e62:	d007      	beq.n	8008e74 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008e64:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008e68:	42b3      	cmp	r3, r6
 8008e6a:	d003      	beq.n	8008e74 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008e6c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008e70:	42b3      	cmp	r3, r6
 8008e72:	d104      	bne.n	8008e7e <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e74:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008e76:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008e7a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008e7e:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008e80:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008e82:	6869      	ldr	r1, [r5, #4]
 8008e84:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8008e86:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e88:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e8a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008e8c:	f042 0208 	orr.w	r2, r2, #8
 8008e90:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008e92:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e94:	f022 0204 	bic.w	r2, r2, #4
 8008e98:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008e9a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e9c:	430a      	orrs	r2, r1
 8008e9e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008ea0:	e78b      	b.n	8008dba <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8008ea2:	2002      	movs	r0, #2
}
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40012c00 	.word	0x40012c00

08008eac <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eac:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d046      	beq.n	8008f42 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8008eb4:	b470      	push	{r4, r5, r6}
 8008eb6:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008eb8:	4e23      	ldr	r6, [pc, #140]	@ (8008f48 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008eba:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008ebc:	2302      	movs	r3, #2
 8008ebe:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ec2:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8008ec4:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008ec6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008ec8:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008eca:	d024      	beq.n	8008f16 <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008ecc:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008ed0:	42b0      	cmp	r0, r6
 8008ed2:	d02b      	beq.n	8008f2c <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8008ed4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008edc:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ede:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008ee2:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ee4:	d00a      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008ee6:	4b19      	ldr	r3, [pc, #100]	@ (8008f4c <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008ee8:	4298      	cmp	r0, r3
 8008eea:	d007      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008eec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008ef0:	4298      	cmp	r0, r3
 8008ef2:	d003      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008ef4:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8008ef8:	4298      	cmp	r0, r3
 8008efa:	d104      	bne.n	8008f06 <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008efc:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008efe:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f02:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f04:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008f06:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008f0e:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8008f12:	bc70      	pop	{r4, r5, r6}
 8008f14:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f16:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f18:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f1c:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f1e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f26:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008f28:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f2a:	e7e7      	b.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f2c:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f32:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f34:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f38:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f3c:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8008f3e:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f40:	e7dc      	b.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8008f42:	2002      	movs	r0, #2
}
 8008f44:	4770      	bx	lr
 8008f46:	bf00      	nop
 8008f48:	40012c00 	.word	0x40012c00
 8008f4c:	40000400 	.word	0x40000400

08008f50 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f50:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008f54:	2b01      	cmp	r3, #1
 8008f56:	d045      	beq.n	8008fe4 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8008f58:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008f5a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8008f5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f62:	4602      	mov	r2, r0
 8008f64:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f66:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f68:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008f6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f6e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f74:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008f76:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f78:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f7c:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008f7e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f84:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008f86:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f88:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f8c:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f8e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f90:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f94:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008f96:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008f9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008f9e:	4c12      	ldr	r4, [pc, #72]	@ (8008fe8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008fa0:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008fa2:	6810      	ldr	r0, [r2, #0]
 8008fa4:	42a0      	cmp	r0, r4
 8008fa6:	d00b      	beq.n	8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8008fa8:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8008fac:	42a0      	cmp	r0, r4
 8008fae:	d007      	beq.n	8008fc0 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8008fb0:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008fb2:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8008fb4:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8008fb8:	4608      	mov	r0, r1
}
 8008fba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008fbe:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008fc0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8008fc2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008fc6:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008fca:	6a0c      	ldr	r4, [r1, #32]
 8008fcc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008fd0:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fd2:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fd4:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008fd6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fda:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008fdc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008fe0:	430b      	orrs	r3, r1
 8008fe2:	e7e5      	b.n	8008fb0 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8008fe4:	2002      	movs	r0, #2
}
 8008fe6:	4770      	bx	lr
 8008fe8:	40012c00 	.word	0x40012c00

08008fec <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008fec:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fee:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008ff2:	2801      	cmp	r0, #1
 8008ff4:	d047      	beq.n	8009086 <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8008ff6:	6810      	ldr	r0, [r2, #0]
 8008ff8:	3801      	subs	r0, #1
 8008ffa:	280f      	cmp	r0, #15
{
 8008ffc:	b4f0      	push	{r4, r5, r6, r7}
 8008ffe:	d815      	bhi.n	800902c <HAL_TIMEx_ConfigBreakInput+0x40>
 8009000:	4c22      	ldr	r4, [pc, #136]	@ (800908c <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8009002:	4e23      	ldr	r6, [pc, #140]	@ (8009090 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8009004:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8009008:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 800900c:	4c21      	ldr	r4, [pc, #132]	@ (8009094 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 800900e:	4e22      	ldr	r6, [pc, #136]	@ (8009098 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8009010:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8009014:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8009018:	2901      	cmp	r1, #1
 800901a:	d00d      	beq.n	8009038 <HAL_TIMEx_ConfigBreakInput+0x4c>
 800901c:	2902      	cmp	r1, #2
 800901e:	d01c      	beq.n	800905a <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8009020:	2200      	movs	r2, #0
 8009022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8009026:	2001      	movs	r0, #1

  return status;
}
 8009028:	bcf0      	pop	{r4, r5, r6, r7}
 800902a:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 800902c:	2700      	movs	r7, #0
  switch (BreakInput)
 800902e:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8009030:	46bc      	mov	ip, r7
 8009032:	463c      	mov	r4, r7
 8009034:	463d      	mov	r5, r7
  switch (BreakInput)
 8009036:	d1f1      	bne.n	800901c <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009038:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 800903a:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800903c:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800903e:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8009040:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009042:	fa01 f10c 	lsl.w	r1, r1, ip
 8009046:	ea81 0207 	eor.w	r2, r1, r7
 800904a:	402a      	ands	r2, r5
 800904c:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800904e:	ea80 0102 	eor.w	r1, r0, r2
 8009052:	4021      	ands	r1, r4
 8009054:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8009056:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8009058:	e00f      	b.n	800907a <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800905a:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 800905c:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800905e:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009060:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8009062:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8009064:	fa01 f10c 	lsl.w	r1, r1, ip
 8009068:	ea81 0207 	eor.w	r2, r1, r7
 800906c:	402a      	ands	r2, r5
 800906e:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8009070:	ea80 0102 	eor.w	r1, r0, r2
 8009074:	4021      	ands	r1, r4
 8009076:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8009078:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 800907a:	2200      	movs	r2, #0
 800907c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009080:	2000      	movs	r0, #0
}
 8009082:	bcf0      	pop	{r4, r5, r6, r7}
 8009084:	4770      	bx	lr
  __HAL_LOCK(htim);
 8009086:	2002      	movs	r0, #2
}
 8009088:	4770      	bx	lr
 800908a:	bf00      	nop
 800908c:	0800c094 	.word	0x0800c094
 8009090:	0800c014 	.word	0x0800c014
 8009094:	0800c054 	.word	0x0800c054
 8009098:	0800bfd4 	.word	0x0800bfd4

0800909c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800909c:	b570      	push	{r4, r5, r6, lr}
 800909e:	4604      	mov	r4, r0
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090a0:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090a2:	6882      	ldr	r2, [r0, #8]
 80090a4:	6900      	ldr	r0, [r0, #16]
 80090a6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090a8:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090aa:	4302      	orrs	r2, r0
 80090ac:	430a      	orrs	r2, r1
 80090ae:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b0:	498e      	ldr	r1, [pc, #568]	@ (80092ec <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80090b2:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80090b4:	4029      	ands	r1, r5
 80090b6:	430a      	orrs	r2, r1
 80090b8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090be:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80090c4:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090c6:	498a      	ldr	r1, [pc, #552]	@ (80092f0 <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090c8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090ca:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090cc:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090ce:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090d0:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80090d4:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80090d8:	f000 80b0 	beq.w	800923c <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 80090dc:	6a26      	ldr	r6, [r4, #32]
 80090de:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090e0:	430a      	orrs	r2, r1
 80090e2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80090e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090e6:	f022 020f 	bic.w	r2, r2, #15
 80090ea:	432a      	orrs	r2, r5
 80090ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090ee:	4a81      	ldr	r2, [pc, #516]	@ (80092f4 <UART_SetConfig+0x258>)
 80090f0:	4293      	cmp	r3, r2
 80090f2:	d035      	beq.n	8009160 <UART_SetConfig+0xc4>
 80090f4:	4a80      	ldr	r2, [pc, #512]	@ (80092f8 <UART_SetConfig+0x25c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00d      	beq.n	8009116 <UART_SetConfig+0x7a>
 80090fa:	4a80      	ldr	r2, [pc, #512]	@ (80092fc <UART_SetConfig+0x260>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d055      	beq.n	80091ac <UART_SetConfig+0x110>
 8009100:	4a7f      	ldr	r2, [pc, #508]	@ (8009300 <UART_SetConfig+0x264>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d040      	beq.n	8009188 <UART_SetConfig+0xec>

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
      {
        ret = HAL_ERROR;
 8009106:	2001      	movs	r0, #1
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009108:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800910a:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 800910e:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8009112:	66a2      	str	r2, [r4, #104]	@ 0x68

  return ret;
}
 8009114:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009116:	4b7b      	ldr	r3, [pc, #492]	@ (8009304 <UART_SetConfig+0x268>)
 8009118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800911c:	f003 030c 	and.w	r3, r3, #12
 8009120:	2b0c      	cmp	r3, #12
 8009122:	d8f0      	bhi.n	8009106 <UART_SetConfig+0x6a>
 8009124:	a201      	add	r2, pc, #4	@ (adr r2, 800912c <UART_SetConfig+0x90>)
 8009126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912a:	bf00      	nop
 800912c:	08009231 	.word	0x08009231
 8009130:	08009107 	.word	0x08009107
 8009134:	08009107 	.word	0x08009107
 8009138:	08009107 	.word	0x08009107
 800913c:	0800919f 	.word	0x0800919f
 8009140:	08009107 	.word	0x08009107
 8009144:	08009107 	.word	0x08009107
 8009148:	08009107 	.word	0x08009107
 800914c:	080091f3 	.word	0x080091f3
 8009150:	08009107 	.word	0x08009107
 8009154:	08009107 	.word	0x08009107
 8009158:	08009107 	.word	0x08009107
 800915c:	080091c1 	.word	0x080091c1
 8009160:	4b68      	ldr	r3, [pc, #416]	@ (8009304 <UART_SetConfig+0x268>)
 8009162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009166:	f003 0303 	and.w	r3, r3, #3
 800916a:	2b02      	cmp	r3, #2
 800916c:	d041      	beq.n	80091f2 <UART_SetConfig+0x156>
 800916e:	2b03      	cmp	r3, #3
 8009170:	d026      	beq.n	80091c0 <UART_SetConfig+0x124>
 8009172:	2b01      	cmp	r3, #1
 8009174:	d013      	beq.n	800919e <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009176:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800917a:	f000 80ac 	beq.w	80092d6 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800917e:	f7ff fa27 	bl	80085d0 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009182:	b3a0      	cbz	r0, 80091ee <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009184:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009186:	e020      	b.n	80091ca <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009188:	4b5e      	ldr	r3, [pc, #376]	@ (8009304 <UART_SetConfig+0x268>)
 800918a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800918e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009192:	2b80      	cmp	r3, #128	@ 0x80
 8009194:	d02d      	beq.n	80091f2 <UART_SetConfig+0x156>
 8009196:	f200 808e 	bhi.w	80092b6 <UART_SetConfig+0x21a>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d048      	beq.n	8009230 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800919e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80091a2:	f000 809e 	beq.w	80092e2 <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 80091a6:	f7ff f8bf 	bl	8008328 <HAL_RCC_GetSysClockFreq>
        break;
 80091aa:	e7ea      	b.n	8009182 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091ac:	4b55      	ldr	r3, [pc, #340]	@ (8009304 <UART_SetConfig+0x268>)
 80091ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091b2:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d01b      	beq.n	80091f2 <UART_SetConfig+0x156>
 80091ba:	d9ee      	bls.n	800919a <UART_SetConfig+0xfe>
 80091bc:	2b30      	cmp	r3, #48	@ 0x30
 80091be:	d1a2      	bne.n	8009106 <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80091c4:	d019      	beq.n	80091fa <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 80091c6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091ca:	6863      	ldr	r3, [r4, #4]
 80091cc:	4a4e      	ldr	r2, [pc, #312]	@ (8009308 <UART_SetConfig+0x26c>)
 80091ce:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80091d2:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091d6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091da:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80091de:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091e2:	f1a0 0310 	sub.w	r3, r0, #16
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d88d      	bhi.n	8009106 <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 80091ea:	6823      	ldr	r3, [r4, #0]
 80091ec:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 80091ee:	2000      	movs	r0, #0
 80091f0:	e78a      	b.n	8009108 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091f2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80091f6:	4845      	ldr	r0, [pc, #276]	@ (800930c <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091f8:	d1e7      	bne.n	80091ca <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fa:	6862      	ldr	r2, [r4, #4]
 80091fc:	4b42      	ldr	r3, [pc, #264]	@ (8009308 <UART_SetConfig+0x26c>)
 80091fe:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8009202:	fbb0 f0f1 	udiv	r0, r0, r1
 8009206:	0853      	lsrs	r3, r2, #1
 8009208:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800920c:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009210:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009214:	f1a3 0210 	sub.w	r2, r3, #16
 8009218:	428a      	cmp	r2, r1
 800921a:	f63f af74 	bhi.w	8009106 <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800921e:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009222:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009224:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009226:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800922a:	4313      	orrs	r3, r2
 800922c:	60cb      	str	r3, [r1, #12]
 800922e:	e7de      	b.n	80091ee <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009230:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009234:	d049      	beq.n	80092ca <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009236:	f7ff f9b9 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
        break;
 800923a:	e7a2      	b.n	8009182 <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800923c:	4311      	orrs	r1, r2
 800923e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009240:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009242:	4930      	ldr	r1, [pc, #192]	@ (8009304 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009244:	f022 020f 	bic.w	r2, r2, #15
 8009248:	432a      	orrs	r2, r5
 800924a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800924c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8009250:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009254:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009258:	d046      	beq.n	80092e8 <UART_SetConfig+0x24c>
 800925a:	d82f      	bhi.n	80092bc <UART_SetConfig+0x220>
 800925c:	2b00      	cmp	r3, #0
 800925e:	d03d      	beq.n	80092dc <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 8009260:	f7ff f862 	bl	8008328 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009264:	2800      	cmp	r0, #0
 8009266:	d0c2      	beq.n	80091ee <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009268:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800926a:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800926c:	4b26      	ldr	r3, [pc, #152]	@ (8009308 <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800926e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009272:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8009276:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800927a:	4299      	cmp	r1, r3
 800927c:	f63f af43 	bhi.w	8009106 <UART_SetConfig+0x6a>
 8009280:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009284:	f63f af3f 	bhi.w	8009106 <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009288:	2300      	movs	r3, #0
 800928a:	4619      	mov	r1, r3
 800928c:	f7f7 fb82 	bl	8000994 <__aeabi_uldivmod>
 8009290:	0872      	lsrs	r2, r6, #1
 8009292:	0203      	lsls	r3, r0, #8
 8009294:	0209      	lsls	r1, r1, #8
 8009296:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800929a:	1898      	adds	r0, r3, r2
 800929c:	f141 0100 	adc.w	r1, r1, #0
 80092a0:	4632      	mov	r2, r6
 80092a2:	2300      	movs	r3, #0
 80092a4:	f7f7 fb76 	bl	8000994 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80092a8:	4b19      	ldr	r3, [pc, #100]	@ (8009310 <UART_SetConfig+0x274>)
 80092aa:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 80092ae:	429a      	cmp	r2, r3
 80092b0:	f63f af29 	bhi.w	8009106 <UART_SetConfig+0x6a>
 80092b4:	e799      	b.n	80091ea <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80092b8:	d082      	beq.n	80091c0 <UART_SetConfig+0x124>
 80092ba:	e724      	b.n	8009106 <UART_SetConfig+0x6a>
 80092bc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80092c0:	f47f af21 	bne.w	8009106 <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 80092c4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80092c8:	e7cf      	b.n	800926a <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80092ca:	f7ff f96f 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80092ce:	2800      	cmp	r0, #0
 80092d0:	d08d      	beq.n	80091ee <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092d2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80092d4:	e791      	b.n	80091fa <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80092d6:	f7ff f97b 	bl	80085d0 <HAL_RCC_GetPCLK2Freq>
        break;
 80092da:	e7f8      	b.n	80092ce <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 80092dc:	f7ff f966 	bl	80085ac <HAL_RCC_GetPCLK1Freq>
        break;
 80092e0:	e7c0      	b.n	8009264 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 80092e2:	f7ff f821 	bl	8008328 <HAL_RCC_GetSysClockFreq>
        break;
 80092e6:	e7f2      	b.n	80092ce <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 80092e8:	4808      	ldr	r0, [pc, #32]	@ (800930c <UART_SetConfig+0x270>)
 80092ea:	e7be      	b.n	800926a <UART_SetConfig+0x1ce>
 80092ec:	cfff69f3 	.word	0xcfff69f3
 80092f0:	40008000 	.word	0x40008000
 80092f4:	40013800 	.word	0x40013800
 80092f8:	40004400 	.word	0x40004400
 80092fc:	40004800 	.word	0x40004800
 8009300:	40004c00 	.word	0x40004c00
 8009304:	40021000 	.word	0x40021000
 8009308:	0800c0d4 	.word	0x0800c0d4
 800930c:	00f42400 	.word	0x00f42400
 8009310:	000ffcff 	.word	0x000ffcff

08009314 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009314:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8009316:	071a      	lsls	r2, r3, #28
{
 8009318:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800931a:	d506      	bpl.n	800932a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800931c:	6801      	ldr	r1, [r0, #0]
 800931e:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009320:	684a      	ldr	r2, [r1, #4]
 8009322:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009326:	4322      	orrs	r2, r4
 8009328:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800932a:	07dc      	lsls	r4, r3, #31
 800932c:	d506      	bpl.n	800933c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800932e:	6801      	ldr	r1, [r0, #0]
 8009330:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8009332:	684a      	ldr	r2, [r1, #4]
 8009334:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009338:	4322      	orrs	r2, r4
 800933a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800933c:	0799      	lsls	r1, r3, #30
 800933e:	d506      	bpl.n	800934e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009340:	6801      	ldr	r1, [r0, #0]
 8009342:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009344:	684a      	ldr	r2, [r1, #4]
 8009346:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800934a:	4322      	orrs	r2, r4
 800934c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800934e:	075a      	lsls	r2, r3, #29
 8009350:	d506      	bpl.n	8009360 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009352:	6801      	ldr	r1, [r0, #0]
 8009354:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009356:	684a      	ldr	r2, [r1, #4]
 8009358:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800935c:	4322      	orrs	r2, r4
 800935e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009360:	06dc      	lsls	r4, r3, #27
 8009362:	d506      	bpl.n	8009372 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009364:	6801      	ldr	r1, [r0, #0]
 8009366:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009368:	688a      	ldr	r2, [r1, #8]
 800936a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800936e:	4322      	orrs	r2, r4
 8009370:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009372:	0699      	lsls	r1, r3, #26
 8009374:	d506      	bpl.n	8009384 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009376:	6801      	ldr	r1, [r0, #0]
 8009378:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800937a:	688a      	ldr	r2, [r1, #8]
 800937c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009380:	4322      	orrs	r2, r4
 8009382:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009384:	065a      	lsls	r2, r3, #25
 8009386:	d509      	bpl.n	800939c <UART_AdvFeatureConfig+0x88>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009388:	6801      	ldr	r1, [r0, #0]
 800938a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800938c:	684a      	ldr	r2, [r1, #4]
 800938e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009392:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009394:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009398:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800939a:	d00b      	beq.n	80093b4 <UART_AdvFeatureConfig+0xa0>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800939c:	061b      	lsls	r3, r3, #24
 800939e:	d506      	bpl.n	80093ae <UART_AdvFeatureConfig+0x9a>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80093a0:	6802      	ldr	r2, [r0, #0]
 80093a2:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 80093a4:	6853      	ldr	r3, [r2, #4]
 80093a6:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 80093aa:	430b      	orrs	r3, r1
 80093ac:	6053      	str	r3, [r2, #4]
  }
}
 80093ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80093b2:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80093b4:	684a      	ldr	r2, [r1, #4]
 80093b6:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80093b8:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 80093bc:	4322      	orrs	r2, r4
 80093be:	604a      	str	r2, [r1, #4]
 80093c0:	e7ec      	b.n	800939c <UART_AdvFeatureConfig+0x88>
 80093c2:	bf00      	nop

080093c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80093c4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093c6:	2300      	movs	r3, #0
{
 80093c8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093ca:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80093ce:	f7fc fd59 	bl	8005e84 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093d2:	6822      	ldr	r2, [r4, #0]
 80093d4:	6813      	ldr	r3, [r2, #0]
 80093d6:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80093d8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80093da:	d40f      	bmi.n	80093fc <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093dc:	6813      	ldr	r3, [r2, #0]
 80093de:	0759      	lsls	r1, r3, #29
 80093e0:	d431      	bmi.n	8009446 <UART_CheckIdleState+0x82>
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80093e4:	2220      	movs	r2, #32
 80093e6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);

  return HAL_OK;
 80093ea:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80093ec:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093f0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80093f2:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80093f4:	2300      	movs	r3, #0
 80093f6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80093fa:	bd38      	pop	{r3, r4, r5, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093fc:	69d3      	ldr	r3, [r2, #28]
 80093fe:	0298      	lsls	r0, r3, #10
 8009400:	d4ec      	bmi.n	80093dc <UART_CheckIdleState+0x18>
 8009402:	e00c      	b.n	800941e <UART_CheckIdleState+0x5a>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009404:	6819      	ldr	r1, [r3, #0]
 8009406:	0749      	lsls	r1, r1, #29
 8009408:	461a      	mov	r2, r3
 800940a:	d505      	bpl.n	8009418 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800940c:	69d9      	ldr	r1, [r3, #28]
 800940e:	0708      	lsls	r0, r1, #28
 8009410:	d44a      	bmi.n	80094a8 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009412:	69d9      	ldr	r1, [r3, #28]
 8009414:	0509      	lsls	r1, r1, #20
 8009416:	d475      	bmi.n	8009504 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	0298      	lsls	r0, r3, #10
 800941c:	d4de      	bmi.n	80093dc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800941e:	f7fc fd31 	bl	8005e84 <HAL_GetTick>
 8009422:	1b43      	subs	r3, r0, r5
 8009424:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009428:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800942a:	d3eb      	bcc.n	8009404 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800942c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009430:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009434:	e843 2100 	strex	r1, r2, [r3]
 8009438:	2900      	cmp	r1, #0
 800943a:	d1f7      	bne.n	800942c <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800943c:	2320      	movs	r3, #32
 800943e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8009442:	2003      	movs	r0, #3
 8009444:	e7d6      	b.n	80093f4 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009446:	69d3      	ldr	r3, [r2, #28]
 8009448:	025b      	lsls	r3, r3, #9
 800944a:	d4ca      	bmi.n	80093e2 <UART_CheckIdleState+0x1e>
 800944c:	e00d      	b.n	800946a <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800944e:	681a      	ldr	r2, [r3, #0]
 8009450:	0750      	lsls	r0, r2, #29
 8009452:	d507      	bpl.n	8009464 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009454:	69da      	ldr	r2, [r3, #28]
 8009456:	0711      	lsls	r1, r2, #28
 8009458:	f100 8082 	bmi.w	8009560 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800945c:	69da      	ldr	r2, [r3, #28]
 800945e:	0512      	lsls	r2, r2, #20
 8009460:	f100 80ac 	bmi.w	80095bc <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009464:	69db      	ldr	r3, [r3, #28]
 8009466:	025b      	lsls	r3, r3, #9
 8009468:	d4bb      	bmi.n	80093e2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800946a:	f7fc fd0b 	bl	8005e84 <HAL_GetTick>
 800946e:	1b43      	subs	r3, r0, r5
 8009470:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009474:	6823      	ldr	r3, [r4, #0]
 8009476:	d3ea      	bcc.n	800944e <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009478:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800947c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009480:	e843 2100 	strex	r1, r2, [r3]
 8009484:	2900      	cmp	r1, #0
 8009486:	d1f7      	bne.n	8009478 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009488:	f103 0208 	add.w	r2, r3, #8
 800948c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009490:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009494:	f103 0008 	add.w	r0, r3, #8
 8009498:	e840 2100 	strex	r1, r2, [r0]
 800949c:	2900      	cmp	r1, #0
 800949e:	d1f3      	bne.n	8009488 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 80094a0:	2320      	movs	r3, #32
 80094a2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 80094a6:	e7cc      	b.n	8009442 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094a8:	2208      	movs	r2, #8
 80094aa:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ac:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094b0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b4:	e843 2100 	strex	r1, r2, [r3]
 80094b8:	2900      	cmp	r1, #0
 80094ba:	d1f7      	bne.n	80094ac <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094bc:	4856      	ldr	r0, [pc, #344]	@ (8009618 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	f103 0208 	add.w	r2, r3, #8
 80094c2:	e852 2f00 	ldrex	r2, [r2]
 80094c6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094c8:	f103 0508 	add.w	r5, r3, #8
 80094cc:	e845 2100 	strex	r1, r2, [r5]
 80094d0:	2900      	cmp	r1, #0
 80094d2:	d1f4      	bne.n	80094be <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094d4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80094d6:	2a01      	cmp	r2, #1
 80094d8:	d00b      	beq.n	80094f2 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094da:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80094dc:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094de:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80094e0:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80094e4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094e6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80094e8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80094ec:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80094f0:	e79c      	b.n	800942c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094fa:	e843 2100 	strex	r1, r2, [r3]
 80094fe:	2900      	cmp	r1, #0
 8009500:	d1f7      	bne.n	80094f2 <UART_CheckIdleState+0x12e>
 8009502:	e7ea      	b.n	80094da <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009504:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009508:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800950a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800950e:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009512:	e843 2100 	strex	r1, r2, [r3]
 8009516:	2900      	cmp	r1, #0
 8009518:	d1f7      	bne.n	800950a <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800951a:	483f      	ldr	r0, [pc, #252]	@ (8009618 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951c:	f103 0208 	add.w	r2, r3, #8
 8009520:	e852 2f00 	ldrex	r2, [r2]
 8009524:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	f103 0508 	add.w	r5, r3, #8
 800952a:	e845 2100 	strex	r1, r2, [r5]
 800952e:	2900      	cmp	r1, #0
 8009530:	d1f4      	bne.n	800951c <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009532:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009534:	2a01      	cmp	r2, #1
 8009536:	d00a      	beq.n	800954e <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009538:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800953a:	2120      	movs	r1, #32
 800953c:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009540:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009542:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009544:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009548:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800954c:	e76e      	b.n	800942c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009552:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009556:	e843 2100 	strex	r1, r2, [r3]
 800955a:	2900      	cmp	r1, #0
 800955c:	d1f7      	bne.n	800954e <UART_CheckIdleState+0x18a>
 800955e:	e7eb      	b.n	8009538 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009560:	2208      	movs	r2, #8
 8009562:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009564:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009568:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800956c:	e843 2100 	strex	r1, r2, [r3]
 8009570:	2900      	cmp	r1, #0
 8009572:	d1f7      	bne.n	8009564 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009574:	4828      	ldr	r0, [pc, #160]	@ (8009618 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009576:	f103 0208 	add.w	r2, r3, #8
 800957a:	e852 2f00 	ldrex	r2, [r2]
 800957e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	f103 0508 	add.w	r5, r3, #8
 8009584:	e845 2100 	strex	r1, r2, [r5]
 8009588:	2900      	cmp	r1, #0
 800958a:	d1f4      	bne.n	8009576 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800958c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800958e:	2a01      	cmp	r2, #1
 8009590:	d00b      	beq.n	80095aa <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009592:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009594:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009596:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009598:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800959c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800959e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80095a0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80095a4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80095a8:	e766      	b.n	8009478 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095aa:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80095ae:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095b2:	e843 2100 	strex	r1, r2, [r3]
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d1f7      	bne.n	80095aa <UART_CheckIdleState+0x1e6>
 80095ba:	e7ea      	b.n	8009592 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80095bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80095c0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095c2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80095c6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095ca:	e843 2100 	strex	r1, r2, [r3]
 80095ce:	2900      	cmp	r1, #0
 80095d0:	d1f7      	bne.n	80095c2 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80095d2:	4811      	ldr	r0, [pc, #68]	@ (8009618 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	f103 0208 	add.w	r2, r3, #8
 80095d8:	e852 2f00 	ldrex	r2, [r2]
 80095dc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095de:	f103 0508 	add.w	r5, r3, #8
 80095e2:	e845 2100 	strex	r1, r2, [r5]
 80095e6:	2900      	cmp	r1, #0
 80095e8:	d1f4      	bne.n	80095d4 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80095ea:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80095ec:	2a01      	cmp	r2, #1
 80095ee:	d00a      	beq.n	8009606 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095f0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80095f2:	2120      	movs	r1, #32
 80095f4:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80095f8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095fa:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80095fc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009600:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009604:	e738      	b.n	8009478 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009606:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800960a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960e:	e843 2100 	strex	r1, r2, [r3]
 8009612:	2900      	cmp	r1, #0
 8009614:	d1f7      	bne.n	8009606 <UART_CheckIdleState+0x242>
 8009616:	e7eb      	b.n	80095f0 <UART_CheckIdleState+0x22c>
 8009618:	effffffe 	.word	0xeffffffe

0800961c <HAL_UART_Init>:
  if (huart == NULL)
 800961c:	b380      	cbz	r0, 8009680 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 800961e:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8009622:	b510      	push	{r4, lr}
 8009624:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009626:	b333      	cbz	r3, 8009676 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009628:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800962a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800962c:	2324      	movs	r3, #36	@ 0x24
 800962e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009632:	6813      	ldr	r3, [r2, #0]
 8009634:	f023 0301 	bic.w	r3, r3, #1
 8009638:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800963a:	b9c1      	cbnz	r1, 800966e <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800963c:	4620      	mov	r0, r4
 800963e:	f7ff fd2d 	bl	800909c <UART_SetConfig>
 8009642:	2801      	cmp	r0, #1
 8009644:	d011      	beq.n	800966a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	685a      	ldr	r2, [r3, #4]
 800964a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800964e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009650:	689a      	ldr	r2, [r3, #8]
 8009652:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009656:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009658:	681a      	ldr	r2, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800965e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8009660:	601a      	str	r2, [r3, #0]
}
 8009662:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8009666:	f7ff bead 	b.w	80093c4 <UART_CheckIdleState>
}
 800966a:	2001      	movs	r0, #1
 800966c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800966e:	4620      	mov	r0, r4
 8009670:	f7ff fe50 	bl	8009314 <UART_AdvFeatureConfig>
 8009674:	e7e2      	b.n	800963c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8009676:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800967a:	f7fb fb59 	bl	8004d30 <HAL_UART_MspInit>
 800967e:	e7d3      	b.n	8009628 <HAL_UART_Init+0xc>
}
 8009680:	2001      	movs	r0, #1
 8009682:	4770      	bx	lr

08009684 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009684:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009688:	2b01      	cmp	r3, #1
 800968a:	d017      	beq.n	80096bc <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800968c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800968e:	2324      	movs	r3, #36	@ 0x24
{
 8009690:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009692:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009696:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009698:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800969a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800969c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096a0:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 80096a4:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096a6:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096a8:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096aa:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 80096ae:	2220      	movs	r2, #32
 80096b0:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 80096b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 80096b8:	4618      	mov	r0, r3
}
 80096ba:	4770      	bx	lr
  __HAL_LOCK(huart);
 80096bc:	2002      	movs	r0, #2
}
 80096be:	4770      	bx	lr

080096c0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096c0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80096c4:	2a01      	cmp	r2, #1
 80096c6:	d037      	beq.n	8009738 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80096c8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ca:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096cc:	2024      	movs	r0, #36	@ 0x24
{
 80096ce:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80096d0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096d4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096d6:	6810      	ldr	r0, [r2, #0]
 80096d8:	f020 0001 	bic.w	r0, r0, #1
 80096dc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096de:	6890      	ldr	r0, [r2, #8]
 80096e0:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80096e4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096e6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096e8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096ea:	b310      	cbz	r0, 8009732 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096ec:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096ee:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80096f0:	4d12      	ldr	r5, [pc, #72]	@ (800973c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096f2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096f6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096fa:	4911      	ldr	r1, [pc, #68]	@ (8009740 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80096fc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009700:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009704:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009708:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800970c:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800970e:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009710:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009714:	fbb1 f1f5 	udiv	r1, r1, r5
 8009718:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 800971c:	2100      	movs	r1, #0
 800971e:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009722:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009724:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009726:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800972a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800972c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8009730:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009732:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009734:	4608      	mov	r0, r1
 8009736:	e7ef      	b.n	8009718 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009738:	2002      	movs	r0, #2
}
 800973a:	4770      	bx	lr
 800973c:	0800c0ec 	.word	0x0800c0ec
 8009740:	0800c0f4 	.word	0x0800c0f4

08009744 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009744:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009748:	2a01      	cmp	r2, #1
 800974a:	d037      	beq.n	80097bc <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800974c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800974e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009750:	2024      	movs	r0, #36	@ 0x24
{
 8009752:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009754:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009758:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800975a:	6810      	ldr	r0, [r2, #0]
 800975c:	f020 0001 	bic.w	r0, r0, #1
 8009760:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009762:	6890      	ldr	r0, [r2, #8]
 8009764:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8009768:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800976a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800976c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800976e:	b310      	cbz	r0, 80097b6 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009770:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009772:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009774:	4d12      	ldr	r5, [pc, #72]	@ (80097c0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009776:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800977a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800977e:	4911      	ldr	r1, [pc, #68]	@ (80097c4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009780:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009784:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009788:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800978c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009790:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009792:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009794:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009798:	fbb1 f1f5 	udiv	r1, r1, r5
 800979c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80097a0:	2100      	movs	r1, #0
 80097a2:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 80097a6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097a8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 80097aa:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 80097ae:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80097b0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80097b4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80097b6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80097b8:	4608      	mov	r0, r1
 80097ba:	e7ef      	b.n	800979c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80097bc:	2002      	movs	r0, #2
}
 80097be:	4770      	bx	lr
 80097c0:	0800c0ec 	.word	0x0800c0ec
 80097c4:	0800c0f4 	.word	0x0800c0f4

080097c8 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80097c8:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80097ca:	8840      	ldrh	r0, [r0, #2]
 80097cc:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80097d0:	0c00      	lsrs	r0, r0, #16
 80097d2:	4770      	bx	lr

080097d4 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80097d4:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80097d6:	8803      	ldrh	r3, [r0, #0]
 80097d8:	140d      	asrs	r5, r1, #16
 80097da:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80097dc:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 80097e0:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 80097e4:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 80097e8:	428b      	cmp	r3, r1
{
 80097ea:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 80097ec:	da0f      	bge.n	800980e <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80097ee:	8846      	ldrh	r6, [r0, #2]
 80097f0:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80097f4:	4282      	cmp	r2, r0
 80097f6:	dd13      	ble.n	8009820 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80097f8:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80097fa:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80097fe:	bfb8      	it	lt
 8009800:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8009802:	f7f9 fd1b 	bl	800323c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8009806:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8009808:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 800980a:	db0e      	blt.n	800982a <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 800980c:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 800980e:	b2a4      	uxth	r4, r4
 8009810:	2000      	movs	r0, #0
 8009812:	f364 000f 	bfi	r0, r4, #0, #16
 8009816:	b2ad      	uxth	r5, r5
 8009818:	f365 401f 	bfi	r0, r5, #16, #16
}
 800981c:	b004      	add	sp, #16
 800981e:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8009820:	1a98      	subs	r0, r3, r2
 8009822:	f7f9 fd0b 	bl	800323c <MCM_Sqrt>
        if (Vqd.q < 0)
 8009826:	2c00      	cmp	r4, #0
 8009828:	daf0      	bge.n	800980c <Circle_Limitation+0x38>
          new_q = - new_q;
 800982a:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 800982c:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 800982e:	e7ee      	b.n	800980e <Circle_Limitation+0x3a>

08009830 <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 8009830:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 8009834:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 8009838:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 800983a:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 800983e:	4770      	bx	lr

08009840 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 8009840:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8009842:	2200      	movs	r2, #0
{
 8009844:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 8009846:	4611      	mov	r1, r2
 8009848:	6840      	ldr	r0, [r0, #4]
 800984a:	f001 fe41 	bl	800b4d0 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 800984e:	6863      	ldr	r3, [r4, #4]
 8009850:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8009854:	785a      	ldrb	r2, [r3, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8009856:	8618      	strh	r0, [r3, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 8009858:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800985a:	fb90 f2f2 	sdiv	r2, r0, r2

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800985e:	2104      	movs	r1, #4
 8009860:	6820      	ldr	r0, [r4, #0]
 8009862:	80da      	strh	r2, [r3, #6]
 8009864:	f7fa fdfe 	bl	8004464 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 8009868:	2200      	movs	r2, #0
 800986a:	4611      	mov	r1, r2
 800986c:	6820      	ldr	r0, [r4, #0]
 800986e:	f7fa fdfd 	bl	800446c <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 8009872:	8ae2      	ldrh	r2, [r4, #22]
 8009874:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8009878:	6820      	ldr	r0, [r4, #0]
 800987a:	f7fa fdf7 	bl	800446c <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 800987e:	8ae3      	ldrh	r3, [r4, #22]
 8009880:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 8009882:	4a04      	ldr	r2, [pc, #16]	@ (8009894 <EAC_StartAlignment+0x54>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 8009884:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 8009888:	fba2 2303 	umull	r2, r3, r2, r3
 800988c:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 800988e:	3301      	adds	r3, #1
 8009890:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8009892:	bd10      	pop	{r4, pc}
 8009894:	10624dd3 	.word	0x10624dd3

08009898 <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 8009898:	8983      	ldrh	r3, [r0, #12]
 800989a:	b90b      	cbnz	r3, 80098a0 <EAC_Exec+0x8>
  bool retVal = true;
 800989c:	2001      	movs	r0, #1
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 800989e:	4770      	bx	lr
      pHandle->hRemainingTicks--;
 80098a0:	3b01      	subs	r3, #1
 80098a2:	b29b      	uxth	r3, r3
{
 80098a4:	b510      	push	{r4, lr}
 80098a6:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 80098a8:	8183      	strh	r3, [r0, #12]
      if (0U == pHandle->hRemainingTicks)
 80098aa:	b10b      	cbz	r3, 80098b0 <EAC_Exec+0x18>
        retVal = false;
 80098ac:	2000      	movs	r0, #0
}
 80098ae:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 80098b0:	7e03      	ldrb	r3, [r0, #24]
 80098b2:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 80098b6:	6880      	ldr	r0, [r0, #8]
 80098b8:	fb91 f1f3 	sdiv	r1, r1, r3
 80098bc:	f000 f934 	bl	8009b28 <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 80098c0:	2301      	movs	r3, #1
 80098c2:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 80098c4:	2001      	movs	r0, #1
}
 80098c6:	bd10      	pop	{r4, pc}

080098c8 <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 80098c8:	6a03      	ldr	r3, [r0, #32]
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 80098ca:	f8b0 206c 	ldrh.w	r2, [r0, #108]	@ 0x6c
{
 80098ce:	b430      	push	{r4, r5}
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80098d0:	681c      	ldr	r4, [r3, #0]
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80098d2:	6f05      	ldr	r5, [r0, #112]	@ 0x70
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 80098d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80098d8:	f444 6400 	orr.w	r4, r4, #2048	@ 0x800
 80098dc:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 80098de:	2100      	movs	r1, #0
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 80098e0:	601c      	str	r4, [r3, #0]
  WRITE_REG(TIMx->CNT, Counter);
 80098e2:	6259      	str	r1, [r3, #36]	@ 0x24
 80098e4:	6242      	str	r2, [r0, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ea:	fbb2 f2f5 	udiv	r2, r2, r5
 80098ee:	6682      	str	r2, [r0, #104]	@ 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 80098f0:	699c      	ldr	r4, [r3, #24]
 80098f2:	f8b0 2082 	ldrh.w	r2, [r0, #130]	@ 0x82
 80098f6:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
 80098fa:	ea42 020c 	orr.w	r2, r2, ip
 80098fe:	619a      	str	r2, [r3, #24]
 8009900:	699a      	ldr	r2, [r3, #24]
 8009902:	f8b0 4082 	ldrh.w	r4, [r0, #130]	@ 0x82
 8009906:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800990a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800990e:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009912:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009914:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009916:	68da      	ldr	r2, [r3, #12]
 8009918:	f042 0201 	orr.w	r2, r2, #1
 800991c:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	f042 0201 	orr.w	r2, r2, #1
 8009924:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 8009926:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c

    for (index = 0U; index < bufferSize; index++)
 800992a:	b122      	cbz	r2, 8009936 <ENC_Init+0x6e>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 800992c:	bc30      	pop	{r4, r5}
      pHandle->DeltaCapturesBuffer[index] = 0;
 800992e:	0092      	lsls	r2, r2, #2
 8009930:	3028      	adds	r0, #40	@ 0x28
 8009932:	f001 be09 	b.w	800b548 <memset>
}
 8009936:	bc30      	pop	{r4, r5}
 8009938:	4770      	bx	lr
 800993a:	bf00      	nop

0800993c <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 800993c:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 800993e:	f890 207c 	ldrb.w	r2, [r0, #124]	@ 0x7c
{
 8009942:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 8009944:	b122      	cbz	r2, 8009950 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 8009946:	0092      	lsls	r2, r2, #2
 8009948:	2100      	movs	r1, #0
 800994a:	3028      	adds	r0, #40	@ 0x28
 800994c:	f001 fdfc 	bl	800b548 <memset>
    }
    pHandle->SensorIsReliable = true;
 8009950:	2301      	movs	r3, #1
 8009952:	f884 307d 	strb.w	r3, [r4, #125]	@ 0x7d
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8009956:	bd10      	pop	{r4, pc}

08009958 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 8009958:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0x7fffffffU) * (pHandle->U32MAXdivPulseNumber);
 800995a:	6a02      	ldr	r2, [r0, #32]
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 800995c:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8009960:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 8009962:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0x7fffffffU) * (pHandle->U32MAXdivPulseNumber);
 8009964:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8009968:	6e9c      	ldr	r4, [r3, #104]	@ 0x68

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 800996a:	7840      	ldrb	r0, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0x7fffffffU) * (pHandle->U32MAXdivPulseNumber);
 800996c:	fb04 f202 	mul.w	r2, r4, r2
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8009970:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8009972:	fb02 f000 	mul.w	r0, r2, r0

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 8009976:	1a51      	subs	r1, r2, r1
    mecAngle = (int16_t)wtemp1;
 8009978:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 800997a:	689a      	ldr	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 800997c:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 8009980:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8009982:	fa02 f281 	sxtah	r2, r2, r1
    pHandle->_Super.hElAngle = elAngle;
 8009986:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 8009988:	609a      	str	r2, [r3, #8]
}
 800998a:	4770      	bx	lr

0800998c <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 800998c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800998e:	6a02      	ldr	r2, [r0, #32]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009990:	68d4      	ldr	r4, [r2, #12]
 8009992:	f024 0401 	bic.w	r4, r4, #1
{
 8009996:	4603      	mov	r3, r0
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8009998:	f890 007c 	ldrb.w	r0, [r0, #124]	@ 0x7c
 800999c:	60d4      	str	r4, [r2, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 800999e:	6a54      	ldr	r4, [r2, #36]	@ 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 80099a0:	f8b3 5074 	ldrh.w	r5, [r3, #116]	@ 0x74
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 80099a4:	ea5f 7ed4 	movs.w	lr, r4, lsr #31
    pHandle->TimerOverflowNb = 0;
 80099a8:	f04f 0600 	mov.w	r6, #0
 80099ac:	f8a3 6074 	strh.w	r6, [r3, #116]	@ 0x74
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80099b0:	bf18      	it	ne
 80099b2:	f06f 0701 	mvnne.w	r7, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80099b6:	6816      	ldr	r6, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80099b8:	bf18      	it	ne
 80099ba:	6117      	strne	r7, [r2, #16]
      into accout, we must not clear the interrupt in order to accumulate it */
      LL_TIM_ClearFlag_UPDATE(TIMx);
    }

    LL_TIM_EnableIT_UPDATE(TIMx);
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 80099bc:	f024 4c00 	bic.w	ip, r4, #2147483648	@ 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80099c0:	68d4      	ldr	r4, [r2, #12]
    OverflowCntSample = pHandle->TimerOverflowNb;
 80099c2:	b2ad      	uxth	r5, r5

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 80099c4:	44ae      	add	lr, r5
 80099c6:	f044 0401 	orr.w	r4, r4, #1
 80099ca:	f5be 6f00 	cmp.w	lr, #2048	@ 0x800
 80099ce:	60d4      	str	r4, [r2, #12]
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80099d0:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80099d2:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 80099d4:	bf94      	ite	ls
 80099d6:	f893 5085 	ldrbls.w	r5, [r3, #133]	@ 0x85
      pHandle->TimerOverflowError = true;
 80099da:	2501      	movhi	r5, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 80099dc:	f006 0610 	and.w	r6, r6, #16
 80099e0:	bf88      	it	hi
 80099e2:	f883 5085 	strbhi.w	r5, [r3, #133]	@ 0x85
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 80099e6:	ebac 0202 	sub.w	r2, ip, r2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80099ea:	fb04 fe0e 	mul.w	lr, r4, lr
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 80099ee:	2e00      	cmp	r6, #0
 80099f0:	f000 8089 	beq.w	8009b06 <ENC_CalcAvrgMecSpeedUnit+0x17a>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80099f4:	f893 6084 	ldrb.w	r6, [r3, #132]	@ 0x84
 80099f8:	360a      	adds	r6, #10
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 80099fa:	eba2 020e 	sub.w	r2, r2, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 80099fe:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a02:	2800      	cmp	r0, #0
 8009a04:	f000 8088 	beq.w	8009b18 <ENC_CalcAvrgMecSpeedUnit+0x18c>
 8009a08:	2801      	cmp	r0, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a0a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a0c:	d039      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a0e:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a10:	2802      	cmp	r0, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a12:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a14:	d035      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a16:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a18:	2803      	cmp	r0, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a1a:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a1c:	d031      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a1e:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a20:	2804      	cmp	r0, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a22:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a24:	d02d      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a26:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a28:	2805      	cmp	r0, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a2a:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a2c:	d029      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a2e:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a30:	2806      	cmp	r0, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a32:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a34:	d025      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a36:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a38:	2807      	cmp	r0, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a3a:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a3c:	d021      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a3e:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a40:	2808      	cmp	r0, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a42:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a44:	d01d      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a46:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a48:	2809      	cmp	r0, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a4a:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a4c:	d019      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a4e:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a50:	280a      	cmp	r0, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a52:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a54:	d015      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a56:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a58:	280b      	cmp	r0, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a5a:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a5c:	d011      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a5e:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a60:	280c      	cmp	r0, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a62:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a64:	d00d      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a66:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a68:	280d      	cmp	r0, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a6a:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a6c:	d009      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a6e:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a70:	280e      	cmp	r0, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a72:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a74:	d005      	beq.n	8009a82 <ENC_CalcAvrgMecSpeedUnit+0xf6>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a76:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a78:	280f      	cmp	r0, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009a7a:	4432      	add	r2, r6
 8009a7c:	bf1c      	itt	ne
 8009a7e:	6e5e      	ldrne	r6, [r3, #100]	@ 0x64
 8009a80:	1992      	addne	r2, r2, r6
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8009a82:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8009a84:	fb06 f202 	mul.w	r2, r6, r2
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8009a88:	fb04 f600 	mul.w	r6, r4, r0
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8009a8c:	b10e      	cbz	r6, 8009a92 <ENC_CalcAvrgMecSpeedUnit+0x106>
 8009a8e:	fb92 f2f6 	sdiv	r2, r2, r6
    *pMecSpeedUnit = (int16_t)wtemp1;
 8009a92:	b216      	sxth	r6, r2
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8009a94:	b292      	uxth	r2, r2
    *pMecSpeedUnit = (int16_t)wtemp1;
 8009a96:	800e      	strh	r6, [r1, #0]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a98:	f893 e084 	ldrb.w	lr, [r3, #132]	@ 0x84
 8009a9c:	f10e 0e0a 	add.w	lr, lr, #10
 8009aa0:	f853 702e 	ldr.w	r7, [r3, lr, lsl #2]
    pHandle->DeltaCapturesIndex++;
 8009aa4:	f893 e084 	ldrb.w	lr, [r3, #132]	@ 0x84
 8009aa8:	f10e 0e01 	add.w	lr, lr, #1
 8009aac:	fa5f fe8e 	uxtb.w	lr, lr
 8009ab0:	f883 e084 	strb.w	lr, [r3, #132]	@ 0x84
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8009ab4:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8009ab8:	819e      	strh	r6, [r3, #12]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8009aba:	eba2 020e 	sub.w	r2, r2, lr
 8009abe:	825a      	strh	r2, [r3, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009ac0:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8009ac4:	785e      	ldrb	r6, [r3, #1]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009ac6:	fb07 f202 	mul.w	r2, r7, r2
 8009aca:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8009ace:	fb92 f2f4 	sdiv	r2, r2, r4
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)(pHandle->PulseNumber-1)) ? (pHandle->PulseNumber-1) : (uint32_t)CntCapture;
 8009ad2:	3c01      	subs	r4, #1
 8009ad4:	4564      	cmp	r4, ip
 8009ad6:	bf28      	it	cs
 8009ad8:	4664      	movcs	r4, ip
 8009ada:	679c      	str	r4, [r3, #120]	@ 0x78
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8009adc:	69dc      	ldr	r4, [r3, #28]
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009ade:	8b5e      	ldrh	r6, [r3, #26]
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8009ae0:	fb04 f202 	mul.w	r2, r4, r2
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8009ae4:	f893 4084 	ldrb.w	r4, [r3, #132]	@ 0x84
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009ae8:	fb92 f2f6 	sdiv	r2, r2, r6
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8009aec:	4284      	cmp	r4, r0
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8009aee:	81da      	strh	r2, [r3, #14]
      pHandle->DeltaCapturesIndex = 0U;
 8009af0:	bf24      	itt	cs
 8009af2:	2200      	movcs	r2, #0
 8009af4:	f883 2084 	strbcs.w	r2, [r3, #132]	@ 0x84
    if (pHandle->TimerOverflowError)
 8009af8:	b18d      	cbz	r5, 8009b1e <ENC_CalcAvrgMecSpeedUnit+0x192>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009afa:	78da      	ldrb	r2, [r3, #3]
 8009afc:	701a      	strb	r2, [r3, #0]
      pHandle->SensorIsReliable = false;
 8009afe:	2000      	movs	r0, #0
 8009b00:	f883 007d 	strb.w	r0, [r3, #125]	@ 0x7d
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009b06:	f893 6084 	ldrb.w	r6, [r3, #132]	@ 0x84
 8009b0a:	360a      	adds	r6, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8009b0c:	4472      	add	r2, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009b0e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009b12:	2800      	cmp	r0, #0
 8009b14:	f47f af78 	bne.w	8009a08 <ENC_CalcAvrgMecSpeedUnit+0x7c>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	4606      	mov	r6, r0
 8009b1c:	e7bb      	b.n	8009a96 <ENC_CalcAvrgMecSpeedUnit+0x10a>
}
 8009b1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 ba18 	b.w	800af58 <SPD_IsMecSpeedReliable>

08009b28 <ENC_SetMecAngle>:
    uint32_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8009b28:	7843      	ldrb	r3, [r0, #1]
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint32_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8009b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8009b5c <ENC_SetMecAngle+0x34>)
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8009b2c:	fb01 f303 	mul.w	r3, r1, r3
{
 8009b30:	b410      	push	{r4}
    if (localhMecAngle < 0)
 8009b32:	2900      	cmp	r1, #0
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8009b34:	8083      	strh	r3, [r0, #4]
 8009b36:	b28b      	uxth	r3, r1
    pHandle->_Super.hMecAngle = localhMecAngle;
 8009b38:	80c1      	strh	r1, [r0, #6]
 8009b3a:	bfb8      	it	lt
 8009b3c:	f103 33ff 	addlt.w	r3, r3, #4294967295
    hAngleCounts = (uint32_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8009b40:	6f01      	ldr	r1, [r0, #112]	@ 0x70
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8009b42:	6a04      	ldr	r4, [r0, #32]
      hMecAngleuint = ((uint16_t)65535 - ((uint16_t)localhMecAngle));
 8009b44:	bfb8      	it	lt
 8009b46:	b29b      	uxthlt	r3, r3
    hAngleCounts = (uint32_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8009b48:	fb01 f303 	mul.w	r3, r1, r3
 8009b4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b50:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint32_t)hAngleCounts;
 8009b52:	6263      	str	r3, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8009b54:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	80008001 	.word	0x80008001

08009b60 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8009b60:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8009b62:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8009b64:	f8b2 3074 	ldrh.w	r3, [r2, #116]	@ 0x74
 8009b68:	3301      	adds	r3, #1
 8009b6a:	b29b      	uxth	r3, r3
 8009b6c:	f8a2 3074 	strh.w	r3, [r2, #116]	@ 0x74
}
 8009b70:	4770      	bx	lr
 8009b72:	bf00      	nop

08009b74 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8009b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009b76:	7fc3      	ldrb	r3, [r0, #31]
 8009b78:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8009b7c:	429a      	cmp	r2, r3
{
 8009b7e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009b80:	d002      	beq.n	8009b88 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8009b82:	3301      	adds	r3, #1
 8009b84:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8009b88:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8009b8e:	2d00      	cmp	r5, #0
 8009b90:	d02f      	beq.n	8009bf2 <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009b92:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009b94:	8ba2      	ldrh	r2, [r4, #28]
 8009b96:	42aa      	cmp	r2, r5
 8009b98:	d31a      	bcc.n	8009bd0 <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009b9a:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009b9e:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009ba0:	2e00      	cmp	r6, #0
 8009ba2:	d07a      	beq.n	8009c9a <MCPA_dataLog+0x126>
 8009ba4:	68a2      	ldr	r2, [r4, #8]
 8009ba6:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8009baa:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8009bac:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009bb0:	8800      	ldrh	r0, [r0, #0]
 8009bb2:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009bb6:	8b25      	ldrh	r5, [r4, #24]
 8009bb8:	3502      	adds	r5, #2
 8009bba:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009bbc:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009bbe:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009bc0:	d1f4      	bne.n	8009bac <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 8009bc2:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009bc6:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8009bc8:	2bfd      	cmp	r3, #253	@ 0xfd
 8009bca:	d96b      	bls.n	8009ca4 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009bcc:	4295      	cmp	r5, r2
 8009bce:	d9da      	bls.n	8009b86 <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8009bd0:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009bd4:	2bfe      	cmp	r3, #254	@ 0xfe
 8009bd6:	d04a      	beq.n	8009c6e <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009bd8:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8009bdc:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8009bde:	8b22      	ldrh	r2, [r4, #24]
 8009be0:	6820      	ldr	r0, [r4, #0]
 8009be2:	3202      	adds	r2, #2
 8009be4:	2309      	movs	r3, #9
 8009be6:	6845      	ldr	r5, [r0, #4]
 8009be8:	b292      	uxth	r2, r2
 8009bea:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8009bec:	2300      	movs	r3, #0
 8009bee:	8323      	strh	r3, [r4, #24]
}
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009bf2:	4601      	mov	r1, r0
 8009bf4:	2209      	movs	r2, #9
 8009bf6:	f851 0b14 	ldr.w	r0, [r1], #20
 8009bfa:	6803      	ldr	r3, [r0, #0]
 8009bfc:	4798      	blx	r3
 8009bfe:	b390      	cbz	r0, 8009c66 <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009c00:	4b3a      	ldr	r3, [pc, #232]	@ (8009cec <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8009c02:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009c08:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8009c0c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8009c10:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8009c14:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8009c16:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8009c18:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009c1a:	d101      	bne.n	8009c20 <MCPA_dataLog+0xac>
 8009c1c:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009c1e:	e7b9      	b.n	8009b94 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009c20:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009c24:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009c28:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009c2c:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009c30:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009c34:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8009c38:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009c3a:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8009c3c:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009c40:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009c44:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009c46:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8009c4a:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009c4c:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009c50:	f001 fca6 	bl	800b5a0 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8009c54:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8009c58:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8009c5c:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8009c60:	441a      	add	r2, r3
 8009c62:	f001 fc9d 	bl	800b5a0 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009c66:	8b25      	ldrh	r5, [r4, #24]
 8009c68:	2d00      	cmp	r5, #0
 8009c6a:	d192      	bne.n	8009b92 <MCPA_dataLog+0x1e>
}
 8009c6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c6e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8009c72:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8009c76:	4418      	add	r0, r3
 8009c78:	4283      	cmp	r3, r0
 8009c7a:	daad      	bge.n	8009bd8 <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009c7c:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009c7e:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009c80:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8009c84:	6812      	ldr	r2, [r2, #0]
 8009c86:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c88:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009c8a:	5cf3      	ldrb	r3, [r6, r3]
 8009c8c:	442b      	add	r3, r5
 8009c8e:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c90:	b2d3      	uxtb	r3, r2
 8009c92:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009c94:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c96:	dbf3      	blt.n	8009c80 <MCPA_dataLog+0x10c>
 8009c98:	e79e      	b.n	8009bd8 <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8009c9a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009c9e:	2bfd      	cmp	r3, #253	@ 0xfd
 8009ca0:	f63f af71 	bhi.w	8009b86 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009ca4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8009ca8:	4298      	cmp	r0, r3
 8009caa:	d005      	beq.n	8009cb8 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8009cac:	3001      	adds	r0, #1
 8009cae:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009cb2:	42aa      	cmp	r2, r5
 8009cb4:	d390      	bcc.n	8009bd8 <MCPA_dataLog+0x64>
}
 8009cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cb8:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8009cbc:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8009cbe:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cc0:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 8009cc2:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cc6:	daf4      	bge.n	8009cb2 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009cc8:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009ccc:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009cd0:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cd8:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cdc:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cde:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009ce0:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009ce2:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009ce4:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009ce6:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009ce8:	dbf2      	blt.n	8009cd0 <MCPA_dataLog+0x15c>
 8009cea:	e76f      	b.n	8009bcc <MCPA_dataLog+0x58>
 8009cec:	20001c58 	.word	0x20001c58

08009cf0 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009cf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009cf4:	880f      	ldrh	r7, [r1, #0]
{
 8009cf6:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8009cf8:	2f00      	cmp	r7, #0
 8009cfa:	d046      	beq.n	8009d8a <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8009cfc:	6803      	ldr	r3, [r0, #0]
 8009cfe:	89db      	ldrh	r3, [r3, #14]
 8009d00:	42bb      	cmp	r3, r7
 8009d02:	d33f      	bcc.n	8009d84 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8009d04:	788b      	ldrb	r3, [r1, #2]
 8009d06:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8009d0a:	f891 8003 	ldrb.w	r8, [r1, #3]
 8009d0e:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8009d12:	790b      	ldrb	r3, [r1, #4]
 8009d14:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009d18:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009d1a:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009d1c:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009d20:	4443      	add	r3, r8
 8009d22:	4293      	cmp	r3, r2
 8009d24:	dc57      	bgt.n	8009dd6 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8009d26:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d057      	beq.n	8009ddc <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009d2c:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d30:	4645      	mov	r5, r8
 8009d32:	e011      	b.n	8009d58 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)HF_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : HF_GetIDSize(newID);
 8009d34:	68e3      	ldr	r3, [r4, #12]
 8009d36:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d38:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d3a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009d3e:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d42:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d44:	f105 0c01 	add.w	ip, r5, #1
 8009d48:	fa5f f58c 	uxtb.w	r5, ip
 8009d4c:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d4e:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d50:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d52:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d56:	da11      	bge.n	8009d7c <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009d58:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)HF_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8009d5c:	6861      	ldr	r1, [r4, #4]
 8009d5e:	4648      	mov	r0, r9
 8009d60:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009d64:	f7f8 fb54 	bl	8002410 <HF_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : HF_GetIDSize(newID);
 8009d68:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009d6c:	42ab      	cmp	r3, r5
 8009d6e:	f04f 0002 	mov.w	r0, #2
 8009d72:	d8df      	bhi.n	8009d34 <MCPA_cfgLog+0x44>
 8009d74:	4648      	mov	r0, r9
 8009d76:	f7f8 fb3f 	bl	80023f8 <HF_GetIDSize>
 8009d7a:	e7db      	b.n	8009d34 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8009d7c:	f108 0206 	add.w	r2, r8, #6
 8009d80:	4297      	cmp	r7, r2
 8009d82:	d210      	bcs.n	8009da6 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8009d84:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8009d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8009d8a:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8009d8c:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8009d90:	b9ab      	cbnz	r3, 8009dbe <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8009d92:	2300      	movs	r3, #0
 8009d94:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8009d96:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8009d9a:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8009d9c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8009da0:	2000      	movs	r0, #0
}
 8009da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8009da6:	3f02      	subs	r7, #2
 8009da8:	eba7 0708 	sub.w	r7, r7, r8
 8009dac:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8009dae:	7833      	ldrb	r3, [r6, #0]
 8009db0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d1f3      	bne.n	8009da0 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009db8:	8b23      	ldrh	r3, [r4, #24]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d0e9      	beq.n	8009d92 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009dbe:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009dc0:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009dc4:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009dc6:	8b22      	ldrh	r2, [r4, #24]
 8009dc8:	6820      	ldr	r0, [r4, #0]
 8009dca:	3202      	adds	r2, #2
 8009dcc:	6845      	ldr	r5, [r0, #4]
 8009dce:	b292      	uxth	r2, r2
 8009dd0:	2309      	movs	r3, #9
 8009dd2:	47a8      	blx	r5
 8009dd4:	e7dd      	b.n	8009d92 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8009dd6:	200a      	movs	r0, #10
}
 8009dd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009ddc:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009dde:	4698      	mov	r8, r3
 8009de0:	e7ce      	b.n	8009d80 <MCPA_cfgLog+0x90>
 8009de2:	bf00      	nop

08009de4 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009de4:	7803      	ldrb	r3, [r0, #0]
 8009de6:	b94b      	cbnz	r3, 8009dfc <NTC_Init+0x18>
    {
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8009de8:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	bfcc      	ite	gt
 8009df0:	2300      	movgt	r3, #0
 8009df2:	2301      	movle	r3, #1
 8009df4:	425b      	negs	r3, r3
 8009df6:	b29b      	uxth	r3, r3
 8009df8:	8043      	strh	r3, [r0, #2]
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8009dfa:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009dfc:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = ((pHandle->hSensitivity > 0 ) ? 0U : 0xFFFFU);
 8009dfe:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8009e00:	2200      	movs	r2, #0
 8009e02:	8102      	strh	r2, [r0, #8]
}
 8009e04:	4770      	bx	lr
 8009e06:	bf00      	nop

08009e08 <NTC_CalcAvTemp>:
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009e08:	7802      	ldrb	r2, [r0, #0]
{
 8009e0a:	4603      	mov	r3, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8009e0c:	b9da      	cbnz	r2, 8009e46 <NTC_CalcAvTemp+0x3e>
    {
      uint16_t hAux = rawValue;

      if (0xFFFFU == hAux)
 8009e0e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8009e12:	4281      	cmp	r1, r0
      {
        /* Nothing to do */
      }
      else
      {
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8009e14:	885a      	ldrh	r2, [r3, #2]
      if (0xFFFFU == hAux)
 8009e16:	d004      	beq.n	8009e22 <NTC_CalcAvTemp+0x1a>
        pHandle->hAvTemp_d += (hAux - pHandle->hAvTemp_d) >> 8U;
 8009e18:	1a89      	subs	r1, r1, r2
 8009e1a:	eb02 2221 	add.w	r2, r2, r1, asr #8
 8009e1e:	b292      	uxth	r2, r2
 8009e20:	805a      	strh	r2, [r3, #2]
  if (pHandle->hSensitivity > 0 )
 8009e22:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009e26:	8959      	ldrh	r1, [r3, #10]
  if (pHandle->hSensitivity > 0 )
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	dd07      	ble.n	8009e3c <NTC_CalcAvTemp+0x34>
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009e2c:	428a      	cmp	r2, r1
 8009e2e:	d80d      	bhi.n	8009e4c <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8009e30:	8999      	ldrh	r1, [r3, #12]
 8009e32:	4291      	cmp	r1, r2
 8009e34:	d807      	bhi.n	8009e46 <NTC_CalcAvTemp+0x3e>
      hFault = pHandle->hFaultState;
 8009e36:	8918      	ldrh	r0, [r3, #8]
      }
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009e38:	8118      	strh	r0, [r3, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009e3a:	4770      	bx	lr
    if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8009e3c:	428a      	cmp	r2, r1
 8009e3e:	d305      	bcc.n	8009e4c <NTC_CalcAvTemp+0x44>
    else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8009e40:	8999      	ldrh	r1, [r3, #12]
 8009e42:	4291      	cmp	r1, r2
 8009e44:	d2f7      	bcs.n	8009e36 <NTC_CalcAvTemp+0x2e>
 8009e46:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009e48:	8118      	strh	r0, [r3, #8]
}
 8009e4a:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8009e4c:	2008      	movs	r0, #8
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009e4e:	8118      	strh	r0, [r3, #8]
}
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop

08009e54 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8009e54:	7803      	ldrb	r3, [r0, #0]
 8009e56:	b95b      	cbnz	r3, 8009e70 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8009e58:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8009e5a:	6901      	ldr	r1, [r0, #16]
      wTemp *= pHandle->hSensitivity;
 8009e5c:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009e60:	8a80      	ldrh	r0, [r0, #20]
      wTemp -= ((int32_t)pHandle->wV0);
 8009e62:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8009e64:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009e68:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009e6c:	b200      	sxth	r0, r0
 8009e6e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8009e70:	88c0      	ldrh	r0, [r0, #6]
}
 8009e72:	b200      	sxth	r0, r0
 8009e74:	4770      	bx	lr
 8009e76:	bf00      	nop

08009e78 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8009e78:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009e7a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009e7c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009e7e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009e80:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8009e82:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8009e84:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e86:	4770      	bx	lr

08009e88 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8009e88:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e8a:	4770      	bx	lr

08009e8c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8009e8c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e8e:	4770      	bx	lr

08009e90 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8009e90:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009e94:	4770      	bx	lr
 8009e96:	bf00      	nop

08009e98 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8009e98:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop

08009ea0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8009ea0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8009ea2:	4770      	bx	lr

08009ea4 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8009ea4:	8b80      	ldrh	r0, [r0, #28]
 8009ea6:	4770      	bx	lr

08009ea8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009eac:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009eae:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009eb0:	4770      	bx	lr
 8009eb2:	bf00      	nop

08009eb4 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8009eb4:	8bc0      	ldrh	r0, [r0, #30]
 8009eb6:	4770      	bx	lr

08009eb8 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8009eb8:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009eba:	4770      	bx	lr

08009ebc <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8009ebc:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009ebe:	4770      	bx	lr

08009ec0 <PID_SetKIDivisorPOW2>:
{
 8009ec0:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009ec2:	2301      	movs	r3, #1
{
 8009ec4:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009ec6:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009ec8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009ecc:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8009ece:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009ed0:	40a1      	lsls	r1, r4
{
 8009ed2:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009ed4:	f7ff fff2 	bl	8009ebc <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8009ed8:	4902      	ldr	r1, [pc, #8]	@ (8009ee4 <PID_SetKIDivisorPOW2+0x24>)
 8009eda:	4628      	mov	r0, r5
 8009edc:	40a1      	lsls	r1, r4
 8009ede:	f7ff ffeb 	bl	8009eb8 <PID_SetLowerIntegralTermLimit>
}
 8009ee2:	bd38      	pop	{r3, r4, r5, pc}
 8009ee4:	ffff8001 	.word	0xffff8001

08009ee8 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8009ee8:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009eea:	4770      	bx	lr

08009eec <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8009eec:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop

08009ef4 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8009ef4:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8009ef6:	4770      	bx	lr

08009ef8 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009ef8:	2301      	movs	r3, #1
 8009efa:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009efc:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009efe:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009f00:	4770      	bx	lr
 8009f02:	bf00      	nop

08009f04 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009f04:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8009f08:	4603      	mov	r3, r0
 8009f0a:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8009f0c:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009f10:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009f14:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009f18:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8009f1c:	b17c      	cbz	r4, 8009f3e <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009f1e:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009f22:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8009f26:	eb15 0e01 	adds.w	lr, r5, r1
 8009f2a:	d41d      	bmi.n	8009f68 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8009f2c:	420d      	tst	r5, r1
 8009f2e:	4914      	ldr	r1, [pc, #80]	@ (8009f80 <PI_Controller+0x7c>)
 8009f30:	bf48      	it	mi
 8009f32:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009f34:	45a6      	cmp	lr, r4
 8009f36:	dc02      	bgt.n	8009f3e <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009f38:	691c      	ldr	r4, [r3, #16]
 8009f3a:	4574      	cmp	r4, lr
 8009f3c:	dd1d      	ble.n	8009f7a <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8009f3e:	8b99      	ldrh	r1, [r3, #28]
 8009f40:	410a      	asrs	r2, r1
 8009f42:	8bd9      	ldrh	r1, [r3, #30]
 8009f44:	fa44 f101 	asr.w	r1, r4, r1
 8009f48:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8009f4a:	4290      	cmp	r0, r2
 8009f4c:	da03      	bge.n	8009f56 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8009f4e:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8009f50:	4414      	add	r4, r2
 8009f52:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009f54:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8009f56:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8009f58:	bfc5      	ittet	gt
 8009f5a:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8009f5e:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8009f60:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8009f62:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8009f64:	609c      	str	r4, [r3, #8]
}
 8009f66:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	dde3      	ble.n	8009f34 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	dde1      	ble.n	8009f34 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009f70:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f74:	428c      	cmp	r4, r1
 8009f76:	d1e2      	bne.n	8009f3e <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8009f78:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8009f7a:	4674      	mov	r4, lr
 8009f7c:	e7df      	b.n	8009f3e <PI_Controller+0x3a>
 8009f7e:	bf00      	nop
 8009f80:	80000001 	.word	0x80000001

08009f84 <PID_Controller>:
#endif
    int32_t wDifferential_Term;
    int32_t wDeltaError;
    int32_t wTemp_output;

    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8009f84:	f9b0 2022 	ldrsh.w	r2, [r0, #34]	@ 0x22
{
 8009f88:	b538      	push	{r3, r4, r5, lr}
    if (0 == pHandle->hKdGain) /* derivative terms not used */
 8009f8a:	b912      	cbnz	r2, 8009f92 <PID_Controller+0xe>
    {
      wTemp_output = PI_Controller(pHandle, wProcessVarError);
 8009f8c:	f7ff ffba 	bl	8009f04 <PI_Controller>
    returnValue = (int16_t) wTemp_output;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009f90:	bd38      	pop	{r3, r4, r5, pc}
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8009f92:	6a84      	ldr	r4, [r0, #40]	@ 0x28
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8009f94:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
      pHandle->wPrevProcessVarError = wProcessVarError;
 8009f96:	6281      	str	r1, [r0, #40]	@ 0x28
      wDeltaError = wProcessVarError - pHandle->wPrevProcessVarError;
 8009f98:	1b0c      	subs	r4, r1, r4
      wDifferential_Term = pHandle->hKdGain * wDeltaError;
 8009f9a:	fb02 f404 	mul.w	r4, r2, r4
      wDifferential_Term >>= pHandle->hKdDivisorPOW2;
 8009f9e:	411c      	asrs	r4, r3
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8009fa0:	4605      	mov	r5, r0
 8009fa2:	f7ff ffaf 	bl	8009f04 <PI_Controller>
 8009fa6:	4603      	mov	r3, r0
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8009fa8:	f9b5 0014 	ldrsh.w	r0, [r5, #20]
      wTemp_output = PI_Controller(pHandle, wProcessVarError) + wDifferential_Term;
 8009fac:	4423      	add	r3, r4
      if (wTemp_output > pHandle->hUpperOutputLimit)
 8009fae:	4298      	cmp	r0, r3
 8009fb0:	dbee      	blt.n	8009f90 <PID_Controller+0xc>
      else if (wTemp_output < pHandle->hLowerOutputLimit)
 8009fb2:	f9b5 0016 	ldrsh.w	r0, [r5, #22]
 8009fb6:	4298      	cmp	r0, r3
 8009fb8:	bfb8      	it	lt
 8009fba:	4618      	movlt	r0, r3
    returnValue = (int16_t) wTemp_output;
 8009fbc:	b200      	sxth	r0, r0
}
 8009fbe:	bd38      	pop	{r3, r4, r5, pc}

08009fc0 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009fc0:	6882      	ldr	r2, [r0, #8]
{
 8009fc2:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009fc4:	8951      	ldrh	r1, [r2, #10]
 8009fc6:	f8b2 e014 	ldrh.w	lr, [r2, #20]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8009fca:	8913      	ldrh	r3, [r2, #8]
 8009fcc:	f8b2 c012 	ldrh.w	ip, [r2, #18]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009fd0:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8009fd4:	fb13 230c 	smlabb	r3, r3, ip, r2
 8009fd8:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009fda:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8009fde:	bfbc      	itt	lt
 8009fe0:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009fe4:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009fe6:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8009fea:	bf48      	it	mi
 8009fec:	330f      	addmi	r3, #15
 8009fee:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8009ff2:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8009ff4:	f85d fb04 	ldr.w	pc, [sp], #4

08009ff8 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8009ff8:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009ffa:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009ffe:	ee07 3a90 	vmov	s15, r3
{
 800a002:	ed2d 8b02 	vpush	{d8}
 800a006:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a008:	68c0      	ldr	r0, [r0, #12]
 800a00a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800a00e:	f7ff fbdb 	bl	80097c8 <VBS_GetAvBusVoltage_V>
 800a012:	edd4 7a01 	vldr	s15, [r4, #4]
 800a016:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 800a01a:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800a01e:	ee00 0a10 	vmov	s0, r0
 800a022:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800a026:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a02a:	bd10      	pop	{r4, pc}

0800a02c <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800a02c:	6883      	ldr	r3, [r0, #8]
 800a02e:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 800a032:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 800a036:	b082      	sub	sp, #8
 800a038:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800a03a:	6883      	ldr	r3, [r0, #8]
 800a03c:	00da      	lsls	r2, r3, #3
 800a03e:	d418      	bmi.n	800a072 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 800a040:	4b2e      	ldr	r3, [pc, #184]	@ (800a0fc <R3_2_ADCxInit+0xd0>)
  MODIFY_REG(ADCx->CR,
 800a042:	6882      	ldr	r2, [r0, #8]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	492e      	ldr	r1, [pc, #184]	@ (800a100 <R3_2_ADCxInit+0xd4>)
 800a048:	099b      	lsrs	r3, r3, #6
 800a04a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800a04e:	fba1 1303 	umull	r1, r3, r1, r3
 800a052:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800a056:	099b      	lsrs	r3, r3, #6
 800a058:	005b      	lsls	r3, r3, #1
 800a05a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a05e:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800a060:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a062:	9b01      	ldr	r3, [sp, #4]
 800a064:	b12b      	cbz	r3, 800a072 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800a066:	9b01      	ldr	r3, [sp, #4]
 800a068:	3b01      	subs	r3, #1
 800a06a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a06c:	9b01      	ldr	r3, [sp, #4]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d1f9      	bne.n	800a066 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800a072:	6883      	ldr	r3, [r0, #8]
 800a074:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a078:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a07c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a080:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a082:	6883      	ldr	r3, [r0, #8]
 800a084:	2b00      	cmp	r3, #0
 800a086:	dbfc      	blt.n	800a082 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a088:	6803      	ldr	r3, [r0, #0]
 800a08a:	07db      	lsls	r3, r3, #31
 800a08c:	d408      	bmi.n	800a0a0 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800a08e:	4a1d      	ldr	r2, [pc, #116]	@ (800a104 <R3_2_ADCxInit+0xd8>)
 800a090:	6883      	ldr	r3, [r0, #8]
 800a092:	4013      	ands	r3, r2
 800a094:	f043 0301 	orr.w	r3, r3, #1
 800a098:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a09a:	6803      	ldr	r3, [r0, #0]
 800a09c:	07d9      	lsls	r1, r3, #31
 800a09e:	d5f7      	bpl.n	800a090 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800a0a0:	6883      	ldr	r3, [r0, #8]
 800a0a2:	4a18      	ldr	r2, [pc, #96]	@ (800a104 <R3_2_ADCxInit+0xd8>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	f043 0308 	orr.w	r3, r3, #8
 800a0aa:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a0ac:	6883      	ldr	r3, [r0, #8]
 800a0ae:	4013      	ands	r3, r2
 800a0b0:	f043 0320 	orr.w	r3, r3, #32
 800a0b4:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTP) == (ADC_CR_JADSTP)) ? 1UL : 0UL);
 800a0b6:	6883      	ldr	r3, [r0, #8]
 800a0b8:	069b      	lsls	r3, r3, #26
 800a0ba:	d4fc      	bmi.n	800a0b6 <R3_2_ADCxInit+0x8a>
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 800a0bc:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
  MODIFY_REG(ADCx->CR,
 800a0be:	4a11      	ldr	r2, [pc, #68]	@ (800a104 <R3_2_ADCxInit+0xd8>)
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JEXTEN, ExternalTriggerEdge);
 800a0c0:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
 800a0c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a0c8:	64c3      	str	r3, [r0, #76]	@ 0x4c
  MODIFY_REG(ADCx->CR,
 800a0ca:	6883      	ldr	r3, [r0, #8]
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	f043 0308 	orr.w	r3, r3, #8
 800a0d2:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800a0d4:	68c3      	ldr	r3, [r0, #12]
 800a0d6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0da:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0e2:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a0e4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a0e6:	f023 030f 	bic.w	r3, r3, #15
 800a0ea:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 800a0ec:	6883      	ldr	r3, [r0, #8]
 800a0ee:	4013      	ands	r3, r2
 800a0f0:	f043 0304 	orr.w	r3, r3, #4
 800a0f4:	6083      	str	r3, [r0, #8]
  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength( ADCx, 0U );
  LL_ADC_REG_StartConversion( ADCx) ;

}
 800a0f6:	b002      	add	sp, #8
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	2000047c 	.word	0x2000047c
 800a100:	053e2d63 	.word	0x053e2d63
 800a104:	7fffffc0 	.word	0x7fffffc0

0800a108 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a108:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 800a10c:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 800a110:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a112:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800a114:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a118:	6f1d      	ldr	r5, [r3, #112]	@ 0x70
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 800a11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800a11e:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 800a122:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a126:	6863      	ldr	r3, [r4, #4]
 800a128:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a12c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a130:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 800a132:	2a05      	cmp	r2, #5
 800a134:	f200 809d 	bhi.w	800a272 <R3_2_GetPhaseCurrents+0x16a>
 800a138:	e8df f002 	tbb	[pc, r2]
 800a13c:	031d1d37 	.word	0x031d1d37
 800a140:	3703      	.short	0x3703
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a142:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800a146:	4a4e      	ldr	r2, [pc, #312]	@ (800a280 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a148:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	db58      	blt.n	800a200 <R3_2_GetPhaseCurrents+0xf8>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800a14e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a152:	f280 8087 	bge.w	800a264 <R3_2_GetPhaseCurrents+0x15c>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 800a156:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a15a:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 800a15e:	4d48      	ldr	r5, [pc, #288]	@ (800a280 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 800a160:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a164:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 800a166:	42aa      	cmp	r2, r5
 800a168:	da5b      	bge.n	800a222 <R3_2_GetPhaseCurrents+0x11a>
        {
          Iab->b = -INT16_MAX;
 800a16a:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a16c:	fa1f f38c 	uxth.w	r3, ip
 800a170:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a174:	e030      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a176:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 800a17a:	4b41      	ldr	r3, [pc, #260]	@ (800a280 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a17c:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a17e:	429c      	cmp	r4, r3
 800a180:	db39      	blt.n	800a1f6 <R3_2_GetPhaseCurrents+0xee>
        else  if (Aux > INT16_MAX)
 800a182:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a186:	da62      	bge.n	800a24e <R3_2_GetPhaseCurrents+0x146>
          Iab->a = (int16_t)Aux;
 800a188:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a18c:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a18e:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 800a192:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a196:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800a198:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800a19a:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a19e:	db39      	blt.n	800a214 <R3_2_GetPhaseCurrents+0x10c>
          Iab->b = INT16_MAX;
 800a1a0:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a1a4:	804a      	strh	r2, [r1, #2]
 800a1a6:	4615      	mov	r5, r2
 800a1a8:	e016      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a1aa:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 800a1ae:	4b34      	ldr	r3, [pc, #208]	@ (800a280 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a1b0:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a1b2:	429c      	cmp	r4, r3
 800a1b4:	db1a      	blt.n	800a1ec <R3_2_GetPhaseCurrents+0xe4>
        else  if (Aux > INT16_MAX)
 800a1b6:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a1ba:	da3d      	bge.n	800a238 <R3_2_GetPhaseCurrents+0x130>
          Iab->b = (int16_t)Aux;
 800a1bc:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a1be:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a1c0:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 800a1c4:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a1c6:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 800a1c8:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 800a1ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a1ce:	db19      	blt.n	800a204 <R3_2_GetPhaseCurrents+0xfc>
          Iab->a = INT16_MAX;
 800a1d0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a1d4:	800b      	strh	r3, [r1, #0]
 800a1d6:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a1d8:	4413      	add	r3, r2
 800a1da:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800a1dc:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 800a1e0:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a1e4:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a1e6:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 800a1ea:	4770      	bx	lr
 800a1ec:	461c      	mov	r4, r3
 800a1ee:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a1f2:	461d      	mov	r5, r3
 800a1f4:	e7e4      	b.n	800a1c0 <R3_2_GetPhaseCurrents+0xb8>
 800a1f6:	461c      	mov	r4, r3
 800a1f8:	46a4      	mov	ip, r4
 800a1fa:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a1fe:	e7c6      	b.n	800a18e <R3_2_GetPhaseCurrents+0x86>
 800a200:	4694      	mov	ip, r2
 800a202:	e7aa      	b.n	800a15a <R3_2_GetPhaseCurrents+0x52>
        else  if (Aux < -INT16_MAX)
 800a204:	4c1e      	ldr	r4, [pc, #120]	@ (800a280 <R3_2_GetPhaseCurrents+0x178>)
 800a206:	42a3      	cmp	r3, r4
 800a208:	da26      	bge.n	800a258 <R3_2_GetPhaseCurrents+0x150>
          Iab->a = -INT16_MAX;
 800a20a:	800c      	strh	r4, [r1, #0]
 800a20c:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a210:	46a4      	mov	ip, r4
 800a212:	e7e1      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
        else  if (Aux < -INT16_MAX)
 800a214:	4d1a      	ldr	r5, [pc, #104]	@ (800a280 <R3_2_GetPhaseCurrents+0x178>)
 800a216:	42aa      	cmp	r2, r5
 800a218:	da27      	bge.n	800a26a <R3_2_GetPhaseCurrents+0x162>
          Iab->b = -INT16_MAX;
 800a21a:	804d      	strh	r5, [r1, #2]
 800a21c:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a220:	e7da      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
        else  if (Aux > INT16_MAX)
 800a222:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a226:	db0c      	blt.n	800a242 <R3_2_GetPhaseCurrents+0x13a>
          Iab->b = INT16_MAX;
 800a228:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a22c:	461a      	mov	r2, r3
 800a22e:	804b      	strh	r3, [r1, #2]
 800a230:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a232:	fa1f f38c 	uxth.w	r3, ip
 800a236:	e7cf      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
 800a238:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a23c:	4614      	mov	r4, r2
 800a23e:	4615      	mov	r5, r2
 800a240:	e7be      	b.n	800a1c0 <R3_2_GetPhaseCurrents+0xb8>
          Iab->b = (int16_t)Aux;
 800a242:	b215      	sxth	r5, r2
 800a244:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a246:	fa1f f38c 	uxth.w	r3, ip
 800a24a:	b292      	uxth	r2, r2
 800a24c:	e7c4      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
 800a24e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a252:	461c      	mov	r4, r3
 800a254:	469c      	mov	ip, r3
 800a256:	e79a      	b.n	800a18e <R3_2_GetPhaseCurrents+0x86>
          Iab->a = (int16_t)Aux;
 800a258:	fa0f fc83 	sxth.w	ip, r3
 800a25c:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a260:	b29b      	uxth	r3, r3
 800a262:	e7b9      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
 800a264:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800a268:	e777      	b.n	800a15a <R3_2_GetPhaseCurrents+0x52>
          Iab->b = (int16_t)Aux;
 800a26a:	b215      	sxth	r5, r2
 800a26c:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a26e:	b292      	uxth	r2, r2
 800a270:	e7b2      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
    pHandle->_Super.Ia = Iab->a;
 800a272:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 800a276:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a27a:	880b      	ldrh	r3, [r1, #0]
 800a27c:	884a      	ldrh	r2, [r1, #2]
 800a27e:	e7ab      	b.n	800a1d8 <R3_2_GetPhaseCurrents+0xd0>
 800a280:	ffff8001 	.word	0xffff8001

0800a284 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Returns the value of R3_2_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 800a284:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a286:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800a28a:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a28e:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a292:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a296:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a298:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a29c:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a29e:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a2a0:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a2a4:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a2a8:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a2aa:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a2ac:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a2ae:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a2b0:	4904      	ldr	r1, [pc, #16]	@ (800a2c4 <R3_2_SetADCSampPointPolarization+0x40>)
 800a2b2:	685b      	ldr	r3, [r3, #4]
}
 800a2b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a2b8:	420b      	tst	r3, r1
}
 800a2ba:	bf14      	ite	ne
 800a2bc:	2001      	movne	r0, #1
 800a2be:	2000      	moveq	r0, #0
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	02000070 	.word	0x02000070

0800a2c8 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 800a2c8:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2ca:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a2ce:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a2d2:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a2d4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a2d8:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a2de:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a2e2:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a2e6:	6853      	ldr	r3, [r2, #4]
 800a2e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a2ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2f0:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a2f2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a2f6:	2b0f      	cmp	r3, #15
 800a2f8:	d80d      	bhi.n	800a316 <R3_2_HFCurrentsPolarizationAB+0x4e>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a2fa:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a2fe:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a302:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800a304:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a308:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800a30a:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a30c:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 800a310:	b2db      	uxtb	r3, r3
 800a312:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a316:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a318:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800a31a:	600b      	str	r3, [r1, #0]
}
 800a31c:	4770      	bx	lr
 800a31e:	bf00      	nop

0800a320 <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a320:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 800a324:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a326:	3322      	adds	r3, #34	@ 0x22
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a328:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a32c:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a32e:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a332:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800a336:	6853      	ldr	r3, [r2, #4]
 800a338:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a33c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a340:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a342:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a346:	2b0f      	cmp	r3, #15
 800a348:	d80a      	bhi.n	800a360 <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800a34a:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a34e:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a352:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a354:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800a356:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a358:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a35c:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a360:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a362:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800a366:	600b      	str	r3, [r1, #0]
}
 800a368:	4770      	bx	lr
 800a36a:	bf00      	nop

0800a36c <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a36c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  /* Disable TIMx preload */
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a370:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a374:	681b      	ldr	r3, [r3, #0]
{
 800a376:	b4f0      	push	{r4, r5, r6, r7}
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a378:	699c      	ldr	r4, [r3, #24]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a37a:	2100      	movs	r1, #0
 800a37c:	f024 0408 	bic.w	r4, r4, #8
 800a380:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
 800a384:	619c      	str	r4, [r3, #24]
 800a386:	699c      	ldr	r4, [r3, #24]
 800a388:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 800a38c:	619c      	str	r4, [r3, #24]
 800a38e:	69dc      	ldr	r4, [r3, #28]
 800a390:	f024 0408 	bic.w	r4, r4, #8
 800a394:	61dc      	str	r4, [r3, #28]
 800a396:	69dc      	ldr	r4, [r3, #28]
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a398:	0851      	lsrs	r1, r2, #1
 800a39a:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800a39e:	3a05      	subs	r2, #5
 800a3a0:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a3a2:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a3a4:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a3a6:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a3a8:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a3aa:	699a      	ldr	r2, [r3, #24]
 800a3ac:	f042 0208 	orr.w	r2, r2, #8
 800a3b0:	619a      	str	r2, [r3, #24]
 800a3b2:	699a      	ldr	r2, [r3, #24]
 800a3b4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3b8:	619a      	str	r2, [r3, #24]
 800a3ba:	69da      	ldr	r2, [r3, #28]
 800a3bc:	f042 0208 	orr.w	r2, r2, #8
 800a3c0:	61da      	str	r2, [r3, #28]
 800a3c2:	69da      	ldr	r2, [r3, #28]
 800a3c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a3c8:	61da      	str	r2, [r3, #28]
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
  LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800a3ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3cc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3d0:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a3d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3d8:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a3da:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a3de:	2a02      	cmp	r2, #2
 800a3e0:	d004      	beq.n	800a3ec <R3_2_SwitchOnPWM+0x80>
  }
  else
  {
    /* Nothing to do */
  }
  pHandle->_Super.PWMState = true;
 800a3e2:	2301      	movs	r3, #1
}
 800a3e4:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 800a3e6:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 800a3ea:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a3ec:	6a1f      	ldr	r7, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a3ee:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 800a3f0:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a3f4:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 800a3f6:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a3fa:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 800a3fc:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a400:	f240 5c55 	movw	ip, #1365	@ 0x555
 800a404:	ea17 0f0c 	tst.w	r7, ip
 800a408:	d007      	beq.n	800a41a <R3_2_SwitchOnPWM+0xae>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a40a:	61ae      	str	r6, [r5, #24]
 800a40c:	618c      	str	r4, [r1, #24]
 800a40e:	619a      	str	r2, [r3, #24]
  pHandle->_Super.PWMState = true;
 800a410:	2301      	movs	r3, #1
}
 800a412:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 800a414:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 800a418:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 800a41a:	62ae      	str	r6, [r5, #40]	@ 0x28
 800a41c:	628c      	str	r4, [r1, #40]	@ 0x28
 800a41e:	629a      	str	r2, [r3, #40]	@ 0x28
  pHandle->_Super.PWMState = true;
 800a420:	2301      	movs	r3, #1
}
 800a422:	bcf0      	pop	{r4, r5, r6, r7}
  pHandle->_Super.PWMState = true;
 800a424:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 800a428:	4770      	bx	lr
 800a42a:	bf00      	nop

0800a42c <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 800a42c:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a42e:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a432:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a434:	6853      	ldr	r3, [r2, #4]
 800a436:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a43a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a43e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a440:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a444:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800a448:	480c      	ldr	r0, [pc, #48]	@ (800a47c <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a44a:	3222      	adds	r2, #34	@ 0x22
 800a44c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800a450:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 800a454:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a458:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	bfa8      	it	ge
 800a45e:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 800a460:	4283      	cmp	r3, r0
 800a462:	bfb8      	it	lt
 800a464:	4603      	movlt	r3, r0
 800a466:	b21b      	sxth	r3, r3
 800a468:	2200      	movs	r2, #0
 800a46a:	f363 020f 	bfi	r2, r3, #0, #16
 800a46e:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a472:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 800a476:	600a      	str	r2, [r1, #0]
}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop
 800a47c:	ffff8001 	.word	0xffff8001

0800a480 <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a480:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

    /* Disable TIMx preload */
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a484:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a488:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a48a:	6999      	ldr	r1, [r3, #24]
 800a48c:	f021 0108 	bic.w	r1, r1, #8
{
 800a490:	b4f0      	push	{r4, r5, r6, r7}
 800a492:	6199      	str	r1, [r3, #24]
 800a494:	69d9      	ldr	r1, [r3, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a496:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a498:	2401      	movs	r4, #1
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a49a:	f421 6100 	bic.w	r1, r1, #2048	@ 0x800
 800a49e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a4a0:	635c      	str	r4, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a4a2:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a4a4:	699a      	ldr	r2, [r3, #24]
 800a4a6:	f042 0208 	orr.w	r2, r2, #8
 800a4aa:	619a      	str	r2, [r3, #24]
 800a4ac:	69da      	ldr	r2, [r3, #28]
 800a4ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a4b2:	61da      	str	r2, [r3, #28]
    /* Apply new CC values */
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH1);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a4b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4b6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a4ba:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a4bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4c2:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a4c4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a4c8:	2a02      	cmp	r2, #2
 800a4ca:	d113      	bne.n	800a4f4 <R3_2_RLSwitchOnPWM+0x74>
    {
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a4cc:	6a1f      	ldr	r7, [r3, #32]
      {
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a4ce:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a4d0:	6c01      	ldr	r1, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a4d2:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a4d4:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a4d8:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a4dc:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a4e0:	f240 5c55 	movw	ip, #1365	@ 0x555
 800a4e4:	ea17 0f0c 	tst.w	r7, ip
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a4e8:	bf15      	itete	ne
 800a4ea:	61ae      	strne	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a4ec:	62ae      	streq	r6, [r5, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a4ee:	618c      	strne	r4, [r1, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a4f0:	628c      	streq	r4, [r1, #40]	@ 0x28
 800a4f2:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800a4f4:	2203      	movs	r2, #3
    pHandle->_Super.PWMState = true;
 800a4f6:	2301      	movs	r3, #1
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a4f8:	bcf0      	pop	{r4, r5, r6, r7}
    pHdl->Sector = SECTOR_4;
 800a4fa:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
    pHandle->_Super.PWMState = true;
 800a4fe:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
}
 800a502:	4770      	bx	lr

0800a504 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a504:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a508:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800a50a:	2201      	movs	r2, #1
 800a50c:	f880 207c 	strb.w	r2, [r0, #124]	@ 0x7c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a510:	699a      	ldr	r2, [r3, #24]
 800a512:	f022 0208 	bic.w	r2, r2, #8
 800a516:	619a      	str	r2, [r3, #24]
 800a518:	699a      	ldr	r2, [r3, #24]
 800a51a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a51e:	619a      	str	r2, [r3, #24]
 800a520:	69da      	ldr	r2, [r3, #28]
 800a522:	f022 0208 	bic.w	r2, r2, #8
 800a526:	61da      	str	r2, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a528:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a52a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a52c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a52e:	699a      	ldr	r2, [r3, #24]
 800a530:	f042 0208 	orr.w	r2, r2, #8
 800a534:	619a      	str	r2, [r3, #24]
 800a536:	699a      	ldr	r2, [r3, #24]
 800a538:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a53c:	619a      	str	r2, [r3, #24]
 800a53e:	69da      	ldr	r2, [r3, #28]
 800a540:	f042 0208 	orr.w	r2, r2, #8
 800a544:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a546:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a548:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a54c:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a54e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a552:	2b02      	cmp	r3, #2
 800a554:	d000      	beq.n	800a558 <R3_2_TurnOnLowSides+0x54>
 800a556:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a558:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a55c:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a55e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a560:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a564:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a566:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a56a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800a56e:	618c      	str	r4, [r1, #24]
}
 800a570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a574:	619a      	str	r2, [r3, #24]
 800a576:	4770      	bx	lr

0800a578 <R3_2_SwitchOffPWM>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a578:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a57c:	681a      	ldr	r2, [r3, #0]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a57e:	6c53      	ldr	r3, [r2, #68]	@ 0x44
{
 800a580:	b410      	push	{r4}
  if (true == pHandle->_Super.BrakeActionLock)
 800a582:	f890 4083 	ldrb.w	r4, [r0, #131]	@ 0x83
  pHandle->_Super.PWMState = false;
 800a586:	2100      	movs	r1, #0
 800a588:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a58c:	f880 1084 	strb.w	r1, [r0, #132]	@ 0x84
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a590:	f880 107c 	strb.w	r1, [r0, #124]	@ 0x7c
 800a594:	6453      	str	r3, [r2, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800a596:	b91c      	cbnz	r4, 800a5a0 <R3_2_SwitchOffPWM+0x28>
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a598:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a59c:	2b02      	cmp	r3, #2
 800a59e:	d002      	beq.n	800a5a6 <R3_2_SwitchOffPWM+0x2e>
}
 800a5a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5a4:	4770      	bx	lr
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a5a6:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a5aa:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a5ae:	6c43      	ldr	r3, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 800a5b0:	6294      	str	r4, [r2, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a5b2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a5b6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800a5ba:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800a5bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a5c0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5c2:	4770      	bx	lr

0800a5c4 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800a5c4:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800a5c8:	b510      	push	{r4, lr}
 800a5ca:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 800a5ce:	f101 0e08 	add.w	lr, r1, #8
 800a5d2:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800a5d4:	f85e 300c 	ldr.w	r3, [lr, ip]
 800a5d8:	f36f 130f 	bfc	r3, #4, #12
 800a5dc:	4313      	orrs	r3, r2
 800a5de:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800a5e2:	684a      	ldr	r2, [r1, #4]
 800a5e4:	f000 0303 	and.w	r3, r0, #3
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800a5ec:	680a      	ldr	r2, [r1, #0]
 800a5ee:	f000 0010 	and.w	r0, r0, #16
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800a5f6:	ea33 0202 	bics.w	r2, r3, r2
 800a5fa:	d014      	beq.n	800a626 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800a5fc:	4a14      	ldr	r2, [pc, #80]	@ (800a650 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a5fe:	4815      	ldr	r0, [pc, #84]	@ (800a654 <R3_2_SetAOReferenceVoltage+0x90>)
 800a600:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800a602:	680c      	ldr	r4, [r1, #0]
 800a604:	fba0 0202 	umull	r0, r2, r0, r2
 800a608:	0cd2      	lsrs	r2, r2, #19
 800a60a:	4323      	orrs	r3, r4
 800a60c:	00d2      	lsls	r2, r2, #3
 800a60e:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800a610:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	b12b      	cbz	r3, 800a622 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a616:	9b00      	ldr	r3, [sp, #0]
 800a618:	3b01      	subs	r3, #1
 800a61a:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800a61c:	9b00      	ldr	r3, [sp, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1f9      	bne.n	800a616 <R3_2_SetAOReferenceVoltage+0x52>
}
 800a622:	b002      	add	sp, #8
 800a624:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a626:	4b0a      	ldr	r3, [pc, #40]	@ (800a650 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a628:	4a0a      	ldr	r2, [pc, #40]	@ (800a654 <R3_2_SetAOReferenceVoltage+0x90>)
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	fba2 2303 	umull	r2, r3, r2, r3
 800a630:	0cdb      	lsrs	r3, r3, #19
 800a632:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a636:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a638:	9b01      	ldr	r3, [sp, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d0f1      	beq.n	800a622 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a63e:	9b01      	ldr	r3, [sp, #4]
 800a640:	3b01      	subs	r3, #1
 800a642:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a644:	9b01      	ldr	r3, [sp, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d1f9      	bne.n	800a63e <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a64a:	b002      	add	sp, #8
 800a64c:	bd10      	pop	{r4, pc}
 800a64e:	bf00      	nop
 800a650:	2000047c 	.word	0x2000047c
 800a654:	431bde83 	.word	0x431bde83

0800a658 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a658:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a65c:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a65e:	699a      	ldr	r2, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a660:	2100      	movs	r1, #0
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a662:	f022 0208 	bic.w	r2, r2, #8
 800a666:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a668:	6359      	str	r1, [r3, #52]	@ 0x34
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a66a:	699a      	ldr	r2, [r3, #24]
 800a66c:	f042 0208 	orr.w	r2, r2, #8
 800a670:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a672:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a674:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a678:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a67a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a67e:	2b02      	cmp	r3, #2
 800a680:	d000      	beq.n	800a684 <R3_2_RLTurnOnLowSides+0x2c>
 800a682:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a684:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a688:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a68a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a68c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a690:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a692:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a696:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800a69a:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800a69c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6a0:	629a      	str	r2, [r3, #40]	@ 0x28
 800a6a2:	4770      	bx	lr

0800a6a4 <R3_2_Init>:
{
 800a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a6a8:	f8d0 509c 	ldr.w	r5, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a6ac:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a6ae:	f8d5 7088 	ldr.w	r7, [r5, #136]	@ 0x88
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a6b2:	6872      	ldr	r2, [r6, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a6b4:	682c      	ldr	r4, [r5, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a6b6:	f8d5 b00c 	ldr.w	fp, [r5, #12]
{
 800a6ba:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a6bc:	e9d5 c006 	ldrd	ip, r0, [r5, #24]
{
 800a6c0:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a6c2:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a6c6:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a6ca:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a6cc:	6a28      	ldr	r0, [r5, #32]
 800a6ce:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800a6d0:	e9d5 1301 	ldrd	r1, r3, [r5, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a6d4:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 800a6d6:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a6d8:	e9d5 a904 	ldrd	sl, r9, [r5, #16]
 800a6dc:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a6de:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a6e2:	6872      	ldr	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a6e4:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a6e6:	f022 0220 	bic.w	r2, r2, #32
 800a6ea:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a6ec:	6030      	str	r0, [r6, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	f022 0204 	bic.w	r2, r2, #4
 800a6f4:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a6f6:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	f022 0220 	bic.w	r2, r2, #32
 800a700:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a702:	6038      	str	r0, [r7, #0]
      if (TIM1 ==  TIMx)
 800a704:	4a8f      	ldr	r2, [pc, #572]	@ (800a944 <R3_2_Init+0x2a0>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a706:	4890      	ldr	r0, [pc, #576]	@ (800a948 <R3_2_Init+0x2a4>)
 800a708:	4294      	cmp	r4, r2
 800a70a:	6902      	ldr	r2, [r0, #16]
 800a70c:	bf0c      	ite	eq
 800a70e:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800a712:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800a716:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 800a718:	b181      	cbz	r1, 800a73c <R3_2_Init+0x98>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800a71a:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a71e:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800a722:	6989      	ldr	r1, [r1, #24]
 800a724:	f04e 0e01 	orr.w	lr, lr, #1
 800a728:	f8c2 e000 	str.w	lr, [r2]
 800a72c:	6802      	ldr	r2, [r0, #0]
 800a72e:	f042 0201 	orr.w	r2, r2, #1
 800a732:	6002      	str	r2, [r0, #0]
 800a734:	680a      	ldr	r2, [r1, #0]
 800a736:	f042 0201 	orr.w	r2, r2, #1
 800a73a:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 800a73c:	b1b3      	cbz	r3, 800a76c <R3_2_Init+0xc8>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800a73e:	f895 20a5 	ldrb.w	r2, [r5, #165]	@ 0xa5
 800a742:	2a01      	cmp	r2, #1
 800a744:	d00a      	beq.n	800a75c <R3_2_Init+0xb8>
 800a746:	f1bc 0f00 	cmp.w	ip, #0
 800a74a:	d007      	beq.n	800a75c <R3_2_Init+0xb8>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800a74c:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 800a750:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 800a752:	9303      	str	r3, [sp, #12]
 800a754:	4661      	mov	r1, ip
 800a756:	f7ff ff35 	bl	800a5c4 <R3_2_SetAOReferenceVoltage>
 800a75a:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a75c:	681a      	ldr	r2, [r3, #0]
 800a75e:	f042 0201 	orr.w	r2, r2, #1
 800a762:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a764:	681a      	ldr	r2, [r3, #0]
 800a766:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a76a:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800a76c:	f1bb 0f00 	cmp.w	fp, #0
 800a770:	d017      	beq.n	800a7a2 <R3_2_Init+0xfe>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800a772:	f895 30a6 	ldrb.w	r3, [r5, #166]	@ 0xa6
 800a776:	2b01      	cmp	r3, #1
 800a778:	d007      	beq.n	800a78a <R3_2_Init+0xe6>
 800a77a:	9b00      	ldr	r3, [sp, #0]
 800a77c:	b12b      	cbz	r3, 800a78a <R3_2_Init+0xe6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800a77e:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 800a782:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800a784:	4619      	mov	r1, r3
 800a786:	f7ff ff1d 	bl	800a5c4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a78a:	f8db 3000 	ldr.w	r3, [fp]
 800a78e:	f043 0301 	orr.w	r3, r3, #1
 800a792:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a796:	f8db 3000 	ldr.w	r3, [fp]
 800a79a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a79e:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 800a7a2:	f1ba 0f00 	cmp.w	sl, #0
 800a7a6:	d017      	beq.n	800a7d8 <R3_2_Init+0x134>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800a7a8:	f895 30a7 	ldrb.w	r3, [r5, #167]	@ 0xa7
 800a7ac:	2b01      	cmp	r3, #1
 800a7ae:	d007      	beq.n	800a7c0 <R3_2_Init+0x11c>
 800a7b0:	9b01      	ldr	r3, [sp, #4]
 800a7b2:	b12b      	cbz	r3, 800a7c0 <R3_2_Init+0x11c>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800a7b4:	f8b5 20a0 	ldrh.w	r2, [r5, #160]	@ 0xa0
 800a7b8:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 800a7ba:	4619      	mov	r1, r3
 800a7bc:	f7ff ff02 	bl	800a5c4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a7c0:	f8da 3000 	ldr.w	r3, [sl]
 800a7c4:	f043 0301 	orr.w	r3, r3, #1
 800a7c8:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a7cc:	f8da 3000 	ldr.w	r3, [sl]
 800a7d0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7d4:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 800a7d8:	f1b9 0f00 	cmp.w	r9, #0
 800a7dc:	d017      	beq.n	800a80e <R3_2_Init+0x16a>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800a7de:	f895 30a8 	ldrb.w	r3, [r5, #168]	@ 0xa8
 800a7e2:	2b01      	cmp	r3, #1
 800a7e4:	d007      	beq.n	800a7f6 <R3_2_Init+0x152>
 800a7e6:	9b02      	ldr	r3, [sp, #8]
 800a7e8:	b12b      	cbz	r3, 800a7f6 <R3_2_Init+0x152>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800a7ea:	f8b5 20a2 	ldrh.w	r2, [r5, #162]	@ 0xa2
 800a7ee:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f7ff fee7 	bl	800a5c4 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a7f6:	f8d9 3000 	ldr.w	r3, [r9]
 800a7fa:	f043 0301 	orr.w	r3, r3, #1
 800a7fe:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a802:	f8d9 3000 	ldr.w	r3, [r9]
 800a806:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a80a:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a80e:	68b3      	ldr	r3, [r6, #8]
 800a810:	07da      	lsls	r2, r3, #31
 800a812:	d56d      	bpl.n	800a8f0 <R3_2_Init+0x24c>
 800a814:	68bb      	ldr	r3, [r7, #8]
 800a816:	07db      	lsls	r3, r3, #31
 800a818:	d566      	bpl.n	800a8e8 <R3_2_Init+0x244>
  volatile uint32_t Brk2Timeout = 1000;
 800a81a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a81e:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a820:	6823      	ldr	r3, [r4, #0]
 800a822:	f023 0301 	bic.w	r3, r3, #1
 800a826:	6023      	str	r3, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a828:	6863      	ldr	r3, [r4, #4]
 800a82a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a82e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a832:	f043 0320 	orr.w	r3, r3, #32
 800a836:	6063      	str	r3, [r4, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a838:	69a3      	ldr	r3, [r4, #24]
 800a83a:	f043 0308 	orr.w	r3, r3, #8
 800a83e:	61a3      	str	r3, [r4, #24]
 800a840:	69a3      	ldr	r3, [r4, #24]
 800a842:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a846:	61a3      	str	r3, [r4, #24]
 800a848:	69e3      	ldr	r3, [r4, #28]
 800a84a:	f043 0308 	orr.w	r3, r3, #8
 800a84e:	61e3      	str	r3, [r4, #28]
 800a850:	69e3      	ldr	r3, [r4, #28]
 800a852:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a856:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a858:	6963      	ldr	r3, [r4, #20]
 800a85a:	f043 0301 	orr.w	r3, r3, #1
 800a85e:	6163      	str	r3, [r4, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800a860:	f895 30a9 	ldrb.w	r3, [r5, #169]	@ 0xa9
 800a864:	2b02      	cmp	r3, #2
 800a866:	d058      	beq.n	800a91a <R3_2_Init+0x276>
    if (M1 == pHandle->_Super.Motor)
 800a868:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d046      	beq.n	800a8fe <R3_2_Init+0x25a>
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a870:	6863      	ldr	r3, [r4, #4]
 800a872:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a87a:	f06f 0280 	mvn.w	r2, #128	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a87e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a882:	6063      	str	r3, [r4, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a884:	6122      	str	r2, [r4, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a886:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a888:	9a05      	ldr	r2, [sp, #20]
 800a88a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a88e:	b172      	cbz	r2, 800a8ae <R3_2_Init+0x20a>
 800a890:	b16b      	cbz	r3, 800a8ae <R3_2_Init+0x20a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800a892:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800a896:	e000      	b.n	800a89a <R3_2_Init+0x1f6>
 800a898:	b14b      	cbz	r3, 800a8ae <R3_2_Init+0x20a>
 800a89a:	6121      	str	r1, [r4, #16]
    Brk2Timeout--;
 800a89c:	9b05      	ldr	r3, [sp, #20]
 800a89e:	3b01      	subs	r3, #1
 800a8a0:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a8a2:	6923      	ldr	r3, [r4, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a8a4:	9a05      	ldr	r2, [sp, #20]
 800a8a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a8aa:	2a00      	cmp	r2, #0
 800a8ac:	d1f4      	bne.n	800a898 <R3_2_Init+0x1f4>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800a8ae:	68e3      	ldr	r3, [r4, #12]
 800a8b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b4:	60e3      	str	r3, [r4, #12]
  SET_BIT(TIMx->CCER, Channels);
 800a8b6:	6a23      	ldr	r3, [r4, #32]
 800a8b8:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a8bc:	f06f 0201 	mvn.w	r2, #1
  SET_BIT(TIMx->CCER, Channels);
 800a8c0:	f043 0305 	orr.w	r3, r3, #5
 800a8c4:	6223      	str	r3, [r4, #32]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a8c6:	6122      	str	r2, [r4, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a8c8:	68e3      	ldr	r3, [r4, #12]
 800a8ca:	f043 0301 	orr.w	r3, r3, #1
 800a8ce:	60e3      	str	r3, [r4, #12]
      pHandle->ADCTriggerEdge = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 800a8d0:	2280      	movs	r2, #128	@ 0x80
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800a8d2:	2340      	movs	r3, #64	@ 0x40
 800a8d4:	f8a8 2096 	strh.w	r2, [r8, #150]	@ 0x96
 800a8d8:	6033      	str	r3, [r6, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800a8da:	6873      	ldr	r3, [r6, #4]
 800a8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a8e0:	6073      	str	r3, [r6, #4]
}
 800a8e2:	b007      	add	sp, #28
 800a8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 800a8e8:	4638      	mov	r0, r7
 800a8ea:	f7ff fb9f 	bl	800a02c <R3_2_ADCxInit>
 800a8ee:	e794      	b.n	800a81a <R3_2_Init+0x176>
        R3_2_ADCxInit(ADCx_1);
 800a8f0:	4630      	mov	r0, r6
 800a8f2:	f7ff fb9b 	bl	800a02c <R3_2_ADCxInit>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	07db      	lsls	r3, r3, #31
 800a8fa:	d48e      	bmi.n	800a81a <R3_2_Init+0x176>
 800a8fc:	e7f4      	b.n	800a8e8 <R3_2_Init+0x244>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800a8fe:	f895 30a4 	ldrb.w	r3, [r5, #164]	@ 0xa4
 800a902:	2b01      	cmp	r3, #1
 800a904:	d00d      	beq.n	800a922 <R3_2_Init+0x27e>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800a906:	2b03      	cmp	r3, #3
 800a908:	d1b2      	bne.n	800a870 <R3_2_Init+0x1cc>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a90a:	2201      	movs	r2, #1
 800a90c:	6322      	str	r2, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a90e:	6962      	ldr	r2, [r4, #20]
 800a910:	f042 0201 	orr.w	r2, r2, #1
 800a914:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a916:	6323      	str	r3, [r4, #48]	@ 0x30
}
 800a918:	e7aa      	b.n	800a870 <R3_2_Init+0x1cc>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800a91a:	f895 30aa 	ldrb.w	r3, [r5, #170]	@ 0xaa
 800a91e:	2b01      	cmp	r3, #1
 800a920:	d004      	beq.n	800a92c <R3_2_Init+0x288>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800a922:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 800a926:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800a928:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a92a:	e7a1      	b.n	800a870 <R3_2_Init+0x1cc>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800a92c:	f895 20a4 	ldrb.w	r2, [r5, #164]	@ 0xa4
 800a930:	2a03      	cmp	r2, #3
 800a932:	d1f6      	bne.n	800a922 <R3_2_Init+0x27e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a934:	6323      	str	r3, [r4, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a936:	6963      	ldr	r3, [r4, #20]
 800a938:	f043 0301 	orr.w	r3, r3, #1
 800a93c:	6163      	str	r3, [r4, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a93e:	6322      	str	r2, [r4, #48]	@ 0x30
}
 800a940:	e7ef      	b.n	800a922 <R3_2_Init+0x27e>
 800a942:	bf00      	nop
 800a944:	40012c00 	.word	0x40012c00
 800a948:	e0042000 	.word	0xe0042000

0800a94c <R3_2_SetOffsetCalib>:
{
 800a94c:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a94e:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800a952:	680b      	ldr	r3, [r1, #0]
 800a954:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 800a958:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a95a:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800a95e:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800a962:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a966:	4770      	bx	lr

0800a968 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 800a968:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800a96c:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800a970:	608b      	str	r3, [r1, #8]
 800a972:	e9c1 0200 	strd	r0, r2, [r1]
}
 800a976:	4770      	bx	lr

0800a978 <R3_2_CurrentReadingPolarization>:
{
 800a978:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a97c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800a980:	6803      	ldr	r3, [r0, #0]
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a982:	6815      	ldr	r5, [r2, #0]
{
 800a984:	b083      	sub	sp, #12
    pHandle->PhaseAOffset = 0U;
 800a986:	2600      	movs	r6, #0
 800a988:	e9c0 6622 	strd	r6, r6, [r0, #136]	@ 0x88
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800a98c:	9300      	str	r3, [sp, #0]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800a98e:	6943      	ldr	r3, [r0, #20]
 800a990:	9301      	str	r3, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800a992:	f880 6098 	strb.w	r6, [r0, #152]	@ 0x98
  CLEAR_BIT(TIMx->CCER, Channels);
 800a996:	6a2b      	ldr	r3, [r5, #32]
    pHandle->PhaseCOffset = 0U;
 800a998:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
 800a99c:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800a9a0:	f023 0305 	bic.w	r3, r3, #5
 800a9a4:	622b      	str	r3, [r5, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800a9a6:	4b3b      	ldr	r3, [pc, #236]	@ (800aa94 <R3_2_CurrentReadingPolarization+0x11c>)
 800a9a8:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800a9aa:	4b3b      	ldr	r3, [pc, #236]	@ (800aa98 <R3_2_CurrentReadingPolarization+0x120>)
 800a9ac:	6143      	str	r3, [r0, #20]
{
 800a9ae:	4604      	mov	r4, r0
    pHandle->PolarizationSector=SECTOR_5;
 800a9b0:	2704      	movs	r7, #4
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a9b2:	2380      	movs	r3, #128	@ 0x80
 800a9b4:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    pHandle->PolarizationSector=SECTOR_5;
 800a9b8:	f880 7099 	strb.w	r7, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 800a9bc:	f880 707a 	strb.w	r7, [r0, #122]	@ 0x7a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a9c0:	f7ff fcd4 	bl	800a36c <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800a9c4:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800a9c8:	f104 0856 	add.w	r8, r4, #86	@ 0x56
 800a9cc:	f104 0998 	add.w	r9, r4, #152	@ 0x98
 800a9d0:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 800a9d4:	4641      	mov	r1, r8
 800a9d6:	464b      	mov	r3, r9
 800a9d8:	4628      	mov	r0, r5
 800a9da:	f7f9 fac9 	bl	8003f70 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a9de:	4620      	mov	r0, r4
 800a9e0:	f7ff fdca 	bl	800a578 <R3_2_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800a9e4:	4b2d      	ldr	r3, [pc, #180]	@ (800aa9c <R3_2_CurrentReadingPolarization+0x124>)
 800a9e6:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a9e8:	4620      	mov	r0, r4
    pHandle->PolarizationCounter = 0U;
 800a9ea:	f884 6098 	strb.w	r6, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 800a9ee:	f884 6099 	strb.w	r6, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 800a9f2:	f884 607a 	strb.w	r6, [r4, #122]	@ 0x7a
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a9f6:	f7ff fcb9 	bl	800a36c <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800a9fa:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800a9fe:	464b      	mov	r3, r9
 800aa00:	f892 20a4 	ldrb.w	r2, [r2, #164]	@ 0xa4
 800aa04:	4641      	mov	r1, r8
 800aa06:	4628      	mov	r0, r5
 800aa08:	f7f9 fab2 	bl	8003f70 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800aa0c:	4620      	mov	r0, r4
 800aa0e:	f7ff fdb3 	bl	800a578 <R3_2_SwitchOffPWM>
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800aa12:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
 800aa16:	40fb      	lsrs	r3, r7
 800aa18:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800aa1c:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
 800aa20:	40fb      	lsrs	r3, r7
 800aa22:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800aa26:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800aa2a:	40fb      	lsrs	r3, r7
 800aa2c:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    pHandle->_Super.offsetCalibStatus = true;
 800aa30:	2301      	movs	r3, #1
 800aa32:	f884 307f 	strb.w	r3, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800aa36:	9b00      	ldr	r3, [sp, #0]
 800aa38:	6023      	str	r3, [r4, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800aa3a:	9b01      	ldr	r3, [sp, #4]
 800aa3c:	6163      	str	r3, [r4, #20]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800aa3e:	69ab      	ldr	r3, [r5, #24]
 800aa40:	f023 0308 	bic.w	r3, r3, #8
 800aa44:	61ab      	str	r3, [r5, #24]
 800aa46:	69ab      	ldr	r3, [r5, #24]
 800aa48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800aa4c:	61ab      	str	r3, [r5, #24]
 800aa4e:	69eb      	ldr	r3, [r5, #28]
 800aa50:	f023 0308 	bic.w	r3, r3, #8
 800aa54:	61eb      	str	r3, [r5, #28]
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800aa56:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
 800aa5a:	085b      	lsrs	r3, r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa5c:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aa5e:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aa60:	63eb      	str	r3, [r5, #60]	@ 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800aa62:	69ab      	ldr	r3, [r5, #24]
 800aa64:	f043 0308 	orr.w	r3, r3, #8
 800aa68:	61ab      	str	r3, [r5, #24]
 800aa6a:	69ab      	ldr	r3, [r5, #24]
 800aa6c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800aa70:	61ab      	str	r3, [r5, #24]
 800aa72:	69eb      	ldr	r3, [r5, #28]
 800aa74:	f043 0308 	orr.w	r3, r3, #8
 800aa78:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->CCER, Channels);
 800aa7a:	6a2b      	ldr	r3, [r5, #32]
 800aa7c:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800aa80:	f043 0305 	orr.w	r3, r3, #5
 800aa84:	622b      	str	r3, [r5, #32]
  pHandle->_Super.Sector = SECTOR_5;
 800aa86:	f884 707a 	strb.w	r7, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 800aa8a:	f884 6083 	strb.w	r6, [r4, #131]	@ 0x83
}
 800aa8e:	b003      	add	sp, #12
 800aa90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa94:	0800a2c9 	.word	0x0800a2c9
 800aa98:	0800a285 	.word	0x0800a285
 800aa9c:	0800a321 	.word	0x0800a321

0800aaa0 <R3_2_SetADCSampPointSectX>:
{
 800aaa0:	b530      	push	{r4, r5, lr}
    if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 800aaa2:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 800aaa6:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 800aaaa:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800aaae:	ebae 0203 	sub.w	r2, lr, r3
 800aab2:	f8b1 4068 	ldrh.w	r4, [r1, #104]	@ 0x68
 800aab6:	b292      	uxth	r2, r2
 800aab8:	42a2      	cmp	r2, r4
 800aaba:	d917      	bls.n	800aaec <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 800aabc:	2204      	movs	r2, #4
      SamplingPoint = pHandle->Half_PWMPeriod - 1u;
 800aabe:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800aac2:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint = pHandle->Half_PWMPeriod - 1u;
 800aac6:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aac8:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800aaca:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800aace:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800aad2:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aad6:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aad8:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aada:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800aadc:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800aade:	6852      	ldr	r2, [r2, #4]
 800aae0:	4b10      	ldr	r3, [pc, #64]	@ (800ab24 <R3_2_SetADCSampPointSectX+0x84>)
 800aae2:	421a      	tst	r2, r3
}
 800aae4:	bf14      	ite	ne
 800aae6:	2001      	movne	r0, #1
 800aae8:	2000      	moveq	r0, #0
 800aaea:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800aaec:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 800aaf0:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800aaf4:	fa1f fc8c 	uxth.w	ip, ip
 800aaf8:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800aafc:	d904      	bls.n	800ab08 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800aafe:	f8b1 206a 	ldrh.w	r2, [r1, #106]	@ 0x6a
 800ab02:	1a9b      	subs	r3, r3, r2
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	e7df      	b.n	800aac8 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800ab08:	4423      	add	r3, r4
 800ab0a:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800ab0c:	459e      	cmp	lr, r3
 800ab0e:	d8db      	bhi.n	800aac8 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 800ab10:	43db      	mvns	r3, r3
          pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800ab12:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 800ab16:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 800ab1a:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - 1;
 800ab1e:	b29b      	uxth	r3, r3
 800ab20:	e7d2      	b.n	800aac8 <R3_2_SetADCSampPointSectX+0x28>
 800ab22:	bf00      	nop
 800ab24:	02000070 	.word	0x02000070

0800ab28 <R3_2_TIMx_UP_IRQHandler>:
{
 800ab28:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab2a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800ab2e:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800ab32:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab34:	681d      	ldr	r5, [r3, #0]
{
 800ab36:	4601      	mov	r1, r0
 800ab38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 800ab3c:	6f02      	ldr	r2, [r0, #112]	@ 0x70
    if (OPAMPParams != NULL)
 800ab3e:	b1d6      	cbz	r6, 800ab76 <R3_2_TIMx_UP_IRQHandler+0x4e>
 800ab40:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800ab44:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d1fc      	bne.n	800ab44 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800ab4a:	eb06 030c 	add.w	r3, r6, ip
 800ab4e:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 800ab50:	f1b7 3fff 	cmp.w	r7, #4294967295
 800ab54:	d006      	beq.n	800ab64 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800ab56:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800ab5a:	6834      	ldr	r4, [r6, #0]
 800ab5c:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 800ab60:	433c      	orrs	r4, r7
 800ab62:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800ab64:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 800ab66:	1c66      	adds	r6, r4, #1
 800ab68:	d005      	beq.n	800ab76 <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800ab6a:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800ab6c:	6833      	ldr	r3, [r6, #0]
 800ab6e:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800ab72:	4323      	orrs	r3, r4
 800ab74:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 800ab76:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 800ab7a:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800ab7c:	431c      	orrs	r4, r3
 800ab7e:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADCTriggerEdge;
 800ab80:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 800ab84:	6d00      	ldr	r0, [r0, #80]	@ 0x50
 800ab86:	4303      	orrs	r3, r0
 800ab88:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ab8a:	686b      	ldr	r3, [r5, #4]
 800ab8c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ab90:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ab94:	2280      	movs	r2, #128	@ 0x80
 800ab96:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800ab9a:	606b      	str	r3, [r5, #4]
}
 800ab9c:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 800aba0:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADCTriggerEdge = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800aba2:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 800aba6:	4770      	bx	lr

0800aba8 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800aba8:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800abac:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800abae:	2900      	cmp	r1, #0
 800abb0:	d13d      	bne.n	800ac2e <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800abb2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800abb6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800abb8:	699a      	ldr	r2, [r3, #24]
 800abba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800abbe:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800abc2:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800abc6:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800abc8:	6a1a      	ldr	r2, [r3, #32]
 800abca:	f042 0201 	orr.w	r2, r2, #1
 800abce:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800abd0:	6a1a      	ldr	r2, [r3, #32]
 800abd2:	f022 0204 	bic.w	r2, r2, #4
 800abd6:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800abd8:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800abda:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800abde:	2a01      	cmp	r2, #1
 800abe0:	d033      	beq.n	800ac4a <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800abe2:	2a02      	cmp	r2, #2
 800abe4:	d10f      	bne.n	800ac06 <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800abe6:	699a      	ldr	r2, [r3, #24]
 800abe8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800abec:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800abf0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800abf4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800abf6:	6a1a      	ldr	r2, [r3, #32]
 800abf8:	f042 0210 	orr.w	r2, r2, #16
 800abfc:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800abfe:	6a1a      	ldr	r2, [r3, #32]
 800ac00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac04:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac06:	69da      	ldr	r2, [r3, #28]
 800ac08:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ac0c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ac10:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800ac14:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ac16:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800ac18:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800ac1c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ac20:	621a      	str	r2, [r3, #32]
 800ac22:	6a1a      	ldr	r2, [r3, #32]
 800ac24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac28:	621a      	str	r2, [r3, #32]
 800ac2a:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800ac2e:	4b0f      	ldr	r3, [pc, #60]	@ (800ac6c <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800ac30:	490f      	ldr	r1, [pc, #60]	@ (800ac70 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ac32:	4a10      	ldr	r2, [pc, #64]	@ (800ac74 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800ac34:	4c10      	ldr	r4, [pc, #64]	@ (800ac78 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800ac36:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800ac38:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800ac3a:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ac3c:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800ac40:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800ac44:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800ac48:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac4a:	699a      	ldr	r2, [r3, #24]
 800ac4c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ac50:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ac54:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ac58:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ac5a:	6a1a      	ldr	r2, [r3, #32]
 800ac5c:	f022 0210 	bic.w	r2, r2, #16
 800ac60:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800ac62:	6a1a      	ldr	r2, [r3, #32]
 800ac64:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac68:	621a      	str	r2, [r3, #32]
}
 800ac6a:	e7cc      	b.n	800ac06 <R3_2_RLDetectionModeEnable+0x5e>
 800ac6c:	0800a659 	.word	0x0800a659
 800ac70:	0800a481 	.word	0x0800a481
 800ac74:	0800a579 	.word	0x0800a579
 800ac78:	0800a42d 	.word	0x0800a42d

0800ac7c <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800ac7c:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d03d      	beq.n	800ad00 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ac84:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800ac88:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ac8c:	681b      	ldr	r3, [r3, #0]
{
 800ac8e:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac90:	699a      	ldr	r2, [r3, #24]
 800ac92:	4c40      	ldr	r4, [pc, #256]	@ (800ad94 <R3_2_RLDetectionModeDisable+0x118>)
 800ac94:	4022      	ands	r2, r4
 800ac96:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ac9a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ac9c:	6a1a      	ldr	r2, [r3, #32]
 800ac9e:	f042 0201 	orr.w	r2, r2, #1
 800aca2:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800aca4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800aca8:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800acaa:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800acae:	d028      	beq.n	800ad02 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800acb0:	2a02      	cmp	r2, #2
 800acb2:	d04a      	beq.n	800ad4a <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800acb4:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800acb6:	699a      	ldr	r2, [r3, #24]
 800acb8:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800acbc:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800acc0:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800acc4:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800acc6:	6a1a      	ldr	r2, [r3, #32]
 800acc8:	f042 0210 	orr.w	r2, r2, #16
 800accc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800acce:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800acd0:	69da      	ldr	r2, [r3, #28]
 800acd2:	4022      	ands	r2, r4
 800acd4:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800acd8:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800acda:	6a1a      	ldr	r2, [r3, #32]
 800acdc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ace0:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ace2:	4a2d      	ldr	r2, [pc, #180]	@ (800ad98 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ace4:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800ace6:	492d      	ldr	r1, [pc, #180]	@ (800ad9c <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ace8:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800acea:	4a2d      	ldr	r2, [pc, #180]	@ (800ada0 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800acec:	4c2d      	ldr	r4, [pc, #180]	@ (800ada4 <R3_2_RLDetectionModeDisable+0x128>)
 800acee:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800acf0:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800acf2:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800acf6:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800acfa:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800acfe:	4770      	bx	lr
 800ad00:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800ad02:	6a1a      	ldr	r2, [r3, #32]
 800ad04:	f042 0204 	orr.w	r2, r2, #4
 800ad08:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ad0a:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad0c:	699a      	ldr	r2, [r3, #24]
 800ad0e:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ad12:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ad16:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800ad1a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ad1c:	6a1a      	ldr	r2, [r3, #32]
 800ad1e:	f042 0210 	orr.w	r2, r2, #16
 800ad22:	621a      	str	r2, [r3, #32]
 800ad24:	6a1a      	ldr	r2, [r3, #32]
 800ad26:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad2a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ad2c:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad2e:	69da      	ldr	r2, [r3, #28]
 800ad30:	4022      	ands	r2, r4
 800ad32:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ad36:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800ad38:	6a1a      	ldr	r2, [r3, #32]
 800ad3a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad3e:	621a      	str	r2, [r3, #32]
 800ad40:	6a1a      	ldr	r2, [r3, #32]
 800ad42:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad46:	621a      	str	r2, [r3, #32]
}
 800ad48:	e7cb      	b.n	800ace2 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad4a:	6a1a      	ldr	r2, [r3, #32]
 800ad4c:	f022 0204 	bic.w	r2, r2, #4
 800ad50:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ad52:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad54:	699a      	ldr	r2, [r3, #24]
 800ad56:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ad5a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ad5e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800ad62:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ad64:	6a1a      	ldr	r2, [r3, #32]
 800ad66:	f042 0210 	orr.w	r2, r2, #16
 800ad6a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad6c:	6a1a      	ldr	r2, [r3, #32]
 800ad6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad72:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ad74:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad76:	69da      	ldr	r2, [r3, #28]
 800ad78:	4022      	ands	r2, r4
 800ad7a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ad7e:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800ad80:	6a1a      	ldr	r2, [r3, #32]
 800ad82:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad86:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad88:	6a1a      	ldr	r2, [r3, #32]
 800ad8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad8e:	621a      	str	r2, [r3, #32]
}
 800ad90:	e7a7      	b.n	800ace2 <R3_2_RLDetectionModeDisable+0x66>
 800ad92:	bf00      	nop
 800ad94:	fffeff8c 	.word	0xfffeff8c
 800ad98:	0800a109 	.word	0x0800a109
 800ad9c:	0800a36d 	.word	0x0800a36d
 800ada0:	0800a579 	.word	0x0800a579
 800ada4:	0800a505 	.word	0x0800a505

0800ada8 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ada8:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800adac:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800adb0:	6812      	ldr	r2, [r2, #0]
{
 800adb2:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800adb4:	69d0      	ldr	r0, [r2, #28]
 800adb6:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800adba:	fb0c f101 	mul.w	r1, ip, r1
 800adbe:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
 800adc2:	0c09      	lsrs	r1, r1, #16
 800adc4:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
{
 800adc8:	b410      	push	{r4}
    pHandle->_Super.CntPhA = (uint16_t)val;
 800adca:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800adce:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800add0:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800add4:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800add8:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800addc:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800adde:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ade0:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ade2:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ade4:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800ade8:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800adec:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800adf0:	f04f 0c03 	mov.w	ip, #3
 800adf4:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800adf8:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800adfa:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800adfc:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ae00:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ae02:	d007      	beq.n	800ae14 <R3_2_RLDetectionModeSetDuty+0x6c>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ae04:	4b06      	ldr	r3, [pc, #24]	@ (800ae20 <R3_2_RLDetectionModeSetDuty+0x78>)
}
 800ae06:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ae0a:	421a      	tst	r2, r3
 800ae0c:	bf14      	ite	ne
 800ae0e:	2001      	movne	r0, #1
 800ae10:	2000      	moveq	r0, #0
}
 800ae12:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800ae14:	2200      	movs	r2, #0
}
 800ae16:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800ae1a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800ae1e:	4770      	bx	lr
 800ae20:	02000070 	.word	0x02000070

0800ae24 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ae24:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH3);
    LL_TIM_OC_DisablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800ae28:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ae2c:	681b      	ldr	r3, [r3, #0]
{
 800ae2e:	b430      	push	{r4, r5}
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800ae30:	699c      	ldr	r4, [r3, #24]
 800ae32:	f024 0408 	bic.w	r4, r4, #8
 800ae36:	619c      	str	r4, [r3, #24]
 800ae38:	699c      	ldr	r4, [r3, #24]
 800ae3a:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 800ae3e:	619c      	str	r4, [r3, #24]
 800ae40:	69dc      	ldr	r4, [r3, #28]
 800ae42:	f024 0408 	bic.w	r4, r4, #8
 800ae46:	61dc      	str	r4, [r3, #28]
 800ae48:	69dc      	ldr	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ae4a:	2100      	movs	r1, #0
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800ae4c:	3a05      	subs	r2, #5
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800ae4e:	f424 6400 	bic.w	r4, r4, #2048	@ 0x800
 800ae52:	61dc      	str	r4, [r3, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ae54:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ae56:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ae58:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ae5a:	641a      	str	r2, [r3, #64]	@ 0x40
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800ae5c:	699a      	ldr	r2, [r3, #24]
 800ae5e:	f042 0208 	orr.w	r2, r2, #8
 800ae62:	619a      	str	r2, [r3, #24]
 800ae64:	699a      	ldr	r2, [r3, #24]
 800ae66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae6a:	619a      	str	r2, [r3, #24]
 800ae6c:	69da      	ldr	r2, [r3, #28]
 800ae6e:	f042 0208 	orr.w	r2, r2, #8
 800ae72:	61da      	str	r2, [r3, #28]
 800ae74:	69da      	ldr	r2, [r3, #28]
 800ae76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ae7a:	61da      	str	r2, [r3, #28]
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH2);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH3);
    LL_TIM_OC_EnablePreload(TIMx, LL_TIM_CHANNEL_CH4);
    
    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800ae7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae7e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae82:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800ae84:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae8a:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800ae8c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ae90:	2a02      	cmp	r2, #2
 800ae92:	d10b      	bne.n	800aeac <R3_2_RLTurnOnLowSidesAndStart+0x88>
    {
      /* It is executed during calibration phase the EN signal shall stay off */
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ae94:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800ae98:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ae9c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ae9e:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800aea0:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800aea4:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800aea6:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800aeaa:	6191      	str	r1, [r2, #24]
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800aeac:	2203      	movs	r2, #3
 800aeae:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800aeb2:	6a1a      	ldr	r2, [r3, #32]
 800aeb4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
    LL_TIM_CC_EnableChannel(TIMx, LL_TIM_CHANNEL_CH4);

#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800aeb8:	bc30      	pop	{r4, r5}
 800aeba:	621a      	str	r2, [r3, #32]
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop

0800aec0 <RVBS_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.AvBusVoltage_d = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800aec0:	8943      	ldrh	r3, [r0, #10]
 800aec2:	8a02      	ldrh	r2, [r0, #16]
 800aec4:	4413      	add	r3, r2
 800aec6:	085b      	lsrs	r3, r3, #1
 800aec8:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800aeca:	4770      	bx	lr

0800aecc <RVBS_CalcAvVbus>:
  else
  {
#endif
    uint16_t hAux = rawValue;

    if (0xFFFFU == hAux)
 800aecc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800aed0:	4291      	cmp	r1, r2
 800aed2:	d101      	bne.n	800aed8 <RVBS_CalcAvVbus+0xc>
  uint16_t tempValue = 0U;
 800aed4:	2000      	movs	r0, #0
 800aed6:	4770      	bx	lr
    {
      /* Nothing to do */
    }
    else
    {
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 800aed8:	88c2      	ldrh	r2, [r0, #6]
 800aeda:	4603      	mov	r3, r0
 800aedc:	1a89      	subs	r1, r1, r2
  */
uint16_t RVBS_CheckFaultState(RDivider_Handle_t *pHandle)
{
  uint16_t fault;
  /* If both thresholds are equal, single threshold feature is used */
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800aede:	8940      	ldrh	r0, [r0, #10]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 800aee0:	eb02 2221 	add.w	r2, r2, r1, asr #8
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800aee4:	8999      	ldrh	r1, [r3, #12]
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 800aee6:	b292      	uxth	r2, r2
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800aee8:	4288      	cmp	r0, r1
      pHandle->_Super.AvBusVoltage_d += (hAux - pHandle->_Super.AvBusVoltage_d) >> 8U;
 800aeea:	80da      	strh	r2, [r3, #6]
  if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800aeec:	d012      	beq.n	800af14 <RVBS_CalcAvVbus+0x48>
    }
  }
  else
  {
    /* If both thresholds are different, hysteresis feature is used (Brake mode) */
    if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800aeee:	f8b3 c010 	ldrh.w	ip, [r3, #16]
 800aef2:	4594      	cmp	ip, r2
 800aef4:	d818      	bhi.n	800af28 <RVBS_CalcAvVbus+0x5c>
{
 800aef6:	b410      	push	{r4}
    {
      fault = MC_UNDER_VOLT;
    }
    else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800aef8:	7b9c      	ldrb	r4, [r3, #14]
 800aefa:	b134      	cbz	r4, 800af0a <RVBS_CalcAvVbus+0x3e>
        fault = MC_OVER_VOLT;
      }
    }
    else
    {
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800aefc:	4282      	cmp	r2, r0
 800aefe:	d816      	bhi.n	800af2e <RVBS_CalcAvVbus+0x62>
      {
        pHandle->OverVoltageHysteresisUpDir = false;
        fault = MC_OVER_VOLT;
      }
      else{
        fault = MC_NO_ERROR;
 800af00:	2000      	movs	r0, #0
}
 800af02:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800af06:	8118      	strh	r0, [r3, #8]
}
 800af08:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800af0a:	428a      	cmp	r2, r1
 800af0c:	d211      	bcs.n	800af32 <RVBS_CalcAvVbus+0x66>
        pHandle->OverVoltageHysteresisUpDir = true;
 800af0e:	2201      	movs	r2, #1
 800af10:	739a      	strb	r2, [r3, #14]
        fault = MC_NO_ERROR;
 800af12:	e7f5      	b.n	800af00 <RVBS_CalcAvVbus+0x34>
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800af14:	4282      	cmp	r2, r0
 800af16:	d80e      	bhi.n	800af36 <RVBS_CalcAvVbus+0x6a>
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800af18:	8a18      	ldrh	r0, [r3, #16]
 800af1a:	4290      	cmp	r0, r2
 800af1c:	bf94      	ite	ls
 800af1e:	2000      	movls	r0, #0
 800af20:	2001      	movhi	r0, #1
 800af22:	0080      	lsls	r0, r0, #2
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800af24:	8118      	strh	r0, [r3, #8]
}
 800af26:	4770      	bx	lr
      fault = MC_UNDER_VOLT;
 800af28:	2004      	movs	r0, #4
      pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800af2a:	8118      	strh	r0, [r3, #8]
}
 800af2c:	4770      	bx	lr
        pHandle->OverVoltageHysteresisUpDir = false;
 800af2e:	2200      	movs	r2, #0
 800af30:	739a      	strb	r2, [r3, #14]
        fault = MC_OVER_VOLT;
 800af32:	2002      	movs	r0, #2
 800af34:	e7e5      	b.n	800af02 <RVBS_CalcAvVbus+0x36>
 800af36:	2002      	movs	r0, #2
 800af38:	e7f4      	b.n	800af24 <RVBS_CalcAvVbus+0x58>
 800af3a:	bf00      	nop

0800af3c <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800af3c:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800af3e:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800af40:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800af44:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800af48:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800af4a:	4770      	bx	lr

0800af4c <SPD_GetMecAngle>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->wMecAngle);
#else
  return (pHandle->wMecAngle);
#endif
}
 800af4c:	6880      	ldr	r0, [r0, #8]
 800af4e:	4770      	bx	lr

0800af50 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800af50:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop

0800af58 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800af58:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800af5c:	4603      	mov	r3, r0
 800af5e:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800af60:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800af64:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800af68:	bfb8      	it	lt
 800af6a:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800af6c:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800af70:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800af72:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800af74:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 800af76:	bfb8      	it	lt
 800af78:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800af7a:	458c      	cmp	ip, r1
 800af7c:	d818      	bhi.n	800afb0 <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800af7e:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800af82:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 800af86:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800af8a:	bfb8      	it	lt
 800af8c:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800af90:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800af94:	bfb8      	it	lt
 800af96:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800af9a:	45e6      	cmp	lr, ip
 800af9c:	d308      	bcc.n	800afb0 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800af9e:	428c      	cmp	r4, r1
 800afa0:	d306      	bcc.n	800afb0 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800afa2:	4290      	cmp	r0, r2
 800afa4:	d809      	bhi.n	800afba <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800afa6:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800afa8:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800afaa:	bf18      	it	ne
 800afac:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800afae:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800afb0:	4290      	cmp	r0, r2
 800afb2:	d9f8      	bls.n	800afa6 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800afb4:	3201      	adds	r2, #1
 800afb6:	b2d2      	uxtb	r2, r2
 800afb8:	e7f5      	b.n	800afa6 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800afba:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800afbc:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800afbe:	2001      	movs	r0, #1
}
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	bf00      	nop

0800afc4 <SPD_GetS16Speed>:
  * @brief  Returns the average mechanical rotor speed in RPM*SPEED_UNIT/U_RPM.
  * @param  pHandle: handler of the current instance of the SpeednPosFdbk component
  * @retval int16_t The average mechanical rotor speed.
  * - Called for speed monitoring through MotorPilote.
  */
__weak int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle)
 800afc4:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop

0800afcc <TC_Init>:
 
  */
void TC_Init(PosCtrl_Handle_t *pHandle, PID_Handle_t *pPIDPosReg, SpeednTorqCtrl_Handle_t *pSTC, ENCODER_Handle_t *pENC)
{

  pHandle->MovementDuration = 0.0f;
 800afcc:	f04f 0c00 	mov.w	ip, #0
  pHandle->ElapseTime = 0.0f;

  pHandle->PositionControlRegulation = DISABLE;
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;

  pHandle->pENC = pENC;
 800afd0:	6643      	str	r3, [r0, #100]	@ 0x64
  pHandle->TcTick = 0;
 800afd2:	2300      	movs	r3, #0
  pHandle->pSTC = pSTC;
 800afd4:	e9c0 211a 	strd	r2, r1, [r0, #104]	@ 0x68
  pHandle->MovementDuration = 0.0f;
 800afd8:	f8c0 c000 	str.w	ip, [r0]
  pHandle->AngleStep = 0.0f;
 800afdc:	f8c0 c00c 	str.w	ip, [r0, #12]
  pHandle->SubStep[0] = 0.0f;
 800afe0:	f8c0 c010 	str.w	ip, [r0, #16]
  pHandle->SubStep[1] = 0.0f;
 800afe4:	f8c0 c014 	str.w	ip, [r0, #20]
  pHandle->SubStep[2] = 0.0f;
 800afe8:	f8c0 c018 	str.w	ip, [r0, #24]
  pHandle->SubStep[3] = 0.0f;
 800afec:	f8c0 c01c 	str.w	ip, [r0, #28]
  pHandle->SubStep[4] = 0.0f;
 800aff0:	f8c0 c020 	str.w	ip, [r0, #32]
  pHandle->SubStep[5] = 0.0f;
 800aff4:	f8c0 c024 	str.w	ip, [r0, #36]	@ 0x24
  pHandle->SubStepDuration = 0;
 800aff8:	f8c0 c028 	str.w	ip, [r0, #40]	@ 0x28
  pHandle->ElapseTime = 0.0f;
 800affc:	f8c0 c02c 	str.w	ip, [r0, #44]	@ 0x2c
  pHandle->Jerk = 0.0f;
 800b000:	f8c0 c034 	str.w	ip, [r0, #52]	@ 0x34
  pHandle->CruiseSpeed = 0.0f;
 800b004:	f8c0 c038 	str.w	ip, [r0, #56]	@ 0x38
  pHandle->Acceleration = 0.0f;
 800b008:	f8c0 c03c 	str.w	ip, [r0, #60]	@ 0x3c
  pHandle->Omega = 0.0f;
 800b00c:	f8c0 c040 	str.w	ip, [r0, #64]	@ 0x40
  pHandle->OmegaPrev = 0.0f;
 800b010:	f8c0 c044 	str.w	ip, [r0, #68]	@ 0x44
  pHandle->Theta = 0.0f;
 800b014:	f8c0 c048 	str.w	ip, [r0, #72]	@ 0x48
  pHandle->ThetaPrev = 0.0f;
 800b018:	f8c0 c04c 	str.w	ip, [r0, #76]	@ 0x4c
  pHandle->TcTick = 0;
 800b01c:	6583      	str	r3, [r0, #88]	@ 0x58
  pHandle->ReceivedTh = 0.0f;
 800b01e:	f8a0 3050 	strh.w	r3, [r0, #80]	@ 0x50
  pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800b022:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
  pHandle->PIDPosRegulator = pPIDPosReg;

  pHandle->MecAngleOffset = 0;
 800b026:	f8a0 3054 	strh.w	r3, [r0, #84]	@ 0x54
}
 800b02a:	4770      	bx	lr

0800b02c <TC_MoveCommand>:
  * This function implements the Trajectory Control mode. When fDuration is different from 0,
  * the trajectory of the movement, and therefore its acceleration and speed, are computed. 
  * 
  */
bool TC_MoveCommand(PosCtrl_Handle_t *pHandle, float startingAngle, float angleStep, float movementDuration)
{
 800b02c:	4603      	mov	r3, r0

  bool RetConfigStatus = false;
  float fMinimumStepDuration;

  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800b02e:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
 800b032:	2803      	cmp	r0, #3
 800b034:	d061      	beq.n	800b0fa <TC_MoveCommand+0xce>
  else
  {
    /* Nothing to do */
  }

  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800b036:	b108      	cbz	r0, 800b03c <TC_MoveCommand+0x10>
  bool RetConfigStatus = false;
 800b038:	2000      	movs	r0, #0
  else
  {
    /* Nothing to do */
  }
  return (RetConfigStatus);
}
 800b03a:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800b03c:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b044:	ddf9      	ble.n	800b03a <TC_MoveCommand+0xe>
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800b046:	edd3 6a0c 	vldr	s13, [r3, #48]	@ 0x30
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b04a:	ed9f 4a2f 	vldr	s8, [pc, #188]	@ 800b108 <TC_MoveCommand+0xdc>
    pHandle->StartingAngle = startingAngle;
 800b04e:	ed83 0a01 	vstr	s0, [r3, #4]
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800b052:	eef2 7a02 	vmov.f32	s15, #34	@ 0x41100000  9.0
 800b056:	ee66 6aa7 	vmul.f32	s13, s13, s15
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800b05a:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800b10c <TC_MoveCommand+0xe0>
    pHandle->AngleStep = angleStep;
 800b05e:	edc3 0a03 	vstr	s1, [r3, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b062:	ee81 7a26 	vdiv.f32	s14, s2, s13
    pHandle->ElapseTime = 0.0f;
 800b066:	2200      	movs	r2, #0
    pHandle->PositionControlRegulation = ENABLE;
 800b068:	2001      	movs	r0, #1
 800b06a:	f883 0051 	strb.w	r0, [r3, #81]	@ 0x51
    pHandle->ElapseTime = 0.0f;
 800b06e:	62da      	str	r2, [r3, #44]	@ 0x2c
    pHandle->Omega = 0.0f;
 800b070:	641a      	str	r2, [r3, #64]	@ 0x40
    pHandle->Acceleration = 0.0f;
 800b072:	63da      	str	r2, [r3, #60]	@ 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800b074:	f883 0060 	strb.w	r0, [r3, #96]	@ 0x60
    pHandle->FinalAngle = startingAngle + angleStep;
 800b078:	ee70 3a20 	vadd.f32	s7, s0, s1
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b07c:	eebd 7ac7 	vcvt.s32.f32	s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b080:	ee20 4a84 	vmul.f32	s8, s1, s8
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b084:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->FinalAngle = startingAngle + angleStep;
 800b088:	edc3 3a02 	vstr	s7, [r3, #8]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b08c:	ee27 7a26 	vmul.f32	s14, s14, s13
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800b090:	eeb2 6a00 	vmov.f32	s12, #32	@ 0x41000000  8.0
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800b094:	ee67 7a27 	vmul.f32	s15, s14, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b098:	ed83 7a00 	vstr	s14, [r3]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b09c:	ee27 7aa7 	vmul.f32	s14, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800b0a0:	eef0 4a08 	vmov.f32	s9, #8	@ 0x40400000  3.0
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b0a4:	ee67 6a87 	vmul.f32	s13, s15, s14
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800b0a8:	ee37 7a07 	vadd.f32	s14, s14, s14
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b0ac:	eec4 3a26 	vdiv.f32	s7, s8, s13
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800b0b0:	eeb1 5a08 	vmov.f32	s10, #24	@ 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800b0b4:	eef1 5a0c 	vmov.f32	s11, #28	@ 0x40e00000  7.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800b0b8:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800b0bc:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800b0c0:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800b0c4:	ee67 5aa5 	vmul.f32	s11, s15, s11
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800b0c8:	ee67 6a86 	vmul.f32	s13, s15, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800b0cc:	ee27 7a23 	vmul.f32	s14, s14, s7
    pHandle->Theta = startingAngle;
 800b0d0:	ed83 0a12 	vstr	s0, [r3, #72]	@ 0x48
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800b0d4:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800b0d8:	edc3 7a04 	vstr	s15, [r3, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800b0dc:	ed83 3a05 	vstr	s6, [r3, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800b0e0:	edc3 4a06 	vstr	s9, [r3, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800b0e4:	ed83 5a07 	vstr	s10, [r3, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800b0e8:	edc3 5a08 	vstr	s11, [r3, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800b0ec:	edc3 6a09 	vstr	s13, [r3, #36]	@ 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b0f0:	edc3 3a0d 	vstr	s7, [r3, #52]	@ 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800b0f4:	ed83 7a0e 	vstr	s14, [r3, #56]	@ 0x38
  return (RetConfigStatus);
 800b0f8:	4770      	bx	lr
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800b0fa:	eeb5 1ac0 	vcmpe.f32	s2, #0.0
 800b0fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b102:	dca0      	bgt.n	800b046 <TC_MoveCommand+0x1a>
 800b104:	e798      	b.n	800b038 <TC_MoveCommand+0xc>
 800b106:	bf00      	nop
 800b108:	3daaaaab 	.word	0x3daaaaab
 800b10c:	3de38e39 	.word	0x3de38e39

0800b110 <TC_FollowCommand>:
void TC_FollowCommand(PosCtrl_Handle_t *pHandle, float Angle)
{
  float omega = 0, acceleration = 0, dt = 0;

  /* Estimate speed */
  if (pHandle->ReceivedTh > 0)
 800b110:	f890 3050 	ldrb.w	r3, [r0, #80]	@ 0x50
 800b114:	b383      	cbz	r3, 800b178 <TC_FollowCommand+0x68>
  {
    /* Calculate dt */
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800b116:	edd0 7a16 	vldr	s15, [r0, #88]	@ 0x58
 800b11a:	ed90 7a17 	vldr	s14, [r0, #92]	@ 0x5c
    pHandle->TcTick = 0;
    if (dt > 0)
 800b11e:	ed9f 6a21 	vldr	s12, [pc, #132]	@ 800b1a4 <TC_FollowCommand+0x94>
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800b122:	eef8 7a67 	vcvt.f32.u32	s15, s15
    pHandle->TcTick = 0;
 800b126:	2200      	movs	r2, #0
    dt = pHandle->TcTick * pHandle->SysTickPeriod;
 800b128:	ee67 7a87 	vmul.f32	s15, s15, s14
    pHandle->TcTick = 0;
 800b12c:	6582      	str	r2, [r0, #88]	@ 0x58
    if (dt > 0)
 800b12e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b136:	dd1d      	ble.n	800b174 <TC_FollowCommand+0x64>
    {
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800b138:	edd0 6a13 	vldr	s13, [r0, #76]	@ 0x4c
 800b13c:	ee70 6a66 	vsub.f32	s13, s0, s13
  {
    /* Nothing to do */
  }

  /* Estimated acceleration */
  if (pHandle->ReceivedTh > 1)
 800b140:	2b01      	cmp	r3, #1
      omega = (Angle - pHandle->ThetaPrev) / dt;
 800b142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
  if (pHandle->ReceivedTh > 1)
 800b146:	d019      	beq.n	800b17c <TC_FollowCommand+0x6c>
  {
    if (dt > 0)
    {
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800b148:	ed90 6a11 	vldr	s12, [r0, #68]	@ 0x44
  {
    /* Nothing to do */
  }

  /* Update state variable */
  pHandle->ThetaPrev  = Angle;
 800b14c:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800b150:	ee37 6a46 	vsub.f32	s12, s14, s12
  pHandle->OmegaPrev = omega;
 800b154:	ed80 7a11 	vstr	s14, [r0, #68]	@ 0x44
      acceleration = (omega - pHandle->OmegaPrev) / dt;
 800b158:	eec6 6a27 	vdiv.f32	s13, s12, s15
  pHandle->Acceleration = acceleration;
  pHandle->Omega = omega;
  pHandle->Theta = Angle;

  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
  pHandle->MovementDuration = 0;
 800b15c:	2300      	movs	r3, #0
  pHandle->PositionCtrlStatus = TC_FOLLOWING_ON_GOING;   /* follow mode has been programmed */
 800b15e:	2203      	movs	r2, #3
 800b160:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
  pHandle->MovementDuration = 0;
 800b164:	6003      	str	r3, [r0, #0]
  pHandle->Acceleration = acceleration;
 800b166:	edc0 6a0f 	vstr	s13, [r0, #60]	@ 0x3c
  pHandle->Omega = omega;
 800b16a:	ed80 7a10 	vstr	s14, [r0, #64]	@ 0x40
  pHandle->Theta = Angle;
 800b16e:	ed80 0a12 	vstr	s0, [r0, #72]	@ 0x48
}
 800b172:	4770      	bx	lr
  if (pHandle->ReceivedTh > 1)
 800b174:	2b01      	cmp	r3, #1
 800b176:	d10b      	bne.n	800b190 <TC_FollowCommand+0x80>
  float omega = 0, acceleration = 0, dt = 0;
 800b178:	ed9f 7a0a 	vldr	s14, [pc, #40]	@ 800b1a4 <TC_FollowCommand+0x94>
  pHandle->ThetaPrev  = Angle;
 800b17c:	eddf 6a09 	vldr	s13, [pc, #36]	@ 800b1a4 <TC_FollowCommand+0x94>
 800b180:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
    pHandle->ReceivedTh++;
 800b184:	3301      	adds	r3, #1
  pHandle->OmegaPrev = omega;
 800b186:	ed80 7a11 	vstr	s14, [r0, #68]	@ 0x44
    pHandle->ReceivedTh++;
 800b18a:	f880 3050 	strb.w	r3, [r0, #80]	@ 0x50
 800b18e:	e7e5      	b.n	800b15c <TC_FollowCommand+0x4c>
  float omega = 0, acceleration = 0, dt = 0;
 800b190:	eef0 6a46 	vmov.f32	s13, s12
  pHandle->ThetaPrev  = Angle;
 800b194:	ed80 0a13 	vstr	s0, [r0, #76]	@ 0x4c
  float omega = 0, acceleration = 0, dt = 0;
 800b198:	eeb0 7a46 	vmov.f32	s14, s12
  pHandle->OmegaPrev = omega;
 800b19c:	ed80 6a11 	vstr	s12, [r0, #68]	@ 0x44
  if (pHandle->ReceivedTh < 2)
 800b1a0:	e7dc      	b.n	800b15c <TC_FollowCommand+0x4c>
 800b1a2:	bf00      	nop
 800b1a4:	00000000 	.word	0x00000000

0800b1a8 <TC_MoveExecution>:
void TC_MoveExecution(PosCtrl_Handle_t *pHandle)
{

  float jerkApplied = 0;

  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 800b1a8:	edd0 7a0b 	vldr	s15, [r0, #44]	@ 0x2c
 800b1ac:	ed90 6a04 	vldr	s12, [r0, #16]
  }
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
  {

  }
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 800b1b0:	edd0 6a00 	vldr	s13, [r0]
  else
  {
    /* Nothing to do */
  }

  pHandle->ElapseTime += pHandle->SamplingTime;
 800b1b4:	ed90 7a0c 	vldr	s14, [r0, #48]	@ 0x30
  if (pHandle->ElapseTime < pHandle->SubStep[0])            /* 1st Sub-Step interval time of acceleration phase */
 800b1b8:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b1bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b1c0:	d531      	bpl.n	800b226 <TC_MoveExecution+0x7e>
    jerkApplied = pHandle->Jerk;
 800b1c2:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 800b1c6:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800b1ca:	2b01      	cmp	r3, #1
 800b1cc:	d113      	bne.n	800b1f6 <TC_MoveExecution+0x4e>
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800b1ce:	edd0 5a0f 	vldr	s11, [r0, #60]	@ 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800b1d2:	ed90 6a10 	vldr	s12, [r0, #64]	@ 0x40
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800b1d6:	eee5 5a07 	vfma.f32	s11, s10, s14
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800b1da:	ed90 5a12 	vldr	s10, [r0, #72]	@ 0x48
    pHandle->Acceleration += jerkApplied * pHandle->SamplingTime;
 800b1de:	edc0 5a0f 	vstr	s11, [r0, #60]	@ 0x3c
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800b1e2:	eea5 6a87 	vfma.f32	s12, s11, s14
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800b1e6:	eef0 5a45 	vmov.f32	s11, s10
 800b1ea:	eee6 5a07 	vfma.f32	s11, s12, s14
    pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800b1ee:	ed80 6a10 	vstr	s12, [r0, #64]	@ 0x40
    pHandle->Theta += pHandle->Omega * pHandle->SamplingTime;
 800b1f2:	edc0 5a12 	vstr	s11, [r0, #72]	@ 0x48
  pHandle->ElapseTime += pHandle->SamplingTime;
 800b1f6:	ee77 7a87 	vadd.f32	s15, s15, s14
static inline bool TC_RampCompleted(PosCtrl_Handle_t *pHandle)
{
  bool retVal = false;

  /* Check that entire sequence (Acceleration - Cruise - Deceleration) is completed */
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800b1fa:	ee76 6a87 	vadd.f32	s13, s13, s14
  pHandle->ElapseTime += pHandle->SamplingTime;
 800b1fe:	edc0 7a0b 	vstr	s15, [r0, #44]	@ 0x2c
  if (pHandle->ElapseTime > pHandle->MovementDuration + pHandle->SamplingTime)
 800b202:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b20a:	dd0b      	ble.n	800b224 <TC_MoveExecution+0x7c>
    if (TC_ZERO_ALIGNMENT_START == pHandle->AlignmentStatus)
 800b20c:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 800b210:	2b01      	cmp	r3, #1
      pHandle->AlignmentStatus = TC_ALIGNMENT_ERROR;
 800b212:	bf04      	itt	eq
 800b214:	2305      	moveq	r3, #5
 800b216:	f880 3062 	strbeq.w	r3, [r0, #98]	@ 0x62
    pHandle->ElapseTime = 0;
 800b21a:	2200      	movs	r2, #0
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800b21c:	2300      	movs	r3, #0
    pHandle->ElapseTime = 0;
 800b21e:	62c2      	str	r2, [r0, #44]	@ 0x2c
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800b220:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
}
 800b224:	4770      	bx	lr
  else if (pHandle->ElapseTime < pHandle->SubStep[1])       /* 2nd Sub-Step interval time of acceleration phase */
 800b226:	ed90 6a05 	vldr	s12, [r0, #20]
 800b22a:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b22e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b232:	d502      	bpl.n	800b23a <TC_MoveExecution+0x92>
  float jerkApplied = 0;
 800b234:	ed9f 5a19 	vldr	s10, [pc, #100]	@ 800b29c <TC_MoveExecution+0xf4>
 800b238:	e7c5      	b.n	800b1c6 <TC_MoveExecution+0x1e>
  else if (pHandle->ElapseTime < pHandle->SubStep[2])       /* 3rd Sub-Step interval time of acceleration phase */
 800b23a:	ed90 6a06 	vldr	s12, [r0, #24]
 800b23e:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b246:	d412      	bmi.n	800b26e <TC_MoveExecution+0xc6>
  else if (pHandle->ElapseTime < pHandle->SubStep[3])       /* Speed Cruise phase (after acceleration and before
 800b248:	ed90 6a07 	vldr	s12, [r0, #28]
 800b24c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b254:	d504      	bpl.n	800b260 <TC_MoveExecution+0xb8>
    pHandle->Omega = pHandle->CruiseSpeed;
 800b256:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800b258:	6403      	str	r3, [r0, #64]	@ 0x40
    pHandle->Acceleration = 0.0f;
 800b25a:	2200      	movs	r2, #0
 800b25c:	63c2      	str	r2, [r0, #60]	@ 0x3c
    pHandle->Omega = pHandle->CruiseSpeed;
 800b25e:	e7e9      	b.n	800b234 <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->SubStep[4])       /* 1st Sub-Step interval time of deceleration phase */
 800b260:	ed90 6a08 	vldr	s12, [r0, #32]
 800b264:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b268:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b26c:	d504      	bpl.n	800b278 <TC_MoveExecution+0xd0>
    jerkApplied = -(pHandle->Jerk);
 800b26e:	ed90 5a0d 	vldr	s10, [r0, #52]	@ 0x34
 800b272:	eeb1 5a45 	vneg.f32	s10, s10
 800b276:	e7a6      	b.n	800b1c6 <TC_MoveExecution+0x1e>
  else if (pHandle->ElapseTime < pHandle->SubStep[5])       /* 2nd Sub-Step interval time of deceleration phase */
 800b278:	ed90 6a09 	vldr	s12, [r0, #36]	@ 0x24
 800b27c:	eef4 7ac6 	vcmpe.f32	s15, s12
 800b280:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b284:	d4d6      	bmi.n	800b234 <TC_MoveExecution+0x8c>
  else if (pHandle->ElapseTime < pHandle->MovementDuration) /* 3rd Sub-Step interval time of deceleration phase */
 800b286:	eef4 7ae6 	vcmpe.f32	s15, s13
 800b28a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b28e:	d498      	bmi.n	800b1c2 <TC_MoveExecution+0x1a>
    pHandle->Theta = pHandle->FinalAngle;
 800b290:	6882      	ldr	r2, [r0, #8]
 800b292:	6482      	str	r2, [r0, #72]	@ 0x48
    pHandle->PositionCtrlStatus = TC_TARGET_POSITION_REACHED;
 800b294:	2302      	movs	r3, #2
 800b296:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
  if (TC_MOVEMENT_ON_GOING == pHandle->PositionCtrlStatus)
 800b29a:	e7ac      	b.n	800b1f6 <TC_MoveExecution+0x4e>
 800b29c:	00000000 	.word	0x00000000

0800b2a0 <TC_PositionRegulation>:
{
 800b2a0:	b538      	push	{r3, r4, r5, lr}
  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 800b2a2:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800b2a6:	2b01      	cmp	r3, #1
{
 800b2a8:	4604      	mov	r4, r0
  if (pHandle->PositionCtrlStatus == TC_MOVEMENT_ON_GOING)
 800b2aa:	d035      	beq.n	800b318 <TC_PositionRegulation+0x78>
  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 800b2ac:	2b03      	cmp	r3, #3
 800b2ae:	d10f      	bne.n	800b2d0 <TC_PositionRegulation+0x30>
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800b2b0:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 800b2b4:	edd4 7a10 	vldr	s15, [r4, #64]	@ 0x40
 800b2b8:	ed94 6a0f 	vldr	s12, [r4, #60]	@ 0x3c
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800b2bc:	ed94 7a12 	vldr	s14, [r4, #72]	@ 0x48
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800b2c0:	eee6 7a26 	vfma.f32	s15, s12, s13
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800b2c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
  pHandle->Omega += pHandle->Acceleration * pHandle->SamplingTime;
 800b2c8:	edc4 7a10 	vstr	s15, [r4, #64]	@ 0x40
  pHandle->Theta += pHandle->Omega        * pHandle->SamplingTime;
 800b2cc:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
  if (pHandle->PositionControlRegulation == ENABLE)
 800b2d0:	f894 3051 	ldrb.w	r3, [r4, #81]	@ 0x51
 800b2d4:	b903      	cbnz	r3, 800b2d8 <TC_PositionRegulation+0x38>
}
 800b2d6:	bd38      	pop	{r3, r4, r5, pc}
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800b2d8:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800b324 <TC_PositionRegulation+0x84>
 800b2dc:	edd4 7a12 	vldr	s15, [r4, #72]	@ 0x48
 800b2e0:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800b2e2:	ee67 7a87 	vmul.f32	s15, s15, s14
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800b2e6:	6958      	ldr	r0, [r3, #20]
    wMecAngleRef = (int32_t)(pHandle->Theta * RADTOS16);
 800b2e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b2ec:	ee17 5a90 	vmov	r5, s15
    wMecAngle = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800b2f0:	f7ff fe2c 	bl	800af4c <SPD_GetMecAngle>
    wError = wMecAngleRef - wMecAngle;
 800b2f4:	1a29      	subs	r1, r5, r0
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800b2f6:	f301 010f 	ssat	r1, #16, r1
 800b2fa:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800b2fc:	f7fe fe42 	bl	8009f84 <PID_Controller>
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800b300:	2104      	movs	r1, #4
    hTorqueRef_Pos = PID_Controller(pHandle->PIDPosRegulator, wError);
 800b302:	4605      	mov	r5, r0
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800b304:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b306:	f7f9 f8ad 	bl	8004464 <STC_SetControlMode>
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 800b30a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b30c:	4629      	mov	r1, r5
 800b30e:	2200      	movs	r2, #0
}
 800b310:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    STC_ExecRamp(pHandle->pSTC, hTorqueRef_Pos, 0);
 800b314:	f7f9 b8aa 	b.w	800446c <STC_ExecRamp>
    TC_MoveExecution(pHandle);
 800b318:	f7ff ff46 	bl	800b1a8 <TC_MoveExecution>
  if (pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING)
 800b31c:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 800b320:	e7c4      	b.n	800b2ac <TC_PositionRegulation+0xc>
 800b322:	bf00      	nop
 800b324:	4622f983 	.word	0x4622f983

0800b328 <TC_EncAlignmentCommand>:
{
 800b328:	b510      	push	{r4, lr}
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 800b32a:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 800b32e:	2b02      	cmp	r3, #2
{
 800b330:	b082      	sub	sp, #8
 800b332:	4604      	mov	r4, r0
  if (TC_ALIGNMENT_COMPLETED == pHandle->AlignmentStatus)
 800b334:	d010      	beq.n	800b358 <TC_EncAlignmentCommand+0x30>
    if (pHandle->AlignmentCfg == TC_ABSOLUTE_ALIGNMENT_SUPPORTED)
 800b336:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d011      	beq.n	800b362 <TC_EncAlignmentCommand+0x3a>
      pHandle->pENC->_Super.wMecAngle = 0;
 800b33e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 800b340:	2300      	movs	r3, #0
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800b342:	2102      	movs	r1, #2
      pHandle->PositionControlRegulation = ENABLE;
 800b344:	2201      	movs	r2, #1
      pHandle->pENC->_Super.wMecAngle = 0;
 800b346:	6083      	str	r3, [r0, #8]
      pHandle->AlignmentStatus = TC_ALIGNMENT_COMPLETED;
 800b348:	f884 1062 	strb.w	r1, [r4, #98]	@ 0x62
      pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800b34c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      pHandle->PositionControlRegulation = ENABLE;
 800b350:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
}
 800b354:	b002      	add	sp, #8
 800b356:	bd10      	pop	{r4, pc}
    pHandle->PositionCtrlStatus = TC_READY_FOR_COMMAND;
 800b358:	2300      	movs	r3, #0
 800b35a:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
}
 800b35e:	b002      	add	sp, #8
 800b360:	bd10      	pop	{r4, pc}
 800b362:	6e82      	ldr	r2, [r0, #104]	@ 0x68
      pHandle->EncoderAbsoluteAligned = false;
 800b364:	2300      	movs	r3, #0
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800b366:	6950      	ldr	r0, [r2, #20]
      pHandle->EncoderAbsoluteAligned = false;
 800b368:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800b36c:	f7ff fdee 	bl	800af4c <SPD_GetMecAngle>
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800b370:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
      wMecAngleRef = SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC));
 800b374:	9001      	str	r0, [sp, #4]
  if ((pHandle->PositionCtrlStatus == TC_FOLLOWING_ON_GOING) && (movementDuration > 0))
 800b376:	2b03      	cmp	r3, #3
 800b378:	d005      	beq.n	800b386 <TC_EncAlignmentCommand+0x5e>
  if ((pHandle->PositionCtrlStatus == TC_READY_FOR_COMMAND) && (movementDuration > 0))
 800b37a:	b123      	cbz	r3, 800b386 <TC_EncAlignmentCommand+0x5e>
      pHandle->AlignmentStatus = TC_ZERO_ALIGNMENT_START;
 800b37c:	2301      	movs	r3, #1
 800b37e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 800b382:	b002      	add	sp, #8
 800b384:	bd10      	pop	{r4, pc}
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800b386:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b38a:	ed9f 6a31 	vldr	s12, [pc, #196]	@ 800b450 <TC_EncAlignmentCommand+0x128>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800b38e:	eddf 5a31 	vldr	s11, [pc, #196]	@ 800b454 <TC_EncAlignmentCommand+0x12c>
    pHandle->AngleStep = angleStep;
 800b392:	eddf 3a31 	vldr	s7, [pc, #196]	@ 800b458 <TC_EncAlignmentCommand+0x130>
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b396:	ed9f 2a31 	vldr	s4, [pc, #196]	@ 800b45c <TC_EncAlignmentCommand+0x134>
    pHandle->AngleStep = angleStep;
 800b39a:	edc4 3a03 	vstr	s7, [r4, #12]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b39e:	eec6 6a27 	vdiv.f32	s13, s12, s15
    pHandle->ElapseTime = 0.0f;
 800b3a2:	2300      	movs	r3, #0
    pHandle->PositionControlRegulation = ENABLE;
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	f884 2051 	strb.w	r2, [r4, #81]	@ 0x51
    pHandle->ElapseTime = 0.0f;
 800b3aa:	62e3      	str	r3, [r4, #44]	@ 0x2c
    pHandle->Omega = 0.0f;
 800b3ac:	6423      	str	r3, [r4, #64]	@ 0x40
    pHandle->Acceleration = 0.0f;
 800b3ae:	63e3      	str	r3, [r4, #60]	@ 0x3c
    pHandle->PositionCtrlStatus = TC_MOVEMENT_ON_GOING;   /* new trajectory has been programmed */
 800b3b0:	f884 2060 	strb.w	r2, [r4, #96]	@ 0x60
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800b3b4:	eeb2 7a02 	vmov.f32	s14, #34	@ 0x41100000  9.0
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b3b8:	eefd 6ae6 	vcvt.s32.f32	s13, s13
    fMinimumStepDuration = (9.0f * pHandle->SamplingTime);
 800b3bc:	ee27 6a87 	vmul.f32	s12, s15, s14
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b3c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800b3c4:	eddf 7a26 	vldr	s15, [pc, #152]	@ 800b460 <TC_EncAlignmentCommand+0x138>
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800b3c8:	ed9d 7a01 	vldr	s14, [sp, #4]
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b3cc:	ee66 6a86 	vmul.f32	s13, s13, s12
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800b3d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800b3d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
    pHandle->MovementDuration = (float)((int)(movementDuration / fMinimumStepDuration)) * fMinimumStepDuration;
 800b3d8:	edc4 6a00 	vstr	s13, [r4]
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b3dc:	ee67 6aa7 	vmul.f32	s13, s15, s15
      TC_MoveCommand(pHandle, (float)(wMecAngleRef) / RADTOS16, Z_ALIGNMENT_NB_ROTATION, Z_ALIGNMENT_DURATION);
 800b3e0:	ee27 7a25 	vmul.f32	s14, s14, s11
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b3e4:	ee26 6aa7 	vmul.f32	s12, s13, s15
    pHandle->FinalAngle = startingAngle + angleStep;
 800b3e8:	ee77 2a23 	vadd.f32	s5, s14, s7
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b3ec:	eec2 3a06 	vdiv.f32	s7, s4, s12
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800b3f0:	ee76 6aa6 	vadd.f32	s13, s13, s13
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800b3f4:	eeb0 4a08 	vmov.f32	s8, #8	@ 0x40400000  3.0
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800b3f8:	eef1 4a08 	vmov.f32	s9, #24	@ 0x40c00000  6.0
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800b3fc:	eeb1 5a0c 	vmov.f32	s10, #28	@ 0x40e00000  7.0
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800b400:	eef2 5a00 	vmov.f32	s11, #32	@ 0x41000000  8.0
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800b404:	ee37 3aa7 	vadd.f32	s6, s15, s15
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800b408:	ee27 4a84 	vmul.f32	s8, s15, s8
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800b40c:	ee67 4aa4 	vmul.f32	s9, s15, s9
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800b410:	ee27 5a85 	vmul.f32	s10, s15, s10
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800b414:	ee27 6aa5 	vmul.f32	s12, s15, s11
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800b418:	ee66 6aa3 	vmul.f32	s13, s13, s7
    pHandle->StartingAngle = startingAngle;
 800b41c:	ed84 7a01 	vstr	s14, [r4, #4]
    pHandle->FinalAngle = startingAngle + angleStep;
 800b420:	edc4 2a02 	vstr	s5, [r4, #8]
    pHandle->SubStepDuration = pHandle->MovementDuration / 9.0f;
 800b424:	edc4 7a0a 	vstr	s15, [r4, #40]	@ 0x28
    pHandle->SubStep[0] = 1 * pHandle->SubStepDuration;   /* Sub-step 1 of acceleration phase */
 800b428:	edc4 7a04 	vstr	s15, [r4, #16]
    pHandle->SubStep[1] = 2 * pHandle->SubStepDuration;   /* Sub-step 2 of acceleration phase */
 800b42c:	ed84 3a05 	vstr	s6, [r4, #20]
    pHandle->SubStep[2] = 3 * pHandle->SubStepDuration;   /* Sub-step 3 of acceleration phase */
 800b430:	ed84 4a06 	vstr	s8, [r4, #24]
    pHandle->SubStep[3] = 6 * pHandle->SubStepDuration;   /* Sub-step 1 of deceleration phase */
 800b434:	edc4 4a07 	vstr	s9, [r4, #28]
    pHandle->SubStep[4] = 7 * pHandle->SubStepDuration;   /* Sub-step 2 of deceleration phase */
 800b438:	ed84 5a08 	vstr	s10, [r4, #32]
    pHandle->SubStep[5] = 8 * pHandle->SubStepDuration;   /* Sub-step 3 of deceleration phase */
 800b43c:	ed84 6a09 	vstr	s12, [r4, #36]	@ 0x24
    pHandle->Jerk = pHandle->AngleStep / (12 * pHandle->SubStepDuration * pHandle->SubStepDuration * pHandle->SubStepDuration);
 800b440:	edc4 3a0d 	vstr	s7, [r4, #52]	@ 0x34
    pHandle->CruiseSpeed = 2 * pHandle->Jerk * pHandle->SubStepDuration * pHandle->SubStepDuration;
 800b444:	edc4 6a0e 	vstr	s13, [r4, #56]	@ 0x38
    pHandle->Theta = startingAngle;
 800b448:	ed84 7a12 	vstr	s14, [r4, #72]	@ 0x48
  return (RetConfigStatus);
 800b44c:	e796      	b.n	800b37c <TC_EncAlignmentCommand+0x54>
 800b44e:	bf00      	nop
 800b450:	3e638e39 	.word	0x3e638e39
 800b454:	38c90fdb 	.word	0x38c90fdb
 800b458:	40c90fdb 	.word	0x40c90fdb
 800b45c:	3f060a92 	.word	0x3f060a92
 800b460:	3de38e39 	.word	0x3de38e39

0800b464 <TC_GetCurrentPosition>:
  * @brief  Returns the current rotor mechanical angle, expressed in radiant.
  * @param  pHandle: handler of the current instance of the Position Control component.
  * @retval current mechanical position
  */
float TC_GetCurrentPosition(PosCtrl_Handle_t *pHandle)
{
 800b464:	b508      	push	{r3, lr}
 800b466:	6e83      	ldr	r3, [r0, #104]	@ 0x68

  return ((float)((SPD_GetMecAngle(STC_GetSpeedSensor(pHandle->pSTC))) / RADTOS16));
 800b468:	6958      	ldr	r0, [r3, #20]
 800b46a:	f7ff fd6f 	bl	800af4c <SPD_GetMecAngle>
 800b46e:	ee07 0a90 	vmov	s15, r0
 800b472:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 800b480 <TC_GetCurrentPosition+0x1c>
 800b476:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
 800b47a:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b47e:	bd08      	pop	{r3, pc}
 800b480:	38c90fdb 	.word	0x38c90fdb

0800b484 <TC_GetTargetPosition>:
  * @retval Target mechanical position
  */
float TC_GetTargetPosition(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->FinalAngle);
}
 800b484:	ed90 0a02 	vldr	s0, [r0, #8]
 800b488:	4770      	bx	lr
 800b48a:	bf00      	nop

0800b48c <TC_GetMoveDuration>:
  * @retval Duration of programmed movement
  */
float TC_GetMoveDuration(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->MovementDuration);
}
 800b48c:	ed90 0a00 	vldr	s0, [r0]
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop

0800b494 <TC_GetControlPositionStatus>:
  * @retval Position Control Status
  */
PosCtrlStatus_t TC_GetControlPositionStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->PositionCtrlStatus);
}
 800b494:	f890 0060 	ldrb.w	r0, [r0, #96]	@ 0x60
 800b498:	4770      	bx	lr
 800b49a:	bf00      	nop

0800b49c <TC_GetAlignmentStatus>:
  * @param  pHandle handler of the current instance of the Position Control component.
  */
AlignStatus_t TC_GetAlignmentStatus(PosCtrl_Handle_t *pHandle)
{
  return (pHandle->AlignmentStatus);
}
 800b49c:	f890 0062 	ldrb.w	r0, [r0, #98]	@ 0x62
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop

0800b4a4 <TC_IncTick>:
  * @brief  Increments Tick counter used in follow mode.
  * @param  pHandle handler of the current instance of the Position Control component.
  */
void TC_IncTick(PosCtrl_Handle_t *pHandle)
{
  pHandle->TcTick++;
 800b4a4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	6583      	str	r3, [r0, #88]	@ 0x58
}
 800b4aa:	4770      	bx	lr

0800b4ac <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b4ac:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b4ae:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b4b0:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800b4b2:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800b4b6:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b4b8:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800b4ba:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800b4bc:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800b4be:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b4c0:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800b4c2:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop

0800b4c8 <VSS_Init>:
{
 800b4c8:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800b4ca:	f7ff ffef 	bl	800b4ac <VSS_Clear>
}
 800b4ce:	bd08      	pop	{r3, pc}

0800b4d0 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800b4d0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b4d4:	b9a3      	cbnz	r3, 800b500 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b4d6:	8b43      	ldrh	r3, [r0, #26]
{
 800b4d8:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b4da:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b4dc:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b4e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b4e4:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b4e8:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800b4ea:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800b4ee:	b942      	cbnz	r2, 800b502 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b4f0:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800b4f4:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b4f6:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800b4fa:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b4fc:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b4fe:	bd10      	pop	{r4, pc}
 800b500:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800b502:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800b504:	fb02 f303 	mul.w	r3, r2, r3
 800b508:	4a0e      	ldr	r2, [pc, #56]	@ (800b544 <VSS_SetMecAcceleration+0x74>)
 800b50a:	fba2 2303 	umull	r2, r3, r2, r3
 800b50e:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800b512:	3301      	adds	r3, #1
 800b514:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b516:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800b51a:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800b51c:	b91b      	cbnz	r3, 800b526 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b51e:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b520:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b522:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800b524:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b526:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b52a:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800b52e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b532:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b534:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800b538:	fb0e f303 	mul.w	r3, lr, r3
 800b53c:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b53e:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b540:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800b542:	e7ef      	b.n	800b524 <VSS_SetMecAcceleration+0x54>
 800b544:	10624dd3 	.word	0x10624dd3

0800b548 <memset>:
 800b548:	4402      	add	r2, r0
 800b54a:	4603      	mov	r3, r0
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d100      	bne.n	800b552 <memset+0xa>
 800b550:	4770      	bx	lr
 800b552:	f803 1b01 	strb.w	r1, [r3], #1
 800b556:	e7f9      	b.n	800b54c <memset+0x4>

0800b558 <__libc_init_array>:
 800b558:	b570      	push	{r4, r5, r6, lr}
 800b55a:	4d0d      	ldr	r5, [pc, #52]	@ (800b590 <__libc_init_array+0x38>)
 800b55c:	4c0d      	ldr	r4, [pc, #52]	@ (800b594 <__libc_init_array+0x3c>)
 800b55e:	1b64      	subs	r4, r4, r5
 800b560:	10a4      	asrs	r4, r4, #2
 800b562:	2600      	movs	r6, #0
 800b564:	42a6      	cmp	r6, r4
 800b566:	d109      	bne.n	800b57c <__libc_init_array+0x24>
 800b568:	4d0b      	ldr	r5, [pc, #44]	@ (800b598 <__libc_init_array+0x40>)
 800b56a:	4c0c      	ldr	r4, [pc, #48]	@ (800b59c <__libc_init_array+0x44>)
 800b56c:	f000 f826 	bl	800b5bc <_init>
 800b570:	1b64      	subs	r4, r4, r5
 800b572:	10a4      	asrs	r4, r4, #2
 800b574:	2600      	movs	r6, #0
 800b576:	42a6      	cmp	r6, r4
 800b578:	d105      	bne.n	800b586 <__libc_init_array+0x2e>
 800b57a:	bd70      	pop	{r4, r5, r6, pc}
 800b57c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b580:	4798      	blx	r3
 800b582:	3601      	adds	r6, #1
 800b584:	e7ee      	b.n	800b564 <__libc_init_array+0xc>
 800b586:	f855 3b04 	ldr.w	r3, [r5], #4
 800b58a:	4798      	blx	r3
 800b58c:	3601      	adds	r6, #1
 800b58e:	e7f2      	b.n	800b576 <__libc_init_array+0x1e>
 800b590:	0800c104 	.word	0x0800c104
 800b594:	0800c104 	.word	0x0800c104
 800b598:	0800c104 	.word	0x0800c104
 800b59c:	0800c108 	.word	0x0800c108

0800b5a0 <memcpy>:
 800b5a0:	440a      	add	r2, r1
 800b5a2:	4291      	cmp	r1, r2
 800b5a4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5a8:	d100      	bne.n	800b5ac <memcpy+0xc>
 800b5aa:	4770      	bx	lr
 800b5ac:	b510      	push	{r4, lr}
 800b5ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5b6:	4291      	cmp	r1, r2
 800b5b8:	d1f9      	bne.n	800b5ae <memcpy+0xe>
 800b5ba:	bd10      	pop	{r4, pc}

0800b5bc <_init>:
 800b5bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5be:	bf00      	nop
 800b5c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5c2:	bc08      	pop	{r3}
 800b5c4:	469e      	mov	lr, r3
 800b5c6:	4770      	bx	lr

0800b5c8 <_fini>:
 800b5c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b5ca:	bf00      	nop
 800b5cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b5ce:	bc08      	pop	{r3}
 800b5d0:	469e      	mov	lr, r3
 800b5d2:	4770      	bx	lr

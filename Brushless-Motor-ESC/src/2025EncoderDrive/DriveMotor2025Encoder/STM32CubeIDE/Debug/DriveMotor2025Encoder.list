
DriveMotor2025Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b988  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ac0  0800bb68  0800bb68  0000cb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c628  0800c628  0000e434  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c628  0800c628  0000d628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c630  0800c630  0000e434  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c630  0800c630  0000d630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c634  0800c634  0000d634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000434  20000000  0800c638  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001874  20000438  0800ca6c  0000e438  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001cac  0800ca6c  0000ecac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e434  2**0
                  CONTENTS, READONLY
 12 .debug_line   00052691  00000000  00000000  0000e464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 000000ad  00000000  00000000  00060af5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   000519ed  00000000  00000000  00060ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a078  00000000  00000000  000b258f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023d8  00000000  00000000  000bc608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00110610  00000000  00000000  000be9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003bbb  00000000  00000000  001ceff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 00021120  00000000  00000000  001d2bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  000309bd  00000000  00000000  001f3ccb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00224688  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006664  00000000  00000000  002246cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000438 	.word	0x20000438
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bb50 	.word	0x0800bb50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000043c 	.word	0x2000043c
 800021c:	0800bb50 	.word	0x0800bb50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__gedf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__ledf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpdf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpdf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800065c:	bf18      	it	ne
 800065e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000662:	d01b      	beq.n	800069c <__cmpdf2+0x54>
 8000664:	b001      	add	sp, #4
 8000666:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800066a:	bf0c      	ite	eq
 800066c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000670:	ea91 0f03 	teqne	r1, r3
 8000674:	bf02      	ittt	eq
 8000676:	ea90 0f02 	teqeq	r0, r2
 800067a:	2000      	moveq	r0, #0
 800067c:	4770      	bxeq	lr
 800067e:	f110 0f00 	cmn.w	r0, #0
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf58      	it	pl
 8000688:	4299      	cmppl	r1, r3
 800068a:	bf08      	it	eq
 800068c:	4290      	cmpeq	r0, r2
 800068e:	bf2c      	ite	cs
 8000690:	17d8      	asrcs	r0, r3, #31
 8000692:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000696:	f040 0001 	orr.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d102      	bne.n	80006ac <__cmpdf2+0x64>
 80006a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006aa:	d107      	bne.n	80006bc <__cmpdf2+0x74>
 80006ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006b4:	d1d6      	bne.n	8000664 <__cmpdf2+0x1c>
 80006b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ba:	d0d3      	beq.n	8000664 <__cmpdf2+0x1c>
 80006bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdrcmple>:
 80006c4:	4684      	mov	ip, r0
 80006c6:	4610      	mov	r0, r2
 80006c8:	4662      	mov	r2, ip
 80006ca:	468c      	mov	ip, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4663      	mov	r3, ip
 80006d0:	e000      	b.n	80006d4 <__aeabi_cdcmpeq>
 80006d2:	bf00      	nop

080006d4 <__aeabi_cdcmpeq>:
 80006d4:	b501      	push	{r0, lr}
 80006d6:	f7ff ffb7 	bl	8000648 <__cmpdf2>
 80006da:	2800      	cmp	r0, #0
 80006dc:	bf48      	it	mi
 80006de:	f110 0f00 	cmnmi.w	r0, #0
 80006e2:	bd01      	pop	{r0, pc}

080006e4 <__aeabi_dcmpeq>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff fff4 	bl	80006d4 <__aeabi_cdcmpeq>
 80006ec:	bf0c      	ite	eq
 80006ee:	2001      	moveq	r0, #1
 80006f0:	2000      	movne	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_dcmplt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffea 	bl	80006d4 <__aeabi_cdcmpeq>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_dcmple>:
 800070c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000710:	f7ff ffe0 	bl	80006d4 <__aeabi_cdcmpeq>
 8000714:	bf94      	ite	ls
 8000716:	2001      	movls	r0, #1
 8000718:	2000      	movhi	r0, #0
 800071a:	f85d fb08 	ldr.w	pc, [sp], #8
 800071e:	bf00      	nop

08000720 <__aeabi_dcmpge>:
 8000720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000724:	f7ff ffce 	bl	80006c4 <__aeabi_cdrcmple>
 8000728:	bf94      	ite	ls
 800072a:	2001      	movls	r0, #1
 800072c:	2000      	movhi	r0, #0
 800072e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000732:	bf00      	nop

08000734 <__aeabi_dcmpgt>:
 8000734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000738:	f7ff ffc4 	bl	80006c4 <__aeabi_cdrcmple>
 800073c:	bf34      	ite	cc
 800073e:	2001      	movcc	r0, #1
 8000740:	2000      	movcs	r0, #0
 8000742:	f85d fb08 	ldr.w	pc, [sp], #8
 8000746:	bf00      	nop

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b988 	b.w	8000a70 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f806 	bl	8000778 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__udivmoddi4>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	9d08      	ldr	r5, [sp, #32]
 800077e:	468e      	mov	lr, r1
 8000780:	4604      	mov	r4, r0
 8000782:	4688      	mov	r8, r1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d14a      	bne.n	800081e <__udivmoddi4+0xa6>
 8000788:	428a      	cmp	r2, r1
 800078a:	4617      	mov	r7, r2
 800078c:	d962      	bls.n	8000854 <__udivmoddi4+0xdc>
 800078e:	fab2 f682 	clz	r6, r2
 8000792:	b14e      	cbz	r6, 80007a8 <__udivmoddi4+0x30>
 8000794:	f1c6 0320 	rsb	r3, r6, #32
 8000798:	fa01 f806 	lsl.w	r8, r1, r6
 800079c:	fa20 f303 	lsr.w	r3, r0, r3
 80007a0:	40b7      	lsls	r7, r6
 80007a2:	ea43 0808 	orr.w	r8, r3, r8
 80007a6:	40b4      	lsls	r4, r6
 80007a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ac:	fa1f fc87 	uxth.w	ip, r7
 80007b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007b4:	0c23      	lsrs	r3, r4, #16
 80007b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007be:	fb01 f20c 	mul.w	r2, r1, ip
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d909      	bls.n	80007da <__udivmoddi4+0x62>
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007cc:	f080 80ea 	bcs.w	80009a4 <__udivmoddi4+0x22c>
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f240 80e7 	bls.w	80009a4 <__udivmoddi4+0x22c>
 80007d6:	3902      	subs	r1, #2
 80007d8:	443b      	add	r3, r7
 80007da:	1a9a      	subs	r2, r3, r2
 80007dc:	b2a3      	uxth	r3, r4
 80007de:	fbb2 f0fe 	udiv	r0, r2, lr
 80007e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ee:	459c      	cmp	ip, r3
 80007f0:	d909      	bls.n	8000806 <__udivmoddi4+0x8e>
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007f8:	f080 80d6 	bcs.w	80009a8 <__udivmoddi4+0x230>
 80007fc:	459c      	cmp	ip, r3
 80007fe:	f240 80d3 	bls.w	80009a8 <__udivmoddi4+0x230>
 8000802:	443b      	add	r3, r7
 8000804:	3802      	subs	r0, #2
 8000806:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800080a:	eba3 030c 	sub.w	r3, r3, ip
 800080e:	2100      	movs	r1, #0
 8000810:	b11d      	cbz	r5, 800081a <__udivmoddi4+0xa2>
 8000812:	40f3      	lsrs	r3, r6
 8000814:	2200      	movs	r2, #0
 8000816:	e9c5 3200 	strd	r3, r2, [r5]
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081e:	428b      	cmp	r3, r1
 8000820:	d905      	bls.n	800082e <__udivmoddi4+0xb6>
 8000822:	b10d      	cbz	r5, 8000828 <__udivmoddi4+0xb0>
 8000824:	e9c5 0100 	strd	r0, r1, [r5]
 8000828:	2100      	movs	r1, #0
 800082a:	4608      	mov	r0, r1
 800082c:	e7f5      	b.n	800081a <__udivmoddi4+0xa2>
 800082e:	fab3 f183 	clz	r1, r3
 8000832:	2900      	cmp	r1, #0
 8000834:	d146      	bne.n	80008c4 <__udivmoddi4+0x14c>
 8000836:	4573      	cmp	r3, lr
 8000838:	d302      	bcc.n	8000840 <__udivmoddi4+0xc8>
 800083a:	4282      	cmp	r2, r0
 800083c:	f200 8105 	bhi.w	8000a4a <__udivmoddi4+0x2d2>
 8000840:	1a84      	subs	r4, r0, r2
 8000842:	eb6e 0203 	sbc.w	r2, lr, r3
 8000846:	2001      	movs	r0, #1
 8000848:	4690      	mov	r8, r2
 800084a:	2d00      	cmp	r5, #0
 800084c:	d0e5      	beq.n	800081a <__udivmoddi4+0xa2>
 800084e:	e9c5 4800 	strd	r4, r8, [r5]
 8000852:	e7e2      	b.n	800081a <__udivmoddi4+0xa2>
 8000854:	2a00      	cmp	r2, #0
 8000856:	f000 8090 	beq.w	800097a <__udivmoddi4+0x202>
 800085a:	fab2 f682 	clz	r6, r2
 800085e:	2e00      	cmp	r6, #0
 8000860:	f040 80a4 	bne.w	80009ac <__udivmoddi4+0x234>
 8000864:	1a8a      	subs	r2, r1, r2
 8000866:	0c03      	lsrs	r3, r0, #16
 8000868:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086c:	b280      	uxth	r0, r0
 800086e:	b2bc      	uxth	r4, r7
 8000870:	2101      	movs	r1, #1
 8000872:	fbb2 fcfe 	udiv	ip, r2, lr
 8000876:	fb0e 221c 	mls	r2, lr, ip, r2
 800087a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800087e:	fb04 f20c 	mul.w	r2, r4, ip
 8000882:	429a      	cmp	r2, r3
 8000884:	d907      	bls.n	8000896 <__udivmoddi4+0x11e>
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	f10c 38ff 	add.w	r8, ip, #4294967295
 800088c:	d202      	bcs.n	8000894 <__udivmoddi4+0x11c>
 800088e:	429a      	cmp	r2, r3
 8000890:	f200 80e0 	bhi.w	8000a54 <__udivmoddi4+0x2dc>
 8000894:	46c4      	mov	ip, r8
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	fbb3 f2fe 	udiv	r2, r3, lr
 800089c:	fb0e 3312 	mls	r3, lr, r2, r3
 80008a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008a4:	fb02 f404 	mul.w	r4, r2, r4
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d907      	bls.n	80008bc <__udivmoddi4+0x144>
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80008b2:	d202      	bcs.n	80008ba <__udivmoddi4+0x142>
 80008b4:	429c      	cmp	r4, r3
 80008b6:	f200 80ca 	bhi.w	8000a4e <__udivmoddi4+0x2d6>
 80008ba:	4602      	mov	r2, r0
 80008bc:	1b1b      	subs	r3, r3, r4
 80008be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008c2:	e7a5      	b.n	8000810 <__udivmoddi4+0x98>
 80008c4:	f1c1 0620 	rsb	r6, r1, #32
 80008c8:	408b      	lsls	r3, r1
 80008ca:	fa22 f706 	lsr.w	r7, r2, r6
 80008ce:	431f      	orrs	r7, r3
 80008d0:	fa0e f401 	lsl.w	r4, lr, r1
 80008d4:	fa20 f306 	lsr.w	r3, r0, r6
 80008d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80008dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008e0:	4323      	orrs	r3, r4
 80008e2:	fa00 f801 	lsl.w	r8, r0, r1
 80008e6:	fa1f fc87 	uxth.w	ip, r7
 80008ea:	fbbe f0f9 	udiv	r0, lr, r9
 80008ee:	0c1c      	lsrs	r4, r3, #16
 80008f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x1a0>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f100 3aff 	add.w	sl, r0, #4294967295
 800090a:	f080 809c 	bcs.w	8000a46 <__udivmoddi4+0x2ce>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f240 8099 	bls.w	8000a46 <__udivmoddi4+0x2ce>
 8000914:	3802      	subs	r0, #2
 8000916:	443c      	add	r4, r7
 8000918:	eba4 040e 	sub.w	r4, r4, lr
 800091c:	fa1f fe83 	uxth.w	lr, r3
 8000920:	fbb4 f3f9 	udiv	r3, r4, r9
 8000924:	fb09 4413 	mls	r4, r9, r3, r4
 8000928:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800092c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000930:	45a4      	cmp	ip, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x1ce>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f103 3eff 	add.w	lr, r3, #4294967295
 800093a:	f080 8082 	bcs.w	8000a42 <__udivmoddi4+0x2ca>
 800093e:	45a4      	cmp	ip, r4
 8000940:	d97f      	bls.n	8000a42 <__udivmoddi4+0x2ca>
 8000942:	3b02      	subs	r3, #2
 8000944:	443c      	add	r4, r7
 8000946:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800094a:	eba4 040c 	sub.w	r4, r4, ip
 800094e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000952:	4564      	cmp	r4, ip
 8000954:	4673      	mov	r3, lr
 8000956:	46e1      	mov	r9, ip
 8000958:	d362      	bcc.n	8000a20 <__udivmoddi4+0x2a8>
 800095a:	d05f      	beq.n	8000a1c <__udivmoddi4+0x2a4>
 800095c:	b15d      	cbz	r5, 8000976 <__udivmoddi4+0x1fe>
 800095e:	ebb8 0203 	subs.w	r2, r8, r3
 8000962:	eb64 0409 	sbc.w	r4, r4, r9
 8000966:	fa04 f606 	lsl.w	r6, r4, r6
 800096a:	fa22 f301 	lsr.w	r3, r2, r1
 800096e:	431e      	orrs	r6, r3
 8000970:	40cc      	lsrs	r4, r1
 8000972:	e9c5 6400 	strd	r6, r4, [r5]
 8000976:	2100      	movs	r1, #0
 8000978:	e74f      	b.n	800081a <__udivmoddi4+0xa2>
 800097a:	fbb1 fcf2 	udiv	ip, r1, r2
 800097e:	0c01      	lsrs	r1, r0, #16
 8000980:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000984:	b280      	uxth	r0, r0
 8000986:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800098a:	463b      	mov	r3, r7
 800098c:	4638      	mov	r0, r7
 800098e:	463c      	mov	r4, r7
 8000990:	46b8      	mov	r8, r7
 8000992:	46be      	mov	lr, r7
 8000994:	2620      	movs	r6, #32
 8000996:	fbb1 f1f7 	udiv	r1, r1, r7
 800099a:	eba2 0208 	sub.w	r2, r2, r8
 800099e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009a2:	e766      	b.n	8000872 <__udivmoddi4+0xfa>
 80009a4:	4601      	mov	r1, r0
 80009a6:	e718      	b.n	80007da <__udivmoddi4+0x62>
 80009a8:	4610      	mov	r0, r2
 80009aa:	e72c      	b.n	8000806 <__udivmoddi4+0x8e>
 80009ac:	f1c6 0220 	rsb	r2, r6, #32
 80009b0:	fa2e f302 	lsr.w	r3, lr, r2
 80009b4:	40b7      	lsls	r7, r6
 80009b6:	40b1      	lsls	r1, r6
 80009b8:	fa20 f202 	lsr.w	r2, r0, r2
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	430a      	orrs	r2, r1
 80009c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009c6:	b2bc      	uxth	r4, r7
 80009c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009cc:	0c11      	lsrs	r1, r2, #16
 80009ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d2:	fb08 f904 	mul.w	r9, r8, r4
 80009d6:	40b0      	lsls	r0, r6
 80009d8:	4589      	cmp	r9, r1
 80009da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009de:	b280      	uxth	r0, r0
 80009e0:	d93e      	bls.n	8000a60 <__udivmoddi4+0x2e8>
 80009e2:	1879      	adds	r1, r7, r1
 80009e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009e8:	d201      	bcs.n	80009ee <__udivmoddi4+0x276>
 80009ea:	4589      	cmp	r9, r1
 80009ec:	d81f      	bhi.n	8000a2e <__udivmoddi4+0x2b6>
 80009ee:	eba1 0109 	sub.w	r1, r1, r9
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fb09 f804 	mul.w	r8, r9, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	b292      	uxth	r2, r2
 8000a00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a04:	4542      	cmp	r2, r8
 8000a06:	d229      	bcs.n	8000a5c <__udivmoddi4+0x2e4>
 8000a08:	18ba      	adds	r2, r7, r2
 8000a0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a0e:	d2c4      	bcs.n	800099a <__udivmoddi4+0x222>
 8000a10:	4542      	cmp	r2, r8
 8000a12:	d2c2      	bcs.n	800099a <__udivmoddi4+0x222>
 8000a14:	f1a9 0102 	sub.w	r1, r9, #2
 8000a18:	443a      	add	r2, r7
 8000a1a:	e7be      	b.n	800099a <__udivmoddi4+0x222>
 8000a1c:	45f0      	cmp	r8, lr
 8000a1e:	d29d      	bcs.n	800095c <__udivmoddi4+0x1e4>
 8000a20:	ebbe 0302 	subs.w	r3, lr, r2
 8000a24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a28:	3801      	subs	r0, #1
 8000a2a:	46e1      	mov	r9, ip
 8000a2c:	e796      	b.n	800095c <__udivmoddi4+0x1e4>
 8000a2e:	eba7 0909 	sub.w	r9, r7, r9
 8000a32:	4449      	add	r1, r9
 8000a34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a3c:	fb09 f804 	mul.w	r8, r9, r4
 8000a40:	e7db      	b.n	80009fa <__udivmoddi4+0x282>
 8000a42:	4673      	mov	r3, lr
 8000a44:	e77f      	b.n	8000946 <__udivmoddi4+0x1ce>
 8000a46:	4650      	mov	r0, sl
 8000a48:	e766      	b.n	8000918 <__udivmoddi4+0x1a0>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e6fd      	b.n	800084a <__udivmoddi4+0xd2>
 8000a4e:	443b      	add	r3, r7
 8000a50:	3a02      	subs	r2, #2
 8000a52:	e733      	b.n	80008bc <__udivmoddi4+0x144>
 8000a54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a58:	443b      	add	r3, r7
 8000a5a:	e71c      	b.n	8000896 <__udivmoddi4+0x11e>
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	e79c      	b.n	800099a <__udivmoddi4+0x222>
 8000a60:	eba1 0109 	sub.w	r1, r1, r9
 8000a64:	46c4      	mov	ip, r8
 8000a66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6a:	fb09 f804 	mul.w	r8, r9, r4
 8000a6e:	e7c4      	b.n	80009fa <__udivmoddi4+0x282>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	@ (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f004 ff4e 	bl	8005918 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f00a fbe5 	bl	800b270 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f001 fa65 	bl	8001f74 <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	20000434 	.word	0x20000434
  ldr r2, =_sidata
 8000ab8:	0800c638 	.word	0x0800c638
  ldr r2, =_sbss
 8000abc:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 8000ac0:	20001cac 	.word	0x20001cac

08000ac4 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <BusFault_Handler>
	...

08000ac8 <runSingleMotorV2>:

	return;
}


void runSingleMotorV2(float newSpeed){
 8000ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * The main purpose of this function is to make sure that the speed demanded falls within the actual range at which the motor
	 * is capable of operating in.
	 */

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	 uart_debug_print("Checking speed...\r\n");
 8000aca:	48ba      	ldr	r0, [pc, #744]	@ (8000db4 <runSingleMotorV2+0x2ec>)
void runSingleMotorV2(float newSpeed){
 8000acc:	ed2d 8b04 	vpush	{d8-d9}
 8000ad0:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 8000ad4:	f004 fe4c 	bl	8005770 <uart_debug_print>
	////////////////////////////////////////////////////////////////////////////////////////////////////////

    //Deadzone for small speeds
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000ad8:	eddf 7ab7 	vldr	s15, [pc, #732]	@ 8000db8 <runSingleMotorV2+0x2f0>
 8000adc:	eef0 8ac8 	vabs.f32	s17, s16
 8000ae0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae8:	f100 80dc 	bmi.w	8000ca4 <runSingleMotorV2+0x1dc>
    	targetSpeed = 0.0f;
    }

    // Check for out of bound setpoint
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000aec:	eddf 7ab3 	vldr	s15, [pc, #716]	@ 8000dbc <runSingleMotorV2+0x2f4>
 8000af0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af8:	f300 8122 	bgt.w	8000d40 <runSingleMotorV2+0x278>
	 * due to how the motor is being operated for our teams rover, and is highly project based. This can also be implemented in software,
	 * however it will be integrated in the firmware for this 2025 Rover.
	 */

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	 uart_debug_print("Checking clipping...\r\n");
 8000afc:	48b0      	ldr	r0, [pc, #704]	@ (8000dc0 <runSingleMotorV2+0x2f8>)
	////////////////////////////////////////////////////////////////////////////////////////////////////////

	float delta = currentSpeedSetpoint - g_lastCommandedSpeed;
 8000afe:	4db1      	ldr	r5, [pc, #708]	@ (8000dc4 <runSingleMotorV2+0x2fc>)
	 uart_debug_print("Checking clipping...\r\n");
 8000b00:	f004 fe36 	bl	8005770 <uart_debug_print>

	if (fabsf(delta) > DELTA_SPEED_THRESH) {
 8000b04:	4bb0      	ldr	r3, [pc, #704]	@ (8000dc8 <runSingleMotorV2+0x300>)
	float delta = currentSpeedSetpoint - g_lastCommandedSpeed;
 8000b06:	ed95 7a00 	vldr	s14, [r5]
	if (fabsf(delta) > DELTA_SPEED_THRESH) {
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	ee07 3a90 	vmov	s15, r3
	float delta = currentSpeedSetpoint - g_lastCommandedSpeed;
 8000b10:	ee78 6a47 	vsub.f32	s13, s16, s14
	if (fabsf(delta) > DELTA_SPEED_THRESH) {
 8000b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b18:	eeb0 6ae6 	vabs.f32	s12, s13
 8000b1c:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8000b20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b24:	dd52      	ble.n	8000bcc <runSingleMotorV2+0x104>
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 8000b26:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8000b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b2e:	f340 8111 	ble.w	8000d54 <runSingleMotorV2+0x28c>
 8000b32:	ee37 8a27 	vadd.f32	s16, s14, s15
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000b36:	ed9f 9aa0 	vldr	s18, [pc, #640]	@ 8000db8 <runSingleMotorV2+0x2f0>
	 uart_debug_print("Checking speed...\r\n");
 8000b3a:	489e      	ldr	r0, [pc, #632]	@ (8000db4 <runSingleMotorV2+0x2ec>)
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 8000b3c:	ed85 8a00 	vstr	s16, [r5]
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000b40:	eef0 8ac8 	vabs.f32	s17, s16
	 uart_debug_print("Checking speed...\r\n");
 8000b44:	f004 fe14 	bl	8005770 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000b48:	eef4 8ac9 	vcmpe.f32	s17, s18
 8000b4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b50:	d448      	bmi.n	8000be4 <runSingleMotorV2+0x11c>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000b52:	eddf 9a9a 	vldr	s19, [pc, #616]	@ 8000dbc <runSingleMotorV2+0x2f4>
 8000b56:	eef4 8ae9 	vcmpe.f32	s17, s19
 8000b5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b5e:	f340 80a6 	ble.w	8000cae <runSingleMotorV2+0x1e6>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000b62:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b6a:	f340 8100 	ble.w	8000d6e <runSingleMotorV2+0x2a6>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000b6e:	f001 fd93 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    // Convert from RPM to rad/s
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;

    // If the magnitude is below threshold, treat as 0 for more stable math
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000b72:	eef0 7ac0 	vabs.f32	s15, s0
 8000b76:	eef4 7ac9 	vcmpe.f32	s15, s18
 8000b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7e:	f140 8103 	bpl.w	8000d88 <runSingleMotorV2+0x2c0>
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000b82:	f001 fd89 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000b86:	4891      	ldr	r0, [pc, #580]	@ (8000dcc <runSingleMotorV2+0x304>)
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000b88:	4e91      	ldr	r6, [pc, #580]	@ (8000dd0 <runSingleMotorV2+0x308>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000b8a:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000b8e:	f004 fdef 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000b92:	4890      	ldr	r0, [pc, #576]	@ (8000dd4 <runSingleMotorV2+0x30c>)
 8000b94:	f44f 6148 	mov.w	r1, #3200	@ 0xc80
 8000b98:	f004 fdea 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000b9c:	488e      	ldr	r0, [pc, #568]	@ (8000dd8 <runSingleMotorV2+0x310>)
 8000b9e:	2164      	movs	r1, #100	@ 0x64
 8000ba0:	f004 fde6 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000ba4:	488d      	ldr	r0, [pc, #564]	@ (8000ddc <runSingleMotorV2+0x314>)
 8000ba6:	6831      	ldr	r1, [r6, #0]
 8000ba8:	f004 fde2 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8000bac:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000bb0:	488b      	ldr	r0, [pc, #556]	@ (8000de0 <runSingleMotorV2+0x318>)
 8000bb2:	ee17 1a90 	vmov	r1, s15
 8000bb6:	f004 fddb 	bl	8005770 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8000bba:	2064      	movs	r0, #100	@ 0x64
 8000bbc:	eeb0 0a69 	vmov.f32	s0, s19
 8000bc0:	f001 fd62 	bl	8002688 <MC_ProgramSpeedRampMotor1_F>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000bc4:	eeb0 8a69 	vmov.f32	s16, s19
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	e065      	b.n	8000c98 <runSingleMotorV2+0x1d0>
	 uart_debug_print("Checking speed...\r\n");
 8000bcc:	4879      	ldr	r0, [pc, #484]	@ (8000db4 <runSingleMotorV2+0x2ec>)
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 8000bce:	ed85 8a00 	vstr	s16, [r5]
	 uart_debug_print("Checking speed...\r\n");
 8000bd2:	f004 fdcd 	bl	8005770 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000bd6:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8000db8 <runSingleMotorV2+0x2f0>
 8000bda:	eef4 8ae7 	vcmpe.f32	s17, s15
 8000bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be2:	d564      	bpl.n	8000cae <runSingleMotorV2+0x1e6>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000be4:	f001 fd58 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000be8:	eddf 7a73 	vldr	s15, [pc, #460]	@ 8000db8 <runSingleMotorV2+0x2f0>
 8000bec:	eeb0 7ac0 	vabs.f32	s14, s0
 8000bf0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf8:	d477      	bmi.n	8000cea <runSingleMotorV2+0x222>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000bfa:	eddf 7a7a 	vldr	s15, [pc, #488]	@ 8000de4 <runSingleMotorV2+0x31c>
    // Time (seconds) = delta_omega / alpha
    float deltaW = fabsf(w2 - w1);
    float timeSec = deltaW / alpha;

    // Convert to milliseconds
    float timeMs = timeSec * 1000.0f;
 8000bfe:	ed9f 7a7a 	vldr	s14, [pc, #488]	@ 8000de8 <runSingleMotorV2+0x320>
    	targetSpeed = 0.0f;
 8000c02:	ed9f 8a7a 	vldr	s16, [pc, #488]	@ 8000dec <runSingleMotorV2+0x324>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000c06:	ee20 0a27 	vmul.f32	s0, s0, s15
    float timeMs = timeSec * 1000.0f;
 8000c0a:	2700      	movs	r7, #0
    float deltaW = fabsf(w2 - w1);
 8000c0c:	eef0 7ac0 	vabs.f32	s15, s0
    float timeMs = timeSec * 1000.0f;
 8000c10:	ee27 7a87 	vmul.f32	s14, s15, s14

    // For safety, clamp time to at least 200 ms or so
    float tMin = isStartup ? RAMP_MIN_MS_STARTUP : RAMP_MIN_MS_RUN;
    if (timeMs < tMin)   timeMs = tMin;
 8000c14:	eddf 6a76 	vldr	s13, [pc, #472]	@ 8000df0 <runSingleMotorV2+0x328>
 8000c18:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c20:	f100 80a2 	bmi.w	8000d68 <runSingleMotorV2+0x2a0>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000c24:	eddf 6a73 	vldr	s13, [pc, #460]	@ 8000df4 <runSingleMotorV2+0x32c>
 8000c28:	eef4 7ae6 	vcmpe.f32	s15, s13
 8000c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c30:	f300 8096 	bgt.w	8000d60 <runSingleMotorV2+0x298>
    return (uint16_t)(timeMs + 0.5f);
 8000c34:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000c38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000c3c:	eebc 7ac7 	vcvt.u32.f32	s14, s14
 8000c40:	ee17 3a10 	vmov	r3, s14
 8000c44:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c46:	4626      	mov	r6, r4
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000c48:	f001 fd26 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000c4c:	485f      	ldr	r0, [pc, #380]	@ (8000dcc <runSingleMotorV2+0x304>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000c4e:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000c52:	f004 fd8d 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000c56:	485f      	ldr	r0, [pc, #380]	@ (8000dd4 <runSingleMotorV2+0x30c>)
 8000c58:	4639      	mov	r1, r7
 8000c5a:	f004 fd89 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c5e:	4631      	mov	r1, r6
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000c60:	4e5b      	ldr	r6, [pc, #364]	@ (8000dd0 <runSingleMotorV2+0x308>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c62:	485d      	ldr	r0, [pc, #372]	@ (8000dd8 <runSingleMotorV2+0x310>)
 8000c64:	f004 fd84 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000c68:	485c      	ldr	r0, [pc, #368]	@ (8000ddc <runSingleMotorV2+0x314>)
 8000c6a:	6831      	ldr	r1, [r6, #0]
 8000c6c:	f004 fd80 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8000c70:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8000c74:	485a      	ldr	r0, [pc, #360]	@ (8000de0 <runSingleMotorV2+0x318>)
 8000c76:	ee17 1a90 	vmov	r1, s15
 8000c7a:	f004 fd79 	bl	8005770 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8000c7e:	4620      	mov	r0, r4
 8000c80:	eeb0 0a48 	vmov.f32	s0, s16
 8000c84:	f001 fd00 	bl	8002688 <MC_ProgramSpeedRampMotor1_F>
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000c88:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000c8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c90:	bfcc      	ite	gt
 8000c92:	2301      	movgt	r3, #1
 8000c94:	f04f 33ff 	movle.w	r3, #4294967295
    g_lastCommandedSpeed = speedCmd;
 8000c98:	ed85 8a00 	vstr	s16, [r5]
}
 8000c9c:	ecbd 8b04 	vpop	{d8-d9}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000ca0:	6033      	str	r3, [r6, #0]
}
 8000ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ca4:	eddf 8a51 	vldr	s17, [pc, #324]	@ 8000dec <runSingleMotorV2+0x324>
    	targetSpeed = 0.0f;
 8000ca8:	eeb0 8a68 	vmov.f32	s16, s17
 8000cac:	e726      	b.n	8000afc <runSingleMotorV2+0x34>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000cae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000cb2:	ee17 7a90 	vmov	r7, s15
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000cb6:	f001 fcef 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000cba:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8000db8 <runSingleMotorV2+0x2f0>
 8000cbe:	eeb0 7ac0 	vabs.f32	s14, s0
 8000cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cca:	d44d      	bmi.n	8000d68 <runSingleMotorV2+0x2a0>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000ccc:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8000de4 <runSingleMotorV2+0x31c>
 8000cd0:	ee68 7a07 	vmul.f32	s15, s16, s14
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000cd4:	ee20 0a07 	vmul.f32	s0, s0, s14
    float deltaW = fabsf(w2 - w1);
 8000cd8:	ee77 7ac0 	vsub.f32	s15, s15, s0
    float timeMs = timeSec * 1000.0f;
 8000cdc:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8000de8 <runSingleMotorV2+0x320>
    float deltaW = fabsf(w2 - w1);
 8000ce0:	eef0 7ae7 	vabs.f32	s15, s15
    float timeMs = timeSec * 1000.0f;
 8000ce4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ce8:	e794      	b.n	8000c14 <runSingleMotorV2+0x14c>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000cea:	ed9f 8a40 	vldr	s16, [pc, #256]	@ 8000dec <runSingleMotorV2+0x324>
 8000cee:	2400      	movs	r4, #0
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000cf0:	f001 fcd2 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000cf4:	4835      	ldr	r0, [pc, #212]	@ (8000dcc <runSingleMotorV2+0x304>)
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000cf6:	4e36      	ldr	r6, [pc, #216]	@ (8000dd0 <runSingleMotorV2+0x308>)
	float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000cf8:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 8000cfc:	f004 fd38 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000d00:	4834      	ldr	r0, [pc, #208]	@ (8000dd4 <runSingleMotorV2+0x30c>)
 8000d02:	4621      	mov	r1, r4
 8000d04:	f004 fd34 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000d08:	4833      	ldr	r0, [pc, #204]	@ (8000dd8 <runSingleMotorV2+0x310>)
 8000d0a:	2164      	movs	r1, #100	@ 0x64
 8000d0c:	f004 fd30 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000d10:	4832      	ldr	r0, [pc, #200]	@ (8000ddc <runSingleMotorV2+0x314>)
 8000d12:	6831      	ldr	r1, [r6, #0]
 8000d14:	f004 fd2c 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current actual speed is %d\r\n", (int)currentSpeed);
 8000d18:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8000d1c:	4830      	ldr	r0, [pc, #192]	@ (8000de0 <runSingleMotorV2+0x318>)
 8000d1e:	ee17 1a90 	vmov	r1, s15
 8000d22:	f004 fd25 	bl	8005770 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8000d26:	eeb0 0a48 	vmov.f32	s0, s16
 8000d2a:	2064      	movs	r0, #100	@ 0x64
 8000d2c:	f001 fcac 	bl	8002688 <MC_ProgramSpeedRampMotor1_F>
    g_lastCommandedSpeed = speedCmd;
 8000d30:	ed85 8a00 	vstr	s16, [r5]
}
 8000d34:	ecbd 8b04 	vpop	{d8-d9}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	6033      	str	r3, [r6, #0]
}
 8000d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000d40:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	eef0 8a67 	vmov.f32	s17, s15
 8000d4c:	dcac      	bgt.n	8000ca8 <runSingleMotorV2+0x1e0>
 8000d4e:	ed9f 8a2a 	vldr	s16, [pc, #168]	@ 8000df8 <runSingleMotorV2+0x330>
 8000d52:	e6d3      	b.n	8000afc <runSingleMotorV2+0x34>
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 8000d54:	425b      	negs	r3, r3
 8000d56:	ee07 3a90 	vmov	s15, r3
 8000d5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d5e:	e6e8      	b.n	8000b32 <runSingleMotorV2+0x6a>
 8000d60:	f241 3688 	movw	r6, #5000	@ 0x1388
 8000d64:	4634      	mov	r4, r6
 8000d66:	e76f      	b.n	8000c48 <runSingleMotorV2+0x180>
 8000d68:	2664      	movs	r6, #100	@ 0x64
 8000d6a:	4634      	mov	r4, r6
 8000d6c:	e76c      	b.n	8000c48 <runSingleMotorV2+0x180>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, false);
 8000d6e:	f001 fc93 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000d72:	eef0 7ac0 	vabs.f32	s15, s0
 8000d76:	eef4 7ac9 	vcmpe.f32	s15, s18
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d7e:	d50e      	bpl.n	8000d9e <runSingleMotorV2+0x2d6>
 8000d80:	4c1e      	ldr	r4, [pc, #120]	@ (8000dfc <runSingleMotorV2+0x334>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000d82:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8000df8 <runSingleMotorV2+0x330>
 8000d86:	e7b3      	b.n	8000cf0 <runSingleMotorV2+0x228>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d88:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000de4 <runSingleMotorV2+0x31c>
 8000d8c:	eddf 7a1c 	vldr	s15, [pc, #112]	@ 8000e00 <runSingleMotorV2+0x338>
 8000d90:	ee20 0a07 	vmul.f32	s0, s0, s14
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000d94:	eeb0 8a69 	vmov.f32	s16, s19
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d98:	f44f 6748 	mov.w	r7, #3200	@ 0xc80
 8000d9c:	e79c      	b.n	8000cd8 <runSingleMotorV2+0x210>
 8000d9e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8000de4 <runSingleMotorV2+0x31c>
 8000da2:	4f16      	ldr	r7, [pc, #88]	@ (8000dfc <runSingleMotorV2+0x334>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000da4:	ed9f 8a14 	vldr	s16, [pc, #80]	@ 8000df8 <runSingleMotorV2+0x330>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000da8:	ee20 0a27 	vmul.f32	s0, s0, s15
 8000dac:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8000e04 <runSingleMotorV2+0x33c>
 8000db0:	e792      	b.n	8000cd8 <runSingleMotorV2+0x210>
 8000db2:	bf00      	nop
 8000db4:	0800bb68 	.word	0x0800bb68
 8000db8:	42480000 	.word	0x42480000
 8000dbc:	45480000 	.word	0x45480000
 8000dc0:	0800bb7c 	.word	0x0800bb7c
 8000dc4:	20000460 	.word	0x20000460
 8000dc8:	20000000 	.word	0x20000000
 8000dcc:	0800bb94 	.word	0x0800bb94
 8000dd0:	2000045c 	.word	0x2000045c
 8000dd4:	0800bbd4 	.word	0x0800bbd4
 8000dd8:	0800bbf0 	.word	0x0800bbf0
 8000ddc:	0800bc10 	.word	0x0800bc10
 8000de0:	0800bc2c 	.word	0x0800bc2c
 8000de4:	3dd67751 	.word	0x3dd67751
 8000de8:	3d29930c 	.word	0x3d29930c
 8000dec:	00000000 	.word	0x00000000
 8000df0:	4516f759 	.word	0x4516f759
 8000df4:	47ebe27a 	.word	0x47ebe27a
 8000df8:	c5480000 	.word	0xc5480000
 8000dfc:	fffff380 	.word	0xfffff380
 8000e00:	43a78d37 	.word	0x43a78d37
 8000e04:	c3a78d37 	.word	0xc3a78d37

08000e08 <IdleSingleMotor>:
void IdleSingleMotor(float newSpeed){
 8000e08:	b538      	push	{r3, r4, r5, lr}
	 uart_debug_print("Checking speed...\r\n");
 8000e0a:	4865      	ldr	r0, [pc, #404]	@ (8000fa0 <IdleSingleMotor+0x198>)
void IdleSingleMotor(float newSpeed){
 8000e0c:	ed2d 8b02 	vpush	{d8}
 8000e10:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 8000e14:	f004 fcac 	bl	8005770 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000e18:	ed9f 7a62 	vldr	s14, [pc, #392]	@ 8000fa4 <IdleSingleMotor+0x19c>
 8000e1c:	eef0 7ac8 	vabs.f32	s15, s16
 8000e20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e28:	d506      	bpl.n	8000e38 <IdleSingleMotor+0x30>
}
 8000e2a:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 8000e2e:	485e      	ldr	r0, [pc, #376]	@ (8000fa8 <IdleSingleMotor+0x1a0>)
}
 8000e30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 8000e34:	f004 bc9c 	b.w	8005770 <uart_debug_print>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000e38:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8000fac <IdleSingleMotor+0x1a4>
 8000e3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e44:	dd08      	ble.n	8000e58 <IdleSingleMotor+0x50>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000e46:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e4e:	f340 8099 	ble.w	8000f84 <IdleSingleMotor+0x17c>
 8000e52:	eeb0 8a47 	vmov.f32	s16, s14
	if (fabsf(speedCmd) < 0.001){
 8000e56:	e00a      	b.n	8000e6e <IdleSingleMotor+0x66>
 8000e58:	ee17 0a90 	vmov	r0, s15
 8000e5c:	f7ff fb94 	bl	8000588 <__aeabi_f2d>
 8000e60:	a34d      	add	r3, pc, #308	@ (adr r3, 8000f98 <IdleSingleMotor+0x190>)
 8000e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e66:	f7ff fc47 	bl	80006f8 <__aeabi_dcmplt>
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d1dd      	bne.n	8000e2a <IdleSingleMotor+0x22>
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8000e6e:	4d50      	ldr	r5, [pc, #320]	@ (8000fb0 <IdleSingleMotor+0x1a8>)
    uint32_t now = HAL_GetTick();
 8000e70:	f004 fda6 	bl	80059c0 <HAL_GetTick>
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8000e74:	682b      	ldr	r3, [r5, #0]
 8000e76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e7a:	1ac3      	subs	r3, r0, r3
 8000e7c:	4293      	cmp	r3, r2
    uint32_t now = HAL_GetTick();
 8000e7e:	4604      	mov	r4, r0
    if (now - s_startWd.firstTick > START_WD_WINDOW_MS) {
 8000e80:	d866      	bhi.n	8000f50 <IdleSingleMotor+0x148>
	 uart_debug_print("Amount of start attempts within 1s of eachother: %d\r\n", s_startWd.attempts);
 8000e82:	7929      	ldrb	r1, [r5, #4]
 8000e84:	484b      	ldr	r0, [pc, #300]	@ (8000fb4 <IdleSingleMotor+0x1ac>)
 8000e86:	f004 fc73 	bl	8005770 <uart_debug_print>
    if (++s_startWd.attempts >= START_WD_THRESHOLD) {
 8000e8a:	792b      	ldrb	r3, [r5, #4]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	b2db      	uxtb	r3, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	712b      	strb	r3, [r5, #4]
 8000e94:	d851      	bhi.n	8000f3a <IdleSingleMotor+0x132>
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), speedCmd, true);
 8000e96:	f001 fbff 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000e9a:	eddf 7a42 	vldr	s15, [pc, #264]	@ 8000fa4 <IdleSingleMotor+0x19c>
 8000e9e:	eeb0 7ac0 	vabs.f32	s14, s0
 8000ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eaa:	d419      	bmi.n	8000ee0 <IdleSingleMotor+0xd8>
    float deltaW = fabsf(w2 - w1);
 8000eac:	ee38 0a40 	vsub.f32	s0, s16, s0
 8000eb0:	ed9f 7a41 	vldr	s14, [pc, #260]	@ 8000fb8 <IdleSingleMotor+0x1b0>
    if (timeMs < tMin)   timeMs = tMin;
 8000eb4:	eddf 7a41 	vldr	s15, [pc, #260]	@ 8000fbc <IdleSingleMotor+0x1b4>
    float deltaW = fabsf(w2 - w1);
 8000eb8:	ee20 0a07 	vmul.f32	s0, s0, s14
 8000ebc:	eeb0 0ac0 	vabs.f32	s0, s0
    if (timeMs < tMin)   timeMs = tMin;
 8000ec0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000ec4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ec8:	d40a      	bmi.n	8000ee0 <IdleSingleMotor+0xd8>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000eca:	eddf 7a3d 	vldr	s15, [pc, #244]	@ 8000fc0 <IdleSingleMotor+0x1b8>
 8000ece:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8000ed2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed6:	dd48      	ble.n	8000f6a <IdleSingleMotor+0x162>
 8000ed8:	f241 3588 	movw	r5, #5000	@ 0x1388
 8000edc:	462c      	mov	r4, r5
 8000ede:	e001      	b.n	8000ee4 <IdleSingleMotor+0xdc>
 8000ee0:	25c8      	movs	r5, #200	@ 0xc8
 8000ee2:	462c      	mov	r4, r5
	 uart_debug_print("Motor will begin to ramp!\r\n");
 8000ee4:	4837      	ldr	r0, [pc, #220]	@ (8000fc4 <IdleSingleMotor+0x1bc>)
 8000ee6:	f004 fc43 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000eea:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000eee:	4836      	ldr	r0, [pc, #216]	@ (8000fc8 <IdleSingleMotor+0x1c0>)
 8000ef0:	ee17 1a90 	vmov	r1, s15
 8000ef4:	f004 fc3c 	bl	8005770 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000ef8:	4629      	mov	r1, r5
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000efa:	4d34      	ldr	r5, [pc, #208]	@ (8000fcc <IdleSingleMotor+0x1c4>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000efc:	4834      	ldr	r0, [pc, #208]	@ (8000fd0 <IdleSingleMotor+0x1c8>)
 8000efe:	f004 fc37 	bl	8005770 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000f02:	4834      	ldr	r0, [pc, #208]	@ (8000fd4 <IdleSingleMotor+0x1cc>)
 8000f04:	6829      	ldr	r1, [r5, #0]
 8000f06:	f004 fc33 	bl	8005770 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime); // Must set a setpoint before startup --> otherwise unpredictable behavior
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	eeb0 0a48 	vmov.f32	s0, s16
 8000f10:	f001 fbba 	bl	8002688 <MC_ProgramSpeedRampMotor1_F>
	if (!MC_StartMotor1()) {
 8000f14:	f001 fbac 	bl	8002670 <MC_StartMotor1>
 8000f18:	2800      	cmp	r0, #0
 8000f1a:	d036      	beq.n	8000f8a <IdleSingleMotor+0x182>
	g_lastCommandedSpeed = speedCmd;
 8000f1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000fd8 <IdleSingleMotor+0x1d0>)
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000f1e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	g_lastCommandedSpeed = speedCmd;
 8000f22:	ed83 8a00 	vstr	s16, [r3]
}
 8000f26:	ecbd 8b02 	vpop	{d8}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000f2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f2e:	bfcc      	ite	gt
 8000f30:	2201      	movgt	r2, #1
 8000f32:	f04f 32ff 	movle.w	r2, #4294967295
 8000f36:	602a      	str	r2, [r5, #0]
}
 8000f38:	bd38      	pop	{r3, r4, r5, pc}
        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000f3a:	4828      	ldr	r0, [pc, #160]	@ (8000fdc <IdleSingleMotor+0x1d4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f42:	f001 fc01 	bl	8002748 <MCI_FaultProcessing>
        s_startWd.attempts = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	712b      	strb	r3, [r5, #4]
}
 8000f4a:	ecbd 8b02 	vpop	{d8}
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
    	 uart_debug_print("Safe amount of time since last start!\r\n");
 8000f50:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <IdleSingleMotor+0x1d8>)
 8000f52:	f004 fc0d 	bl	8005770 <uart_debug_print>
    	 uart_debug_print("Amount of time since last start: %d \r\n", (int) now - s_startWd.firstTick );
 8000f56:	6829      	ldr	r1, [r5, #0]
 8000f58:	4822      	ldr	r0, [pc, #136]	@ (8000fe4 <IdleSingleMotor+0x1dc>)
 8000f5a:	1a61      	subs	r1, r4, r1
 8000f5c:	f004 fc08 	bl	8005770 <uart_debug_print>
        s_startWd.attempts  = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	4619      	mov	r1, r3
        s_startWd.firstTick = now; // sets last time start was issued
 8000f64:	602c      	str	r4, [r5, #0]
        s_startWd.attempts  = 0;
 8000f66:	712b      	strb	r3, [r5, #4]
 8000f68:	e78c      	b.n	8000e84 <IdleSingleMotor+0x7c>
    return (uint16_t)(timeMs + 0.5f);
 8000f6a:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000fe8 <IdleSingleMotor+0x1e0>
 8000f6e:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000f72:	eee0 7a07 	vfma.f32	s15, s0, s14
 8000f76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f7a:	ee17 3a90 	vmov	r3, s15
 8000f7e:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000f80:	4625      	mov	r5, r4
 8000f82:	e7af      	b.n	8000ee4 <IdleSingleMotor+0xdc>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000f84:	ed9f 8a19 	vldr	s16, [pc, #100]	@ 8000fec <IdleSingleMotor+0x1e4>
 8000f88:	e771      	b.n	8000e6e <IdleSingleMotor+0x66>
}
 8000f8a:	ecbd 8b02 	vpop	{d8}
		 uart_debug_print("Start Failed...");
 8000f8e:	4818      	ldr	r0, [pc, #96]	@ (8000ff0 <IdleSingleMotor+0x1e8>)
}
 8000f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		 uart_debug_print("Start Failed...");
 8000f94:	f004 bbec 	b.w	8005770 <uart_debug_print>
 8000f98:	d2f1a9fc 	.word	0xd2f1a9fc
 8000f9c:	3f50624d 	.word	0x3f50624d
 8000fa0:	0800bb68 	.word	0x0800bb68
 8000fa4:	42480000 	.word	0x42480000
 8000fa8:	0800bc4c 	.word	0x0800bc4c
 8000fac:	45480000 	.word	0x45480000
 8000fb0:	20000454 	.word	0x20000454
 8000fb4:	0800bcec 	.word	0x0800bcec
 8000fb8:	3dd67751 	.word	0x3dd67751
 8000fbc:	4516f759 	.word	0x4516f759
 8000fc0:	476be27a 	.word	0x476be27a
 8000fc4:	0800bd24 	.word	0x0800bd24
 8000fc8:	0800bbd4 	.word	0x0800bbd4
 8000fcc:	2000045c 	.word	0x2000045c
 8000fd0:	0800bbf0 	.word	0x0800bbf0
 8000fd4:	0800bc10 	.word	0x0800bc10
 8000fd8:	20000460 	.word	0x20000460
 8000fdc:	20000004 	.word	0x20000004
 8000fe0:	0800bc9c 	.word	0x0800bc9c
 8000fe4:	0800bcc4 	.word	0x0800bcc4
 8000fe8:	3da9930c 	.word	0x3da9930c
 8000fec:	c5480000 	.word	0xc5480000
 8000ff0:	0800bd40 	.word	0x0800bd40

08000ff4 <safeStopMotor>:
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	4604      	mov	r4, r0
 8000ff8:	ed2d 8b0a 	vpush	{d8-d12}
	 uart_debug_print("Performing a safe stop\r\n");
 8000ffc:	489e      	ldr	r0, [pc, #632]	@ (8001278 <safeStopMotor+0x284>)
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 8000ffe:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Performing a safe stop\r\n");
 8001002:	f004 fbb5 	bl	8005770 <uart_debug_print>
	if (fabsf(currentSpeedRpm) > SAFE_STOP_SPEED_THRESHOLD && motorState != START && motorState != SWITCH_OVER){
 8001006:	eddf 7a9d 	vldr	s15, [pc, #628]	@ 800127c <safeStopMotor+0x288>
 800100a:	eeb0 7ae8 	vabs.f32	s14, s17
 800100e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001016:	f340 8088 	ble.w	800112a <safeStopMotor+0x136>
 800101a:	2c04      	cmp	r4, #4
 800101c:	f000 8085 	beq.w	800112a <safeStopMotor+0x136>
 8001020:	2c13      	cmp	r4, #19
 8001022:	f000 8082 	beq.w	800112a <safeStopMotor+0x136>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 8001026:	4896      	ldr	r0, [pc, #600]	@ (8001280 <safeStopMotor+0x28c>)
 8001028:	ed9f ca96 	vldr	s24, [pc, #600]	@ 8001284 <safeStopMotor+0x290>
 800102c:	ed9f ba96 	vldr	s22, [pc, #600]	@ 8001288 <safeStopMotor+0x294>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001030:	eddf 9a96 	vldr	s19, [pc, #600]	@ 800128c <safeStopMotor+0x298>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001034:	ed9f 9a96 	vldr	s18, [pc, #600]	@ 8001290 <safeStopMotor+0x29c>
    if (timeMs < tMin)   timeMs = tMin;
 8001038:	eddf aa96 	vldr	s21, [pc, #600]	@ 8001294 <safeStopMotor+0x2a0>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 800103c:	eddf ba96 	vldr	s23, [pc, #600]	@ 8001298 <safeStopMotor+0x2a4>
    return (uint16_t)(timeMs + 0.5f);
 8001040:	eddf ca96 	vldr	s25, [pc, #600]	@ 800129c <safeStopMotor+0x2a8>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 8001044:	f004 fb94 	bl	8005770 <uart_debug_print>
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 8001048:	eddf 7a95 	vldr	s15, [pc, #596]	@ 80012a0 <safeStopMotor+0x2ac>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 800104c:	4b95      	ldr	r3, [pc, #596]	@ (80012a4 <safeStopMotor+0x2b0>)
 800104e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	bfd8      	it	le
 8001058:	eeb0 ca67 	vmovle.f32	s24, s15
 800105c:	ed93 7a00 	vldr	s14, [r3]
		float deltaSpeed = currentSpeedRpm - rampTarget;
 8001060:	ee78 6acc 	vsub.f32	s13, s17, s24
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8001064:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001068:	eeb0 6ae6 	vabs.f32	s12, s13
 800106c:	eec6 7a07 	vdiv.f32	s15, s12, s14
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001070:	f04f 0401 	mov.w	r4, #1
 8001074:	ed9f 7a8c 	vldr	s14, [pc, #560]	@ 80012a8 <safeStopMotor+0x2b4>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	bfd8      	it	le
 800107e:	eeb0 ba47 	vmovle.f32	s22, s14
 8001082:	ee17 6a90 	vmov	r6, s15
		if (rampDownDivisions < 1) rampDownDivisions = 1;  // Ensure at least one division
 8001086:	42a6      	cmp	r6, r4
 8001088:	bfb8      	it	lt
 800108a:	4626      	movlt	r6, r4
		float stepSize = deltaSpeed / rampDownDivisions;
 800108c:	ee07 6a90 	vmov	s15, r6
 8001090:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001094:	ee86 aaa7 	vdiv.f32	s20, s13, s15
		for (int i = 1; i <= rampDownDivisions; i++) {
 8001098:	e02a      	b.n	80010f0 <safeStopMotor+0xfc>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 800109a:	ee60 7a29 	vmul.f32	s15, s0, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 800109e:	eef4 6ac9 	vcmpe.f32	s13, s18
 80010a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float deltaW = fabsf(w2 - w1);
 80010a6:	bf54      	ite	pl
 80010a8:	ee37 7a67 	vsubpl.f32	s14, s14, s15
        w2 = 0.0f;
 80010ac:	eeb1 7a67 	vnegmi.f32	s14, s15
    float deltaW = fabsf(w2 - w1);
 80010b0:	eeb0 7ac7 	vabs.f32	s14, s14
    if (timeMs < tMin)   timeMs = tMin;
 80010b4:	eeb4 7aea 	vcmpe.f32	s14, s21
 80010b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010bc:	d432      	bmi.n	8001124 <safeStopMotor+0x130>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 80010be:	eeb4 7aeb 	vcmpe.f32	s14, s23
 80010c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010c6:	dc72      	bgt.n	80011ae <safeStopMotor+0x1ba>
    return (uint16_t)(timeMs + 0.5f);
 80010c8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80010cc:	eee7 7a2c 	vfma.f32	s15, s14, s25
 80010d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010d4:	ee17 3a90 	vmov	r3, s15
 80010d8:	b298      	uxth	r0, r3
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 80010da:	4605      	mov	r5, r0
			MC_ProgramSpeedRampMotor1_F(intermediateTarget, rampTime);
 80010dc:	eeb0 0a48 	vmov.f32	s0, s16
 80010e0:	f001 fad2 	bl	8002688 <MC_ProgramSpeedRampMotor1_F>
		for (int i = 1; i <= rampDownDivisions; i++) {
 80010e4:	3401      	adds	r4, #1
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 80010e6:	4628      	mov	r0, r5
 80010e8:	f004 fc70 	bl	80059cc <HAL_Delay>
		for (int i = 1; i <= rampDownDivisions; i++) {
 80010ec:	42a6      	cmp	r6, r4
 80010ee:	db62      	blt.n	80011b6 <safeStopMotor+0x1c2>
			float intermediateTarget = currentSpeedRpm - (stepSize * i);
 80010f0:	ee07 4a90 	vmov	s15, r4
 80010f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f8:	eeb0 8a68 	vmov.f32	s16, s17
 80010fc:	eea7 8aca 	vfms.f32	s16, s15, s20
			uint16_t rampTime = computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), intermediateTarget, false);
 8001100:	f001 faca 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001104:	eef0 7ac0 	vabs.f32	s15, s0
 8001108:	eef4 7ac9 	vcmpe.f32	s15, s18
 800110c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001110:	ee28 7a29 	vmul.f32	s14, s16, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8001114:	eef0 6ac8 	vabs.f32	s13, s16
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001118:	d5bf      	bpl.n	800109a <safeStopMotor+0xa6>
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 800111a:	eef4 6ac9 	vcmpe.f32	s13, s18
 800111e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001122:	d5c5      	bpl.n	80010b0 <safeStopMotor+0xbc>
 8001124:	2564      	movs	r5, #100	@ 0x64
 8001126:	4628      	mov	r0, r5
 8001128:	e7d8      	b.n	80010dc <safeStopMotor+0xe8>
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 800112a:	4860      	ldr	r0, [pc, #384]	@ (80012ac <safeStopMotor+0x2b8>)
			 uart_debug_print("current state is %d\r\n", currState);
 800112c:	4e60      	ldr	r6, [pc, #384]	@ (80012b0 <safeStopMotor+0x2bc>)
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 800112e:	f004 fb1f 	bl	8005770 <uart_debug_print>
	    MC_StopMotor1();
 8001132:	f001 faa3 	bl	800267c <MC_StopMotor1>
		uint32_t tStart = HAL_GetTick();
 8001136:	f004 fc43 	bl	80059c0 <HAL_GetTick>
 800113a:	4605      	mov	r5, r0
 800113c:	e005      	b.n	800114a <safeStopMotor+0x156>
		    if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 800113e:	f004 fc3f 	bl	80059c0 <HAL_GetTick>
 8001142:	1b40      	subs	r0, r0, r5
 8001144:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8001148:	d81e      	bhi.n	8001188 <safeStopMotor+0x194>
			HAL_Delay(5); // poll the state until it IDLE
 800114a:	2005      	movs	r0, #5
 800114c:	f004 fc3e 	bl	80059cc <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8001150:	f001 fac0 	bl	80026d4 <MC_GetSTMStateMotor1>
 8001154:	4604      	mov	r4, r0
			 uart_debug_print("current state is %d\r\n", currState);
 8001156:	4601      	mov	r1, r0
 8001158:	4630      	mov	r0, r6
 800115a:	f004 fb09 	bl	8005770 <uart_debug_print>
			if (currState == IDLE) {
 800115e:	2c00      	cmp	r4, #0
 8001160:	d1ed      	bne.n	800113e <safeStopMotor+0x14a>
				 uart_debug_print("Block wait \r\n");
 8001162:	4854      	ldr	r0, [pc, #336]	@ (80012b4 <safeStopMotor+0x2c0>)
 8001164:	f004 fb04 	bl	8005770 <uart_debug_print>
				HAL_Delay(WAIT_AFTER_STOP); // Tune this value for seemless transition
 8001168:	20fa      	movs	r0, #250	@ 0xfa
 800116a:	f004 fc2f 	bl	80059cc <HAL_Delay>
				 uart_debug_print("Motor is now stopped \r\n");
 800116e:	4852      	ldr	r0, [pc, #328]	@ (80012b8 <safeStopMotor+0x2c4>)
 8001170:	f004 fafe 	bl	8005770 <uart_debug_print>
}
 8001174:	ecbd 8b0a 	vpop	{d8-d12}
				s_previousDirection = 0;
 8001178:	4950      	ldr	r1, [pc, #320]	@ (80012bc <safeStopMotor+0x2c8>)
				g_lastCommandedSpeed = 0;
 800117a:	4b51      	ldr	r3, [pc, #324]	@ (80012c0 <safeStopMotor+0x2cc>)
				s_previousDirection = 0;
 800117c:	2000      	movs	r0, #0
				g_lastCommandedSpeed = 0;
 800117e:	2200      	movs	r2, #0
				s_previousDirection = 0;
 8001180:	6008      	str	r0, [r1, #0]
				g_lastCommandedSpeed = 0;
 8001182:	601a      	str	r2, [r3, #0]
				return true;
 8001184:	2001      	movs	r0, #1
}
 8001186:	bd70      	pop	{r4, r5, r6, pc}
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 8001188:	484e      	ldr	r0, [pc, #312]	@ (80012c4 <safeStopMotor+0x2d0>)
			    s_previousDirection = 0;
 800118a:	4d4c      	ldr	r5, [pc, #304]	@ (80012bc <safeStopMotor+0x2c8>)
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 800118c:	f004 faf0 	bl	8005770 <uart_debug_print>
			    g_lastCommandedSpeed = 0;
 8001190:	4b4b      	ldr	r3, [pc, #300]	@ (80012c0 <safeStopMotor+0x2cc>)
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8001192:	484d      	ldr	r0, [pc, #308]	@ (80012c8 <safeStopMotor+0x2d4>)
			    s_previousDirection = 0;
 8001194:	2400      	movs	r4, #0
			    g_lastCommandedSpeed = 0;
 8001196:	2100      	movs	r1, #0
 8001198:	6019      	str	r1, [r3, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 800119a:	4622      	mov	r2, r4
 800119c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
			    s_previousDirection = 0;
 80011a0:	602c      	str	r4, [r5, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 80011a2:	f001 fad1 	bl	8002748 <MCI_FaultProcessing>
}
 80011a6:	ecbd 8b0a 	vpop	{d8-d12}
		        return false;
 80011aa:	4620      	mov	r0, r4
}
 80011ac:	bd70      	pop	{r4, r5, r6, pc}
 80011ae:	f241 3588 	movw	r5, #5000	@ 0x1388
 80011b2:	4628      	mov	r0, r5
 80011b4:	e792      	b.n	80010dc <safeStopMotor+0xe8>
		uint16_t finalRampTime = computeRampTimeMs(MC_GetMecSpeedReferenceMotor1_F(), rampTarget, false);
 80011b6:	f001 fa6f 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 80011ba:	eddf 7a35 	vldr	s15, [pc, #212]	@ 8001290 <safeStopMotor+0x29c>
 80011be:	eeb0 7ac0 	vabs.f32	s14, s0
 80011c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	d450      	bmi.n	800126e <safeStopMotor+0x27a>
    float deltaW = fabsf(w2 - w1);
 80011cc:	eddf 7a2f 	vldr	s15, [pc, #188]	@ 800128c <safeStopMotor+0x298>
    if (timeMs < tMin)   timeMs = tMin;
 80011d0:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8001294 <safeStopMotor+0x2a0>
    float deltaW = fabsf(w2 - w1);
 80011d4:	eea0 ba67 	vfms.f32	s22, s0, s15
 80011d8:	eef0 7acb 	vabs.f32	s15, s22
    if (timeMs < tMin)   timeMs = tMin;
 80011dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e4:	d443      	bmi.n	800126e <safeStopMotor+0x27a>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 80011e6:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8001298 <safeStopMotor+0x2a4>
 80011ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011f2:	dc3e      	bgt.n	8001272 <safeStopMotor+0x27e>
    return (uint16_t)(timeMs + 0.5f);
 80011f4:	eddf 6a29 	vldr	s13, [pc, #164]	@ 800129c <safeStopMotor+0x2a8>
 80011f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80011fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8001200:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8001204:	ee17 3a90 	vmov	r3, s15
 8001208:	b298      	uxth	r0, r3
		MC_ProgramSpeedRampMotor1_F(rampTarget, finalRampTime);
 800120a:	eeb0 0a4c 	vmov.f32	s0, s24
 800120e:	f001 fa3b 	bl	8002688 <MC_ProgramSpeedRampMotor1_F>
		uint32_t tStart = HAL_GetTick();
 8001212:	f004 fbd5 	bl	80059c0 <HAL_GetTick>
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 8001216:	ed9f 8a2d 	vldr	s16, [pc, #180]	@ 80012cc <safeStopMotor+0x2d8>
		uint32_t tStart = HAL_GetTick();
 800121a:	4604      	mov	r4, r0
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 800121c:	e00a      	b.n	8001234 <safeStopMotor+0x240>
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 800121e:	f004 fbcf 	bl	80059c0 <HAL_GetTick>
 8001222:	4603      	mov	r3, r0
 8001224:	1b1b      	subs	r3, r3, r4
 8001226:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
			HAL_Delay(10);
 800122a:	f04f 000a 	mov.w	r0, #10
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 800122e:	d80a      	bhi.n	8001246 <safeStopMotor+0x252>
			HAL_Delay(10);
 8001230:	f004 fbcc 	bl	80059cc <HAL_Delay>
		while (fabsf(MC_GetMecSpeedReferenceMotor1_F()) > 120.0f) {
 8001234:	f001 fa30 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
 8001238:	eeb0 0ac0 	vabs.f32	s0, s0
 800123c:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8001240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001244:	dceb      	bgt.n	800121e <safeStopMotor+0x22a>
	    MC_StopMotor1();
 8001246:	f001 fa19 	bl	800267c <MC_StopMotor1>
	    tStart = HAL_GetTick();
 800124a:	f004 fbb9 	bl	80059c0 <HAL_GetTick>
 800124e:	4604      	mov	r4, r0
 8001250:	e005      	b.n	800125e <safeStopMotor+0x26a>
		    if (HAL_GetTick() - tStart > 2000) { //use 1 sec for timeout period
 8001252:	f004 fbb5 	bl	80059c0 <HAL_GetTick>
 8001256:	1b00      	subs	r0, r0, r4
 8001258:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800125c:	d894      	bhi.n	8001188 <safeStopMotor+0x194>
			HAL_Delay(5); // poll the state until it IDLE
 800125e:	2005      	movs	r0, #5
 8001260:	f004 fbb4 	bl	80059cc <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8001264:	f001 fa36 	bl	80026d4 <MC_GetSTMStateMotor1>
			if (currState == IDLE) {
 8001268:	2800      	cmp	r0, #0
 800126a:	d1f2      	bne.n	8001252 <safeStopMotor+0x25e>
 800126c:	e779      	b.n	8001162 <safeStopMotor+0x16e>
 800126e:	2064      	movs	r0, #100	@ 0x64
 8001270:	e7cb      	b.n	800120a <safeStopMotor+0x216>
 8001272:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001276:	e7c8      	b.n	800120a <safeStopMotor+0x216>
 8001278:	0800bd50 	.word	0x0800bd50
 800127c:	43c80000 	.word	0x43c80000
 8001280:	0800bd6c 	.word	0x0800bd6c
 8001284:	42c80000 	.word	0x42c80000
 8001288:	41278d37 	.word	0x41278d37
 800128c:	3dd67751 	.word	0x3dd67751
 8001290:	42480000 	.word	0x42480000
 8001294:	4516f759 	.word	0x4516f759
 8001298:	47ebe27a 	.word	0x47ebe27a
 800129c:	3d29930c 	.word	0x3d29930c
 80012a0:	c2c80000 	.word	0xc2c80000
 80012a4:	20000000 	.word	0x20000000
 80012a8:	c1278d37 	.word	0xc1278d37
 80012ac:	0800bddc 	.word	0x0800bddc
 80012b0:	0800be34 	.word	0x0800be34
 80012b4:	0800bd90 	.word	0x0800bd90
 80012b8:	0800bda0 	.word	0x0800bda0
 80012bc:	2000045c 	.word	0x2000045c
 80012c0:	20000460 	.word	0x20000460
 80012c4:	0800bdb8 	.word	0x0800bdb8
 80012c8:	20000004 	.word	0x20000004
 80012cc:	42f00000 	.word	0x42f00000

080012d0 <StartSingleMotor>:
void StartSingleMotor (float newSpeed){
 80012d0:	b508      	push	{r3, lr}
	 uart_debug_print("Checking speed...\r\n");
 80012d2:	483b      	ldr	r0, [pc, #236]	@ (80013c0 <StartSingleMotor+0xf0>)
void StartSingleMotor (float newSpeed){
 80012d4:	ed2d 8b02 	vpush	{d8}
 80012d8:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 80012dc:	f004 fa48 	bl	8005770 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 80012e0:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 80013c4 <StartSingleMotor+0xf4>
 80012e4:	eef0 7ac8 	vabs.f32	s15, s16
 80012e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012f0:	d43b      	bmi.n	800136a <StartSingleMotor+0x9a>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 80012f2:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80013c8 <StartSingleMotor+0xf8>
 80012f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dc25      	bgt.n	800134c <StartSingleMotor+0x7c>
	if (fabs(speedCmd) < 0.001){
 8001300:	ee17 0a90 	vmov	r0, s15
 8001304:	f7ff f940 	bl	8000588 <__aeabi_f2d>
 8001308:	a32b      	add	r3, pc, #172	@ (adr r3, 80013b8 <StartSingleMotor+0xe8>)
 800130a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130e:	f7ff f9f3 	bl	80006f8 <__aeabi_dcmplt>
 8001312:	bb50      	cbnz	r0, 800136a <StartSingleMotor+0x9a>
	 uart_debug_print("Checking reversing...\r\n");
 8001314:	482d      	ldr	r0, [pc, #180]	@ (80013cc <StartSingleMotor+0xfc>)
 8001316:	f004 fa2b 	bl	8005770 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 800131a:	4b2d      	ldr	r3, [pc, #180]	@ (80013d0 <StartSingleMotor+0x100>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	dd3a      	ble.n	8001398 <StartSingleMotor+0xc8>
 8001322:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001326:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800132a:	d51b      	bpl.n	8001364 <StartSingleMotor+0x94>
		if (safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), START)){
 800132c:	f001 f9b4 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
 8001330:	2004      	movs	r0, #4
 8001332:	f7ff fe5f 	bl	8000ff4 <safeStopMotor>
 8001336:	b340      	cbz	r0, 800138a <StartSingleMotor+0xba>
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001338:	4826      	ldr	r0, [pc, #152]	@ (80013d4 <StartSingleMotor+0x104>)
 800133a:	f004 fa19 	bl	8005770 <uart_debug_print>
}
 800133e:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 8001342:	4825      	ldr	r0, [pc, #148]	@ (80013d8 <StartSingleMotor+0x108>)
}
 8001344:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 8001348:	f004 ba12 	b.w	8005770 <uart_debug_print>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 800134c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 uart_debug_print("Checking reversing...\r\n");
 8001354:	481d      	ldr	r0, [pc, #116]	@ (80013cc <StartSingleMotor+0xfc>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001356:	dd26      	ble.n	80013a6 <StartSingleMotor+0xd6>
	 uart_debug_print("Checking reversing...\r\n");
 8001358:	f004 fa0a 	bl	8005770 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 800135c:	4b1c      	ldr	r3, [pc, #112]	@ (80013d0 <StartSingleMotor+0x100>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b00      	cmp	r3, #0
 8001362:	dd27      	ble.n	80013b4 <StartSingleMotor+0xe4>
}
 8001364:	ecbd 8b02 	vpop	{d8}
 8001368:	bd08      	pop	{r3, pc}
		uart_debug_print("Motor received command that is or was considered to be 0\r\n");
 800136a:	481c      	ldr	r0, [pc, #112]	@ (80013dc <StartSingleMotor+0x10c>)
 800136c:	f004 fa00 	bl	8005770 <uart_debug_print>
		if (safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), START)){
 8001370:	f001 f992 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
 8001374:	2004      	movs	r0, #4
 8001376:	f7ff fe3d 	bl	8000ff4 <safeStopMotor>
 800137a:	b130      	cbz	r0, 800138a <StartSingleMotor+0xba>
}
 800137c:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001380:	4814      	ldr	r0, [pc, #80]	@ (80013d4 <StartSingleMotor+0x104>)
}
 8001382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001386:	f004 b9f3 	b.w	8005770 <uart_debug_print>
}
 800138a:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 800138e:	4814      	ldr	r0, [pc, #80]	@ (80013e0 <StartSingleMotor+0x110>)
}
 8001390:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 8001394:	f004 b9ec 	b.w	8005770 <uart_debug_print>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8001398:	d0e4      	beq.n	8001364 <StartSingleMotor+0x94>
 800139a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a2:	dcc3      	bgt.n	800132c <StartSingleMotor+0x5c>
 80013a4:	e7de      	b.n	8001364 <StartSingleMotor+0x94>
	 uart_debug_print("Checking reversing...\r\n");
 80013a6:	f004 f9e3 	bl	8005770 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 80013aa:	4b09      	ldr	r3, [pc, #36]	@ (80013d0 <StartSingleMotor+0x100>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dcbc      	bgt.n	800132c <StartSingleMotor+0x5c>
 80013b2:	e7d7      	b.n	8001364 <StartSingleMotor+0x94>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 80013b4:	d1ba      	bne.n	800132c <StartSingleMotor+0x5c>
 80013b6:	e7d5      	b.n	8001364 <StartSingleMotor+0x94>
 80013b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80013bc:	3f50624d 	.word	0x3f50624d
 80013c0:	0800bb68 	.word	0x0800bb68
 80013c4:	42480000 	.word	0x42480000
 80013c8:	45480000 	.word	0x45480000
 80013cc:	0800be4c 	.word	0x0800be4c
 80013d0:	2000045c 	.word	0x2000045c
 80013d4:	0800bea0 	.word	0x0800bea0
 80013d8:	0800bef8 	.word	0x0800bef8
 80013dc:	0800be64 	.word	0x0800be64
 80013e0:	0800bec8 	.word	0x0800bec8

080013e4 <ControlSingleMotor>:
void ControlSingleMotor(float newSpeed){
 80013e4:	b508      	push	{r3, lr}
 80013e6:	ed2d 8b02 	vpush	{d8}
 80013ea:	eeb0 8a40 	vmov.f32	s16, s0
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 80013ee:	f001 f971 	bl	80026d4 <MC_GetSTMStateMotor1>
	switch (motorState){
 80013f2:	2813      	cmp	r0, #19
 80013f4:	d80b      	bhi.n	800140e <ControlSingleMotor+0x2a>
 80013f6:	e8df f000 	tbb	[pc, r0]
 80013fa:	0a12      	.short	0x0a12
 80013fc:	0a1d0a0a 	.word	0x0a1d0a0a
 8001400:	0a0a0a28 	.word	0x0a0a0a28
 8001404:	0a0a3a33 	.word	0x0a0a3a33
 8001408:	410a0a0a 	.word	0x410a0a0a
 800140c:	430a      	.short	0x430a
}
 800140e:	ecbd 8b02 	vpop	{d8}
 8001412:	4601      	mov	r1, r0
 8001414:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    uart_debug_print("Motor state not explicitly handled: %d\r\n", motorState);
 8001418:	481a      	ldr	r0, [pc, #104]	@ (8001484 <ControlSingleMotor+0xa0>)
 800141a:	f004 b9a9 	b.w	8005770 <uart_debug_print>
		uart_debug_print("Motor State: Idle\r\n");
 800141e:	481a      	ldr	r0, [pc, #104]	@ (8001488 <ControlSingleMotor+0xa4>)
 8001420:	f004 f9a6 	bl	8005770 <uart_debug_print>
		IdleSingleMotor(newSpeed);
 8001424:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001428:	ecbd 8b02 	vpop	{d8}
 800142c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		IdleSingleMotor(newSpeed);
 8001430:	f7ff bcea 	b.w	8000e08 <IdleSingleMotor>
		uart_debug_print("Motor State: Start\r\n");
 8001434:	4815      	ldr	r0, [pc, #84]	@ (800148c <ControlSingleMotor+0xa8>)
		uart_debug_print("Motor State: Switch over\r\n");
 8001436:	f004 f99b 	bl	8005770 <uart_debug_print>
		StartSingleMotor(newSpeed);
 800143a:	eeb0 0a48 	vmov.f32	s0, s16
}
 800143e:	ecbd 8b02 	vpop	{d8}
 8001442:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StartSingleMotor(newSpeed);
 8001446:	f7ff bf43 	b.w	80012d0 <StartSingleMotor>
		uart_debug_print("Motor State: Run\r\n");
 800144a:	4811      	ldr	r0, [pc, #68]	@ (8001490 <ControlSingleMotor+0xac>)
 800144c:	f004 f990 	bl	8005770 <uart_debug_print>
		runSingleMotorV2(newSpeed);
 8001450:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001454:	ecbd 8b02 	vpop	{d8}
 8001458:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		runSingleMotorV2(newSpeed);
 800145c:	f7ff bb34 	b.w	8000ac8 <runSingleMotorV2>
}
 8001460:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Now \r\n");
 8001464:	480b      	ldr	r0, [pc, #44]	@ (8001494 <ControlSingleMotor+0xb0>)
}
 8001466:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Now \r\n");
 800146a:	f004 b981 	b.w	8005770 <uart_debug_print>
}
 800146e:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001472:	4809      	ldr	r0, [pc, #36]	@ (8001498 <ControlSingleMotor+0xb4>)
}
 8001474:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Over \r\n");
 8001478:	f004 b97a 	b.w	8005770 <uart_debug_print>
		uart_debug_print("Motor State: Offset Calibration\r\n");
 800147c:	4807      	ldr	r0, [pc, #28]	@ (800149c <ControlSingleMotor+0xb8>)
 800147e:	e7da      	b.n	8001436 <ControlSingleMotor+0x52>
		uart_debug_print("Motor State: Switch over\r\n");
 8001480:	4807      	ldr	r0, [pc, #28]	@ (80014a0 <ControlSingleMotor+0xbc>)
 8001482:	e7d8      	b.n	8001436 <ControlSingleMotor+0x52>
 8001484:	0800bfe0 	.word	0x0800bfe0
 8001488:	0800bf28 	.word	0x0800bf28
 800148c:	0800bf50 	.word	0x0800bf50
 8001490:	0800bf3c 	.word	0x0800bf3c
 8001494:	0800bfc4 	.word	0x0800bfc4
 8001498:	0800bfa8 	.word	0x0800bfa8
 800149c:	0800bf84 	.word	0x0800bf84
 80014a0:	0800bf68 	.word	0x0800bf68

080014a4 <Process_Multiple_ESC_Command>:
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 80014a4:	b538      	push	{r3, r4, r5, lr}
 80014a6:	4604      	mov	r4, r0
 80014a8:	ed2d 8b02 	vpush	{d8}
	 uart_debug_print("Running Multiple Motors...\r\n");
 80014ac:	481d      	ldr	r0, [pc, #116]	@ (8001524 <Process_Multiple_ESC_Command+0x80>)
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 80014ae:	460d      	mov	r5, r1
	 uart_debug_print("Running Multiple Motors...\r\n");
 80014b0:	f004 f95e 	bl	8005770 <uart_debug_print>
	switch(CANMessageID->runSpec){
 80014b4:	7963      	ldrb	r3, [r4, #5]
 80014b6:	b323      	cbz	r3, 8001502 <Process_Multiple_ESC_Command+0x5e>
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d002      	beq.n	80014c2 <Process_Multiple_ESC_Command+0x1e>
}
 80014bc:	ecbd 8b02 	vpop	{d8}
 80014c0:	bd38      	pop	{r3, r4, r5, pc}
    return value;
}


int16_t extract_multiple_speeds(const uint8_t *rxData){
    uint16_t offset = ESC_ID * 2;
 80014c2:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <Process_Multiple_ESC_Command+0x84>)
			 uart_debug_print("Running This Motor\r\n");
 80014c4:	4819      	ldr	r0, [pc, #100]	@ (800152c <Process_Multiple_ESC_Command+0x88>)
    uint16_t offset = ESC_ID * 2;
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	005b      	lsls	r3, r3, #1
    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	18ea      	adds	r2, r5, r3
 80014ce:	5cec      	ldrb	r4, [r5, r3]
 80014d0:	7853      	ldrb	r3, [r2, #1]
 80014d2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 80014d6:	b224      	sxth	r4, r4
			 uart_debug_print("Running This Motor\r\n");
 80014d8:	f004 f94a 	bl	8005770 <uart_debug_print>
			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
 80014dc:	4621      	mov	r1, r4
 80014de:	4814      	ldr	r0, [pc, #80]	@ (8001530 <Process_Multiple_ESC_Command+0x8c>)
 80014e0:	f004 f946 	bl	8005770 <uart_debug_print>
			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 80014e4:	4b13      	ldr	r3, [pc, #76]	@ (8001534 <Process_Multiple_ESC_Command+0x90>)
 80014e6:	4814      	ldr	r0, [pc, #80]	@ (8001538 <Process_Multiple_ESC_Command+0x94>)
 80014e8:	6819      	ldr	r1, [r3, #0]
 80014ea:	f004 f941 	bl	8005770 <uart_debug_print>
}
 80014ee:	ecbd 8b02 	vpop	{d8}
			ControlSingleMotor(curESCSpeed);
 80014f2:	ee07 4a90 	vmov	s15, r4
}
 80014f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ControlSingleMotor(curESCSpeed);
 80014fa:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80014fe:	f7ff bf71 	b.w	80013e4 <ControlSingleMotor>
			 uart_debug_print("Stop this motor\r\n");
 8001502:	480e      	ldr	r0, [pc, #56]	@ (800153c <Process_Multiple_ESC_Command+0x98>)
 8001504:	f004 f934 	bl	8005770 <uart_debug_print>
	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 8001508:	f001 f8c6 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
 800150c:	eeb0 8a40 	vmov.f32	s16, s0
 8001510:	f001 f8e0 	bl	80026d4 <MC_GetSTMStateMotor1>
 8001514:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001518:	ecbd 8b02 	vpop	{d8}
 800151c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 	 	safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 8001520:	f7ff bd68 	b.w	8000ff4 <safeStopMotor>
 8001524:	0800c00c 	.word	0x0800c00c
 8001528:	20000498 	.word	0x20000498
 800152c:	0800c02c 	.word	0x0800c02c
 8001530:	0800c044 	.word	0x0800c044
 8001534:	2000045c 	.word	0x2000045c
 8001538:	0800c058 	.word	0x0800c058
 800153c:	0800c070 	.word	0x0800c070

08001540 <sendCANResponse>:
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8001540:	b530      	push	{r4, r5, lr}
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 8001542:	7843      	ldrb	r3, [r0, #1]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8001544:	f890 c004 	ldrb.w	ip, [r0, #4]
    txID |= (CANMessageID->motorID & 0x0f);
 8001548:	7984      	ldrb	r4, [r0, #6]
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 800154a:	7881      	ldrb	r1, [r0, #2]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 800154c:	78c2      	ldrb	r2, [r0, #3]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 800154e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 8001552:	01db      	lsls	r3, r3, #7
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8001554:	f00c 0070 	and.w	r0, ip, #112	@ 0x70
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 8001558:	b2db      	uxtb	r3, r3
    txID |= (CANMessageID->motorID & 0x0f);
 800155a:	4303      	orrs	r3, r0
 800155c:	f004 040f 	and.w	r4, r4, #15
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001560:	0209      	lsls	r1, r1, #8
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8001562:	b08f      	sub	sp, #60	@ 0x3c
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8001564:	f401 7180 	and.w	r1, r1, #256	@ 0x100
    txID |= (CANMessageID->motorID & 0x0f);
 8001568:	431c      	orrs	r4, r3
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 800156a:	0253      	lsls	r3, r2, #9
    txID |= (CANMessageID->motorID & 0x0f);
 800156c:	430c      	orrs	r4, r1
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 800156e:	ed8d 0a01 	vstr	s0, [sp, #4]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8001572:	f403 7300 	and.w	r3, r3, #512	@ 0x200
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001576:	480f      	ldr	r0, [pc, #60]	@ (80015b4 <sendCANResponse+0x74>)
    txID |= (CANMessageID->motorID & 0x0f);
 8001578:	431c      	orrs	r4, r3
    memcpy(txData, &information, sizeof(float)); // data[0] --> data[3] now stores float
 800157a:	9b01      	ldr	r3, [sp, #4]
 800157c:	9303      	str	r3, [sp, #12]
    txID |= (CANMessageID->motorID & 0x0f);
 800157e:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001582:	f004 f8f5 	bl	8005770 <uart_debug_print>
    txHeader.DataLength          = FDCAN_DLC_BYTES_8;
 8001586:	2508      	movs	r5, #8
    txHeader.IdType              = FDCAN_STANDARD_ID;
 8001588:	2300      	movs	r3, #0
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <sendCANResponse+0x78>)
    txHeader.Identifier          = txID;
 800158c:	9405      	str	r4, [sp, #20]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 800158e:	aa03      	add	r2, sp, #12
 8001590:	a905      	add	r1, sp, #20
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8001592:	e9cd 3306 	strd	r3, r3, [sp, #24]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001596:	e9cd 5308 	strd	r5, r3, [sp, #32]
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 800159a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    txHeader.MessageMarker       = 0;
 800159e:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 80015a2:	f005 fd71 	bl	8007088 <HAL_FDCAN_AddMessageToTxFifoQ>
 80015a6:	b908      	cbnz	r0, 80015ac <sendCANResponse+0x6c>
}
 80015a8:	b00f      	add	sp, #60	@ 0x3c
 80015aa:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 80015ac:	f001 f85e 	bl	800266c <Error_Handler>
}
 80015b0:	b00f      	add	sp, #60	@ 0x3c
 80015b2:	bd30      	pop	{r4, r5, pc}
 80015b4:	0800c084 	.word	0x0800c084
 80015b8:	20000740 	.word	0x20000740

080015bc <Process_Single_ESC_Command>:
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 80015bc:	b510      	push	{r4, lr}
 80015be:	ed2d 8b02 	vpush	{d8}
	if (CANMessageID->commandType == ACTION_RUN){
 80015c2:	78c3      	ldrb	r3, [r0, #3]
    reorderedData[0] = data[0];
 80015c4:	680a      	ldr	r2, [r1, #0]
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 80015c6:	4604      	mov	r4, r0
	if (CANMessageID->commandType == ACTION_RUN){
 80015c8:	b943      	cbnz	r3, 80015dc <Process_Single_ESC_Command+0x20>
		switch(CANMessageID->runSpec){
 80015ca:	7943      	ldrb	r3, [r0, #5]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d02c      	beq.n	800162a <Process_Single_ESC_Command+0x6e>
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d061      	beq.n	8001698 <Process_Single_ESC_Command+0xdc>
 80015d4:	b1c3      	cbz	r3, 8001608 <Process_Single_ESC_Command+0x4c>
}
 80015d6:	ecbd 8b02 	vpop	{d8}
 80015da:	bd10      	pop	{r4, pc}
		switch(CANMessageID->readSpec){
 80015dc:	7903      	ldrb	r3, [r0, #4]
 80015de:	2b07      	cmp	r3, #7
 80015e0:	d8f9      	bhi.n	80015d6 <Process_Single_ESC_Command+0x1a>
 80015e2:	a201      	add	r2, pc, #4	@ (adr r2, 80015e8 <Process_Single_ESC_Command+0x2c>)
 80015e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015e8:	08001661 	.word	0x08001661
 80015ec:	080015d7 	.word	0x080015d7
 80015f0:	08001637 	.word	0x08001637
 80015f4:	08001673 	.word	0x08001673
 80015f8:	08001679 	.word	0x08001679
 80015fc:	08001693 	.word	0x08001693
 8001600:	080015d7 	.word	0x080015d7
 8001604:	08001651 	.word	0x08001651
				uart_debug_print("Motor Stopped \r\n");
 8001608:	4830      	ldr	r0, [pc, #192]	@ (80016cc <Process_Single_ESC_Command+0x110>)
 800160a:	f004 f8b1 	bl	8005770 <uart_debug_print>
				safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 800160e:	f001 f843 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
 8001612:	eeb0 8a40 	vmov.f32	s16, s0
 8001616:	f001 f85d 	bl	80026d4 <MC_GetSTMStateMotor1>
 800161a:	eeb0 0a48 	vmov.f32	s0, s16
}
 800161e:	ecbd 8b02 	vpop	{d8}
 8001622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				safeStopMotor( MC_GetMecSpeedReferenceMotor1_F(), MC_GetSTMStateMotor1());
 8001626:	f7ff bce5 	b.w	8000ff4 <safeStopMotor>
}
 800162a:	ecbd 8b02 	vpop	{d8}
 800162e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				MC_AcknowledgeFaultMotor1();
 8001632:	f001 b843 	b.w	80026bc <MC_AcknowledgeFaultMotor1>
				float phaseVoltage = MC_GetPhaseVoltageAmplitudeMotor1();
 8001636:	f001 f83b 	bl	80026b0 <MC_GetPhaseVoltageAmplitudeMotor1>
}
 800163a:	ecbd 8b02 	vpop	{d8}
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 800163e:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, phaseCurrent);
 8001642:	4620      	mov	r0, r4
 8001644:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8001648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, phaseCurrent);
 800164c:	f7ff bf78 	b.w	8001540 <sendCANResponse>
}
 8001650:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, feedback);
 8001654:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 80016d0 <Process_Single_ESC_Command+0x114>
}
 8001658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, feedback);
 800165c:	f7ff bf70 	b.w	8001540 <sendCANResponse>
				float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8001660:	f001 f81a 	bl	8002698 <MC_GetMecSpeedReferenceMotor1_F>
}
 8001664:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, currentSpeed);
 8001668:	4620      	mov	r0, r4
}
 800166a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentSpeed);
 800166e:	f7ff bf67 	b.w	8001540 <sendCANResponse>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 8001672:	f001 f817 	bl	80026a4 <MC_GetPhaseCurrentAmplitudeMotor1>
 8001676:	e7e0      	b.n	800163a <Process_Single_ESC_Command+0x7e>
				float currentFaults = MC_GetOccurredFaultsMotor1();
 8001678:	f001 f826 	bl	80026c8 <MC_GetOccurredFaultsMotor1>
}
 800167c:	ecbd 8b02 	vpop	{d8}
				float currentState = MC_GetSTMStateMotor1();
 8001680:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, currentState);
 8001684:	4620      	mov	r0, r4
 8001686:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800168a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentState);
 800168e:	f7ff bf57 	b.w	8001540 <sendCANResponse>
				float currentState = MC_GetSTMStateMotor1();
 8001692:	f001 f81f 	bl	80026d4 <MC_GetSTMStateMotor1>
 8001696:	e7f1      	b.n	800167c <Process_Single_ESC_Command+0xc0>
 8001698:	ee08 2a10 	vmov	s16, r2
				uart_debug_print("In case RUN_SPEED\r\n");
 800169c:	480d      	ldr	r0, [pc, #52]	@ (80016d4 <Process_Single_ESC_Command+0x118>)
 800169e:	f004 f867 	bl	8005770 <uart_debug_print>
				uart_debug_print("Setpoint %d RPM\r\n", (int)information);
 80016a2:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80016a6:	480c      	ldr	r0, [pc, #48]	@ (80016d8 <Process_Single_ESC_Command+0x11c>)
 80016a8:	ee17 1a90 	vmov	r1, s15
 80016ac:	f004 f860 	bl	8005770 <uart_debug_print>
				uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 80016b0:	4b0a      	ldr	r3, [pc, #40]	@ (80016dc <Process_Single_ESC_Command+0x120>)
 80016b2:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <Process_Single_ESC_Command+0x124>)
 80016b4:	6819      	ldr	r1, [r3, #0]
 80016b6:	f004 f85b 	bl	8005770 <uart_debug_print>
				ControlSingleMotor(information);
 80016ba:	eeb0 0a48 	vmov.f32	s0, s16
}
 80016be:	ecbd 8b02 	vpop	{d8}
 80016c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				ControlSingleMotor(information);
 80016c6:	f7ff be8d 	b.w	80013e4 <ControlSingleMotor>
 80016ca:	bf00      	nop
 80016cc:	0800c0a0 	.word	0x0800c0a0
 80016d0:	428a0000 	.word	0x428a0000
 80016d4:	0800c0b4 	.word	0x0800c0b4
 80016d8:	0800c044 	.word	0x0800c044
 80016dc:	2000045c 	.word	0x2000045c
 80016e0:	0800c058 	.word	0x0800c058

080016e4 <CAN_Parse_MSG>:
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 80016e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016e6:	4604      	mov	r4, r0
 80016e8:	b083      	sub	sp, #12
	uart_debug_print("Parsing the ID...\r\n");
 80016ea:	4826      	ldr	r0, [pc, #152]	@ (8001784 <CAN_Parse_MSG+0xa0>)
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 80016ec:	460e      	mov	r6, r1
	uart_debug_print("Parsing the ID...\r\n");
 80016ee:	f004 f83f 	bl	8005770 <uart_debug_print>
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 80016f2:	8825      	ldrh	r5, [r4, #0]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 80016f4:	f3c5 2380 	ubfx	r3, r5, #10, #1
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 80016f8:	f3c5 040a 	ubfx	r4, r5, #0, #11
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 80016fc:	f88d 3000 	strb.w	r3, [sp]
	if (CANMessage.messageSender == SLAVE){
 8001700:	bb1b      	cbnz	r3, 800174a <CAN_Parse_MSG+0x66>
	return (CAN_ID & NDRIVE_STEETING_DEVICE_MASK) >> NDRIVE_STEERING_SHIFT;
 8001702:	f3c4 13c0 	ubfx	r3, r4, #7, #1
	CANMessage.motorType = (MotorType) get_CAN_motor_type(msg_ID);
 8001706:	f88d 3001 	strb.w	r3, [sp, #1]
	if (CANMessage.motorType == STEERING_MOTOR){
 800170a:	b9f3      	cbnz	r3, 800174a <CAN_Parse_MSG+0x66>
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 800170c:	0a63      	lsrs	r3, r4, #9
 800170e:	f88d 3003 	strb.w	r3, [sp, #3]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 8001712:	f3c4 1702 	ubfx	r7, r4, #4, #3
	if (CANMessage.commandType == ACTION_RUN){
 8001716:	b1d3      	cbz	r3, 800174e <CAN_Parse_MSG+0x6a>
		uart_debug_print("Read Command Detected\r\n");
 8001718:	481b      	ldr	r0, [pc, #108]	@ (8001788 <CAN_Parse_MSG+0xa4>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 800171a:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Read Command Detected\r\n");
 800171e:	f004 f827 	bl	8005770 <uart_debug_print>
		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 8001722:	f88d 7004 	strb.w	r7, [sp, #4]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8001726:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 800172a:	b1dc      	cbz	r4, 8001764 <CAN_Parse_MSG+0x80>
		if (CANMessage.motorID == ESC_ID){
 800172c:	4b17      	ldr	r3, [pc, #92]	@ (800178c <CAN_Parse_MSG+0xa8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f005 050f 	and.w	r5, r5, #15
 8001734:	429d      	cmp	r5, r3
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 8001736:	f88d 5006 	strb.w	r5, [sp, #6]
		if (CANMessage.motorID == ESC_ID){
 800173a:	d11c      	bne.n	8001776 <CAN_Parse_MSG+0x92>
			uart_debug_print("Processing Single Command\r\n");
 800173c:	4814      	ldr	r0, [pc, #80]	@ (8001790 <CAN_Parse_MSG+0xac>)
 800173e:	f004 f817 	bl	8005770 <uart_debug_print>
			Process_Single_ESC_Command(&CANMessage, rxData);
 8001742:	4631      	mov	r1, r6
 8001744:	4668      	mov	r0, sp
 8001746:	f7ff ff39 	bl	80015bc <Process_Single_ESC_Command>
}
 800174a:	b003      	add	sp, #12
 800174c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_debug_print("Run Command Detected\r\n");
 800174e:	4811      	ldr	r0, [pc, #68]	@ (8001794 <CAN_Parse_MSG+0xb0>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8001750:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Run Command Detected\r\n");
 8001754:	f004 f80c 	bl	8005770 <uart_debug_print>
			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 8001758:	f88d 7005 	strb.w	r7, [sp, #5]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 800175c:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8001760:	2c00      	cmp	r4, #0
 8001762:	d1e3      	bne.n	800172c <CAN_Parse_MSG+0x48>
		uart_debug_print("Processing Multiple Commands\r\n");
 8001764:	480c      	ldr	r0, [pc, #48]	@ (8001798 <CAN_Parse_MSG+0xb4>)
 8001766:	f004 f803 	bl	8005770 <uart_debug_print>
		Process_Multiple_ESC_Command(&CANMessage, rxData);
 800176a:	4631      	mov	r1, r6
 800176c:	4668      	mov	r0, sp
 800176e:	f7ff fe99 	bl	80014a4 <Process_Multiple_ESC_Command>
}
 8001772:	b003      	add	sp, #12
 8001774:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 uart_debug_print("Not My IDr\n");
 8001776:	4809      	ldr	r0, [pc, #36]	@ (800179c <CAN_Parse_MSG+0xb8>)
}
 8001778:	b003      	add	sp, #12
 800177a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			 uart_debug_print("Not My IDr\n");
 800177e:	f003 bff7 	b.w	8005770 <uart_debug_print>
 8001782:	bf00      	nop
 8001784:	0800c0c8 	.word	0x0800c0c8
 8001788:	0800c0f4 	.word	0x0800c0f4
 800178c:	20000498 	.word	0x20000498
 8001790:	0800c10c 	.word	0x0800c10c
 8001794:	0800c0dc 	.word	0x0800c0dc
 8001798:	0800c134 	.word	0x0800c134
 800179c:	0800c128 	.word	0x0800c128

080017a0 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 80017a0:	b570      	push	{r4, r5, r6, lr}
 80017a2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 80017a4:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 80017a6:	6940      	ldr	r0, [r0, #20]
 80017a8:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 80017aa:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80017ac:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 80017ae:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 80017b2:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80017b6:	6960      	ldr	r0, [r4, #20]
 80017b8:	f104 011c 	add.w	r1, r4, #28
 80017bc:	462b      	mov	r3, r5
 80017be:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 80017c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80017c4:	4718      	bx	r3
 80017c6:	bf00      	nop

080017c8 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 80017c8:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80017ca:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 80017cc:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80017ce:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80017d2:	4c1e      	ldr	r4, [pc, #120]	@ (800184c <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 80017d4:	01db      	lsls	r3, r3, #7
 80017d6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 80017da:	784a      	ldrb	r2, [r1, #1]
 80017dc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80017e0:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 80017e2:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 80017e6:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 80017f0:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80017f4:	5ca2      	ldrb	r2, [r4, r2]
 80017f6:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 80017fa:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80017fc:	5ca2      	ldrb	r2, [r4, r2]
 80017fe:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8001802:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001804:	5ca2      	ldrb	r2, [r4, r2]
 8001806:	4c12      	ldr	r4, [pc, #72]	@ (8001850 <ASPEP_sendBeacon+0x88>)
 8001808:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800180c:	5ca2      	ldrb	r2, [r4, r2]
 800180e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001812:	f043 0305 	orr.w	r3, r3, #5
 8001816:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800181a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800181c:	b14b      	cbz	r3, 8001832 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 800181e:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8001820:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001824:	b913      	cbnz	r3, 800182c <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8001826:	2302      	movs	r3, #2
 8001828:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 800182c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001830:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001832:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8001836:	2303      	movs	r3, #3
 8001838:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800183c:	6481      	str	r1, [r0, #72]	@ 0x48
 800183e:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001840:	2204      	movs	r2, #4
 8001842:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8001844:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001848:	6940      	ldr	r0, [r0, #20]
 800184a:	4718      	bx	r3
 800184c:	0800c1dc 	.word	0x0800c1dc
 8001850:	0800c1cc 	.word	0x0800c1cc

08001854 <ASPEP_sendPing>:
{
 8001854:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8001856:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8001858:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 800185c:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001860:	4d1d      	ldr	r5, [pc, #116]	@ (80018d8 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8001862:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001866:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 800186a:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800186e:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001872:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8001876:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800187a:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4c16      	ldr	r4, [pc, #88]	@ (80018dc <ASPEP_sendPing+0x88>)
 8001882:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001886:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800188a:	5ca2      	ldrb	r2, [r4, r2]
 800188c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8001890:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001892:	5ca2      	ldrb	r2, [r4, r2]
 8001894:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8001898:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800189a:	5ca2      	ldrb	r2, [r4, r2]
 800189c:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 80018a0:	5ceb      	ldrb	r3, [r5, r3]
 80018a2:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 80018a6:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80018a8:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80018aa:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80018ac:	b143      	cbz	r3, 80018c0 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 80018ae:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 80018b0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80018b4:	b913      	cbnz	r3, 80018bc <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 80018b6:	2302      	movs	r3, #2
 80018b8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80018bc:	bc30      	pop	{r4, r5}
 80018be:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80018c0:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80018c4:	2303      	movs	r3, #3
 80018c6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80018ca:	6481      	str	r1, [r0, #72]	@ 0x48
 80018cc:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80018ce:	2204      	movs	r2, #4
 80018d0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80018d2:	6940      	ldr	r0, [r0, #20]
}
 80018d4:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80018d6:	4718      	bx	r3
 80018d8:	0800c1cc 	.word	0x0800c1cc
 80018dc:	0800c1dc 	.word	0x0800c1dc

080018e0 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 80018e0:	2a0a      	cmp	r2, #10
 80018e2:	d009      	beq.n	80018f8 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 80018e4:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d91d      	bls.n	8001928 <ASPEP_getBuffer+0x48>
 80018ec:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d90d      	bls.n	8001910 <ASPEP_getBuffer+0x30>
        result = false;
 80018f4:	2000      	movs	r0, #0
}
 80018f6:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 80018f8:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d8f9      	bhi.n	80018f4 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001900:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8001902:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001904:	3304      	adds	r3, #4
 8001906:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8001908:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 800190c:	2001      	movs	r0, #1
 800190e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001910:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8001912:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001916:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800191a:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 800191c:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001920:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001922:	600b      	str	r3, [r1, #0]
  bool result = true;
 8001924:	2001      	movs	r0, #1
 8001926:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001928:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 800192a:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 800192e:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8001932:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8001934:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8001938:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 800193a:	600b      	str	r3, [r1, #0]
 800193c:	e7f2      	b.n	8001924 <ASPEP_getBuffer+0x44>
 800193e:	bf00      	nop

08001940 <ASPEP_sendPacket>:
{
 8001940:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8001942:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8001946:	2802      	cmp	r0, #2
 8001948:	d001      	beq.n	800194e <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 800194a:	2002      	movs	r0, #2
 800194c:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 800194e:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8001952:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8001956:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 800195a:	2801      	cmp	r0, #1
 800195c:	d104      	bne.n	8001968 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 800195e:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8001962:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8001964:	3202      	adds	r2, #2
 8001966:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8001968:	2b0a      	cmp	r3, #10
 800196a:	d105      	bne.n	8001978 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 800196c:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8001970:	b348      	cbz	r0, 80019c6 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8001972:	2000      	movs	r0, #0
 8001974:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8001978:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 800197c:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800197e:	4d34      	ldr	r5, [pc, #208]	@ (8001a50 <ASPEP_sendPacket+0x110>)
 8001980:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001982:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001984:	5d2e      	ldrb	r6, [r5, r4]
 8001986:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800198a:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 800198c:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001990:	5d2e      	ldrb	r6, [r5, r4]
 8001992:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8001996:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001998:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800199a:	5d2c      	ldrb	r4, [r5, r4]
 800199c:	f3c0 6503 	ubfx	r5, r0, #24, #4
 80019a0:	406c      	eors	r4, r5
 80019a2:	4d2c      	ldr	r5, [pc, #176]	@ (8001a54 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 80019a4:	5d2c      	ldrb	r4, [r5, r4]
 80019a6:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 80019aa:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 80019ae:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80019b0:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 80019b4:	b1b9      	cbz	r1, 80019e6 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 80019b6:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 80019b8:	2b09      	cmp	r3, #9
 80019ba:	d006      	beq.n	80019ca <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 80019bc:	2b0a      	cmp	r3, #10
 80019be:	d02a      	beq.n	8001a16 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 80019c0:	b37b      	cbz	r3, 8001a22 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 80019c2:	2000      	movs	r0, #0
}
 80019c4:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 80019c6:	2001      	movs	r0, #1
}
 80019c8:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 80019ca:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80019ce:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 80019d0:	458e      	cmp	lr, r1
 80019d2:	bf14      	ite	ne
 80019d4:	2003      	movne	r0, #3
 80019d6:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 80019d8:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 80019dc:	b3a1      	cbz	r1, 8001a48 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 80019de:	2102      	movs	r1, #2
 80019e0:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 80019e2:	809a      	strh	r2, [r3, #4]
}
 80019e4:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 80019e6:	2b09      	cmp	r3, #9
 80019e8:	d029      	beq.n	8001a3e <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 80019ea:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 80019ec:	f04f 0303 	mov.w	r3, #3
 80019f0:	bf0b      	itete	eq
 80019f2:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80019f6:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 80019fa:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80019fe:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001a02:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8001a06:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001a08:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8001a0c:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8001a10:	4671      	mov	r1, lr
 8001a12:	4798      	blx	r3
 8001a14:	e7d5      	b.n	80019c2 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8001a16:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8001a1a:	2b01      	cmp	r3, #1
 8001a1c:	d009      	beq.n	8001a32 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8001a1e:	2003      	movs	r0, #3
}
 8001a20:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8001a22:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1f9      	bne.n	8001a1e <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8001a30:	e7c7      	b.n	80019c2 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8001a32:	2302      	movs	r3, #2
 8001a34:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8001a38:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8001a3c:	e7c1      	b.n	80019c2 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8001a3e:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8001a42:	2103      	movs	r1, #3
 8001a44:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001a46:	e7dc      	b.n	8001a02 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8001a48:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8001a4c:	e7c7      	b.n	80019de <ASPEP_sendPacket+0x9e>
 8001a4e:	bf00      	nop
 8001a50:	0800c1dc 	.word	0x0800c1dc
 8001a54:	0800c1cc 	.word	0x0800c1cc

08001a58 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8001a58:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8001a5a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001a5e:	2b03      	cmp	r3, #3
{
 8001a60:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8001a62:	d013      	beq.n	8001a8c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8001a64:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8001a66:	2100      	movs	r1, #0
 8001a68:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8001a6a:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8001a6e:	2a02      	cmp	r2, #2
 8001a70:	d013      	beq.n	8001a9a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d11d      	bne.n	8001ab2 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8001a76:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8001a7a:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8001a7c:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8001a7e:	2204      	movs	r2, #4
 8001a80:	6940      	ldr	r0, [r0, #20]
 8001a82:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8001a84:	2303      	movs	r3, #3
 8001a86:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001a8a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8001a8c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8001a90:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8001a92:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8001a94:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8001a98:	d10b      	bne.n	8001ab2 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001a9a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8001a9e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001aa0:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8001aa2:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001aa4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001aa6:	6960      	ldr	r0, [r4, #20]
 8001aa8:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8001ab0:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab2:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8001ab4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001ab6:	b1cb      	cbz	r3, 8001aec <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8001ab8:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8001aba:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8001abc:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8001abe:	6819      	ldr	r1, [r3, #0]
 8001ac0:	889a      	ldrh	r2, [r3, #4]
 8001ac2:	6960      	ldr	r0, [r4, #20]
 8001ac4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ac6:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8001ac8:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d007      	beq.n	8001ae0 <ASPEP_HWDataTransmittedIT+0x88>
 8001ad0:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d003      	beq.n	8001ae0 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8001adc:	b662      	cpsie	i
}
 8001ade:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8001ae0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001ae2:	0063      	lsls	r3, r4, #1
 8001ae4:	3368      	adds	r3, #104	@ 0x68
 8001ae6:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8001ae8:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8001aea:	e7f7      	b.n	8001adc <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8001aec:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001aee:	e7f5      	b.n	8001adc <ASPEP_HWDataTransmittedIT+0x84>

08001af0 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8001af4:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8001af8:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8001afa:	2300      	movs	r3, #0
{
 8001afc:	4604      	mov	r4, r0
    *packetLength = 0;
 8001afe:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8001b00:	b19d      	cbz	r5, 8001b2a <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8001b02:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8001b06:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8001b0a:	2d01      	cmp	r5, #1
 8001b0c:	d04e      	beq.n	8001bac <ASPEP_RXframeProcess+0xbc>
 8001b0e:	2d02      	cmp	r5, #2
 8001b10:	d012      	beq.n	8001b38 <ASPEP_RXframeProcess+0x48>
 8001b12:	b9d5      	cbnz	r5, 8001b4a <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8001b14:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8001b16:	2b05      	cmp	r3, #5
 8001b18:	d062      	beq.n	8001be0 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8001b1a:	2b06      	cmp	r3, #6
 8001b1c:	d115      	bne.n	8001b4a <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8001b1e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001b22:	4629      	mov	r1, r5
 8001b24:	f7ff fe96 	bl	8001854 <ASPEP_sendPing>
 8001b28:	e00f      	b.n	8001b4a <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8001b2a:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8001b2e:	b9b3      	cbnz	r3, 8001b5e <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001b30:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8001b32:	4628      	mov	r0, r5
 8001b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8001b38:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8001b3a:	2d05      	cmp	r5, #5
 8001b3c:	f000 80d9 	beq.w	8001cf2 <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8001b40:	2d06      	cmp	r5, #6
 8001b42:	f000 8125 	beq.w	8001d90 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8001b46:	2d09      	cmp	r5, #9
 8001b48:	d03e      	beq.n	8001bc8 <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001b4a:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001b4c:	6960      	ldr	r0, [r4, #20]
 8001b4e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001b50:	2204      	movs	r2, #4
 8001b52:	f104 011c 	add.w	r1, r4, #28
 8001b56:	4798      	blx	r3
}
 8001b58:	4628      	mov	r0, r5
 8001b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001b5e:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8001b62:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001b64:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001b68:	488c      	ldr	r0, [pc, #560]	@ (8001d9c <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001b6a:	4d8d      	ldr	r5, [pc, #564]	@ (8001da0 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001b6c:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001b70:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001b74:	5c82      	ldrb	r2, [r0, r2]
 8001b76:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8001b7a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001b7c:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8001b7e:	5ceb      	ldrb	r3, [r5, r3]
 8001b80:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8001b84:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b86:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001b88:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80f4 	beq.w	8001d78 <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b90:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001b92:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001b96:	b913      	cbnz	r3, 8001b9e <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8001b9e:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8001ba0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001ba2:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8001ba4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8001ba8:	4798      	blx	r3
 8001baa:	e7c1      	b.n	8001b30 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8001bac:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8001bae:	2905      	cmp	r1, #5
 8001bb0:	d064      	beq.n	8001c7c <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 8001bb2:	2906      	cmp	r1, #6
 8001bb4:	d1c9      	bne.n	8001b4a <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001bb6:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001bba:	4629      	mov	r1, r5
 8001bbc:	f7ff fe4a 	bl	8001854 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001bc6:	e7c0      	b.n	8001b4a <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001bc8:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 8001bcc:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8001bd0:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001bd2:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001bd4:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001bd6:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001bda:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8001bdc:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8001bde:	e7b5      	b.n	8001b4c <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001be0:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001be4:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001be8:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001bea:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001bee:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001bf2:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001bf6:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001bfa:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001bfc:	4563      	cmp	r3, ip
 8001bfe:	bf28      	it	cs
 8001c00:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c02:	42b0      	cmp	r0, r6
 8001c04:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001c06:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c0a:	bf28      	it	cs
 8001c0c:	4631      	movcs	r1, r6
 8001c0e:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001c12:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c16:	45b8      	cmp	r8, r7
 8001c18:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c1a:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c1e:	bf28      	it	cs
 8001c20:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c22:	45ca      	cmp	sl, r9
 8001c24:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c26:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c2a:	bf28      	it	cs
 8001c2c:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c2e:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001c32:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c34:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001c36:	d81b      	bhi.n	8001c70 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001c38:	459c      	cmp	ip, r3
 8001c3a:	d819      	bhi.n	8001c70 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001c3c:	45b8      	cmp	r8, r7
 8001c3e:	d817      	bhi.n	8001c70 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001c40:	45ca      	cmp	sl, r9
 8001c42:	d815      	bhi.n	8001c70 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001c44:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 8001c48:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001c4c:	4290      	cmp	r0, r2
 8001c4e:	d10f      	bne.n	8001c70 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c50:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c52:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c54:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c56:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c58:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001c5a:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c5e:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001c60:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c62:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001c64:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001c68:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001c6c:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001c70:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff fda7 	bl	80017c8 <ASPEP_sendBeacon>
 8001c7a:	e766      	b.n	8001b4a <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001c7c:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c7e:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001c82:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c84:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c88:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c8c:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001c90:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001c94:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c96:	42a8      	cmp	r0, r5
 8001c98:	bf28      	it	cs
 8001c9a:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c9c:	4561      	cmp	r1, ip
 8001c9e:	460f      	mov	r7, r1
 8001ca0:	bf28      	it	cs
 8001ca2:	4667      	movcs	r7, ip
 8001ca4:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001ca8:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001cac:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001cb0:	42b7      	cmp	r7, r6
 8001cb2:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cb4:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001cb8:	bf28      	it	cs
 8001cba:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cbc:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cbe:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cc2:	46c1      	mov	r9, r8
 8001cc4:	bf28      	it	cs
 8001cc6:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cc8:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001ccc:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cce:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001cd0:	d80b      	bhi.n	8001cea <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001cd2:	4285      	cmp	r5, r0
 8001cd4:	d809      	bhi.n	8001cea <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001cd6:	42b7      	cmp	r7, r6
 8001cd8:	d807      	bhi.n	8001cea <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001cda:	45f0      	cmp	r8, lr
 8001cdc:	d805      	bhi.n	8001cea <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001cde:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001ce2:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d0c2      	beq.n	8001c70 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001cf0:	e7be      	b.n	8001c70 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001cf2:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001cf6:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001cfa:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cfc:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d00:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d04:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001d08:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001d0c:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001d0e:	4565      	cmp	r5, ip
 8001d10:	bf28      	it	cs
 8001d12:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d14:	4570      	cmp	r0, lr
 8001d16:	4607      	mov	r7, r0
 8001d18:	4619      	mov	r1, r3
 8001d1a:	bf28      	it	cs
 8001d1c:	4677      	movcs	r7, lr
 8001d1e:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001d22:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001d26:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d2a:	42b7      	cmp	r7, r6
 8001d2c:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d2e:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001d32:	bf28      	it	cs
 8001d34:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d36:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d38:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001d3c:	46ca      	mov	sl, r9
 8001d3e:	bf28      	it	cs
 8001d40:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d42:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001d46:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001d48:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001d4a:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001d4e:	d80d      	bhi.n	8001d6c <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001d50:	45ac      	cmp	ip, r5
 8001d52:	d80b      	bhi.n	8001d6c <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001d54:	42b7      	cmp	r7, r6
 8001d56:	d809      	bhi.n	8001d6c <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001d58:	45c1      	cmp	r9, r8
 8001d5a:	d807      	bhi.n	8001d6c <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001d5c:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001d60:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	fab3 f383 	clz	r3, r3
 8001d6a:	095b      	lsrs	r3, r3, #5
 8001d6c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001d70:	4620      	mov	r0, r4
 8001d72:	f7ff fd29 	bl	80017c8 <ASPEP_sendBeacon>
 8001d76:	e6e8      	b.n	8001b4a <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001d78:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001d82:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001d84:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001d86:	2204      	movs	r2, #4
 8001d88:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d8a:	6960      	ldr	r0, [r4, #20]
 8001d8c:	4798      	blx	r3
 8001d8e:	e706      	b.n	8001b9e <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001d90:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001d94:	2101      	movs	r1, #1
 8001d96:	f7ff fd5d 	bl	8001854 <ASPEP_sendPing>
 8001d9a:	e6d6      	b.n	8001b4a <ASPEP_RXframeProcess+0x5a>
 8001d9c:	0800c1dc 	.word	0x0800c1dc
 8001da0:	0800c1cc 	.word	0x0800c1cc

08001da4 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001da4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8001da6:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8001daa:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001dac:	b143      	cbz	r3, 8001dc0 <ASPEP_HWDataReceivedIT+0x1c>
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d000      	beq.n	8001db4 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001db2:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001db4:	2200      	movs	r2, #0
 8001db6:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 8001dba:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 8001dbe:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001dc0:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8001e40 <ASPEP_HWDataReceivedIT+0x9c>)
 8001dc4:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001dc6:	5cd3      	ldrb	r3, [r2, r3]
 8001dc8:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001dcc:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001dce:	5cd3      	ldrb	r3, [r2, r3]
 8001dd0:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001dd4:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001ddc:	5cd3      	ldrb	r3, [r2, r3]
 8001dde:	b95b      	cbnz	r3, 8001df8 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001de0:	7f03      	ldrb	r3, [r0, #28]
 8001de2:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8001de6:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001de8:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8001dea:	d809      	bhi.n	8001e00 <ASPEP_HWDataReceivedIT+0x5c>
 8001dec:	2b04      	cmp	r3, #4
 8001dee:	d91f      	bls.n	8001e30 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 8001df0:	2301      	movs	r3, #1
 8001df2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8001df6:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8001df8:	2304      	movs	r3, #4
 8001dfa:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001dfe:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 8001e00:	2b09      	cmp	r3, #9
 8001e02:	d115      	bne.n	8001e30 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001e04:	8b83      	ldrh	r3, [r0, #28]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d0ef      	beq.n	8001df0 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8001e10:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d30f      	bcc.n	8001e38 <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001e18:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8001e1c:	6981      	ldr	r1, [r0, #24]
 8001e1e:	6940      	ldr	r0, [r0, #20]
 8001e20:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001e24:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001e26:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8001e2e:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001e30:	2301      	movs	r3, #1
 8001e32:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8001e36:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8001e38:	2302      	movs	r3, #2
 8001e3a:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001e3e:	bd10      	pop	{r4, pc}
 8001e40:	0800c1dc 	.word	0x0800c1dc

08001e44 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8001e44:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001e46:	2200      	movs	r2, #0
 8001e48:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001e4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001e4e:	6940      	ldr	r0, [r0, #20]
 8001e50:	2204      	movs	r2, #4
 8001e52:	311c      	adds	r1, #28
 8001e54:	4718      	bx	r3
 8001e56:	bf00      	nop

08001e58 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE BEGIN 0 */


//keep latest command only
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 8001e58:	07ca      	lsls	r2, r1, #31
 8001e5a:	d515      	bpl.n	8001e88 <HAL_FDCAN_RxFifo0Callback+0x30>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        // Keep reading until FIFO is empty, but only keep the last message
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8001e5e:	4f0b      	ldr	r7, [pc, #44]	@ (8001e8c <HAL_FDCAN_RxFifo0Callback+0x34>)
 8001e60:	4e0b      	ldr	r6, [pc, #44]	@ (8001e90 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8001e62:	4604      	mov	r4, r0
 8001e64:	e001      	b.n	8001e6a <HAL_FDCAN_RxFifo0Callback+0x12>
 8001e66:	f005 f971 	bl	800714c <HAL_FDCAN_GetRxMessage>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001e6a:	2140      	movs	r1, #64	@ 0x40
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f005 fa0d 	bl	800728c <HAL_FDCAN_GetRxFifoFillLevel>
 8001e72:	4605      	mov	r5, r0
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8001e74:	2140      	movs	r1, #64	@ 0x40
 8001e76:	463b      	mov	r3, r7
 8001e78:	4632      	mov	r2, r6
 8001e7a:	4620      	mov	r0, r4
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001e7c:	2d00      	cmp	r5, #0
 8001e7e:	d1f2      	bne.n	8001e66 <HAL_FDCAN_RxFifo0Callback+0xe>
        }

        received_CAN_command = true;
 8001e80:	4b04      	ldr	r3, [pc, #16]	@ (8001e94 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	701a      	strb	r2, [r3, #0]
    }
}
 8001e86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	20000464 	.word	0x20000464
 8001e90:	2000046c 	.word	0x2000046c
 8001e94:	20000494 	.word	0x20000494

08001e98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e98:	b510      	push	{r4, lr}
 8001e9a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e9c:	2238      	movs	r2, #56	@ 0x38
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	a806      	add	r0, sp, #24
 8001ea2:	f009 f9d7 	bl	800b254 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001eac:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001eb0:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001eb2:	f005 fe85 	bl	8007bc0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001eb6:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001f08 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001eba:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ebc:	2255      	movs	r2, #85	@ 0x55
 8001ebe:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ec2:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001ec4:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ec6:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ec8:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ecc:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001ed0:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ed4:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ed6:	f005 feed 	bl	8007cb4 <HAL_RCC_OscConfig>
 8001eda:	b108      	cbz	r0, 8001ee0 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ede:	e7fe      	b.n	8001ede <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ee0:	2104      	movs	r1, #4
 8001ee2:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ee4:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ee6:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eea:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001eee:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ef2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001ef4:	f006 f95c 	bl	80081b0 <HAL_RCC_ClockConfig>
 8001ef8:	b108      	cbz	r0, 8001efe <SystemClock_Config+0x66>
 8001efa:	b672      	cpsid	i
  while (1)
 8001efc:	e7fe      	b.n	8001efc <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 8001efe:	f006 fa85 	bl	800840c <HAL_RCC_EnableCSS>
}
 8001f02:	b014      	add	sp, #80	@ 0x50
 8001f04:	bd10      	pop	{r4, pc}
 8001f06:	bf00      	nop
 8001f08:	00000001 	.word	0x00000001
 8001f0c:	00010000 	.word	0x00010000

08001f10 <MX_USART2_UART_Init>:
{
 8001f10:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001f12:	4816      	ldr	r0, [pc, #88]	@ (8001f6c <MX_USART2_UART_Init+0x5c>)
 8001f14:	4c16      	ldr	r4, [pc, #88]	@ (8001f70 <MX_USART2_UART_Init+0x60>)
  huart2.Init.BaudRate = 1843200;
 8001f16:	f44f 11e1 	mov.w	r1, #1843200	@ 0x1c2000
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f1a:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 1843200;
 8001f1c:	e9c4 0100 	strd	r0, r1, [r4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f20:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f22:	4620      	mov	r0, r4
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f24:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f28:	e9c4 3204 	strd	r3, r2, [r4, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f2c:	e9c4 3306 	strd	r3, r3, [r4, #24]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f30:	e9c4 3308 	strd	r3, r3, [r4, #32]
 8001f34:	62a3      	str	r3, [r4, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f36:	f007 fb2b 	bl	8009590 <HAL_UART_Init>
 8001f3a:	b108      	cbz	r0, 8001f40 <MX_USART2_UART_Init+0x30>
 8001f3c:	b672      	cpsid	i
  while (1)
 8001f3e:	e7fe      	b.n	8001f3e <MX_USART2_UART_Init+0x2e>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f40:	4601      	mov	r1, r0
 8001f42:	4620      	mov	r0, r4
 8001f44:	f007 fb76 	bl	8009634 <HAL_UARTEx_SetTxFifoThreshold>
 8001f48:	b108      	cbz	r0, 8001f4e <MX_USART2_UART_Init+0x3e>
 8001f4a:	b672      	cpsid	i
  while (1)
 8001f4c:	e7fe      	b.n	8001f4c <MX_USART2_UART_Init+0x3c>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4e:	4601      	mov	r1, r0
 8001f50:	4620      	mov	r0, r4
 8001f52:	f007 fbb1 	bl	80096b8 <HAL_UARTEx_SetRxFifoThreshold>
 8001f56:	b108      	cbz	r0, 8001f5c <MX_USART2_UART_Init+0x4c>
 8001f58:	b672      	cpsid	i
  while (1)
 8001f5a:	e7fe      	b.n	8001f5a <MX_USART2_UART_Init+0x4a>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f5c:	4620      	mov	r0, r4
 8001f5e:	f007 fb4b 	bl	80095f8 <HAL_UARTEx_DisableFifoMode>
 8001f62:	b108      	cbz	r0, 8001f68 <MX_USART2_UART_Init+0x58>
 8001f64:	b672      	cpsid	i
  while (1)
 8001f66:	e7fe      	b.n	8001f66 <MX_USART2_UART_Init+0x56>
}
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40004400 	.word	0x40004400
 8001f70:	20000560 	.word	0x20000560

08001f74 <main>:
{
 8001f74:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f78:	2500      	movs	r5, #0
{
 8001f7a:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 8001f7c:	f003 fcfc 	bl	8005978 <HAL_Init>
  SystemClock_Config();
 8001f80:	f7ff ff8a 	bl	8001e98 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	e9cd 5517 	strd	r5, r5, [sp, #92]	@ 0x5c
 8001f88:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f8c:	4eb0      	ldr	r6, [pc, #704]	@ (8002250 <main+0x2dc>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	951b      	str	r5, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f90:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001f92:	48b0      	ldr	r0, [pc, #704]	@ (8002254 <main+0x2e0>)
  hadc1.Instance = ADC1;
 8001f94:	f8df a2fc 	ldr.w	sl, [pc, #764]	@ 8002294 <main+0x320>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f98:	f043 0304 	orr.w	r3, r3, #4
 8001f9c:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001f9e:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fa0:	f003 0304 	and.w	r3, r3, #4
 8001fa4:	9305      	str	r3, [sp, #20]
 8001fa6:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa8:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001faa:	f043 0320 	orr.w	r3, r3, #32
 8001fae:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001fb0:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	9306      	str	r3, [sp, #24]
 8001fb8:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fba:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001fc2:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	9307      	str	r3, [sp, #28]
 8001fca:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fcc:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fce:	f043 0302 	orr.w	r3, r3, #2
 8001fd2:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001fd4:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001fd6:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fda:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fdc:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fde:	2140      	movs	r1, #64	@ 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe0:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fe4:	2740      	movs	r7, #64	@ 0x40
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);
 8001fe6:	f005 fd63 	bl	8007ab0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fea:	489a      	ldr	r0, [pc, #616]	@ (8002254 <main+0x2e0>)
 8001fec:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fee:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	e9cd 7417 	strd	r7, r4, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff6:	f005 faa7 	bl	8007548 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001ffa:	f44f 6c80 	mov.w	ip, #1024	@ 0x400
 8001ffe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8002002:	4894      	ldr	r0, [pc, #592]	@ (8002254 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002004:	9519      	str	r5, [sp, #100]	@ 0x64
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8002006:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002008:	e9cd c317 	strd	ip, r3, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800200c:	f005 fa9c 	bl	8007548 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002010:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	64b3      	str	r3, [r6, #72]	@ 0x48
 8002018:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800201a:	f003 0304 	and.w	r3, r3, #4
 800201e:	9303      	str	r3, [sp, #12]
 8002020:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002022:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8002024:	4323      	orrs	r3, r4
 8002026:	64b3      	str	r3, [r6, #72]	@ 0x48
 8002028:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 800202a:	950c      	str	r5, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 800202c:	4023      	ands	r3, r4
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800202e:	4629      	mov	r1, r5
 8002030:	223c      	movs	r2, #60	@ 0x3c
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002032:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002034:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 8002036:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203a:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800203c:	f009 f90a 	bl	800b254 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8002040:	2220      	movs	r2, #32
 8002042:	4629      	mov	r1, r5
 8002044:	a80f      	add	r0, sp, #60	@ 0x3c
 8002046:	f009 f905 	bl	800b254 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800204a:	f44f 4800 	mov.w	r8, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800204e:	e9ca 5501 	strd	r5, r5, [sl, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002052:	e9ca 5404 	strd	r5, r4, [sl, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002056:	e9ca 550b 	strd	r5, r5, [sl, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800205a:	f8aa 501c 	strh.w	r5, [sl, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800205e:	f88a 5024 	strb.w	r5, [sl, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002062:	f88a 5038 	strb.w	r5, [sl, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002066:	f8ca 503c 	str.w	r5, [sl, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800206a:	f88a 5040 	strb.w	r5, [sl, #64]	@ 0x40
  hadc1.Instance = ADC1;
 800206e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002072:	2504      	movs	r5, #4
  hadc1.Init.NbrOfConversion = 2;
 8002074:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002076:	4650      	mov	r0, sl
  hadc1.Instance = ADC1;
 8002078:	f8ca 2000 	str.w	r2, [sl]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800207c:	f8ca 800c 	str.w	r8, [sl, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002080:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc1.Init.NbrOfConversion = 2;
 8002084:	f8ca 6020 	str.w	r6, [sl, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002088:	f003 fcb2 	bl	80059f0 <HAL_ADC_Init>
 800208c:	b108      	cbz	r0, 8002092 <main+0x11e>
 800208e:	b672      	cpsid	i
  while (1)
 8002090:	e7fe      	b.n	8002090 <main+0x11c>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8002092:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002094:	a90c      	add	r1, sp, #48	@ 0x30
 8002096:	4650      	mov	r0, sl
 8002098:	f004 fb0c 	bl	80066b4 <HAL_ADCEx_MultiModeConfigChannel>
 800209c:	b108      	cbz	r0, 80020a2 <main+0x12e>
 800209e:	b672      	cpsid	i
  while (1)
 80020a0:	e7fe      	b.n	80020a0 <main+0x12c>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80020a2:	4b6d      	ldr	r3, [pc, #436]	@ (8002258 <main+0x2e4>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80020a4:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80020a8:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 80020ac:	e9cd 501b 	strd	r5, r0, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 80020b0:	e9cd 3b17 	strd	r3, fp, [sp, #92]	@ 0x5c
  sConfigInjected.QueueInjectedContext = DISABLE;
 80020b4:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80020b8:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80020bc:	2380      	movs	r3, #128	@ 0x80
 80020be:	2084      	movs	r0, #132	@ 0x84
 80020c0:	e9cd 0321 	strd	r0, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80020c4:	f04f 097f 	mov.w	r9, #127	@ 0x7f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020c8:	a917      	add	r1, sp, #92	@ 0x5c
 80020ca:	4650      	mov	r0, sl
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 80020cc:	9419      	str	r4, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 80020ce:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 80020d0:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020d4:	f003 fff0 	bl	80060b8 <HAL_ADCEx_InjectedConfigChannel>
 80020d8:	b108      	cbz	r0, 80020de <main+0x16a>
 80020da:	b672      	cpsid	i
  while (1)
 80020dc:	e7fe      	b.n	80020dc <main+0x168>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80020de:	4a5f      	ldr	r2, [pc, #380]	@ (800225c <main+0x2e8>)
 80020e0:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020e4:	a917      	add	r1, sp, #92	@ 0x5c
 80020e6:	4650      	mov	r0, sl
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80020e8:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80020ec:	f003 ffe4 	bl	80060b8 <HAL_ADCEx_InjectedConfigChannel>
 80020f0:	b108      	cbz	r0, 80020f6 <main+0x182>
 80020f2:	b672      	cpsid	i
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <main+0x180>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020f6:	495a      	ldr	r1, [pc, #360]	@ (8002260 <main+0x2ec>)
  sConfig.Offset = 0;
 80020f8:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80020fa:	2206      	movs	r2, #6
 80020fc:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002100:	4650      	mov	r0, sl
 8002102:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002104:	e9cd 5911 	strd	r5, r9, [sp, #68]	@ 0x44
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002108:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800210a:	f003 fd65 	bl	8005bd8 <HAL_ADC_ConfigChannel>
 800210e:	b108      	cbz	r0, 8002114 <main+0x1a0>
 8002110:	b672      	cpsid	i
  while (1)
 8002112:	e7fe      	b.n	8002112 <main+0x19e>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002114:	4a53      	ldr	r2, [pc, #332]	@ (8002264 <main+0x2f0>)
 8002116:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002118:	a90f      	add	r1, sp, #60	@ 0x3c
 800211a:	4650      	mov	r0, sl
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800211c:	e9cd 230f 	strd	r2, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002120:	f003 fd5a 	bl	8005bd8 <HAL_ADC_ConfigChannel>
 8002124:	4601      	mov	r1, r0
 8002126:	b108      	cbz	r0, 800212c <main+0x1b8>
 8002128:	b672      	cpsid	i
  while (1)
 800212a:	e7fe      	b.n	800212a <main+0x1b6>
  hadc2.Instance = ADC2;
 800212c:	f8df a168 	ldr.w	sl, [pc, #360]	@ 8002298 <main+0x324>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8002130:	9001      	str	r0, [sp, #4]
 8002132:	223c      	movs	r2, #60	@ 0x3c
 8002134:	a817      	add	r0, sp, #92	@ 0x5c
 8002136:	f009 f88d 	bl	800b254 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800213a:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 800213c:	4a4a      	ldr	r2, [pc, #296]	@ (8002268 <main+0x2f4>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 800213e:	f8ca 800c 	str.w	r8, [sl, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002142:	4650      	mov	r0, sl
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002144:	e9ca 1101 	strd	r1, r1, [sl, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002148:	e9ca 1404 	strd	r1, r4, [sl, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800214c:	f8ca 5018 	str.w	r5, [sl, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8002150:	f8aa 101c 	strh.w	r1, [sl, #28]
  hadc2.Init.NbrOfConversion = 1;
 8002154:	f8ca 4020 	str.w	r4, [sl, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002158:	f88a 1024 	strb.w	r1, [sl, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800215c:	f88a 1038 	strb.w	r1, [sl, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002160:	f8ca 103c 	str.w	r1, [sl, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8002164:	f88a 1040 	strb.w	r1, [sl, #64]	@ 0x40
  hadc2.Instance = ADC2;
 8002168:	f8ca 2000 	str.w	r2, [sl]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800216c:	f003 fc40 	bl	80059f0 <HAL_ADC_Init>
 8002170:	b108      	cbz	r0, 8002176 <main+0x202>
 8002172:	b672      	cpsid	i
  while (1)
 8002174:	e7fe      	b.n	8002174 <main+0x200>
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8002176:	e9cd b418 	strd	fp, r4, [sp, #96]	@ 0x60
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800217a:	4a3c      	ldr	r2, [pc, #240]	@ (800226c <main+0x2f8>)
  sConfigInjected.InjectedOffset = 0;
 800217c:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800217e:	f04f 0b84 	mov.w	fp, #132	@ 0x84
 8002182:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002184:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002188:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800218c:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002190:	a917      	add	r1, sp, #92	@ 0x5c
 8002192:	4650      	mov	r0, sl
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002194:	e9cd 951a 	strd	r9, r5, [sp, #104]	@ 0x68
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002198:	e9cd b321 	strd	fp, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedNbrOfConversion = 2;
 800219c:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800219e:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80021a0:	f003 ff8a 	bl	80060b8 <HAL_ADCEx_InjectedConfigChannel>
 80021a4:	b108      	cbz	r0, 80021aa <main+0x236>
 80021a6:	b672      	cpsid	i
  while (1)
 80021a8:	e7fe      	b.n	80021a8 <main+0x234>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80021aa:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8002258 <main+0x2e4>
 80021ae:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80021b2:	4650      	mov	r0, sl
 80021b4:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 80021b6:	e9cd 9317 	strd	r9, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 80021ba:	f003 ff7d 	bl	80060b8 <HAL_ADCEx_InjectedConfigChannel>
 80021be:	4603      	mov	r3, r0
 80021c0:	b108      	cbz	r0, 80021c6 <main+0x252>
 80021c2:	b672      	cpsid	i
  while (1)
 80021c4:	e7fe      	b.n	80021c4 <main+0x250>
  hcomp1.Instance = COMP1;
 80021c6:	482a      	ldr	r0, [pc, #168]	@ (8002270 <main+0x2fc>)
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80021c8:	e9c0 3701 	strd	r3, r7, [r0, #4]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80021cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80021d0:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Instance = COMP1;
 80021d4:	4b27      	ldr	r3, [pc, #156]	@ (8002274 <main+0x300>)
 80021d6:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80021d8:	f004 fad0 	bl	800677c <HAL_COMP_Init>
 80021dc:	b108      	cbz	r0, 80021e2 <main+0x26e>
 80021de:	b672      	cpsid	i
  while (1)
 80021e0:	e7fe      	b.n	80021e0 <main+0x26c>
  hcomp2.Instance = COMP2;
 80021e2:	4825      	ldr	r0, [pc, #148]	@ (8002278 <main+0x304>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80021e4:	f8df 80b4 	ldr.w	r8, [pc, #180]	@ 800229c <main+0x328>
 80021e8:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80021ea:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80021ec:	e9c0 8300 	strd	r8, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80021f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80021f4:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 80021f8:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 80021fa:	f004 fabf 	bl	800677c <HAL_COMP_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	b108      	cbz	r0, 8002206 <main+0x292>
 8002202:	b672      	cpsid	i
  while (1)
 8002204:	e7fe      	b.n	8002204 <main+0x290>
  hcomp4.Instance = COMP4;
 8002206:	481d      	ldr	r0, [pc, #116]	@ (800227c <main+0x308>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8002208:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800220c:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002210:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 8002214:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <main+0x30c>)
 8002216:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 8002218:	f004 fab0 	bl	800677c <HAL_COMP_Init>
 800221c:	b108      	cbz	r0, 8002222 <main+0x2ae>
 800221e:	b672      	cpsid	i
  while (1)
 8002220:	e7fe      	b.n	8002220 <main+0x2ac>
  hcordic.Instance = CORDIC;
 8002222:	4818      	ldr	r0, [pc, #96]	@ (8002284 <main+0x310>)
 8002224:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <main+0x314>)
 8002226:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 8002228:	f004 fb48 	bl	80068bc <HAL_CORDIC_Init>
 800222c:	4601      	mov	r1, r0
 800222e:	b108      	cbz	r0, 8002234 <main+0x2c0>
 8002230:	b672      	cpsid	i
  while (1)
 8002232:	e7fe      	b.n	8002232 <main+0x2be>
  hdac3.Instance = DAC3;
 8002234:	4d15      	ldr	r5, [pc, #84]	@ (800228c <main+0x318>)
  DAC_ChannelConfTypeDef sConfig = {0};
 8002236:	2230      	movs	r2, #48	@ 0x30
 8002238:	a817      	add	r0, sp, #92	@ 0x5c
 800223a:	f009 f80b 	bl	800b254 <memset>
  hdac3.Instance = DAC3;
 800223e:	4b14      	ldr	r3, [pc, #80]	@ (8002290 <main+0x31c>)
 8002240:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8002242:	4628      	mov	r0, r5
 8002244:	f004 fbe2 	bl	8006a0c <HAL_DAC_Init>
 8002248:	4602      	mov	r2, r0
 800224a:	b348      	cbz	r0, 80022a0 <main+0x32c>
 800224c:	b672      	cpsid	i
  while (1)
 800224e:	e7fe      	b.n	800224e <main+0x2da>
 8002250:	40021000 	.word	0x40021000
 8002254:	48000800 	.word	0x48000800
 8002258:	0c900008 	.word	0x0c900008
 800225c:	32601000 	.word	0x32601000
 8002260:	04300002 	.word	0x04300002
 8002264:	14f00020 	.word	0x14f00020
 8002268:	50000100 	.word	0x50000100
 800226c:	cb8c0000 	.word	0xcb8c0000
 8002270:	20000828 	.word	0x20000828
 8002274:	40010200 	.word	0x40010200
 8002278:	20000804 	.word	0x20000804
 800227c:	200007e0 	.word	0x200007e0
 8002280:	4001020c 	.word	0x4001020c
 8002284:	200007b8 	.word	0x200007b8
 8002288:	40020c00 	.word	0x40020c00
 800228c:	200007a4 	.word	0x200007a4
 8002290:	50001000 	.word	0x50001000
 8002294:	200008b8 	.word	0x200008b8
 8002298:	2000084c 	.word	0x2000084c
 800229c:	40010204 	.word	0x40010204
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80022a0:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80022a2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80022a6:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80022aa:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80022ac:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022ae:	a917      	add	r1, sp, #92	@ 0x5c
 80022b0:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 80022b2:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80022b6:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80022b8:	f004 fbbe 	bl	8006a38 <HAL_DAC_ConfigChannel>
 80022bc:	b108      	cbz	r0, 80022c2 <main+0x34e>
 80022be:	b672      	cpsid	i
  while (1)
 80022c0:	e7fe      	b.n	80022c0 <main+0x34c>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80022c2:	4628      	mov	r0, r5
 80022c4:	2210      	movs	r2, #16
 80022c6:	a917      	add	r1, sp, #92	@ 0x5c
 80022c8:	f004 fbb6 	bl	8006a38 <HAL_DAC_ConfigChannel>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b108      	cbz	r0, 80022d4 <main+0x360>
 80022d0:	b672      	cpsid	i
  while (1)
 80022d2:	e7fe      	b.n	80022d2 <main+0x35e>
  hopamp1.Instance = OPAMP1;
 80022d4:	48a0      	ldr	r0, [pc, #640]	@ (8002558 <main+0x5e4>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80022d6:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 80022da:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80022de:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 80022e0:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80022e2:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80022e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80022e6:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 80022ea:	4b9c      	ldr	r3, [pc, #624]	@ (800255c <main+0x5e8>)
 80022ec:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80022ee:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 80022f2:	f005 fbed 	bl	8007ad0 <HAL_OPAMP_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	b108      	cbz	r0, 80022fe <main+0x38a>
 80022fa:	b672      	cpsid	i
  while (1)
 80022fc:	e7fe      	b.n	80022fc <main+0x388>
  hopamp2.Instance = OPAMP2;
 80022fe:	4898      	ldr	r0, [pc, #608]	@ (8002560 <main+0x5ec>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002300:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002304:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8002306:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002308:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800230a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 800230c:	4b95      	ldr	r3, [pc, #596]	@ (8002564 <main+0x5f0>)
 800230e:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002310:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8002314:	f005 fbdc 	bl	8007ad0 <HAL_OPAMP_Init>
 8002318:	4603      	mov	r3, r0
 800231a:	b108      	cbz	r0, 8002320 <main+0x3ac>
 800231c:	b672      	cpsid	i
  while (1)
 800231e:	e7fe      	b.n	800231e <main+0x3aa>
  hopamp3.Instance = OPAMP3;
 8002320:	4891      	ldr	r0, [pc, #580]	@ (8002568 <main+0x5f4>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002322:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8002326:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002328:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800232a:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800232c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 800232e:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 8002330:	4b8e      	ldr	r3, [pc, #568]	@ (800256c <main+0x5f8>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8002332:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 8002334:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 8002336:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8002338:	f005 fbca 	bl	8007ad0 <HAL_OPAMP_Init>
 800233c:	4604      	mov	r4, r0
 800233e:	b108      	cbz	r0, 8002344 <main+0x3d0>
 8002340:	b672      	cpsid	i
  while (1)
 8002342:	e7fe      	b.n	8002342 <main+0x3ce>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 8002344:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002348:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 800234c:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 8002350:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 8002354:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800235c:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800235e:	4601      	mov	r1, r0
 8002360:	2234      	movs	r2, #52	@ 0x34
 8002362:	a817      	add	r0, sp, #92	@ 0x5c
 8002364:	f008 ff76 	bl	800b254 <memset>
  htim1.Instance = TIM1;
 8002368:	4881      	ldr	r0, [pc, #516]	@ (8002570 <main+0x5fc>)
 800236a:	4b82      	ldr	r3, [pc, #520]	@ (8002574 <main+0x600>)
 800236c:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 800236e:	f04f 0e20 	mov.w	lr, #32
 8002372:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 8002376:	e9c0 e302 	strd	lr, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800237a:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 800237e:	6145      	str	r5, [r0, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8002380:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002382:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002384:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002386:	f006 fa55 	bl	8008834 <HAL_TIM_PWM_Init>
 800238a:	b108      	cbz	r0, 8002390 <main+0x41c>
 800238c:	b672      	cpsid	i
  while (1)
 800238e:	e7fe      	b.n	800238e <main+0x41a>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002390:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002392:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002394:	4876      	ldr	r0, [pc, #472]	@ (8002570 <main+0x5fc>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002396:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002398:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800239a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800239e:	f006 fc91 	bl	8008cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80023a2:	b108      	cbz	r0, 80023a8 <main+0x434>
 80023a4:	b672      	cpsid	i
  while (1)
 80023a6:	e7fe      	b.n	80023a6 <main+0x432>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80023a8:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 80023aa:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80023ac:	2302      	movs	r3, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023ae:	4870      	ldr	r0, [pc, #448]	@ (8002570 <main+0x5fc>)
 80023b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80023b2:	4629      	mov	r1, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 80023b4:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023b8:	f006 fd24 	bl	8008e04 <HAL_TIMEx_ConfigBreakInput>
 80023bc:	b108      	cbz	r0, 80023c2 <main+0x44e>
 80023be:	b672      	cpsid	i
  while (1)
 80023c0:	e7fe      	b.n	80023c0 <main+0x44c>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80023c2:	2604      	movs	r6, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023c4:	486a      	ldr	r0, [pc, #424]	@ (8002570 <main+0x5fc>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 80023c6:	960c      	str	r6, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023c8:	aa0c      	add	r2, sp, #48	@ 0x30
 80023ca:	4629      	mov	r1, r5
 80023cc:	f006 fd1a 	bl	8008e04 <HAL_TIMEx_ConfigBreakInput>
 80023d0:	b108      	cbz	r0, 80023d6 <main+0x462>
 80023d2:	b672      	cpsid	i
  while (1)
 80023d4:	e7fe      	b.n	80023d4 <main+0x460>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023d6:	aa0c      	add	r2, sp, #48	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80023d8:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023da:	4865      	ldr	r0, [pc, #404]	@ (8002570 <main+0x5fc>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 80023dc:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 80023de:	4629      	mov	r1, r5
 80023e0:	f006 fd10 	bl	8008e04 <HAL_TIMEx_ConfigBreakInput>
 80023e4:	4602      	mov	r2, r0
 80023e6:	b108      	cbz	r0, 80023ec <main+0x478>
 80023e8:	b672      	cpsid	i
  while (1)
 80023ea:	e7fe      	b.n	80023ea <main+0x476>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80023ec:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80023f0:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80023f4:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 80023f6:	2760      	movs	r7, #96	@ 0x60
 80023f8:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023fc:	485c      	ldr	r0, [pc, #368]	@ (8002570 <main+0x5fc>)
 80023fe:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8002400:	e9cd 730f 	strd	r7, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002404:	f006 fb78 	bl	8008af8 <HAL_TIM_PWM_ConfigChannel>
 8002408:	b108      	cbz	r0, 800240e <main+0x49a>
 800240a:	b672      	cpsid	i
  while (1)
 800240c:	e7fe      	b.n	800240c <main+0x498>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800240e:	4858      	ldr	r0, [pc, #352]	@ (8002570 <main+0x5fc>)
 8002410:	4632      	mov	r2, r6
 8002412:	a90f      	add	r1, sp, #60	@ 0x3c
 8002414:	f006 fb70 	bl	8008af8 <HAL_TIM_PWM_ConfigChannel>
 8002418:	b108      	cbz	r0, 800241e <main+0x4aa>
 800241a:	b672      	cpsid	i
  while (1)
 800241c:	e7fe      	b.n	800241c <main+0x4a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800241e:	4854      	ldr	r0, [pc, #336]	@ (8002570 <main+0x5fc>)
 8002420:	2208      	movs	r2, #8
 8002422:	a90f      	add	r1, sp, #60	@ 0x3c
 8002424:	f006 fb68 	bl	8008af8 <HAL_TIM_PWM_ConfigChannel>
 8002428:	b108      	cbz	r0, 800242e <main+0x4ba>
 800242a:	b672      	cpsid	i
  while (1)
 800242c:	e7fe      	b.n	800242c <main+0x4b8>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800242e:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002432:	484f      	ldr	r0, [pc, #316]	@ (8002570 <main+0x5fc>)
 8002434:	220c      	movs	r2, #12
 8002436:	a90f      	add	r1, sp, #60	@ 0x3c
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 8002438:	e9cd 430f 	strd	r4, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800243c:	f006 fb5c 	bl	8008af8 <HAL_TIM_PWM_ConfigChannel>
 8002440:	b108      	cbz	r0, 8002446 <main+0x4d2>
 8002442:	b672      	cpsid	i
  while (1)
 8002444:	e7fe      	b.n	8002444 <main+0x4d0>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8002446:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800244a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800244e:	e9cd 1217 	strd	r1, r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.BreakFilter = 3;
 8002452:	2603      	movs	r6, #3
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 8002454:	223f      	movs	r2, #63	@ 0x3f
 8002456:	e9cd 0219 	strd	r0, r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800245a:	e9cd 601d 	strd	r6, r0, [sp, #116]	@ 0x74
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800245e:	e9cd 6021 	strd	r6, r0, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002462:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8002466:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800246a:	901f      	str	r0, [sp, #124]	@ 0x7c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800246c:	9023      	str	r0, [sp, #140]	@ 0x8c
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800246e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002472:	483f      	ldr	r0, [pc, #252]	@ (8002570 <main+0x5fc>)
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002474:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002476:	a917      	add	r1, sp, #92	@ 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002478:	e9cd 421b 	strd	r4, r2, [sp, #108]	@ 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800247c:	f006 fc74 	bl	8008d68 <HAL_TIMEx_ConfigBreakDeadTime>
 8002480:	4604      	mov	r4, r0
 8002482:	b108      	cbz	r0, 8002488 <main+0x514>
 8002484:	b672      	cpsid	i
  while (1)
 8002486:	e7fe      	b.n	8002486 <main+0x512>
  HAL_TIM_MspPostInit(&htim1);
 8002488:	4839      	ldr	r0, [pc, #228]	@ (8002570 <main+0x5fc>)
 800248a:	f003 f809 	bl	80054a0 <HAL_TIM_MspPostInit>
  htim4.Instance = TIM4;
 800248e:	483a      	ldr	r0, [pc, #232]	@ (8002578 <main+0x604>)
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002490:	9617      	str	r6, [sp, #92]	@ 0x5c
  sConfig.IC1Filter = M1_ENC_IC_FILTER;
 8002492:	230c      	movs	r3, #12
 8002494:	931b      	str	r3, [sp, #108]	@ 0x6c
  sConfig.IC2Filter = M1_ENC_IC_FILTER;
 8002496:	931f      	str	r3, [sp, #124]	@ 0x7c
  htim4.Instance = TIM4;
 8002498:	4b38      	ldr	r3, [pc, #224]	@ (800257c <main+0x608>)
 800249a:	6003      	str	r3, [r0, #0]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 800249c:	a917      	add	r1, sp, #92	@ 0x5c
  htim4.Init.Period = M1_PULSE_NBR;
 800249e:	f640 135f 	movw	r3, #2399	@ 0x95f
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024a2:	e9cd 440f 	strd	r4, r4, [sp, #60]	@ 0x3c
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
  TIM_Encoder_InitTypeDef sConfig = {0};
 80024aa:	9418      	str	r4, [sp, #96]	@ 0x60
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024ac:	9411      	str	r4, [sp, #68]	@ 0x44
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80024ae:	9519      	str	r5, [sp, #100]	@ 0x64
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80024b0:	951d      	str	r5, [sp, #116]	@ 0x74
  TIM_Encoder_InitTypeDef sConfig = {0};
 80024b2:	941a      	str	r4, [sp, #104]	@ 0x68
 80024b4:	941c      	str	r4, [sp, #112]	@ 0x70
 80024b6:	941e      	str	r4, [sp, #120]	@ 0x78
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024b8:	6104      	str	r4, [r0, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ba:	6184      	str	r4, [r0, #24]
  htim4.Init.Period = M1_PULSE_NBR;
 80024bc:	60c3      	str	r3, [r0, #12]
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 80024be:	f006 fa37 	bl	8008930 <HAL_TIM_Encoder_Init>
 80024c2:	b108      	cbz	r0, 80024c8 <main+0x554>
 80024c4:	b672      	cpsid	i
  while (1)
 80024c6:	e7fe      	b.n	80024c6 <main+0x552>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c8:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024ca:	482b      	ldr	r0, [pc, #172]	@ (8002578 <main+0x604>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024cc:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024ce:	a90f      	add	r1, sp, #60	@ 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024d0:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80024d2:	f006 fbf7 	bl	8008cc4 <HAL_TIMEx_MasterConfigSynchronization>
 80024d6:	4605      	mov	r5, r0
 80024d8:	b108      	cbz	r0, 80024de <main+0x56a>
 80024da:	b672      	cpsid	i
  while (1)
 80024dc:	e7fe      	b.n	80024dc <main+0x568>
  hfdcan1.Instance = FDCAN1;
 80024de:	4c28      	ldr	r4, [pc, #160]	@ (8002580 <main+0x60c>)
  MX_USART2_UART_Init();
 80024e0:	f7ff fd16 	bl	8001f10 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 80024e4:	f001 f902 	bl	80036ec <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 80024e8:	4b26      	ldr	r3, [pc, #152]	@ (8002584 <main+0x610>)
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80024ea:	8225      	strh	r5, [r4, #16]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80024ec:	2601      	movs	r6, #1
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80024ee:	2702      	movs	r7, #2
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80024f0:	e9c4 3500 	strd	r3, r5, [r4]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80024f4:	4620      	mov	r0, r4
  hfdcan1.Init.NominalPrescaler = 68;
 80024f6:	2344      	movs	r3, #68	@ 0x44
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80024f8:	e9c4 5502 	strd	r5, r5, [r4, #8]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80024fc:	e9c4 6706 	strd	r6, r7, [r4, #24]
  hfdcan1.Init.DataPrescaler = 1;
 8002500:	e9c4 7608 	strd	r7, r6, [r4, #32]
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002504:	e9c4 660a 	strd	r6, r6, [r4, #40]	@ 0x28
  hfdcan1.Init.StdFiltersNbr = 0;
 8002508:	e9c4 650c 	strd	r6, r5, [r4, #48]	@ 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800250c:	e9c4 550e 	strd	r5, r5, [r4, #56]	@ 0x38
  hfdcan1.Init.ProtocolException = DISABLE;
 8002510:	74a5      	strb	r5, [r4, #18]
  hfdcan1.Init.NominalPrescaler = 68;
 8002512:	6163      	str	r3, [r4, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002514:	f004 fc86 	bl	8006e24 <HAL_FDCAN_Init>
 8002518:	b108      	cbz	r0, 800251e <main+0x5aa>
 800251a:	b672      	cpsid	i
  while (1)
 800251c:	e7fe      	b.n	800251c <main+0x5a8>
    sFilterConfig.FilterIndex = 0;
 800251e:	e9cd 0017 	strd	r0, r0, [sp, #92]	@ 0x5c
    sFilterConfig.FilterID2 = 0x000;
 8002522:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8002526:	a917      	add	r1, sp, #92	@ 0x5c
 8002528:	4620      	mov	r0, r4
    sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800252a:	e9cd 7619 	strd	r7, r6, [sp, #100]	@ 0x64
    if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 800252e:	f004 fd67 	bl	8007000 <HAL_FDCAN_ConfigFilter>
 8002532:	b108      	cbz	r0, 8002538 <main+0x5c4>
 8002534:	b672      	cpsid	i
  while (1)
 8002536:	e7fe      	b.n	8002536 <main+0x5c2>
    if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8002538:	4620      	mov	r0, r4
 800253a:	f004 fd8d 	bl	8007058 <HAL_FDCAN_Start>
 800253e:	4602      	mov	r2, r0
 8002540:	b108      	cbz	r0, 8002546 <main+0x5d2>
 8002542:	b672      	cpsid	i
  while (1)
 8002544:	e7fe      	b.n	8002544 <main+0x5d0>
    if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8002546:	4620      	mov	r0, r4
 8002548:	4631      	mov	r1, r6
 800254a:	f004 fea9 	bl	80072a0 <HAL_FDCAN_ActivateNotification>
 800254e:	4604      	mov	r4, r0
 8002550:	b1d0      	cbz	r0, 8002588 <main+0x614>
 8002552:	b672      	cpsid	i
  while (1)
 8002554:	e7fe      	b.n	8002554 <main+0x5e0>
 8002556:	bf00      	nop
 8002558:	20000704 	.word	0x20000704
 800255c:	40010300 	.word	0x40010300
 8002560:	200006c8 	.word	0x200006c8
 8002564:	40010304 	.word	0x40010304
 8002568:	2000068c 	.word	0x2000068c
 800256c:	40010308 	.word	0x40010308
 8002570:	20000640 	.word	0x20000640
 8002574:	40012c00 	.word	0x40012c00
 8002578:	200005f4 	.word	0x200005f4
 800257c:	40000800 	.word	0x40000800
 8002580:	20000740 	.word	0x20000740
 8002584:	40006400 	.word	0x40006400
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8002588:	4632      	mov	r2, r6
 800258a:	2103      	movs	r1, #3
 800258c:	2026      	movs	r0, #38	@ 0x26
 800258e:	f004 f9c1 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002592:	2026      	movs	r0, #38	@ 0x26
 8002594:	f004 f9fa 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8002598:	4622      	mov	r2, r4
 800259a:	2103      	movs	r1, #3
 800259c:	200b      	movs	r0, #11
 800259e:	f004 f9b9 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80025a2:	200b      	movs	r0, #11
 80025a4:	f004 f9f2 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80025a8:	4632      	mov	r2, r6
 80025aa:	2104      	movs	r1, #4
 80025ac:	2018      	movs	r0, #24
 80025ae:	f004 f9b1 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80025b2:	2018      	movs	r0, #24
 80025b4:	f004 f9ea 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80025b8:	4622      	mov	r2, r4
 80025ba:	4621      	mov	r1, r4
 80025bc:	2019      	movs	r0, #25
 80025be:	f004 f9a9 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80025c2:	2019      	movs	r0, #25
 80025c4:	f004 f9e2 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80025c8:	4622      	mov	r2, r4
 80025ca:	4639      	mov	r1, r7
 80025cc:	2012      	movs	r0, #18
 80025ce:	f004 f9a1 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80025d2:	2012      	movs	r0, #18
 80025d4:	f004 f9da 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM4_IRQn, 3, 0);
 80025d8:	4622      	mov	r2, r4
 80025da:	2103      	movs	r1, #3
 80025dc:	201e      	movs	r0, #30
 80025de:	f004 f999 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80025e2:	201e      	movs	r0, #30
 80025e4:	f004 f9d2 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 80025e8:	4622      	mov	r2, r4
 80025ea:	2103      	movs	r1, #3
 80025ec:	2028      	movs	r0, #40	@ 0x28
 80025ee:	f004 f991 	bl	8006914 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80025f2:	2028      	movs	r0, #40	@ 0x28
 80025f4:	f004 f9ca 	bl	800698c <HAL_NVIC_EnableIRQ>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 80025f8:	4622      	mov	r2, r4
 80025fa:	2140      	movs	r1, #64	@ 0x40
 80025fc:	4813      	ldr	r0, [pc, #76]	@ (800264c <main+0x6d8>)
 80025fe:	4d14      	ldr	r5, [pc, #80]	@ (8002650 <main+0x6dc>)
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002600:	4c12      	ldr	r4, [pc, #72]	@ (800264c <main+0x6d8>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8002602:	f005 fa55 	bl	8007ab0 <HAL_GPIO_WritePin>
     uart_debug_print("UART is initialized and ready to go\r\n");
 8002606:	4813      	ldr	r0, [pc, #76]	@ (8002654 <main+0x6e0>)
 8002608:	f003 f8b2 	bl	8005770 <uart_debug_print>
  	 uart_debug_print("ESC ID is set to: %d\r\n", (int)ESC_ID);
 800260c:	4b12      	ldr	r3, [pc, #72]	@ (8002658 <main+0x6e4>)
 800260e:	4813      	ldr	r0, [pc, #76]	@ (800265c <main+0x6e8>)
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	f003 f8ad 	bl	8005770 <uart_debug_print>
	 if (received_CAN_command){
 8002616:	782b      	ldrb	r3, [r5, #0]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0fc      	beq.n	8002616 <main+0x6a2>
		 received_CAN_command = false;
 800261c:	2300      	movs	r3, #0
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800261e:	2140      	movs	r1, #64	@ 0x40
 8002620:	4620      	mov	r0, r4
		 received_CAN_command = false;
 8002622:	702b      	strb	r3, [r5, #0]
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002624:	f005 fa4a 	bl	8007abc <HAL_GPIO_TogglePin>
		 HAL_Delay(5);
 8002628:	2005      	movs	r0, #5
 800262a:	f003 f9cf 	bl	80059cc <HAL_Delay>
		 HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800262e:	2140      	movs	r1, #64	@ 0x40
 8002630:	4620      	mov	r0, r4
 8002632:	f005 fa43 	bl	8007abc <HAL_GPIO_TogglePin>
		 HAL_Delay(5);
 8002636:	2005      	movs	r0, #5
 8002638:	f003 f9c8 	bl	80059cc <HAL_Delay>
		 uart_debug_print("---------->>>>>>Received CAN command<<<<<<-----------\r\n");
 800263c:	4808      	ldr	r0, [pc, #32]	@ (8002660 <main+0x6ec>)
 800263e:	f003 f897 	bl	8005770 <uart_debug_print>
		 CAN_Parse_MSG(&rxHeader, rxData);
 8002642:	4908      	ldr	r1, [pc, #32]	@ (8002664 <main+0x6f0>)
 8002644:	4808      	ldr	r0, [pc, #32]	@ (8002668 <main+0x6f4>)
 8002646:	f7ff f84d 	bl	80016e4 <CAN_Parse_MSG>
 800264a:	e7e4      	b.n	8002616 <main+0x6a2>
 800264c:	48000800 	.word	0x48000800
 8002650:	20000494 	.word	0x20000494
 8002654:	0800c154 	.word	0x0800c154
 8002658:	20000498 	.word	0x20000498
 800265c:	0800c17c 	.word	0x0800c17c
 8002660:	0800c194 	.word	0x0800c194
 8002664:	20000464 	.word	0x20000464
 8002668:	2000046c 	.word	0x2000046c

0800266c <Error_Handler>:
 800266c:	b672      	cpsid	i
  while (1)
 800266e:	e7fe      	b.n	800266e <Error_Handler+0x2>

08002670 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8002670:	4b01      	ldr	r3, [pc, #4]	@ (8002678 <MC_StartMotor1+0x8>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	f000 b8b6 	b.w	80027e4 <MCI_StartMotor>
 8002678:	20001af8 	.word	0x20001af8

0800267c <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 800267c:	4b01      	ldr	r3, [pc, #4]	@ (8002684 <MC_StopMotor1+0x8>)
 800267e:	6818      	ldr	r0, [r3, #0]
 8002680:	f000 b8c6 	b.w	8002810 <MCI_StopMotor>
 8002684:	20001af8 	.word	0x20001af8

08002688 <MC_ProgramSpeedRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
{
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8002688:	4b02      	ldr	r3, [pc, #8]	@ (8002694 <MC_ProgramSpeedRampMotor1_F+0xc>)
{
 800268a:	4601      	mov	r1, r0
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 800268c:	6818      	ldr	r0, [r3, #0]
 800268e:	f000 b837 	b.w	8002700 <MCI_ExecSpeedRamp_F>
 8002692:	bf00      	nop
 8002694:	20001af8 	.word	0x20001af8

08002698 <MC_GetMecSpeedReferenceMotor1_F>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
{
  return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 8002698:	4b01      	ldr	r3, [pc, #4]	@ (80026a0 <MC_GetMecSpeedReferenceMotor1_F+0x8>)
 800269a:	6818      	ldr	r0, [r3, #0]
 800269c:	f000 b908 	b.w	80028b0 <MCI_GetMecSpeedRef_F>
 80026a0:	20001af8 	.word	0x20001af8

080026a4 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
  return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 80026a4:	4b01      	ldr	r3, [pc, #4]	@ (80026ac <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 80026a6:	6818      	ldr	r0, [r3, #0]
 80026a8:	f000 b950 	b.w	800294c <MCI_GetPhaseCurrentAmplitude>
 80026ac:	20001af8 	.word	0x20001af8

080026b0 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
  return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 80026b0:	4b01      	ldr	r3, [pc, #4]	@ (80026b8 <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 80026b2:	6818      	ldr	r0, [r3, #0]
 80026b4:	f000 b962 	b.w	800297c <MCI_GetPhaseVoltageAmplitude>
 80026b8:	20001af8 	.word	0x20001af8

080026bc <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 80026bc:	4b01      	ldr	r3, [pc, #4]	@ (80026c4 <MC_AcknowledgeFaultMotor1+0x8>)
 80026be:	6818      	ldr	r0, [r3, #0]
 80026c0:	f000 b8c2 	b.w	8002848 <MCI_FaultAcknowledged>
 80026c4:	20001af8 	.word	0x20001af8

080026c8 <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 80026c8:	4b01      	ldr	r3, [pc, #4]	@ (80026d0 <MC_GetOccurredFaultsMotor1+0x8>)
 80026ca:	6818      	ldr	r0, [r3, #0]
 80026cc:	f000 b886 	b.w	80027dc <MCI_GetOccurredFaults>
 80026d0:	20001af8 	.word	0x20001af8

080026d4 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 80026d4:	4b01      	ldr	r3, [pc, #4]	@ (80026dc <MC_GetSTMStateMotor1+0x8>)
 80026d6:	6818      	ldr	r0, [r3, #0]
 80026d8:	f000 b87e 	b.w	80027d8 <MCI_GetSTMState>
 80026dc:	20001af8 	.word	0x20001af8

080026e0 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 80026e0:	2002      	movs	r0, #2
 80026e2:	4770      	bx	lr

080026e4 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop

080026e8 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 80026e8:	4770      	bx	lr
 80026ea:	bf00      	nop

080026ec <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80026ec:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026f0:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80026f4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80026f8:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80026fa:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80026fc:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80026fe:	4770      	bx	lr

08002700 <MCI_ExecSpeedRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
 8002700:	eddf 7a06 	vldr	s15, [pc, #24]	@ 800271c <MCI_ExecSpeedRamp_F+0x1c>
 8002704:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8002708:	b508      	push	{r3, lr}
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 800270a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 800270e:	460a      	mov	r2, r1
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8002710:	ee10 3a10 	vmov	r3, s0
 8002714:	b219      	sxth	r1, r3
 8002716:	f7ff ffe9 	bl	80026ec <MCI_ExecSpeedRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800271a:	bd08      	pop	{r3, pc}
 800271c:	3e2aaaab 	.word	0x3e2aaaab

08002720 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8002720:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002724:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8002728:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 800272c:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800272e:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002730:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002732:	4770      	bx	lr

08002734 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8002734:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002736:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002738:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800273c:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 800273e:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002742:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002744:	b002      	add	sp, #8
 8002746:	4770      	bx	lr

08002748 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002748:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800274a:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 800274e:	430b      	orrs	r3, r1
 8002750:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8002754:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8002758:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 800275a:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop

08002760 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8002760:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8002764:	2b01      	cmp	r3, #1
 8002766:	d000      	beq.n	800276a <MCI_ExecBufferedCommands+0xa>
 8002768:	4770      	bx	lr
{
 800276a:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 800276c:	7b02      	ldrb	r2, [r0, #12]
 800276e:	2a02      	cmp	r2, #2
 8002770:	4604      	mov	r4, r0
 8002772:	d021      	beq.n	80027b8 <MCI_ExecBufferedCommands+0x58>
 8002774:	2a03      	cmp	r2, #3
 8002776:	d014      	beq.n	80027a2 <MCI_ExecBufferedCommands+0x42>
 8002778:	2a01      	cmp	r2, #1
 800277a:	d119      	bne.n	80027b0 <MCI_ExecBufferedCommands+0x50>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 800277c:	6843      	ldr	r3, [r0, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8002784:	6800      	ldr	r0, [r0, #0]
 8002786:	2103      	movs	r1, #3
 8002788:	f008 fc46 	bl	800b018 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 800278c:	8ba2      	ldrh	r2, [r4, #28]
 800278e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002792:	6820      	ldr	r0, [r4, #0]
 8002794:	f008 fc44 	bl	800b020 <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 8002798:	b150      	cbz	r0, 80027b0 <MCI_ExecBufferedCommands+0x50>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 800279a:	2302      	movs	r3, #2
 800279c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80027a0:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80027a2:	6842      	ldr	r2, [r0, #4]
 80027a4:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80027a8:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80027ac:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80027ae:	e7f4      	b.n	800279a <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 80027b0:	2303      	movs	r3, #3
 80027b2:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80027b6:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80027b8:	6843      	ldr	r3, [r0, #4]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80027c0:	6800      	ldr	r0, [r0, #0]
 80027c2:	2104      	movs	r1, #4
 80027c4:	f008 fc28 	bl	800b018 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80027c8:	8ba2      	ldrh	r2, [r4, #28]
 80027ca:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80027ce:	6820      	ldr	r0, [r4, #0]
 80027d0:	f008 fc26 	bl	800b020 <STC_ExecRamp>
          break;
 80027d4:	e7e0      	b.n	8002798 <MCI_ExecBufferedCommands+0x38>
 80027d6:	bf00      	nop

080027d8 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 80027d8:	7fc0      	ldrb	r0, [r0, #31]
 80027da:	4770      	bx	lr

080027dc <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 80027dc:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 80027de:	4770      	bx	lr

080027e0 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 80027e0:	8c00      	ldrh	r0, [r0, #32]
 80027e2:	4770      	bx	lr

080027e4 <MCI_StartMotor>:
{
 80027e4:	b510      	push	{r4, lr}
 80027e6:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80027e8:	f7ff fff6 	bl	80027d8 <MCI_GetSTMState>
 80027ec:	b108      	cbz	r0, 80027f2 <MCI_StartMotor+0xe>
  bool retVal = false;
 80027ee:	2000      	movs	r0, #0
}
 80027f0:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80027f2:	4620      	mov	r0, r4
 80027f4:	f7ff fff2 	bl	80027dc <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 80027f8:	2800      	cmp	r0, #0
 80027fa:	d1f8      	bne.n	80027ee <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80027fc:	4620      	mov	r0, r4
 80027fe:	f7ff ffef 	bl	80027e0 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002802:	2800      	cmp	r0, #0
 8002804:	d1f3      	bne.n	80027ee <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8002806:	2001      	movs	r0, #1
 8002808:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800280a:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800280e:	bd10      	pop	{r4, pc}

08002810 <MCI_StopMotor>:
{
 8002810:	b538      	push	{r3, r4, r5, lr}
 8002812:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8002814:	f7ff ffe0 	bl	80027d8 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8002818:	4604      	mov	r4, r0
 800281a:	b118      	cbz	r0, 8002824 <MCI_StopMotor+0x14>
 800281c:	f1b0 040c 	subs.w	r4, r0, #12
 8002820:	bf18      	it	ne
 8002822:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002824:	4628      	mov	r0, r5
 8002826:	f7ff ffd9 	bl	80027dc <MCI_GetOccurredFaults>
 800282a:	b110      	cbz	r0, 8002832 <MCI_StopMotor+0x22>
  bool retVal = false;
 800282c:	2400      	movs	r4, #0
}
 800282e:	4620      	mov	r0, r4
 8002830:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002832:	4628      	mov	r0, r5
 8002834:	f7ff ffd4 	bl	80027e0 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002838:	2800      	cmp	r0, #0
 800283a:	d1f7      	bne.n	800282c <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800283c:	2c00      	cmp	r4, #0
 800283e:	d0f5      	beq.n	800282c <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8002840:	2305      	movs	r3, #5
 8002842:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8002844:	e7f3      	b.n	800282e <MCI_StopMotor+0x1e>
 8002846:	bf00      	nop

08002848 <MCI_FaultAcknowledged>:
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 800284c:	f7ff ffc4 	bl	80027d8 <MCI_GetSTMState>
 8002850:	280b      	cmp	r0, #11
 8002852:	d001      	beq.n	8002858 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8002854:	2000      	movs	r0, #0
}
 8002856:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002858:	4620      	mov	r0, r4
 800285a:	f7ff ffc1 	bl	80027e0 <MCI_GetCurrentFaults>
 800285e:	2800      	cmp	r0, #0
 8002860:	d1f8      	bne.n	8002854 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8002862:	2302      	movs	r3, #2
 8002864:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8002866:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8002868:	2001      	movs	r0, #1
}
 800286a:	bd10      	pop	{r4, pc}

0800286c <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 800286c:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800286e:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8002870:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop

08002878 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8002878:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop

08002880 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8002880:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop

08002888 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8002888:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800288c:	4770      	bx	lr
 800288e:	bf00      	nop

08002890 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8002890:	8b80      	ldrh	r0, [r0, #28]
 8002892:	4770      	bx	lr

08002894 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002894:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800289a:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop

080028a0 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 80028a0:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80028a2:	6958      	ldr	r0, [r3, #20]
 80028a4:	f008 bb50 	b.w	800af48 <SPD_GetAvrgMecSpeedUnit>

080028a8 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 80028a8:	6800      	ldr	r0, [r0, #0]
 80028aa:	f008 bbb1 	b.w	800b010 <STC_GetMecSpeedRefUnit>
 80028ae:	bf00      	nop

080028b0 <MCI_GetMecSpeedRef_F>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
{
 80028b0:	b508      	push	{r3, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0.0f :
          (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
#else
  return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
 80028b2:	6800      	ldr	r0, [r0, #0]
 80028b4:	f008 fbac 	bl	800b010 <STC_GetMecSpeedRefUnit>
 80028b8:	ee07 0a90 	vmov	s15, r0
 80028bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028c0:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#endif
}
 80028c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 80028c8:	bd08      	pop	{r3, pc}
 80028ca:	bf00      	nop

080028cc <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 80028cc:	6843      	ldr	r3, [r0, #4]
 80028ce:	6818      	ldr	r0, [r3, #0]
 80028d0:	b283      	uxth	r3, r0
 80028d2:	f36f 000f 	bfc	r0, #0, #16
{
 80028d6:	b082      	sub	sp, #8
#endif
}
 80028d8:	4318      	orrs	r0, r3
 80028da:	b002      	add	sp, #8
 80028dc:	4770      	bx	lr
 80028de:	bf00      	nop

080028e0 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80028e0:	6843      	ldr	r3, [r0, #4]
 80028e2:	6858      	ldr	r0, [r3, #4]
 80028e4:	b283      	uxth	r3, r0
 80028e6:	f36f 000f 	bfc	r0, #0, #16
{
 80028ea:	b082      	sub	sp, #8
#endif
}
 80028ec:	4318      	orrs	r0, r3
 80028ee:	b002      	add	sp, #8
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop

080028f4 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80028f4:	6843      	ldr	r3, [r0, #4]
 80028f6:	68d8      	ldr	r0, [r3, #12]
 80028f8:	b283      	uxth	r3, r0
 80028fa:	f36f 000f 	bfc	r0, #0, #16
{
 80028fe:	b082      	sub	sp, #8
#endif
}
 8002900:	4318      	orrs	r0, r3
 8002902:	b002      	add	sp, #8
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop

08002908 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8002908:	6843      	ldr	r3, [r0, #4]
 800290a:	6918      	ldr	r0, [r3, #16]
 800290c:	b283      	uxth	r3, r0
 800290e:	f36f 000f 	bfc	r0, #0, #16
{
 8002912:	b082      	sub	sp, #8
#endif
}
 8002914:	4318      	orrs	r0, r3
 8002916:	b002      	add	sp, #8
 8002918:	4770      	bx	lr
 800291a:	bf00      	nop

0800291c <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 800291c:	6843      	ldr	r3, [r0, #4]
 800291e:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8002922:	b283      	uxth	r3, r0
 8002924:	f36f 000f 	bfc	r0, #0, #16
{
 8002928:	b082      	sub	sp, #8
#endif
}
 800292a:	4318      	orrs	r0, r3
 800292c:	b002      	add	sp, #8
 800292e:	4770      	bx	lr

08002930 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8002930:	6843      	ldr	r3, [r0, #4]
 8002932:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8002936:	b283      	uxth	r3, r0
 8002938:	f36f 000f 	bfc	r0, #0, #16
{
 800293c:	b082      	sub	sp, #8
#endif
}
 800293e:	4318      	orrs	r0, r3
 8002940:	b002      	add	sp, #8
 8002942:	4770      	bx	lr

08002944 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8002944:	6843      	ldr	r3, [r0, #4]
#endif
}
 8002946:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 800294a:	4770      	bx	lr

0800294c <MCI_GetPhaseCurrentAmplitude>:
    wAux = 0;
  }
  else
  {
#endif
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 800294c:	6842      	ldr	r2, [r0, #4]
 800294e:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8002952:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8002956:	b672      	cpsid	i
static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
{
  uint32_t temp_val;
  __disable_irq();
  /* Configure and call to CORDIC- */
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 8002958:	4a06      	ldr	r2, [pc, #24]	@ (8002974 <MCI_GetPhaseCurrentAmplitude+0x28>)
 800295a:	4907      	ldr	r1, [pc, #28]	@ (8002978 <MCI_GetPhaseCurrentAmplitude+0x2c>)
 800295c:	6011      	str	r1, [r2, #0]
  LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (uint32_t)alpha));
 800295e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8002962:	6053      	str	r3, [r2, #4]
  return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 8002964:	6813      	ldr	r3, [r2, #0]
 8002966:	2b00      	cmp	r3, #0
 8002968:	dafc      	bge.n	8002964 <MCI_GetPhaseCurrentAmplitude+0x18>
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 800296a:	6890      	ldr	r0, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 800296c:	b662      	cpsie	i
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif

  return (wAux);
}
 800296e:	b200      	sxth	r0, r0
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	40020c00 	.word	0x40020c00
 8002978:	00600063 	.word	0x00600063

0800297c <MCI_GetPhaseVoltageAmplitude>:
#endif
    alphabeta_t Local_Voltage;
    int32_t wAux1;
    int32_t wAux2;

    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 800297c:	6842      	ldr	r2, [r0, #4]
{
 800297e:	b508      	push	{r3, lr}
    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8002980:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8002984:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
    wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
    wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 8002988:	fb03 f303 	mul.w	r3, r3, r3

    wAux1 += wAux2;
    wAux1 = MCM_Sqrt(wAux1);
 800298c:	fb00 3000 	mla	r0, r0, r0, r3
 8002990:	f000 f8ac 	bl	8002aec <MCM_Sqrt>

    if (wAux1 > INT16_MAX)
 8002994:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002998:	4298      	cmp	r0, r3
 800299a:	bfa8      	it	ge
 800299c:	4618      	movge	r0, r3
    temp_wAux = (int16_t)wAux1;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_wAux);
}
 800299e:	b200      	sxth	r0, r0
 80029a0:	bd08      	pop	{r3, pc}
 80029a2:	bf00      	nop

080029a4 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 80029a4:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 80029a6:	e9d0 0400 	ldrd	r0, r4, [r0]
 80029aa:	f008 fbbb 	bl	800b124 <STC_GetDefaultIqdref>
 80029ae:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80029b2:	8220      	strh	r0, [r4, #16]
 80029b4:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80029b6:	bd10      	pop	{r4, pc}

080029b8 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 80029b8:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80029bc:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80029c0:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80029c4:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80029c8:	fb10 f202 	smulbb	r2, r0, r2
 80029cc:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80029d0:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 80029d4:	b084      	sub	sp, #16
 80029d6:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 80029d8:	da05      	bge.n	80029e6 <MCM_Clarke+0x2e>
 80029da:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80029dc:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 80029e0:	da0c      	bge.n	80029fc <MCM_Clarke+0x44>
 80029e2:	4a09      	ldr	r2, [pc, #36]	@ (8002a08 <MCM_Clarke+0x50>)
 80029e4:	e001      	b.n	80029ea <MCM_Clarke+0x32>
 80029e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	2000      	movs	r0, #0
 80029ee:	f363 000f 	bfi	r0, r3, #0, #16
 80029f2:	b293      	uxth	r3, r2
 80029f4:	f363 401f 	bfi	r0, r3, #16, #16
}
 80029f8:	b004      	add	sp, #16
 80029fa:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80029fc:	4802      	ldr	r0, [pc, #8]	@ (8002a08 <MCM_Clarke+0x50>)
 80029fe:	b20a      	sxth	r2, r1
 8002a00:	4282      	cmp	r2, r0
 8002a02:	bfb8      	it	lt
 8002a04:	4602      	movlt	r2, r0
 8002a06:	e7f0      	b.n	80029ea <MCM_Clarke+0x32>
 8002a08:	ffff8001 	.word	0xffff8001

08002a0c <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002a0c:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8002a0e:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002a12:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8002a16:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 8002a1a:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8002a1c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8002a1e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002a20:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8002a22:	b002      	add	sp, #8
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40020c00 	.word	0x40020c00

08002a2c <MCM_Park>:
{
 8002a2c:	b530      	push	{r4, r5, lr}
 8002a2e:	4605      	mov	r5, r0
 8002a30:	4604      	mov	r4, r0
 8002a32:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002a34:	4608      	mov	r0, r1
 8002a36:	f7ff ffe9 	bl	8002a0c <MCM_Trig_Functions>
 8002a3a:	b22d      	sxth	r5, r5
 8002a3c:	b201      	sxth	r1, r0
 8002a3e:	1424      	asrs	r4, r4, #16
 8002a40:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8002a42:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a46:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8002a4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4e:	da05      	bge.n	8002a5c <MCM_Park+0x30>
 8002a50:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8002a52:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8002a56:	da22      	bge.n	8002a9e <MCM_Park+0x72>
 8002a58:	4a14      	ldr	r2, [pc, #80]	@ (8002aac <MCM_Park+0x80>)
 8002a5a:	e001      	b.n	8002a60 <MCM_Park+0x34>
 8002a5c:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002a60:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a64:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8002a68:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a6c:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8002a70:	da04      	bge.n	8002a7c <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8002a72:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002a76:	da0c      	bge.n	8002a92 <MCM_Park+0x66>
 8002a78:	4b0c      	ldr	r3, [pc, #48]	@ (8002aac <MCM_Park+0x80>)
 8002a7a:	e001      	b.n	8002a80 <MCM_Park+0x54>
 8002a7c:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8002a80:	b292      	uxth	r2, r2
 8002a82:	2000      	movs	r0, #0
 8002a84:	f362 000f 	bfi	r0, r2, #0, #16
 8002a88:	b29b      	uxth	r3, r3
 8002a8a:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002a8e:	b005      	add	sp, #20
 8002a90:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a92:	4906      	ldr	r1, [pc, #24]	@ (8002aac <MCM_Park+0x80>)
 8002a94:	b21b      	sxth	r3, r3
 8002a96:	428b      	cmp	r3, r1
 8002a98:	bfb8      	it	lt
 8002a9a:	460b      	movlt	r3, r1
 8002a9c:	e7f0      	b.n	8002a80 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a9e:	4b03      	ldr	r3, [pc, #12]	@ (8002aac <MCM_Park+0x80>)
 8002aa0:	b212      	sxth	r2, r2
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	bfb8      	it	lt
 8002aa6:	461a      	movlt	r2, r3
 8002aa8:	e7da      	b.n	8002a60 <MCM_Park+0x34>
 8002aaa:	bf00      	nop
 8002aac:	ffff8001 	.word	0xffff8001

08002ab0 <MCM_Rev_Park>:
{
 8002ab0:	b530      	push	{r4, r5, lr}
 8002ab2:	4605      	mov	r5, r0
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002ab8:	4608      	mov	r0, r1
 8002aba:	f7ff ffa7 	bl	8002a0c <MCM_Trig_Functions>
 8002abe:	1424      	asrs	r4, r4, #16
 8002ac0:	1402      	asrs	r2, r0, #16
 8002ac2:	b22d      	sxth	r5, r5
 8002ac4:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8002ac6:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8002aca:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002ace:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8002ad2:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8002ad6:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002ada:	2000      	movs	r0, #0
 8002adc:	f363 000f 	bfi	r0, r3, #0, #16
 8002ae0:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002ae4:	f364 401f 	bfi	r0, r4, #16, #16
}
 8002ae8:	b005      	add	sp, #20
 8002aea:	bd30      	pop	{r4, r5, pc}

08002aec <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002aec:	2800      	cmp	r0, #0
 8002aee:	dd09      	ble.n	8002b04 <MCM_Sqrt+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002af0:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8002af2:	4b05      	ldr	r3, [pc, #20]	@ (8002b08 <MCM_Sqrt+0x1c>)
 8002af4:	f240 1269 	movw	r2, #361	@ 0x169
 8002af8:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8002afa:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002afc:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002afe:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8002b00:	b662      	cpsie	i
}
 8002b02:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002b04:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8002b06:	4770      	bx	lr
 8002b08:	40020c00 	.word	0x40020c00

08002b0c <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002b0c:	b310      	cbz	r0, 8002b54 <MCboot+0x48>
{
 8002b0e:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 8002b10:	4d11      	ldr	r5, [pc, #68]	@ (8002b58 <MCboot+0x4c>)
 8002b12:	2300      	movs	r3, #0
 8002b14:	702b      	strb	r3, [r5, #0]
 8002b16:	4604      	mov	r4, r0

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    FOC_Init();
 8002b18:	f000 fa2c 	bl	8002f74 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 8002b1c:	480f      	ldr	r0, [pc, #60]	@ (8002b5c <MCboot+0x50>)
 8002b1e:	f7fe fe3f 	bl	80017a0 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002b22:	480f      	ldr	r0, [pc, #60]	@ (8002b60 <MCboot+0x54>)
 8002b24:	f007 f9a0 	bl	8009e68 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8002b28:	480e      	ldr	r0, [pc, #56]	@ (8002b64 <MCboot+0x58>)
 8002b2a:	f008 fb17 	bl	800b15c <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8002b2e:	480e      	ldr	r0, [pc, #56]	@ (8002b68 <MCboot+0x5c>)
 8002b30:	f001 feb8 	bl	80048a4 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8002b34:	480d      	ldr	r0, [pc, #52]	@ (8002b6c <MCboot+0x60>)
 8002b36:	f008 f9a5 	bl	800ae84 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8002b3a:	480d      	ldr	r0, [pc, #52]	@ (8002b70 <MCboot+0x64>)
 8002b3c:	f001 feb2 	bl	80048a4 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8002b40:	480c      	ldr	r0, [pc, #48]	@ (8002b74 <MCboot+0x68>)
 8002b42:	f007 f955 	bl	8009df0 <NTC_Init>

    pMCIList[M1] = &Mci[M1];
 8002b46:	4b0c      	ldr	r3, [pc, #48]	@ (8002b78 <MCboot+0x6c>)
 8002b48:	6023      	str	r3, [r4, #0]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002b4a:	f7ff fdcb 	bl	80026e4 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	702b      	strb	r3, [r5, #0]
  }
}
 8002b52:	bd38      	pop	{r3, r4, r5, pc}
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000964 	.word	0x20000964
 8002b5c:	2000034c 	.word	0x2000034c
 8002b60:	20000188 	.word	0x20000188
 8002b64:	2000021c 	.word	0x2000021c
 8002b68:	200001e0 	.word	0x200001e0
 8002b6c:	200001c4 	.word	0x200001c4
 8002b70:	2000020c 	.word	0x2000020c
 8002b74:	200001f0 	.word	0x200001f0
 8002b78:	20000004 	.word	0x20000004

08002b7c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002b7c:	4b01      	ldr	r3, [pc, #4]	@ (8002b84 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002b7e:	8018      	strh	r0, [r3, #0]
}
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	20000968 	.word	0x20000968

08002b88 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002b8a:	8818      	ldrh	r0, [r3, #0]
 8002b8c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002b8e:	fab0 f080 	clz	r0, r0
 8002b92:	0940      	lsrs	r0, r0, #5
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	20000968 	.word	0x20000968

08002b9c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002b9c:	4b01      	ldr	r3, [pc, #4]	@ (8002ba4 <TSK_SetStopPermanencyTimeM1+0x8>)
 8002b9e:	8018      	strh	r0, [r3, #0]
}
 8002ba0:	4770      	bx	lr
 8002ba2:	bf00      	nop
 8002ba4:	20000966 	.word	0x20000966

08002ba8 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002ba8:	4b03      	ldr	r3, [pc, #12]	@ (8002bb8 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002baa:	8818      	ldrh	r0, [r3, #0]
 8002bac:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002bae:	fab0 f080 	clz	r0, r0
 8002bb2:	0940      	lsrs	r0, r0, #5
 8002bb4:	4770      	bx	lr
 8002bb6:	bf00      	nop
 8002bb8:	20000966 	.word	0x20000966

08002bbc <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002bbc:	b508      	push	{r3, lr}
  uint8_t bMotorNbr;
  bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f000 fbb2 	bl	8003328 <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	@ (8002be0 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 8002bc6:	4807      	ldr	r0, [pc, #28]	@ (8002be4 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8002bc8:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002bca:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8002bce:	3301      	adds	r3, #1
 8002bd0:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002bd2:	b909      	cbnz	r1, 8002bd8 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 8002bd4:	2000      	movs	r0, #0
 8002bd6:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8002bd8:	f006 ff8e 	bl	8009af8 <MCPA_dataLog>
}
 8002bdc:	2000      	movs	r0, #0
 8002bde:	bd08      	pop	{r3, pc}
 8002be0:	20001b60 	.word	0x20001b60
 8002be4:	20000310 	.word	0x20000310

08002be8 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8002bea:	4604      	mov	r4, r0
 8002bec:	b330      	cbz	r0, 8002c3c <TSK_SafetyTask_PWMOFF+0x54>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002bee:	4e24      	ldr	r6, [pc, #144]	@ (8002c80 <TSK_SafetyTask_PWMOFF+0x98>)
 8002bf0:	6830      	ldr	r0, [r6, #0]
 8002bf2:	f000 ff99 	bl	8003b28 <PWMC_IsFaultOccurred>
 8002bf6:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8002bf8:	4d22      	ldr	r5, [pc, #136]	@ (8002c84 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002bfa:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002bfe:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8002c02:	43ca      	mvns	r2, r1
 8002c04:	4628      	mov	r0, r5
 8002c06:	b292      	uxth	r2, r2
 8002c08:	f7ff fd9e 	bl	8002748 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002c0c:	4628      	mov	r0, r5
 8002c0e:	f7ff fe2d 	bl	800286c <MCI_GetFaultState>
 8002c12:	b190      	cbz	r0, 8002c3a <TSK_SafetyTask_PWMOFF+0x52>
  {
    /* Reset Encoder state */
    if (pEAC[bMotor] != MC_NULL)
 8002c14:	4b1c      	ldr	r3, [pc, #112]	@ (8002c88 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002c16:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002c1a:	b10b      	cbz	r3, 8002c20 <TSK_SafetyTask_PWMOFF+0x38>
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->EncRestart = restart;
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	73da      	strb	r2, [r3, #15]
    }
    else
    {
      /* Nothing to do */
    }
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002c20:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002c24:	f000 ff34 	bl	8003a90 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8002c28:	4818      	ldr	r0, [pc, #96]	@ (8002c8c <TSK_SafetyTask_PWMOFF+0xa4>)
 8002c2a:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002c2e:	bb03      	cbnz	r3, 8002c72 <TSK_SafetyTask_PWMOFF+0x8a>
    }
    else
    {
      /* Nothing to do */
    }
    FOC_Clear(bMotor);
 8002c30:	4620      	mov	r0, r4
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002c32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002c36:	f000 b963 	b.w	8002f00 <FOC_Clear>
}
 8002c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002c3c:	4814      	ldr	r0, [pc, #80]	@ (8002c90 <TSK_SafetyTask_PWMOFF+0xa8>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002c3e:	4e10      	ldr	r6, [pc, #64]	@ (8002c80 <TSK_SafetyTask_PWMOFF+0x98>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002c40:	f001 ff52 	bl	8004ae8 <RCM_ExecRegularConv>
 8002c44:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002c46:	4813      	ldr	r0, [pc, #76]	@ (8002c94 <TSK_SafetyTask_PWMOFF+0xac>)
 8002c48:	f007 f8e4 	bl	8009e14 <NTC_CalcAvTemp>
 8002c4c:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002c4e:	6830      	ldr	r0, [r6, #0]
 8002c50:	f000 ff6a 	bl	8003b28 <PWMC_IsFaultOccurred>
 8002c54:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8002c56:	4810      	ldr	r0, [pc, #64]	@ (8002c98 <TSK_SafetyTask_PWMOFF+0xb0>)
 8002c58:	f001 ff46 	bl	8004ae8 <RCM_ExecRegularConv>
 8002c5c:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8002c5e:	480f      	ldr	r0, [pc, #60]	@ (8002c9c <TSK_SafetyTask_PWMOFF+0xb4>)
 8002c60:	f008 f93c 	bl	800aedc <RVBS_CalcAvVbus>
 8002c64:	4307      	orrs	r7, r0
 8002c66:	f007 070e 	and.w	r7, r7, #14
 8002c6a:	ea45 0107 	orr.w	r1, r5, r7
 8002c6e:	b289      	uxth	r1, r1
 8002c70:	e7c2      	b.n	8002bf8 <TSK_SafetyTask_PWMOFF+0x10>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002c72:	f006 ffff 	bl	8009c74 <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 8002c76:	4620      	mov	r0, r4
}
 8002c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002c7c:	f000 b940 	b.w	8002f00 <FOC_Clear>
 8002c80:	20000950 	.word	0x20000950
 8002c84:	20000004 	.word	0x20000004
 8002c88:	20000954 	.word	0x20000954
 8002c8c:	20000310 	.word	0x20000310
 8002c90:	2000020c 	.word	0x2000020c
 8002c94:	200001f0 	.word	0x200001f0
 8002c98:	200001e0 	.word	0x200001e0
 8002c9c:	200001c4 	.word	0x200001c4

08002ca0 <TSK_SafetyTask>:
{
 8002ca0:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <TSK_SafetyTask+0x1c>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d000      	beq.n	8002cac <TSK_SafetyTask+0xc>
}
 8002caa:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f7ff ff9b 	bl	8002be8 <TSK_SafetyTask_PWMOFF>
}
 8002cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002cb6:	f001 bfdf 	b.w	8004c78 <RCM_ExecUserConv>
 8002cba:	bf00      	nop
 8002cbc:	20000964 	.word	0x20000964

08002cc0 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8002cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d3c <MC_RunMotorControlTasks+0x7c>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	b1cb      	cbz	r3, 8002cfa <MC_RunMotorControlTasks+0x3a>
{
 8002cc6:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002cc8:	4c1d      	ldr	r4, [pc, #116]	@ (8002d40 <MC_RunMotorControlTasks+0x80>)
 8002cca:	8823      	ldrh	r3, [r4, #0]
 8002ccc:	b1b3      	cbz	r3, 8002cfc <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8002cce:	3b01      	subs	r3, #1
 8002cd0:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8002cd2:	4a1c      	ldr	r2, [pc, #112]	@ (8002d44 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8002cd4:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002cd6:	8813      	ldrh	r3, [r2, #0]
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	b11b      	cbz	r3, 8002ce4 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8002cdc:	8813      	ldrh	r3, [r2, #0]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002ce4:	4a18      	ldr	r2, [pc, #96]	@ (8002d48 <MC_RunMotorControlTasks+0x88>)
 8002ce6:	8813      	ldrh	r3, [r2, #0]
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b11b      	cbz	r3, 8002cf4 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8002cec:	8813      	ldrh	r3, [r2, #0]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8002cf4:	f7ff ffd4 	bl	8002ca0 <TSK_SafetyTask>
}
 8002cf8:	bd70      	pop	{r4, r5, r6, pc}
 8002cfa:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002cfc:	4d13      	ldr	r5, [pc, #76]	@ (8002d4c <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8002cfe:	f000 f9cd 	bl	800309c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8002d02:	f7ff fcf1 	bl	80026e8 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002d06:	4629      	mov	r1, r5
 8002d08:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002d0c:	6883      	ldr	r3, [r0, #8]
 8002d0e:	4798      	blx	r3
 8002d10:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002d12:	b130      	cbz	r0, 8002d22 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002d14:	4629      	mov	r1, r5
 8002d16:	220a      	movs	r2, #10
 8002d18:	f851 0b08 	ldr.w	r0, [r1], #8
 8002d1c:	6803      	ldr	r3, [r0, #0]
 8002d1e:	4798      	blx	r3
 8002d20:	b908      	cbnz	r0, 8002d26 <MC_RunMotorControlTasks+0x66>
{
 8002d22:	2301      	movs	r3, #1
 8002d24:	e7d5      	b.n	8002cd2 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002d26:	4628      	mov	r0, r5
 8002d28:	f000 fc24 	bl	8003574 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002d2c:	6828      	ldr	r0, [r5, #0]
 8002d2e:	89ea      	ldrh	r2, [r5, #14]
 8002d30:	6846      	ldr	r6, [r0, #4]
 8002d32:	68a9      	ldr	r1, [r5, #8]
 8002d34:	230a      	movs	r3, #10
 8002d36:	47b0      	blx	r6
 8002d38:	e7f3      	b.n	8002d22 <MC_RunMotorControlTasks+0x62>
 8002d3a:	bf00      	nop
 8002d3c:	20000964 	.word	0x20000964
 8002d40:	2000096a 	.word	0x2000096a
 8002d44:	20000968 	.word	0x20000968
 8002d48:	20000966 	.word	0x20000966
 8002d4c:	2000033c 	.word	0x2000033c

08002d50 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002d50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f000 f8d4 	bl	8002f00 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002d58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002d5c:	4802      	ldr	r0, [pc, #8]	@ (8002d68 <TSK_HardwareFaultTask+0x18>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	2180      	movs	r1, #128	@ 0x80
 8002d62:	f7ff bcf1 	b.w	8002748 <MCI_FaultProcessing>
 8002d66:	bf00      	nop
 8002d68:	20000004 	.word	0x20000004

08002d6c <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002d6c:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002d6e:	f7ff fcb1 	bl	80026d4 <MC_GetSTMStateMotor1>
 8002d72:	b918      	cbnz	r0, 8002d7c <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002d78:	f7ff bc7a 	b.w	8002670 <MC_StartMotor1>
}
 8002d7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002d80:	f7ff bc7c 	b.w	800267c <MC_StopMotor1>

08002d84 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002d84:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d86:	4a55      	ldr	r2, [pc, #340]	@ (8002edc <mc_lock_pins+0x158>)
 8002d88:	4855      	ldr	r0, [pc, #340]	@ (8002ee0 <mc_lock_pins+0x15c>)
 8002d8a:	4c56      	ldr	r4, [pc, #344]	@ (8002ee4 <mc_lock_pins+0x160>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d8c:	2604      	movs	r6, #4
 8002d8e:	b094      	sub	sp, #80	@ 0x50
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d90:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d92:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d94:	61d0      	str	r0, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002d96:	69d3      	ldr	r3, [r2, #28]
 8002d98:	9313      	str	r3, [sp, #76]	@ 0x4c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d9a:	2702      	movs	r7, #2
  (void) temp;
 8002d9c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d9e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002da0:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002da2:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002da4:	69d3      	ldr	r3, [r2, #28]
 8002da6:	9312      	str	r3, [sp, #72]	@ 0x48
  (void) temp;
 8002da8:	9b12      	ldr	r3, [sp, #72]	@ 0x48
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002daa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dae:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 8002db2:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002db4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002db6:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002db8:	69d1      	ldr	r1, [r2, #28]
 8002dba:	9111      	str	r1, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dbc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8002dc0:	9911      	ldr	r1, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dc2:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dc4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dc8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dca:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dcc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002dce:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002dd2:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
  (void) temp;
 8002dd6:	f8dd c040 	ldr.w	ip, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dda:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ddc:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dde:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002de0:	69d1      	ldr	r1, [r2, #28]
 8002de2:	910f      	str	r1, [sp, #60]	@ 0x3c
  (void) temp;
 8002de4:	990f      	ldr	r1, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002de6:	4940      	ldr	r1, [pc, #256]	@ (8002ee8 <mc_lock_pins+0x164>)
 8002de8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dea:	2580      	movs	r5, #128	@ 0x80
 8002dec:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dee:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002df0:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002df4:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 8002df8:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dfc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dfe:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e00:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e02:	69dc      	ldr	r4, [r3, #28]
 8002e04:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8002e06:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e08:	4c38      	ldr	r4, [pc, #224]	@ (8002eec <mc_lock_pins+0x168>)
 8002e0a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e0c:	2708      	movs	r7, #8
 8002e0e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e10:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e12:	69dc      	ldr	r4, [r3, #28]
 8002e14:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8002e16:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e18:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e1a:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e1c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e1e:	69d8      	ldr	r0, [r3, #28]
 8002e20:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 8002e22:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e24:	4832      	ldr	r0, [pc, #200]	@ (8002ef0 <mc_lock_pins+0x16c>)
 8002e26:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e28:	2440      	movs	r4, #64	@ 0x40
 8002e2a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e2c:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e2e:	69de      	ldr	r6, [r3, #28]
 8002e30:	960a      	str	r6, [sp, #40]	@ 0x28
  (void) temp;
 8002e32:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e34:	4e2f      	ldr	r6, [pc, #188]	@ (8002ef4 <mc_lock_pins+0x170>)
 8002e36:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e38:	2720      	movs	r7, #32
 8002e3a:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e3c:	61de      	str	r6, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e3e:	69de      	ldr	r6, [r3, #28]
 8002e40:	9609      	str	r6, [sp, #36]	@ 0x24
  (void) temp;
 8002e42:	9e09      	ldr	r6, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e44:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e46:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e48:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e4a:	69d0      	ldr	r0, [r2, #28]
 8002e4c:	9008      	str	r0, [sp, #32]
  (void) temp;
 8002e4e:	9808      	ldr	r0, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e50:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e52:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e54:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e56:	69d1      	ldr	r1, [r2, #28]
 8002e58:	9107      	str	r1, [sp, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e5a:	f44f 7080 	mov.w	r0, #256	@ 0x100
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e5e:	4926      	ldr	r1, [pc, #152]	@ (8002ef8 <mc_lock_pins+0x174>)
  (void) temp;
 8002e60:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e62:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e64:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e66:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e68:	69d9      	ldr	r1, [r3, #28]
 8002e6a:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e6c:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e70:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 8002e74:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e76:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e78:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e7a:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e7c:	69d9      	ldr	r1, [r3, #28]
 8002e7e:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e80:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e84:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8002e88:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e8a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e8c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e8e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e90:	69d9      	ldr	r1, [r3, #28]
 8002e92:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e94:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e98:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 8002e9c:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e9e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ea0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ea2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ea4:	69db      	ldr	r3, [r3, #28]
 8002ea6:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ea8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eac:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8002eb0:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eb2:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002eb4:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eb6:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002eb8:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002eba:	4b10      	ldr	r3, [pc, #64]	@ (8002efc <mc_lock_pins+0x178>)
  temp = READ_REG(GPIOx->LCKR);
 8002ebc:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002ebe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ec2:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8002ec6:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ec8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002eca:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002ecc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002ed2:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002ed4:	b014      	add	sp, #80	@ 0x50
 8002ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	48000400 	.word	0x48000400
 8002ee0:	00010004 	.word	0x00010004
 8002ee4:	00010002 	.word	0x00010002
 8002ee8:	00010080 	.word	0x00010080
 8002eec:	00010008 	.word	0x00010008
 8002ef0:	00010040 	.word	0x00010040
 8002ef4:	00010020 	.word	0x00010020
 8002ef8:	00010100 	.word	0x00010100
 8002efc:	48000800 	.word	0x48000800

08002f00 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002f00:	b538      	push	{r3, r4, r5, lr}
 8002f02:	2326      	movs	r3, #38	@ 0x26
 8002f04:	4916      	ldr	r1, [pc, #88]	@ (8002f60 <FOC_Clear+0x60>)
 8002f06:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8002f0a:	2400      	movs	r4, #0
 8002f0c:	50cc      	str	r4, [r1, r3]
{
 8002f0e:	4605      	mov	r5, r0
 8002f10:	f103 0208 	add.w	r2, r3, #8
 8002f14:	1858      	adds	r0, r3, r1
 8002f16:	3310      	adds	r3, #16
 8002f18:	440a      	add	r2, r1
 8002f1a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f1c:	4911      	ldr	r1, [pc, #68]	@ (8002f64 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002f1e:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f20:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002f24:	6054      	str	r4, [r2, #4]
 8002f26:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f28:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8002f2a:	f8c3 4006 	str.w	r4, [r3, #6]
 8002f2e:	f8c3 400a 	str.w	r4, [r3, #10]
 8002f32:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002f36:	f006 ffab 	bl	8009e90 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8002f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002f68 <FOC_Clear+0x68>)
 8002f3c:	4621      	mov	r1, r4
 8002f3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002f42:	f006 ffa5 	bl	8009e90 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002f46:	4b09      	ldr	r3, [pc, #36]	@ (8002f6c <FOC_Clear+0x6c>)
 8002f48:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002f4c:	f008 f858 	bl	800b000 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002f50:	4b07      	ldr	r3, [pc, #28]	@ (8002f70 <FOC_Clear+0x70>)
 8002f52:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002f5a:	f000 bd99 	b.w	8003a90 <PWMC_SwitchOffPWM>
 8002f5e:	bf00      	nop
 8002f60:	20000928 	.word	0x20000928
 8002f64:	20000034 	.word	0x20000034
 8002f68:	20000030 	.word	0x20000030
 8002f6c:	20000038 	.word	0x20000038
 8002f70:	20000950 	.word	0x20000950

08002f74 <FOC_Init>:
{
 8002f74:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002f76:	4b27      	ldr	r3, [pc, #156]	@ (8003014 <FOC_Init+0xa0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002f78:	4f27      	ldr	r7, [pc, #156]	@ (8003018 <FOC_Init+0xa4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002f7a:	4828      	ldr	r0, [pc, #160]	@ (800301c <FOC_Init+0xa8>)
    ENC_Init (&ENCODER_M1);
 8002f7c:	4c28      	ldr	r4, [pc, #160]	@ (8003020 <FOC_Init+0xac>)
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002f7e:	4d29      	ldr	r5, [pc, #164]	@ (8003024 <FOC_Init+0xb0>)
 8002f80:	4e29      	ldr	r6, [pc, #164]	@ (8003028 <FOC_Init+0xb4>)
{
 8002f82:	b083      	sub	sp, #12
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002f84:	6018      	str	r0, [r3, #0]
    R3_2_Init(&PWM_Handle_M1);
 8002f86:	f007 fb5f 	bl	800a648 <R3_2_Init>
    startTimers();
 8002f8a:	f000 fbcd 	bl	8003728 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002f8e:	4638      	mov	r0, r7
 8002f90:	f006 ff6a 	bl	8009e68 <PID_HandleInit>
    ENC_Init (&ENCODER_M1);
 8002f94:	4620      	mov	r0, r4
 8002f96:	f006 fc51 	bl	800983c <ENC_Init>
    EAC_Init(&EncAlignCtrlM1,pSTC[M1],&VirtualSpeedSensorM1,&ENCODER_M1);
 8002f9a:	6829      	ldr	r1, [r5, #0]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	@ (800302c <FOC_Init+0xb8>)
 8002f9e:	4623      	mov	r3, r4
 8002fa0:	4630      	mov	r0, r6
 8002fa2:	f006 fbff 	bl	80097a4 <EAC_Init>
    pEAC[M1] = &EncAlignCtrlM1;
 8002fa6:	4b22      	ldr	r3, [pc, #136]	@ (8003030 <FOC_Init+0xbc>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002fa8:	6828      	ldr	r0, [r5, #0]
    pEAC[M1] = &EncAlignCtrlM1;
 8002faa:	601e      	str	r6, [r3, #0]
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &ENCODER_M1._Super);
 8002fac:	4639      	mov	r1, r7
 8002fae:	4622      	mov	r2, r4
 8002fb0:	f008 f80e 	bl	800afd0 <STC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002fb4:	481f      	ldr	r0, [pc, #124]	@ (8003034 <FOC_Init+0xc0>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002fb6:	4c20      	ldr	r4, [pc, #128]	@ (8003038 <FOC_Init+0xc4>)
    PID_HandleInit(&PIDIqHandle_M1);
 8002fb8:	f006 ff56 	bl	8009e68 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002fbc:	481f      	ldr	r0, [pc, #124]	@ (800303c <FOC_Init+0xc8>)
 8002fbe:	f006 ff53 	bl	8009e68 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <FOC_Init+0xcc>)
 8002fc4:	4a1f      	ldr	r2, [pc, #124]	@ (8003044 <FOC_Init+0xd0>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002fc8:	481f      	ldr	r0, [pc, #124]	@ (8003048 <FOC_Init+0xd4>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002fca:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002fce:	4b1f      	ldr	r3, [pc, #124]	@ (800304c <FOC_Init+0xd8>)
 8002fd0:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8002fd2:	f007 ffb1 	bl	800af38 <REMNG_Init>
    FOC_Clear(M1);
 8002fd6:	2000      	movs	r0, #0
 8002fd8:	f7ff ff92 	bl	8002f00 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002fdc:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002fde:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002fe0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002fe4:	f008 f89e 	bl	800b124 <STC_GetDefaultIqdref>
 8002fe8:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002fec:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002fee:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002ff0:	8262      	strh	r2, [r4, #18]
 8002ff2:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002ff4:	f008 f896 	bl	800b124 <STC_GetDefaultIqdref>
 8002ff8:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 8002ffc:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002ffe:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 8003000:	f008 f88c 	bl	800b11c <STC_GetMecSpeedRefUnitDefault>
 8003004:	4601      	mov	r1, r0
 8003006:	4812      	ldr	r0, [pc, #72]	@ (8003050 <FOC_Init+0xdc>)
 8003008:	2200      	movs	r2, #0
}
 800300a:	b003      	add	sp, #12
 800300c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8003010:	f7ff bb6c 	b.w	80026ec <MCI_ExecSpeedRamp>
 8003014:	20000950 	.word	0x20000950
 8003018:	20000188 	.word	0x20000188
 800301c:	20000058 	.word	0x20000058
 8003020:	20000270 	.word	0x20000270
 8003024:	20000038 	.word	0x20000038
 8003028:	20000254 	.word	0x20000254
 800302c:	2000021c 	.word	0x2000021c
 8003030:	20000954 	.word	0x20000954
 8003034:	2000015c 	.word	0x2000015c
 8003038:	20000928 	.word	0x20000928
 800303c:	20000130 	.word	0x20000130
 8003040:	2000002c 	.word	0x2000002c
 8003044:	200001c4 	.word	0x200001c4
 8003048:	20000040 	.word	0x20000040
 800304c:	20000924 	.word	0x20000924
 8003050:	20000004 	.word	0x20000004

08003054 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8003054:	4770      	bx	lr
 8003056:	bf00      	nop

08003058 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8003058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800305a:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 800305c:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 800305e:	4d0d      	ldr	r5, [pc, #52]	@ (8003094 <FOC_CalcCurrRef+0x3c>)
 8003060:	2426      	movs	r4, #38	@ 0x26
 8003062:	fb04 5400 	mla	r4, r4, r0, r5
 8003066:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 800306a:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 800306e:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8003070:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8003074:	b13b      	cbz	r3, 8003086 <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8003076:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8003078:	2326      	movs	r3, #38	@ 0x26
 800307a:	fb03 5506 	mla	r5, r3, r6, r5
 800307e:	8228      	strh	r0, [r5, #16]
 8003080:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8003082:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8003084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8003086:	4b04      	ldr	r3, [pc, #16]	@ (8003098 <FOC_CalcCurrRef+0x40>)
 8003088:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800308c:	f008 f810 	bl	800b0b0 <STC_CalcTorqueReference>
 8003090:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8003092:	e7f0      	b.n	8003076 <FOC_CalcCurrRef+0x1e>
 8003094:	20000928 	.word	0x20000928
 8003098:	20000038 	.word	0x20000038

0800309c <TSK_MediumFrequencyTaskM1>:
{
 800309c:	b570      	push	{r4, r5, r6, lr}
 800309e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80030a0:	2300      	movs	r3, #0
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80030a2:	f10d 0106 	add.w	r1, sp, #6
 80030a6:	4898      	ldr	r0, [pc, #608]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x26c>)
  int16_t wAux = 0;
 80030a8:	f8ad 3006 	strh.w	r3, [sp, #6]
  (void)ENC_CalcAvrgMecSpeedUnit(&ENCODER_M1, &wAux);
 80030ac:	f006 fc2a 	bl	8009904 <ENC_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80030b0:	4b96      	ldr	r3, [pc, #600]	@ (800330c <TSK_MediumFrequencyTaskM1+0x270>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80030b2:	4c97      	ldr	r4, [pc, #604]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x274>)
  PQD_CalcElMotorPower(pMPM[M1]);
 80030b4:	6818      	ldr	r0, [r3, #0]
 80030b6:	f006 ff5d 	bl	8009f74 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80030ba:	4620      	mov	r0, r4
 80030bc:	f7ff fb90 	bl	80027e0 <MCI_GetCurrentFaults>
 80030c0:	b118      	cbz	r0, 80030ca <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 80030c2:	230a      	movs	r3, #10
 80030c4:	77e3      	strb	r3, [r4, #31]
}
 80030c6:	b002      	add	sp, #8
 80030c8:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80030ca:	4620      	mov	r0, r4
 80030cc:	f7ff fb86 	bl	80027dc <MCI_GetOccurredFaults>
 80030d0:	bb80      	cbnz	r0, 8003134 <TSK_MediumFrequencyTaskM1+0x98>
      switch (Mci[M1].State)
 80030d2:	7fe3      	ldrb	r3, [r4, #31]
 80030d4:	2b14      	cmp	r3, #20
 80030d6:	d8f6      	bhi.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
 80030d8:	a201      	add	r2, pc, #4	@ (adr r2, 80030e0 <TSK_MediumFrequencyTaskM1+0x44>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	08003273 	.word	0x08003273
 80030e4:	080030c7 	.word	0x080030c7
 80030e8:	08003227 	.word	0x08003227
 80030ec:	080030c7 	.word	0x080030c7
 80030f0:	080030c7 	.word	0x080030c7
 80030f4:	080030c7 	.word	0x080030c7
 80030f8:	08003213 	.word	0x08003213
 80030fc:	080030c7 	.word	0x080030c7
 8003100:	08003207 	.word	0x08003207
 8003104:	080030c7 	.word	0x080030c7
 8003108:	08003135 	.word	0x08003135
 800310c:	080031f9 	.word	0x080031f9
 8003110:	080030c7 	.word	0x080030c7
 8003114:	080030c7 	.word	0x080030c7
 8003118:	080030c7 	.word	0x080030c7
 800311c:	080030c7 	.word	0x080030c7
 8003120:	080031ad 	.word	0x080031ad
 8003124:	0800317b 	.word	0x0800317b
 8003128:	080030c7 	.word	0x080030c7
 800312c:	080030c7 	.word	0x080030c7
 8003130:	0800313d 	.word	0x0800313d
      Mci[M1].State = FAULT_OVER;
 8003134:	230b      	movs	r3, #11
 8003136:	77e3      	strb	r3, [r4, #31]
}
 8003138:	b002      	add	sp, #8
 800313a:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 800313c:	7fa3      	ldrb	r3, [r4, #30]
 800313e:	2b05      	cmp	r3, #5
 8003140:	f000 80a7 	beq.w	8003292 <TSK_MediumFrequencyTaskM1+0x1f6>
            if (TSK_StopPermanencyTimeHasElapsedM1())
 8003144:	f7ff fd30 	bl	8002ba8 <TSK_StopPermanencyTimeHasElapsedM1>
 8003148:	2800      	cmp	r0, #0
 800314a:	d0bc      	beq.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
              ENC_Clear(&ENCODER_M1);
 800314c:	486e      	ldr	r0, [pc, #440]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x26c>)
 800314e:	f006 fbb1 	bl	80098b4 <ENC_Clear>
              R3_2_SwitchOnPWM(pwmcHandle[M1]);
 8003152:	4b70      	ldr	r3, [pc, #448]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x278>)
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f007 f8d1 	bl	800a2fc <R3_2_SwitchOnPWM>
              FOC_InitAdditionalMethods(M1);
 800315a:	2000      	movs	r0, #0
 800315c:	f7ff ff7a 	bl	8003054 <FOC_InitAdditionalMethods>
              STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8003160:	4b6d      	ldr	r3, [pc, #436]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x27c>)
 8003162:	6818      	ldr	r0, [r3, #0]
 8003164:	f007 ffe4 	bl	800b130 <STC_ForceSpeedReferenceToCurrentSpeed>
              MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8003168:	4869      	ldr	r0, [pc, #420]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x274>)
 800316a:	f7ff faf9 	bl	8002760 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800316e:	2000      	movs	r0, #0
 8003170:	f7ff ff72 	bl	8003058 <FOC_CalcCurrRef>
              Mci[M1].State = RUN;
 8003174:	2306      	movs	r3, #6
 8003176:	77e3      	strb	r3, [r4, #31]
 8003178:	e7a5      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800317a:	7fa3      	ldrb	r3, [r4, #30]
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800317c:	4d65      	ldr	r5, [pc, #404]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x278>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 800317e:	2b05      	cmp	r3, #5
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8003180:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003182:	f000 8088 	beq.w	8003296 <TSK_MediumFrequencyTaskM1+0x1fa>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8003186:	2101      	movs	r1, #1
 8003188:	f000 fc86 	bl	8003a98 <PWMC_CurrentReadingCalibr>
 800318c:	2800      	cmp	r0, #0
 800318e:	d09a      	beq.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8003190:	7fa3      	ldrb	r3, [r4, #30]
 8003192:	2b03      	cmp	r3, #3
 8003194:	f000 809b 	beq.w	80032ce <TSK_MediumFrequencyTaskM1+0x232>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 8003198:	6828      	ldr	r0, [r5, #0]
 800319a:	2100      	movs	r1, #0
 800319c:	f007 f9b8 	bl	800a510 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80031a0:	2014      	movs	r0, #20
 80031a2:	f7ff fceb 	bl	8002b7c <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 80031a6:	2310      	movs	r3, #16
 80031a8:	77e3      	strb	r3, [r4, #31]
 80031aa:	e78c      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80031ac:	7fa3      	ldrb	r3, [r4, #30]
 80031ae:	2b05      	cmp	r3, #5
 80031b0:	d06f      	beq.n	8003292 <TSK_MediumFrequencyTaskM1+0x1f6>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 80031b2:	f7ff fce9 	bl	8002b88 <TSK_ChargeBootCapDelayHasElapsedM1>
 80031b6:	2800      	cmp	r0, #0
 80031b8:	d085      	beq.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80031ba:	4d56      	ldr	r5, [pc, #344]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x278>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80031bc:	4e56      	ldr	r6, [pc, #344]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x27c>)
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 80031be:	6828      	ldr	r0, [r5, #0]
 80031c0:	f007 f8e6 	bl	800a390 <R3_2_SwitchOffPWM>
              FOCVars[M1].bDriveInput = EXTERNAL;
 80031c4:	4b55      	ldr	r3, [pc, #340]	@ (800331c <TSK_MediumFrequencyTaskM1+0x280>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80031c6:	4956      	ldr	r1, [pc, #344]	@ (8003320 <TSK_MediumFrequencyTaskM1+0x284>)
 80031c8:	6830      	ldr	r0, [r6, #0]
              FOCVars[M1].bDriveInput = EXTERNAL;
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 80031d0:	f007 ff14 	bl	800affc <STC_SetSpeedSensor>
              ENC_Clear(&ENCODER_M1);
 80031d4:	484c      	ldr	r0, [pc, #304]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x26c>)
 80031d6:	f006 fb6d 	bl	80098b4 <ENC_Clear>
              FOC_Clear( M1 );
 80031da:	2000      	movs	r0, #0
 80031dc:	f7ff fe90 	bl	8002f00 <FOC_Clear>
static inline bool EAC_IsAligned(EncAlign_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  return ((NULL == pHandle) ? false : pHandle->EncAligned);
#else
  return (pHandle->EncAligned);
 80031e0:	4850      	ldr	r0, [pc, #320]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x288>)
              if (EAC_IsAligned(&EncAlignCtrlM1) == false)
 80031e2:	7b83      	ldrb	r3, [r0, #14]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d178      	bne.n	80032da <TSK_MediumFrequencyTaskM1+0x23e>
                EAC_StartAlignment(&EncAlignCtrlM1);
 80031e8:	f006 fae4 	bl	80097b4 <EAC_StartAlignment>
                Mci[M1].State = ALIGNMENT;
 80031ec:	2302      	movs	r3, #2
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80031ee:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = ALIGNMENT;
 80031f0:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 80031f2:	f000 fc4f 	bl	8003a94 <PWMC_SwitchOnPWM>
 80031f6:	e766      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80031f8:	7fa3      	ldrb	r3, [r4, #30]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	f47f af63 	bne.w	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003200:	2300      	movs	r3, #0
 8003202:	83e3      	strh	r3, [r4, #30]
 8003204:	e75f      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8003206:	f7ff fccf 	bl	8002ba8 <TSK_StopPermanencyTimeHasElapsedM1>
 800320a:	2800      	cmp	r0, #0
 800320c:	f43f af5b 	beq.w	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
 8003210:	e7f6      	b.n	8003200 <TSK_MediumFrequencyTaskM1+0x164>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003212:	7fa3      	ldrb	r3, [r4, #30]
 8003214:	2b05      	cmp	r3, #5
 8003216:	d03c      	beq.n	8003292 <TSK_MediumFrequencyTaskM1+0x1f6>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8003218:	483d      	ldr	r0, [pc, #244]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x274>)
 800321a:	f7ff faa1 	bl	8002760 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800321e:	2000      	movs	r0, #0
 8003220:	f7ff ff1a 	bl	8003058 <FOC_CalcCurrRef>
 8003224:	e74f      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003226:	7fa3      	ldrb	r3, [r4, #30]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d032      	beq.n	8003292 <TSK_MediumFrequencyTaskM1+0x1f6>
 800322c:	483d      	ldr	r0, [pc, #244]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x288>)
 800322e:	7b86      	ldrb	r6, [r0, #14]
            bool EACDone = EAC_Exec(&EncAlignCtrlM1);
 8003230:	f006 faec 	bl	800980c <EAC_Exec>
 8003234:	4605      	mov	r5, r0
            if ((isAligned == false)  && (EACDone == false))
 8003236:	b90e      	cbnz	r6, 800323c <TSK_MediumFrequencyTaskM1+0x1a0>
 8003238:	2800      	cmp	r0, #0
 800323a:	d040      	beq.n	80032be <TSK_MediumFrequencyTaskM1+0x222>
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 800323c:	4d35      	ldr	r5, [pc, #212]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x278>)
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 800323e:	4e36      	ldr	r6, [pc, #216]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x27c>)
              R3_2_SwitchOffPWM( pwmcHandle[M1] );
 8003240:	6828      	ldr	r0, [r5, #0]
 8003242:	f007 f8a5 	bl	800a390 <R3_2_SwitchOffPWM>
              STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 8003246:	6830      	ldr	r0, [r6, #0]
 8003248:	2103      	movs	r1, #3
 800324a:	f007 fee5 	bl	800b018 <STC_SetControlMode>
              STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 800324e:	492e      	ldr	r1, [pc, #184]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x26c>)
 8003250:	6830      	ldr	r0, [r6, #0]
 8003252:	f007 fed3 	bl	800affc <STC_SetSpeedSensor>
              FOC_Clear(M1);
 8003256:	2000      	movs	r0, #0
 8003258:	f7ff fe52 	bl	8002f00 <FOC_Clear>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 800325c:	6828      	ldr	r0, [r5, #0]
 800325e:	2100      	movs	r1, #0
 8003260:	f007 f956 	bl	800a510 <R3_2_TurnOnLowSides>
              TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8003264:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8003268:	f7ff fc98 	bl	8002b9c <TSK_SetStopPermanencyTimeM1>
              Mci[M1].State = WAIT_STOP_MOTOR;
 800326c:	2314      	movs	r3, #20
 800326e:	77e3      	strb	r3, [r4, #31]
 8003270:	e729      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8003272:	7fa3      	ldrb	r3, [r4, #30]
 8003274:	f003 03fd 	and.w	r3, r3, #253	@ 0xfd
 8003278:	2b01      	cmp	r3, #1
 800327a:	f47f af24 	bne.w	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800327e:	4d25      	ldr	r5, [pc, #148]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x278>)
 8003280:	6828      	ldr	r0, [r5, #0]
 8003282:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8003286:	b991      	cbnz	r1, 80032ae <TSK_MediumFrequencyTaskM1+0x212>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8003288:	f000 fc06 	bl	8003a98 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 800328c:	2311      	movs	r3, #17
 800328e:	77e3      	strb	r3, [r4, #31]
 8003290:	e719      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8003292:	4b20      	ldr	r3, [pc, #128]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x278>)
 8003294:	6818      	ldr	r0, [r3, #0]
 8003296:	f007 f87b 	bl	800a390 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 800329a:	2000      	movs	r0, #0
 800329c:	f7ff fe30 	bl	8002f00 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80032a0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80032a4:	f7ff fc7a 	bl	8002b9c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80032a8:	2308      	movs	r3, #8
 80032aa:	77e3      	strb	r3, [r4, #31]
}
 80032ac:	e70b      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80032ae:	4619      	mov	r1, r3
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80032b0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80032b4:	f000 fbf0 	bl	8003a98 <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80032b8:	6828      	ldr	r0, [r5, #0]
 80032ba:	2100      	movs	r1, #0
 80032bc:	e76e      	b.n	800319c <TSK_MediumFrequencyTaskM1+0x100>
              IqdRef.d = STC_CalcTorqueReference(pSTC[M1]);
 80032be:	4b16      	ldr	r3, [pc, #88]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x27c>)
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	f007 fef5 	bl	800b0b0 <STC_CalcTorqueReference>
              FOCVars[M1].Iqdref = IqdRef;
 80032c6:	4b15      	ldr	r3, [pc, #84]	@ (800331c <TSK_MediumFrequencyTaskM1+0x280>)
 80032c8:	821d      	strh	r5, [r3, #16]
 80032ca:	8258      	strh	r0, [r3, #18]
            {
 80032cc:	e6fb      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
                FOC_Clear(M1);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff fe16 	bl	8002f00 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80032d4:	2300      	movs	r3, #0
 80032d6:	83e3      	strh	r3, [r4, #30]
 80032d8:	e6f5      	b.n	80030c6 <TSK_MediumFrequencyTaskM1+0x2a>
                STC_SetControlMode(pSTC[M1], MCM_SPEED_MODE);
 80032da:	6830      	ldr	r0, [r6, #0]
 80032dc:	2103      	movs	r1, #3
 80032de:	f007 fe9b 	bl	800b018 <STC_SetControlMode>
                STC_SetSpeedSensor(pSTC[M1], &ENCODER_M1._Super);
 80032e2:	4909      	ldr	r1, [pc, #36]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x26c>)
 80032e4:	6830      	ldr	r0, [r6, #0]
 80032e6:	f007 fe89 	bl	800affc <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 80032ea:	2000      	movs	r0, #0
 80032ec:	f7ff feb2 	bl	8003054 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 80032f0:	2000      	movs	r0, #0
 80032f2:	f7ff feb1 	bl	8003058 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80032f6:	6830      	ldr	r0, [r6, #0]
 80032f8:	f007 ff1a 	bl	800b130 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80032fc:	4804      	ldr	r0, [pc, #16]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x274>)
 80032fe:	f7ff fa2f 	bl	8002760 <MCI_ExecBufferedCommands>
 8003302:	2306      	movs	r3, #6
 8003304:	e773      	b.n	80031ee <TSK_MediumFrequencyTaskM1+0x152>
 8003306:	bf00      	nop
 8003308:	20000270 	.word	0x20000270
 800330c:	2000002c 	.word	0x2000002c
 8003310:	20000004 	.word	0x20000004
 8003314:	20000950 	.word	0x20000950
 8003318:	20000038 	.word	0x20000038
 800331c:	20000928 	.word	0x20000928
 8003320:	2000021c 	.word	0x2000021c
 8003324:	20000254 	.word	0x20000254

08003328 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8003328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800332c:	4605      	mov	r5, r0
 800332e:	b086      	sub	sp, #24
  uint16_t hFOCreturn;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */

  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8003330:	482d      	ldr	r0, [pc, #180]	@ (80033e8 <FOC_HighFrequencyTask+0xc0>)
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
  hElAngle = SPD_GetElAngle(speedHandle);
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8003332:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8003404 <FOC_HighFrequencyTask+0xdc>
  RCM_ReadOngoingConv();
  RCM_ExecNextConv();
  Ialphabeta = MCM_Clarke(Iab);
  Iqd = MCM_Park(Ialphabeta, hElAngle);
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003336:	4c2d      	ldr	r4, [pc, #180]	@ (80033ec <FOC_HighFrequencyTask+0xc4>)
  (void)ENC_CalcAngle(&ENCODER_M1);   /* If not sensorless then 2nd parameter is MC_NULL */
 8003338:	f006 faca 	bl	80098d0 <ENC_CalcAngle>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800333c:	4b2c      	ldr	r3, [pc, #176]	@ (80033f0 <FOC_HighFrequencyTask+0xc8>)
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800333e:	f8d8 0000 	ldr.w	r0, [r8]
 8003342:	681b      	ldr	r3, [r3, #0]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8003344:	695a      	ldr	r2, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8003346:	6803      	ldr	r3, [r0, #0]
 8003348:	f9b2 6004 	ldrsh.w	r6, [r2, #4]
 800334c:	a903      	add	r1, sp, #12
 800334e:	4798      	blx	r3
  RCM_ReadOngoingConv();
 8003350:	f001 fd0a 	bl	8004d68 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8003354:	f001 fcc4 	bl	8004ce0 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8003358:	9803      	ldr	r0, [sp, #12]
 800335a:	f7ff fb2d 	bl	80029b8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800335e:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8003360:	9004      	str	r0, [sp, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003362:	f7ff fb63 	bl	8002a2c <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003366:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800336a:	9001      	str	r0, [sp, #4]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800336c:	b201      	sxth	r1, r0
 800336e:	1a59      	subs	r1, r3, r1
 8003370:	4b20      	ldr	r3, [pc, #128]	@ (80033f4 <FOC_HighFrequencyTask+0xcc>)
 8003372:	6818      	ldr	r0, [r3, #0]
 8003374:	f006 fdbe 	bl	8009ef4 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003378:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 800337c:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003380:	1ac9      	subs	r1, r1, r3
 8003382:	4b1d      	ldr	r3, [pc, #116]	@ (80033f8 <FOC_HighFrequencyTask+0xd0>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003384:	4607      	mov	r7, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003386:	6818      	ldr	r0, [r3, #0]
 8003388:	f006 fdb4 	bl	8009ef4 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800338c:	f8ad 7008 	strh.w	r7, [sp, #8]
 8003390:	f8ad 000a 	strh.w	r0, [sp, #10]
 8003394:	9902      	ldr	r1, [sp, #8]
 8003396:	4819      	ldr	r0, [pc, #100]	@ (80033fc <FOC_HighFrequencyTask+0xd4>)
 8003398:	f006 f9d6 	bl	8009748 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800339c:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800339e:	4607      	mov	r7, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80033a0:	f7ff fb86 	bl	8002ab0 <MCM_Rev_Park>
 80033a4:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80033a6:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80033aa:	9105      	str	r1, [sp, #20]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80033ac:	f000 fa28 	bl	8003800 <PWMC_SetPhaseVoltage>
 80033b0:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80033b2:	9803      	ldr	r0, [sp, #12]
 80033b4:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80033b6:	9804      	ldr	r0, [sp, #16]
 80033b8:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80033ba:	9801      	ldr	r0, [sp, #4]
 80033bc:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 80033be:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80033c0:	9805      	ldr	r0, [sp, #20]
  FOCVars[M1].Vqd = Vqd;
 80033c2:	f8c4 7016 	str.w	r7, [r4, #22]
  FOCVars[M1].Valphabeta = Valphabeta;
 80033c6:	f8c4 001a 	str.w	r0, [r4, #26]
  FOCVars[M1].hElAngle = hElAngle;
 80033ca:	8426      	strh	r6, [r4, #32]
  if(hFOCreturn == MC_DURATION)
 80033cc:	d003      	beq.n	80033d6 <FOC_HighFrequencyTask+0xae>
}
 80033ce:	4628      	mov	r0, r5
 80033d0:	b006      	add	sp, #24
 80033d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 80033d6:	480a      	ldr	r0, [pc, #40]	@ (8003400 <FOC_HighFrequencyTask+0xd8>)
 80033d8:	2200      	movs	r2, #0
 80033da:	f7ff f9b5 	bl	8002748 <MCI_FaultProcessing>
}
 80033de:	4628      	mov	r0, r5
 80033e0:	b006      	add	sp, #24
 80033e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033e6:	bf00      	nop
 80033e8:	20000270 	.word	0x20000270
 80033ec:	20000928 	.word	0x20000928
 80033f0:	20000038 	.word	0x20000038
 80033f4:	20000034 	.word	0x20000034
 80033f8:	20000030 	.word	0x20000030
 80033fc:	2000003c 	.word	0x2000003c
 8003400:	20000004 	.word	0x20000004
 8003404:	20000950 	.word	0x20000950

08003408 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003408:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800340c:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 800340e:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8003410:	4b33      	ldr	r3, [pc, #204]	@ (80034e0 <RI_SetRegCommandParser+0xd8>)
 8003412:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8003414:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8003418:	4b32      	ldr	r3, [pc, #200]	@ (80034e4 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 800341a:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 800341c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 8003420:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8003424:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8003426:	f8a0 800e 	strh.w	r8, [r0, #14]
 800342a:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 800342c:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8003430:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8003432:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003436:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 800343a:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800343c:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003440:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8003444:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8003448:	dd36      	ble.n	80034b8 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 800344a:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800344e:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 8003452:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8003456:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 800345a:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800345e:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 8003460:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8003462:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8003466:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 800346a:	d12d      	bne.n	80034c8 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 800346c:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8003470:	f8cd e000 	str.w	lr, [sp]
 8003474:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8003476:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 800347a:	eb05 0309 	add.w	r3, r5, r9
 800347e:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8003480:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003484:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8003486:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8003488:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 800348a:	d012      	beq.n	80034b2 <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 800348c:	42bd      	cmp	r5, r7
 800348e:	d021      	beq.n	80034d4 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 8003490:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8003494:	89f3      	ldrh	r3, [r6, #14]
 8003496:	3301      	adds	r3, #1
 8003498:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800349a:	2800      	cmp	r0, #0
 800349c:	d0cb      	beq.n	8003436 <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800349e:	2807      	cmp	r0, #7
 80034a0:	d012      	beq.n	80034c8 <RI_SetRegCommandParser+0xc0>
 80034a2:	2301      	movs	r3, #1
 80034a4:	280a      	cmp	r0, #10
 80034a6:	9303      	str	r3, [sp, #12]
 80034a8:	d1c5      	bne.n	8003436 <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80034aa:	9803      	ldr	r0, [sp, #12]
 80034ac:	b009      	add	sp, #36	@ 0x24
 80034ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 80034b2:	2a00      	cmp	r2, #0
 80034b4:	d1ea      	bne.n	800348c <RI_SetRegCommandParser+0x84>
 80034b6:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 80034b8:	9b03      	ldr	r3, [sp, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f5      	bne.n	80034aa <RI_SetRegCommandParser+0xa2>
}
 80034be:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 80034c0:	81f3      	strh	r3, [r6, #14]
}
 80034c2:	b009      	add	sp, #36	@ 0x24
 80034c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 80034c8:	2301      	movs	r3, #1
 80034ca:	9303      	str	r3, [sp, #12]
}
 80034cc:	9803      	ldr	r0, [sp, #12]
 80034ce:	b009      	add	sp, #36	@ 0x24
 80034d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80034d4:	2308      	movs	r3, #8
 80034d6:	9303      	str	r3, [sp, #12]
}
 80034d8:	9803      	ldr	r0, [sp, #12]
 80034da:	b009      	add	sp, #36	@ 0x24
 80034dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034e0:	08003b61 	.word	0x08003b61
 80034e4:	08003c61 	.word	0x08003c61

080034e8 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80034e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ec:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 80034f4:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 80034f6:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 80034fa:	4b1c      	ldr	r3, [pc, #112]	@ (800356c <RI_GetRegCommandParser+0x84>)
 80034fc:	9304      	str	r3, [sp, #16]
 80034fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003570 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 8003500:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8003504:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8003506:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8003508:	f1b8 0f00 	cmp.w	r8, #0
 800350c:	d029      	beq.n	8003562 <RI_GetRegCommandParser+0x7a>
 800350e:	4607      	mov	r7, r0
 8003510:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8003512:	464d      	mov	r5, r9
 8003514:	e012      	b.n	800353c <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003516:	f85e ac08 	ldr.w	sl, [lr, #-8]
 800351a:	9400      	str	r4, [sp, #0]
 800351c:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 800351e:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 8003522:	fa19 f383 	uxtah	r3, r9, r3
 8003526:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8003528:	b9e0      	cbnz	r0, 8003564 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 800352a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 800352e:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8003530:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 8003532:	440a      	add	r2, r1
          txData = txData+size;
 8003534:	440e      	add	r6, r1
          pHandle->txLength += size;
 8003536:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8003538:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 800353a:	b19b      	cbz	r3, 8003564 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 800353c:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003540:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 8003544:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8003548:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 800354c:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8003550:	f10d 030e 	add.w	r3, sp, #14
 8003554:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8003556:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8003558:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 800355c:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8003560:	d0d9      	beq.n	8003516 <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 8003562:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8003564:	b006      	add	sp, #24
 8003566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800356a:	bf00      	nop
 800356c:	08004055 	.word	0x08004055
 8003570:	08004189 	.word	0x08004189

08003574 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8003574:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003576:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003578:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800357a:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800357c:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003580:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003582:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003584:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003588:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800358a:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800358c:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003590:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003594:	b291      	uxth	r1, r2
{
 8003596:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003598:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800359a:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800359e:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 80035a0:	d039      	beq.n	8003616 <MCP_ReceivedPacket+0xa2>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 80035a2:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 80035a4:	4f4f      	ldr	r7, [pc, #316]	@ (80036e4 <MCP_ReceivedPacket+0x170>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80035a6:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 80035b0:	2500      	movs	r5, #0

    switch (command)
 80035b2:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80035b6:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 80035b8:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 80035bc:	81e5      	strh	r5, [r4, #14]
    switch (command)
 80035be:	d835      	bhi.n	800362c <MCP_ReceivedPacket+0xb8>
 80035c0:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 80035c4:	d81e      	bhi.n	8003604 <MCP_ReceivedPacket+0x90>
 80035c6:	e8df f00c 	tbb	[pc, ip]
 80035ca:	1d6b      	.short	0x1d6b
 80035cc:	1d1d1d1d 	.word	0x1d1d1d1d
 80035d0:	1d731d1d 	.word	0x1d731d1d
 80035d4:	1d1d1d1d 	.word	0x1d1d1d1d
 80035d8:	1d581d1d 	.word	0x1d581d1d
 80035dc:	1d1d1d1d 	.word	0x1d1d1d1d
 80035e0:	1d501d1d 	.word	0x1d501d1d
 80035e4:	1d1d1d1d 	.word	0x1d1d1d1d
 80035e8:	1d4a1d1d 	.word	0x1d4a1d1d
 80035ec:	1d1d1d1d 	.word	0x1d1d1d1d
 80035f0:	1d5d1d1d 	.word	0x1d5d1d1d
 80035f4:	1d1d1d1d 	.word	0x1d1d1d1d
 80035f8:	1d461d1d 	.word	0x1d461d1d
 80035fc:	1d1d1d1d 	.word	0x1d1d1d1d
 8003600:	1d1d      	.short	0x1d1d
 8003602:	65          	.byte	0x65
 8003603:	00          	.byte	0x00
 8003604:	2300      	movs	r3, #0
 8003606:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003608:	68a2      	ldr	r2, [r4, #8]
 800360a:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800360c:	89e3      	ldrh	r3, [r4, #14]
 800360e:	3301      	adds	r3, #1
 8003610:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8003612:	b003      	add	sp, #12
 8003614:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8003616:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 800361a:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800361c:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003620:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8003622:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8003624:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8003626:	d948      	bls.n	80036ba <MCP_ReceivedPacket+0x146>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8003628:	200d      	movs	r0, #13
 800362a:	e7ed      	b.n	8003608 <MCP_ReceivedPacket+0x94>
    switch (command)
 800362c:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8003630:	d008      	beq.n	8003644 <MCP_ReceivedPacket+0xd0>
 8003632:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8003636:	d1e5      	bne.n	8003604 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8003638:	4638      	mov	r0, r7
 800363a:	f7ff f9b3 	bl	80029a4 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800363e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003640:	4628      	mov	r0, r5
        break;
 8003642:	e7e1      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8003644:	68a3      	ldr	r3, [r4, #8]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	4631      	mov	r1, r6
 800364a:	f104 030e 	add.w	r3, r4, #14
 800364e:	f7ff f847 	bl	80026e0 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003652:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003654:	e7d8      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8003656:	4638      	mov	r0, r7
 8003658:	f7ff f8be 	bl	80027d8 <MCI_GetSTMState>
 800365c:	b128      	cbz	r0, 800366a <MCP_ReceivedPacket+0xf6>
          (void)MCI_StopMotor(pMCI);
 800365e:	4638      	mov	r0, r7
 8003660:	f7ff f8d6 	bl	8002810 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003664:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003666:	2000      	movs	r0, #0
 8003668:	e7ce      	b.n	8003608 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 800366a:	4638      	mov	r0, r7
 800366c:	f7ff f8ba 	bl	80027e4 <MCI_StartMotor>
 8003670:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003674:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8003676:	b2c0      	uxtb	r0, r0
 8003678:	e7c6      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800367a:	4620      	mov	r0, r4
 800367c:	f7ff ff34 	bl	80034e8 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003680:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003682:	e7c1      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8003684:	4638      	mov	r0, r7
 8003686:	f7ff f8a7 	bl	80027d8 <MCI_GetSTMState>
 800368a:	2806      	cmp	r0, #6
 800368c:	d021      	beq.n	80036d2 <MCP_ReceivedPacket+0x15e>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800368e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003690:	2000      	movs	r0, #0
 8003692:	e7b9      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8003694:	4638      	mov	r0, r7
 8003696:	f7ff f8d7 	bl	8002848 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800369a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800369c:	2000      	movs	r0, #0
        break;
 800369e:	e7b3      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 80036a0:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 80036a2:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 80036a4:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 80036a6:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 80036a8:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036aa:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80036ac:	2000      	movs	r0, #0
        break;
 80036ae:	e7ab      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 80036b0:	4620      	mov	r0, r4
 80036b2:	f7ff fea9 	bl	8003408 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036b6:	89e3      	ldrh	r3, [r4, #14]
        break;
 80036b8:	e7a6      	b.n	8003608 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80036ba:	4b0b      	ldr	r3, [pc, #44]	@ (80036e8 <MCP_ReceivedPacket+0x174>)
 80036bc:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 80036c0:	b16d      	cbz	r5, 80036de <MCP_ReceivedPacket+0x16a>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80036c2:	68a3      	ldr	r3, [r4, #8]
 80036c4:	9300      	str	r3, [sp, #0]
 80036c6:	4631      	mov	r1, r6
 80036c8:	f104 030e 	add.w	r3, r4, #14
 80036cc:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036ce:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 80036d0:	e79a      	b.n	8003608 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 80036d2:	4638      	mov	r0, r7
 80036d4:	f7ff f8de 	bl	8002894 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036d8:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80036da:	2000      	movs	r0, #0
 80036dc:	e794      	b.n	8003608 <MCP_ReceivedPacket+0x94>
 80036de:	462b      	mov	r3, r5
 80036e0:	e7a2      	b.n	8003628 <MCP_ReceivedPacket+0xb4>
 80036e2:	bf00      	nop
 80036e4:	20000004 	.word	0x20000004
 80036e8:	2000096c 	.word	0x2000096c

080036ec <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80036ec:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80036ee:	f004 fe63 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
 80036f2:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <MX_MotorControl_Init+0x30>)
 80036f4:	fba3 3000 	umull	r3, r0, r3, r0
 80036f8:	09c0      	lsrs	r0, r0, #7
 80036fa:	f003 f967 	bl	80069cc <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80036fe:	4b08      	ldr	r3, [pc, #32]	@ (8003720 <MX_MotorControl_Init+0x34>)
 8003700:	2200      	movs	r2, #0
 8003702:	6819      	ldr	r1, [r3, #0]
 8003704:	f04f 30ff 	mov.w	r0, #4294967295
 8003708:	f003 f904 	bl	8006914 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800370c:	4805      	ldr	r0, [pc, #20]	@ (8003724 <MX_MotorControl_Init+0x38>)
 800370e:	f7ff f9fd 	bl	8002b0c <MCboot>
  mc_lock_pins();
}
 8003712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8003716:	f7ff bb35 	b.w	8002d84 <mc_lock_pins>
 800371a:	bf00      	nop
 800371c:	10624dd3 	.word	0x10624dd3
 8003720:	200003e0 	.word	0x200003e0
 8003724:	20001af8 	.word	0x20001af8

08003728 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8003728:	4922      	ldr	r1, [pc, #136]	@ (80037b4 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 800372a:	4a23      	ldr	r2, [pc, #140]	@ (80037b8 <startTimers+0x90>)
 800372c:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 800372e:	b410      	push	{r4}
 8003730:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8003734:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003738:	f043 0310 	orr.w	r3, r3, #16
 800373c:	b083      	sub	sp, #12
 800373e:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8003740:	688b      	ldr	r3, [r1, #8]
 8003742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	f043 0306 	orr.w	r3, r3, #6
 800374e:	608b      	str	r3, [r1, #8]
 8003750:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003752:	07db      	lsls	r3, r3, #31
 8003754:	d416      	bmi.n	8003784 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003756:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003758:	f043 0301 	orr.w	r3, r3, #1
 800375c:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800375e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003760:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800376a:	9b01      	ldr	r3, [sp, #4]
 800376c:	694b      	ldr	r3, [r1, #20]
 800376e:	f043 0301 	orr.w	r3, r3, #1
 8003772:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003774:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003776:	f023 0301 	bic.w	r3, r3, #1
 800377a:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800377c:	b003      	add	sp, #12
 800377e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003782:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8003784:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003788:	480c      	ldr	r0, [pc, #48]	@ (80037bc <startTimers+0x94>)
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	4c0c      	ldr	r4, [pc, #48]	@ (80037c0 <startTimers+0x98>)
 8003790:	4001      	ands	r1, r0
 8003792:	f041 0120 	orr.w	r1, r1, #32
 8003796:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003798:	6959      	ldr	r1, [r3, #20]
 800379a:	f041 0101 	orr.w	r1, r1, #1
 800379e:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80037a0:	6859      	ldr	r1, [r3, #4]
 80037a2:	4022      	ands	r2, r4
 80037a4:	4001      	ands	r1, r0
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
}
 80037aa:	b003      	add	sp, #12
 80037ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80037b0:	4770      	bx	lr
 80037b2:	bf00      	nop
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	40021000 	.word	0x40021000
 80037bc:	fdffff8f 	.word	0xfdffff8f
 80037c0:	02000070 	.word	0x02000070

080037c4 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80037c4:	3201      	adds	r2, #1
{
 80037c6:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80037c8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80037ca:	f06f 0602 	mvn.w	r6, #2
 80037ce:	0155      	lsls	r5, r2, #5
 80037d0:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80037d2:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80037d4:	f893 c000 	ldrb.w	ip, [r3]
 80037d8:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80037dc:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 80037e0:	d80c      	bhi.n	80037fc <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 80037e2:	6904      	ldr	r4, [r0, #16]
 80037e4:	07a4      	lsls	r4, r4, #30
 80037e6:	d5f5      	bpl.n	80037d4 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 80037e8:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 80037ec:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80037ee:	6106      	str	r6, [r0, #16]
 80037f0:	d8f0      	bhi.n	80037d4 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 80037f2:	781c      	ldrb	r4, [r3, #0]
 80037f4:	2c0f      	cmp	r4, #15
 80037f6:	d8ed      	bhi.n	80037d4 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 80037f8:	2301      	movs	r3, #1
 80037fa:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 80037fc:	bd70      	pop	{r4, r5, r6, pc}
 80037fe:	bf00      	nop

08003800 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8003800:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003802:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003806:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800380a:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800380e:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003810:	fb04 fc0c 	mul.w	ip, r4, ip
 8003814:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003818:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 800381c:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8003820:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8003824:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8003828:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 800382c:	1c55      	adds	r5, r2, #1
{
 800382e:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003830:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003834:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8003838:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 800383c:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8003840:	db6b      	blt.n	800391a <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8003842:	1c5d      	adds	r5, r3, #1
 8003844:	db3d      	blt.n	80038c2 <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003846:	ebbe 0e01 	subs.w	lr, lr, r1
 800384a:	bf44      	itt	mi
 800384c:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003850:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8003854:	2b00      	cmp	r3, #0
 8003856:	bfbc      	itt	lt
 8003858:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 800385c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8003860:	2a00      	cmp	r2, #0
 8003862:	bfb8      	it	lt
 8003864:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8003868:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800386c:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8003870:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8003874:	bfb8      	it	lt
 8003876:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 800387a:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 800387e:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8003882:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8003886:	2900      	cmp	r1, #0
 8003888:	d16e      	bne.n	8003968 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800388a:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800388e:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 8003892:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 8003894:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003898:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 800389a:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800389e:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80038a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80038a6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 80038aa:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80038ae:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80038b2:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80038b6:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80038ba:	b003      	add	sp, #12
 80038bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80038c0:	4708      	bx	r1
        if ( wX <= 0 )
 80038c2:	f1bc 0f00 	cmp.w	ip, #0
 80038c6:	dd7b      	ble.n	80039c0 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bfb8      	it	lt
 80038cc:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80038d0:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 80038d4:	bfb8      	it	lt
 80038d6:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 80038da:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80038de:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80038e2:	bfb8      	it	lt
 80038e4:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 80038e8:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 80038ec:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80038f0:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80038f4:	bfb8      	it	lt
 80038f6:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 80038fa:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 80038fe:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8003902:	2900      	cmp	r1, #0
 8003904:	f040 80ae 	bne.w	8003a64 <PWMC_SetPhaseVoltage+0x264>
 8003908:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 800390c:	2c00      	cmp	r4, #0
 800390e:	f000 80b9 	beq.w	8003a84 <PWMC_SetPhaseVoltage+0x284>
 8003912:	f04f 0c02 	mov.w	ip, #2
 8003916:	2401      	movs	r4, #1
 8003918:	e7bc      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 800391e:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 8003922:	db70      	blt.n	8003a06 <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 8003924:	f1bc 0f00 	cmp.w	ip, #0
 8003928:	dd23      	ble.n	8003972 <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800392a:	ebbe 0e0c 	subs.w	lr, lr, ip
 800392e:	bf44      	itt	mi
 8003930:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003934:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8003938:	2a00      	cmp	r2, #0
 800393a:	bfb8      	it	lt
 800393c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8003940:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8003944:	bfb8      	it	lt
 8003946:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 800394a:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 800394c:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8003950:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8003954:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8003958:	2d00      	cmp	r5, #0
 800395a:	d17e      	bne.n	8003a5a <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800395c:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8003960:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003962:	fa1f f18e 	uxth.w	r1, lr
 8003966:	e795      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
 8003968:	f04f 0c02 	mov.w	ip, #2
 800396c:	2400      	movs	r4, #0
 800396e:	2101      	movs	r1, #1
 8003970:	e790      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003972:	ebbc 0101 	subs.w	r1, ip, r1
 8003976:	bf44      	itt	mi
 8003978:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 800397c:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8003980:	2b00      	cmp	r3, #0
 8003982:	bfb8      	it	lt
 8003984:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8003988:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 800398c:	bfb8      	it	lt
 800398e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8003992:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8003996:	f1bc 0200 	subs.w	r2, ip, #0
 800399a:	bfb8      	it	lt
 800399c:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80039a0:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 80039a4:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80039a8:	bfb8      	it	lt
 80039aa:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 80039ae:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	d060      	beq.n	8003a78 <PWMC_SetPhaseVoltage+0x278>
 80039b6:	f04f 0c00 	mov.w	ip, #0
 80039ba:	2401      	movs	r4, #1
 80039bc:	2102      	movs	r1, #2
 80039be:	e769      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 80039c0:	2a00      	cmp	r2, #0
 80039c2:	bfb8      	it	lt
 80039c4:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 80039c8:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80039cc:	bfb8      	it	lt
 80039ce:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80039d2:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 80039d6:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80039da:	f1bc 0300 	subs.w	r3, ip, #0
 80039de:	bfb8      	it	lt
 80039e0:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80039e4:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 80039e8:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 80039ec:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80039f0:	bfb8      	it	lt
 80039f2:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 80039f6:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 80039fa:	b3c1      	cbz	r1, 8003a6e <PWMC_SetPhaseVoltage+0x26e>
 80039fc:	f04f 0c01 	mov.w	ip, #1
 8003a00:	2402      	movs	r4, #2
 8003a02:	2100      	movs	r1, #0
 8003a04:	e746      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003a06:	ebbe 0e01 	subs.w	lr, lr, r1
 8003a0a:	bf44      	itt	mi
 8003a0c:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003a10:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	bfbc      	itt	lt
 8003a18:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8003a1c:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003a20:	2a00      	cmp	r2, #0
 8003a22:	bfb8      	it	lt
 8003a24:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003a28:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 8003a2c:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003a30:	bfb8      	it	lt
 8003a32:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8003a36:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8003a3a:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003a3e:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8003a42:	b92d      	cbnz	r5, 8003a50 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003a44:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8003a48:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003a4c:	b299      	uxth	r1, r3
 8003a4e:	e721      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
 8003a50:	f04f 0c01 	mov.w	ip, #1
 8003a54:	2400      	movs	r4, #0
 8003a56:	2102      	movs	r1, #2
 8003a58:	e71c      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
 8003a5a:	f04f 0c00 	mov.w	ip, #0
 8003a5e:	2402      	movs	r4, #2
 8003a60:	2101      	movs	r1, #1
 8003a62:	e717      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
 8003a64:	f04f 0c02 	mov.w	ip, #2
 8003a68:	2401      	movs	r4, #1
 8003a6a:	2100      	movs	r1, #0
 8003a6c:	e712      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003a6e:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 8003a72:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8003a74:	b299      	uxth	r1, r3
 8003a76:	e70d      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003a78:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003a7c:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003a7e:	fa1f f18e 	uxth.w	r1, lr
 8003a82:	e707      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003a84:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8003a88:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8003a8a:	b291      	uxth	r1, r2
 8003a8c:	e702      	b.n	8003894 <PWMC_SetPhaseVoltage+0x94>
 8003a8e:	bf00      	nop

08003a90 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8003a90:	6843      	ldr	r3, [r0, #4]
 8003a92:	4718      	bx	r3

08003a94 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8003a94:	6883      	ldr	r3, [r0, #8]
 8003a96:	4718      	bx	r3

08003a98 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003a98:	b510      	push	{r4, lr}
 8003a9a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003a9c:	b179      	cbz	r1, 8003abe <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8003a9e:	2901      	cmp	r1, #1
 8003aa0:	d001      	beq.n	8003aa6 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8003aa2:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8003aa4:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003aa6:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8003aaa:	b16b      	cbz	r3, 8003ac8 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8003aac:	3b01      	subs	r3, #1
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1f4      	bne.n	8003aa2 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8003ab8:	68c3      	ldr	r3, [r0, #12]
 8003aba:	4798      	blx	r3
          retVal = true;
 8003abc:	e004      	b.n	8003ac8 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8003abe:	f7ff ffe7 	bl	8003a90 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8003ac2:	68e3      	ldr	r3, [r4, #12]
 8003ac4:	4620      	mov	r0, r4
 8003ac6:	4798      	blx	r3
      retVal = true;
 8003ac8:	2001      	movs	r0, #1
}
 8003aca:	bd10      	pop	{r4, pc}

08003acc <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8003acc:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 8003ad0:	b91b      	cbnz	r3, 8003ada <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8003ad2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8003ad6:	2b02      	cmp	r3, #2
 8003ad8:	d004      	beq.n	8003ae4 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8003ada:	2301      	movs	r3, #1
 8003adc:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003ae0:	3078      	adds	r0, #120	@ 0x78
 8003ae2:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8003ae4:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8003ae8:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003aea:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8003aec:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003af0:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8003af2:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003af6:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8003afa:	628c      	str	r4, [r1, #40]	@ 0x28
 8003afc:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 8003afe:	2301      	movs	r3, #1
 8003b00:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8003b04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b08:	3078      	adds	r0, #120	@ 0x78
 8003b0a:	4770      	bx	lr

08003b0c <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003b0c:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8003b0e:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8003b10:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003b14:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003b18:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003b1a:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8003b1c:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8003b20:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop

08003b28 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8003b28:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8003b2a:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8003b2e:	b1a8      	cbz	r0, 8003b5c <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8003b36:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8003b38:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8003b3a:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8003b3e:	b11a      	cbz	r2, 8003b48 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8003b46:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8003b48:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8003b4c:	b12a      	cbz	r2, 8003b5a <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8003b4e:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8003b52:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8003b54:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8003b56:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8003b5a:	4770      	bx	lr
 8003b5c:	2140      	movs	r1, #64	@ 0x40
 8003b5e:	e7ec      	b.n	8003b3a <PWMC_IsFaultOccurred+0x12>

08003b60 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8003b60:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8003b62:	3908      	subs	r1, #8
{
 8003b64:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8003b68:	2920      	cmp	r1, #32
 8003b6a:	d812      	bhi.n	8003b92 <RI_SetRegisterGlobal+0x32>
 8003b6c:	e8df f001 	tbb	[pc, r1]
 8003b70:	11111117 	.word	0x11111117
 8003b74:	11111111 	.word	0x11111111
 8003b78:	11111121 	.word	0x11111121
 8003b7c:	11111111 	.word	0x11111111
 8003b80:	1111112f 	.word	0x1111112f
 8003b84:	11111111 	.word	0x11111111
 8003b88:	11111139 	.word	0x11111139
 8003b8c:	11111111 	.word	0x11111111
 8003b90:	4d          	.byte	0x4d
 8003b91:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003b92:	2200      	movs	r2, #0
 8003b94:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003b96:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8003b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b9c:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8003b9e:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8003ba0:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8003ba4:	bf14      	ite	ne
 8003ba6:	2005      	movne	r0, #5
 8003ba8:	2004      	moveq	r0, #4
}
 8003baa:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8003bae:	801a      	strh	r2, [r3, #0]
}
 8003bb0:	4770      	bx	lr
      switch (regID)
 8003bb2:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003bb6:	d039      	beq.n	8003c2c <RI_SetRegisterGlobal+0xcc>
 8003bb8:	d942      	bls.n	8003c40 <RI_SetRegisterGlobal+0xe0>
 8003bba:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003bbe:	d035      	beq.n	8003c2c <RI_SetRegisterGlobal+0xcc>
 8003bc0:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003bc4:	4290      	cmp	r0, r2
 8003bc6:	bf14      	ite	ne
 8003bc8:	2005      	movne	r0, #5
 8003bca:	2004      	moveq	r0, #4
 8003bcc:	e02f      	b.n	8003c2e <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 8003bce:	2818      	cmp	r0, #24
      *size = 4;
 8003bd0:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8003bd4:	bf14      	ite	ne
 8003bd6:	2005      	movne	r0, #5
 8003bd8:	4610      	moveq	r0, r2
}
 8003bda:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8003bde:	801a      	strh	r2, [r3, #0]
}
 8003be0:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8003be2:	2101      	movs	r1, #1
 8003be4:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003be6:	f992 0000 	ldrsb.w	r0, [r2]
 8003bea:	b328      	cbz	r0, 8003c38 <RI_SetRegisterGlobal+0xd8>
 8003bec:	fa1f f08c 	uxth.w	r0, ip
 8003bf0:	e003      	b.n	8003bfa <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8003bf2:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bf4:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8003bf8:	b1f4      	cbz	r4, 8003c38 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8003bfa:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bfe:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8003c00:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003c04:	d3f5      	bcc.n	8003bf2 <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 8003c06:	2004      	movs	r0, #4
 8003c08:	e7c6      	b.n	8003b98 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8003c0a:	8812      	ldrh	r2, [r2, #0]
 8003c0c:	3202      	adds	r2, #2
 8003c0e:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003c10:	fa1f fc8c 	uxth.w	ip, ip
 8003c14:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8003c16:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8003c18:	d81a      	bhi.n	8003c50 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8003c1a:	28a8      	cmp	r0, #168	@ 0xa8
 8003c1c:	d0f3      	beq.n	8003c06 <RI_SetRegisterGlobal+0xa6>
 8003c1e:	d81b      	bhi.n	8003c58 <RI_SetRegisterGlobal+0xf8>
 8003c20:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003c24:	2828      	cmp	r0, #40	@ 0x28
 8003c26:	d0ee      	beq.n	8003c06 <RI_SetRegisterGlobal+0xa6>
 8003c28:	2005      	movs	r0, #5
 8003c2a:	e7b5      	b.n	8003b98 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8003c2c:	2000      	movs	r0, #0
      *size = 2;
 8003c2e:	2202      	movs	r2, #2
}
 8003c30:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8003c34:	801a      	strh	r2, [r3, #0]
}
 8003c36:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8003c3c:	2004      	movs	r0, #4
 8003c3e:	e7ab      	b.n	8003b98 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 8003c40:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003c44:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003c48:	bf14      	ite	ne
 8003c4a:	2005      	movne	r0, #5
 8003c4c:	2004      	moveq	r0, #4
 8003c4e:	e7ee      	b.n	8003c2e <RI_SetRegisterGlobal+0xce>
        *size = 0;
 8003c50:	2200      	movs	r2, #0
 8003c52:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003c54:	200a      	movs	r0, #10
 8003c56:	e79f      	b.n	8003b98 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8003c58:	28e8      	cmp	r0, #232	@ 0xe8
 8003c5a:	d1e5      	bne.n	8003c28 <RI_SetRegisterGlobal+0xc8>
 8003c5c:	e7d3      	b.n	8003c06 <RI_SetRegisterGlobal+0xa6>
 8003c5e:	bf00      	nop

08003c60 <RI_SetRegisterMotor1>:
{
 8003c60:	b510      	push	{r4, lr}
 8003c62:	b084      	sub	sp, #16
  switch(typeID)
 8003c64:	3908      	subs	r1, #8
{
 8003c66:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8003c6a:	4694      	mov	ip, r2
 8003c6c:	461c      	mov	r4, r3
  switch(typeID)
 8003c6e:	2920      	cmp	r1, #32
 8003c70:	d812      	bhi.n	8003c98 <RI_SetRegisterMotor1+0x38>
 8003c72:	e8df f001 	tbb	[pc, r1]
 8003c76:	1116      	.short	0x1116
 8003c78:	11111111 	.word	0x11111111
 8003c7c:	11251111 	.word	0x11251111
 8003c80:	11111111 	.word	0x11111111
 8003c84:	11421111 	.word	0x11421111
 8003c88:	11111111 	.word	0x11111111
 8003c8c:	114f1111 	.word	0x114f1111
 8003c90:	11111111 	.word	0x11111111
 8003c94:	1111      	.short	0x1111
 8003c96:	60          	.byte	0x60
 8003c97:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003c98:	2300      	movs	r3, #0
 8003c9a:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003c9c:	2007      	movs	r0, #7
}
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bd10      	pop	{r4, pc}
      switch (regID)
 8003ca2:	2848      	cmp	r0, #72	@ 0x48
 8003ca4:	f000 809e 	beq.w	8003de4 <RI_SetRegisterMotor1+0x184>
 8003ca8:	2888      	cmp	r0, #136	@ 0x88
 8003caa:	f040 8096 	bne.w	8003dda <RI_SetRegisterMotor1+0x17a>
          uint8_t regdata8 = *data;
 8003cae:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8003cb0:	2b04      	cmp	r3, #4
 8003cb2:	f000 80c9 	beq.w	8003e48 <RI_SetRegisterMotor1+0x1e8>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003cb6:	2b03      	cmp	r3, #3
 8003cb8:	f000 811c 	beq.w	8003ef4 <RI_SetRegisterMotor1+0x294>
  uint8_t retVal = MCP_CMD_OK;
 8003cbc:	2000      	movs	r0, #0
 8003cbe:	e08d      	b.n	8003ddc <RI_SetRegisterMotor1+0x17c>
      switch (regID)
 8003cc0:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003cc4:	8811      	ldrh	r1, [r2, #0]
      switch (regID)
 8003cc6:	f000 8147 	beq.w	8003f58 <RI_SetRegisterMotor1+0x2f8>
 8003cca:	d855      	bhi.n	8003d78 <RI_SetRegisterMotor1+0x118>
 8003ccc:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003cd0:	f000 8150 	beq.w	8003f74 <RI_SetRegisterMotor1+0x314>
 8003cd4:	f200 8096 	bhi.w	8003e04 <RI_SetRegisterMotor1+0x1a4>
 8003cd8:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003cdc:	f000 8126 	beq.w	8003f2c <RI_SetRegisterMotor1+0x2cc>
 8003ce0:	f200 80ec 	bhi.w	8003ebc <RI_SetRegisterMotor1+0x25c>
 8003ce4:	2890      	cmp	r0, #144	@ 0x90
 8003ce6:	f000 8132 	beq.w	8003f4e <RI_SetRegisterMotor1+0x2ee>
 8003cea:	28d0      	cmp	r0, #208	@ 0xd0
 8003cec:	f040 8114 	bne.w	8003f18 <RI_SetRegisterMotor1+0x2b8>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003cf0:	48aa      	ldr	r0, [pc, #680]	@ (8003f9c <RI_SetRegisterMotor1+0x33c>)
 8003cf2:	b209      	sxth	r1, r1
 8003cf4:	f006 f8c2 	bl	8009e7c <PID_SetKI>
          break;
 8003cf8:	e058      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
      switch (regID)
 8003cfa:	2858      	cmp	r0, #88	@ 0x58
 8003cfc:	f000 80ad 	beq.w	8003e5a <RI_SetRegisterMotor1+0x1fa>
 8003d00:	2898      	cmp	r0, #152	@ 0x98
 8003d02:	d05c      	beq.n	8003dbe <RI_SetRegisterMotor1+0x15e>
          retVal = MCP_ERROR_RO_REG;
 8003d04:	2818      	cmp	r0, #24
 8003d06:	bf14      	ite	ne
 8003d08:	2005      	movne	r0, #5
 8003d0a:	2004      	moveq	r0, #4
      *size = 4;
 8003d0c:	2304      	movs	r3, #4
 8003d0e:	8023      	strh	r3, [r4, #0]
}
 8003d10:	b004      	add	sp, #16
 8003d12:	bd10      	pop	{r4, pc}
  *size= 1U ; /* /0 is the min String size */
 8003d14:	2201      	movs	r2, #1
 8003d16:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d18:	f99c 3000 	ldrsb.w	r3, [ip]
 8003d1c:	b33b      	cbz	r3, 8003d6e <RI_SetRegisterMotor1+0x10e>
 8003d1e:	fa1f f38e 	uxth.w	r3, lr
 8003d22:	e003      	b.n	8003d2c <RI_SetRegisterMotor1+0xcc>
    *size = *size + 1U;
 8003d24:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d26:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003d2a:	b301      	cbz	r1, 8003d6e <RI_SetRegisterMotor1+0x10e>
    *size = *size + 1U;
 8003d2c:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d2e:	429a      	cmp	r2, r3
    *size = *size + 1U;
 8003d30:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d32:	d3f7      	bcc.n	8003d24 <RI_SetRegisterMotor1+0xc4>
 8003d34:	e01e      	b.n	8003d74 <RI_SetRegisterMotor1+0x114>
      *size = rawSize + 2U;
 8003d36:	8812      	ldrh	r2, [r2, #0]
 8003d38:	3202      	adds	r2, #2
 8003d3a:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003d3c:	fa1f f38e 	uxth.w	r3, lr
 8003d40:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8003d42:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8003d44:	d837      	bhi.n	8003db6 <RI_SetRegisterMotor1+0x156>
        switch (regID)
 8003d46:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003d4a:	f000 8088 	beq.w	8003e5e <RI_SetRegisterMotor1+0x1fe>
 8003d4e:	d94b      	bls.n	8003de8 <RI_SetRegisterMotor1+0x188>
 8003d50:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003d54:	f000 808c 	beq.w	8003e70 <RI_SetRegisterMotor1+0x210>
 8003d58:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8003d5c:	d150      	bne.n	8003e00 <RI_SetRegisterMotor1+0x1a0>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003d5e:	4890      	ldr	r0, [pc, #576]	@ (8003fa0 <RI_SetRegisterMotor1+0x340>)
 8003d60:	f10c 0102 	add.w	r1, ip, #2
}
 8003d64:	b004      	add	sp, #16
 8003d66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003d6a:	f005 bfb1 	b.w	8009cd0 <MCPA_cfgLog>
    *tempdestString = (int8_t)0;
 8003d6e:	2300      	movs	r3, #0
 8003d70:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 8003d74:	2004      	movs	r0, #4
 8003d76:	e792      	b.n	8003c9e <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003d78:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003d7c:	4298      	cmp	r0, r3
 8003d7e:	f000 80fe 	beq.w	8003f7e <RI_SetRegisterMotor1+0x31e>
 8003d82:	d950      	bls.n	8003e26 <RI_SetRegisterMotor1+0x1c6>
 8003d84:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003d88:	4298      	cmp	r0, r3
 8003d8a:	f000 80cb 	beq.w	8003f24 <RI_SetRegisterMotor1+0x2c4>
 8003d8e:	f200 8084 	bhi.w	8003e9a <RI_SetRegisterMotor1+0x23a>
 8003d92:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003d96:	4298      	cmp	r0, r3
 8003d98:	f000 80d1 	beq.w	8003f3e <RI_SetRegisterMotor1+0x2de>
 8003d9c:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003da0:	4298      	cmp	r0, r3
 8003da2:	f040 80b9 	bne.w	8003f18 <RI_SetRegisterMotor1+0x2b8>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003da6:	487f      	ldr	r0, [pc, #508]	@ (8003fa4 <RI_SetRegisterMotor1+0x344>)
 8003da8:	f006 f89e 	bl	8009ee8 <PID_SetKDDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8003dac:	2000      	movs	r0, #0
      *size = 2;
 8003dae:	2302      	movs	r3, #2
 8003db0:	8023      	strh	r3, [r4, #0]
}
 8003db2:	b004      	add	sp, #16
 8003db4:	bd10      	pop	{r4, pc}
        *size = 0;
 8003db6:	2300      	movs	r3, #0
 8003db8:	8023      	strh	r3, [r4, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003dba:	200a      	movs	r0, #10
 8003dbc:	e76f      	b.n	8003c9e <RI_SetRegisterMotor1+0x3e>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003dbe:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003dc2:	4979      	ldr	r1, [pc, #484]	@ (8003fa8 <RI_SetRegisterMotor1+0x348>)
 8003dc4:	4879      	ldr	r0, [pc, #484]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003dc6:	fb81 2103 	smull	r2, r1, r1, r3
 8003dca:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003dce:	2200      	movs	r2, #0
 8003dd0:	b209      	sxth	r1, r1
 8003dd2:	f7fe fc8b 	bl	80026ec <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003dd6:	2000      	movs	r0, #0
          break;
 8003dd8:	e798      	b.n	8003d0c <RI_SetRegisterMotor1+0xac>
      switch (regID)
 8003dda:	2005      	movs	r0, #5
      *size = 1;
 8003ddc:	2301      	movs	r3, #1
 8003dde:	8023      	strh	r3, [r4, #0]
}
 8003de0:	b004      	add	sp, #16
 8003de2:	bd10      	pop	{r4, pc}
            retVal = MCP_ERROR_RO_REG;
 8003de4:	2004      	movs	r0, #4
 8003de6:	e7f9      	b.n	8003ddc <RI_SetRegisterMotor1+0x17c>
        switch (regID)
 8003de8:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003dec:	d047      	beq.n	8003e7e <RI_SetRegisterMotor1+0x21e>
 8003dee:	d807      	bhi.n	8003e00 <RI_SetRegisterMotor1+0x1a0>
 8003df0:	28a8      	cmp	r0, #168	@ 0xa8
 8003df2:	d0bf      	beq.n	8003d74 <RI_SetRegisterMotor1+0x114>
 8003df4:	f200 80e3 	bhi.w	8003fbe <RI_SetRegisterMotor1+0x35e>
 8003df8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003dfc:	2828      	cmp	r0, #40	@ 0x28
 8003dfe:	d0b9      	beq.n	8003d74 <RI_SetRegisterMotor1+0x114>
 8003e00:	2005      	movs	r0, #5
 8003e02:	e74c      	b.n	8003c9e <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003e04:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8003e08:	f000 80c2 	beq.w	8003f90 <RI_SetRegisterMotor1+0x330>
 8003e0c:	d861      	bhi.n	8003ed2 <RI_SetRegisterMotor1+0x272>
 8003e0e:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003e12:	f000 80b8 	beq.w	8003f86 <RI_SetRegisterMotor1+0x326>
 8003e16:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003e1a:	d17d      	bne.n	8003f18 <RI_SetRegisterMotor1+0x2b8>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8003e1c:	4861      	ldr	r0, [pc, #388]	@ (8003fa4 <RI_SetRegisterMotor1+0x344>)
 8003e1e:	b209      	sxth	r1, r1
 8003e20:	f006 f82c 	bl	8009e7c <PID_SetKI>
          break;
 8003e24:	e7c2      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
      switch (regID)
 8003e26:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003e2a:	4298      	cmp	r0, r3
 8003e2c:	d076      	beq.n	8003f1c <RI_SetRegisterMotor1+0x2bc>
 8003e2e:	d96a      	bls.n	8003f06 <RI_SetRegisterMotor1+0x2a6>
 8003e30:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003e34:	4298      	cmp	r0, r3
 8003e36:	d07e      	beq.n	8003f36 <RI_SetRegisterMotor1+0x2d6>
 8003e38:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003e3c:	4298      	cmp	r0, r3
 8003e3e:	d16b      	bne.n	8003f18 <RI_SetRegisterMotor1+0x2b8>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003e40:	4856      	ldr	r0, [pc, #344]	@ (8003f9c <RI_SetRegisterMotor1+0x33c>)
 8003e42:	f006 f851 	bl	8009ee8 <PID_SetKDDivisorPOW2>
          break;
 8003e46:	e7b1      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003e48:	4858      	ldr	r0, [pc, #352]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003e4a:	f7fe fd7b 	bl	8002944 <MCI_GetTeref>
 8003e4e:	2200      	movs	r2, #0
 8003e50:	4601      	mov	r1, r0
 8003e52:	4856      	ldr	r0, [pc, #344]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003e54:	f7fe fc64 	bl	8002720 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003e58:	e730      	b.n	8003cbc <RI_SetRegisterMotor1+0x5c>
          retVal = MCP_ERROR_RO_REG;
 8003e5a:	2004      	movs	r0, #4
 8003e5c:	e756      	b.n	8003d0c <RI_SetRegisterMotor1+0xac>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003e5e:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003e62:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 8003e66:	4851      	ldr	r0, [pc, #324]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003e68:	f7fe fc5a 	bl	8002720 <MCI_ExecTorqueRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	e716      	b.n	8003c9e <RI_SetRegisterMotor1+0x3e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003e70:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003e74:	484d      	ldr	r0, [pc, #308]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003e76:	9103      	str	r1, [sp, #12]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003e78:	f7fe fc5c 	bl	8002734 <MCI_SetCurrentReferences>
            break;
 8003e7c:	e7f6      	b.n	8003e6c <RI_SetRegisterMotor1+0x20c>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003e7e:	f8dc 1002 	ldr.w	r1, [ip, #2]
 8003e82:	4b49      	ldr	r3, [pc, #292]	@ (8003fa8 <RI_SetRegisterMotor1+0x348>)
 8003e84:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003e88:	fb83 0301 	smull	r0, r3, r3, r1
 8003e8c:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003e90:	4846      	ldr	r0, [pc, #280]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003e92:	b209      	sxth	r1, r1
 8003e94:	f7fe fc2a 	bl	80026ec <MCI_ExecSpeedRamp>
            break;
 8003e98:	e7e8      	b.n	8003e6c <RI_SetRegisterMotor1+0x20c>
      switch (regID)
 8003e9a:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003e9e:	4298      	cmp	r0, r3
 8003ea0:	d051      	beq.n	8003f46 <RI_SetRegisterMotor1+0x2e6>
 8003ea2:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003ea6:	4298      	cmp	r0, r3
 8003ea8:	f000 809e 	beq.w	8003fe8 <RI_SetRegisterMotor1+0x388>
 8003eac:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003eb0:	4298      	cmp	r0, r3
 8003eb2:	d131      	bne.n	8003f18 <RI_SetRegisterMotor1+0x2b8>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003eb4:	483e      	ldr	r0, [pc, #248]	@ (8003fb0 <RI_SetRegisterMotor1+0x350>)
 8003eb6:	f005 fffb 	bl	8009eb0 <PID_SetKIDivisorPOW2>
          break;
 8003eba:	e777      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
      switch (regID)
 8003ebc:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003ec0:	d078      	beq.n	8003fb4 <RI_SetRegisterMotor1+0x354>
 8003ec2:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8003ec6:	d127      	bne.n	8003f18 <RI_SetRegisterMotor1+0x2b8>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 8003ec8:	4839      	ldr	r0, [pc, #228]	@ (8003fb0 <RI_SetRegisterMotor1+0x350>)
 8003eca:	b209      	sxth	r1, r1
 8003ecc:	f005 ffd6 	bl	8009e7c <PID_SetKI>
          break;
 8003ed0:	e76c      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
      switch (regID)
 8003ed2:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8003ed6:	d176      	bne.n	8003fc6 <RI_SetRegisterMotor1+0x366>
          currComp = MCI_GetIqdref(pMCIN);
 8003ed8:	4834      	ldr	r0, [pc, #208]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003eda:	9101      	str	r1, [sp, #4]
 8003edc:	f7fe fd14 	bl	8002908 <MCI_GetIqdref>
          currComp.q = (int16_t)regdata16;
 8003ee0:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	9303      	str	r3, [sp, #12]
          currComp.q = (int16_t)regdata16;
 8003ee6:	f8ad 100c 	strh.w	r1, [sp, #12]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003eea:	4830      	ldr	r0, [pc, #192]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003eec:	9903      	ldr	r1, [sp, #12]
 8003eee:	f7fe fc21 	bl	8002734 <MCI_SetCurrentReferences>
          break;
 8003ef2:	e75b      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003ef4:	482d      	ldr	r0, [pc, #180]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003ef6:	f7fe fcd7 	bl	80028a8 <MCI_GetMecSpeedRefUnit>
 8003efa:	2200      	movs	r2, #0
 8003efc:	4601      	mov	r1, r0
 8003efe:	482b      	ldr	r0, [pc, #172]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003f00:	f7fe fbf4 	bl	80026ec <MCI_ExecSpeedRamp>
 8003f04:	e6da      	b.n	8003cbc <RI_SetRegisterMotor1+0x5c>
      switch (regID)
 8003f06:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003f0a:	f43f af4f 	beq.w	8003dac <RI_SetRegisterMotor1+0x14c>
 8003f0e:	d96d      	bls.n	8003fec <RI_SetRegisterMotor1+0x38c>
 8003f10:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003f14:	f43f af4a 	beq.w	8003dac <RI_SetRegisterMotor1+0x14c>
          retVal = MCP_ERROR_UNKNOWN_REG;
 8003f18:	2005      	movs	r0, #5
 8003f1a:	e748      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003f1c:	481f      	ldr	r0, [pc, #124]	@ (8003f9c <RI_SetRegisterMotor1+0x33c>)
 8003f1e:	f005 ffbb 	bl	8009e98 <PID_SetKPDivisorPOW2>
          break;
 8003f22:	e743      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003f24:	4822      	ldr	r0, [pc, #136]	@ (8003fb0 <RI_SetRegisterMotor1+0x350>)
 8003f26:	f005 ffb7 	bl	8009e98 <PID_SetKPDivisorPOW2>
          break;
 8003f2a:	e73f      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003f2c:	481b      	ldr	r0, [pc, #108]	@ (8003f9c <RI_SetRegisterMotor1+0x33c>)
 8003f2e:	b209      	sxth	r1, r1
 8003f30:	f005 ffd2 	bl	8009ed8 <PID_SetKD>
          break;
 8003f34:	e73a      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003f36:	4819      	ldr	r0, [pc, #100]	@ (8003f9c <RI_SetRegisterMotor1+0x33c>)
 8003f38:	f005 ffba 	bl	8009eb0 <PID_SetKIDivisorPOW2>
          break;
 8003f3c:	e736      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003f3e:	4819      	ldr	r0, [pc, #100]	@ (8003fa4 <RI_SetRegisterMotor1+0x344>)
 8003f40:	f005 ffb6 	bl	8009eb0 <PID_SetKIDivisorPOW2>
          break;
 8003f44:	e732      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003f46:	481a      	ldr	r0, [pc, #104]	@ (8003fb0 <RI_SetRegisterMotor1+0x350>)
 8003f48:	f005 ffce 	bl	8009ee8 <PID_SetKDDivisorPOW2>
          break;
 8003f4c:	e72e      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003f4e:	4813      	ldr	r0, [pc, #76]	@ (8003f9c <RI_SetRegisterMotor1+0x33c>)
 8003f50:	b209      	sxth	r1, r1
 8003f52:	f005 ff91 	bl	8009e78 <PID_SetKP>
          break;
 8003f56:	e729      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          currComp = MCI_GetIqdref(pMCIN);
 8003f58:	4814      	ldr	r0, [pc, #80]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003f5a:	9101      	str	r1, [sp, #4]
 8003f5c:	f7fe fcd4 	bl	8002908 <MCI_GetIqdref>
          currComp.d = (int16_t)regdata16;
 8003f60:	9901      	ldr	r1, [sp, #4]
          currComp = MCI_GetIqdref(pMCIN);
 8003f62:	4603      	mov	r3, r0
 8003f64:	9303      	str	r3, [sp, #12]
          currComp.d = (int16_t)regdata16;
 8003f66:	f8ad 100e 	strh.w	r1, [sp, #14]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003f6a:	4810      	ldr	r0, [pc, #64]	@ (8003fac <RI_SetRegisterMotor1+0x34c>)
 8003f6c:	9903      	ldr	r1, [sp, #12]
 8003f6e:	f7fe fbe1 	bl	8002734 <MCI_SetCurrentReferences>
          break;
 8003f72:	e71b      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 8003f74:	480e      	ldr	r0, [pc, #56]	@ (8003fb0 <RI_SetRegisterMotor1+0x350>)
 8003f76:	b209      	sxth	r1, r1
 8003f78:	f005 ffae 	bl	8009ed8 <PID_SetKD>
          break;
 8003f7c:	e716      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003f7e:	4809      	ldr	r0, [pc, #36]	@ (8003fa4 <RI_SetRegisterMotor1+0x344>)
 8003f80:	f005 ff8a 	bl	8009e98 <PID_SetKPDivisorPOW2>
          break;
 8003f84:	e712      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8003f86:	4807      	ldr	r0, [pc, #28]	@ (8003fa4 <RI_SetRegisterMotor1+0x344>)
 8003f88:	b209      	sxth	r1, r1
 8003f8a:	f005 ff75 	bl	8009e78 <PID_SetKP>
          break;
 8003f8e:	e70d      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8003f90:	4804      	ldr	r0, [pc, #16]	@ (8003fa4 <RI_SetRegisterMotor1+0x344>)
 8003f92:	b209      	sxth	r1, r1
 8003f94:	f005 ffa0 	bl	8009ed8 <PID_SetKD>
          break;
 8003f98:	e708      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
 8003f9a:	bf00      	nop
 8003f9c:	20000188 	.word	0x20000188
 8003fa0:	20000310 	.word	0x20000310
 8003fa4:	20000130 	.word	0x20000130
 8003fa8:	2aaaaaab 	.word	0x2aaaaaab
 8003fac:	20000004 	.word	0x20000004
 8003fb0:	2000015c 	.word	0x2000015c
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8003fb4:	4826      	ldr	r0, [pc, #152]	@ (8004050 <RI_SetRegisterMotor1+0x3f0>)
 8003fb6:	b209      	sxth	r1, r1
 8003fb8:	f005 ff5e 	bl	8009e78 <PID_SetKP>
          break;
 8003fbc:	e6f6      	b.n	8003dac <RI_SetRegisterMotor1+0x14c>
        switch (regID)
 8003fbe:	28e8      	cmp	r0, #232	@ 0xe8
 8003fc0:	f43f aed8 	beq.w	8003d74 <RI_SetRegisterMotor1+0x114>
 8003fc4:	e71c      	b.n	8003e00 <RI_SetRegisterMotor1+0x1a0>
      switch (regID)
 8003fc6:	d8a7      	bhi.n	8003f18 <RI_SetRegisterMotor1+0x2b8>
 8003fc8:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003fcc:	d00c      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 8003fce:	d81c      	bhi.n	800400a <RI_SetRegisterMotor1+0x3aa>
 8003fd0:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 8003fd4:	d008      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 8003fd6:	d82e      	bhi.n	8004036 <RI_SetRegisterMotor1+0x3d6>
 8003fd8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003fdc:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003fe0:	bf14      	ite	ne
 8003fe2:	2005      	movne	r0, #5
 8003fe4:	2004      	moveq	r0, #4
 8003fe6:	e6e2      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 8003fe8:	2004      	movs	r0, #4
 8003fea:	e6e0      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 8003fec:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8003ff0:	d0fa      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 8003ff2:	d817      	bhi.n	8004024 <RI_SetRegisterMotor1+0x3c4>
 8003ff4:	f020 0340 	bic.w	r3, r0, #64	@ 0x40
 8003ff8:	f5b3 6f21 	cmp.w	r3, #2576	@ 0xa10
 8003ffc:	d0f4      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 8003ffe:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8004002:	bf14      	ite	ne
 8004004:	2005      	movne	r0, #5
 8004006:	2004      	moveq	r0, #4
 8004008:	e6d1      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 800400a:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 800400e:	d0eb      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 8004010:	d817      	bhi.n	8004042 <RI_SetRegisterMotor1+0x3e2>
 8004012:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8004016:	d0e7      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 8004018:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 800401c:	bf14      	ite	ne
 800401e:	2005      	movne	r0, #5
 8004020:	2004      	moveq	r0, #4
 8004022:	e6c4      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 8004024:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 8004028:	d0de      	beq.n	8003fe8 <RI_SetRegisterMotor1+0x388>
 800402a:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 800402e:	bf14      	ite	ne
 8004030:	2005      	movne	r0, #5
 8004032:	2004      	moveq	r0, #4
 8004034:	e6bb      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 8004036:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800403a:	bf14      	ite	ne
 800403c:	2005      	movne	r0, #5
 800403e:	2004      	moveq	r0, #4
 8004040:	e6b5      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 8004042:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8004046:	bf14      	ite	ne
 8004048:	2005      	movne	r0, #5
 800404a:	2004      	moveq	r0, #4
 800404c:	e6af      	b.n	8003dae <RI_SetRegisterMotor1+0x14e>
 800404e:	bf00      	nop
 8004050:	2000015c 	.word	0x2000015c

08004054 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8004054:	b510      	push	{r4, lr}
    switch (typeID)
 8004056:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800405a:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 800405e:	f1bc 0f20 	cmp.w	ip, #32
 8004062:	d812      	bhi.n	800408a <RI_GetRegisterGlobal+0x36>
 8004064:	e8df f00c 	tbb	[pc, ip]
 8004068:	1111111b 	.word	0x1111111b
 800406c:	11111111 	.word	0x11111111
 8004070:	11111127 	.word	0x11111127
 8004074:	11111111 	.word	0x11111111
 8004078:	11111122 	.word	0x11111122
 800407c:	11111111 	.word	0x11111111
 8004080:	11111135 	.word	0x11111135
 8004084:	11111111 	.word	0x11111111
 8004088:	13          	.byte	0x13
 8004089:	00          	.byte	0x00
 800408a:	2007      	movs	r0, #7
}
 800408c:	bd10      	pop	{r4, pc}
        switch (regID)
 800408e:	2828      	cmp	r0, #40	@ 0x28
 8004090:	d029      	beq.n	80040e6 <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 8004092:	8812      	ldrh	r2, [r2, #0]
 8004094:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8004096:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8004098:	b292      	uxth	r2, r2
 800409a:	801a      	strh	r2, [r3, #0]
}
 800409c:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 800409e:	f1be 0f00 	cmp.w	lr, #0
 80040a2:	dd1e      	ble.n	80040e2 <RI_GetRegisterGlobal+0x8e>
 80040a4:	2201      	movs	r2, #1
            *size= 0 ; /* */
 80040a6:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80040a8:	2005      	movs	r0, #5
}
 80040aa:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 80040ac:	f1be 0f03 	cmp.w	lr, #3
 80040b0:	dd15      	ble.n	80040de <RI_GetRegisterGlobal+0x8a>
 80040b2:	2204      	movs	r2, #4
 80040b4:	e7f7      	b.n	80040a6 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 80040b6:	f1be 0f01 	cmp.w	lr, #1
 80040ba:	dd10      	ble.n	80040de <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 80040bc:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80040c0:	d05a      	beq.n	8004178 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 80040c2:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80040c6:	bf14      	ite	ne
 80040c8:	2005      	movne	r0, #5
 80040ca:	2000      	moveq	r0, #0
          *size = 2;
 80040cc:	2202      	movs	r2, #2
 80040ce:	801a      	strh	r2, [r3, #0]
}
 80040d0:	bd10      	pop	{r4, pc}
        switch (regID)
 80040d2:	2820      	cmp	r0, #32
 80040d4:	d02c      	beq.n	8004130 <RI_GetRegisterGlobal+0xdc>
 80040d6:	2860      	cmp	r0, #96	@ 0x60
 80040d8:	d00f      	beq.n	80040fa <RI_GetRegisterGlobal+0xa6>
 80040da:	2200      	movs	r2, #0
 80040dc:	e7e3      	b.n	80040a6 <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80040de:	2008      	movs	r0, #8
}
 80040e0:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80040e2:	4608      	mov	r0, r1
}
 80040e4:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80040e6:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80040ea:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80040ec:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 80040f0:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80040f2:	d835      	bhi.n	8004160 <RI_GetRegisterGlobal+0x10c>
 80040f4:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80040f6:	2008      	movs	r0, #8
 80040f8:	e7cf      	b.n	800409a <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80040fa:	4c20      	ldr	r4, [pc, #128]	@ (800417c <RI_GetRegisterGlobal+0x128>)
 80040fc:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8004100:	2101      	movs	r1, #1
 8004102:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004104:	b180      	cbz	r0, 8004128 <RI_GetRegisterGlobal+0xd4>
 8004106:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800410a:	46a4      	mov	ip, r4
 800410c:	e008      	b.n	8004120 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 800410e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8004112:	8819      	ldrh	r1, [r3, #0]
 8004114:	3101      	adds	r1, #1
 8004116:	b289      	uxth	r1, r1
 8004118:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800411a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800411e:	b118      	cbz	r0, 8004128 <RI_GetRegisterGlobal+0xd4>
 8004120:	4571      	cmp	r1, lr
 8004122:	d3f4      	bcc.n	800410e <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 8004124:	2006      	movs	r0, #6
}
 8004126:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8004128:	2300      	movs	r3, #0
 800412a:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 800412c:	2000      	movs	r0, #0
}
 800412e:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004130:	4c13      	ldr	r4, [pc, #76]	@ (8004180 <RI_GetRegisterGlobal+0x12c>)
 8004132:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8004136:	2101      	movs	r1, #1
 8004138:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800413a:	2800      	cmp	r0, #0
 800413c:	d0f4      	beq.n	8004128 <RI_GetRegisterGlobal+0xd4>
 800413e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8004142:	46a4      	mov	ip, r4
 8004144:	e009      	b.n	800415a <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8004146:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800414a:	8819      	ldrh	r1, [r3, #0]
 800414c:	3101      	adds	r1, #1
 800414e:	b289      	uxth	r1, r1
 8004150:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004152:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8004156:	2800      	cmp	r0, #0
 8004158:	d0e6      	beq.n	8004128 <RI_GetRegisterGlobal+0xd4>
 800415a:	458e      	cmp	lr, r1
 800415c:	d8f3      	bhi.n	8004146 <RI_GetRegisterGlobal+0xf2>
 800415e:	e7e1      	b.n	8004124 <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8004160:	4908      	ldr	r1, [pc, #32]	@ (8004184 <RI_GetRegisterGlobal+0x130>)
 8004162:	6848      	ldr	r0, [r1, #4]
 8004164:	680c      	ldr	r4, [r1, #0]
 8004166:	8909      	ldrh	r1, [r1, #8]
 8004168:	f8c2 0006 	str.w	r0, [r2, #6]
 800416c:	f8c2 4002 	str.w	r4, [r2, #2]
 8004170:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 8004172:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8004174:	220c      	movs	r2, #12
 8004176:	e790      	b.n	800409a <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 8004178:	2000      	movs	r0, #0
 800417a:	e7a7      	b.n	80040cc <RI_GetRegisterGlobal+0x78>
 800417c:	0800c368 	.word	0x0800c368
 8004180:	0800c344 	.word	0x0800c344
 8004184:	0800c338 	.word	0x0800c338

08004188 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8004188:	b530      	push	{r4, r5, lr}
 800418a:	b091      	sub	sp, #68	@ 0x44
 800418c:	461d      	mov	r5, r3
    switch (typeID)
 800418e:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 8004192:	f9bd c050 	ldrsh.w	ip, [sp, #80]	@ 0x50
 8004196:	4614      	mov	r4, r2
    switch (typeID)
 8004198:	2b20      	cmp	r3, #32
 800419a:	d812      	bhi.n	80041c2 <RI_GetRegisterMotor1+0x3a>
 800419c:	e8df f003 	tbb	[pc, r3]
 80041a0:	11111131 	.word	0x11111131
 80041a4:	11111111 	.word	0x11111111
 80041a8:	11111167 	.word	0x11111167
 80041ac:	11111111 	.word	0x11111111
 80041b0:	11111144 	.word	0x11111144
 80041b4:	11111111 	.word	0x11111111
 80041b8:	1111115e 	.word	0x1111115e
 80041bc:	11111111 	.word	0x11111111
 80041c0:	14          	.byte	0x14
 80041c1:	00          	.byte	0x00
 80041c2:	2007      	movs	r0, #7
  }
 80041c4:	b011      	add	sp, #68	@ 0x44
 80041c6:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 80041c8:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 80041cc:	f000 8190 	beq.w	80044f0 <RI_GetRegisterMotor1+0x368>
 80041d0:	d87b      	bhi.n	80042ca <RI_GetRegisterMotor1+0x142>
 80041d2:	28a8      	cmp	r0, #168	@ 0xa8
        rawData++;
 80041d4:	f104 0202 	add.w	r2, r4, #2
        switch (regID)
 80041d8:	f000 816e 	beq.w	80044b8 <RI_GetRegisterMotor1+0x330>
 80041dc:	28e8      	cmp	r0, #232	@ 0xe8
 80041de:	f000 8120 	beq.w	8004422 <RI_GetRegisterMotor1+0x29a>
 80041e2:	2868      	cmp	r0, #104	@ 0x68
 80041e4:	f040 8173 	bne.w	80044ce <RI_GetRegisterMotor1+0x346>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80041e8:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80041ec:	233c      	movs	r3, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80041ee:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80041f2:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80041f4:	f200 81e5 	bhi.w	80045c2 <RI_GetRegisterMotor1+0x43a>
 80041f8:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80041fa:	2008      	movs	r0, #8
        *size = (*rawSize) + 2U;
 80041fc:	802b      	strh	r3, [r5, #0]
  }
 80041fe:	b011      	add	sp, #68	@ 0x44
 8004200:	bd30      	pop	{r4, r5, pc}
        if (freeSpace > 0)
 8004202:	f1bc 0f00 	cmp.w	ip, #0
 8004206:	f340 8129 	ble.w	800445c <RI_GetRegisterMotor1+0x2d4>
          switch (regID)
 800420a:	2848      	cmp	r0, #72	@ 0x48
 800420c:	f000 8128 	beq.w	8004460 <RI_GetRegisterMotor1+0x2d8>
 8004210:	2888      	cmp	r0, #136	@ 0x88
 8004212:	f040 80cf 	bne.w	80043b4 <RI_GetRegisterMotor1+0x22c>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004216:	48b0      	ldr	r0, [pc, #704]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 8004218:	f7fe fb2e 	bl	8002878 <MCI_GetControlMode>
 800421c:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800421e:	2000      	movs	r0, #0
          *size = 1;
 8004220:	2301      	movs	r3, #1
 8004222:	802b      	strh	r3, [r5, #0]
  }
 8004224:	b011      	add	sp, #68	@ 0x44
 8004226:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8004228:	f1bc 0f03 	cmp.w	ip, #3
 800422c:	dd4a      	ble.n	80042c4 <RI_GetRegisterMotor1+0x13c>
          switch (regID)
 800422e:	2898      	cmp	r0, #152	@ 0x98
 8004230:	f000 8127 	beq.w	8004482 <RI_GetRegisterMotor1+0x2fa>
 8004234:	f200 8118 	bhi.w	8004468 <RI_GetRegisterMotor1+0x2e0>
 8004238:	2818      	cmp	r0, #24
 800423a:	f000 80ed 	beq.w	8004418 <RI_GetRegisterMotor1+0x290>
 800423e:	2858      	cmp	r0, #88	@ 0x58
 8004240:	f040 8127 	bne.w	8004492 <RI_GetRegisterMotor1+0x30a>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8004244:	48a4      	ldr	r0, [pc, #656]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 8004246:	f7fe fb2b 	bl	80028a0 <MCI_GetAvrgMecSpeedUnit>
 800424a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800424e:	0040      	lsls	r0, r0, #1
 8004250:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004252:	2000      	movs	r0, #0
          *size = 4;
 8004254:	2304      	movs	r3, #4
 8004256:	802b      	strh	r3, [r5, #0]
  }
 8004258:	b011      	add	sp, #68	@ 0x44
 800425a:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 800425c:	28a0      	cmp	r0, #160	@ 0xa0
 800425e:	f000 8091 	beq.w	8004384 <RI_GetRegisterMotor1+0x1fc>
 8004262:	28e0      	cmp	r0, #224	@ 0xe0
 8004264:	d071      	beq.n	800434a <RI_GetRegisterMotor1+0x1c2>
            *size= 0 ; /* */
 8004266:	2300      	movs	r3, #0
 8004268:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 800426a:	2005      	movs	r0, #5
            break;
 800426c:	e7aa      	b.n	80041c4 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 800426e:	f1bc 0f01 	cmp.w	ip, #1
 8004272:	dd27      	ble.n	80042c4 <RI_GetRegisterMotor1+0x13c>
          switch (regID)
 8004274:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8004278:	f000 8260 	beq.w	800473c <RI_GetRegisterMotor1+0x5b4>
 800427c:	d842      	bhi.n	8004304 <RI_GetRegisterMotor1+0x17c>
 800427e:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8004282:	f000 8256 	beq.w	8004732 <RI_GetRegisterMotor1+0x5aa>
 8004286:	f240 8097 	bls.w	80043b8 <RI_GetRegisterMotor1+0x230>
 800428a:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 800428e:	f000 8226 	beq.w	80046de <RI_GetRegisterMotor1+0x556>
 8004292:	f200 8167 	bhi.w	8004564 <RI_GetRegisterMotor1+0x3dc>
 8004296:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 800429a:	f000 8245 	beq.w	8004728 <RI_GetRegisterMotor1+0x5a0>
 800429e:	f200 81cb 	bhi.w	8004638 <RI_GetRegisterMotor1+0x4b0>
 80042a2:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80042a6:	f000 823a 	beq.w	800471e <RI_GetRegisterMotor1+0x596>
 80042aa:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 80042ae:	f040 81c1 	bne.w	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80042b2:	488a      	ldr	r0, [pc, #552]	@ (80044dc <RI_GetRegisterMotor1+0x354>)
 80042b4:	f005 fdc6 	bl	8009e44 <NTC_GetAvTemp_C>
 80042b8:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80042ba:	2000      	movs	r0, #0
          *size = 2;
 80042bc:	2302      	movs	r3, #2
 80042be:	802b      	strh	r3, [r5, #0]
  }
 80042c0:	b011      	add	sp, #68	@ 0x44
 80042c2:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80042c4:	2008      	movs	r0, #8
  }
 80042c6:	b011      	add	sp, #68	@ 0x44
 80042c8:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 80042ca:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 80042ce:	f000 80e2 	beq.w	8004496 <RI_GetRegisterMotor1+0x30e>
 80042d2:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 80042d6:	f000 80af 	beq.w	8004438 <RI_GetRegisterMotor1+0x2b0>
 80042da:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80042de:	f040 80f6 	bne.w	80044ce <RI_GetRegisterMotor1+0x346>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80042e2:	487d      	ldr	r0, [pc, #500]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 80042e4:	f7fe facc 	bl	8002880 <MCI_GetLastRampFinalSpeed>
 80042e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80042ec:	0043      	lsls	r3, r0, #1
 80042ee:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80042f2:	4879      	ldr	r0, [pc, #484]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 80042f4:	f7fe facc 	bl	8002890 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80042f8:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80042fa:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 80042fc:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80042fe:	2000      	movs	r0, #0
            break;
 8004300:	2308      	movs	r3, #8
 8004302:	e77b      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
          switch (regID)
 8004304:	f241 4350 	movw	r3, #5200	@ 0x1450
 8004308:	4298      	cmp	r0, r3
 800430a:	f000 81f9 	beq.w	8004700 <RI_GetRegisterMotor1+0x578>
 800430e:	d96a      	bls.n	80043e6 <RI_GetRegisterMotor1+0x25e>
 8004310:	f241 5390 	movw	r3, #5520	@ 0x1590
 8004314:	4298      	cmp	r0, r3
 8004316:	f000 81dd 	beq.w	80046d4 <RI_GetRegisterMotor1+0x54c>
 800431a:	f200 8110 	bhi.w	800453e <RI_GetRegisterMotor1+0x3b6>
 800431e:	f241 5310 	movw	r3, #5392	@ 0x1510
 8004322:	4298      	cmp	r0, r3
 8004324:	f000 81ad 	beq.w	8004682 <RI_GetRegisterMotor1+0x4fa>
 8004328:	f200 8190 	bhi.w	800464c <RI_GetRegisterMotor1+0x4c4>
 800432c:	f241 4390 	movw	r3, #5264	@ 0x1490
 8004330:	4298      	cmp	r0, r3
 8004332:	f000 81c3 	beq.w	80046bc <RI_GetRegisterMotor1+0x534>
 8004336:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800433a:	4298      	cmp	r0, r3
 800433c:	f040 817a 	bne.w	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8004340:	4867      	ldr	r0, [pc, #412]	@ (80044e0 <RI_GetRegisterMotor1+0x358>)
 8004342:	f005 fdcf 	bl	8009ee4 <PID_GetKDDivisorPOW2>
 8004346:	8020      	strh	r0, [r4, #0]
              break;
 8004348:	e7b7      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 800434a:	4b66      	ldr	r3, [pc, #408]	@ (80044e4 <RI_GetRegisterMotor1+0x35c>)
 800434c:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 800434e:	2301      	movs	r3, #1
 8004350:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8004352:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004356:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 800435a:	b17a      	cbz	r2, 800437c <RI_GetRegisterMotor1+0x1f4>
 800435c:	fa1f fc8c 	uxth.w	ip, ip
 8004360:	e008      	b.n	8004374 <RI_GetRegisterMotor1+0x1ec>
    *tempdestString = *tempsrcString;
 8004362:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8004366:	882b      	ldrh	r3, [r5, #0]
 8004368:	3301      	adds	r3, #1
 800436a:	b29b      	uxth	r3, r3
 800436c:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800436e:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8004372:	b11a      	cbz	r2, 800437c <RI_GetRegisterMotor1+0x1f4>
 8004374:	459c      	cmp	ip, r3
 8004376:	d8f4      	bhi.n	8004362 <RI_GetRegisterMotor1+0x1da>
    retVal = MCP_ERROR_STRING_FORMAT;
 8004378:	2006      	movs	r0, #6
 800437a:	e723      	b.n	80041c4 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 800437c:	2300      	movs	r3, #0
 800437e:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004380:	2000      	movs	r0, #0
 8004382:	e71f      	b.n	80041c4 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8004384:	4a58      	ldr	r2, [pc, #352]	@ (80044e8 <RI_GetRegisterMotor1+0x360>)
  *size= 1U ; /* /0 is the min String size */
 8004386:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8004388:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 800438a:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800438c:	f991 2000 	ldrsb.w	r2, [r1]
 8004390:	2a00      	cmp	r2, #0
 8004392:	d0f3      	beq.n	800437c <RI_GetRegisterMotor1+0x1f4>
 8004394:	fa1f fc8c 	uxth.w	ip, ip
 8004398:	e009      	b.n	80043ae <RI_GetRegisterMotor1+0x226>
    *tempdestString = *tempsrcString;
 800439a:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 800439e:	882b      	ldrh	r3, [r5, #0]
 80043a0:	3301      	adds	r3, #1
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80043a6:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80043aa:	2a00      	cmp	r2, #0
 80043ac:	d0e6      	beq.n	800437c <RI_GetRegisterMotor1+0x1f4>
 80043ae:	459c      	cmp	ip, r3
 80043b0:	d8f3      	bhi.n	800439a <RI_GetRegisterMotor1+0x212>
 80043b2:	e7e1      	b.n	8004378 <RI_GetRegisterMotor1+0x1f0>
          switch (regID)
 80043b4:	2005      	movs	r0, #5
 80043b6:	e733      	b.n	8004220 <RI_GetRegisterMotor1+0x98>
          switch (regID)
 80043b8:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80043bc:	f000 819b 	beq.w	80046f6 <RI_GetRegisterMotor1+0x56e>
 80043c0:	f200 80ad 	bhi.w	800451e <RI_GetRegisterMotor1+0x396>
 80043c4:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80043c8:	f000 819f 	beq.w	800470a <RI_GetRegisterMotor1+0x582>
 80043cc:	f200 8122 	bhi.w	8004614 <RI_GetRegisterMotor1+0x48c>
 80043d0:	2890      	cmp	r0, #144	@ 0x90
 80043d2:	f000 816e 	beq.w	80046b2 <RI_GetRegisterMotor1+0x52a>
 80043d6:	28d0      	cmp	r0, #208	@ 0xd0
 80043d8:	f040 812c 	bne.w	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 80043dc:	4840      	ldr	r0, [pc, #256]	@ (80044e0 <RI_GetRegisterMotor1+0x358>)
 80043de:	f005 fd53 	bl	8009e88 <PID_GetKI>
 80043e2:	8020      	strh	r0, [r4, #0]
              break;
 80043e4:	e769      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 80043e6:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 80043ea:	f000 817d 	beq.w	80046e8 <RI_GetRegisterMotor1+0x560>
 80043ee:	f200 80cb 	bhi.w	8004588 <RI_GetRegisterMotor1+0x400>
 80043f2:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80043f6:	f000 8149 	beq.w	800468c <RI_GetRegisterMotor1+0x504>
 80043fa:	f200 8130 	bhi.w	800465e <RI_GetRegisterMotor1+0x4d6>
 80043fe:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8004402:	f000 8160 	beq.w	80046c6 <RI_GetRegisterMotor1+0x53e>
 8004406:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800440a:	f040 8113 	bne.w	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800440e:	4832      	ldr	r0, [pc, #200]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 8004410:	f7fe fa84 	bl	800291c <MCI_GetVqd>
 8004414:	8020      	strh	r0, [r4, #0]
              break;
 8004416:	e750      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8004418:	482f      	ldr	r0, [pc, #188]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 800441a:	f7fe fa27 	bl	800286c <MCI_GetFaultState>
 800441e:	6020      	str	r0, [r4, #0]
              break;
 8004420:	e717      	b.n	8004252 <RI_GetRegisterMotor1+0xca>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004422:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8004426:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004428:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800442c:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800442e:	f200 80bb 	bhi.w	80045a8 <RI_GetRegisterMotor1+0x420>
 8004432:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004434:	2008      	movs	r0, #8
 8004436:	e6e1      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
            *rawSize = 4;
 8004438:	2304      	movs	r3, #4
 800443a:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 800443c:	4826      	ldr	r0, [pc, #152]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 800443e:	f7fe fa63 	bl	8002908 <MCI_GetIqdref>
 8004442:	4603      	mov	r3, r0
 8004444:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004446:	4824      	ldr	r0, [pc, #144]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 8004448:	f7fe fa5e 	bl	8002908 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 800444c:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 800444e:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8004452:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8004454:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8004456:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8004458:	2000      	movs	r0, #0
            break;
 800445a:	e6cf      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800445c:	4608      	mov	r0, r1
 800445e:	e6b1      	b.n	80041c4 <RI_GetRegisterMotor1+0x3c>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8004460:	481d      	ldr	r0, [pc, #116]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 8004462:	f7fe f9b9 	bl	80027d8 <MCI_GetSTMState>
              break;
 8004466:	e6d9      	b.n	800421c <RI_GetRegisterMotor1+0x94>
          switch (regID)
 8004468:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800446c:	4298      	cmp	r0, r3
 800446e:	d110      	bne.n	8004492 <RI_GetRegisterMotor1+0x30a>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8004470:	4b1e      	ldr	r3, [pc, #120]	@ (80044ec <RI_GetRegisterMotor1+0x364>)
 8004472:	6818      	ldr	r0, [r3, #0]
 8004474:	f005 fd9a 	bl	8009fac <PQD_GetAvrgElMotorPowerW>
 8004478:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 800447c:	9b01      	ldr	r3, [sp, #4]
 800447e:	6023      	str	r3, [r4, #0]
              break;
 8004480:	e6e7      	b.n	8004252 <RI_GetRegisterMotor1+0xca>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8004482:	4815      	ldr	r0, [pc, #84]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 8004484:	f7fe fa10 	bl	80028a8 <MCI_GetMecSpeedRefUnit>
 8004488:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800448c:	0040      	lsls	r0, r0, #1
 800448e:	6020      	str	r0, [r4, #0]
              break;
 8004490:	e6df      	b.n	8004252 <RI_GetRegisterMotor1+0xca>
          switch (regID)
 8004492:	2005      	movs	r0, #5
 8004494:	e6de      	b.n	8004254 <RI_GetRegisterMotor1+0xcc>
            *rawSize = 4;
 8004496:	2304      	movs	r3, #4
 8004498:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 800449a:	480f      	ldr	r0, [pc, #60]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 800449c:	f7fe f9f4 	bl	8002888 <MCI_GetLastRampFinalTorque>
 80044a0:	4603      	mov	r3, r0
 80044a2:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80044a4:	480c      	ldr	r0, [pc, #48]	@ (80044d8 <RI_GetRegisterMotor1+0x350>)
 80044a6:	f7fe f9f3 	bl	8002890 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 80044aa:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80044ac:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 80044ae:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 80044b0:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80044b2:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 80044b4:	b29b      	uxth	r3, r3
            break;
 80044b6:	e6a1      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80044b8:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80044bc:	2310      	movs	r3, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80044be:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 80044c2:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80044c4:	f200 8099 	bhi.w	80045fa <RI_GetRegisterMotor1+0x472>
 80044c8:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80044ca:	2008      	movs	r0, #8
 80044cc:	e696      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
        *size = (*rawSize) + 2U;
 80044ce:	8823      	ldrh	r3, [r4, #0]
 80044d0:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80044d2:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	e691      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
 80044d8:	20000004 	.word	0x20000004
 80044dc:	200001f0 	.word	0x200001f0
 80044e0:	20000188 	.word	0x20000188
 80044e4:	200002f4 	.word	0x200002f4
 80044e8:	200002fc 	.word	0x200002fc
 80044ec:	2000002c 	.word	0x2000002c
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80044f0:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 80044f4:	230c      	movs	r3, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80044f6:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 80044fa:	8023      	strh	r3, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 80044fc:	d951      	bls.n	80045a2 <RI_GetRegisterMotor1+0x41a>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 80044fe:	4b97      	ldr	r3, [pc, #604]	@ (800475c <RI_GetRegisterMotor1+0x5d4>)
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	6859      	ldr	r1, [r3, #4]
 8004504:	689a      	ldr	r2, [r3, #8]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f8c4 300e 	str.w	r3, [r4, #14]
 800450c:	f8c4 0002 	str.w	r0, [r4, #2]
 8004510:	f8c4 1006 	str.w	r1, [r4, #6]
 8004514:	f8c4 200a 	str.w	r2, [r4, #10]
 8004518:	230e      	movs	r3, #14
    uint8_t retVal = MCP_CMD_OK;
 800451a:	2000      	movs	r0, #0
 800451c:	e66e      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
          switch (regID)
 800451e:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8004522:	f000 80a9 	beq.w	8004678 <RI_GetRegisterMotor1+0x4f0>
 8004526:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 800452a:	f000 80a0 	beq.w	800466e <RI_GetRegisterMotor1+0x4e6>
 800452e:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8004532:	d17f      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8004534:	488a      	ldr	r0, [pc, #552]	@ (8004760 <RI_GetRegisterMotor1+0x5d8>)
 8004536:	f005 fcd1 	bl	8009edc <PID_GetKD>
 800453a:	8020      	strh	r0, [r4, #0]
              break;
 800453c:	e6bd      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 800453e:	f241 6310 	movw	r3, #5648	@ 0x1610
 8004542:	4298      	cmp	r0, r3
 8004544:	f000 8104 	beq.w	8004750 <RI_GetRegisterMotor1+0x5c8>
 8004548:	f241 6350 	movw	r3, #5712	@ 0x1650
 800454c:	4298      	cmp	r0, r3
 800454e:	f000 80fa 	beq.w	8004746 <RI_GetRegisterMotor1+0x5be>
 8004552:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8004556:	4298      	cmp	r0, r3
 8004558:	d16c      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 800455a:	4881      	ldr	r0, [pc, #516]	@ (8004760 <RI_GetRegisterMotor1+0x5d8>)
 800455c:	f005 fc9a 	bl	8009e94 <PID_GetKPDivisorPOW2>
 8004560:	8020      	strh	r0, [r4, #0]
              break;
 8004562:	e6aa      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004564:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8004568:	f000 809e 	beq.w	80046a8 <RI_GetRegisterMotor1+0x520>
 800456c:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8004570:	f000 8093 	beq.w	800469a <RI_GetRegisterMotor1+0x512>
 8004574:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8004578:	d15c      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 800457a:	487a      	ldr	r0, [pc, #488]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 800457c:	f7fe f9b0 	bl	80028e0 <MCI_GetIalphabeta>
 8004580:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004584:	8023      	strh	r3, [r4, #0]
              break;
 8004586:	e698      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004588:	f5b0 6f31 	cmp.w	r0, #2832	@ 0xb10
 800458c:	f000 80c2 	beq.w	8004714 <RI_GetRegisterMotor1+0x58c>
 8004590:	d848      	bhi.n	8004624 <RI_GetRegisterMotor1+0x49c>
 8004592:	f5b0 6f2d 	cmp.w	r0, #2768	@ 0xad0
 8004596:	d14d      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
 8004598:	4b73      	ldr	r3, [pc, #460]	@ (8004768 <RI_GetRegisterMotor1+0x5e0>)
 800459a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 800459e:	8023      	strh	r3, [r4, #0]
              break;
 80045a0:	e68b      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
 80045a2:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80045a4:	2008      	movs	r0, #8
 80045a6:	e629      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80045a8:	4b70      	ldr	r3, [pc, #448]	@ (800476c <RI_GetRegisterMotor1+0x5e4>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6818      	ldr	r0, [r3, #0]
 80045ae:	6859      	ldr	r1, [r3, #4]
 80045b0:	689c      	ldr	r4, [r3, #8]
 80045b2:	6094      	str	r4, [r2, #8]
 80045b4:	6010      	str	r0, [r2, #0]
 80045b6:	6051      	str	r1, [r2, #4]
 80045b8:	899b      	ldrh	r3, [r3, #12]
 80045ba:	8193      	strh	r3, [r2, #12]
    uint8_t retVal = MCP_CMD_OK;
 80045bc:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80045be:	2310      	movs	r3, #16
 80045c0:	e61c      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80045c2:	4b6b      	ldr	r3, [pc, #428]	@ (8004770 <RI_GetRegisterMotor1+0x5e8>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f103 0e30 	add.w	lr, r3, #48	@ 0x30
 80045ca:	681c      	ldr	r4, [r3, #0]
 80045cc:	6858      	ldr	r0, [r3, #4]
 80045ce:	6899      	ldr	r1, [r3, #8]
 80045d0:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 80045d4:	f8c2 c00c 	str.w	ip, [r2, #12]
 80045d8:	3310      	adds	r3, #16
 80045da:	4573      	cmp	r3, lr
 80045dc:	6014      	str	r4, [r2, #0]
 80045de:	6050      	str	r0, [r2, #4]
 80045e0:	6091      	str	r1, [r2, #8]
 80045e2:	f102 0210 	add.w	r2, r2, #16
 80045e6:	d1f0      	bne.n	80045ca <RI_GetRegisterMotor1+0x442>
 80045e8:	6818      	ldr	r0, [r3, #0]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	6093      	str	r3, [r2, #8]
 80045f0:	6010      	str	r0, [r2, #0]
 80045f2:	6051      	str	r1, [r2, #4]
 80045f4:	233e      	movs	r3, #62	@ 0x3e
    uint8_t retVal = MCP_CMD_OK;
 80045f6:	2000      	movs	r0, #0
 80045f8:	e600      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 80045fa:	4b5e      	ldr	r3, [pc, #376]	@ (8004774 <RI_GetRegisterMotor1+0x5ec>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	6858      	ldr	r0, [r3, #4]
 8004600:	681c      	ldr	r4, [r3, #0]
 8004602:	6899      	ldr	r1, [r3, #8]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	60d3      	str	r3, [r2, #12]
 8004608:	6050      	str	r0, [r2, #4]
 800460a:	6014      	str	r4, [r2, #0]
 800460c:	6091      	str	r1, [r2, #8]
 800460e:	2312      	movs	r3, #18
    uint8_t retVal = MCP_CMD_OK;
 8004610:	2000      	movs	r0, #0
 8004612:	e5f3      	b.n	80041fc <RI_GetRegisterMotor1+0x74>
          switch (regID)
 8004614:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8004618:	d10c      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 800461a:	4851      	ldr	r0, [pc, #324]	@ (8004760 <RI_GetRegisterMotor1+0x5d8>)
 800461c:	f005 fc30 	bl	8009e80 <PID_GetKP>
 8004620:	8020      	strh	r0, [r4, #0]
              break;
 8004622:	e64a      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 8004624:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8004628:	f43f ae47 	beq.w	80042ba <RI_GetRegisterMotor1+0x132>
 800462c:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8004630:	f43f ae43 	beq.w	80042ba <RI_GetRegisterMotor1+0x132>
 8004634:	2005      	movs	r0, #5
 8004636:	e641      	b.n	80042bc <RI_GetRegisterMotor1+0x134>
 8004638:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 800463c:	d1fa      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = MCI_GetIab(pMCIN).b;
 800463e:	4849      	ldr	r0, [pc, #292]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 8004640:	f7fe f944 	bl	80028cc <MCI_GetIab>
 8004644:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004648:	8023      	strh	r3, [r4, #0]
              break;
 800464a:	e636      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 800464c:	f241 5350 	movw	r3, #5456	@ 0x1550
 8004650:	4298      	cmp	r0, r3
 8004652:	d1ef      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8004654:	4848      	ldr	r0, [pc, #288]	@ (8004778 <RI_GetRegisterMotor1+0x5f0>)
 8004656:	f005 fc25 	bl	8009ea4 <PID_GetKIDivisorPOW2>
 800465a:	8020      	strh	r0, [r4, #0]
              break;
 800465c:	e62d      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
          switch (regID)
 800465e:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8004662:	d1e7      	bne.n	8004634 <RI_GetRegisterMotor1+0x4ac>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004664:	483f      	ldr	r0, [pc, #252]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 8004666:	f7fe f963 	bl	8002930 <MCI_GetValphabeta>
 800466a:	8020      	strh	r0, [r4, #0]
              break;
 800466c:	e625      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 800466e:	4842      	ldr	r0, [pc, #264]	@ (8004778 <RI_GetRegisterMotor1+0x5f0>)
 8004670:	f005 fc0a 	bl	8009e88 <PID_GetKI>
 8004674:	8020      	strh	r0, [r4, #0]
              break;
 8004676:	e620      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8004678:	483f      	ldr	r0, [pc, #252]	@ (8004778 <RI_GetRegisterMotor1+0x5f0>)
 800467a:	f005 fc01 	bl	8009e80 <PID_GetKP>
 800467e:	8020      	strh	r0, [r4, #0]
              break;
 8004680:	e61b      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8004682:	483d      	ldr	r0, [pc, #244]	@ (8004778 <RI_GetRegisterMotor1+0x5f0>)
 8004684:	f005 fc06 	bl	8009e94 <PID_GetKPDivisorPOW2>
 8004688:	8020      	strh	r0, [r4, #0]
              break;
 800468a:	e616      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 800468c:	4835      	ldr	r0, [pc, #212]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 800468e:	f7fe f945 	bl	800291c <MCI_GetVqd>
 8004692:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004696:	8023      	strh	r3, [r4, #0]
              break;
 8004698:	e60f      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800469a:	4832      	ldr	r0, [pc, #200]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 800469c:	f7fe f92a 	bl	80028f4 <MCI_GetIqd>
 80046a0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80046a4:	8023      	strh	r3, [r4, #0]
              break;
 80046a6:	e608      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80046a8:	482e      	ldr	r0, [pc, #184]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 80046aa:	f7fe f923 	bl	80028f4 <MCI_GetIqd>
 80046ae:	8020      	strh	r0, [r4, #0]
              break;
 80046b0:	e603      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 80046b2:	4832      	ldr	r0, [pc, #200]	@ (800477c <RI_GetRegisterMotor1+0x5f4>)
 80046b4:	f005 fbe4 	bl	8009e80 <PID_GetKP>
 80046b8:	8020      	strh	r0, [r4, #0]
              break;
 80046ba:	e5fe      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 80046bc:	482f      	ldr	r0, [pc, #188]	@ (800477c <RI_GetRegisterMotor1+0x5f4>)
 80046be:	f005 fbf1 	bl	8009ea4 <PID_GetKIDivisorPOW2>
 80046c2:	8020      	strh	r0, [r4, #0]
              break;
 80046c4:	e5f9      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 80046c6:	4827      	ldr	r0, [pc, #156]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 80046c8:	f7fe f91e 	bl	8002908 <MCI_GetIqdref>
 80046cc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80046d0:	8023      	strh	r3, [r4, #0]
              break;
 80046d2:	e5f2      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 80046d4:	4828      	ldr	r0, [pc, #160]	@ (8004778 <RI_GetRegisterMotor1+0x5f0>)
 80046d6:	f005 fc05 	bl	8009ee4 <PID_GetKDDivisorPOW2>
 80046da:	8020      	strh	r0, [r4, #0]
              break;
 80046dc:	e5ed      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 80046de:	4821      	ldr	r0, [pc, #132]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 80046e0:	f7fe f8fe 	bl	80028e0 <MCI_GetIalphabeta>
 80046e4:	8020      	strh	r0, [r4, #0]
              break;
 80046e6:	e5e8      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80046e8:	481e      	ldr	r0, [pc, #120]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 80046ea:	f7fe f921 	bl	8002930 <MCI_GetValphabeta>
 80046ee:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80046f2:	8023      	strh	r3, [r4, #0]
              break;
 80046f4:	e5e1      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 80046f6:	481a      	ldr	r0, [pc, #104]	@ (8004760 <RI_GetRegisterMotor1+0x5d8>)
 80046f8:	f005 fbc6 	bl	8009e88 <PID_GetKI>
 80046fc:	8020      	strh	r0, [r4, #0]
              break;
 80046fe:	e5dc      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8004700:	481e      	ldr	r0, [pc, #120]	@ (800477c <RI_GetRegisterMotor1+0x5f4>)
 8004702:	f005 fbc7 	bl	8009e94 <PID_GetKPDivisorPOW2>
 8004706:	8020      	strh	r0, [r4, #0]
              break;
 8004708:	e5d7      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 800470a:	481c      	ldr	r0, [pc, #112]	@ (800477c <RI_GetRegisterMotor1+0x5f4>)
 800470c:	f005 fbe6 	bl	8009edc <PID_GetKD>
 8004710:	8020      	strh	r0, [r4, #0]
              break;
 8004712:	e5d2      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = SPD_GetS16Speed ((SpeednPosFdbk_Handle_t*) &ENCODER_M1); //cstat !MISRAC2012-Rule-11.3
 8004714:	4814      	ldr	r0, [pc, #80]	@ (8004768 <RI_GetRegisterMotor1+0x5e0>)
 8004716:	f006 fc51 	bl	800afbc <SPD_GetS16Speed>
 800471a:	8020      	strh	r0, [r4, #0]
              break;
 800471c:	e5cd      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 800471e:	4818      	ldr	r0, [pc, #96]	@ (8004780 <RI_GetRegisterMotor1+0x5f8>)
 8004720:	f005 f80c 	bl	800973c <VBS_GetAvBusVoltage_V>
 8004724:	8020      	strh	r0, [r4, #0]
              break;
 8004726:	e5c8      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8004728:	480e      	ldr	r0, [pc, #56]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 800472a:	f7fe f8cf 	bl	80028cc <MCI_GetIab>
 800472e:	8020      	strh	r0, [r4, #0]
              break;
 8004730:	e5c3      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8004732:	4811      	ldr	r0, [pc, #68]	@ (8004778 <RI_GetRegisterMotor1+0x5f0>)
 8004734:	f005 fbd2 	bl	8009edc <PID_GetKD>
 8004738:	8020      	strh	r0, [r4, #0]
              break;
 800473a:	e5be      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800473c:	4809      	ldr	r0, [pc, #36]	@ (8004764 <RI_GetRegisterMotor1+0x5dc>)
 800473e:	f7fe f8e3 	bl	8002908 <MCI_GetIqdref>
 8004742:	8020      	strh	r0, [r4, #0]
              break;
 8004744:	e5b9      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8004746:	4806      	ldr	r0, [pc, #24]	@ (8004760 <RI_GetRegisterMotor1+0x5d8>)
 8004748:	f005 fbcc 	bl	8009ee4 <PID_GetKDDivisorPOW2>
 800474c:	8020      	strh	r0, [r4, #0]
              break;
 800474e:	e5b4      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8004750:	4803      	ldr	r0, [pc, #12]	@ (8004760 <RI_GetRegisterMotor1+0x5d8>)
 8004752:	f005 fba7 	bl	8009ea4 <PID_GetKIDivisorPOW2>
 8004756:	8020      	strh	r0, [r4, #0]
              break;
 8004758:	e5af      	b.n	80042ba <RI_GetRegisterMotor1+0x132>
 800475a:	bf00      	nop
 800475c:	20000300 	.word	0x20000300
 8004760:	2000015c 	.word	0x2000015c
 8004764:	20000004 	.word	0x20000004
 8004768:	20000270 	.word	0x20000270
 800476c:	200002f8 	.word	0x200002f8
 8004770:	200002f4 	.word	0x200002f4
 8004774:	200002f0 	.word	0x200002f0
 8004778:	20000130 	.word	0x20000130
 800477c:	20000188 	.word	0x20000188
 8004780:	200001c4 	.word	0x200001c4

08004784 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004784:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8004788:	3808      	subs	r0, #8
 800478a:	b2c0      	uxtb	r0, r0
 800478c:	2810      	cmp	r0, #16
 800478e:	bf9a      	itte	ls
 8004790:	4b01      	ldrls	r3, [pc, #4]	@ (8004798 <RI_GetIDSize+0x14>)
 8004792:	5c18      	ldrbls	r0, [r3, r0]
 8004794:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8004796:	4770      	bx	lr
 8004798:	0800c488 	.word	0x0800c488

0800479c <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 800479c:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 80047a0:	2b10      	cmp	r3, #16
 80047a2:	d003      	beq.n	80047ac <RI_GetPtrReg+0x10>
 80047a4:	4b3b      	ldr	r3, [pc, #236]	@ (8004894 <RI_GetPtrReg+0xf8>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 80047a6:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80047a8:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80047aa:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80047ac:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 80047b0:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
    uint16_t regID = dataID & REG_MASK;
 80047b4:	b282      	uxth	r2, r0
        switch (regID)
 80047b6:	d054      	beq.n	8004862 <RI_GetPtrReg+0xc6>
 80047b8:	d811      	bhi.n	80047de <RI_GetPtrReg+0x42>
 80047ba:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 80047be:	d064      	beq.n	800488a <RI_GetPtrReg+0xee>
 80047c0:	d91f      	bls.n	8004802 <RI_GetPtrReg+0x66>
 80047c2:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 80047c6:	d051      	beq.n	800486c <RI_GetPtrReg+0xd0>
 80047c8:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 80047cc:	d041      	beq.n	8004852 <RI_GetPtrReg+0xb6>
 80047ce:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 80047d2:	d1e7      	bne.n	80047a4 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80047d4:	4b30      	ldr	r3, [pc, #192]	@ (8004898 <RI_GetPtrReg+0xfc>)
 80047d6:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80047d8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80047da:	330c      	adds	r3, #12
            break;
 80047dc:	e7e4      	b.n	80047a8 <RI_GetPtrReg+0xc>
        switch (regID)
 80047de:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 80047e2:	d02c      	beq.n	800483e <RI_GetPtrReg+0xa2>
 80047e4:	d81a      	bhi.n	800481c <RI_GetPtrReg+0x80>
 80047e6:	f5b2 6f21 	cmp.w	r2, #2576	@ 0xa10
 80047ea:	d049      	beq.n	8004880 <RI_GetPtrReg+0xe4>
 80047ec:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 80047f0:	d020      	beq.n	8004834 <RI_GetPtrReg+0x98>
 80047f2:	f5b2 6f1d 	cmp.w	r2, #2512	@ 0x9d0
 80047f6:	d1d5      	bne.n	80047a4 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80047f8:	4b27      	ldr	r3, [pc, #156]	@ (8004898 <RI_GetPtrReg+0xfc>)
 80047fa:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80047fc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80047fe:	3316      	adds	r3, #22
            break;
 8004800:	e7d2      	b.n	80047a8 <RI_GetPtrReg+0xc>
        switch (regID)
 8004802:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 8004806:	d036      	beq.n	8004876 <RI_GetPtrReg+0xda>
 8004808:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 800480c:	d01c      	beq.n	8004848 <RI_GetPtrReg+0xac>
 800480e:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004812:	d1c7      	bne.n	80047a4 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004814:	4b20      	ldr	r3, [pc, #128]	@ (8004898 <RI_GetPtrReg+0xfc>)
  uint8_t retVal = MCP_CMD_OK;
 8004816:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004818:	685b      	ldr	r3, [r3, #4]
             break;
 800481a:	e7c5      	b.n	80047a8 <RI_GetPtrReg+0xc>
        switch (regID)
 800481c:	f5b2 6f2d 	cmp.w	r2, #2768	@ 0xad0
 8004820:	d01c      	beq.n	800485c <RI_GetPtrReg+0xc0>
 8004822:	481e      	ldr	r0, [pc, #120]	@ (800489c <RI_GetPtrReg+0x100>)
 8004824:	4b1b      	ldr	r3, [pc, #108]	@ (8004894 <RI_GetPtrReg+0xf8>)
 8004826:	f5b2 6f31 	cmp.w	r2, #2832	@ 0xb10
 800482a:	bf0a      	itet	eq
 800482c:	4603      	moveq	r3, r0
 800482e:	2005      	movne	r0, #5
 8004830:	2000      	moveq	r0, #0
 8004832:	e7b9      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004834:	4b18      	ldr	r3, [pc, #96]	@ (8004898 <RI_GetPtrReg+0xfc>)
 8004836:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004838:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800483a:	331a      	adds	r3, #26
            break;
 800483c:	e7b4      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800483e:	4b16      	ldr	r3, [pc, #88]	@ (8004898 <RI_GetPtrReg+0xfc>)
 8004840:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004842:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004844:	331c      	adds	r3, #28
            break;
 8004846:	e7af      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004848:	4b13      	ldr	r3, [pc, #76]	@ (8004898 <RI_GetPtrReg+0xfc>)
 800484a:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800484c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 800484e:	3304      	adds	r3, #4
            break;
 8004850:	e7aa      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004852:	4b11      	ldr	r3, [pc, #68]	@ (8004898 <RI_GetPtrReg+0xfc>)
 8004854:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004856:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004858:	3310      	adds	r3, #16
            break;
 800485a:	e7a5      	b.n	80047a8 <RI_GetPtrReg+0xc>
        switch (regID)
 800485c:	4b10      	ldr	r3, [pc, #64]	@ (80048a0 <RI_GetPtrReg+0x104>)
  uint8_t retVal = MCP_CMD_OK;
 800485e:	2000      	movs	r0, #0
 8004860:	e7a2      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004862:	4b0d      	ldr	r3, [pc, #52]	@ (8004898 <RI_GetPtrReg+0xfc>)
 8004864:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004866:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004868:	3312      	adds	r3, #18
            break;
 800486a:	e79d      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800486c:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <RI_GetPtrReg+0xfc>)
 800486e:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004870:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004872:	330e      	adds	r3, #14
            break;
 8004874:	e798      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8004876:	4b08      	ldr	r3, [pc, #32]	@ (8004898 <RI_GetPtrReg+0xfc>)
 8004878:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800487a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800487c:	3302      	adds	r3, #2
            break;
 800487e:	e793      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004880:	4b05      	ldr	r3, [pc, #20]	@ (8004898 <RI_GetPtrReg+0xfc>)
 8004882:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004884:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004886:	3318      	adds	r3, #24
            break;
 8004888:	e78e      	b.n	80047a8 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 800488a:	4b03      	ldr	r3, [pc, #12]	@ (8004898 <RI_GetPtrReg+0xfc>)
 800488c:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800488e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004890:	3306      	adds	r3, #6
            break;
 8004892:	e789      	b.n	80047a8 <RI_GetPtrReg+0xc>
 8004894:	20001afc 	.word	0x20001afc
 8004898:	20000004 	.word	0x20000004
 800489c:	2000027c 	.word	0x2000027c
 80048a0:	20000274 	.word	0x20000274

080048a4 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 80048a4:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048a6:	4c8c      	ldr	r4, [pc, #560]	@ (8004ad8 <RCM_RegisterRegConv+0x234>)
 80048a8:	6822      	ldr	r2, [r4, #0]
 80048aa:	2a00      	cmp	r2, #0
 80048ac:	d033      	beq.n	8004916 <RCM_RegisterRegConv+0x72>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048ae:	f890 c004 	ldrb.w	ip, [r0, #4]
 80048b2:	7913      	ldrb	r3, [r2, #4]
 80048b4:	4563      	cmp	r3, ip
 80048b6:	d01e      	beq.n	80048f6 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048b8:	6861      	ldr	r1, [r4, #4]
 80048ba:	2900      	cmp	r1, #0
 80048bc:	f000 80d3 	beq.w	8004a66 <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048c0:	790b      	ldrb	r3, [r1, #4]
 80048c2:	4563      	cmp	r3, ip
 80048c4:	d036      	beq.n	8004934 <RCM_RegisterRegConv+0x90>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048c6:	68a5      	ldr	r5, [r4, #8]
 80048c8:	2d00      	cmp	r5, #0
 80048ca:	f000 80ad 	beq.w	8004a28 <RCM_RegisterRegConv+0x184>
  uint8_t handle = 255U;
 80048ce:	22ff      	movs	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048d0:	792b      	ldrb	r3, [r5, #4]
 80048d2:	4563      	cmp	r3, ip
 80048d4:	f000 80b8 	beq.w	8004a48 <RCM_RegisterRegConv+0x1a4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048d8:	68e5      	ldr	r5, [r4, #12]
 80048da:	2d00      	cmp	r5, #0
 80048dc:	f000 80bc 	beq.w	8004a58 <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80048e0:	792b      	ldrb	r3, [r5, #4]
 80048e2:	4563      	cmp	r3, ip
 80048e4:	f000 80ce 	beq.w	8004a84 <RCM_RegisterRegConv+0x1e0>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80048e8:	2a03      	cmp	r2, #3
 80048ea:	bf98      	it	ls
 80048ec:	6803      	ldrls	r3, [r0, #0]
 80048ee:	d936      	bls.n	800495e <RCM_RegisterRegConv+0xba>
 80048f0:	22ff      	movs	r2, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 80048f2:	7302      	strb	r2, [r0, #12]
}
 80048f4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80048f6:	6803      	ldr	r3, [r0, #0]
 80048f8:	6812      	ldr	r2, [r2, #0]
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d031      	beq.n	8004962 <RCM_RegisterRegConv+0xbe>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80048fe:	6861      	ldr	r1, [r4, #4]
 8004900:	2900      	cmp	r1, #0
 8004902:	f000 80da 	beq.w	8004aba <RCM_RegisterRegConv+0x216>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004906:	790a      	ldrb	r2, [r1, #4]
 8004908:	4562      	cmp	r2, ip
 800490a:	f000 80cb 	beq.w	8004aa4 <RCM_RegisterRegConv+0x200>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800490e:	68a5      	ldr	r5, [r4, #8]
 8004910:	2d00      	cmp	r5, #0
 8004912:	d1dc      	bne.n	80048ce <RCM_RegisterRegConv+0x2a>
 8004914:	e089      	b.n	8004a2a <RCM_RegisterRegConv+0x186>
 8004916:	6861      	ldr	r1, [r4, #4]
 8004918:	2900      	cmp	r1, #0
 800491a:	f000 80a8 	beq.w	8004a6e <RCM_RegisterRegConv+0x1ca>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800491e:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004922:	790b      	ldrb	r3, [r1, #4]
 8004924:	4563      	cmp	r3, ip
 8004926:	d006      	beq.n	8004936 <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004928:	68a5      	ldr	r5, [r4, #8]
 800492a:	2d00      	cmp	r5, #0
 800492c:	d1d0      	bne.n	80048d0 <RCM_RegisterRegConv+0x2c>
 800492e:	6803      	ldr	r3, [r0, #0]
 8004930:	462a      	mov	r2, r5
 8004932:	e00b      	b.n	800494c <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004934:	22ff      	movs	r2, #255	@ 0xff
 8004936:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004938:	6809      	ldr	r1, [r1, #0]
 800493a:	4299      	cmp	r1, r3
 800493c:	f000 80a8 	beq.w	8004a90 <RCM_RegisterRegConv+0x1ec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004940:	68a5      	ldr	r5, [r4, #8]
 8004942:	2d00      	cmp	r5, #0
 8004944:	d1c4      	bne.n	80048d0 <RCM_RegisterRegConv+0x2c>
 8004946:	2a04      	cmp	r2, #4
 8004948:	d86f      	bhi.n	8004a2a <RCM_RegisterRegConv+0x186>
 800494a:	462a      	mov	r2, r5
 800494c:	68e1      	ldr	r1, [r4, #12]
 800494e:	b131      	cbz	r1, 800495e <RCM_RegisterRegConv+0xba>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004950:	790d      	ldrb	r5, [r1, #4]
 8004952:	4565      	cmp	r5, ip
 8004954:	d103      	bne.n	800495e <RCM_RegisterRegConv+0xba>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004956:	6809      	ldr	r1, [r1, #0]
 8004958:	4299      	cmp	r1, r3
 800495a:	f000 8081 	beq.w	8004a60 <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 800495e:	4611      	mov	r1, r2
 8004960:	e001      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
    uint8_t i = 0;
 8004962:	2200      	movs	r2, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004964:	4611      	mov	r1, r2
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004966:	4d5d      	ldr	r5, [pc, #372]	@ (8004adc <RCM_RegisterRegConv+0x238>)
      RCM_handle_array [handle] = regConv;
 8004968:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
 800496c:	2400      	movs	r4, #0
 800496e:	46a6      	mov	lr, r4
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004970:	f845 4031 	str.w	r4, [r5, r1, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004974:	689c      	ldr	r4, [r3, #8]
 8004976:	f362 0e07 	bfi	lr, r2, #0, #8
 800497a:	07e6      	lsls	r6, r4, #31
 800497c:	f362 2e0f 	bfi	lr, r2, #8, #8
 8004980:	d422      	bmi.n	80049c8 <RCM_RegisterRegConv+0x124>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004982:	685c      	ldr	r4, [r3, #4]
 8004984:	f024 0404 	bic.w	r4, r4, #4
 8004988:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800498a:	2404      	movs	r4, #4
 800498c:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800498e:	685c      	ldr	r4, [r3, #4]
 8004990:	f024 0420 	bic.w	r4, r4, #32
 8004994:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8004996:	2420      	movs	r4, #32
 8004998:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 800499a:	689c      	ldr	r4, [r3, #8]
 800499c:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 80049a0:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 80049a4:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80049a8:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80049aa:	689c      	ldr	r4, [r3, #8]
 80049ac:	2c00      	cmp	r4, #0
 80049ae:	dbfc      	blt.n	80049aa <RCM_RegisterRegConv+0x106>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80049b0:	681c      	ldr	r4, [r3, #0]
 80049b2:	07e5      	lsls	r5, r4, #31
 80049b4:	d408      	bmi.n	80049c8 <RCM_RegisterRegConv+0x124>
  MODIFY_REG(ADCx->CR,
 80049b6:	4d4a      	ldr	r5, [pc, #296]	@ (8004ae0 <RCM_RegisterRegConv+0x23c>)
 80049b8:	689c      	ldr	r4, [r3, #8]
 80049ba:	402c      	ands	r4, r5
 80049bc:	f044 0401 	orr.w	r4, r4, #1
 80049c0:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80049c2:	681c      	ldr	r4, [r3, #0]
 80049c4:	07e4      	lsls	r4, r4, #31
 80049c6:	d5f7      	bpl.n	80049b8 <RCM_RegisterRegConv+0x114>
      RCM_NoInj_array[handle].enable = false;
 80049c8:	4d46      	ldr	r5, [pc, #280]	@ (8004ae4 <RCM_RegisterRegConv+0x240>)
 80049ca:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80049ce:	004c      	lsls	r4, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80049d0:	1d2e      	adds	r6, r5, #4
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80049d2:	2101      	movs	r1, #1
      RCM_NoInj_array[handle].prev = handle;
 80049d4:	f826 e004 	strh.w	lr, [r6, r4]
      RCM_NoInj_array[handle].enable = false;
 80049d8:	f04f 0e00 	mov.w	lr, #0
 80049dc:	f805 e004 	strb.w	lr, [r5, r4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 80049e0:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80049e2:	fa01 f10c 	lsl.w	r1, r1, ip
 80049e6:	f024 040f 	bic.w	r4, r4, #15
 80049ea:	f1bc 0f09 	cmp.w	ip, #9
 80049ee:	631c      	str	r4, [r3, #48]	@ 0x30
 80049f0:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 80049f4:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 80049f8:	d81f      	bhi.n	8004a3a <RCM_RegisterRegConv+0x196>
 80049fa:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80049fe:	0dcd      	lsrs	r5, r1, #23
 8004a00:	f005 0504 	and.w	r5, r5, #4
 8004a04:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004a06:	6886      	ldr	r6, [r0, #8]
 8004a08:	595c      	ldr	r4, [r3, r5]
 8004a0a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004a0e:	f04f 0e07 	mov.w	lr, #7
 8004a12:	fa06 fc01 	lsl.w	ip, r6, r1
 8004a16:	fa0e f101 	lsl.w	r1, lr, r1
 8004a1a:	ea24 0101 	bic.w	r1, r4, r1
 8004a1e:	ea41 010c 	orr.w	r1, r1, ip
 8004a22:	5159      	str	r1, [r3, r5]
  regConv->convHandle = handle;
 8004a24:	7302      	strb	r2, [r0, #12]
}
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a2a:	68e2      	ldr	r2, [r4, #12]
 8004a2c:	b112      	cbz	r2, 8004a34 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a2e:	7911      	ldrb	r1, [r2, #4]
 8004a30:	4561      	cmp	r1, ip
 8004a32:	d03e      	beq.n	8004ab2 <RCM_RegisterRegConv+0x20e>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a34:	2202      	movs	r2, #2
      RCM_handle_array [handle] = regConv;
 8004a36:	4611      	mov	r1, r2
 8004a38:	e795      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004a3a:	3c1e      	subs	r4, #30
 8004a3c:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8004a40:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8004a44:	e7db      	b.n	80049fe <RCM_RegisterRegConv+0x15a>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a46:	460a      	mov	r2, r1
 8004a48:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004a4a:	6829      	ldr	r1, [r5, #0]
 8004a4c:	4299      	cmp	r1, r3
 8004a4e:	f47f af43 	bne.w	80048d8 <RCM_RegisterRegConv+0x34>
      i++;
 8004a52:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a54:	4611      	mov	r1, r2
 8004a56:	e786      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
 8004a58:	2a04      	cmp	r2, #4
 8004a5a:	6803      	ldr	r3, [r0, #0]
 8004a5c:	f67f af7f 	bls.w	800495e <RCM_RegisterRegConv+0xba>
 8004a60:	2203      	movs	r2, #3
      RCM_handle_array [handle] = regConv;
 8004a62:	4611      	mov	r1, r2
 8004a64:	e77f      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a66:	68a5      	ldr	r5, [r4, #8]
 8004a68:	b1cd      	cbz	r5, 8004a9e <RCM_RegisterRegConv+0x1fa>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	e730      	b.n	80048d0 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a6e:	68a5      	ldr	r5, [r4, #8]
 8004a70:	b1d5      	cbz	r5, 8004aa8 <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004a72:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004a76:	792b      	ldrb	r3, [r5, #4]
 8004a78:	4563      	cmp	r3, ip
 8004a7a:	d0e4      	beq.n	8004a46 <RCM_RegisterRegConv+0x1a2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a7c:	68e5      	ldr	r5, [r4, #12]
 8004a7e:	b155      	cbz	r5, 8004a96 <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a80:	460a      	mov	r2, r1
 8004a82:	e72d      	b.n	80048e0 <RCM_RegisterRegConv+0x3c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004a84:	6829      	ldr	r1, [r5, #0]
 8004a86:	6803      	ldr	r3, [r0, #0]
 8004a88:	4299      	cmp	r1, r3
 8004a8a:	f47f af2d 	bne.w	80048e8 <RCM_RegisterRegConv+0x44>
 8004a8e:	e7e7      	b.n	8004a60 <RCM_RegisterRegConv+0x1bc>
      i++;
 8004a90:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004a92:	4611      	mov	r1, r2
 8004a94:	e767      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004a96:	462a      	mov	r2, r5
 8004a98:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array [handle] = regConv;
 8004a9a:	4611      	mov	r1, r2
 8004a9c:	e763      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
 8004a9e:	6803      	ldr	r3, [r0, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	e753      	b.n	800494c <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004aa4:	22ff      	movs	r2, #255	@ 0xff
 8004aa6:	e747      	b.n	8004938 <RCM_RegisterRegConv+0x94>
 8004aa8:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004aac:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004aae:	462a      	mov	r2, r5
 8004ab0:	e74c      	b.n	800494c <RCM_RegisterRegConv+0xa8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d0d3      	beq.n	8004a60 <RCM_RegisterRegConv+0x1bc>
 8004ab8:	e7bc      	b.n	8004a34 <RCM_RegisterRegConv+0x190>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004aba:	68a5      	ldr	r5, [r4, #8]
 8004abc:	2d00      	cmp	r5, #0
 8004abe:	d0ef      	beq.n	8004aa0 <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004ac0:	792a      	ldrb	r2, [r5, #4]
 8004ac2:	4562      	cmp	r2, ip
 8004ac4:	d006      	beq.n	8004ad4 <RCM_RegisterRegConv+0x230>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ac6:	68e5      	ldr	r5, [r4, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004ac8:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004aca:	2d00      	cmp	r5, #0
 8004acc:	f47f af08 	bne.w	80048e0 <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 8004ad0:	4611      	mov	r1, r2
 8004ad2:	e748      	b.n	8004966 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	e7b8      	b.n	8004a4a <RCM_RegisterRegConv+0x1a6>
 8004ad8:	20001b44 	.word	0x20001b44
 8004adc:	20001b24 	.word	0x20001b24
 8004ae0:	7fffffc0 	.word	0x7fffffc0
 8004ae4:	20001b0c 	.word	0x20001b0c

08004ae8 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8004ae8:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8004aea:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004aec:	4a5e      	ldr	r2, [pc, #376]	@ (8004c68 <RCM_ExecRegularConv+0x180>)
 8004aee:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004af2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004af6:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d138      	bne.n	8004b70 <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004afe:	7811      	ldrb	r1, [r2, #0]
 8004b00:	b991      	cbnz	r1, 8004b28 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8004b02:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8004b04:	7991      	ldrb	r1, [r2, #6]
 8004b06:	2900      	cmp	r1, #0
 8004b08:	d175      	bne.n	8004bf6 <RCM_ExecRegularConv+0x10e>
 8004b0a:	7b11      	ldrb	r1, [r2, #12]
 8004b0c:	2900      	cmp	r1, #0
 8004b0e:	d177      	bne.n	8004c00 <RCM_ExecRegularConv+0x118>
 8004b10:	7c91      	ldrb	r1, [r2, #18]
 8004b12:	2900      	cmp	r1, #0
 8004b14:	f000 809a 	beq.w	8004c4c <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004b18:	7dd1      	ldrb	r1, [r2, #23]
 8004b1a:	4299      	cmp	r1, r3
 8004b1c:	f240 80a0 	bls.w	8004c60 <RCM_ExecRegularConv+0x178>
 8004b20:	f04f 0e03 	mov.w	lr, #3
 8004b24:	4670      	mov	r0, lr
 8004b26:	e003      	b.n	8004b30 <RCM_ExecRegularConv+0x48>
 8004b28:	7951      	ldrb	r1, [r2, #5]
 8004b2a:	428b      	cmp	r3, r1
 8004b2c:	d2ea      	bcs.n	8004b04 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8004b2e:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8004b30:	eb0c 0403 	add.w	r4, ip, r3
 8004b34:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8004b38:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8004b3c:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004b3e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8004b42:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8004b46:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b4a:	4c48      	ldr	r4, [pc, #288]	@ (8004c6c <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8004b4c:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8004b4e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b52:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8004b54:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8004b56:	eb0c 0003 	add.w	r0, ip, r3
 8004b5a:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b5c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8004b60:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004b64:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004b68:	7849      	ldrb	r1, [r1, #1]
 8004b6a:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8004b6c:	bf18      	it	ne
 8004b6e:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004b70:	493f      	ldr	r1, [pc, #252]	@ (8004c70 <RCM_ExecRegularConv+0x188>)
 8004b72:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8004b76:	2900      	cmp	r1, #0
 8004b78:	d138      	bne.n	8004bec <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b7a:	493e      	ldr	r1, [pc, #248]	@ (8004c74 <RCM_ExecRegularConv+0x18c>)
 8004b7c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004b80:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b82:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004b84:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b86:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004b88:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004b8c:	fa01 f104 	lsl.w	r1, r1, r4
 8004b90:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8004b94:	bf84      	itt	hi
 8004b96:	3d1e      	subhi	r5, #30
 8004b98:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 8004b9c:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004b9e:	bf94      	ite	ls
 8004ba0:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 8004ba4:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8004ba8:	0d09      	lsrs	r1, r1, #20
 8004baa:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8004bae:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8004bb2:	4321      	orrs	r1, r4
 8004bb4:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8004bb6:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004bb8:	6881      	ldr	r1, [r0, #8]
 8004bba:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8004bbe:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8004bc2:	f041 0104 	orr.w	r1, r1, #4
 8004bc6:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	0749      	lsls	r1, r1, #29
 8004bcc:	d5fc      	bpl.n	8004bc8 <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004bce:	eb0c 0103 	add.w	r1, ip, r3
 8004bd2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004bd6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004bd8:	4d24      	ldr	r5, [pc, #144]	@ (8004c6c <RCM_ExecRegularConv+0x184>)
 8004bda:	f891 e005 	ldrb.w	lr, [r1, #5]
 8004bde:	f885 e000 	strb.w	lr, [r5]
 8004be2:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 8004be6:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004be8:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8004bea:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004bec:	449c      	add	ip, r3
 8004bee:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8004bf2:	8850      	ldrh	r0, [r2, #2]
 8004bf4:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 8004bf6:	7ad1      	ldrb	r1, [r2, #11]
 8004bf8:	428b      	cmp	r3, r1
 8004bfa:	d31d      	bcc.n	8004c38 <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8004bfc:	7b11      	ldrb	r1, [r2, #12]
 8004bfe:	b1f9      	cbz	r1, 8004c40 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8004c00:	7c51      	ldrb	r1, [r2, #17]
 8004c02:	4299      	cmp	r1, r3
 8004c04:	d828      	bhi.n	8004c58 <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8004c06:	7c91      	ldrb	r1, [r2, #18]
 8004c08:	2900      	cmp	r1, #0
 8004c0a:	d185      	bne.n	8004b18 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004c0c:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004c0e:	4608      	mov	r0, r1
 8004c10:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8004c14:	eb0c 0403 	add.w	r4, ip, r3
 8004c18:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004c1c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004c20:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004c22:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8004c24:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8004c26:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004c2a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004c2e:	4c0f      	ldr	r4, [pc, #60]	@ (8004c6c <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8004c30:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8004c32:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004c34:	7821      	ldrb	r1, [r4, #0]
 8004c36:	e78e      	b.n	8004b56 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004c38:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8004c3c:	4670      	mov	r0, lr
 8004c3e:	e777      	b.n	8004b30 <RCM_ExecRegularConv+0x48>
 8004c40:	7c91      	ldrb	r1, [r2, #18]
 8004c42:	2900      	cmp	r1, #0
 8004c44:	f47f af68 	bne.w	8004b18 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004c48:	2101      	movs	r1, #1
 8004c4a:	e7e0      	b.n	8004c0e <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8004c4c:	2800      	cmp	r0, #0
 8004c4e:	d0de      	beq.n	8004c0e <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8004c50:	4c06      	ldr	r4, [pc, #24]	@ (8004c6c <RCM_ExecRegularConv+0x184>)
 8004c52:	4619      	mov	r1, r3
 8004c54:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 8004c56:	e77e      	b.n	8004b56 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004c58:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8004c5c:	4670      	mov	r0, lr
 8004c5e:	e767      	b.n	8004b30 <RCM_ExecRegularConv+0x48>
 8004c60:	2003      	movs	r0, #3
          LastEnable = i;
 8004c62:	4601      	mov	r1, r0
 8004c64:	e7d4      	b.n	8004c10 <RCM_ExecRegularConv+0x128>
 8004c66:	bf00      	nop
 8004c68:	20001b0c 	.word	0x20001b0c
 8004c6c:	20001b08 	.word	0x20001b08
 8004c70:	20000058 	.word	0x20000058
 8004c74:	20001b44 	.word	0x20001b44

08004c78 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 8004c78:	4b14      	ldr	r3, [pc, #80]	@ (8004ccc <RCM_ExecUserConv+0x54>)
{
 8004c7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 8004c7e:	681c      	ldr	r4, [r3, #0]
 8004c80:	b124      	cbz	r4, 8004c8c <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004c82:	4d13      	ldr	r5, [pc, #76]	@ (8004cd0 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 8004c84:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8004c86:	782b      	ldrb	r3, [r5, #0]
 8004c88:	2b01      	cmp	r3, #1
 8004c8a:	d001      	beq.n	8004c90 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 8004c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004c90:	4620      	mov	r0, r4
 8004c92:	f7ff ff29 	bl	8004ae8 <RCM_ExecRegularConv>
 8004c96:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd4 <RCM_ExecUserConv+0x5c>)
 8004c98:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 8004c9a:	4b0f      	ldr	r3, [pc, #60]	@ (8004cd8 <RCM_ExecUserConv+0x60>)
 8004c9c:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 8004ca0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8004ca4:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 8004ca6:	785b      	ldrb	r3, [r3, #1]
 8004ca8:	b10b      	cbz	r3, 8004cae <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 8004caa:	2302      	movs	r3, #2
 8004cac:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <RCM_ExecUserConv+0x64>)
 8004cb0:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8004cb4:	2f00      	cmp	r7, #0
 8004cb6:	d0e9      	beq.n	8004c8c <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004cb8:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004cbc:	4620      	mov	r0, r4
 8004cbe:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004cc4:	463b      	mov	r3, r7
}
 8004cc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004cca:	4718      	bx	r3
 8004ccc:	20001b00 	.word	0x20001b00
 8004cd0:	20001b04 	.word	0x20001b04
 8004cd4:	20001b06 	.word	0x20001b06
 8004cd8:	20001b0c 	.word	0x20001b0c
 8004cdc:	20001b24 	.word	0x20001b24

08004ce0 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	@ (8004d5c <RCM_ExecNextConv+0x7c>)
 8004ce2:	491f      	ldr	r1, [pc, #124]	@ (8004d60 <RCM_ExecNextConv+0x80>)
 8004ce4:	781a      	ldrb	r2, [r3, #0]
 8004ce6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004cea:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8004cee:	b3a3      	cbz	r3, 8004d5a <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8004d64 <RCM_ExecNextConv+0x84>)
{
 8004cf2:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004cf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cf8:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004cfa:	2404      	movs	r4, #4
 8004cfc:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004cfe:	f893 c004 	ldrb.w	ip, [r3, #4]
 8004d02:	2301      	movs	r3, #1
 8004d04:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004d08:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004d0c:	fa03 f30c 	lsl.w	r3, r3, ip
 8004d10:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8004d14:	bf84      	itt	hi
 8004d16:	3c1e      	subhi	r4, #30
 8004d18:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8004d1c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004d20:	bf98      	it	ls
 8004d22:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004d26:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004d28:	bf88      	it	hi
 8004d2a:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8004d2e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004d30:	0d1b      	lsrs	r3, r3, #20
 8004d32:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8004d36:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	6303      	str	r3, [r0, #48]	@ 0x30
 8004d3e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004d40:	6883      	ldr	r3, [r0, #8]
 8004d42:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8004d46:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8004d4a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004d4e:	2401      	movs	r4, #1
 8004d50:	f043 0304 	orr.w	r3, r3, #4
 8004d54:	6083      	str	r3, [r0, #8]
 8004d56:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004d58:	bd10      	pop	{r4, pc}
 8004d5a:	4770      	bx	lr
 8004d5c:	20001b08 	.word	0x20001b08
 8004d60:	20001b0c 	.word	0x20001b0c
 8004d64:	20001b44 	.word	0x20001b44

08004d68 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 8004d68:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004d6a:	4812      	ldr	r0, [pc, #72]	@ (8004db4 <RCM_ReadOngoingConv+0x4c>)
 8004d6c:	4a12      	ldr	r2, [pc, #72]	@ (8004db8 <RCM_ReadOngoingConv+0x50>)
 8004d6e:	7803      	ldrb	r3, [r0, #0]
 8004d70:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004d74:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 8004d78:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004d7c:	b16c      	cbz	r4, 8004d9a <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004d7e:	4c0f      	ldr	r4, [pc, #60]	@ (8004dbc <RCM_ReadOngoingConv+0x54>)
 8004d80:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8004d84:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004d86:	6825      	ldr	r5, [r4, #0]
 8004d88:	076d      	lsls	r5, r5, #29
 8004d8a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004d8e:	d406      	bmi.n	8004d9e <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 8004d90:	449c      	add	ip, r3
 8004d92:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 8004d96:	7953      	ldrb	r3, [r2, #5]
 8004d98:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 8004d9a:	bc30      	pop	{r4, r5}
 8004d9c:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 8004d9e:	784d      	ldrb	r5, [r1, #1]
 8004da0:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 8004da4:	d0f4      	beq.n	8004d90 <RCM_ReadOngoingConv+0x28>
 8004da6:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 8004da8:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 8004dac:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 8004dae:	2402      	movs	r4, #2
 8004db0:	704c      	strb	r4, [r1, #1]
 8004db2:	e7ed      	b.n	8004d90 <RCM_ReadOngoingConv+0x28>
 8004db4:	20001b08 	.word	0x20001b08
 8004db8:	20001b0c 	.word	0x20001b0c
 8004dbc:	20001b44 	.word	0x20001b44

08004dc0 <TIM4_IRQHandler>:
  /* USER CODE BEGIN SPD_TIM_M1_IRQn 0 */

  /* USER CODE END SPD_TIM_M1_IRQn 0 */

  /* Encoder Timer UPDATE IT is dynamicaly enabled/disabled, checking enable state is required */
  if (LL_TIM_IsEnabledIT_UPDATE(ENCODER_M1.TIMx) != 0U)
 8004dc0:	4806      	ldr	r0, [pc, #24]	@ (8004ddc <TIM4_IRQHandler+0x1c>)
 8004dc2:	6a03      	ldr	r3, [r0, #32]
  return ((READ_BIT(TIMx->DIER, TIM_DIER_UIE) == (TIM_DIER_UIE)) ? 1UL : 0UL);
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	07d1      	lsls	r1, r2, #31
 8004dc8:	d507      	bpl.n	8004dda <TIM4_IRQHandler+0x1a>
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	07d2      	lsls	r2, r2, #31
 8004dce:	d504      	bpl.n	8004dda <TIM4_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004dd0:	f06f 0201 	mvn.w	r2, #1
 8004dd4:	611a      	str	r2, [r3, #16]
  {
    if (LL_TIM_IsActiveFlag_UPDATE(ENCODER_M1.TIMx) != 0U)
    {
      LL_TIM_ClearFlag_UPDATE(ENCODER_M1.TIMx);
      (void)ENC_IRQHandler(&ENCODER_M1);
 8004dd6:	f004 be85 	b.w	8009ae4 <ENC_IRQHandler>
  }

  /* USER CODE BEGIN SPD_TIM_M1_IRQn 1 */

  /* USER CODE END SPD_TIM_M1_IRQn 1 */
}
 8004dda:	4770      	bx	lr
 8004ddc:	20000270 	.word	0x20000270

08004de0 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8004de0:	4b44      	ldr	r3, [pc, #272]	@ (8004ef4 <USART2_IRQHandler+0x114>)
 8004de2:	69da      	ldr	r2, [r3, #28]
 8004de4:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8004de6:	b510      	push	{r4, lr}
 8004de8:	d509      	bpl.n	8004dfe <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004dea:	4943      	ldr	r1, [pc, #268]	@ (8004ef8 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8004dec:	4843      	ldr	r0, [pc, #268]	@ (8004efc <USART2_IRQHandler+0x11c>)
 8004dee:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004df0:	2440      	movs	r4, #64	@ 0x40
 8004df2:	f022 0201 	bic.w	r2, r2, #1
 8004df6:	61ca      	str	r2, [r1, #28]
 8004df8:	621c      	str	r4, [r3, #32]
 8004dfa:	f7fc fe2d 	bl	8001a58 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004dfe:	4b3d      	ldr	r3, [pc, #244]	@ (8004ef4 <USART2_IRQHandler+0x114>)
 8004e00:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004e02:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004e04:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004e06:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004e08:	074c      	lsls	r4, r1, #29
 8004e0a:	d56a      	bpl.n	8004ee2 <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004e0c:	07d8      	lsls	r0, r3, #31
 8004e0e:	d51e      	bpl.n	8004e4e <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8004e10:	4b38      	ldr	r3, [pc, #224]	@ (8004ef4 <USART2_IRQHandler+0x114>)
 8004e12:	220e      	movs	r2, #14
 8004e14:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e16:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e1a:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004e1e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004e22:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004e2a:	e840 3100 	strex	r1, r3, [r0]
 8004e2e:	2900      	cmp	r1, #0
 8004e30:	d1f3      	bne.n	8004e1a <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e36:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004e3a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004e3e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e42:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004e46:	e840 3100 	strex	r1, r3, [r0]
 8004e4a:	2900      	cmp	r1, #0
 8004e4c:	d1f3      	bne.n	8004e36 <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004e4e:	4b29      	ldr	r3, [pc, #164]	@ (8004ef4 <USART2_IRQHandler+0x114>)
 8004e50:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004e52:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004e54:	06d2      	lsls	r2, r2, #27
 8004e56:	d543      	bpl.n	8004ee0 <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004e58:	06db      	lsls	r3, r3, #27
 8004e5a:	d541      	bpl.n	8004ee0 <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e5c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e60:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004e64:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004e68:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004e70:	e840 3100 	strex	r1, r3, [r0]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	d1f3      	bne.n	8004e60 <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e7c:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004e80:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8004e84:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004e8c:	e840 3100 	strex	r1, r3, [r0]
 8004e90:	2900      	cmp	r1, #0
 8004e92:	d1f3      	bne.n	8004e7c <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e94:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004e98:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004ea0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004ea8:	e840 3100 	strex	r1, r3, [r0]
 8004eac:	2900      	cmp	r1, #0
 8004eae:	d1f3      	bne.n	8004e98 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8004eb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ef4 <USART2_IRQHandler+0x114>)
 8004eb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004eb8:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8004ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004ec8:	e840 3100 	strex	r1, r3, [r0]
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	d1f3      	bne.n	8004eb8 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004ed0:	4b09      	ldr	r3, [pc, #36]	@ (8004ef8 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8004ed2:	480a      	ldr	r0, [pc, #40]	@ (8004efc <USART2_IRQHandler+0x11c>)
 8004ed4:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8004ed6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eda:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 8004edc:	f7fc bfb2 	b.w	8001e44 <ASPEP_HWReset>
}
 8004ee0:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004ee2:	07d9      	lsls	r1, r3, #31
 8004ee4:	d5b3      	bpl.n	8004e4e <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8004ee6:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004eea:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 8004eee:	4302      	orrs	r2, r0
 8004ef0:	d18e      	bne.n	8004e10 <USART2_IRQHandler+0x30>
 8004ef2:	e7ac      	b.n	8004e4e <USART2_IRQHandler+0x6e>
 8004ef4:	40004400 	.word	0x40004400
 8004ef8:	40020000 	.word	0x40020000
 8004efc:	2000034c 	.word	0x2000034c

08004f00 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8004f00:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8004f02:	f7fd ff25 	bl	8002d50 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8004f06:	e7fe      	b.n	8004f06 <HardFault_Handler+0x6>

08004f08 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8004f08:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004f0a:	4c0d      	ldr	r4, [pc, #52]	@ (8004f40 <SysTick_Handler+0x38>)
 8004f0c:	7823      	ldrb	r3, [r4, #0]
 8004f0e:	2b02      	cmp	r3, #2
 8004f10:	d00f      	beq.n	8004f32 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8004f12:	3301      	adds	r3, #1
 8004f14:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8004f16:	4a0b      	ldr	r2, [pc, #44]	@ (8004f44 <SysTick_Handler+0x3c>)
 8004f18:	7023      	strb	r3, [r4, #0]
 8004f1a:	6813      	ldr	r3, [r2, #0]
 8004f1c:	079b      	lsls	r3, r3, #30
 8004f1e:	d504      	bpl.n	8004f2a <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004f20:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8004f22:	4809      	ldr	r0, [pc, #36]	@ (8004f48 <SysTick_Handler+0x40>)
 8004f24:	6053      	str	r3, [r2, #4]
 8004f26:	f7fc ff3d 	bl	8001da4 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8004f2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004f2e:	f7fd bec7 	b.w	8002cc0 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004f32:	f000 fd39 	bl	80059a8 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8004f36:	f001 fd65 	bl	8006a04 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e7eb      	b.n	8004f16 <SysTick_Handler+0xe>
 8004f3e:	bf00      	nop
 8004f40:	200003d4 	.word	0x200003d4
 8004f44:	40020000 	.word	0x40020000
 8004f48:	2000034c 	.word	0x2000034c

08004f4c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004f4c:	4b04      	ldr	r3, [pc, #16]	@ (8004f60 <EXTI15_10_IRQHandler+0x14>)
 8004f4e:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8004f50:	0552      	lsls	r2, r2, #21
 8004f52:	d400      	bmi.n	8004f56 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8004f54:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004f56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004f5a:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8004f5c:	f7fd bf06 	b.w	8002d6c <UI_HandleStartStopButton_cb>
 8004f60:	40010400 	.word	0x40010400

08004f64 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f64:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f66:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa0 <HAL_MspInit+0x3c>)
 8004f68:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f6a:	f042 0201 	orr.w	r2, r2, #1
{
 8004f6e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f70:	661a      	str	r2, [r3, #96]	@ 0x60
 8004f72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004f74:	f002 0201 	and.w	r2, r2, #1
 8004f78:	9200      	str	r2, [sp, #0]
 8004f7a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f7c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f7e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8004f82:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f8a:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004f8c:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f8e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8004f90:	f001 fcae 	bl	80068f0 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f94:	b003      	add	sp, #12
 8004f96:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 8004f9a:	f002 be83 	b.w	8007ca4 <HAL_PWREx_DisableUCPDDeadBattery>
 8004f9e:	bf00      	nop
 8004fa0:	40021000 	.word	0x40021000
 8004fa4:	00000000 	.word	0x00000000

08004fa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004fa8:	b510      	push	{r4, lr}
 8004faa:	4604      	mov	r4, r0
 8004fac:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fae:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fb0:	2244      	movs	r2, #68	@ 0x44
 8004fb2:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004fb8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 8004fbc:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004fbe:	f006 f949 	bl	800b254 <memset>
  if(hadc->Instance==ADC1)
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004fc8:	d004      	beq.n	8004fd4 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 8004fca:	4a43      	ldr	r2, [pc, #268]	@ (80050d8 <HAL_ADC_MspInit+0x130>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d046      	beq.n	800505e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8004fd0:	b01c      	add	sp, #112	@ 0x70
 8004fd2:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fd4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004fd8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fdc:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004fde:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004fe0:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004fe2:	f003 fa1b 	bl	800841c <HAL_RCCEx_PeriphCLKConfig>
 8004fe6:	2800      	cmp	r0, #0
 8004fe8:	d16a      	bne.n	80050c0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004fea:	4a3c      	ldr	r2, [pc, #240]	@ (80050dc <HAL_ADC_MspInit+0x134>)
 8004fec:	6813      	ldr	r3, [r2, #0]
 8004fee:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ff0:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004ff2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004ff4:	d109      	bne.n	800500a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004ff6:	4b3a      	ldr	r3, [pc, #232]	@ (80050e0 <HAL_ADC_MspInit+0x138>)
 8004ff8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ffa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ffe:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005000:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005002:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005006:	9301      	str	r3, [sp, #4]
 8005008:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800500a:	4b35      	ldr	r3, [pc, #212]	@ (80050e0 <HAL_ADC_MspInit+0x138>)
 800500c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800500e:	f042 0201 	orr.w	r2, r2, #1
 8005012:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005014:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005016:	f002 0201 	and.w	r2, r2, #1
 800501a:	9202      	str	r2, [sp, #8]
 800501c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800501e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005020:	f042 0202 	orr.w	r2, r2, #2
 8005024:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005026:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8005028:	2005      	movs	r0, #5
 800502a:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8005030:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005034:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005036:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005038:	a906      	add	r1, sp, #24
 800503a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800503e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005040:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005042:	f002 fa81 	bl	8007548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8005046:	f244 0202 	movw	r2, #16386	@ 0x4002
 800504a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800504c:	4825      	ldr	r0, [pc, #148]	@ (80050e4 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800504e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005050:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8005052:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005056:	f002 fa77 	bl	8007548 <HAL_GPIO_Init>
}
 800505a:	b01c      	add	sp, #112	@ 0x70
 800505c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800505e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005062:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005066:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005068:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800506a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800506c:	f003 f9d6 	bl	800841c <HAL_RCCEx_PeriphCLKConfig>
 8005070:	bb48      	cbnz	r0, 80050c6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005072:	4a1a      	ldr	r2, [pc, #104]	@ (80050dc <HAL_ADC_MspInit+0x134>)
 8005074:	6813      	ldr	r3, [r2, #0]
 8005076:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005078:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 800507a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800507c:	d109      	bne.n	8005092 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800507e:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <HAL_ADC_MspInit+0x138>)
 8005080:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005082:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005086:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800508a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800508e:	9304      	str	r3, [sp, #16]
 8005090:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005092:	4b13      	ldr	r3, [pc, #76]	@ (80050e0 <HAL_ADC_MspInit+0x138>)
 8005094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800509c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 800509e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80050d0 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80050a8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050aa:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80050ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80050b0:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050b4:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80050b8:	f002 fa46 	bl	8007548 <HAL_GPIO_Init>
}
 80050bc:	b01c      	add	sp, #112	@ 0x70
 80050be:	bd10      	pop	{r4, pc}
      Error_Handler();
 80050c0:	f7fd fad4 	bl	800266c <Error_Handler>
 80050c4:	e791      	b.n	8004fea <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80050c6:	f7fd fad1 	bl	800266c <Error_Handler>
 80050ca:	e7d2      	b.n	8005072 <HAL_ADC_MspInit+0xca>
 80050cc:	f3af 8000 	nop.w
 80050d0:	00000040 	.word	0x00000040
 80050d4:	00000003 	.word	0x00000003
 80050d8:	50000100 	.word	0x50000100
 80050dc:	20001b54 	.word	0x20001b54
 80050e0:	40021000 	.word	0x40021000
 80050e4:	48000400 	.word	0x48000400

080050e8 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 80050e8:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 80050ea:	6802      	ldr	r2, [r0, #0]
 80050ec:	4934      	ldr	r1, [pc, #208]	@ (80051c0 <HAL_COMP_MspInit+0xd8>)
{
 80050ee:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f0:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 80050f2:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050f4:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80050f8:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80050fc:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 80050fe:	d008      	beq.n	8005112 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8005100:	4b30      	ldr	r3, [pc, #192]	@ (80051c4 <HAL_COMP_MspInit+0xdc>)
 8005102:	429a      	cmp	r2, r3
 8005104:	d01e      	beq.n	8005144 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8005106:	4b30      	ldr	r3, [pc, #192]	@ (80051c8 <HAL_COMP_MspInit+0xe0>)
 8005108:	429a      	cmp	r2, r3
 800510a:	d034      	beq.n	8005176 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800510c:	b00b      	add	sp, #44	@ 0x2c
 800510e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005112:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005116:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800511a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80051a8 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800511e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005120:	f042 0201 	orr.w	r2, r2, #1
 8005124:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005126:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800512e:	a904      	add	r1, sp, #16
 8005130:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8005134:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005138:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800513a:	f002 fa05 	bl	8007548 <HAL_GPIO_Init>
}
 800513e:	b00b      	add	sp, #44	@ 0x2c
 8005140:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005144:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8005148:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800514c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800514e:	f042 0201 	orr.w	r2, r2, #1
 8005152:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8005156:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80051b0 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800515a:	f003 0301 	and.w	r3, r3, #1
 800515e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8005160:	a904      	add	r1, sp, #16
 8005162:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8005166:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800516a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800516c:	f002 f9ec 	bl	8007548 <HAL_GPIO_Init>
}
 8005170:	b00b      	add	sp, #44	@ 0x2c
 8005172:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005176:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 800517a:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 800517e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8005180:	4812      	ldr	r0, [pc, #72]	@ (80051cc <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005182:	f042 0202 	orr.w	r2, r2, #2
 8005186:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 800518a:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80051b8 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8005194:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8005196:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800519a:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 800519c:	f002 f9d4 	bl	8007548 <HAL_GPIO_Init>
}
 80051a0:	b00b      	add	sp, #44	@ 0x2c
 80051a2:	f85d fb04 	ldr.w	pc, [sp], #4
 80051a6:	bf00      	nop
 80051a8:	00000002 	.word	0x00000002
 80051ac:	00000003 	.word	0x00000003
 80051b0:	00000080 	.word	0x00000080
 80051b4:	00000003 	.word	0x00000003
 80051b8:	00000001 	.word	0x00000001
 80051bc:	00000003 	.word	0x00000003
 80051c0:	40010200 	.word	0x40010200
 80051c4:	40010204 	.word	0x40010204
 80051c8:	4001020c 	.word	0x4001020c
 80051cc:	48000400 	.word	0x48000400

080051d0 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 80051d0:	4b09      	ldr	r3, [pc, #36]	@ (80051f8 <HAL_CORDIC_MspInit+0x28>)
 80051d2:	6802      	ldr	r2, [r0, #0]
 80051d4:	429a      	cmp	r2, r3
 80051d6:	d000      	beq.n	80051da <HAL_CORDIC_MspInit+0xa>
 80051d8:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80051da:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 80051de:	f042 0208 	orr.w	r2, r2, #8
{
 80051e2:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 80051e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80051e8:	649a      	str	r2, [r3, #72]	@ 0x48
 80051ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80051ec:	f003 0308 	and.w	r3, r3, #8
 80051f0:	9301      	str	r3, [sp, #4]
 80051f2:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 80051f4:	b002      	add	sp, #8
 80051f6:	4770      	bx	lr
 80051f8:	40020c00 	.word	0x40020c00

080051fc <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 80051fc:	4b0a      	ldr	r3, [pc, #40]	@ (8005228 <HAL_DAC_MspInit+0x2c>)
 80051fe:	6802      	ldr	r2, [r0, #0]
 8005200:	429a      	cmp	r2, r3
 8005202:	d000      	beq.n	8005206 <HAL_DAC_MspInit+0xa>
 8005204:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8005206:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800520a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 800520e:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8005210:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005212:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005216:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005218:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800521a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800521e:	9301      	str	r3, [sp, #4]
 8005220:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8005222:	b002      	add	sp, #8
 8005224:	4770      	bx	lr
 8005226:	bf00      	nop
 8005228:	50001000 	.word	0x50001000

0800522c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800522c:	b5d0      	push	{r4, r6, r7, lr}
 800522e:	4604      	mov	r4, r0
 8005230:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005232:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005234:	2244      	movs	r2, #68	@ 0x44
 8005236:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005238:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800523c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8005240:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005242:	f006 f807 	bl	800b254 <memset>
  if(hfdcan->Instance==FDCAN1)
 8005246:	4b2f      	ldr	r3, [pc, #188]	@ (8005304 <HAL_FDCAN_MspInit+0xd8>)
 8005248:	6822      	ldr	r2, [r4, #0]
 800524a:	429a      	cmp	r2, r3
 800524c:	d001      	beq.n	8005252 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800524e:	b01a      	add	sp, #104	@ 0x68
 8005250:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005252:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8005256:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800525a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800525c:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800525e:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005260:	f003 f8dc 	bl	800841c <HAL_RCCEx_PeriphCLKConfig>
 8005264:	2800      	cmp	r0, #0
 8005266:	d149      	bne.n	80052fc <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005268:	4b27      	ldr	r3, [pc, #156]	@ (8005308 <HAL_FDCAN_MspInit+0xdc>)
 800526a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800526c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8005270:	659a      	str	r2, [r3, #88]	@ 0x58
 8005272:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005274:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8005278:	9201      	str	r2, [sp, #4]
 800527a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800527c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005284:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005286:	f002 0201 	and.w	r2, r2, #1
 800528a:	9202      	str	r2, [sp, #8]
 800528c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800528e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005290:	f042 0202 	orr.w	r2, r2, #2
 8005294:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005296:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005298:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800529c:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800529e:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80052a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80052a8:	2600      	movs	r6, #0
 80052aa:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80052ac:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052ae:	a904      	add	r1, sp, #16
 80052b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052b4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80052b6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80052b8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052bc:	f002 f944 	bl	8007548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052c0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052c8:	4810      	ldr	r0, [pc, #64]	@ (800530c <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80052ca:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80052cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052d0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d4:	f002 f938 	bl	8007548 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80052d8:	2200      	movs	r2, #0
 80052da:	4611      	mov	r1, r2
 80052dc:	2015      	movs	r0, #21
 80052de:	f001 fb19 	bl	8006914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80052e2:	2015      	movs	r0, #21
 80052e4:	f001 fb52 	bl	800698c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80052e8:	2200      	movs	r2, #0
 80052ea:	4611      	mov	r1, r2
 80052ec:	2016      	movs	r0, #22
 80052ee:	f001 fb11 	bl	8006914 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80052f2:	2016      	movs	r0, #22
 80052f4:	f001 fb4a 	bl	800698c <HAL_NVIC_EnableIRQ>
}
 80052f8:	b01a      	add	sp, #104	@ 0x68
 80052fa:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 80052fc:	f7fd f9b6 	bl	800266c <Error_Handler>
 8005300:	e7b2      	b.n	8005268 <HAL_FDCAN_MspInit+0x3c>
 8005302:	bf00      	nop
 8005304:	40006400 	.word	0x40006400
 8005308:	40021000 	.word	0x40021000
 800530c:	48000400 	.word	0x48000400

08005310 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005310:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8005312:	6802      	ldr	r2, [r0, #0]
 8005314:	4934      	ldr	r1, [pc, #208]	@ (80053e8 <HAL_OPAMP_MspInit+0xd8>)
{
 8005316:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005318:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800531a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800531c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005320:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005324:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8005326:	d008      	beq.n	800533a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8005328:	4b30      	ldr	r3, [pc, #192]	@ (80053ec <HAL_OPAMP_MspInit+0xdc>)
 800532a:	429a      	cmp	r2, r3
 800532c:	d01e      	beq.n	800536c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800532e:	4b30      	ldr	r3, [pc, #192]	@ (80053f0 <HAL_OPAMP_MspInit+0xe0>)
 8005330:	429a      	cmp	r2, r3
 8005332:	d033      	beq.n	800539c <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8005334:	b00b      	add	sp, #44	@ 0x2c
 8005336:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800533e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8005342:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80053d0 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005346:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005348:	f042 0201 	orr.w	r2, r2, #1
 800534c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800534e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005350:	f003 0301 	and.w	r3, r3, #1
 8005354:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005356:	a904      	add	r1, sp, #16
 8005358:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800535c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005360:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005362:	f002 f8f1 	bl	8007548 <HAL_GPIO_Init>
}
 8005366:	b00b      	add	sp, #44	@ 0x2c
 8005368:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800536c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8005370:	33fc      	adds	r3, #252	@ 0xfc
 8005372:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005374:	f042 0201 	orr.w	r2, r2, #1
 8005378:	64da      	str	r2, [r3, #76]	@ 0x4c
 800537a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800537c:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80053d8 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005380:	f003 0301 	and.w	r3, r3, #1
 8005384:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005386:	a904      	add	r1, sp, #16
 8005388:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 800538c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005390:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005392:	f002 f8d9 	bl	8007548 <HAL_GPIO_Init>
}
 8005396:	b00b      	add	sp, #44	@ 0x2c
 8005398:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800539c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80053a0:	33f8      	adds	r3, #248	@ 0xf8
 80053a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053a4:	4813      	ldr	r0, [pc, #76]	@ (80053f4 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053a6:	f042 0202 	orr.w	r2, r2, #2
 80053aa:	64da      	str	r2, [r3, #76]	@ 0x4c
 80053ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80053ae:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 80053e0 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053b8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80053ba:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80053be:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80053c0:	f002 f8c2 	bl	8007548 <HAL_GPIO_Init>
}
 80053c4:	b00b      	add	sp, #44	@ 0x2c
 80053c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80053ca:	bf00      	nop
 80053cc:	f3af 8000 	nop.w
 80053d0:	0000000e 	.word	0x0000000e
 80053d4:	00000003 	.word	0x00000003
 80053d8:	000000e0 	.word	0x000000e0
 80053dc:	00000003 	.word	0x00000003
 80053e0:	00000007 	.word	0x00000007
 80053e4:	00000003 	.word	0x00000003
 80053e8:	40010300 	.word	0x40010300
 80053ec:	40010304 	.word	0x40010304
 80053f0:	40010308 	.word	0x40010308
 80053f4:	48000400 	.word	0x48000400

080053f8 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 80053f8:	4b09      	ldr	r3, [pc, #36]	@ (8005420 <HAL_TIM_PWM_MspInit+0x28>)
 80053fa:	6802      	ldr	r2, [r0, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d000      	beq.n	8005402 <HAL_TIM_PWM_MspInit+0xa>
 8005400:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005402:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8005406:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005408:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800540a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800540e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005410:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005412:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800541a:	b002      	add	sp, #8
 800541c:	4770      	bx	lr
 800541e:	bf00      	nop
 8005420:	40012c00 	.word	0x40012c00
 8005424:	00000000 	.word	0x00000000

08005428 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8005428:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_encoder->Instance==TIM4)
 800542a:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <HAL_TIM_Encoder_MspInit+0x70>)
 800542c:	6801      	ldr	r1, [r0, #0]
{
 800542e:	b089      	sub	sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005430:	2300      	movs	r3, #0
  if(htim_encoder->Instance==TIM4)
 8005432:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005434:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005438:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800543c:	9306      	str	r3, [sp, #24]
  if(htim_encoder->Instance==TIM4)
 800543e:	d002      	beq.n	8005446 <HAL_TIM_Encoder_MspInit+0x1e>

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 8005440:	b009      	add	sp, #36	@ 0x24
 8005442:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005446:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800544a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800544e:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 8005490 <HAL_TIM_Encoder_MspInit+0x68>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005452:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005454:	4811      	ldr	r0, [pc, #68]	@ (800549c <HAL_TIM_Encoder_MspInit+0x74>)
    __HAL_RCC_TIM4_CLK_ENABLE();
 8005456:	f042 0204 	orr.w	r2, r2, #4
 800545a:	659a      	str	r2, [r3, #88]	@ 0x58
 800545c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800545e:	f002 0204 	and.w	r2, r2, #4
 8005462:	9200      	str	r2, [sp, #0]
 8005464:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005468:	f042 0202 	orr.w	r2, r2, #2
 800546c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800546e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005476:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005478:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = M1_ENCODER_A_Pin|M1_ENCODER_B_Pin;
 800547a:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800547e:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8005480:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005482:	f002 f861 	bl	8007548 <HAL_GPIO_Init>
}
 8005486:	b009      	add	sp, #36	@ 0x24
 8005488:	f85d fb04 	ldr.w	pc, [sp], #4
 800548c:	f3af 8000 	nop.w
 8005490:	000000c0 	.word	0x000000c0
 8005494:	00000002 	.word	0x00000002
 8005498:	40000800 	.word	0x40000800
 800549c:	48000400 	.word	0x48000400

080054a0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80054a0:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80054a2:	4a2b      	ldr	r2, [pc, #172]	@ (8005550 <HAL_TIM_MspPostInit+0xb0>)
 80054a4:	6801      	ldr	r1, [r0, #0]
{
 80054a6:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054a8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80054aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054ac:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80054b0:	e9cd 3306 	strd	r3, r3, [sp, #24]
 80054b4:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 80054b6:	d001      	beq.n	80054bc <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80054b8:	b00a      	add	sp, #40	@ 0x28
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054bc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80054c0:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80054c4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054c8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054ca:	f042 0204 	orr.w	r2, r2, #4
 80054ce:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054d2:	f002 0204 	and.w	r2, r2, #4
 80054d6:	9201      	str	r2, [sp, #4]
 80054d8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054dc:	f042 0202 	orr.w	r2, r2, #2
 80054e0:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054e2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054e4:	f002 0202 	and.w	r2, r2, #2
 80054e8:	9202      	str	r2, [sp, #8]
 80054ea:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054ec:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054ee:	f042 0201 	orr.w	r2, r2, #1
 80054f2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80054f6:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054f8:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80054fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005500:	2402      	movs	r4, #2
 8005502:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005504:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005506:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8005508:	a904      	add	r1, sp, #16
 800550a:	4812      	ldr	r0, [pc, #72]	@ (8005554 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800550c:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800550e:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8005510:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8005514:	f002 f818 	bl	8007548 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8005518:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 800551a:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800551e:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8005520:	480d      	ldr	r0, [pc, #52]	@ (8005558 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005522:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8005524:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005528:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 800552c:	f002 f80c 	bl	8007548 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8005530:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8005534:	2302      	movs	r3, #2
 8005536:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800553a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800553c:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800553e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8005542:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8005546:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005548:	f001 fffe 	bl	8007548 <HAL_GPIO_Init>
}
 800554c:	b00a      	add	sp, #40	@ 0x28
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	40012c00 	.word	0x40012c00
 8005554:	48000800 	.word	0x48000800
 8005558:	48000400 	.word	0x48000400
 800555c:	00000000 	.word	0x00000000

08005560 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005560:	b570      	push	{r4, r5, r6, lr}
 8005562:	4604      	mov	r4, r0
 8005564:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005566:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005568:	2244      	movs	r2, #68	@ 0x44
 800556a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800556c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005570:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005574:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005576:	f005 fe6d 	bl	800b254 <memset>
  if(huart->Instance==USART2)
 800557a:	4b35      	ldr	r3, [pc, #212]	@ (8005650 <HAL_UART_MspInit+0xf0>)
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	429a      	cmp	r2, r3
 8005580:	d001      	beq.n	8005586 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005582:	b018      	add	sp, #96	@ 0x60
 8005584:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005586:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005588:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800558a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800558c:	f002 ff46 	bl	800841c <HAL_RCCEx_PeriphCLKConfig>
 8005590:	2800      	cmp	r0, #0
 8005592:	d14c      	bne.n	800562e <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005594:	4b2f      	ldr	r3, [pc, #188]	@ (8005654 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005596:	4830      	ldr	r0, [pc, #192]	@ (8005658 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005598:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800559a:	4e30      	ldr	r6, [pc, #192]	@ (800565c <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800559c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80055a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80055a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80055a4:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 80055a8:	9200      	str	r2, [sp, #0]
 80055aa:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80055ae:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8005640 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b2:	f042 0202 	orr.w	r2, r2, #2
 80055b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80055ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80055be:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8005648 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055c2:	f003 0302 	and.w	r3, r3, #2
 80055c6:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055c8:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055ca:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055cc:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80055ce:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80055d0:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d4:	f001 ffb8 	bl	8007548 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80055d8:	4921      	ldr	r1, [pc, #132]	@ (8005660 <HAL_UART_MspInit+0x100>)
 80055da:	221a      	movs	r2, #26
 80055dc:	2300      	movs	r3, #0
 80055de:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80055e2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 80055e4:	2280      	movs	r2, #128	@ 0x80
 80055e6:	e9c6 3302 	strd	r3, r3, [r6, #8]
 80055ea:	e9c6 2304 	strd	r2, r3, [r6, #16]
 80055ee:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80055f2:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80055f4:	f001 fb0c 	bl	8006c10 <HAL_DMA_Init>
 80055f8:	b9f8      	cbnz	r0, 800563a <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80055fa:	4d1a      	ldr	r5, [pc, #104]	@ (8005664 <HAL_UART_MspInit+0x104>)
 80055fc:	491a      	ldr	r1, [pc, #104]	@ (8005668 <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80055fe:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8005602:	221b      	movs	r2, #27
 8005604:	2300      	movs	r3, #0
 8005606:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800560a:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800560c:	2110      	movs	r1, #16
 800560e:	2280      	movs	r2, #128	@ 0x80
 8005610:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8005614:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8005618:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800561c:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800561e:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005620:	f001 faf6 	bl	8006c10 <HAL_DMA_Init>
 8005624:	b930      	cbnz	r0, 8005634 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005626:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8005628:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 800562a:	b018      	add	sp, #96	@ 0x60
 800562c:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800562e:	f7fd f81d 	bl	800266c <Error_Handler>
 8005632:	e7af      	b.n	8005594 <HAL_UART_MspInit+0x34>
      Error_Handler();
 8005634:	f7fd f81a 	bl	800266c <Error_Handler>
 8005638:	e7f5      	b.n	8005626 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 800563a:	f7fd f817 	bl	800266c <Error_Handler>
 800563e:	e7dc      	b.n	80055fa <HAL_UART_MspInit+0x9a>
 8005640:	00000018 	.word	0x00000018
 8005644:	00000002 	.word	0x00000002
	...
 8005650:	40004400 	.word	0x40004400
 8005654:	40021000 	.word	0x40021000
 8005658:	48000400 	.word	0x48000400
 800565c:	200004fc 	.word	0x200004fc
 8005660:	40020008 	.word	0x40020008
 8005664:	2000049c 	.word	0x2000049c
 8005668:	4002001c 	.word	0x4002001c

0800566c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 800566c:	4b0d      	ldr	r3, [pc, #52]	@ (80056a4 <HAL_UART_MspDeInit+0x38>)
 800566e:	6802      	ldr	r2, [r0, #0]
 8005670:	429a      	cmp	r2, r3
 8005672:	d000      	beq.n	8005676 <HAL_UART_MspDeInit+0xa>
 8005674:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8005676:	4a0c      	ldr	r2, [pc, #48]	@ (80056a8 <HAL_UART_MspDeInit+0x3c>)
 8005678:	6d93      	ldr	r3, [r2, #88]	@ 0x58
{
 800567a:	b510      	push	{r4, lr}
    __HAL_RCC_USART2_CLK_DISABLE();
 800567c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005680:	4604      	mov	r4, r0

    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8005682:	2118      	movs	r1, #24
    __HAL_RCC_USART2_CLK_DISABLE();
 8005684:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8005686:	4809      	ldr	r0, [pc, #36]	@ (80056ac <HAL_UART_MspDeInit+0x40>)
 8005688:	f002 f91c 	bl	80078c4 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 800568c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005690:	f001 fb50 	bl	8006d34 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005694:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005696:	f001 fb4d 	bl	8006d34 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 800569a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800569e:	2026      	movs	r0, #38	@ 0x26
 80056a0:	f001 b982 	b.w	80069a8 <HAL_NVIC_DisableIRQ>
 80056a4:	40004400 	.word	0x40004400
 80056a8:	40021000 	.word	0x40021000
 80056ac:	48000400 	.word	0x48000400

080056b0 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80056b0:	4801      	ldr	r0, [pc, #4]	@ (80056b8 <FDCAN1_IT0_IRQHandler+0x8>)
 80056b2:	f001 be85 	b.w	80073c0 <HAL_FDCAN_IRQHandler>
 80056b6:	bf00      	nop
 80056b8:	20000740 	.word	0x20000740

080056bc <FDCAN1_IT1_IRQHandler>:
}

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
 80056bc:	4801      	ldr	r0, [pc, #4]	@ (80056c4 <FDCAN1_IT1_IRQHandler+0x8>)
 80056be:	f001 be7f 	b.w	80073c0 <HAL_FDCAN_IRQHandler>
 80056c2:	bf00      	nop
 80056c4:	20000740 	.word	0x20000740

080056c8 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80056c8:	4b02      	ldr	r3, [pc, #8]	@ (80056d4 <ADC1_2_IRQHandler+0xc>)
 80056ca:	2240      	movs	r2, #64	@ 0x40
 80056cc:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 80056ce:	f7fd ba75 	b.w	8002bbc <TSK_HighFrequencyTask>
 80056d2:	bf00      	nop
 80056d4:	50000100 	.word	0x50000100

080056d8 <TIM1_UP_TIM16_IRQHandler>:
 80056d8:	4b03      	ldr	r3, [pc, #12]	@ (80056e8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 80056da:	4804      	ldr	r0, [pc, #16]	@ (80056ec <TIM1_UP_TIM16_IRQHandler+0x14>)
 80056dc:	f06f 0201 	mvn.w	r2, #1
 80056e0:	611a      	str	r2, [r3, #16]
 80056e2:	f005 b9ed 	b.w	800aac0 <R3_2_TIMx_UP_IRQHandler>
 80056e6:	bf00      	nop
 80056e8:	40012c00 	.word	0x40012c00
 80056ec:	20000058 	.word	0x20000058

080056f0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 80056f0:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80056f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005724 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80056f4:	691a      	ldr	r2, [r3, #16]
 80056f6:	0612      	lsls	r2, r2, #24
 80056f8:	d505      	bpl.n	8005706 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80056fa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 80056fe:	480a      	ldr	r0, [pc, #40]	@ (8005728 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8005700:	611a      	str	r2, [r3, #16]
 8005702:	f7fe f9e3 	bl	8003acc <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8005706:	4907      	ldr	r1, [pc, #28]	@ (8005724 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8005708:	690b      	ldr	r3, [r1, #16]
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	d505      	bpl.n	800571a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800570e:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8005712:	4805      	ldr	r0, [pc, #20]	@ (8005728 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8005714:	610b      	str	r3, [r1, #16]
 8005716:	f7fe f9f9 	bl	8003b0c <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800571a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 800571e:	f7fd bacf 	b.w	8002cc0 <MC_RunMotorControlTasks>
 8005722:	bf00      	nop
 8005724:	40012c00 	.word	0x40012c00
 8005728:	20000058 	.word	0x20000058

0800572c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800572c:	490c      	ldr	r1, [pc, #48]	@ (8005760 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800572e:	4a0d      	ldr	r2, [pc, #52]	@ (8005764 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8005730:	680b      	ldr	r3, [r1, #0]
{
 8005732:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005734:	4c0c      	ldr	r4, [pc, #48]	@ (8005768 <_sbrk+0x3c>)
 8005736:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005738:	b12b      	cbz	r3, 8005746 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800573a:	4418      	add	r0, r3
 800573c:	4290      	cmp	r0, r2
 800573e:	d807      	bhi.n	8005750 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005740:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8005742:	4618      	mov	r0, r3
 8005744:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005746:	4b09      	ldr	r3, [pc, #36]	@ (800576c <_sbrk+0x40>)
 8005748:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 800574a:	4418      	add	r0, r3
 800574c:	4290      	cmp	r0, r2
 800574e:	d9f7      	bls.n	8005740 <_sbrk+0x14>
    errno = ENOMEM;
 8005750:	f005 fd88 	bl	800b264 <__errno>
 8005754:	230c      	movs	r3, #12
 8005756:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
}
 800575c:	4618      	mov	r0, r3
 800575e:	bd10      	pop	{r4, pc}
 8005760:	20001b58 	.word	0x20001b58
 8005764:	20008000 	.word	0x20008000
 8005768:	00000400 	.word	0x00000400
 800576c:	20001cb0 	.word	0x20001cb0

08005770 <uart_debug_print>:
extern UART_HandleTypeDef huart2;
uint8_t uartTxBuffer[UART_TX_BUFFER_SIZE];
volatile bool uartTxDone = true;
extern void MX_USART2_UART_Init(void);

void uart_debug_print(const char *format, ...) {
 8005770:	b40f      	push	{r0, r1, r2, r3}
 8005772:	b570      	push	{r4, r5, r6, lr}
 8005774:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005778:	f50d 6383 	add.w	r3, sp, #1048	@ 0x418
    char buffer[UART_TX_BUFFER_SIZE];

    va_list args;
    va_start(args, format);
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 800577c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
void uart_debug_print(const char *format, ...) {
 8005780:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8005784:	9301      	str	r3, [sp, #4]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8005786:	a802      	add	r0, sp, #8
 8005788:	f005 fd56 	bl	800b238 <vsniprintf>
    va_end(args);

    if (len > 0 && len < sizeof(buffer)) {
 800578c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8005790:	1e42      	subs	r2, r0, #1
 8005792:	429a      	cmp	r2, r3
 8005794:	d905      	bls.n	80057a2 <uart_debug_print+0x32>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // LED ON = error
        } else {
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
        }
    }
}
 8005796:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 800579a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800579e:	b004      	add	sp, #16
 80057a0:	4770      	bx	lr
 80057a2:	4604      	mov	r4, r0
        uint32_t startTick = HAL_GetTick();
 80057a4:	f000 f90c 	bl	80059c0 <HAL_GetTick>
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 80057a8:	4e15      	ldr	r6, [pc, #84]	@ (8005800 <uart_debug_print+0x90>)
        uint32_t startTick = HAL_GetTick();
 80057aa:	4605      	mov	r5, r0
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 80057ac:	b2a4      	uxth	r4, r4
 80057ae:	e004      	b.n	80057ba <uart_debug_print+0x4a>
        } while (status == HAL_BUSY && (HAL_GetTick() - startTick < 200));
 80057b0:	f000 f906 	bl	80059c0 <HAL_GetTick>
 80057b4:	1b40      	subs	r0, r0, r5
 80057b6:	28c7      	cmp	r0, #199	@ 0xc7
 80057b8:	d812      	bhi.n	80057e0 <uart_debug_print+0x70>
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 80057ba:	2364      	movs	r3, #100	@ 0x64
 80057bc:	4622      	mov	r2, r4
 80057be:	a902      	add	r1, sp, #8
 80057c0:	4630      	mov	r0, r6
 80057c2:	f003 fb97 	bl	8008ef4 <HAL_UART_Transmit>
        } while (status == HAL_BUSY && (HAL_GetTick() - startTick < 200));
 80057c6:	2802      	cmp	r0, #2
 80057c8:	d0f2      	beq.n	80057b0 <uart_debug_print+0x40>
        if (status != HAL_OK) {
 80057ca:	b948      	cbnz	r0, 80057e0 <uart_debug_print+0x70>
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
 80057cc:	480d      	ldr	r0, [pc, #52]	@ (8005804 <uart_debug_print+0x94>)
 80057ce:	2140      	movs	r1, #64	@ 0x40
 80057d0:	f002 f974 	bl	8007abc <HAL_GPIO_TogglePin>
}
 80057d4:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 80057d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057dc:	b004      	add	sp, #16
 80057de:	4770      	bx	lr
            HAL_UART_DeInit(&huart2);
 80057e0:	4807      	ldr	r0, [pc, #28]	@ (8005800 <uart_debug_print+0x90>)
 80057e2:	f003 fb67 	bl	8008eb4 <HAL_UART_DeInit>
            MX_USART2_UART_Init();
 80057e6:	f7fc fb93 	bl	8001f10 <MX_USART2_UART_Init>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // LED ON = error
 80057ea:	4806      	ldr	r0, [pc, #24]	@ (8005804 <uart_debug_print+0x94>)
 80057ec:	2201      	movs	r2, #1
 80057ee:	2140      	movs	r1, #64	@ 0x40
 80057f0:	f002 f95e 	bl	8007ab0 <HAL_GPIO_WritePin>
}
 80057f4:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 80057f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057fc:	b004      	add	sp, #16
 80057fe:	4770      	bx	lr
 8005800:	20000560 	.word	0x20000560
 8005804:	48000800 	.word	0x48000800

08005808 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8005808:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 800580a:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 800580c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005810:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005814:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005818:	e841 3400 	strex	r4, r3, [r1]
 800581c:	2c00      	cmp	r4, #0
 800581e:	d1f7      	bne.n	8005810 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8005820:	68c1      	ldr	r1, [r0, #12]
 8005822:	4d19      	ldr	r5, [pc, #100]	@ (8005888 <UASPEP_INIT+0x80>)
 8005824:	6843      	ldr	r3, [r0, #4]
 8005826:	5c6c      	ldrb	r4, [r5, r1]
 8005828:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 800582a:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 800582e:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005830:	2340      	movs	r3, #64	@ 0x40
 8005832:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8005834:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005838:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 800583c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005840:	e841 3400 	strex	r4, r3, [r1]
 8005844:	2c00      	cmp	r4, #0
 8005846:	d1f7      	bne.n	8005838 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005848:	2340      	movs	r3, #64	@ 0x40
 800584a:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8005850:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005854:	e842 3100 	strex	r1, r3, [r2]
 8005858:	2900      	cmp	r1, #0
 800585a:	d1f7      	bne.n	800584c <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 800585c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005864:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005868:	e841 3400 	strex	r4, r3, [r1]
 800586c:	2c00      	cmp	r4, #0
 800586e:	d1f7      	bne.n	8005860 <UASPEP_INIT+0x58>
 8005870:	6901      	ldr	r1, [r0, #16]
 8005872:	6883      	ldr	r3, [r0, #8]
 8005874:	5c69      	ldrb	r1, [r5, r1]
 8005876:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8005878:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 800587c:	2140      	movs	r1, #64	@ 0x40
 800587e:	6098      	str	r0, [r3, #8]
}
 8005880:	bc30      	pop	{r4, r5}
 8005882:	6211      	str	r1, [r2, #32]
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	0800c49c 	.word	0x0800c49c

0800588c <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800588c:	6903      	ldr	r3, [r0, #16]
 800588e:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8005890:	b410      	push	{r4}
 8005892:	4c0b      	ldr	r4, [pc, #44]	@ (80058c0 <UASPEP_CFG_TRANSMISSION+0x34>)
 8005894:	5ce3      	ldrb	r3, [r4, r3]
 8005896:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005898:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800589a:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 800589e:	d40c      	bmi.n	80058ba <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80058a0:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80058a4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 80058a8:	f36f 010f 	bfc	r1, #0, #16
 80058ac:	430a      	orrs	r2, r1
 80058ae:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80058b2:	58c2      	ldr	r2, [r0, r3]
 80058b4:	f042 0201 	orr.w	r2, r2, #1
 80058b8:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 80058ba:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	0800c49c 	.word	0x0800c49c

080058c4 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 80058c4:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80058c6:	68c3      	ldr	r3, [r0, #12]
 80058c8:	4c0c      	ldr	r4, [pc, #48]	@ (80058fc <UASPEP_CFG_RECEPTION+0x38>)
 80058ca:	6840      	ldr	r0, [r0, #4]
 80058cc:	5ce3      	ldrb	r3, [r4, r3]
 80058ce:	58c4      	ldr	r4, [r0, r3]
 80058d0:	eb00 0c03 	add.w	ip, r0, r3
 80058d4:	f024 0401 	bic.w	r4, r4, #1
 80058d8:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 80058da:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 80058de:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 80058e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058e6:	f36f 010f 	bfc	r1, #0, #16
 80058ea:	4311      	orrs	r1, r2
 80058ec:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80058f0:	58c2      	ldr	r2, [r0, r3]
 80058f2:	f042 0201 	orr.w	r2, r2, #1
 80058f6:	50c2      	str	r2, [r0, r3]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	0800c49c 	.word	0x0800c49c

08005900 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8005900:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005902:	2310      	movs	r3, #16
 8005904:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005906:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800590a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	e842 3100 	strex	r1, r3, [r2]
 8005912:	2900      	cmp	r1, #0
 8005914:	d1f7      	bne.n	8005906 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8005916:	4770      	bx	lr

08005918 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005918:	4a03      	ldr	r2, [pc, #12]	@ (8005928 <SystemInit+0x10>)
 800591a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800591e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005922:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005926:	4770      	bx	lr
 8005928:	e000ed00 	.word	0xe000ed00

0800592c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800592c:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 800592e:	4b0f      	ldr	r3, [pc, #60]	@ (800596c <HAL_InitTick+0x40>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	b90b      	cbnz	r3, 8005938 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8005934:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8005936:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005938:	490d      	ldr	r1, [pc, #52]	@ (8005970 <HAL_InitTick+0x44>)
 800593a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800593e:	4605      	mov	r5, r0
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	6808      	ldr	r0, [r1, #0]
 8005946:	fbb0 f0f3 	udiv	r0, r0, r3
 800594a:	f001 f83f 	bl	80069cc <HAL_SYSTICK_Config>
 800594e:	4604      	mov	r4, r0
 8005950:	2800      	cmp	r0, #0
 8005952:	d1ef      	bne.n	8005934 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005954:	2d0f      	cmp	r5, #15
 8005956:	d8ed      	bhi.n	8005934 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005958:	4602      	mov	r2, r0
 800595a:	4629      	mov	r1, r5
 800595c:	f04f 30ff 	mov.w	r0, #4294967295
 8005960:	f000 ffd8 	bl	8006914 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005964:	4b03      	ldr	r3, [pc, #12]	@ (8005974 <HAL_InitTick+0x48>)
 8005966:	4620      	mov	r0, r4
 8005968:	601d      	str	r5, [r3, #0]
}
 800596a:	bd38      	pop	{r3, r4, r5, pc}
 800596c:	200003dc 	.word	0x200003dc
 8005970:	200003d8 	.word	0x200003d8
 8005974:	200003e0 	.word	0x200003e0

08005978 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005978:	4a0a      	ldr	r2, [pc, #40]	@ (80059a4 <HAL_Init+0x2c>)
 800597a:	6813      	ldr	r3, [r2, #0]
 800597c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8005980:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005982:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005984:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005986:	f000 ffb3 	bl	80068f0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800598a:	2004      	movs	r0, #4
 800598c:	f7ff ffce 	bl	800592c <HAL_InitTick>
 8005990:	b110      	cbz	r0, 8005998 <HAL_Init+0x20>
    status = HAL_ERROR;
 8005992:	2401      	movs	r4, #1
}
 8005994:	4620      	mov	r0, r4
 8005996:	bd10      	pop	{r4, pc}
 8005998:	4604      	mov	r4, r0
    HAL_MspInit();
 800599a:	f7ff fae3 	bl	8004f64 <HAL_MspInit>
}
 800599e:	4620      	mov	r0, r4
 80059a0:	bd10      	pop	{r4, pc}
 80059a2:	bf00      	nop
 80059a4:	40022000 	.word	0x40022000

080059a8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80059a8:	4a03      	ldr	r2, [pc, #12]	@ (80059b8 <HAL_IncTick+0x10>)
 80059aa:	4904      	ldr	r1, [pc, #16]	@ (80059bc <HAL_IncTick+0x14>)
 80059ac:	6813      	ldr	r3, [r2, #0]
 80059ae:	6809      	ldr	r1, [r1, #0]
 80059b0:	440b      	add	r3, r1
 80059b2:	6013      	str	r3, [r2, #0]
}
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	20001b5c 	.word	0x20001b5c
 80059bc:	200003dc 	.word	0x200003dc

080059c0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80059c0:	4b01      	ldr	r3, [pc, #4]	@ (80059c8 <HAL_GetTick+0x8>)
 80059c2:	6818      	ldr	r0, [r3, #0]
}
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	20001b5c 	.word	0x20001b5c

080059cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059cc:	b538      	push	{r3, r4, r5, lr}
 80059ce:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80059d0:	f7ff fff6 	bl	80059c0 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059d4:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80059d6:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80059d8:	d002      	beq.n	80059e0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80059da:	4b04      	ldr	r3, [pc, #16]	@ (80059ec <HAL_Delay+0x20>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80059e0:	f7ff ffee 	bl	80059c0 <HAL_GetTick>
 80059e4:	1b40      	subs	r0, r0, r5
 80059e6:	42a0      	cmp	r0, r4
 80059e8:	d3fa      	bcc.n	80059e0 <HAL_Delay+0x14>
  {
  }
}
 80059ea:	bd38      	pop	{r3, r4, r5, pc}
 80059ec:	200003dc 	.word	0x200003dc

080059f0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80059f0:	b530      	push	{r4, r5, lr}
 80059f2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80059f4:	2300      	movs	r3, #0
 80059f6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80059f8:	2800      	cmp	r0, #0
 80059fa:	f000 80aa 	beq.w	8005b52 <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80059fe:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8005a00:	4604      	mov	r4, r0
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	f000 80aa 	beq.w	8005b5c <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005a08:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a0a:	6893      	ldr	r3, [r2, #8]
 8005a0c:	009d      	lsls	r5, r3, #2
 8005a0e:	d505      	bpl.n	8005a1c <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005a10:	6893      	ldr	r3, [r2, #8]
 8005a12:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005a16:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005a1a:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a1c:	6893      	ldr	r3, [r2, #8]
 8005a1e:	00d8      	lsls	r0, r3, #3
 8005a20:	d419      	bmi.n	8005a56 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005a22:	4b68      	ldr	r3, [pc, #416]	@ (8005bc4 <HAL_ADC_Init+0x1d4>)
 8005a24:	4868      	ldr	r0, [pc, #416]	@ (8005bc8 <HAL_ADC_Init+0x1d8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005a28:	6891      	ldr	r1, [r2, #8]
 8005a2a:	099b      	lsrs	r3, r3, #6
 8005a2c:	fba0 0303 	umull	r0, r3, r0, r3
 8005a30:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8005a34:	099b      	lsrs	r3, r3, #6
 8005a36:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	005b      	lsls	r3, r3, #1
 8005a3e:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8005a42:	6091      	str	r1, [r2, #8]
 8005a44:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a46:	9b01      	ldr	r3, [sp, #4]
 8005a48:	b12b      	cbz	r3, 8005a56 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005a4a:	9b01      	ldr	r3, [sp, #4]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005a50:	9b01      	ldr	r3, [sp, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f9      	bne.n	8005a4a <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a56:	6893      	ldr	r3, [r2, #8]
 8005a58:	00d9      	lsls	r1, r3, #3
 8005a5a:	d47d      	bmi.n	8005b58 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a5c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a5e:	f043 0310 	orr.w	r3, r3, #16
 8005a62:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a64:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005a66:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a68:	4303      	orrs	r3, r0
 8005a6a:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005a6c:	6893      	ldr	r3, [r2, #8]
 8005a6e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005a72:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a74:	d169      	bne.n	8005b4a <HAL_ADC_Init+0x15a>
 8005a76:	06db      	lsls	r3, r3, #27
 8005a78:	d467      	bmi.n	8005b4a <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a7a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005a7c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005a80:	f043 0302 	orr.w	r3, r3, #2
 8005a84:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005a86:	6893      	ldr	r3, [r2, #8]
 8005a88:	07dd      	lsls	r5, r3, #31
 8005a8a:	d409      	bmi.n	8005aa0 <HAL_ADC_Init+0xb0>
 8005a8c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005a90:	689b      	ldr	r3, [r3, #8]
 8005a92:	f013 0f01 	tst.w	r3, #1
 8005a96:	4b4d      	ldr	r3, [pc, #308]	@ (8005bcc <HAL_ADC_Init+0x1dc>)
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	d101      	bne.n	8005aa0 <HAL_ADC_Init+0xb0>
 8005a9c:	07d9      	lsls	r1, r3, #31
 8005a9e:	d57a      	bpl.n	8005b96 <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8005aa0:	68e5      	ldr	r5, [r4, #12]
 8005aa2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005aa4:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8005aa8:	432b      	orrs	r3, r5
 8005aaa:	68a5      	ldr	r5, [r4, #8]
 8005aac:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005aae:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005ab0:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8005ab2:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005ab6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005aba:	d055      	beq.n	8005b68 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005abc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005abe:	b121      	cbz	r1, 8005aca <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8005ac0:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ac2:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005ac6:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ac8:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005aca:	68d5      	ldr	r5, [r2, #12]
 8005acc:	4940      	ldr	r1, [pc, #256]	@ (8005bd0 <HAL_ADC_Init+0x1e0>)
 8005ace:	4029      	ands	r1, r5
 8005ad0:	4319      	orrs	r1, r3
 8005ad2:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ad4:	6913      	ldr	r3, [r2, #16]
 8005ad6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005ad8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005adc:	430b      	orrs	r3, r1
 8005ade:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ae0:	6893      	ldr	r3, [r2, #8]
 8005ae2:	071b      	lsls	r3, r3, #28
 8005ae4:	d422      	bmi.n	8005b2c <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005ae6:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005ae8:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005aec:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005aee:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005af2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005af4:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005af8:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005afc:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 8005afe:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005b00:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b02:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005b04:	2900      	cmp	r1, #0
 8005b06:	d03c      	beq.n	8005b82 <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b0c:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005b0e:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005b12:	f36f 030d 	bfc	r3, #0, #14
 8005b16:	430b      	orrs	r3, r1
 8005b18:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005b1c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d040      	beq.n	8005ba6 <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005b24:	6913      	ldr	r3, [r2, #16]
 8005b26:	f023 0301 	bic.w	r3, r3, #1
 8005b2a:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005b2c:	6963      	ldr	r3, [r4, #20]
 8005b2e:	2b01      	cmp	r3, #1
 8005b30:	d01f      	beq.n	8005b72 <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005b32:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005b34:	f023 030f 	bic.w	r3, r3, #15
 8005b38:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005b3a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005b3c:	f023 0303 	bic.w	r3, r3, #3
 8005b40:	f043 0301 	orr.w	r3, r3, #1
 8005b44:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005b46:	b003      	add	sp, #12
 8005b48:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005b4a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005b4c:	f043 0310 	orr.w	r3, r3, #16
 8005b50:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005b52:	2001      	movs	r0, #1
}
 8005b54:	b003      	add	sp, #12
 8005b56:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b58:	2000      	movs	r0, #0
 8005b5a:	e787      	b.n	8005a6c <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8005b5c:	f7ff fa24 	bl	8004fa8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005b60:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005b62:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8005b66:	e74f      	b.n	8005a08 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005b68:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005b6a:	3901      	subs	r1, #1
 8005b6c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005b70:	e7a4      	b.n	8005abc <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005b72:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005b74:	6a23      	ldr	r3, [r4, #32]
 8005b76:	f021 010f 	bic.w	r1, r1, #15
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	430b      	orrs	r3, r1
 8005b7e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005b80:	e7db      	b.n	8005b3a <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005b82:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b86:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005b88:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005b8c:	f36f 030d 	bfc	r3, #0, #14
 8005b90:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005b94:	e7c2      	b.n	8005b1c <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005b96:	490f      	ldr	r1, [pc, #60]	@ (8005bd4 <HAL_ADC_Init+0x1e4>)
 8005b98:	6865      	ldr	r5, [r4, #4]
 8005b9a:	688b      	ldr	r3, [r1, #8]
 8005b9c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005ba0:	432b      	orrs	r3, r5
 8005ba2:	608b      	str	r3, [r1, #8]
}
 8005ba4:	e77c      	b.n	8005aa0 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005ba6:	6911      	ldr	r1, [r2, #16]
 8005ba8:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005baa:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8005bac:	f36f 018a 	bfc	r1, #2, #9
 8005bb0:	432b      	orrs	r3, r5
 8005bb2:	430b      	orrs	r3, r1
 8005bb4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005bb6:	430b      	orrs	r3, r1
 8005bb8:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005bba:	430b      	orrs	r3, r1
 8005bbc:	f043 0301 	orr.w	r3, r3, #1
 8005bc0:	6113      	str	r3, [r2, #16]
 8005bc2:	e7b3      	b.n	8005b2c <HAL_ADC_Init+0x13c>
 8005bc4:	200003d8 	.word	0x200003d8
 8005bc8:	053e2d63 	.word	0x053e2d63
 8005bcc:	50000100 	.word	0x50000100
 8005bd0:	fff04007 	.word	0xfff04007
 8005bd4:	50000300 	.word	0x50000300

08005bd8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005bdc:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8005be0:	b082      	sub	sp, #8
 8005be2:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005be4:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005be6:	f04f 0000 	mov.w	r0, #0
 8005bea:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005bec:	f000 812d 	beq.w	8005e4a <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005bf0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005bf2:	2001      	movs	r0, #1
 8005bf4:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005bf8:	6894      	ldr	r4, [r2, #8]
 8005bfa:	0764      	lsls	r4, r4, #29
 8005bfc:	d455      	bmi.n	8005caa <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005bfe:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c00:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005c04:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c08:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005c0c:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005c0e:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8005c12:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005c16:	f854 500e 	ldr.w	r5, [r4, lr]
 8005c1a:	261f      	movs	r6, #31
 8005c1c:	fa00 f00c 	lsl.w	r0, r0, ip
 8005c20:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005c24:	ea25 0c0c 	bic.w	ip, r5, ip
 8005c28:	ea40 000c 	orr.w	r0, r0, ip
 8005c2c:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005c30:	6890      	ldr	r0, [r2, #8]
 8005c32:	0747      	lsls	r7, r0, #29
 8005c34:	d543      	bpl.n	8005cbe <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005c36:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005c38:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005c3a:	6894      	ldr	r4, [r2, #8]
 8005c3c:	07e5      	lsls	r5, r4, #31
 8005c3e:	d412      	bmi.n	8005c66 <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005c40:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005c42:	4cb0      	ldr	r4, [pc, #704]	@ (8005f04 <HAL_ADC_ConfigChannel+0x32c>)
 8005c44:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8005c48:	f006 0718 	and.w	r7, r6, #24
 8005c4c:	40fc      	lsrs	r4, r7
 8005c4e:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8005c52:	4004      	ands	r4, r0
 8005c54:	ea25 0507 	bic.w	r5, r5, r7
 8005c58:	432c      	orrs	r4, r5
 8005c5a:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005c5e:	4caa      	ldr	r4, [pc, #680]	@ (8005f08 <HAL_ADC_ConfigChannel+0x330>)
 8005c60:	42a6      	cmp	r6, r4
 8005c62:	f000 80a2 	beq.w	8005daa <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005c66:	49a9      	ldr	r1, [pc, #676]	@ (8005f0c <HAL_ADC_ConfigChannel+0x334>)
 8005c68:	4208      	tst	r0, r1
 8005c6a:	d01c      	beq.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005c6c:	4ca8      	ldr	r4, [pc, #672]	@ (8005f10 <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005c6e:	4da9      	ldr	r5, [pc, #676]	@ (8005f14 <HAL_ADC_ConfigChannel+0x33c>)
 8005c70:	68a1      	ldr	r1, [r4, #8]
 8005c72:	42a8      	cmp	r0, r5
 8005c74:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8005c78:	d074      	beq.n	8005d64 <HAL_ADC_ConfigChannel+0x18c>
 8005c7a:	4da7      	ldr	r5, [pc, #668]	@ (8005f18 <HAL_ADC_ConfigChannel+0x340>)
 8005c7c:	42a8      	cmp	r0, r5
 8005c7e:	d071      	beq.n	8005d64 <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005c80:	4da6      	ldr	r5, [pc, #664]	@ (8005f1c <HAL_ADC_ConfigChannel+0x344>)
 8005c82:	42a8      	cmp	r0, r5
 8005c84:	f000 80e5 	beq.w	8005e52 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005c88:	4da5      	ldr	r5, [pc, #660]	@ (8005f20 <HAL_ADC_ConfigChannel+0x348>)
 8005c8a:	42a8      	cmp	r0, r5
 8005c8c:	d10b      	bne.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005c8e:	0249      	lsls	r1, r1, #9
 8005c90:	d409      	bmi.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8005c92:	49a4      	ldr	r1, [pc, #656]	@ (8005f24 <HAL_ADC_ConfigChannel+0x34c>)
 8005c94:	428a      	cmp	r2, r1
 8005c96:	d006      	beq.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c98:	68a2      	ldr	r2, [r4, #8]
 8005c9a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005c9e:	4332      	orrs	r2, r6
 8005ca0:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8005ca4:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ca6:	2000      	movs	r0, #0
 8005ca8:	e003      	b.n	8005cb2 <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005caa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005cac:	f042 0220 	orr.w	r2, r2, #32
 8005cb0:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005cb8:	b002      	add	sp, #8
 8005cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005cbe:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005cc0:	6808      	ldr	r0, [r1, #0]
 8005cc2:	0726      	lsls	r6, r4, #28
 8005cc4:	d4b9      	bmi.n	8005c3a <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005cc6:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8005cc8:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8005ccc:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005cce:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8005cd0:	40b4      	lsls	r4, r6
 8005cd2:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005cd6:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8005cda:	ea6f 0404 	mvn.w	r4, r4
 8005cde:	f000 8107 	beq.w	8005ef0 <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ce2:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8005ce6:	40b5      	lsls	r5, r6
 8005ce8:	583e      	ldr	r6, [r7, r0]
 8005cea:	4034      	ands	r4, r6
 8005cec:	432c      	orrs	r4, r5
 8005cee:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005cf0:	6950      	ldr	r0, [r2, #20]
 8005cf2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005cf6:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005cf8:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005cfc:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005cfe:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d00:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005d02:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005d04:	f000 80c8 	beq.w	8005e98 <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005d08:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 8005d0c:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 8005d0e:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 8005d12:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d16:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 8005d1a:	4d83      	ldr	r5, [pc, #524]	@ (8005f28 <HAL_ADC_ConfigChannel+0x350>)
 8005d1c:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 8005d20:	ea0c 0505 	and.w	r5, ip, r5
 8005d24:	433d      	orrs	r5, r7
 8005d26:	4328      	orrs	r0, r5
 8005d28:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005d2c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d30:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 8005d32:	698e      	ldr	r6, [r1, #24]
 8005d34:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 8005d38:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8005d3c:	4330      	orrs	r0, r6
 8005d3e:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d42:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8005d44:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 8005d46:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8005d4a:	f1a5 0501 	sub.w	r5, r5, #1
 8005d4e:	fab5 f585 	clz	r5, r5
 8005d52:	096d      	lsrs	r5, r5, #5
 8005d54:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8005d58:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 8005d5c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005d60:	6808      	ldr	r0, [r1, #0]
}
 8005d62:	e76a      	b.n	8005c3a <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005d64:	020c      	lsls	r4, r1, #8
 8005d66:	d49e      	bmi.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005d68:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005d6c:	d19b      	bne.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d6e:	4968      	ldr	r1, [pc, #416]	@ (8005f10 <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005d70:	486e      	ldr	r0, [pc, #440]	@ (8005f2c <HAL_ADC_ConfigChannel+0x354>)
 8005d72:	688a      	ldr	r2, [r1, #8]
 8005d74:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005d78:	4332      	orrs	r2, r6
 8005d7a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005d7e:	608a      	str	r2, [r1, #8]
 8005d80:	6802      	ldr	r2, [r0, #0]
 8005d82:	496b      	ldr	r1, [pc, #428]	@ (8005f30 <HAL_ADC_ConfigChannel+0x358>)
 8005d84:	0992      	lsrs	r2, r2, #6
 8005d86:	fba1 1202 	umull	r1, r2, r1, r2
 8005d8a:	0992      	lsrs	r2, r2, #6
 8005d8c:	3201      	adds	r2, #1
 8005d8e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8005d92:	0092      	lsls	r2, r2, #2
 8005d94:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005d96:	9a01      	ldr	r2, [sp, #4]
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	d084      	beq.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8005d9c:	9a01      	ldr	r2, [sp, #4]
 8005d9e:	3a01      	subs	r2, #1
 8005da0:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8005da2:	9a01      	ldr	r2, [sp, #4]
 8005da4:	2a00      	cmp	r2, #0
 8005da6:	d1f9      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x1c4>
 8005da8:	e77d      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	d060      	beq.n	8005e70 <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dae:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005db2:	2c00      	cmp	r4, #0
 8005db4:	f000 80be 	beq.w	8005f34 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005db8:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dbc:	3401      	adds	r4, #1
 8005dbe:	f004 041f 	and.w	r4, r4, #31
 8005dc2:	2c09      	cmp	r4, #9
 8005dc4:	f240 80b6 	bls.w	8005f34 <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc8:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005dcc:	2c00      	cmp	r4, #0
 8005dce:	f000 8157 	beq.w	8006080 <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 8005dd2:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005dd6:	3401      	adds	r4, #1
 8005dd8:	06a4      	lsls	r4, r4, #26
 8005dda:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dde:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005de2:	2d00      	cmp	r5, #0
 8005de4:	f000 8156 	beq.w	8006094 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005de8:	fab5 f585 	clz	r5, r5
 8005dec:	3501      	adds	r5, #1
 8005dee:	f005 051f 	and.w	r5, r5, #31
 8005df2:	2601      	movs	r6, #1
 8005df4:	fa06 f505 	lsl.w	r5, r6, r5
 8005df8:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dfa:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	f000 8146 	beq.w	8006090 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 8005e04:	fab0 f080 	clz	r0, r0
 8005e08:	1c45      	adds	r5, r0, #1
 8005e0a:	f005 051f 	and.w	r5, r5, #31
 8005e0e:	2003      	movs	r0, #3
 8005e10:	f06f 061d 	mvn.w	r6, #29
 8005e14:	fb10 6005 	smlabb	r0, r0, r5, r6
 8005e18:	0500      	lsls	r0, r0, #20
 8005e1a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e1e:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005e20:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 8005e22:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005e24:	f005 0504 	and.w	r5, r5, #4
 8005e28:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005e2c:	f3c0 5004 	ubfx	r0, r0, #20, #5
 8005e30:	fa04 f700 	lsl.w	r7, r4, r0
 8005e34:	f04f 0c07 	mov.w	ip, #7
 8005e38:	5974      	ldr	r4, [r6, r5]
 8005e3a:	fa0c f000 	lsl.w	r0, ip, r0
 8005e3e:	ea24 0000 	bic.w	r0, r4, r0
 8005e42:	4338      	orrs	r0, r7
 8005e44:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8005e46:	6808      	ldr	r0, [r1, #0]
}
 8005e48:	e70d      	b.n	8005c66 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 8005e4a:	2002      	movs	r0, #2
}
 8005e4c:	b002      	add	sp, #8
 8005e4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005e52:	01c8      	lsls	r0, r1, #7
 8005e54:	f53f af27 	bmi.w	8005ca6 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005e58:	4932      	ldr	r1, [pc, #200]	@ (8005f24 <HAL_ADC_ConfigChannel+0x34c>)
 8005e5a:	428a      	cmp	r2, r1
 8005e5c:	f43f af23 	beq.w	8005ca6 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005e60:	68a2      	ldr	r2, [r4, #8]
 8005e62:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005e66:	4332      	orrs	r2, r6
 8005e68:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005e6c:	60a2      	str	r2, [r4, #8]
}
 8005e6e:	e71a      	b.n	8005ca6 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e70:	0e80      	lsrs	r0, r0, #26
 8005e72:	3001      	adds	r0, #1
 8005e74:	f000 051f 	and.w	r5, r0, #31
 8005e78:	2401      	movs	r4, #1
 8005e7a:	0680      	lsls	r0, r0, #26
 8005e7c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8005e80:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e82:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e84:	ea44 0400 	orr.w	r4, r4, r0
 8005e88:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005e8c:	d977      	bls.n	8005f7e <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005e8e:	381e      	subs	r0, #30
 8005e90:	0500      	lsls	r0, r0, #20
 8005e92:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005e96:	e7c2      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e98:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8005e9a:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005e9c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ea0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ea4:	2d00      	cmp	r5, #0
 8005ea6:	d16c      	bne.n	8005f82 <HAL_ADC_ConfigChannel+0x3aa>
 8005ea8:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005eac:	4284      	cmp	r4, r0
 8005eae:	f000 80a0 	beq.w	8005ff2 <HAL_ADC_ConfigChannel+0x41a>
 8005eb2:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005eb4:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005eb6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005eba:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005ebe:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8005ec2:	4285      	cmp	r5, r0
 8005ec4:	f000 80c0 	beq.w	8006048 <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005ec8:	68a5      	ldr	r5, [r4, #8]
 8005eca:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ecc:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005ed0:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005ed4:	4285      	cmp	r5, r0
 8005ed6:	f000 80a1 	beq.w	800601c <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005eda:	68e5      	ldr	r5, [r4, #12]
 8005edc:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ede:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ee2:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8005ee6:	42a0      	cmp	r0, r4
 8005ee8:	f000 80c4 	beq.w	8006074 <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005eec:	4638      	mov	r0, r7
 8005eee:	e6a4      	b.n	8005c3a <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005ef0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 8005ef4:	5835      	ldr	r5, [r6, r0]
 8005ef6:	402c      	ands	r4, r5
 8005ef8:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005efa:	6950      	ldr	r0, [r2, #20]
 8005efc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005f00:	6150      	str	r0, [r2, #20]
}
 8005f02:	e6f9      	b.n	8005cf8 <HAL_ADC_ConfigChannel+0x120>
 8005f04:	0007ffff 	.word	0x0007ffff
 8005f08:	407f0000 	.word	0x407f0000
 8005f0c:	80080000 	.word	0x80080000
 8005f10:	50000300 	.word	0x50000300
 8005f14:	c3210000 	.word	0xc3210000
 8005f18:	90c00010 	.word	0x90c00010
 8005f1c:	c7520000 	.word	0xc7520000
 8005f20:	cb840000 	.word	0xcb840000
 8005f24:	50000100 	.word	0x50000100
 8005f28:	03fff000 	.word	0x03fff000
 8005f2c:	200003d8 	.word	0x200003d8
 8005f30:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f34:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005f38:	2c00      	cmp	r4, #0
 8005f3a:	f000 80b7 	beq.w	80060ac <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 8005f3e:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f42:	3401      	adds	r4, #1
 8005f44:	06a4      	lsls	r4, r4, #26
 8005f46:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f4a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005f4e:	2d00      	cmp	r5, #0
 8005f50:	f000 80aa 	beq.w	80060a8 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8005f54:	fab5 f585 	clz	r5, r5
 8005f58:	3501      	adds	r5, #1
 8005f5a:	f005 051f 	and.w	r5, r5, #31
 8005f5e:	2601      	movs	r6, #1
 8005f60:	fa06 f505 	lsl.w	r5, r6, r5
 8005f64:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f66:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005f6a:	2800      	cmp	r0, #0
 8005f6c:	f000 8099 	beq.w	80060a2 <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8005f70:	fab0 f080 	clz	r0, r0
 8005f74:	3001      	adds	r0, #1
 8005f76:	f000 001f 	and.w	r0, r0, #31
 8005f7a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005f7e:	0500      	lsls	r0, r0, #20
 8005f80:	e74d      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f82:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8005f86:	b11d      	cbz	r5, 8005f90 <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8005f88:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005f8c:	42ac      	cmp	r4, r5
 8005f8e:	d030      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f90:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8005f92:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f94:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005f98:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005f9c:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fa0:	fa97 f6a7 	rbit	r6, r7
 8005fa4:	f104 0c08 	add.w	ip, r4, #8
 8005fa8:	46e0      	mov	r8, ip
  if (value == 0U)
 8005faa:	2e00      	cmp	r6, #0
 8005fac:	d074      	beq.n	8006098 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8005fae:	fab6 f686 	clz	r6, r6
 8005fb2:	42ae      	cmp	r6, r5
 8005fb4:	d04a      	beq.n	800604c <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fb6:	f8dc 5000 	ldr.w	r5, [ip]
 8005fba:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fbe:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fc2:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fc6:	f104 060c 	add.w	r6, r4, #12
 8005fca:	46b0      	mov	r8, r6
  if (value == 0U)
 8005fcc:	f1be 0f00 	cmp.w	lr, #0
 8005fd0:	d059      	beq.n	8006086 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8005fd2:	fabe fe8e 	clz	lr, lr
 8005fd6:	45ae      	cmp	lr, r5
 8005fd8:	d022      	beq.n	8006020 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fda:	6834      	ldr	r4, [r6, #0]
 8005fdc:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005fde:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fe2:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 8005fe6:	2d00      	cmp	r5, #0
 8005fe8:	f43f ae27 	beq.w	8005c3a <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8005fec:	fab5 f085 	clz	r0, r5
 8005ff0:	e779      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 8005ff2:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 8005ff4:	4614      	mov	r4, r2
 8005ff6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005ffa:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005ffe:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006000:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 8006002:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 8006004:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006008:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800600c:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006010:	4638      	mov	r0, r7
 8006012:	2e00      	cmp	r6, #0
 8006014:	d1c4      	bne.n	8005fa0 <HAL_ADC_ConfigChannel+0x3c8>
 8006016:	f3c7 6084 	ubfx	r0, r7, #26, #5
 800601a:	e752      	b.n	8005ec2 <HAL_ADC_ConfigChannel+0x2ea>
 800601c:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 8006020:	f8dc 0000 	ldr.w	r0, [ip]
 8006024:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006028:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800602c:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800602e:	68e0      	ldr	r0, [r4, #12]
 8006030:	68e4      	ldr	r4, [r4, #12]
 8006032:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006036:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006038:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800603c:	4638      	mov	r0, r7
 800603e:	2d00      	cmp	r5, #0
 8006040:	d1cf      	bne.n	8005fe2 <HAL_ADC_ConfigChannel+0x40a>
 8006042:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8006046:	e74e      	b.n	8005ee6 <HAL_ADC_ConfigChannel+0x30e>
 8006048:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 800604c:	f8de 0000 	ldr.w	r0, [lr]
 8006050:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006054:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006058:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800605a:	68a0      	ldr	r0, [r4, #8]
 800605c:	68a5      	ldr	r5, [r4, #8]
 800605e:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006062:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006064:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006068:	4638      	mov	r0, r7
 800606a:	2e00      	cmp	r6, #0
 800606c:	d1a9      	bne.n	8005fc2 <HAL_ADC_ConfigChannel+0x3ea>
 800606e:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8006072:	e72f      	b.n	8005ed4 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8006074:	6830      	ldr	r0, [r6, #0]
 8006076:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800607a:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800607c:	6808      	ldr	r0, [r1, #0]
}
 800607e:	e5dc      	b.n	8005c3a <HAL_ADC_ConfigChannel+0x62>
 8006080:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8006084:	e6ab      	b.n	8005dde <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006086:	68e5      	ldr	r5, [r4, #12]
 8006088:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800608a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800608e:	e7a8      	b.n	8005fe2 <HAL_ADC_ConfigChannel+0x40a>
 8006090:	4808      	ldr	r0, [pc, #32]	@ (80060b4 <HAL_ADC_ConfigChannel+0x4dc>)
 8006092:	e6c4      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x246>
 8006094:	2502      	movs	r5, #2
 8006096:	e6af      	b.n	8005df8 <HAL_ADC_ConfigChannel+0x220>
 8006098:	68a5      	ldr	r5, [r4, #8]
 800609a:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800609c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 80060a0:	e78f      	b.n	8005fc2 <HAL_ADC_ConfigChannel+0x3ea>
 80060a2:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 80060a6:	e6ba      	b.n	8005e1e <HAL_ADC_ConfigChannel+0x246>
 80060a8:	2502      	movs	r5, #2
 80060aa:	e75b      	b.n	8005f64 <HAL_ADC_ConfigChannel+0x38c>
 80060ac:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 80060b0:	e74b      	b.n	8005f4a <HAL_ADC_ConfigChannel+0x372>
 80060b2:	bf00      	nop
 80060b4:	fe500000 	.word	0xfe500000

080060b8 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 80060b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80060bc:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 80060c0:	b083      	sub	sp, #12
 80060c2:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 80060c4:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 80060c6:	f04f 0000 	mov.w	r0, #0
 80060ca:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 80060cc:	f000 8175 	beq.w	80063ba <HAL_ADCEx_InjectedConfigChannel+0x302>
 80060d0:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80060d2:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 80060d4:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80060d8:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80060dc:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80060de:	2d00      	cmp	r5, #0
 80060e0:	d072      	beq.n	80061c8 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 80060e2:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 80060e4:	2d01      	cmp	r5, #1
 80060e6:	d06f      	beq.n	80061c8 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80060e8:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 80060ea:	f000 001f 	and.w	r0, r0, #31
 80060ee:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80060f2:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80060f4:	2f00      	cmp	r7, #0
 80060f6:	f040 811a 	bne.w	800632e <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80060fa:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80060fc:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80060fe:	2800      	cmp	r0, #0
 8006100:	f000 821e 	beq.w	8006540 <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8006104:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006106:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 800610a:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 800610c:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800610e:	4330      	orrs	r0, r6
 8006110:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006114:	6898      	ldr	r0, [r3, #8]
 8006116:	0700      	lsls	r0, r0, #28
 8006118:	d410      	bmi.n	800613c <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 800611a:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 800611e:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8006122:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8006124:	2d00      	cmp	r5, #0
 8006126:	f040 80f7 	bne.w	8006318 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 800612a:	68dd      	ldr	r5, [r3, #12]
 800612c:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8006130:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8006134:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8006138:	4328      	orrs	r0, r5
 800613a:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800613c:	6898      	ldr	r0, [r3, #8]
 800613e:	f010 0004 	ands.w	r0, r0, #4
 8006142:	d057      	beq.n	80061f4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006144:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006146:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006148:	689d      	ldr	r5, [r3, #8]
 800614a:	07ee      	lsls	r6, r5, #31
 800614c:	d414      	bmi.n	8006178 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 800614e:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8006150:	4da3      	ldr	r5, [pc, #652]	@ (80063e0 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006152:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8006156:	f007 0c18 	and.w	ip, r7, #24
 800615a:	fa25 f50c 	lsr.w	r5, r5, ip
 800615e:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8006162:	4025      	ands	r5, r4
 8006164:	ea26 0c0e 	bic.w	ip, r6, lr
 8006168:	ea45 050c 	orr.w	r5, r5, ip
 800616c:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006170:	4d9c      	ldr	r5, [pc, #624]	@ (80063e4 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006172:	42af      	cmp	r7, r5
 8006174:	f000 80f6 	beq.w	8006364 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006178:	499b      	ldr	r1, [pc, #620]	@ (80063e8 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800617a:	420c      	tst	r4, r1
 800617c:	d01e      	beq.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800617e:	4e9b      	ldr	r6, [pc, #620]	@ (80063ec <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006180:	4d9b      	ldr	r5, [pc, #620]	@ (80063f0 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8006182:	68b1      	ldr	r1, [r6, #8]
 8006184:	42ac      	cmp	r4, r5
 8006186:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 800618a:	f000 809f 	beq.w	80062cc <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800618e:	4d99      	ldr	r5, [pc, #612]	@ (80063f4 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8006190:	42ac      	cmp	r4, r5
 8006192:	f000 809b 	beq.w	80062cc <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006196:	4d98      	ldr	r5, [pc, #608]	@ (80063f8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8006198:	42ac      	cmp	r4, r5
 800619a:	f000 8112 	beq.w	80063c2 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800619e:	4d97      	ldr	r5, [pc, #604]	@ (80063fc <HAL_ADCEx_InjectedConfigChannel+0x344>)
 80061a0:	42ac      	cmp	r4, r5
 80061a2:	d10b      	bne.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80061a4:	0249      	lsls	r1, r1, #9
 80061a6:	d409      	bmi.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 80061a8:	4995      	ldr	r1, [pc, #596]	@ (8006400 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80061aa:	428b      	cmp	r3, r1
 80061ac:	d006      	beq.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80061ae:	68b3      	ldr	r3, [r6, #8]
 80061b0:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80061b4:	433b      	orrs	r3, r7
 80061b6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80061ba:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061bc:	2300      	movs	r3, #0
 80061be:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 80061c2:	b003      	add	sp, #12
 80061c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 80061c8:	2809      	cmp	r0, #9
 80061ca:	d1a3      	bne.n	8006114 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80061cc:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80061ce:	0c65      	lsrs	r5, r4, #17
 80061d0:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80061d4:	b120      	cbz	r0, 80061e0 <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80061d6:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80061d8:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 80061dc:	4330      	orrs	r0, r6
 80061de:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 80061e0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80061e2:	4e88      	ldr	r6, [pc, #544]	@ (8006404 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80061e4:	4030      	ands	r0, r6
 80061e6:	4328      	orrs	r0, r5
 80061e8:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80061ea:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 80061ec:	6655      	str	r5, [r2, #100]	@ 0x64
 80061ee:	0700      	lsls	r0, r0, #28
 80061f0:	d4a4      	bmi.n	800613c <HAL_ADCEx_InjectedConfigChannel+0x84>
 80061f2:	e792      	b.n	800611a <HAL_ADCEx_InjectedConfigChannel+0x62>
 80061f4:	689d      	ldr	r5, [r3, #8]
 80061f6:	072f      	lsls	r7, r5, #28
 80061f8:	d4a6      	bmi.n	8006148 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80061fa:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80061fc:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8006200:	2d00      	cmp	r5, #0
 8006202:	f040 80a6 	bne.w	8006352 <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8006206:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006208:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800620a:	f000 819b 	beq.w	8006544 <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 800620e:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8006212:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006214:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8006216:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800621a:	2d01      	cmp	r5, #1
 800621c:	f000 8185 	beq.w	800652a <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8006220:	691d      	ldr	r5, [r3, #16]
 8006222:	f025 0502 	bic.w	r5, r5, #2
 8006226:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006228:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 800622a:	f3c4 5704 	ubfx	r7, r4, #20, #5
 800622e:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006230:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8006232:	40bd      	lsls	r5, r7
 8006234:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006238:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 800623c:	ea6f 0505 	mvn.w	r5, r5
 8006240:	f000 8169 	beq.w	8006516 <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006244:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8006248:	40be      	lsls	r6, r7
 800624a:	f85c 7004 	ldr.w	r7, [ip, r4]
 800624e:	403d      	ands	r5, r7
 8006250:	4335      	orrs	r5, r6
 8006252:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006256:	695c      	ldr	r4, [r3, #20]
 8006258:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800625c:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800625e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006260:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006262:	694d      	ldr	r5, [r1, #20]
 8006264:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006266:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006268:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800626a:	f000 810c 	beq.w	8006486 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800626e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8006272:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8006274:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8006278:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800627c:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8006280:	4e61      	ldr	r6, [pc, #388]	@ (8006408 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8006282:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8006286:	ea0e 0606 	and.w	r6, lr, r6
 800628a:	ea46 060c 	orr.w	r6, r6, ip
 800628e:	4334      	orrs	r4, r6
 8006290:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006294:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006298:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800629a:	698e      	ldr	r6, [r1, #24]
 800629c:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80062a0:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 80062a4:	4334      	orrs	r4, r6
 80062a6:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80062aa:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 80062ac:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 80062ae:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 80062b2:	f1a6 0601 	sub.w	r6, r6, #1
 80062b6:	fab6 f686 	clz	r6, r6
 80062ba:	0976      	lsrs	r6, r6, #5
 80062bc:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 80062c0:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 80062c4:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80062c8:	680c      	ldr	r4, [r1, #0]
}
 80062ca:	e73d      	b.n	8006148 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80062cc:	020d      	lsls	r5, r1, #8
 80062ce:	f53f af75 	bmi.w	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80062d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80062d6:	f47f af71 	bne.w	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80062da:	4944      	ldr	r1, [pc, #272]	@ (80063ec <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 80062dc:	4c4b      	ldr	r4, [pc, #300]	@ (800640c <HAL_ADCEx_InjectedConfigChannel+0x354>)
 80062de:	688b      	ldr	r3, [r1, #8]
 80062e0:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80062e4:	433b      	orrs	r3, r7
 80062e6:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80062ea:	608b      	str	r3, [r1, #8]
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	4948      	ldr	r1, [pc, #288]	@ (8006410 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80062f0:	099b      	lsrs	r3, r3, #6
 80062f2:	fba1 1303 	umull	r1, r3, r1, r3
 80062f6:	099b      	lsrs	r3, r3, #6
 80062f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8006300:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8006302:	9b01      	ldr	r3, [sp, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	f43f af59 	beq.w	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 800630a:	9b01      	ldr	r3, [sp, #4]
 800630c:	3b01      	subs	r3, #1
 800630e:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8006310:	9b01      	ldr	r3, [sp, #4]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1f9      	bne.n	800630a <HAL_ADCEx_InjectedConfigChannel+0x252>
 8006316:	e751      	b.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 8006318:	68dd      	ldr	r5, [r3, #12]
 800631a:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 800631e:	4328      	orrs	r0, r5
 8006320:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006322:	6898      	ldr	r0, [r3, #8]
 8006324:	f010 0004 	ands.w	r0, r0, #4
 8006328:	f43f af64 	beq.w	80061f4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 800632c:	e70a      	b.n	8006144 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 800632e:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8006330:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8006332:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8006334:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8006336:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006338:	2f00      	cmp	r7, #0
 800633a:	f47f aeeb 	bne.w	8006114 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800633e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006340:	4e30      	ldr	r6, [pc, #192]	@ (8006404 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8006342:	4030      	ands	r0, r6
 8006344:	4328      	orrs	r0, r5
 8006346:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006348:	6898      	ldr	r0, [r3, #8]
 800634a:	0700      	lsls	r0, r0, #28
 800634c:	f53f aef6 	bmi.w	800613c <HAL_ADCEx_InjectedConfigChannel+0x84>
 8006350:	e6e3      	b.n	800611a <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006352:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8006354:	2d00      	cmp	r5, #0
 8006356:	f43f af56 	beq.w	8006206 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800635a:	2801      	cmp	r0, #1
 800635c:	f000 8118 	beq.w	8006590 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006360:	68d8      	ldr	r0, [r3, #12]
 8006362:	e754      	b.n	800620e <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006364:	f1be 0f00 	cmp.w	lr, #0
 8006368:	d154      	bne.n	8006414 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 800636a:	0ea4      	lsrs	r4, r4, #26
 800636c:	3401      	adds	r4, #1
 800636e:	f004 061f 	and.w	r6, r4, #31
 8006372:	2501      	movs	r5, #1
 8006374:	06a4      	lsls	r4, r4, #26
 8006376:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800637a:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800637c:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800637e:	ea45 0504 	orr.w	r5, r5, r4
 8006382:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006386:	f200 80fe 	bhi.w	8006586 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800638a:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800638c:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800638e:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8006390:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006392:	f006 0604 	and.w	r6, r6, #4
 8006396:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800639a:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800639e:	fa05 fc04 	lsl.w	ip, r5, r4
 80063a2:	f04f 0e07 	mov.w	lr, #7
 80063a6:	59bd      	ldr	r5, [r7, r6]
 80063a8:	fa0e f404 	lsl.w	r4, lr, r4
 80063ac:	ea25 0404 	bic.w	r4, r5, r4
 80063b0:	ea44 040c 	orr.w	r4, r4, ip
 80063b4:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 80063b6:	680c      	ldr	r4, [r1, #0]
}
 80063b8:	e6de      	b.n	8006178 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 80063ba:	2002      	movs	r0, #2
}
 80063bc:	b003      	add	sp, #12
 80063be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80063c2:	01cc      	lsls	r4, r1, #7
 80063c4:	f53f aefa 	bmi.w	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80063c8:	490d      	ldr	r1, [pc, #52]	@ (8006400 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 80063ca:	428b      	cmp	r3, r1
 80063cc:	f43f aef6 	beq.w	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80063d0:	68b3      	ldr	r3, [r6, #8]
 80063d2:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 80063d6:	433b      	orrs	r3, r7
 80063d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80063dc:	60b3      	str	r3, [r6, #8]
}
 80063de:	e6ed      	b.n	80061bc <HAL_ADCEx_InjectedConfigChannel+0x104>
 80063e0:	0007ffff 	.word	0x0007ffff
 80063e4:	407f0000 	.word	0x407f0000
 80063e8:	80080000 	.word	0x80080000
 80063ec:	50000300 	.word	0x50000300
 80063f0:	c3210000 	.word	0xc3210000
 80063f4:	90c00010 	.word	0x90c00010
 80063f8:	c7520000 	.word	0xc7520000
 80063fc:	cb840000 	.word	0xcb840000
 8006400:	50000100 	.word	0x50000100
 8006404:	04104000 	.word	0x04104000
 8006408:	03fff000 	.word	0x03fff000
 800640c:	200003d8 	.word	0x200003d8
 8006410:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006414:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006418:	2d00      	cmp	r5, #0
 800641a:	f000 80be 	beq.w	800659a <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 800641e:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006422:	3501      	adds	r5, #1
 8006424:	f005 051f 	and.w	r5, r5, #31
 8006428:	2d09      	cmp	r5, #9
 800642a:	f240 80b6 	bls.w	800659a <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800642e:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8006432:	2d00      	cmp	r5, #0
 8006434:	f000 812b 	beq.w	800668e <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8006438:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800643c:	3501      	adds	r5, #1
 800643e:	06ad      	lsls	r5, r5, #26
 8006440:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006444:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006448:	2e00      	cmp	r6, #0
 800644a:	f000 811e 	beq.w	800668a <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 800644e:	fab6 f686 	clz	r6, r6
 8006452:	3601      	adds	r6, #1
 8006454:	f006 061f 	and.w	r6, r6, #31
 8006458:	2701      	movs	r7, #1
 800645a:	fa07 f606 	lsl.w	r6, r7, r6
 800645e:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006460:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006464:	2c00      	cmp	r4, #0
 8006466:	f000 8109 	beq.w	800667c <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 800646a:	fab4 f484 	clz	r4, r4
 800646e:	1c66      	adds	r6, r4, #1
 8006470:	f006 061f 	and.w	r6, r6, #31
 8006474:	2403      	movs	r4, #3
 8006476:	f06f 071d 	mvn.w	r7, #29
 800647a:	fb14 7406 	smlabb	r4, r4, r6, r7
 800647e:	0524      	lsls	r4, r4, #20
 8006480:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8006484:	e782      	b.n	800638c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006486:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8006488:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800648a:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800648e:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006492:	2e00      	cmp	r6, #0
 8006494:	d05a      	beq.n	800654c <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006496:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800649a:	b126      	cbz	r6, 80064a6 <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 800649c:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80064a0:	42b5      	cmp	r5, r6
 80064a2:	f000 80ce 	beq.w	8006642 <HAL_ADCEx_InjectedConfigChannel+0x58a>
 80064a6:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 80064a8:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064aa:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80064ae:	f3c6 6684 	ubfx	r6, r6, #26, #5
 80064b2:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064b6:	fa9c f7ac 	rbit	r7, ip
 80064ba:	f105 0e08 	add.w	lr, r5, #8
 80064be:	46f1      	mov	r9, lr
  if (value == 0U)
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	f000 80dd 	beq.w	8006680 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 80064c6:	fab7 f787 	clz	r7, r7
 80064ca:	42b7      	cmp	r7, r6
 80064cc:	f000 80a3 	beq.w	8006616 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064d0:	f8de 6000 	ldr.w	r6, [lr]
 80064d4:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80064d8:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064dc:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064e0:	f105 070c 	add.w	r7, r5, #12
 80064e4:	46b9      	mov	r9, r7
  if (value == 0U)
 80064e6:	f1b8 0f00 	cmp.w	r8, #0
 80064ea:	f000 80d3 	beq.w	8006694 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 80064ee:	fab8 f888 	clz	r8, r8
 80064f2:	45b0      	cmp	r8, r6
 80064f4:	d077      	beq.n	80065e6 <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80064f6:	683d      	ldr	r5, [r7, #0]
 80064f8:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80064fa:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064fe:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8006502:	2e00      	cmp	r6, #0
 8006504:	f43f ae20 	beq.w	8006148 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 8006508:	fab6 f486 	clz	r4, r6
 800650c:	42ac      	cmp	r4, r5
 800650e:	f000 80af 	beq.w	8006670 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006512:	4664      	mov	r4, ip
 8006514:	e618      	b.n	8006148 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006516:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800651a:	593e      	ldr	r6, [r7, r4]
 800651c:	4035      	ands	r5, r6
 800651e:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006520:	695c      	ldr	r4, [r3, #20]
 8006522:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006526:	615c      	str	r4, [r3, #20]
}
 8006528:	e699      	b.n	800625e <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 800652a:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 800652e:	691e      	ldr	r6, [r3, #16]
 8006530:	433d      	orrs	r5, r7
 8006532:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8006536:	4335      	orrs	r5, r6
 8006538:	f045 0502 	orr.w	r5, r5, #2
 800653c:	611d      	str	r5, [r3, #16]
 800653e:	e673      	b.n	8006228 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8006540:	4628      	mov	r0, r5
 8006542:	e5e4      	b.n	800610e <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006544:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8006548:	60d8      	str	r0, [r3, #12]
 800654a:	e663      	b.n	8006214 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800654c:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006550:	42a5      	cmp	r5, r4
 8006552:	d076      	beq.n	8006642 <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006554:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006556:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006558:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800655c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006560:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8006564:	42a6      	cmp	r6, r4
 8006566:	d054      	beq.n	8006612 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006568:	68ae      	ldr	r6, [r5, #8]
 800656a:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800656c:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006570:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006574:	42a6      	cmp	r6, r4
 8006576:	d034      	beq.n	80065e2 <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006578:	68ee      	ldr	r6, [r5, #12]
 800657a:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800657c:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006580:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8006584:	e7c2      	b.n	800650c <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006586:	3c1e      	subs	r4, #30
 8006588:	0524      	lsls	r4, r4, #20
 800658a:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800658e:	e6fd      	b.n	800638c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006590:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8006592:	f045 0520 	orr.w	r5, r5, #32
 8006596:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8006598:	e63d      	b.n	8006216 <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800659a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800659e:	2d00      	cmp	r5, #0
 80065a0:	f000 8082 	beq.w	80066a8 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 80065a4:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80065a8:	3501      	adds	r5, #1
 80065aa:	06ad      	lsls	r5, r5, #26
 80065ac:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065b0:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80065b4:	2e00      	cmp	r6, #0
 80065b6:	d075      	beq.n	80066a4 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 80065b8:	fab6 f686 	clz	r6, r6
 80065bc:	3601      	adds	r6, #1
 80065be:	f006 061f 	and.w	r6, r6, #31
 80065c2:	2701      	movs	r7, #1
 80065c4:	fa07 f606 	lsl.w	r6, r7, r6
 80065c8:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065ca:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 80065ce:	2c00      	cmp	r4, #0
 80065d0:	d065      	beq.n	800669e <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 80065d2:	fab4 f484 	clz	r4, r4
 80065d6:	3401      	adds	r4, #1
 80065d8:	f004 041f 	and.w	r4, r4, #31
 80065dc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80065e0:	e6d3      	b.n	800638a <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 80065e2:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 80065e6:	f8de 4000 	ldr.w	r4, [lr]
 80065ea:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80065ee:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80065f2:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80065f6:	68ec      	ldr	r4, [r5, #12]
 80065f8:	68ed      	ldr	r5, [r5, #12]
 80065fa:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80065fe:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006600:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006604:	4664      	mov	r4, ip
 8006606:	2e00      	cmp	r6, #0
 8006608:	f47f af79 	bne.w	80064fe <HAL_ADCEx_InjectedConfigChannel+0x446>
 800660c:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006610:	e77c      	b.n	800650c <HAL_ADCEx_InjectedConfigChannel+0x454>
 8006612:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8006616:	f8d8 4000 	ldr.w	r4, [r8]
 800661a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800661e:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006622:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006626:	68ac      	ldr	r4, [r5, #8]
 8006628:	68ae      	ldr	r6, [r5, #8]
 800662a:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800662e:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006630:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006634:	4664      	mov	r4, ip
 8006636:	2f00      	cmp	r7, #0
 8006638:	f47f af50 	bne.w	80064dc <HAL_ADCEx_InjectedConfigChannel+0x424>
 800663c:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006640:	e798      	b.n	8006574 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 8006642:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8006644:	461d      	mov	r5, r3
 8006646:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800664a:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800664e:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006652:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8006654:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8006656:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800665a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800665e:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006662:	4664      	mov	r4, ip
 8006664:	2f00      	cmp	r7, #0
 8006666:	f47f af26 	bne.w	80064b6 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 800666a:	f3cc 6484 	ubfx	r4, ip, #26, #5
 800666e:	e779      	b.n	8006564 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 8006670:	683c      	ldr	r4, [r7, #0]
 8006672:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006676:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006678:	680c      	ldr	r4, [r1, #0]
}
 800667a:	e565      	b.n	8006148 <HAL_ADCEx_InjectedConfigChannel+0x90>
 800667c:	4c0c      	ldr	r4, [pc, #48]	@ (80066b0 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 800667e:	e685      	b.n	800638c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006680:	68ae      	ldr	r6, [r5, #8]
 8006682:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006684:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006688:	e728      	b.n	80064dc <HAL_ADCEx_InjectedConfigChannel+0x424>
 800668a:	2602      	movs	r6, #2
 800668c:	e6e7      	b.n	800645e <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 800668e:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006692:	e6d7      	b.n	8006444 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8006694:	68ee      	ldr	r6, [r5, #12]
 8006696:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006698:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800669c:	e72f      	b.n	80064fe <HAL_ADCEx_InjectedConfigChannel+0x446>
 800669e:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 80066a2:	e673      	b.n	800638c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 80066a4:	2602      	movs	r6, #2
 80066a6:	e78f      	b.n	80065c8 <HAL_ADCEx_InjectedConfigChannel+0x510>
 80066a8:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 80066ac:	e780      	b.n	80065b0 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 80066ae:	bf00      	nop
 80066b0:	fe500000 	.word	0xfe500000

080066b4 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80066b4:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 80066b8:	2a01      	cmp	r2, #1
 80066ba:	d045      	beq.n	8006748 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 80066bc:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80066be:	6804      	ldr	r4, [r0, #0]
{
 80066c0:	b09c      	sub	sp, #112	@ 0x70
 80066c2:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80066c4:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80066c6:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80066c8:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80066cc:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 80066ce:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80066d2:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80066d4:	d008      	beq.n	80066e8 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066d6:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80066d8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066dc:	f041 0120 	orr.w	r1, r1, #32
 80066e0:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 80066e2:	b01c      	add	sp, #112	@ 0x70
 80066e4:	bcf0      	pop	{r4, r5, r6, r7}
 80066e6:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066e8:	4a22      	ldr	r2, [pc, #136]	@ (8006774 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 80066ea:	6890      	ldr	r0, [r2, #8]
 80066ec:	0740      	lsls	r0, r0, #29
 80066ee:	d50b      	bpl.n	8006708 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 80066f0:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066f2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80066f4:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 80066f8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80066fa:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 80066fc:	2200      	movs	r2, #0
 80066fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8006702:	b01c      	add	sp, #112	@ 0x70
 8006704:	bcf0      	pop	{r4, r5, r6, r7}
 8006706:	4770      	bx	lr
 8006708:	68a0      	ldr	r0, [r4, #8]
 800670a:	0745      	lsls	r5, r0, #29
 800670c:	d4f1      	bmi.n	80066f2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800670e:	680d      	ldr	r5, [r1, #0]
 8006710:	b1e5      	cbz	r5, 800674c <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006712:	4e19      	ldr	r6, [pc, #100]	@ (8006778 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006714:	684f      	ldr	r7, [r1, #4]
 8006716:	68b0      	ldr	r0, [r6, #8]
 8006718:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 800671c:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8006720:	4338      	orrs	r0, r7
 8006722:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8006726:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006728:	68a0      	ldr	r0, [r4, #8]
 800672a:	6892      	ldr	r2, [r2, #8]
 800672c:	07c0      	lsls	r0, r0, #31
 800672e:	d41e      	bmi.n	800676e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8006730:	07d7      	lsls	r7, r2, #31
 8006732:	d41c      	bmi.n	800676e <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8006734:	68b2      	ldr	r2, [r6, #8]
 8006736:	6889      	ldr	r1, [r1, #8]
 8006738:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 800673c:	430d      	orrs	r5, r1
 800673e:	f022 020f 	bic.w	r2, r2, #15
 8006742:	4315      	orrs	r5, r2
 8006744:	60b5      	str	r5, [r6, #8]
 8006746:	e012      	b.n	800676e <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8006748:	2002      	movs	r0, #2
}
 800674a:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800674c:	480a      	ldr	r0, [pc, #40]	@ (8006778 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 800674e:	6881      	ldr	r1, [r0, #8]
 8006750:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006754:	6081      	str	r1, [r0, #8]
 8006756:	68a1      	ldr	r1, [r4, #8]
 8006758:	6892      	ldr	r2, [r2, #8]
 800675a:	07cd      	lsls	r5, r1, #31
 800675c:	d407      	bmi.n	800676e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 800675e:	07d4      	lsls	r4, r2, #31
 8006760:	d405      	bmi.n	800676e <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006762:	6882      	ldr	r2, [r0, #8]
 8006764:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006768:	f022 020f 	bic.w	r2, r2, #15
 800676c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800676e:	2000      	movs	r0, #0
 8006770:	e7c4      	b.n	80066fc <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8006772:	bf00      	nop
 8006774:	50000100 	.word	0x50000100
 8006778:	50000300 	.word	0x50000300

0800677c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800677c:	b530      	push	{r4, r5, lr}
 800677e:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006780:	2300      	movs	r3, #0
 8006782:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006784:	2800      	cmp	r0, #0
 8006786:	d051      	beq.n	800682c <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006788:	6802      	ldr	r2, [r0, #0]
 800678a:	6813      	ldr	r3, [r2, #0]
 800678c:	2b00      	cmp	r3, #0
 800678e:	4604      	mov	r4, r0
 8006790:	db4c      	blt.n	800682c <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006792:	7f43      	ldrb	r3, [r0, #29]
 8006794:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006798:	2b00      	cmp	r3, #0
 800679a:	d073      	beq.n	8006884 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 800679c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 80067a0:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 80067a2:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 80067a4:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 80067a6:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 80067a8:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80067aa:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 80067ac:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 80067ae:	6921      	ldr	r1, [r4, #16]
 80067b0:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 80067b2:	493c      	ldr	r1, [pc, #240]	@ (80068a4 <HAL_COMP_Init+0x128>)
 80067b4:	4001      	ands	r1, r0
 80067b6:	430b      	orrs	r3, r1
 80067b8:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80067ba:	6813      	ldr	r3, [r2, #0]
 80067bc:	021b      	lsls	r3, r3, #8
 80067be:	d501      	bpl.n	80067c4 <HAL_COMP_Init+0x48>
 80067c0:	022d      	lsls	r5, r5, #8
 80067c2:	d549      	bpl.n	8006858 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80067c4:	4b38      	ldr	r3, [pc, #224]	@ (80068a8 <HAL_COMP_Init+0x12c>)
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d062      	beq.n	8006890 <HAL_COMP_Init+0x114>
 80067ca:	4b38      	ldr	r3, [pc, #224]	@ (80068ac <HAL_COMP_Init+0x130>)
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d064      	beq.n	800689a <HAL_COMP_Init+0x11e>
 80067d0:	3304      	adds	r3, #4
 80067d2:	429a      	cmp	r2, r3
 80067d4:	bf15      	itete	ne
 80067d6:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 80067da:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 80067de:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 80067e2:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 80067e6:	69a3      	ldr	r3, [r4, #24]
 80067e8:	0798      	lsls	r0, r3, #30
 80067ea:	d022      	beq.n	8006832 <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80067ec:	4d30      	ldr	r5, [pc, #192]	@ (80068b0 <HAL_COMP_Init+0x134>)
 80067ee:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 80067f0:	f013 0f10 	tst.w	r3, #16
 80067f4:	bf14      	ite	ne
 80067f6:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80067f8:	4010      	andeq	r0, r2
 80067fa:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80067fc:	4d2c      	ldr	r5, [pc, #176]	@ (80068b0 <HAL_COMP_Init+0x134>)
 80067fe:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006800:	f013 0f20 	tst.w	r3, #32
 8006804:	bf14      	ite	ne
 8006806:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006808:	4010      	andeq	r0, r2
 800680a:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800680c:	4828      	ldr	r0, [pc, #160]	@ (80068b0 <HAL_COMP_Init+0x134>)
 800680e:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006810:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006812:	f013 0f02 	tst.w	r3, #2
 8006816:	bf14      	ite	ne
 8006818:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800681a:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800681c:	07db      	lsls	r3, r3, #31
 800681e:	6045      	str	r5, [r0, #4]
 8006820:	d515      	bpl.n	800684e <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006822:	4b23      	ldr	r3, [pc, #140]	@ (80068b0 <HAL_COMP_Init+0x134>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4311      	orrs	r1, r2
 8006828:	6019      	str	r1, [r3, #0]
}
 800682a:	e009      	b.n	8006840 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 800682c:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 800682e:	b003      	add	sp, #12
 8006830:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006832:	4b1f      	ldr	r3, [pc, #124]	@ (80068b0 <HAL_COMP_Init+0x134>)
 8006834:	6859      	ldr	r1, [r3, #4]
 8006836:	4011      	ands	r1, r2
 8006838:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800683a:	6819      	ldr	r1, [r3, #0]
 800683c:	400a      	ands	r2, r1
 800683e:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006840:	7f63      	ldrb	r3, [r4, #29]
 8006842:	b90b      	cbnz	r3, 8006848 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 8006844:	2301      	movs	r3, #1
 8006846:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8006848:	2000      	movs	r0, #0
}
 800684a:	b003      	add	sp, #12
 800684c:	bd30      	pop	{r4, r5, pc}
 800684e:	4918      	ldr	r1, [pc, #96]	@ (80068b0 <HAL_COMP_Init+0x134>)
 8006850:	680b      	ldr	r3, [r1, #0]
 8006852:	4013      	ands	r3, r2
 8006854:	600b      	str	r3, [r1, #0]
}
 8006856:	e7f3      	b.n	8006840 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006858:	4b16      	ldr	r3, [pc, #88]	@ (80068b4 <HAL_COMP_Init+0x138>)
 800685a:	4917      	ldr	r1, [pc, #92]	@ (80068b8 <HAL_COMP_Init+0x13c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	099b      	lsrs	r3, r3, #6
 8006860:	fba1 1303 	umull	r1, r3, r1, r3
 8006864:	099b      	lsrs	r3, r3, #6
 8006866:	3301      	adds	r3, #1
 8006868:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006870:	9b01      	ldr	r3, [sp, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0a6      	beq.n	80067c4 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8006876:	9b01      	ldr	r3, [sp, #4]
 8006878:	3b01      	subs	r3, #1
 800687a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 800687c:	9b01      	ldr	r3, [sp, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1f9      	bne.n	8006876 <HAL_COMP_Init+0xfa>
 8006882:	e79f      	b.n	80067c4 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8006884:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8006886:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8006888:	f7fe fc2e 	bl	80050e8 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800688c:	6822      	ldr	r2, [r4, #0]
 800688e:	e785      	b.n	800679c <HAL_COMP_Init+0x20>
 8006890:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006894:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006898:	e7a5      	b.n	80067e6 <HAL_COMP_Init+0x6a>
 800689a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800689e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80068a2:	e7a0      	b.n	80067e6 <HAL_COMP_Init+0x6a>
 80068a4:	ff007e0f 	.word	0xff007e0f
 80068a8:	40010200 	.word	0x40010200
 80068ac:	40010204 	.word	0x40010204
 80068b0:	40010400 	.word	0x40010400
 80068b4:	200003d8 	.word	0x200003d8
 80068b8:	053e2d63 	.word	0x053e2d63

080068bc <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 80068bc:	b1b0      	cbz	r0, 80068ec <HAL_CORDIC_Init+0x30>
{
 80068be:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 80068c0:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 80068c4:	4604      	mov	r4, r0
 80068c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80068ca:	b153      	cbz	r3, 80068e2 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80068cc:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 80068ce:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 80068d0:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 80068d2:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 80068d6:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 80068da:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 80068de:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 80068e0:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 80068e2:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 80068e6:	f7fe fc73 	bl	80051d0 <HAL_CORDIC_MspInit>
 80068ea:	e7ef      	b.n	80068cc <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 80068ec:	2001      	movs	r0, #1
}
 80068ee:	4770      	bx	lr

080068f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80068f0:	4907      	ldr	r1, [pc, #28]	@ (8006910 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80068f2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068f4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068f6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80068fa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80068fe:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006900:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006902:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006906:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800690a:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	e000ed00 	.word	0xe000ed00

08006914 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <HAL_NVIC_SetPriority+0x70>)
 8006916:	68db      	ldr	r3, [r3, #12]
 8006918:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800691c:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800691e:	f1c3 0e07 	rsb	lr, r3, #7
 8006922:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006926:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800692a:	bf28      	it	cs
 800692c:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006930:	f1bc 0f06 	cmp.w	ip, #6
 8006934:	d91c      	bls.n	8006970 <HAL_NVIC_SetPriority+0x5c>
 8006936:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
 800693e:	fa03 f30c 	lsl.w	r3, r3, ip
 8006942:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006946:	f04f 33ff 	mov.w	r3, #4294967295
 800694a:	fa03 f30e 	lsl.w	r3, r3, lr
 800694e:	ea21 0303 	bic.w	r3, r1, r3
 8006952:	fa03 f30c 	lsl.w	r3, r3, ip
 8006956:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006958:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 800695a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800695c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800695e:	db0a      	blt.n	8006976 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006960:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006964:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006968:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800696c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006970:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006972:	4694      	mov	ip, r2
 8006974:	e7e7      	b.n	8006946 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006976:	4a04      	ldr	r2, [pc, #16]	@ (8006988 <HAL_NVIC_SetPriority+0x74>)
 8006978:	f000 000f 	and.w	r0, r0, #15
 800697c:	4402      	add	r2, r0
 800697e:	7613      	strb	r3, [r2, #24]
 8006980:	f85d fb04 	ldr.w	pc, [sp], #4
 8006984:	e000ed00 	.word	0xe000ed00
 8006988:	e000ecfc 	.word	0xe000ecfc

0800698c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800698c:	2800      	cmp	r0, #0
 800698e:	db07      	blt.n	80069a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006990:	4a04      	ldr	r2, [pc, #16]	@ (80069a4 <HAL_NVIC_EnableIRQ+0x18>)
 8006992:	0941      	lsrs	r1, r0, #5
 8006994:	2301      	movs	r3, #1
 8006996:	f000 001f 	and.w	r0, r0, #31
 800699a:	4083      	lsls	r3, r0
 800699c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80069a0:	4770      	bx	lr
 80069a2:	bf00      	nop
 80069a4:	e000e100 	.word	0xe000e100

080069a8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80069a8:	2800      	cmp	r0, #0
 80069aa:	db0c      	blt.n	80069c6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80069ac:	0943      	lsrs	r3, r0, #5
 80069ae:	4906      	ldr	r1, [pc, #24]	@ (80069c8 <HAL_NVIC_DisableIRQ+0x20>)
 80069b0:	f000 001f 	and.w	r0, r0, #31
 80069b4:	3320      	adds	r3, #32
 80069b6:	2201      	movs	r2, #1
 80069b8:	4082      	lsls	r2, r0
 80069ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80069be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80069c2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80069c6:	4770      	bx	lr
 80069c8:	e000e100 	.word	0xe000e100

080069cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80069cc:	3801      	subs	r0, #1
 80069ce:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80069d2:	d301      	bcc.n	80069d8 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 80069d4:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80069d6:	4770      	bx	lr
{
 80069d8:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069da:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069de:	4c07      	ldr	r4, [pc, #28]	@ (80069fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80069e0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80069e2:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 80069e6:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069ea:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069ec:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80069ee:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80069f0:	619a      	str	r2, [r3, #24]
}
 80069f2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80069f6:	6119      	str	r1, [r3, #16]
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	e000ed00 	.word	0xe000ed00

08006a00 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop

08006a04 <HAL_SYSTICK_IRQHandler>:
{
 8006a04:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8006a06:	f7ff fffb 	bl	8006a00 <HAL_SYSTICK_Callback>
}
 8006a0a:	bd08      	pop	{r3, pc}

08006a0c <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006a0c:	b188      	cbz	r0, 8006a32 <HAL_DAC_Init+0x26>
{
 8006a0e:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006a10:	7903      	ldrb	r3, [r0, #4]
 8006a12:	4604      	mov	r4, r0
 8006a14:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006a18:	b13b      	cbz	r3, 8006a2a <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a1a:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a1c:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006a1e:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a20:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006a22:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006a24:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8006a26:	4618      	mov	r0, r3
}
 8006a28:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006a2a:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006a2c:	f7fe fbe6 	bl	80051fc <HAL_DAC_MspInit>
 8006a30:	e7f3      	b.n	8006a1a <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8006a32:	2001      	movs	r0, #1
}
 8006a34:	4770      	bx	lr
 8006a36:	bf00      	nop

08006a38 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	f000 80c2 	beq.w	8006bc2 <HAL_DAC_ConfigChannel+0x18a>
{
 8006a3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a42:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8006a44:	2900      	cmp	r1, #0
 8006a46:	f000 80be 	beq.w	8006bc6 <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006a4a:	7943      	ldrb	r3, [r0, #5]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006a50:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 8006a52:	f000 80c7 	beq.w	8006be4 <HAL_DAC_ConfigChannel+0x1ac>
 8006a56:	2301      	movs	r3, #1
 8006a58:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006a5a:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8006a5c:	f04f 0302 	mov.w	r3, #2
 8006a60:	4616      	mov	r6, r2
 8006a62:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006a64:	d06f      	beq.n	8006b46 <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006a66:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006a68:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	2a01      	cmp	r2, #1
 8006a70:	d108      	bne.n	8006a84 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 8006a72:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a74:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006a76:	241f      	movs	r4, #31
 8006a78:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a7a:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006a7c:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006a80:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006a82:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006a84:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8006a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006a88:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006a8c:	2901      	cmp	r1, #1
 8006a8e:	f000 8095 	beq.w	8006bbc <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006a92:	2902      	cmp	r1, #2
 8006a94:	f000 809a 	beq.w	8006bcc <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006a98:	fabe fc8e 	clz	ip, lr
 8006a9c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006aa0:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006aa2:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006aa4:	f1a4 0401 	sub.w	r4, r4, #1
 8006aa8:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006aac:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006ab0:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006ab2:	fab1 f181 	clz	r1, r1
 8006ab6:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006ab8:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006aba:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006abe:	f240 3107 	movw	r1, #775	@ 0x307
 8006ac2:	40b1      	lsls	r1, r6
 8006ac4:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006ac8:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006aca:	ea44 040e 	orr.w	r4, r4, lr
 8006ace:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006ad0:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006ad2:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006ad6:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006ada:	d07a      	beq.n	8006bd2 <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006adc:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006ae0:	40b4      	lsls	r4, r6
 8006ae2:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006ae6:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006aee:	40b1      	lsls	r1, r6
 8006af0:	ea22 0201 	bic.w	r2, r2, r1
 8006af4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006af6:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8006afa:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006afc:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8006b00:	40b0      	lsls	r0, r6
 8006b02:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006b06:	fa01 f006 	lsl.w	r0, r1, r6
 8006b0a:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006b0c:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 8006b0e:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006b10:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006b14:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8006b18:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006b1a:	24c0      	movs	r4, #192	@ 0xc0
 8006b1c:	6819      	ldr	r1, [r3, #0]
 8006b1e:	40b4      	lsls	r4, r6
 8006b20:	ea21 0104 	bic.w	r1, r1, r4
 8006b24:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006b26:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8006b28:	f640 700f 	movw	r0, #3855	@ 0xf0f
 8006b2c:	40b0      	lsls	r0, r6
 8006b2e:	ea21 0100 	bic.w	r1, r1, r0
 8006b32:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006b34:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006b36:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8006b38:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006b3a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8006b3c:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8006b3e:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8006b40:	716c      	strb	r4, [r5, #5]
}
 8006b42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8006b46:	f7fe ff3b 	bl	80059c0 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b4a:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006b4c:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8006b50:	b156      	cbz	r6, 8006b68 <HAL_DAC_ConfigChannel+0x130>
 8006b52:	e018      	b.n	8006b86 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b54:	f7fe ff34 	bl	80059c0 <HAL_GetTick>
 8006b58:	1b00      	subs	r0, r0, r4
 8006b5a:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b5c:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b5e:	d902      	bls.n	8006b66 <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b62:	0411      	lsls	r1, r2, #16
 8006b64:	d448      	bmi.n	8006bf8 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006b66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b68:	0412      	lsls	r2, r2, #16
 8006b6a:	d4f3      	bmi.n	8006b54 <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006b6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006b70:	e00d      	b.n	8006b8e <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b72:	f7fe ff25 	bl	80059c0 <HAL_GetTick>
 8006b76:	1b00      	subs	r0, r0, r4
 8006b78:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006b7a:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006b7c:	d902      	bls.n	8006b84 <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006b7e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b80:	2a00      	cmp	r2, #0
 8006b82:	db39      	blt.n	8006bf8 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006b84:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006b86:	2a00      	cmp	r2, #0
 8006b88:	dbf3      	blt.n	8006b72 <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006b8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b8c:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006b8e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b92:	f006 0610 	and.w	r6, r6, #16
 8006b96:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8006b9a:	40b0      	lsls	r0, r6
 8006b9c:	40b1      	lsls	r1, r6
 8006b9e:	ea22 0200 	bic.w	r2, r2, r0
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006ba6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006ba8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006baa:	20ff      	movs	r0, #255	@ 0xff
 8006bac:	40b0      	lsls	r0, r6
 8006bae:	ea22 0200 	bic.w	r2, r2, r0
 8006bb2:	40b1      	lsls	r1, r6
 8006bb4:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006bb6:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006bb8:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006bba:	e757      	b.n	8006a6c <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8006bbc:	f04f 0c00 	mov.w	ip, #0
 8006bc0:	e76e      	b.n	8006aa0 <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 8006bc2:	2001      	movs	r0, #1
}
 8006bc4:	4770      	bx	lr
    return HAL_ERROR;
 8006bc6:	2001      	movs	r0, #1
}
 8006bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006bcc:	f04f 0c01 	mov.w	ip, #1
 8006bd0:	e766      	b.n	8006aa0 <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006bd2:	f001 fbf1 	bl	80083b8 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006c08 <HAL_DAC_ConfigChannel+0x1d0>)
 8006bd8:	4298      	cmp	r0, r3
 8006bda:	d905      	bls.n	8006be8 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8006bdc:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006bde:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8006be2:	e77d      	b.n	8006ae0 <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 8006be4:	2002      	movs	r0, #2
 8006be6:	e7ac      	b.n	8006b42 <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006be8:	4a08      	ldr	r2, [pc, #32]	@ (8006c0c <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 8006bea:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006bec:	4290      	cmp	r0, r2
 8006bee:	f67f af77 	bls.w	8006ae0 <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006bf2:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8006bf6:	e773      	b.n	8006ae0 <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006bf8:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006bfa:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006bfc:	f043 0308 	orr.w	r3, r3, #8
 8006c00:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 8006c02:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006c04:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8006c06:	e79c      	b.n	8006b42 <HAL_DAC_ConfigChannel+0x10a>
 8006c08:	09896800 	.word	0x09896800
 8006c0c:	04c4b400 	.word	0x04c4b400

08006c10 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006c10:	2800      	cmp	r0, #0
 8006c12:	d076      	beq.n	8006d02 <HAL_DMA_Init+0xf2>
{
 8006c14:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006c16:	4a3c      	ldr	r2, [pc, #240]	@ (8006d08 <HAL_DMA_Init+0xf8>)
 8006c18:	6804      	ldr	r4, [r0, #0]
 8006c1a:	4294      	cmp	r4, r2
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	d95c      	bls.n	8006cda <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c20:	493a      	ldr	r1, [pc, #232]	@ (8006d0c <HAL_DMA_Init+0xfc>)
 8006c22:	4a3b      	ldr	r2, [pc, #236]	@ (8006d10 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8006c24:	483b      	ldr	r0, [pc, #236]	@ (8006d14 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006c26:	4421      	add	r1, r4
 8006c28:	fba2 2101 	umull	r2, r1, r2, r1
 8006c2c:	0909      	lsrs	r1, r1, #4
 8006c2e:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c30:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006c32:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006c34:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8006c38:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006c3a:	4e35      	ldr	r6, [pc, #212]	@ (8006d10 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c3c:	4f36      	ldr	r7, [pc, #216]	@ (8006d18 <HAL_DMA_Init+0x108>)
 8006c3e:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c42:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8006c44:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006c46:	4302      	orrs	r2, r0
 8006c48:	6958      	ldr	r0, [r3, #20]
 8006c4a:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006c4c:	6998      	ldr	r0, [r3, #24]
 8006c4e:	4302      	orrs	r2, r0
 8006c50:	69d8      	ldr	r0, [r3, #28]
 8006c52:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006c54:	b2e0      	uxtb	r0, r4
 8006c56:	3808      	subs	r0, #8
 8006c58:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 8006c5c:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c5e:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c62:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006c64:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006c68:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8006c6a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8006c6e:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c70:	4e25      	ldr	r6, [pc, #148]	@ (8006d08 <HAL_DMA_Init+0xf8>)
 8006c72:	4a2a      	ldr	r2, [pc, #168]	@ (8006d1c <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c74:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006c78:	42b4      	cmp	r4, r6
 8006c7a:	bf98      	it	ls
 8006c7c:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c7e:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c82:	2401      	movs	r4, #1
 8006c84:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006c88:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c8a:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006c8e:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006c92:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006c94:	649e      	str	r6, [r3, #72]	@ 0x48
 8006c96:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006c9a:	d027      	beq.n	8006cec <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006c9c:	685e      	ldr	r6, [r3, #4]
 8006c9e:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006ca0:	3e01      	subs	r6, #1
 8006ca2:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006ca4:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006ca8:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006cac:	d824      	bhi.n	8006cf8 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cae:	4a1c      	ldr	r2, [pc, #112]	@ (8006d20 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cb0:	481c      	ldr	r0, [pc, #112]	@ (8006d24 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006cb2:	442a      	add	r2, r5
 8006cb4:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006cb6:	3d01      	subs	r5, #1
 8006cb8:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cba:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006cbc:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006cc0:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006cc2:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cc4:	4a18      	ldr	r2, [pc, #96]	@ (8006d28 <HAL_DMA_Init+0x118>)
 8006cc6:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006cc8:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006cca:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ccc:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006cce:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8006cd2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8006cd6:	bcf0      	pop	{r4, r5, r6, r7}
 8006cd8:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006cda:	4914      	ldr	r1, [pc, #80]	@ (8006d2c <HAL_DMA_Init+0x11c>)
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8006d10 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8006cde:	4814      	ldr	r0, [pc, #80]	@ (8006d30 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006ce0:	4421      	add	r1, r4
 8006ce2:	fba2 2101 	umull	r2, r1, r2, r1
 8006ce6:	0909      	lsrs	r1, r1, #4
 8006ce8:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8006cea:	e7a1      	b.n	8006c30 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006cec:	2400      	movs	r4, #0
 8006cee:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006cf0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cf4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006cfe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006d00:	e7e2      	b.n	8006cc8 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 8006d02:	2001      	movs	r0, #1
}
 8006d04:	4770      	bx	lr
 8006d06:	bf00      	nop
 8006d08:	40020407 	.word	0x40020407
 8006d0c:	bffdfbf8 	.word	0xbffdfbf8
 8006d10:	cccccccd 	.word	0xcccccccd
 8006d14:	40020400 	.word	0x40020400
 8006d18:	40020800 	.word	0x40020800
 8006d1c:	40020820 	.word	0x40020820
 8006d20:	1000823f 	.word	0x1000823f
 8006d24:	40020940 	.word	0x40020940
 8006d28:	40020900 	.word	0x40020900
 8006d2c:	bffdfff8 	.word	0xbffdfff8
 8006d30:	40020000 	.word	0x40020000

08006d34 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 8006d34:	2800      	cmp	r0, #0
 8006d36:	d05f      	beq.n	8006df8 <HAL_DMA_DeInit+0xc4>
  __HAL_DMA_DISABLE(hdma);
 8006d38:	6802      	ldr	r2, [r0, #0]
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	6811      	ldr	r1, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d3e:	482f      	ldr	r0, [pc, #188]	@ (8006dfc <HAL_DMA_DeInit+0xc8>)
  __HAL_DMA_DISABLE(hdma);
 8006d40:	f021 0101 	bic.w	r1, r1, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d44:	4282      	cmp	r2, r0
{
 8006d46:	b430      	push	{r4, r5}
  __HAL_DMA_DISABLE(hdma);
 8006d48:	6011      	str	r1, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d4a:	d942      	bls.n	8006dd2 <HAL_DMA_DeInit+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006d4c:	492c      	ldr	r1, [pc, #176]	@ (8006e00 <HAL_DMA_DeInit+0xcc>)
 8006d4e:	482d      	ldr	r0, [pc, #180]	@ (8006e04 <HAL_DMA_DeInit+0xd0>)
    hdma->DmaBaseAddress = DMA2;
 8006d50:	4c2d      	ldr	r4, [pc, #180]	@ (8006e08 <HAL_DMA_DeInit+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006d52:	4411      	add	r1, r2
 8006d54:	fba0 0101 	umull	r0, r1, r0, r1
 8006d58:	0909      	lsrs	r1, r1, #4
 8006d5a:	0089      	lsls	r1, r1, #2
  hdma->Instance->CCR  = 0;
 8006d5c:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA2;
 8006d5e:	e9c3 4110 	strd	r4, r1, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d62:	f001 051f 	and.w	r5, r1, #31
  hdma->Instance->CCR  = 0;
 8006d66:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006d68:	2001      	movs	r0, #1
 8006d6a:	40a8      	lsls	r0, r5
 8006d6c:	6060      	str	r0, [r4, #4]
 8006d6e:	4827      	ldr	r0, [pc, #156]	@ (8006e0c <HAL_DMA_DeInit+0xd8>)
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d70:	4d27      	ldr	r5, [pc, #156]	@ (8006e10 <HAL_DMA_DeInit+0xdc>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006d72:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8006d76:	4401      	add	r1, r0
 8006d78:	6499      	str	r1, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006d7a:	4926      	ldr	r1, [pc, #152]	@ (8006e14 <HAL_DMA_DeInit+0xe0>)
 8006d7c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006d7e:	b2d2      	uxtb	r2, r2
 8006d80:	4920      	ldr	r1, [pc, #128]	@ (8006e04 <HAL_DMA_DeInit+0xd0>)
 8006d82:	3a08      	subs	r2, #8
 8006d84:	fba1 1202 	umull	r1, r2, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d88:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8006d8c:	2101      	movs	r1, #1
 8006d8e:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DMAmuxChannel->CCR = 0;
 8006d92:	2400      	movs	r4, #0
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006d94:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel->CCR = 0;
 8006d96:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006d9a:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006d9e:	6858      	ldr	r0, [r3, #4]
 8006da0:	1e42      	subs	r2, r0, #1
 8006da2:	2a03      	cmp	r2, #3
 8006da4:	d806      	bhi.n	8006db4 <HAL_DMA_DeInit+0x80>
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006da6:	4091      	lsls	r1, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006da8:	4a1b      	ldr	r2, [pc, #108]	@ (8006e18 <HAL_DMA_DeInit+0xe4>)
 8006daa:	4402      	add	r2, r0
 8006dac:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006dae:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006db0:	f8c5 1144 	str.w	r1, [r5, #324]	@ 0x144
  hdma->DMAmuxRequestGen = 0U;
 8006db4:	2000      	movs	r0, #0
 8006db6:	e9c3 0015 	strd	r0, r0, [r3, #84]	@ 0x54
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006dba:	63d8      	str	r0, [r3, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 8006dbc:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8006dc0:	f883 0025 	strb.w	r0, [r3, #37]	@ 0x25
}
 8006dc4:	bc30      	pop	{r4, r5}
  hdma->XferHalfCpltCallback = NULL;
 8006dc6:	e9c3 000b 	strd	r0, r0, [r3, #44]	@ 0x2c
  hdma->XferAbortCallback = NULL;
 8006dca:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006dce:	65d8      	str	r0, [r3, #92]	@ 0x5c
}
 8006dd0:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006dd2:	4912      	ldr	r1, [pc, #72]	@ (8006e1c <HAL_DMA_DeInit+0xe8>)
 8006dd4:	480b      	ldr	r0, [pc, #44]	@ (8006e04 <HAL_DMA_DeInit+0xd0>)
    hdma->DmaBaseAddress = DMA1;
 8006dd6:	4c12      	ldr	r4, [pc, #72]	@ (8006e20 <HAL_DMA_DeInit+0xec>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006dd8:	4411      	add	r1, r2
 8006dda:	fba0 0101 	umull	r0, r1, r0, r1
 8006dde:	0909      	lsrs	r1, r1, #4
 8006de0:	0089      	lsls	r1, r1, #2
  hdma->Instance->CCR  = 0;
 8006de2:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA1;
 8006de4:	e9c3 4110 	strd	r4, r1, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006de8:	f001 051f 	and.w	r5, r1, #31
  hdma->Instance->CCR  = 0;
 8006dec:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006dee:	2001      	movs	r0, #1
 8006df0:	40a8      	lsls	r0, r5
 8006df2:	6060      	str	r0, [r4, #4]
 8006df4:	4806      	ldr	r0, [pc, #24]	@ (8006e10 <HAL_DMA_DeInit+0xdc>)
 8006df6:	e7bb      	b.n	8006d70 <HAL_DMA_DeInit+0x3c>
    return HAL_ERROR;
 8006df8:	2001      	movs	r0, #1
}
 8006dfa:	4770      	bx	lr
 8006dfc:	40020407 	.word	0x40020407
 8006e00:	bffdfbf8 	.word	0xbffdfbf8
 8006e04:	cccccccd 	.word	0xcccccccd
 8006e08:	40020400 	.word	0x40020400
 8006e0c:	40020820 	.word	0x40020820
 8006e10:	40020800 	.word	0x40020800
 8006e14:	40020880 	.word	0x40020880
 8006e18:	1000823f 	.word	0x1000823f
 8006e1c:	bffdfff8 	.word	0xbffdfff8
 8006e20:	40020000 	.word	0x40020000

08006e24 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8006e24:	2800      	cmp	r0, #0
 8006e26:	f000 80d9 	beq.w	8006fdc <HAL_FDCAN_Init+0x1b8>
{
 8006e2a:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8006e2c:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006e30:	4604      	mov	r4, r0
 8006e32:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d071      	beq.n	8006f1e <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8006e3a:	6822      	ldr	r2, [r4, #0]
 8006e3c:	6993      	ldr	r3, [r2, #24]
 8006e3e:	f023 0310 	bic.w	r3, r3, #16
 8006e42:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e44:	f7fe fdbc 	bl	80059c0 <HAL_GetTick>
 8006e48:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e4a:	e004      	b.n	8006e56 <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e4c:	f7fe fdb8 	bl	80059c0 <HAL_GetTick>
 8006e50:	1b40      	subs	r0, r0, r5
 8006e52:	280a      	cmp	r0, #10
 8006e54:	d85a      	bhi.n	8006f0c <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	0711      	lsls	r1, r2, #28
 8006e5c:	d4f6      	bmi.n	8006e4c <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	f042 0201 	orr.w	r2, r2, #1
 8006e64:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006e66:	f7fe fdab 	bl	80059c0 <HAL_GetTick>
 8006e6a:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e6c:	e004      	b.n	8006e78 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006e6e:	f7fe fda7 	bl	80059c0 <HAL_GetTick>
 8006e72:	1b40      	subs	r0, r0, r5
 8006e74:	280a      	cmp	r0, #10
 8006e76:	d849      	bhi.n	8006f0c <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	699a      	ldr	r2, [r3, #24]
 8006e7c:	07d2      	lsls	r2, r2, #31
 8006e7e:	d5f6      	bpl.n	8006e6e <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e80:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8006e82:	4959      	ldr	r1, [pc, #356]	@ (8006fe8 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e84:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8006e88:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006e8a:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006e8c:	f000 80a1 	beq.w	8006fd2 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006e90:	7c22      	ldrb	r2, [r4, #16]
 8006e92:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e94:	699a      	ldr	r2, [r3, #24]
 8006e96:	bf0c      	ite	eq
 8006e98:	f022 0240 	biceq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006e9c:	f042 0240 	orrne.w	r2, r2, #64	@ 0x40
 8006ea0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006ea2:	7c62      	ldrb	r2, [r4, #17]
 8006ea4:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006ea6:	699a      	ldr	r2, [r3, #24]
 8006ea8:	bf0c      	ite	eq
 8006eaa:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006eae:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
 8006eb2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006eb4:	7ca2      	ldrb	r2, [r4, #18]
 8006eb6:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006eb8:	699a      	ldr	r2, [r3, #24]
 8006eba:	bf0c      	ite	eq
 8006ebc:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006ec0:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
 8006ec4:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ec6:	699a      	ldr	r2, [r3, #24]
 8006ec8:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006eca:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006ecc:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006ed0:	4302      	orrs	r2, r0
 8006ed2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006ed4:	699a      	ldr	r2, [r3, #24]
 8006ed6:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006eda:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006edc:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ede:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ee0:	f022 0210 	bic.w	r2, r2, #16
 8006ee4:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006ee6:	d01f      	beq.n	8006f28 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006ee8:	b311      	cbz	r1, 8006f30 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006eea:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006eec:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006eee:	d077      	beq.n	8006fe0 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006ef0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ef4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006ef6:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006ef8:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006efa:	f042 0210 	orr.w	r2, r2, #16
 8006efe:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006f00:	d116      	bne.n	8006f30 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006f02:	699a      	ldr	r2, [r3, #24]
 8006f04:	f042 0220 	orr.w	r2, r2, #32
 8006f08:	619a      	str	r2, [r3, #24]
 8006f0a:	e011      	b.n	8006f30 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f0c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f0e:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006f10:	f043 0301 	orr.w	r3, r3, #1
 8006f14:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006f16:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8006f1a:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 8006f1e:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 8006f22:	f7fe f983 	bl	800522c <HAL_FDCAN_MspInit>
 8006f26:	e788      	b.n	8006e3a <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006f28:	699a      	ldr	r2, [r3, #24]
 8006f2a:	f042 0204 	orr.w	r2, r2, #4
 8006f2e:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f30:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f34:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f36:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f38:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f3a:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f3e:	6a21      	ldr	r1, [r4, #32]
 8006f40:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006f42:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006f44:	6961      	ldr	r1, [r4, #20]
 8006f46:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f4c:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006f50:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006f52:	d10e      	bne.n	8006f72 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f54:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f58:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f5a:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f5c:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f5e:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f60:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8006f62:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8006f66:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006f68:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006f6a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006f6c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006f70:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f72:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8006f76:	6be0      	ldr	r0, [r4, #60]	@ 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006f78:	6b61      	ldr	r1, [r4, #52]	@ 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006f7a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006f7c:	4302      	orrs	r2, r0
 8006f7e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006f82:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8006f86:	4819      	ldr	r0, [pc, #100]	@ (8006fec <HAL_FDCAN_Init+0x1c8>)
 8006f88:	6420      	str	r0, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006f8a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006f8e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006f92:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006f96:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006f9a:	4915      	ldr	r1, [pc, #84]	@ (8006ff0 <HAL_FDCAN_Init+0x1cc>)
 8006f9c:	6461      	str	r1, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006f9e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8006fa2:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8006fa6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006faa:	4b12      	ldr	r3, [pc, #72]	@ (8006ff4 <HAL_FDCAN_Init+0x1d0>)
 8006fac:	4a12      	ldr	r2, [pc, #72]	@ (8006ff8 <HAL_FDCAN_Init+0x1d4>)
 8006fae:	3140      	adds	r1, #64	@ 0x40
 8006fb0:	e9c4 1312 	strd	r1, r3, [r4, #72]	@ 0x48
 8006fb4:	33f0      	adds	r3, #240	@ 0xf0
 8006fb6:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006fba:	2100      	movs	r1, #0
 8006fbc:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006fc0:	f004 f948 	bl	800b254 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8006fc4:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006fc6:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006fc8:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006fca:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006fce:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8006fd0:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8006fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8006ffc <HAL_FDCAN_Init+0x1d8>)
 8006fd4:	6861      	ldr	r1, [r4, #4]
 8006fd6:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 8006fda:	e759      	b.n	8006e90 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8006fdc:	2001      	movs	r0, #1
}
 8006fde:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006fe0:	f042 0220 	orr.w	r2, r2, #32
 8006fe4:	619a      	str	r2, [r3, #24]
 8006fe6:	e7a3      	b.n	8006f30 <HAL_FDCAN_Init+0x10c>
 8006fe8:	40006400 	.word	0x40006400
 8006fec:	4000a400 	.word	0x4000a400
 8006ff0:	4000a470 	.word	0x4000a470
 8006ff4:	4000a588 	.word	0x4000a588
 8006ff8:	4000a660 	.word	0x4000a660
 8006ffc:	40006000 	.word	0x40006000

08007000 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007000:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007004:	3a01      	subs	r2, #1
 8007006:	2a01      	cmp	r2, #1
{
 8007008:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800700a:	d905      	bls.n	8007018 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800700c:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 800700e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8007012:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007014:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8007016:	4770      	bx	lr
{
 8007018:	b470      	push	{r4, r5, r6}
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800701a:	688a      	ldr	r2, [r1, #8]
                         sFilterConfig->FilterID2);
 800701c:	6948      	ldr	r0, [r1, #20]
                         (sFilterConfig->FilterID1 << 16U)    |
 800701e:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007022:	e9d1 6100 	ldrd	r6, r1, [r1]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007026:	0792      	lsls	r2, r2, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007028:	b956      	cbnz	r6, 8007040 <HAL_FDCAN_ConfigFilter+0x40>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800702a:	ea42 62c5 	orr.w	r2, r2, r5, lsl #27
 800702e:	4302      	orrs	r2, r0
      *FilterAddress = FilterElementW1;
 8007030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007032:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    return HAL_OK;
 8007036:	2000      	movs	r0, #0
}
 8007038:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW1;
 800703a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 800703e:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007042:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
      *FilterAddress = FilterElementW1;
 8007046:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 800704a:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800704e:	4310      	orrs	r0, r2
      *FilterAddress = FilterElementW2;
 8007050:	6058      	str	r0, [r3, #4]
}
 8007052:	bc70      	pop	{r4, r5, r6}
    return HAL_OK;
 8007054:	2000      	movs	r0, #0
}
 8007056:	4770      	bx	lr

08007058 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007058:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 800705c:	2a01      	cmp	r2, #1
{
 800705e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007060:	d005      	beq.n	800706e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007062:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007064:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8007068:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800706a:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800706c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800706e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007070:	2202      	movs	r2, #2
 8007072:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007076:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007078:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800707a:	f022 0201 	bic.w	r2, r2, #1
 800707e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8007080:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007082:	6619      	str	r1, [r3, #96]	@ 0x60
    return HAL_OK;
 8007084:	4770      	bx	lr
 8007086:	bf00      	nop

08007088 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8007088:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800708a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800708e:	2b02      	cmp	r3, #2
{
 8007090:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007092:	d10b      	bne.n	80070ac <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007094:	6805      	ldr	r5, [r0, #0]
 8007096:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 800709a:	f413 1c00 	ands.w	ip, r3, #2097152	@ 0x200000
 800709e:	d00b      	beq.n	80070b8 <HAL_FDCAN_AddMessageToTxFifoQ+0x30>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80070a0:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80070a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80070a6:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 80070a8:	2001      	movs	r0, #1
}
 80070aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80070ac:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 80070ae:	f043 0308 	orr.w	r3, r3, #8
 80070b2:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 80070b4:	2001      	movs	r0, #1
}
 80070b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80070b8:	f8d5 60c4 	ldr.w	r6, [r5, #196]	@ 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80070bc:	684b      	ldr	r3, [r1, #4]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80070be:	690f      	ldr	r7, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80070c0:	6888      	ldr	r0, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 80070c2:	680c      	ldr	r4, [r1, #0]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80070c4:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d137      	bne.n	800713c <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
                   FDCAN_STANDARD_ID |
 80070cc:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80070ce:	ea47 4784 	orr.w	r7, r7, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 80070d2:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 80070d6:	4303      	orrs	r3, r0
 80070d8:	6948      	ldr	r0, [r1, #20]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 80070da:	68cc      	ldr	r4, [r1, #12]
                 pTxHeader->FDFormat |
 80070dc:	4303      	orrs	r3, r0
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80070de:	6a08      	ldr	r0, [r1, #32]
                 pTxHeader->FDFormat |
 80070e0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 80070e4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80070e8:	f8de 0054 	ldr.w	r0, [lr, #84]	@ 0x54
 80070ec:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80070f0:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80070f4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80070f8:	4c13      	ldr	r4, [pc, #76]	@ (8007148 <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
  *TxAddress = TxElementW2;
 80070fa:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80070fc:	68cb      	ldr	r3, [r1, #12]
 80070fe:	5ce3      	ldrb	r3, [r4, r3]
 8007100:	b1a3      	cbz	r3, 800712c <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007102:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007104:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8007106:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007108:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 800710c:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800710e:	433b      	orrs	r3, r7
 8007110:	7857      	ldrb	r7, [r2, #1]
 8007112:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8007116:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 800711a:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800711e:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8007120:	68cb      	ldr	r3, [r1, #12]
 8007122:	5ce3      	ldrb	r3, [r4, r3]
 8007124:	459c      	cmp	ip, r3
 8007126:	f102 0204 	add.w	r2, r2, #4
 800712a:	d3ea      	bcc.n	8007102 <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800712c:	2301      	movs	r3, #1
 800712e:	40b3      	lsls	r3, r6
 8007130:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    return HAL_OK;
 8007134:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007136:	f8ce 3058 	str.w	r3, [lr, #88]	@ 0x58
}
 800713a:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 800713c:	4327      	orrs	r7, r4
 800713e:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007140:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
 8007144:	e7c5      	b.n	80070d2 <HAL_FDCAN_AddMessageToTxFifoQ+0x4a>
 8007146:	bf00      	nop
 8007148:	0800c4bc 	.word	0x0800c4bc

0800714c <HAL_FDCAN_GetRxMessage>:
{
 800714c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007150:	f890 405c 	ldrb.w	r4, [r0, #92]	@ 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8007154:	2c02      	cmp	r4, #2
 8007156:	d10d      	bne.n	8007174 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007158:	2940      	cmp	r1, #64	@ 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800715a:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800715c:	d010      	beq.n	8007180 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800715e:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8007162:	0724      	lsls	r4, r4, #28
 8007164:	d16e      	bne.n	8007244 <HAL_FDCAN_GetRxMessage+0xf8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007166:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800716c:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 800716e:	2001      	movs	r0, #1
}
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007174:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007176:	f043 0308 	orr.w	r3, r3, #8
 800717a:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 800717c:	2001      	movs	r0, #1
 800717e:	e7f7      	b.n	8007170 <HAL_FDCAN_GetRxMessage+0x24>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007180:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8007184:	0726      	lsls	r6, r4, #28
 8007186:	d0ee      	beq.n	8007166 <HAL_FDCAN_GetRxMessage+0x1a>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007188:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 800718c:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007190:	bf18      	it	ne
 8007192:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007196:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800719a:	bf18      	it	ne
 800719c:	f3c4 2440 	ubfxne	r4, r4, #9, #1
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80071a0:	f3c7 2701 	ubfx	r7, r7, #8, #2
 80071a4:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 80071a8:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80071aa:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 80071ae:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80071b2:	6826      	ldr	r6, [r4, #0]
 80071b4:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 80071b8:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80071ba:	2e00      	cmp	r6, #0
 80071bc:	d15d      	bne.n	800727a <HAL_FDCAN_GetRxMessage+0x12e>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80071be:	6826      	ldr	r6, [r4, #0]
 80071c0:	f3c6 468a 	ubfx	r6, r6, #18, #11
 80071c4:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80071c6:	6826      	ldr	r6, [r4, #0]
 80071c8:	f006 5600 	and.w	r6, r6, #536870912	@ 0x20000000
 80071cc:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80071ce:	6826      	ldr	r6, [r4, #0]
 80071d0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80071d4:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80071d6:	88a6      	ldrh	r6, [r4, #4]
 80071d8:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80071da:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 80071de:	f00c 0c0f 	and.w	ip, ip, #15
 80071e2:	f8c2 c00c 	str.w	ip, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80071e6:	6866      	ldr	r6, [r4, #4]
 80071e8:	f406 1680 	and.w	r6, r6, #1048576	@ 0x100000
 80071ec:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80071ee:	6866      	ldr	r6, [r4, #4]
 80071f0:	f406 1600 	and.w	r6, r6, #2097152	@ 0x200000
 80071f4:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80071f6:	79e6      	ldrb	r6, [r4, #7]
 80071f8:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 80071fc:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80071fe:	4e22      	ldr	r6, [pc, #136]	@ (8007288 <HAL_FDCAN_GetRxMessage+0x13c>)
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007200:	6867      	ldr	r7, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007202:	f816 e00c 	ldrb.w	lr, [r6, ip]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007206:	ea4f 7cd7 	mov.w	ip, r7, lsr #31
 800720a:	f8c2 c024 	str.w	ip, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800720e:	f1be 0f00 	cmp.w	lr, #0
 8007212:	d010      	beq.n	8007236 <HAL_FDCAN_GetRxMessage+0xea>
 8007214:	3b01      	subs	r3, #1
 8007216:	f104 0e07 	add.w	lr, r4, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 800721a:	46f4      	mov	ip, lr
 800721c:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
 8007220:	f803 5f01 	strb.w	r5, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8007224:	68d5      	ldr	r5, [r2, #12]
 8007226:	f1ac 0c06 	sub.w	ip, ip, #6
 800722a:	5d75      	ldrb	r5, [r6, r5]
 800722c:	ebac 0c04 	sub.w	ip, ip, r4
 8007230:	4565      	cmp	r5, ip
 8007232:	d8f2      	bhi.n	800721a <HAL_FDCAN_GetRxMessage+0xce>
 8007234:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007236:	2940      	cmp	r1, #64	@ 0x40
 8007238:	d023      	beq.n	8007282 <HAL_FDCAN_GetRxMessage+0x136>
      hfdcan->Instance->RXF1A = GetIndex;
 800723a:	f8c5 809c 	str.w	r8, [r5, #156]	@ 0x9c
    return HAL_OK;
 800723e:	2000      	movs	r0, #0
}
 8007240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007244:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8007248:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800724c:	bf18      	it	ne
 800724e:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007252:	f8d5 7098 	ldr.w	r7, [r5, #152]	@ 0x98
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007256:	bf18      	it	ne
 8007258:	f3c4 2400 	ubfxne	r4, r4, #8, #1
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800725c:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8007260:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007264:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8007266:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 800726a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800726e:	6826      	ldr	r6, [r4, #0]
 8007270:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8007274:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007276:	2e00      	cmp	r6, #0
 8007278:	d0a1      	beq.n	80071be <HAL_FDCAN_GetRxMessage+0x72>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800727a:	6826      	ldr	r6, [r4, #0]
 800727c:	f026 4660 	bic.w	r6, r6, #3758096384	@ 0xe0000000
 8007280:	e7a0      	b.n	80071c4 <HAL_FDCAN_GetRxMessage+0x78>
      hfdcan->Instance->RXF0A = GetIndex;
 8007282:	f8c5 8094 	str.w	r8, [r5, #148]	@ 0x94
 8007286:	e7da      	b.n	800723e <HAL_FDCAN_GetRxMessage+0xf2>
 8007288:	0800c4bc 	.word	0x0800c4bc

0800728c <HAL_FDCAN_GetRxFifoFillLevel>:
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800728c:	6803      	ldr	r3, [r0, #0]
  if (RxFifo == FDCAN_RX_FIFO0)
 800728e:	2940      	cmp	r1, #64	@ 0x40
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8007290:	bf0c      	ite	eq
 8007292:	f8d3 0090 	ldreq.w	r0, [r3, #144]	@ 0x90
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8007296:	f8d3 0098 	ldrne.w	r0, [r3, #152]	@ 0x98
 800729a:	f000 000f 	and.w	r0, r0, #15
}
 800729e:	4770      	bx	lr

080072a0 <HAL_FDCAN_ActivateNotification>:
{
 80072a0:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80072a2:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80072a6:	3801      	subs	r0, #1
 80072a8:	2801      	cmp	r0, #1
 80072aa:	d905      	bls.n	80072b8 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80072ac:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80072ae:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80072b2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80072b4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80072b6:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 80072b8:	681b      	ldr	r3, [r3, #0]
{
 80072ba:	b470      	push	{r4, r5, r6}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80072bc:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 80072c0:	6d98      	ldr	r0, [r3, #88]	@ 0x58
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80072c2:	f001 0438 	and.w	r4, r1, #56	@ 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80072c6:	d009      	beq.n	80072dc <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80072c8:	07c6      	lsls	r6, r0, #31
 80072ca:	d407      	bmi.n	80072dc <HAL_FDCAN_ActivateNotification+0x3c>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80072cc:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 80072ce:	f045 0501 	orr.w	r5, r5, #1
 80072d2:	65dd      	str	r5, [r3, #92]	@ 0x5c
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80072d4:	b154      	cbz	r4, 80072ec <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80072d6:	0784      	lsls	r4, r0, #30
 80072d8:	d42f      	bmi.n	800733a <HAL_FDCAN_ActivateNotification+0x9a>
 80072da:	e007      	b.n	80072ec <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80072dc:	b304      	cbz	r4, 8007320 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80072de:	0786      	lsls	r6, r0, #30
 80072e0:	d41e      	bmi.n	8007320 <HAL_FDCAN_ActivateNotification+0x80>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80072e2:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 80072e4:	f046 0601 	orr.w	r6, r6, #1
 80072e8:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80072ea:	bb25      	cbnz	r5, 8007336 <HAL_FDCAN_ActivateNotification+0x96>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 80072ec:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 80072f0:	d001      	beq.n	80072f6 <HAL_FDCAN_ActivateNotification+0x56>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80072f2:	0746      	lsls	r6, r0, #29
 80072f4:	d421      	bmi.n	800733a <HAL_FDCAN_ActivateNotification+0x9a>
 80072f6:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 80072fa:	d001      	beq.n	8007300 <HAL_FDCAN_ActivateNotification+0x60>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80072fc:	0705      	lsls	r5, r0, #28
 80072fe:	d41c      	bmi.n	800733a <HAL_FDCAN_ActivateNotification+0x9a>
 8007300:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8007304:	d001      	beq.n	800730a <HAL_FDCAN_ActivateNotification+0x6a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8007306:	06c4      	lsls	r4, r0, #27
 8007308:	d417      	bmi.n	800733a <HAL_FDCAN_ActivateNotification+0x9a>
 800730a:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 800730e:	d001      	beq.n	8007314 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8007310:	0686      	lsls	r6, r0, #26
 8007312:	d412      	bmi.n	800733a <HAL_FDCAN_ActivateNotification+0x9a>
 8007314:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 8007318:	d013      	beq.n	8007342 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 800731a:	0645      	lsls	r5, r0, #25
 800731c:	d40d      	bmi.n	800733a <HAL_FDCAN_ActivateNotification+0x9a>
 800731e:	e010      	b.n	8007342 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8007320:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 8007324:	d021      	beq.n	800736a <HAL_FDCAN_ActivateNotification+0xca>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8007326:	0746      	lsls	r6, r0, #29
 8007328:	d41f      	bmi.n	800736a <HAL_FDCAN_ActivateNotification+0xca>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800732a:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 800732c:	f046 0601 	orr.w	r6, r6, #1
 8007330:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007332:	2d00      	cmp	r5, #0
 8007334:	d0ce      	beq.n	80072d4 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007336:	07c5      	lsls	r5, r0, #31
 8007338:	d5cc      	bpl.n	80072d4 <HAL_FDCAN_ActivateNotification+0x34>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800733a:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 800733c:	f040 0002 	orr.w	r0, r0, #2
 8007340:	65d8      	str	r0, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007342:	060c      	lsls	r4, r1, #24
 8007344:	d504      	bpl.n	8007350 <HAL_FDCAN_ActivateNotification+0xb0>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007346:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 800734a:	4310      	orrs	r0, r2
 800734c:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007350:	05c8      	lsls	r0, r1, #23
 8007352:	d504      	bpl.n	800735e <HAL_FDCAN_ActivateNotification+0xbe>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007354:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8007358:	4302      	orrs	r2, r0
 800735a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800735e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007360:	430a      	orrs	r2, r1
    return HAL_OK;
 8007362:	2000      	movs	r0, #0
}
 8007364:	bc70      	pop	{r4, r5, r6}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007366:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8007368:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800736a:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 800736e:	d001      	beq.n	8007374 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007370:	0706      	lsls	r6, r0, #28
 8007372:	d5da      	bpl.n	800732a <HAL_FDCAN_ActivateNotification+0x8a>
 8007374:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8007378:	d001      	beq.n	800737e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800737a:	06c6      	lsls	r6, r0, #27
 800737c:	d5d5      	bpl.n	800732a <HAL_FDCAN_ActivateNotification+0x8a>
 800737e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8007382:	d001      	beq.n	8007388 <HAL_FDCAN_ActivateNotification+0xe8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007384:	0686      	lsls	r6, r0, #26
 8007386:	d5d0      	bpl.n	800732a <HAL_FDCAN_ActivateNotification+0x8a>
 8007388:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 800738c:	d0d1      	beq.n	8007332 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800738e:	0646      	lsls	r6, r0, #25
 8007390:	d5cb      	bpl.n	800732a <HAL_FDCAN_ActivateNotification+0x8a>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007392:	2d00      	cmp	r5, #0
 8007394:	d09e      	beq.n	80072d4 <HAL_FDCAN_ActivateNotification+0x34>
 8007396:	e7ce      	b.n	8007336 <HAL_FDCAN_ActivateNotification+0x96>

08007398 <HAL_FDCAN_TxEventFifoCallback>:
}
 8007398:	4770      	bx	lr
 800739a:	bf00      	nop

0800739c <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 800739c:	4770      	bx	lr
 800739e:	bf00      	nop

080073a0 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop

080073a4 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 80073a4:	4770      	bx	lr
 80073a6:	bf00      	nop

080073a8 <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop

080073ac <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 80073ac:	4770      	bx	lr
 80073ae:	bf00      	nop

080073b0 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop

080073b4 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop

080073b8 <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop

080073bc <HAL_FDCAN_ErrorStatusCallback>:
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop

080073c0 <HAL_FDCAN_IRQHandler>:
{
 80073c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80073c4:	6803      	ldr	r3, [r0, #0]
 80073c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 80073c8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80073ca:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80073ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 80073d0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80073d2:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80073d6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073d8:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80073da:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073dc:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 80073e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80073e2:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 80073e4:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 80073e6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 80073e8:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 80073ec:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 80073ee:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80073f0:	0669      	lsls	r1, r5, #25
{
 80073f2:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80073f4:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 80073f8:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 80073fc:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 8007400:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007404:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8007408:	d502      	bpl.n	8007410 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800740a:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 800740e:	d172      	bne.n	80074f6 <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8007410:	05ea      	lsls	r2, r5, #23
 8007412:	d502      	bpl.n	800741a <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8007414:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8007418:	d15d      	bne.n	80074d6 <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 800741a:	f1ba 0f00 	cmp.w	sl, #0
 800741e:	d14a      	bne.n	80074b6 <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	d135      	bne.n	8007492 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8007426:	f1b8 0f00 	cmp.w	r8, #0
 800742a:	d13c      	bne.n	80074a6 <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800742c:	05ab      	lsls	r3, r5, #22
 800742e:	d502      	bpl.n	8007436 <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8007430:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8007434:	d174      	bne.n	8007520 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8007436:	0628      	lsls	r0, r5, #24
 8007438:	d502      	bpl.n	8007440 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 800743a:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 800743e:	d177      	bne.n	8007530 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8007440:	04a9      	lsls	r1, r5, #18
 8007442:	d502      	bpl.n	800744a <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8007444:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 8007448:	d15a      	bne.n	8007500 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800744a:	042a      	lsls	r2, r5, #16
 800744c:	d502      	bpl.n	8007454 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800744e:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 8007452:	d15d      	bne.n	8007510 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007454:	046b      	lsls	r3, r5, #17
 8007456:	d50a      	bpl.n	800746e <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007458:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 800745c:	d007      	beq.n	800746e <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007464:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007466:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007468:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800746c:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 800746e:	b94f      	cbnz	r7, 8007484 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8007470:	b126      	cbz	r6, 800747c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 8007476:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007478:	4333      	orrs	r3, r6
 800747a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800747c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800747e:	bb2b      	cbnz	r3, 80074cc <HAL_FDCAN_IRQHandler+0x10c>
}
 8007480:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007484:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007486:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007488:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800748a:	4620      	mov	r0, r4
 800748c:	f7ff ff96 	bl	80073bc <HAL_FDCAN_ErrorStatusCallback>
 8007490:	e7ee      	b.n	8007470 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007492:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007494:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007496:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800749a:	4620      	mov	r0, r4
 800749c:	f7fa fcdc 	bl	8001e58 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 80074a0:	f1b8 0f00 	cmp.w	r8, #0
 80074a4:	d0c2      	beq.n	800742c <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074a6:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80074a8:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80074aa:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80074ae:	4620      	mov	r0, r4
 80074b0:	f7ff ff74 	bl	800739c <HAL_FDCAN_RxFifo1Callback>
 80074b4:	e7ba      	b.n	800742c <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80074b6:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074b8:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80074ba:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80074be:	4620      	mov	r0, r4
 80074c0:	f7ff ff6a 	bl	8007398 <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 80074c4:	f1b9 0f00 	cmp.w	r9, #0
 80074c8:	d0ad      	beq.n	8007426 <HAL_FDCAN_IRQHandler+0x66>
 80074ca:	e7e2      	b.n	8007492 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 80074cc:	4620      	mov	r0, r4
 80074ce:	f7ff ff73 	bl	80073b8 <HAL_FDCAN_ErrorCallback>
}
 80074d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80074dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80074e0:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80074e4:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80074e6:	4011      	ands	r1, r2
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff ff5d 	bl	80073a8 <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 80074ee:	f1ba 0f00 	cmp.w	sl, #0
 80074f2:	d095      	beq.n	8007420 <HAL_FDCAN_IRQHandler+0x60>
 80074f4:	e7df      	b.n	80074b6 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80074f6:	2240      	movs	r2, #64	@ 0x40
 80074f8:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80074fa:	f7ff ff5b 	bl	80073b4 <HAL_FDCAN_HighPriorityMessageCallback>
 80074fe:	e787      	b.n	8007410 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007500:	6823      	ldr	r3, [r4, #0]
 8007502:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8007506:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007508:	4620      	mov	r0, r4
 800750a:	f7ff ff4f 	bl	80073ac <HAL_FDCAN_TimestampWraparoundCallback>
 800750e:	e79c      	b.n	800744a <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8007516:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007518:	4620      	mov	r0, r4
 800751a:	f7ff ff49 	bl	80073b0 <HAL_FDCAN_TimeoutOccurredCallback>
 800751e:	e799      	b.n	8007454 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007526:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007528:	4620      	mov	r0, r4
 800752a:	f7ff ff39 	bl	80073a0 <HAL_FDCAN_TxFifoEmptyCallback>
 800752e:	e782      	b.n	8007436 <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007530:	6823      	ldr	r3, [r4, #0]
 8007532:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007536:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800753a:	2080      	movs	r0, #128	@ 0x80
 800753c:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800753e:	4011      	ands	r1, r2
 8007540:	4620      	mov	r0, r4
 8007542:	f7ff ff2f 	bl	80073a4 <HAL_FDCAN_TxBufferCompleteCallback>
 8007546:	e77b      	b.n	8007440 <HAL_FDCAN_IRQHandler+0x80>

08007548 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007548:	680b      	ldr	r3, [r1, #0]
 800754a:	2b00      	cmp	r3, #0
 800754c:	f000 8198 	beq.w	8007880 <HAL_GPIO_Init+0x338>
{
 8007550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007554:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8007558:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 800755a:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800755e:	f04f 0b01 	mov.w	fp, #1
 8007562:	f000 810d 	beq.w	8007780 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007566:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 80078b4 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800756a:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 800756c:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800756e:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8007572:	ea1c 0a03 	ands.w	sl, ip, r3
 8007576:	d077      	beq.n	8007668 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007578:	684d      	ldr	r5, [r1, #4]
 800757a:	f005 0703 	and.w	r7, r5, #3
 800757e:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007580:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007582:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007586:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800758a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800758e:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007592:	f240 8119 	bls.w	80077c8 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007596:	2f03      	cmp	r7, #3
 8007598:	f040 8179 	bne.w	800788e <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800759c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 80075a0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80075a2:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80075a4:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075a6:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80075aa:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80075ac:	d05c      	beq.n	8007668 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80075ae:	4ebe      	ldr	r6, [pc, #760]	@ (80078a8 <HAL_GPIO_Init+0x360>)
 80075b0:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 80075b2:	f044 0401 	orr.w	r4, r4, #1
 80075b6:	6634      	str	r4, [r6, #96]	@ 0x60
 80075b8:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 80075ba:	f004 0401 	and.w	r4, r4, #1
 80075be:	9403      	str	r4, [sp, #12]
 80075c0:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80075c2:	f022 0403 	bic.w	r4, r2, #3
 80075c6:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075ca:	f002 0703 	and.w	r7, r2, #3
 80075ce:	230f      	movs	r3, #15
 80075d0:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 80075d4:	00bf      	lsls	r7, r7, #2
 80075d6:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075da:	4bb4      	ldr	r3, [pc, #720]	@ (80078ac <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 80075dc:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075de:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80075e0:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075e4:	f000 8140 	beq.w	8007868 <HAL_GPIO_Init+0x320>
 80075e8:	4bb1      	ldr	r3, [pc, #708]	@ (80078b0 <HAL_GPIO_Init+0x368>)
 80075ea:	4298      	cmp	r0, r3
 80075ec:	f000 812d 	beq.w	800784a <HAL_GPIO_Init+0x302>
 80075f0:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 80078b8 <HAL_GPIO_Init+0x370>
 80075f4:	4560      	cmp	r0, ip
 80075f6:	f000 813d 	beq.w	8007874 <HAL_GPIO_Init+0x32c>
 80075fa:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 80078bc <HAL_GPIO_Init+0x374>
 80075fe:	4560      	cmp	r0, ip
 8007600:	f000 813f 	beq.w	8007882 <HAL_GPIO_Init+0x33a>
 8007604:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 80078c0 <HAL_GPIO_Init+0x378>
 8007608:	4560      	cmp	r0, ip
 800760a:	bf0c      	ite	eq
 800760c:	f04f 0c05 	moveq.w	ip, #5
 8007610:	f04f 0c06 	movne.w	ip, #6
 8007614:	fa0c f707 	lsl.w	r7, ip, r7
 8007618:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800761a:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 800761c:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8007620:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007624:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8007626:	bf54      	ite	pl
 8007628:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800762a:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 800762e:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8007632:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007636:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8007638:	bf54      	ite	pl
 800763a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800763c:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8007640:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8007644:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007648:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 800764a:	bf54      	ite	pl
 800764c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800764e:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8007652:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007656:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800765a:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 800765c:	bf54      	ite	pl
 800765e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007660:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8007664:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007668:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 800766a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 800766c:	fa33 f402 	lsrs.w	r4, r3, r2
 8007670:	f47f af7c 	bne.w	800756c <HAL_GPIO_Init+0x24>
  }
}
 8007674:	b005      	add	sp, #20
 8007676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 800767a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800767e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007680:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007684:	fa06 f807 	lsl.w	r8, r6, r7
 8007688:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800768c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007690:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007694:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007698:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 800769c:	fa0e fe02 	lsl.w	lr, lr, r2
 80076a0:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 80076a4:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 80076a8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076ac:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076ae:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80076b2:	fa06 fe07 	lsl.w	lr, r6, r7
 80076b6:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076ba:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 80076bc:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80076c0:	d119      	bne.n	80076f6 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 80076c2:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076c6:	690e      	ldr	r6, [r1, #16]
 80076c8:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076cc:	f002 0807 	and.w	r8, r2, #7
 80076d0:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 80076d4:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076d8:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 80076dc:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076e0:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076e2:	260f      	movs	r6, #15
 80076e4:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076e8:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80076ea:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80076ee:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 80076f2:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076f6:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 80076f8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80076fa:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076fe:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007700:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8007704:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007706:	d036      	beq.n	8007776 <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007708:	4f67      	ldr	r7, [pc, #412]	@ (80078a8 <HAL_GPIO_Init+0x360>)
 800770a:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 800770c:	f044 0401 	orr.w	r4, r4, #1
 8007710:	663c      	str	r4, [r7, #96]	@ 0x60
 8007712:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007714:	f004 0401 	and.w	r4, r4, #1
 8007718:	9403      	str	r4, [sp, #12]
 800771a:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800771c:	f022 0403 	bic.w	r4, r2, #3
 8007720:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007724:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007728:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800772c:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007730:	260f      	movs	r6, #15
 8007732:	00bf      	lsls	r7, r7, #2
 8007734:	fa06 f707 	lsl.w	r7, r6, r7
 8007738:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800773c:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 800773e:	4c5d      	ldr	r4, [pc, #372]	@ (80078b4 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007740:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8007742:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8007744:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007748:	d47c      	bmi.n	8007844 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 800774a:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 800774c:	4e59      	ldr	r6, [pc, #356]	@ (80078b4 <HAL_GPIO_Init+0x36c>)
 800774e:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8007750:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007752:	02ae      	lsls	r6, r5, #10
 8007754:	f100 8085 	bmi.w	8007862 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 8007758:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 800775a:	4e56      	ldr	r6, [pc, #344]	@ (80078b4 <HAL_GPIO_Init+0x36c>)
 800775c:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 800775e:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007760:	03ae      	lsls	r6, r5, #14
 8007762:	d47b      	bmi.n	800785c <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8007764:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8007766:	4e53      	ldr	r6, [pc, #332]	@ (80078b4 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007768:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 800776a:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 800776c:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800776e:	d472      	bmi.n	8007856 <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8007770:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8007772:	4d50      	ldr	r5, [pc, #320]	@ (80078b4 <HAL_GPIO_Init+0x36c>)
 8007774:	602c      	str	r4, [r5, #0]
    position++;
 8007776:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007778:	fa33 f402 	lsrs.w	r4, r3, r2
 800777c:	f43f af7a 	beq.w	8007674 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007780:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8007784:	ea13 0c0e 	ands.w	ip, r3, lr
 8007788:	d0f5      	beq.n	8007776 <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800778a:	684d      	ldr	r5, [r1, #4]
 800778c:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800778e:	2603      	movs	r6, #3
 8007790:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007794:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007798:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800779c:	f104 38ff 	add.w	r8, r4, #4294967295
 80077a0:	f1b8 0f01 	cmp.w	r8, #1
 80077a4:	f67f af69 	bls.w	800767a <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80077a8:	2c03      	cmp	r4, #3
 80077aa:	d0a4      	beq.n	80076f6 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 80077ac:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077b0:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 80077b2:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077b6:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80077ba:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077be:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 80077c2:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80077c6:	e796      	b.n	80076f6 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 80077c8:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077cc:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80077ce:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 80077d2:	fa03 f804 	lsl.w	r8, r3, r4
 80077d6:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 80077da:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 80077de:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077e2:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80077e4:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80077e8:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 80077ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80077f0:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 80077f4:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 80077f8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80077fc:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007800:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007804:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007808:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 800780a:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800780e:	f47f aec5 	bne.w	800759c <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007812:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007814:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007818:	f002 0c07 	and.w	ip, r2, #7
 800781c:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8007820:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007824:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8007828:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800782c:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800782e:	230f      	movs	r3, #15
 8007830:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007834:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007836:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800783a:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 800783e:	f8c8 c020 	str.w	ip, [r8, #32]
 8007842:	e6ab      	b.n	800759c <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8007844:	ea44 040c 	orr.w	r4, r4, ip
 8007848:	e780      	b.n	800774c <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800784a:	f04f 0c02 	mov.w	ip, #2
 800784e:	fa0c f707 	lsl.w	r7, ip, r7
 8007852:	433e      	orrs	r6, r7
 8007854:	e6e1      	b.n	800761a <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8007856:	ea4c 0404 	orr.w	r4, ip, r4
 800785a:	e78a      	b.n	8007772 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 800785c:	ea44 040c 	orr.w	r4, r4, ip
 8007860:	e781      	b.n	8007766 <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8007862:	ea4c 0404 	orr.w	r4, ip, r4
 8007866:	e778      	b.n	800775a <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007868:	f04f 0c01 	mov.w	ip, #1
 800786c:	fa0c f707 	lsl.w	r7, ip, r7
 8007870:	433e      	orrs	r6, r7
 8007872:	e6d2      	b.n	800761a <HAL_GPIO_Init+0xd2>
 8007874:	f04f 0c03 	mov.w	ip, #3
 8007878:	fa0c f707 	lsl.w	r7, ip, r7
 800787c:	433e      	orrs	r6, r7
 800787e:	e6cc      	b.n	800761a <HAL_GPIO_Init+0xd2>
 8007880:	4770      	bx	lr
 8007882:	f04f 0c04 	mov.w	ip, #4
 8007886:	fa0c f707 	lsl.w	r7, ip, r7
 800788a:	433e      	orrs	r6, r7
 800788c:	e6c5      	b.n	800761a <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 800788e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007892:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007894:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007898:	fa03 fc04 	lsl.w	ip, r3, r4
 800789c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 80078a0:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80078a4:	e67a      	b.n	800759c <HAL_GPIO_Init+0x54>
 80078a6:	bf00      	nop
 80078a8:	40021000 	.word	0x40021000
 80078ac:	48000400 	.word	0x48000400
 80078b0:	48000800 	.word	0x48000800
 80078b4:	40010400 	.word	0x40010400
 80078b8:	48000c00 	.word	0x48000c00
 80078bc:	48001000 	.word	0x48001000
 80078c0:	48001400 	.word	0x48001400

080078c4 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 80078c4:	2900      	cmp	r1, #0
 80078c6:	f000 80e5 	beq.w	8007a94 <HAL_GPIO_DeInit+0x1d0>
 80078ca:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
{
 80078ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80078d2:	f04f 0300 	mov.w	r3, #0
 80078d6:	d07e      	beq.n	80079d6 <HAL_GPIO_DeInit+0x112>
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80078d8:	4e6f      	ldr	r6, [pc, #444]	@ (8007a98 <HAL_GPIO_DeInit+0x1d4>)
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80078da:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80078de:	f04f 0a03 	mov.w	sl, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 80078e2:	2201      	movs	r2, #1
 80078e4:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 80078e6:	ea12 0e01 	ands.w	lr, r2, r1
 80078ea:	d05f      	beq.n	80079ac <HAL_GPIO_DeInit+0xe8>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80078ec:	f023 0403 	bic.w	r4, r3, #3
 80078f0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80078f4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80078f8:	4f68      	ldr	r7, [pc, #416]	@ (8007a9c <HAL_GPIO_DeInit+0x1d8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 80078fa:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80078fe:	f003 0503 	and.w	r5, r3, #3
 8007902:	00ad      	lsls	r5, r5, #2
 8007904:	fa09 f805 	lsl.w	r8, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007908:	42b8      	cmp	r0, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800790a:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800790e:	d013      	beq.n	8007938 <HAL_GPIO_DeInit+0x74>
 8007910:	4f63      	ldr	r7, [pc, #396]	@ (8007aa0 <HAL_GPIO_DeInit+0x1dc>)
 8007912:	42b8      	cmp	r0, r7
 8007914:	d055      	beq.n	80079c2 <HAL_GPIO_DeInit+0xfe>
 8007916:	4f63      	ldr	r7, [pc, #396]	@ (8007aa4 <HAL_GPIO_DeInit+0x1e0>)
 8007918:	42b8      	cmp	r0, r7
 800791a:	d057      	beq.n	80079cc <HAL_GPIO_DeInit+0x108>
 800791c:	4f62      	ldr	r7, [pc, #392]	@ (8007aa8 <HAL_GPIO_DeInit+0x1e4>)
 800791e:	42b8      	cmp	r0, r7
 8007920:	d04a      	beq.n	80079b8 <HAL_GPIO_DeInit+0xf4>
 8007922:	f8df b188 	ldr.w	fp, [pc, #392]	@ 8007aac <HAL_GPIO_DeInit+0x1e8>
 8007926:	4558      	cmp	r0, fp
 8007928:	bf0c      	ite	eq
 800792a:	f04f 0b05 	moveq.w	fp, #5
 800792e:	f04f 0b06 	movne.w	fp, #6
 8007932:	fa0b f505 	lsl.w	r5, fp, r5
 8007936:	e002      	b.n	800793e <HAL_GPIO_DeInit+0x7a>
 8007938:	2701      	movs	r7, #1
 800793a:	fa07 f505 	lsl.w	r5, r7, r5
 800793e:	45ac      	cmp	ip, r5
 8007940:	d113      	bne.n	800796a <HAL_GPIO_DeInit+0xa6>
        EXTI->IMR1 &= ~(iocurrent);
 8007942:	6835      	ldr	r5, [r6, #0]
 8007944:	ea25 050e 	bic.w	r5, r5, lr
 8007948:	6035      	str	r5, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800794a:	6875      	ldr	r5, [r6, #4]
 800794c:	ea25 050e 	bic.w	r5, r5, lr
 8007950:	6075      	str	r5, [r6, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8007952:	68f5      	ldr	r5, [r6, #12]
 8007954:	ea25 050e 	bic.w	r5, r5, lr
 8007958:	60f5      	str	r5, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800795a:	68b5      	ldr	r5, [r6, #8]
 800795c:	ea25 050e 	bic.w	r5, r5, lr
 8007960:	60b5      	str	r5, [r6, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007962:	68a5      	ldr	r5, [r4, #8]
 8007964:	ea25 0508 	bic.w	r5, r5, r8
 8007968:	60a5      	str	r5, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800796a:	6804      	ldr	r4, [r0, #0]
 800796c:	005d      	lsls	r5, r3, #1
 800796e:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007972:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007976:	432c      	orrs	r4, r5
 8007978:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 800797c:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800797e:	f003 0407 	and.w	r4, r3, #7
 8007982:	f8dc e020 	ldr.w	lr, [ip, #32]
 8007986:	00a4      	lsls	r4, r4, #2
 8007988:	fa09 f404 	lsl.w	r4, r9, r4
 800798c:	ea2e 0404 	bic.w	r4, lr, r4
 8007990:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007994:	68c4      	ldr	r4, [r0, #12]
 8007996:	ea24 0405 	bic.w	r4, r4, r5
 800799a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800799c:	6844      	ldr	r4, [r0, #4]
 800799e:	ea24 0202 	bic.w	r2, r4, r2
 80079a2:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80079a4:	6882      	ldr	r2, [r0, #8]
 80079a6:	ea22 0205 	bic.w	r2, r2, r5
 80079aa:	6082      	str	r2, [r0, #8]
    }

    position++;
 80079ac:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 80079ae:	fa31 f203 	lsrs.w	r2, r1, r3
 80079b2:	d196      	bne.n	80078e2 <HAL_GPIO_DeInit+0x1e>
  }
}
 80079b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80079b8:	f04f 0b04 	mov.w	fp, #4
 80079bc:	fa0b f505 	lsl.w	r5, fp, r5
 80079c0:	e7bd      	b.n	800793e <HAL_GPIO_DeInit+0x7a>
 80079c2:	f04f 0b02 	mov.w	fp, #2
 80079c6:	fa0b f505 	lsl.w	r5, fp, r5
 80079ca:	e7b8      	b.n	800793e <HAL_GPIO_DeInit+0x7a>
 80079cc:	f04f 0b03 	mov.w	fp, #3
 80079d0:	fa0b f505 	lsl.w	r5, fp, r5
 80079d4:	e7b3      	b.n	800793e <HAL_GPIO_DeInit+0x7a>
        EXTI->IMR1 &= ~(iocurrent);
 80079d6:	4e30      	ldr	r6, [pc, #192]	@ (8007a98 <HAL_GPIO_DeInit+0x1d4>)
    iocurrent = (GPIO_Pin) & (1UL << position);
 80079d8:	2701      	movs	r7, #1
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079da:	250f      	movs	r5, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80079dc:	f04f 0c03 	mov.w	ip, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 80079e0:	f023 0203 	bic.w	r2, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079e4:	f003 0403 	and.w	r4, r3, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 80079e8:	fa07 fe03 	lsl.w	lr, r7, r3
    if (iocurrent != 0x00u)
 80079ec:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079f0:	00a4      	lsls	r4, r4, #2
    if (iocurrent != 0x00u)
 80079f2:	ea11 080e 	ands.w	r8, r1, lr
 80079f6:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079fa:	fa05 f404 	lsl.w	r4, r5, r4
    if (iocurrent != 0x00u)
 80079fe:	d043      	beq.n	8007a88 <HAL_GPIO_DeInit+0x1c4>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007a00:	f8d2 9008 	ldr.w	r9, [r2, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007a04:	ea14 0f09 	tst.w	r4, r9
 8007a08:	d11c      	bne.n	8007a44 <HAL_GPIO_DeInit+0x180>
        EXTI->IMR1 &= ~(iocurrent);
 8007a0a:	f8d6 9000 	ldr.w	r9, [r6]
 8007a0e:	ea29 0908 	bic.w	r9, r9, r8
 8007a12:	f8c6 9000 	str.w	r9, [r6]
        EXTI->EMR1 &= ~(iocurrent);
 8007a16:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007a1a:	ea29 0908 	bic.w	r9, r9, r8
 8007a1e:	f8c6 9004 	str.w	r9, [r6, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8007a22:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8007a26:	ea29 0908 	bic.w	r9, r9, r8
 8007a2a:	f8c6 900c 	str.w	r9, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007a2e:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8007a32:	ea29 0808 	bic.w	r8, r9, r8
 8007a36:	f8c6 8008 	str.w	r8, [r6, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007a3a:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8007a3e:	ea28 0404 	bic.w	r4, r8, r4
 8007a42:	6094      	str	r4, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a44:	6802      	ldr	r2, [r0, #0]
 8007a46:	ea4f 0843 	mov.w	r8, r3, lsl #1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a4a:	08dc      	lsrs	r4, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007a4c:	fa0c f808 	lsl.w	r8, ip, r8
 8007a50:	00a4      	lsls	r4, r4, #2
 8007a52:	ea42 0208 	orr.w	r2, r2, r8
 8007a56:	f104 4490 	add.w	r4, r4, #1207959552	@ 0x48000000
 8007a5a:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007a5c:	f003 0207 	and.w	r2, r3, #7
 8007a60:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8007a64:	0092      	lsls	r2, r2, #2
 8007a66:	fa05 f202 	lsl.w	r2, r5, r2
 8007a6a:	ea29 0202 	bic.w	r2, r9, r2
 8007a6e:	6222      	str	r2, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007a70:	68c2      	ldr	r2, [r0, #12]
 8007a72:	ea22 0208 	bic.w	r2, r2, r8
 8007a76:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8007a78:	6842      	ldr	r2, [r0, #4]
 8007a7a:	ea22 020e 	bic.w	r2, r2, lr
 8007a7e:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007a80:	6882      	ldr	r2, [r0, #8]
 8007a82:	ea22 0208 	bic.w	r2, r2, r8
 8007a86:	6082      	str	r2, [r0, #8]
    position++;
 8007a88:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8007a8a:	fa31 f203 	lsrs.w	r2, r1, r3
 8007a8e:	d1a7      	bne.n	80079e0 <HAL_GPIO_DeInit+0x11c>
}
 8007a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a94:	4770      	bx	lr
 8007a96:	bf00      	nop
 8007a98:	40010400 	.word	0x40010400
 8007a9c:	48000400 	.word	0x48000400
 8007aa0:	48000800 	.word	0x48000800
 8007aa4:	48000c00 	.word	0x48000c00
 8007aa8:	48001000 	.word	0x48001000
 8007aac:	48001400 	.word	0x48001400

08007ab0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007ab0:	b10a      	cbz	r2, 8007ab6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007ab2:	6181      	str	r1, [r0, #24]
 8007ab4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007ab6:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop

08007abc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007abc:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007abe:	ea01 0203 	and.w	r2, r1, r3
 8007ac2:	ea21 0103 	bic.w	r1, r1, r3
 8007ac6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007aca:	6181      	str	r1, [r0, #24]
}
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop

08007ad0 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	d06f      	beq.n	8007bb4 <HAL_OPAMP_Init+0xe4>
{
 8007ad4:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007ad6:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007ada:	2b05      	cmp	r3, #5
{
 8007adc:	b083      	sub	sp, #12
 8007ade:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007ae0:	d056      	beq.n	8007b90 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007ae2:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d052      	beq.n	8007b90 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007aea:	4b33      	ldr	r3, [pc, #204]	@ (8007bb8 <HAL_OPAMP_Init+0xe8>)
 8007aec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007aee:	f042 0201 	orr.w	r2, r2, #1
 8007af2:	661a      	str	r2, [r3, #96]	@ 0x60
 8007af4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007af6:	f003 0301 	and.w	r3, r3, #1
 8007afa:	9301      	str	r3, [sp, #4]
 8007afc:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007afe:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007b02:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007b06:	b90b      	cbnz	r3, 8007b0c <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007b08:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f7fd fbff 	bl	8005310 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007b12:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007b14:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007b16:	f023 0220 	bic.w	r2, r3, #32
 8007b1a:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8007b1c:	6822      	ldr	r2, [r4, #0]
 8007b1e:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007b20:	d039      	beq.n	8007b96 <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007b22:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007b24:	f021 0110 	bic.w	r1, r1, #16
 8007b28:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007b2a:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8007b2c:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007b2e:	432b      	orrs	r3, r5
 8007b30:	4303      	orrs	r3, r0
 8007b32:	6920      	ldr	r0, [r4, #16]
 8007b34:	6811      	ldr	r1, [r2, #0]
 8007b36:	4303      	orrs	r3, r0
 8007b38:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007b3a:	4303      	orrs	r3, r0
 8007b3c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007b3e:	4303      	orrs	r3, r0
 8007b40:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007b42:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8007b46:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007b48:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007b4c:	481b      	ldr	r0, [pc, #108]	@ (8007bbc <HAL_OPAMP_Init+0xec>)
 8007b4e:	4008      	ands	r0, r1
 8007b50:	7d21      	ldrb	r1, [r4, #20]
 8007b52:	f1a1 0101 	sub.w	r1, r1, #1
 8007b56:	fab1 f181 	clz	r1, r1
 8007b5a:	4303      	orrs	r3, r0
 8007b5c:	0949      	lsrs	r1, r1, #5
 8007b5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007b62:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007b64:	6993      	ldr	r3, [r2, #24]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	db09      	blt.n	8007b7e <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007b6a:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8007b6e:	6991      	ldr	r1, [r2, #24]
 8007b70:	4303      	orrs	r3, r0
 8007b72:	6a20      	ldr	r0, [r4, #32]
 8007b74:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007b78:	4303      	orrs	r3, r0
 8007b7a:	430b      	orrs	r3, r1
 8007b7c:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007b7e:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8007b82:	b913      	cbnz	r3, 8007b8a <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007b8a:	2000      	movs	r0, #0
  }
}
 8007b8c:	b003      	add	sp, #12
 8007b8e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007b90:	2001      	movs	r0, #1
}
 8007b92:	b003      	add	sp, #12
 8007b94:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8007b96:	f021 0110 	bic.w	r1, r1, #16
 8007b9a:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007b9c:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007b9e:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007ba0:	4303      	orrs	r3, r0
 8007ba2:	6920      	ldr	r0, [r4, #16]
 8007ba4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007ba6:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007ba8:	4303      	orrs	r3, r0
 8007baa:	430b      	orrs	r3, r1
 8007bac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007bae:	6811      	ldr	r1, [r2, #0]
 8007bb0:	432b      	orrs	r3, r5
 8007bb2:	e7c6      	b.n	8007b42 <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8007bb4:	2001      	movs	r0, #1
}
 8007bb6:	4770      	bx	lr
 8007bb8:	40021000 	.word	0x40021000
 8007bbc:	e0003e11 	.word	0xe0003e11

08007bc0 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bc0:	4a35      	ldr	r2, [pc, #212]	@ (8007c98 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007bc2:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007bc4:	b960      	cbnz	r0, 8007be0 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bc6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bce:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bd2:	d01b      	beq.n	8007c0c <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bd4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bd8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007bdc:	2000      	movs	r0, #0
}
 8007bde:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007be0:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007be4:	d006      	beq.n	8007bf4 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007be6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007bee:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007bf0:	2000      	movs	r0, #0
}
 8007bf2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007bf4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007bf8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007bfc:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007c00:	d029      	beq.n	8007c56 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007c0a:	e7f1      	b.n	8007bf0 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c10:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c14:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c16:	4821      	ldr	r0, [pc, #132]	@ (8007c9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007c18:	4921      	ldr	r1, [pc, #132]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c1a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c1e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c22:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c24:	6803      	ldr	r3, [r0, #0]
 8007c26:	2032      	movs	r0, #50	@ 0x32
 8007c28:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c2c:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c2e:	fba1 1303 	umull	r1, r3, r1, r3
 8007c32:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c34:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c36:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c3a:	d506      	bpl.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007c3c:	e000      	b.n	8007c40 <HAL_PWREx_ControlVoltageScaling+0x80>
 8007c3e:	b123      	cbz	r3, 8007c4a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007c40:	6951      	ldr	r1, [r2, #20]
 8007c42:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007c44:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c48:	d4f9      	bmi.n	8007c3e <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007c4a:	4b13      	ldr	r3, [pc, #76]	@ (8007c98 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007c4c:	695b      	ldr	r3, [r3, #20]
 8007c4e:	055b      	lsls	r3, r3, #21
 8007c50:	d5ce      	bpl.n	8007bf0 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8007c52:	2003      	movs	r0, #3
 8007c54:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007c56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c5a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c5e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c60:	480e      	ldr	r0, [pc, #56]	@ (8007c9c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007c62:	490f      	ldr	r1, [pc, #60]	@ (8007ca0 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007c64:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007c68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c6c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c6e:	6803      	ldr	r3, [r0, #0]
 8007c70:	2032      	movs	r0, #50	@ 0x32
 8007c72:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c76:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c78:	fba1 1303 	umull	r1, r3, r1, r3
 8007c7c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c7e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007c80:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c84:	d5e1      	bpl.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007c86:	e001      	b.n	8007c8c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d0de      	beq.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007c8c:	6951      	ldr	r1, [r2, #20]
 8007c8e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007c90:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007c94:	d5d9      	bpl.n	8007c4a <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007c96:	e7f7      	b.n	8007c88 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8007c98:	40007000 	.word	0x40007000
 8007c9c:	200003d8 	.word	0x200003d8
 8007ca0:	431bde83 	.word	0x431bde83

08007ca4 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007ca4:	4a02      	ldr	r2, [pc, #8]	@ (8007cb0 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8007ca6:	6893      	ldr	r3, [r2, #8]
 8007ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007cac:	6093      	str	r3, [r2, #8]
}
 8007cae:	4770      	bx	lr
 8007cb0:	40007000 	.word	0x40007000

08007cb4 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007cb4:	2800      	cmp	r0, #0
 8007cb6:	f000 81bd 	beq.w	8008034 <HAL_RCC_OscConfig+0x380>
{
 8007cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cbe:	6803      	ldr	r3, [r0, #0]
 8007cc0:	07d9      	lsls	r1, r3, #31
{
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007cc6:	d512      	bpl.n	8007cee <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cc8:	49a6      	ldr	r1, [pc, #664]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007cca:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ccc:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cce:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007cd2:	2a0c      	cmp	r2, #12
 8007cd4:	f000 80d0 	beq.w	8007e78 <HAL_RCC_OscConfig+0x1c4>
 8007cd8:	2a08      	cmp	r2, #8
 8007cda:	f040 80d2 	bne.w	8007e82 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007cde:	4aa1      	ldr	r2, [pc, #644]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007ce0:	6812      	ldr	r2, [r2, #0]
 8007ce2:	0392      	lsls	r2, r2, #14
 8007ce4:	d503      	bpl.n	8007cee <HAL_RCC_OscConfig+0x3a>
 8007ce6:	6862      	ldr	r2, [r4, #4]
 8007ce8:	2a00      	cmp	r2, #0
 8007cea:	f000 8137 	beq.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007cee:	079a      	lsls	r2, r3, #30
 8007cf0:	d522      	bpl.n	8007d38 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cf2:	4a9c      	ldr	r2, [pc, #624]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007cf4:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007cf6:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007cf8:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007cfc:	2b0c      	cmp	r3, #12
 8007cfe:	f000 80f8 	beq.w	8007ef2 <HAL_RCC_OscConfig+0x23e>
 8007d02:	2b04      	cmp	r3, #4
 8007d04:	f040 80fa 	bne.w	8007efc <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007d08:	4b96      	ldr	r3, [pc, #600]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	055b      	lsls	r3, r3, #21
 8007d0e:	d503      	bpl.n	8007d18 <HAL_RCC_OscConfig+0x64>
 8007d10:	68e3      	ldr	r3, [r4, #12]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	f000 8122 	beq.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d18:	4a92      	ldr	r2, [pc, #584]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007d1a:	6920      	ldr	r0, [r4, #16]
 8007d1c:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d1e:	4992      	ldr	r1, [pc, #584]	@ (8007f68 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007d20:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007d24:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007d28:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8007d2a:	6808      	ldr	r0, [r1, #0]
 8007d2c:	f7fd fdfe 	bl	800592c <HAL_InitTick>
 8007d30:	2800      	cmp	r0, #0
 8007d32:	f040 8113 	bne.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d36:	6823      	ldr	r3, [r4, #0]
 8007d38:	071a      	lsls	r2, r3, #28
 8007d3a:	d519      	bpl.n	8007d70 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d3c:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d3e:	4d89      	ldr	r5, [pc, #548]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	f000 80c2 	beq.w	8007eca <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 8007d46:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007d4a:	f043 0301 	orr.w	r3, r3, #1
 8007d4e:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d52:	f7fd fe35 	bl	80059c0 <HAL_GetTick>
 8007d56:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d58:	e005      	b.n	8007d66 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d5a:	f7fd fe31 	bl	80059c0 <HAL_GetTick>
 8007d5e:	1b80      	subs	r0, r0, r6
 8007d60:	2802      	cmp	r0, #2
 8007d62:	f200 8117 	bhi.w	8007f94 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007d66:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007d6a:	079b      	lsls	r3, r3, #30
 8007d6c:	d5f5      	bpl.n	8007d5a <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d6e:	6823      	ldr	r3, [r4, #0]
 8007d70:	075d      	lsls	r5, r3, #29
 8007d72:	d541      	bpl.n	8007df8 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007d74:	4b7b      	ldr	r3, [pc, #492]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007d76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007d78:	00d0      	lsls	r0, r2, #3
 8007d7a:	f100 810f 	bmi.w	8007f9c <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d7e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007d80:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007d84:	659a      	str	r2, [r3, #88]	@ 0x58
 8007d86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007d90:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d92:	4e76      	ldr	r6, [pc, #472]	@ (8007f6c <HAL_RCC_OscConfig+0x2b8>)
 8007d94:	6833      	ldr	r3, [r6, #0]
 8007d96:	05d9      	lsls	r1, r3, #23
 8007d98:	f140 812e 	bpl.w	8007ff8 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d9c:	68a3      	ldr	r3, [r4, #8]
 8007d9e:	2b01      	cmp	r3, #1
 8007da0:	f000 80fe 	beq.w	8007fa0 <HAL_RCC_OscConfig+0x2ec>
 8007da4:	2b05      	cmp	r3, #5
 8007da6:	f000 8184 	beq.w	80080b2 <HAL_RCC_OscConfig+0x3fe>
 8007daa:	4e6e      	ldr	r6, [pc, #440]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007dac:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007db0:	f022 0201 	bic.w	r2, r2, #1
 8007db4:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8007db8:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007dbc:	f022 0204 	bic.w	r2, r2, #4
 8007dc0:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f040 80f2 	bne.w	8007fae <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dca:	f7fd fdf9 	bl	80059c0 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dce:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007dd2:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007dd4:	e005      	b.n	8007de2 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007dd6:	f7fd fdf3 	bl	80059c0 <HAL_GetTick>
 8007dda:	1bc0      	subs	r0, r0, r7
 8007ddc:	4540      	cmp	r0, r8
 8007dde:	f200 80d9 	bhi.w	8007f94 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007de2:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8007de6:	0799      	lsls	r1, r3, #30
 8007de8:	d4f5      	bmi.n	8007dd6 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007dea:	b125      	cbz	r5, 8007df6 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007dec:	4a5d      	ldr	r2, [pc, #372]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007dee:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007df0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007df4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007df6:	6823      	ldr	r3, [r4, #0]
 8007df8:	069a      	lsls	r2, r3, #26
 8007dfa:	d518      	bpl.n	8007e2e <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007dfc:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007dfe:	4d59      	ldr	r5, [pc, #356]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f000 80e5 	beq.w	8007fd0 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 8007e06:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e12:	f7fd fdd5 	bl	80059c0 <HAL_GetTick>
 8007e16:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e18:	e005      	b.n	8007e26 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e1a:	f7fd fdd1 	bl	80059c0 <HAL_GetTick>
 8007e1e:	1b80      	subs	r0, r0, r6
 8007e20:	2802      	cmp	r0, #2
 8007e22:	f200 80b7 	bhi.w	8007f94 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e26:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007e2a:	079b      	lsls	r3, r3, #30
 8007e2c:	d5f5      	bpl.n	8007e1a <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007e2e:	69e3      	ldr	r3, [r4, #28]
 8007e30:	b1f3      	cbz	r3, 8007e70 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007e32:	4d4c      	ldr	r5, [pc, #304]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007e34:	68aa      	ldr	r2, [r5, #8]
 8007e36:	f002 020c 	and.w	r2, r2, #12
 8007e3a:	2a0c      	cmp	r2, #12
 8007e3c:	f000 8147 	beq.w	80080ce <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e40:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e42:	682b      	ldr	r3, [r5, #0]
 8007e44:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007e48:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007e4a:	f000 80f5 	beq.w	8008038 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e4e:	f7fd fdb7 	bl	80059c0 <HAL_GetTick>
 8007e52:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e54:	e005      	b.n	8007e62 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e56:	f7fd fdb3 	bl	80059c0 <HAL_GetTick>
 8007e5a:	1b00      	subs	r0, r0, r4
 8007e5c:	2802      	cmp	r0, #2
 8007e5e:	f200 8099 	bhi.w	8007f94 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e62:	682b      	ldr	r3, [r5, #0]
 8007e64:	019b      	lsls	r3, r3, #6
 8007e66:	d4f6      	bmi.n	8007e56 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8007e68:	68ea      	ldr	r2, [r5, #12]
 8007e6a:	4b41      	ldr	r3, [pc, #260]	@ (8007f70 <HAL_RCC_OscConfig+0x2bc>)
 8007e6c:	4013      	ands	r3, r2
 8007e6e:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8007e70:	2000      	movs	r0, #0
}
 8007e72:	b002      	add	sp, #8
 8007e74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007e78:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007e7c:	2903      	cmp	r1, #3
 8007e7e:	f43f af2e 	beq.w	8007cde <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007e82:	6863      	ldr	r3, [r4, #4]
 8007e84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007e88:	d055      	beq.n	8007f36 <HAL_RCC_OscConfig+0x282>
 8007e8a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007e8e:	f000 80c4 	beq.w	800801a <HAL_RCC_OscConfig+0x366>
 8007e92:	4d34      	ldr	r5, [pc, #208]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007e94:	682a      	ldr	r2, [r5, #0]
 8007e96:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8007e9a:	602a      	str	r2, [r5, #0]
 8007e9c:	682a      	ldr	r2, [r5, #0]
 8007e9e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007ea2:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d14b      	bne.n	8007f40 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8007ea8:	f7fd fd8a 	bl	80059c0 <HAL_GetTick>
 8007eac:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007eae:	e004      	b.n	8007eba <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007eb0:	f7fd fd86 	bl	80059c0 <HAL_GetTick>
 8007eb4:	1b80      	subs	r0, r0, r6
 8007eb6:	2864      	cmp	r0, #100	@ 0x64
 8007eb8:	d86c      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007eba:	682b      	ldr	r3, [r5, #0]
 8007ebc:	0399      	lsls	r1, r3, #14
 8007ebe:	d4f7      	bmi.n	8007eb0 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	079a      	lsls	r2, r3, #30
 8007ec4:	f57f af38 	bpl.w	8007d38 <HAL_RCC_OscConfig+0x84>
 8007ec8:	e713      	b.n	8007cf2 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 8007eca:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007ece:	f023 0301 	bic.w	r3, r3, #1
 8007ed2:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8007ed6:	f7fd fd73 	bl	80059c0 <HAL_GetTick>
 8007eda:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007edc:	e004      	b.n	8007ee8 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ede:	f7fd fd6f 	bl	80059c0 <HAL_GetTick>
 8007ee2:	1b80      	subs	r0, r0, r6
 8007ee4:	2802      	cmp	r0, #2
 8007ee6:	d855      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ee8:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007eec:	079f      	lsls	r7, r3, #30
 8007eee:	d4f6      	bmi.n	8007ede <HAL_RCC_OscConfig+0x22a>
 8007ef0:	e73d      	b.n	8007d6e <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007ef2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007ef6:	2a02      	cmp	r2, #2
 8007ef8:	f43f af06 	beq.w	8007d08 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007efc:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8007efe:	4d19      	ldr	r5, [pc, #100]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d037      	beq.n	8007f74 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8007f04:	682b      	ldr	r3, [r5, #0]
 8007f06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007f0a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f0c:	f7fd fd58 	bl	80059c0 <HAL_GetTick>
 8007f10:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f12:	e004      	b.n	8007f1e <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f14:	f7fd fd54 	bl	80059c0 <HAL_GetTick>
 8007f18:	1b80      	subs	r0, r0, r6
 8007f1a:	2802      	cmp	r0, #2
 8007f1c:	d83a      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f1e:	682b      	ldr	r3, [r5, #0]
 8007f20:	055f      	lsls	r7, r3, #21
 8007f22:	d5f7      	bpl.n	8007f14 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007f24:	686b      	ldr	r3, [r5, #4]
 8007f26:	6922      	ldr	r2, [r4, #16]
 8007f28:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007f2c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8007f30:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007f32:	6823      	ldr	r3, [r4, #0]
 8007f34:	e700      	b.n	8007d38 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007f36:	4a0b      	ldr	r2, [pc, #44]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
 8007f38:	6813      	ldr	r3, [r2, #0]
 8007f3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f3e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007f40:	f7fd fd3e 	bl	80059c0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f44:	4e07      	ldr	r6, [pc, #28]	@ (8007f64 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 8007f46:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f48:	e004      	b.n	8007f54 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007f4a:	f7fd fd39 	bl	80059c0 <HAL_GetTick>
 8007f4e:	1b40      	subs	r0, r0, r5
 8007f50:	2864      	cmp	r0, #100	@ 0x64
 8007f52:	d81f      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007f54:	6833      	ldr	r3, [r6, #0]
 8007f56:	039f      	lsls	r7, r3, #14
 8007f58:	d5f7      	bpl.n	8007f4a <HAL_RCC_OscConfig+0x296>
 8007f5a:	e7b1      	b.n	8007ec0 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 8007f5c:	2001      	movs	r0, #1
}
 8007f5e:	b002      	add	sp, #8
 8007f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f64:	40021000 	.word	0x40021000
 8007f68:	200003e0 	.word	0x200003e0
 8007f6c:	40007000 	.word	0x40007000
 8007f70:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8007f74:	682b      	ldr	r3, [r5, #0]
 8007f76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f7a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007f7c:	f7fd fd20 	bl	80059c0 <HAL_GetTick>
 8007f80:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007f82:	682b      	ldr	r3, [r5, #0]
 8007f84:	0559      	lsls	r1, r3, #21
 8007f86:	f57f aed6 	bpl.w	8007d36 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007f8a:	f7fd fd19 	bl	80059c0 <HAL_GetTick>
 8007f8e:	1b80      	subs	r0, r0, r6
 8007f90:	2802      	cmp	r0, #2
 8007f92:	d9f6      	bls.n	8007f82 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8007f94:	2003      	movs	r0, #3
}
 8007f96:	b002      	add	sp, #8
 8007f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	e6f8      	b.n	8007d92 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007fa0:	4a65      	ldr	r2, [pc, #404]	@ (8008138 <HAL_RCC_OscConfig+0x484>)
 8007fa2:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8007fa6:	f043 0301 	orr.w	r3, r3, #1
 8007faa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8007fae:	f7fd fd07 	bl	80059c0 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fb2:	4f61      	ldr	r7, [pc, #388]	@ (8008138 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8007fb4:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fb6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fba:	e004      	b.n	8007fc6 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007fbc:	f7fd fd00 	bl	80059c0 <HAL_GetTick>
 8007fc0:	1b80      	subs	r0, r0, r6
 8007fc2:	4540      	cmp	r0, r8
 8007fc4:	d8e6      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007fc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fca:	079b      	lsls	r3, r3, #30
 8007fcc:	d5f6      	bpl.n	8007fbc <HAL_RCC_OscConfig+0x308>
 8007fce:	e70c      	b.n	8007dea <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8007fd0:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007fd4:	f023 0301 	bic.w	r3, r3, #1
 8007fd8:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8007fdc:	f7fd fcf0 	bl	80059c0 <HAL_GetTick>
 8007fe0:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fe2:	e004      	b.n	8007fee <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007fe4:	f7fd fcec 	bl	80059c0 <HAL_GetTick>
 8007fe8:	1b80      	subs	r0, r0, r6
 8007fea:	2802      	cmp	r0, #2
 8007fec:	d8d2      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007fee:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007ff2:	079f      	lsls	r7, r3, #30
 8007ff4:	d4f6      	bmi.n	8007fe4 <HAL_RCC_OscConfig+0x330>
 8007ff6:	e71a      	b.n	8007e2e <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007ff8:	6833      	ldr	r3, [r6, #0]
 8007ffa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007ffe:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8008000:	f7fd fcde 	bl	80059c0 <HAL_GetTick>
 8008004:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008006:	6833      	ldr	r3, [r6, #0]
 8008008:	05da      	lsls	r2, r3, #23
 800800a:	f53f aec7 	bmi.w	8007d9c <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800800e:	f7fd fcd7 	bl	80059c0 <HAL_GetTick>
 8008012:	1bc0      	subs	r0, r0, r7
 8008014:	2802      	cmp	r0, #2
 8008016:	d9f6      	bls.n	8008006 <HAL_RCC_OscConfig+0x352>
 8008018:	e7bc      	b.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800801a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800801e:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 8008022:	681a      	ldr	r2, [r3, #0]
 8008024:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8008028:	601a      	str	r2, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8008030:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008032:	e785      	b.n	8007f40 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 8008034:	2001      	movs	r0, #1
}
 8008036:	4770      	bx	lr
        tickstart = HAL_GetTick();
 8008038:	f7fd fcc2 	bl	80059c0 <HAL_GetTick>
 800803c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800803e:	e004      	b.n	800804a <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008040:	f7fd fcbe 	bl	80059c0 <HAL_GetTick>
 8008044:	1b80      	subs	r0, r0, r6
 8008046:	2802      	cmp	r0, #2
 8008048:	d8a4      	bhi.n	8007f94 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	0199      	lsls	r1, r3, #6
 800804e:	d4f7      	bmi.n	8008040 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008050:	68e9      	ldr	r1, [r5, #12]
 8008052:	4b3a      	ldr	r3, [pc, #232]	@ (800813c <HAL_RCC_OscConfig+0x488>)
 8008054:	6a22      	ldr	r2, [r4, #32]
 8008056:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008058:	400b      	ands	r3, r1
 800805a:	4313      	orrs	r3, r2
 800805c:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8008060:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008064:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8008068:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 800806c:	3801      	subs	r0, #1
 800806e:	0849      	lsrs	r1, r1, #1
 8008070:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008074:	3901      	subs	r1, #1
 8008076:	0852      	lsrs	r2, r2, #1
 8008078:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800807c:	3a01      	subs	r2, #1
 800807e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008082:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8008084:	682b      	ldr	r3, [r5, #0]
 8008086:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800808a:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800808c:	68eb      	ldr	r3, [r5, #12]
 800808e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008092:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8008094:	f7fd fc94 	bl	80059c0 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008098:	4d27      	ldr	r5, [pc, #156]	@ (8008138 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 800809a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800809c:	e005      	b.n	80080aa <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800809e:	f7fd fc8f 	bl	80059c0 <HAL_GetTick>
 80080a2:	1b00      	subs	r0, r0, r4
 80080a4:	2802      	cmp	r0, #2
 80080a6:	f63f af75 	bhi.w	8007f94 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80080aa:	682b      	ldr	r3, [r5, #0]
 80080ac:	019a      	lsls	r2, r3, #6
 80080ae:	d5f6      	bpl.n	800809e <HAL_RCC_OscConfig+0x3ea>
 80080b0:	e6de      	b.n	8007e70 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80080b2:	4b21      	ldr	r3, [pc, #132]	@ (8008138 <HAL_RCC_OscConfig+0x484>)
 80080b4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80080b8:	f042 0204 	orr.w	r2, r2, #4
 80080bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 80080c0:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80080c4:	f042 0201 	orr.w	r2, r2, #1
 80080c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80080cc:	e76f      	b.n	8007fae <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80080ce:	2b01      	cmp	r3, #1
 80080d0:	f43f af44 	beq.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 80080d4:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080d6:	6a22      	ldr	r2, [r4, #32]
 80080d8:	f003 0103 	and.w	r1, r3, #3
 80080dc:	4291      	cmp	r1, r2
 80080de:	f47f af3d 	bne.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080e2:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80080e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80080e8:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80080ea:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80080ee:	f47f af35 	bne.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80080f2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80080f4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80080f8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80080fc:	f47f af2e 	bne.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008100:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008102:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8008106:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 800810a:	f47f af27 	bne.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800810e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8008110:	0852      	lsrs	r2, r2, #1
 8008112:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8008116:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008118:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 800811c:	f47f af1e 	bne.w	8007f5c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008120:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8008122:	0852      	lsrs	r2, r2, #1
 8008124:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8008128:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800812a:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 800812e:	bf14      	ite	ne
 8008130:	2001      	movne	r0, #1
 8008132:	2000      	moveq	r0, #0
 8008134:	e69d      	b.n	8007e72 <HAL_RCC_OscConfig+0x1be>
 8008136:	bf00      	nop
 8008138:	40021000 	.word	0x40021000
 800813c:	019f800c 	.word	0x019f800c

08008140 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008140:	4b18      	ldr	r3, [pc, #96]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x64>)
 8008142:	689a      	ldr	r2, [r3, #8]
 8008144:	f002 020c 	and.w	r2, r2, #12
 8008148:	2a04      	cmp	r2, #4
 800814a:	d026      	beq.n	800819a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800814c:	689a      	ldr	r2, [r3, #8]
 800814e:	f002 020c 	and.w	r2, r2, #12
 8008152:	2a08      	cmp	r2, #8
 8008154:	d023      	beq.n	800819e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008156:	689a      	ldr	r2, [r3, #8]
 8008158:	f002 020c 	and.w	r2, r2, #12
 800815c:	2a0c      	cmp	r2, #12
 800815e:	d001      	beq.n	8008164 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8008160:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8008162:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008164:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008166:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008168:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800816a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800816e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008170:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008174:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008178:	bf0c      	ite	eq
 800817a:	4b0b      	ldreq	r3, [pc, #44]	@ (80081a8 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800817c:	4b0b      	ldrne	r3, [pc, #44]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800817e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008180:	fbb3 f3f2 	udiv	r3, r3, r2
 8008184:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <HAL_RCC_GetSysClockFreq+0x64>)
 800818a:	68db      	ldr	r3, [r3, #12]
 800818c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008190:	3301      	adds	r3, #1
 8008192:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8008194:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8008198:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800819a:	4804      	ldr	r0, [pc, #16]	@ (80081ac <HAL_RCC_GetSysClockFreq+0x6c>)
 800819c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800819e:	4802      	ldr	r0, [pc, #8]	@ (80081a8 <HAL_RCC_GetSysClockFreq+0x68>)
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	40021000 	.word	0x40021000
 80081a8:	007a1200 	.word	0x007a1200
 80081ac:	00f42400 	.word	0x00f42400

080081b0 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 80081b0:	2800      	cmp	r0, #0
 80081b2:	f000 80ee 	beq.w	8008392 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081b6:	4a78      	ldr	r2, [pc, #480]	@ (8008398 <HAL_RCC_ClockConfig+0x1e8>)
{
 80081b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80081bc:	6813      	ldr	r3, [r2, #0]
 80081be:	f003 030f 	and.w	r3, r3, #15
 80081c2:	428b      	cmp	r3, r1
 80081c4:	460d      	mov	r5, r1
 80081c6:	4604      	mov	r4, r0
 80081c8:	d20c      	bcs.n	80081e4 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	f023 030f 	bic.w	r3, r3, #15
 80081d0:	430b      	orrs	r3, r1
 80081d2:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80081d4:	6813      	ldr	r3, [r2, #0]
 80081d6:	f003 030f 	and.w	r3, r3, #15
 80081da:	428b      	cmp	r3, r1
 80081dc:	d002      	beq.n	80081e4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80081de:	2001      	movs	r0, #1
}
 80081e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80081e4:	6823      	ldr	r3, [r4, #0]
 80081e6:	07df      	lsls	r7, r3, #31
 80081e8:	d569      	bpl.n	80082be <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80081ea:	6867      	ldr	r7, [r4, #4]
 80081ec:	2f03      	cmp	r7, #3
 80081ee:	f000 80a0 	beq.w	8008332 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081f2:	4b6a      	ldr	r3, [pc, #424]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081f4:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80081f6:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80081f8:	f000 8097 	beq.w	800832a <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80081fc:	055b      	lsls	r3, r3, #21
 80081fe:	d5ee      	bpl.n	80081de <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008200:	f7ff ff9e 	bl	8008140 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8008204:	4b66      	ldr	r3, [pc, #408]	@ (80083a0 <HAL_RCC_ClockConfig+0x1f0>)
 8008206:	4298      	cmp	r0, r3
 8008208:	f240 80c0 	bls.w	800838c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800820c:	4a63      	ldr	r2, [pc, #396]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 800820e:	6893      	ldr	r3, [r2, #8]
 8008210:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008214:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008218:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800821a:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800821e:	4e5f      	ldr	r6, [pc, #380]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 8008220:	68b3      	ldr	r3, [r6, #8]
 8008222:	f023 0303 	bic.w	r3, r3, #3
 8008226:	433b      	orrs	r3, r7
 8008228:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800822a:	f7fd fbc9 	bl	80059c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800822e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8008232:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008234:	e004      	b.n	8008240 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008236:	f7fd fbc3 	bl	80059c0 <HAL_GetTick>
 800823a:	1bc0      	subs	r0, r0, r7
 800823c:	4540      	cmp	r0, r8
 800823e:	d871      	bhi.n	8008324 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008240:	68b3      	ldr	r3, [r6, #8]
 8008242:	6862      	ldr	r2, [r4, #4]
 8008244:	f003 030c 	and.w	r3, r3, #12
 8008248:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800824c:	d1f3      	bne.n	8008236 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800824e:	6823      	ldr	r3, [r4, #0]
 8008250:	079f      	lsls	r7, r3, #30
 8008252:	d436      	bmi.n	80082c2 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8008254:	f1b9 0f00 	cmp.w	r9, #0
 8008258:	d003      	beq.n	8008262 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800825a:	68b3      	ldr	r3, [r6, #8]
 800825c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008260:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008262:	4e4d      	ldr	r6, [pc, #308]	@ (8008398 <HAL_RCC_ClockConfig+0x1e8>)
 8008264:	6833      	ldr	r3, [r6, #0]
 8008266:	f003 030f 	and.w	r3, r3, #15
 800826a:	42ab      	cmp	r3, r5
 800826c:	d846      	bhi.n	80082fc <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	075a      	lsls	r2, r3, #29
 8008272:	d506      	bpl.n	8008282 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008274:	4949      	ldr	r1, [pc, #292]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 8008276:	68e0      	ldr	r0, [r4, #12]
 8008278:	688a      	ldr	r2, [r1, #8]
 800827a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800827e:	4302      	orrs	r2, r0
 8008280:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008282:	071b      	lsls	r3, r3, #28
 8008284:	d507      	bpl.n	8008296 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008286:	4a45      	ldr	r2, [pc, #276]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 8008288:	6921      	ldr	r1, [r4, #16]
 800828a:	6893      	ldr	r3, [r2, #8]
 800828c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008290:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008294:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008296:	f7ff ff53 	bl	8008140 <HAL_RCC_GetSysClockFreq>
 800829a:	4a40      	ldr	r2, [pc, #256]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 800829c:	4c41      	ldr	r4, [pc, #260]	@ (80083a4 <HAL_RCC_ClockConfig+0x1f4>)
 800829e:	6892      	ldr	r2, [r2, #8]
 80082a0:	4941      	ldr	r1, [pc, #260]	@ (80083a8 <HAL_RCC_ClockConfig+0x1f8>)
 80082a2:	f3c2 1203 	ubfx	r2, r2, #4, #4
 80082a6:	4603      	mov	r3, r0
 80082a8:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 80082aa:	4840      	ldr	r0, [pc, #256]	@ (80083ac <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80082ac:	f002 021f 	and.w	r2, r2, #31
 80082b0:	40d3      	lsrs	r3, r2
 80082b2:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 80082b4:	6800      	ldr	r0, [r0, #0]
}
 80082b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 80082ba:	f7fd bb37 	b.w	800592c <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082be:	079e      	lsls	r6, r3, #30
 80082c0:	d5cf      	bpl.n	8008262 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80082c2:	0758      	lsls	r0, r3, #29
 80082c4:	d504      	bpl.n	80082d0 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80082c6:	4935      	ldr	r1, [pc, #212]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 80082c8:	688a      	ldr	r2, [r1, #8]
 80082ca:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 80082ce:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082d0:	0719      	lsls	r1, r3, #28
 80082d2:	d506      	bpl.n	80082e2 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80082d4:	4a31      	ldr	r2, [pc, #196]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 80082d6:	6893      	ldr	r3, [r2, #8]
 80082d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80082dc:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80082e0:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082e2:	4a2e      	ldr	r2, [pc, #184]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 80082e4:	68a1      	ldr	r1, [r4, #8]
 80082e6:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082e8:	4e2b      	ldr	r6, [pc, #172]	@ (8008398 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ea:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80082ee:	430b      	orrs	r3, r1
 80082f0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80082f2:	6833      	ldr	r3, [r6, #0]
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	42ab      	cmp	r3, r5
 80082fa:	d9b8      	bls.n	800826e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80082fc:	6833      	ldr	r3, [r6, #0]
 80082fe:	f023 030f 	bic.w	r3, r3, #15
 8008302:	432b      	orrs	r3, r5
 8008304:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8008306:	f7fd fb5b 	bl	80059c0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800830a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800830e:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008310:	6833      	ldr	r3, [r6, #0]
 8008312:	f003 030f 	and.w	r3, r3, #15
 8008316:	42ab      	cmp	r3, r5
 8008318:	d0a9      	beq.n	800826e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800831a:	f7fd fb51 	bl	80059c0 <HAL_GetTick>
 800831e:	1bc0      	subs	r0, r0, r7
 8008320:	4540      	cmp	r0, r8
 8008322:	d9f5      	bls.n	8008310 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8008324:	2003      	movs	r0, #3
}
 8008326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800832a:	039a      	lsls	r2, r3, #14
 800832c:	f53f af68 	bmi.w	8008200 <HAL_RCC_ClockConfig+0x50>
 8008330:	e755      	b.n	80081de <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008332:	4a1a      	ldr	r2, [pc, #104]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
 8008334:	6811      	ldr	r1, [r2, #0]
 8008336:	0188      	lsls	r0, r1, #6
 8008338:	f57f af51 	bpl.w	80081de <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800833c:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800833e:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008340:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8008342:	4e17      	ldr	r6, [pc, #92]	@ (80083a0 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008344:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8008348:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800834a:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800834e:	bf0c      	ite	eq
 8008350:	4817      	ldreq	r0, [pc, #92]	@ (80083b0 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008352:	4818      	ldrne	r0, [pc, #96]	@ (80083b4 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008354:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008356:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800835a:	4810      	ldr	r0, [pc, #64]	@ (800839c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800835c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008360:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008364:	68c1      	ldr	r1, [r0, #12]
 8008366:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800836a:	3101      	adds	r1, #1
 800836c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800836e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8008372:	42b2      	cmp	r2, r6
 8008374:	d90a      	bls.n	800838c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008376:	6882      	ldr	r2, [r0, #8]
 8008378:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 800837c:	f43f af46 	beq.w	800820c <HAL_RCC_ClockConfig+0x5c>
 8008380:	0799      	lsls	r1, r3, #30
 8008382:	d503      	bpl.n	800838c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008384:	68a3      	ldr	r3, [r4, #8]
 8008386:	2b00      	cmp	r3, #0
 8008388:	f43f af40 	beq.w	800820c <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800838c:	f04f 0900 	mov.w	r9, #0
 8008390:	e745      	b.n	800821e <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8008392:	2001      	movs	r0, #1
}
 8008394:	4770      	bx	lr
 8008396:	bf00      	nop
 8008398:	40022000 	.word	0x40022000
 800839c:	40021000 	.word	0x40021000
 80083a0:	04c4b400 	.word	0x04c4b400
 80083a4:	0800c4ac 	.word	0x0800c4ac
 80083a8:	200003d8 	.word	0x200003d8
 80083ac:	200003e0 	.word	0x200003e0
 80083b0:	007a1200 	.word	0x007a1200
 80083b4:	00f42400 	.word	0x00f42400

080083b8 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 80083b8:	4b01      	ldr	r3, [pc, #4]	@ (80083c0 <HAL_RCC_GetHCLKFreq+0x8>)
}
 80083ba:	6818      	ldr	r0, [r3, #0]
 80083bc:	4770      	bx	lr
 80083be:	bf00      	nop
 80083c0:	200003d8 	.word	0x200003d8

080083c4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80083c4:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <HAL_RCC_GetPCLK1Freq+0x18>)
 80083c6:	4a06      	ldr	r2, [pc, #24]	@ (80083e0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80083c8:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80083ca:	4906      	ldr	r1, [pc, #24]	@ (80083e4 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80083cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80083d0:	6808      	ldr	r0, [r1, #0]
 80083d2:	5cd3      	ldrb	r3, [r2, r3]
 80083d4:	f003 031f 	and.w	r3, r3, #31
}
 80083d8:	40d8      	lsrs	r0, r3
 80083da:	4770      	bx	lr
 80083dc:	40021000 	.word	0x40021000
 80083e0:	0800c4a4 	.word	0x0800c4a4
 80083e4:	200003d8 	.word	0x200003d8

080083e8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80083e8:	4b05      	ldr	r3, [pc, #20]	@ (8008400 <HAL_RCC_GetPCLK2Freq+0x18>)
 80083ea:	4a06      	ldr	r2, [pc, #24]	@ (8008404 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80083ec:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 80083ee:	4906      	ldr	r1, [pc, #24]	@ (8008408 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80083f0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80083f4:	6808      	ldr	r0, [r1, #0]
 80083f6:	5cd3      	ldrb	r3, [r2, r3]
 80083f8:	f003 031f 	and.w	r3, r3, #31
}
 80083fc:	40d8      	lsrs	r0, r3
 80083fe:	4770      	bx	lr
 8008400:	40021000 	.word	0x40021000
 8008404:	0800c4a4 	.word	0x0800c4a4
 8008408:	200003d8 	.word	0x200003d8

0800840c <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 800840c:	4a02      	ldr	r2, [pc, #8]	@ (8008418 <HAL_RCC_EnableCSS+0xc>)
 800840e:	6813      	ldr	r3, [r2, #0]
 8008410:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008414:	6013      	str	r3, [r2, #0]
}
 8008416:	4770      	bx	lr
 8008418:	40021000 	.word	0x40021000

0800841c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800841c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008420:	6803      	ldr	r3, [r0, #0]
{
 8008422:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008424:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8008428:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800842a:	d041      	beq.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800842c:	4ba0      	ldr	r3, [pc, #640]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800842e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008430:	00d5      	lsls	r5, r2, #3
 8008432:	f140 80f7 	bpl.w	8008624 <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 8008436:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008438:	4d9e      	ldr	r5, [pc, #632]	@ (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008440:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008442:	f7fd fabd 	bl	80059c0 <HAL_GetTick>
 8008446:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008448:	e004      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800844a:	f7fd fab9 	bl	80059c0 <HAL_GetTick>
 800844e:	1b83      	subs	r3, r0, r6
 8008450:	2b02      	cmp	r3, #2
 8008452:	d828      	bhi.n	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008454:	682b      	ldr	r3, [r5, #0]
 8008456:	05d8      	lsls	r0, r3, #23
 8008458:	d5f7      	bpl.n	800844a <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800845a:	4d95      	ldr	r5, [pc, #596]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800845c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800845e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008462:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8008466:	f000 8119 	beq.w	800869c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800846a:	4293      	cmp	r3, r2
 800846c:	f000 8116 	beq.w	800869c <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008470:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008474:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008478:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800847c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008480:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008484:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008488:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800848c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008490:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8008492:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008496:	f140 8101 	bpl.w	800869c <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800849a:	f7fd fa91 	bl	80059c0 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800849e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80084a2:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80084a4:	e0f5      	b.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 80084a6:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084a8:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 80084aa:	2f00      	cmp	r7, #0
 80084ac:	f040 80c5 	bne.w	800863a <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80084b0:	07de      	lsls	r6, r3, #31
 80084b2:	d508      	bpl.n	80084c6 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80084b4:	497e      	ldr	r1, [pc, #504]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80084b6:	6865      	ldr	r5, [r4, #4]
 80084b8:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80084bc:	f022 0203 	bic.w	r2, r2, #3
 80084c0:	432a      	orrs	r2, r5
 80084c2:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80084c6:	079d      	lsls	r5, r3, #30
 80084c8:	d508      	bpl.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80084ca:	4979      	ldr	r1, [pc, #484]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80084cc:	68a5      	ldr	r5, [r4, #8]
 80084ce:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80084d2:	f022 020c 	bic.w	r2, r2, #12
 80084d6:	432a      	orrs	r2, r5
 80084d8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80084dc:	0759      	lsls	r1, r3, #29
 80084de:	d508      	bpl.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084e0:	4973      	ldr	r1, [pc, #460]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80084e2:	68e5      	ldr	r5, [r4, #12]
 80084e4:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80084e8:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 80084ec:	432a      	orrs	r2, r5
 80084ee:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80084f2:	071a      	lsls	r2, r3, #28
 80084f4:	d508      	bpl.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084f6:	496e      	ldr	r1, [pc, #440]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80084f8:	6925      	ldr	r5, [r4, #16]
 80084fa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80084fe:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8008502:	432a      	orrs	r2, r5
 8008504:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008508:	069f      	lsls	r7, r3, #26
 800850a:	d508      	bpl.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800850c:	4968      	ldr	r1, [pc, #416]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800850e:	6965      	ldr	r5, [r4, #20]
 8008510:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008514:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008518:	432a      	orrs	r2, r5
 800851a:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800851e:	065e      	lsls	r6, r3, #25
 8008520:	d508      	bpl.n	8008534 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008522:	4963      	ldr	r1, [pc, #396]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008524:	69a5      	ldr	r5, [r4, #24]
 8008526:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800852a:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800852e:	432a      	orrs	r2, r5
 8008530:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008534:	061d      	lsls	r5, r3, #24
 8008536:	d508      	bpl.n	800854a <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008538:	495d      	ldr	r1, [pc, #372]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800853a:	69e5      	ldr	r5, [r4, #28]
 800853c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008540:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8008544:	432a      	orrs	r2, r5
 8008546:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800854a:	05d9      	lsls	r1, r3, #23
 800854c:	d508      	bpl.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800854e:	4958      	ldr	r1, [pc, #352]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008550:	6a25      	ldr	r5, [r4, #32]
 8008552:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008556:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800855a:	432a      	orrs	r2, r5
 800855c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008560:	059a      	lsls	r2, r3, #22
 8008562:	d508      	bpl.n	8008576 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008564:	4952      	ldr	r1, [pc, #328]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008566:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008568:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800856c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8008570:	432a      	orrs	r2, r5
 8008572:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008576:	055f      	lsls	r7, r3, #21
 8008578:	d50b      	bpl.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800857a:	494d      	ldr	r1, [pc, #308]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800857c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800857e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008582:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8008586:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008588:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800858c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008590:	d059      	beq.n	8008646 <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008592:	051e      	lsls	r6, r3, #20
 8008594:	d50b      	bpl.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008596:	4946      	ldr	r1, [pc, #280]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008598:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800859a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800859e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 80085a2:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80085a4:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80085a8:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80085ac:	d050      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80085ae:	04dd      	lsls	r5, r3, #19
 80085b0:	d50b      	bpl.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085b2:	493f      	ldr	r1, [pc, #252]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80085b4:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80085b6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80085ba:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80085be:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80085c0:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80085c4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80085c8:	d047      	beq.n	800865a <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80085ca:	0499      	lsls	r1, r3, #18
 80085cc:	d50b      	bpl.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085ce:	4938      	ldr	r1, [pc, #224]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80085d0:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 80085d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80085d6:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80085da:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085dc:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80085e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80085e4:	d03e      	beq.n	8008664 <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085e6:	045a      	lsls	r2, r3, #17
 80085e8:	d50b      	bpl.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ea:	4931      	ldr	r1, [pc, #196]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80085ec:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80085ee:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80085f2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80085f6:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80085f8:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085fc:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008600:	d035      	beq.n	800866e <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8008602:	041b      	lsls	r3, r3, #16
 8008604:	d50b      	bpl.n	800861e <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008606:	4a2a      	ldr	r2, [pc, #168]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008608:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 800860a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800860e:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8008612:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8008614:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8008618:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800861c:	d02c      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 800861e:	b002      	add	sp, #8
 8008620:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8008624:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008626:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800862a:	659a      	str	r2, [r3, #88]	@ 0x58
 800862c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800862e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008636:	2701      	movs	r7, #1
 8008638:	e6fe      	b.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 800863a:	491d      	ldr	r1, [pc, #116]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800863c:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 800863e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8008642:	658a      	str	r2, [r1, #88]	@ 0x58
 8008644:	e734      	b.n	80084b0 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008646:	68ca      	ldr	r2, [r1, #12]
 8008648:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800864c:	60ca      	str	r2, [r1, #12]
 800864e:	e7a0      	b.n	8008592 <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008650:	68ca      	ldr	r2, [r1, #12]
 8008652:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008656:	60ca      	str	r2, [r1, #12]
 8008658:	e7a9      	b.n	80085ae <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800865a:	68ca      	ldr	r2, [r1, #12]
 800865c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008660:	60ca      	str	r2, [r1, #12]
 8008662:	e7b2      	b.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008664:	68ca      	ldr	r2, [r1, #12]
 8008666:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800866a:	60ca      	str	r2, [r1, #12]
 800866c:	e7bb      	b.n	80085e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800866e:	68ca      	ldr	r2, [r1, #12]
 8008670:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008674:	60ca      	str	r2, [r1, #12]
 8008676:	e7c4      	b.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008678:	68d3      	ldr	r3, [r2, #12]
 800867a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800867e:	60d3      	str	r3, [r2, #12]
}
 8008680:	b002      	add	sp, #8
 8008682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008686:	f7fd f99b 	bl	80059c0 <HAL_GetTick>
 800868a:	1b80      	subs	r0, r0, r6
 800868c:	4540      	cmp	r0, r8
 800868e:	f63f af0a 	bhi.w	80084a6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008692:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008696:	079b      	lsls	r3, r3, #30
 8008698:	d5f5      	bpl.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800869a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800869c:	4904      	ldr	r1, [pc, #16]	@ (80086b0 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800869e:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 80086a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80086a6:	4313      	orrs	r3, r2
 80086a8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80086ac:	2000      	movs	r0, #0
 80086ae:	e6fb      	b.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 80086b0:	40021000 	.word	0x40021000
 80086b4:	40007000 	.word	0x40007000

080086b8 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086b8:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086ba:	6a02      	ldr	r2, [r0, #32]
 80086bc:	f022 0201 	bic.w	r2, r2, #1
{
 80086c0:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086c2:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086c4:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80086c6:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086c8:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80086ca:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80086ce:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80086d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80086d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 80086d6:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 80086da:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80086dc:	4d13      	ldr	r5, [pc, #76]	@ (800872c <TIM_OC1_SetConfig+0x74>)
 80086de:	42a8      	cmp	r0, r5
 80086e0:	d00f      	beq.n	8008702 <TIM_OC1_SetConfig+0x4a>
 80086e2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80086e6:	42a8      	cmp	r0, r5
 80086e8:	d00b      	beq.n	8008702 <TIM_OC1_SetConfig+0x4a>
 80086ea:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80086ee:	42a8      	cmp	r0, r5
 80086f0:	d007      	beq.n	8008702 <TIM_OC1_SetConfig+0x4a>
 80086f2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086f6:	42a8      	cmp	r0, r5
 80086f8:	d003      	beq.n	8008702 <TIM_OC1_SetConfig+0x4a>
 80086fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80086fe:	42a8      	cmp	r0, r5
 8008700:	d10d      	bne.n	800871e <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008702:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008704:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008708:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800870a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800870e:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008712:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008716:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800871a:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800871e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008720:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008722:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008724:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8008726:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8008728:	6203      	str	r3, [r0, #32]
}
 800872a:	4770      	bx	lr
 800872c:	40012c00 	.word	0x40012c00

08008730 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008730:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008732:	6a02      	ldr	r2, [r0, #32]
 8008734:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8008738:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800873a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800873c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800873e:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008740:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008742:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008746:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 800874a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800874c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800874e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008752:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008756:	4d14      	ldr	r5, [pc, #80]	@ (80087a8 <TIM_OC3_SetConfig+0x78>)
 8008758:	42a8      	cmp	r0, r5
 800875a:	d00f      	beq.n	800877c <TIM_OC3_SetConfig+0x4c>
 800875c:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008760:	42a8      	cmp	r0, r5
 8008762:	d00b      	beq.n	800877c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008764:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008768:	42a8      	cmp	r0, r5
 800876a:	d00e      	beq.n	800878a <TIM_OC3_SetConfig+0x5a>
 800876c:	4d0f      	ldr	r5, [pc, #60]	@ (80087ac <TIM_OC3_SetConfig+0x7c>)
 800876e:	42a8      	cmp	r0, r5
 8008770:	d00b      	beq.n	800878a <TIM_OC3_SetConfig+0x5a>
 8008772:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008776:	42a8      	cmp	r0, r5
 8008778:	d10f      	bne.n	800879a <TIM_OC3_SetConfig+0x6a>
 800877a:	e006      	b.n	800878a <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800877c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 800877e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008782:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008786:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800878a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800878e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008792:	ea46 0c05 	orr.w	ip, r6, r5
 8008796:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800879a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800879c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 800879e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80087a0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 80087a2:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 80087a4:	6203      	str	r3, [r0, #32]
}
 80087a6:	4770      	bx	lr
 80087a8:	40012c00 	.word	0x40012c00
 80087ac:	40014400 	.word	0x40014400

080087b0 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087b0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087b2:	6a02      	ldr	r2, [r0, #32]
 80087b4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 80087b8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ba:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087bc:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087be:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087c0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80087c6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087ca:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087ce:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80087d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087d4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80087d8:	4d14      	ldr	r5, [pc, #80]	@ (800882c <TIM_OC4_SetConfig+0x7c>)
 80087da:	42a8      	cmp	r0, r5
 80087dc:	d00f      	beq.n	80087fe <TIM_OC4_SetConfig+0x4e>
 80087de:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80087e2:	42a8      	cmp	r0, r5
 80087e4:	d00b      	beq.n	80087fe <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087e6:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80087ea:	42a8      	cmp	r0, r5
 80087ec:	d00e      	beq.n	800880c <TIM_OC4_SetConfig+0x5c>
 80087ee:	4d10      	ldr	r5, [pc, #64]	@ (8008830 <TIM_OC4_SetConfig+0x80>)
 80087f0:	42a8      	cmp	r0, r5
 80087f2:	d00b      	beq.n	800880c <TIM_OC4_SetConfig+0x5c>
 80087f4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80087f8:	42a8      	cmp	r0, r5
 80087fa:	d10f      	bne.n	800881c <TIM_OC4_SetConfig+0x6c>
 80087fc:	e006      	b.n	800880c <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80087fe:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008800:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008804:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008808:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800880c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008810:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008814:	ea46 0c05 	orr.w	ip, r6, r5
 8008818:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800881c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 800881e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008820:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008822:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008824:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8008826:	6203      	str	r3, [r0, #32]
}
 8008828:	4770      	bx	lr
 800882a:	bf00      	nop
 800882c:	40012c00 	.word	0x40012c00
 8008830:	40014400 	.word	0x40014400

08008834 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008834:	2800      	cmp	r0, #0
 8008836:	d075      	beq.n	8008924 <HAL_TIM_PWM_Init+0xf0>
{
 8008838:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800883a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800883e:	4604      	mov	r4, r0
 8008840:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008844:	2b00      	cmp	r3, #0
 8008846:	d068      	beq.n	800891a <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008848:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800884a:	4e37      	ldr	r6, [pc, #220]	@ (8008928 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 800884c:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800884e:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008850:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008852:	2202      	movs	r2, #2
 8008854:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008858:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 800885a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800885c:	d04c      	beq.n	80088f8 <HAL_TIM_PWM_Init+0xc4>
 800885e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008862:	d017      	beq.n	8008894 <HAL_TIM_PWM_Init+0x60>
 8008864:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8008868:	42b3      	cmp	r3, r6
 800886a:	d013      	beq.n	8008894 <HAL_TIM_PWM_Init+0x60>
 800886c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008870:	42b3      	cmp	r3, r6
 8008872:	d00f      	beq.n	8008894 <HAL_TIM_PWM_Init+0x60>
 8008874:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8008878:	42b3      	cmp	r3, r6
 800887a:	d03d      	beq.n	80088f8 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800887c:	4e2b      	ldr	r6, [pc, #172]	@ (800892c <HAL_TIM_PWM_Init+0xf8>)
 800887e:	42b3      	cmp	r3, r6
 8008880:	d03e      	beq.n	8008900 <HAL_TIM_PWM_Init+0xcc>
 8008882:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008886:	42b3      	cmp	r3, r6
 8008888:	d03a      	beq.n	8008900 <HAL_TIM_PWM_Init+0xcc>
 800888a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800888e:	42b3      	cmp	r3, r6
 8008890:	d108      	bne.n	80088a4 <HAL_TIM_PWM_Init+0x70>
 8008892:	e035      	b.n	8008900 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8008894:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008896:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800889a:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800889c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 800889e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088a2:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80088a8:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 80088aa:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088ac:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80088ae:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80088b0:	2201      	movs	r2, #1
 80088b2:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088b4:	691a      	ldr	r2, [r3, #16]
 80088b6:	07d2      	lsls	r2, r2, #31
 80088b8:	d503      	bpl.n	80088c2 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088ba:	691a      	ldr	r2, [r3, #16]
 80088bc:	f022 0201 	bic.w	r2, r2, #1
 80088c0:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80088c2:	2301      	movs	r3, #1
 80088c4:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 80088cc:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 80088d0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 80088d4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 80088d8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80088dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80088e0:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 80088e4:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 80088e8:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 80088ec:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 80088f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 80088f4:	2000      	movs	r0, #0
}
 80088f6:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 80088f8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088fa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80088fe:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008900:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008902:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008906:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008908:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800890c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800890e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008910:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008912:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008914:	6962      	ldr	r2, [r4, #20]
 8008916:	631a      	str	r2, [r3, #48]	@ 0x30
 8008918:	e7ca      	b.n	80088b0 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 800891a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 800891e:	f7fc fd6b 	bl	80053f8 <HAL_TIM_PWM_MspInit>
 8008922:	e791      	b.n	8008848 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8008924:	2001      	movs	r0, #1
}
 8008926:	4770      	bx	lr
 8008928:	40012c00 	.word	0x40012c00
 800892c:	40014000 	.word	0x40014000

08008930 <HAL_TIM_Encoder_Init>:
  if (htim == NULL)
 8008930:	2800      	cmp	r0, #0
 8008932:	f000 8099 	beq.w	8008a68 <HAL_TIM_Encoder_Init+0x138>
{
 8008936:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008938:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800893c:	460d      	mov	r5, r1
 800893e:	4604      	mov	r4, r0
 8008940:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008944:	2b00      	cmp	r3, #0
 8008946:	f000 808a 	beq.w	8008a5e <HAL_TIM_Encoder_Init+0x12e>
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800894a:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800894c:	4f47      	ldr	r7, [pc, #284]	@ (8008a6c <HAL_TIM_Encoder_Init+0x13c>)
  TIMx->PSC = Structure->Prescaler;
 800894e:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008950:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008952:	69a6      	ldr	r6, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008954:	2202      	movs	r2, #2
 8008956:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800895a:	689a      	ldr	r2, [r3, #8]
 800895c:	f422 32a0 	bic.w	r2, r2, #81920	@ 0x14000
 8008960:	f022 0207 	bic.w	r2, r2, #7
 8008964:	609a      	str	r2, [r3, #8]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008966:	42bb      	cmp	r3, r7
  tmpcr1 = TIMx->CR1;
 8008968:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800896a:	d067      	beq.n	8008a3c <HAL_TIM_Encoder_Init+0x10c>
 800896c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008970:	d017      	beq.n	80089a2 <HAL_TIM_Encoder_Init+0x72>
 8008972:	f5a7 3794 	sub.w	r7, r7, #75776	@ 0x12800
 8008976:	42bb      	cmp	r3, r7
 8008978:	d013      	beq.n	80089a2 <HAL_TIM_Encoder_Init+0x72>
 800897a:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800897e:	42bb      	cmp	r3, r7
 8008980:	d00f      	beq.n	80089a2 <HAL_TIM_Encoder_Init+0x72>
 8008982:	f507 3796 	add.w	r7, r7, #76800	@ 0x12c00
 8008986:	42bb      	cmp	r3, r7
 8008988:	d058      	beq.n	8008a3c <HAL_TIM_Encoder_Init+0x10c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800898a:	4f39      	ldr	r7, [pc, #228]	@ (8008a70 <HAL_TIM_Encoder_Init+0x140>)
 800898c:	42bb      	cmp	r3, r7
 800898e:	d059      	beq.n	8008a44 <HAL_TIM_Encoder_Init+0x114>
 8008990:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008994:	42bb      	cmp	r3, r7
 8008996:	d055      	beq.n	8008a44 <HAL_TIM_Encoder_Init+0x114>
 8008998:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 800899c:	42bb      	cmp	r3, r7
 800899e:	d108      	bne.n	80089b2 <HAL_TIM_Encoder_Init+0x82>
 80089a0:	e050      	b.n	8008a44 <HAL_TIM_Encoder_Init+0x114>
    tmpcr1 |= Structure->CounterMode;
 80089a2:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80089a4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 80089a8:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089aa:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80089ac:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80089b0:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80089b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80089b6:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 80089b8:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80089ba:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 80089bc:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 80089be:	2201      	movs	r2, #1
 80089c0:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80089c2:	691a      	ldr	r2, [r3, #16]
 80089c4:	07d2      	lsls	r2, r2, #31
 80089c6:	d503      	bpl.n	80089d0 <HAL_TIM_Encoder_Init+0xa0>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80089c8:	691a      	ldr	r2, [r3, #16]
 80089ca:	f022 0201 	bic.w	r2, r2, #1
 80089ce:	611a      	str	r2, [r3, #16]
  tmpsmcr = htim->Instance->SMCR;
 80089d0:	689e      	ldr	r6, [r3, #8]
  tmpccmr1 = htim->Instance->CCMR1;
 80089d2:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089d4:	69a8      	ldr	r0, [r5, #24]
 80089d6:	68a9      	ldr	r1, [r5, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089d8:	6a2f      	ldr	r7, [r5, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80089da:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80089de:	f022 0203 	bic.w	r2, r2, #3
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80089e2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80089e6:	4311      	orrs	r1, r2
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089e8:	692a      	ldr	r2, [r5, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80089ea:	69e8      	ldr	r0, [r5, #28]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089ec:	0112      	lsls	r2, r2, #4
 80089ee:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80089f2:	68e8      	ldr	r0, [r5, #12]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089f4:	f421 417c 	bic.w	r1, r1, #64512	@ 0xfc00
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089f8:	4302      	orrs	r2, r0
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80089fa:	f021 01fc 	bic.w	r1, r1, #252	@ 0xfc
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80089fe:	ea42 3207 	orr.w	r2, r2, r7, lsl #12
  tmpccer = htim->Instance->CCER;
 8008a02:	6a18      	ldr	r0, [r3, #32]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a04:	696f      	ldr	r7, [r5, #20]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8008a06:	430a      	orrs	r2, r1
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a08:	6869      	ldr	r1, [r5, #4]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8008a0a:	f020 00aa 	bic.w	r0, r0, #170	@ 0xaa
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8008a0e:	ea41 1107 	orr.w	r1, r1, r7, lsl #4
 8008a12:	4308      	orrs	r0, r1
  tmpsmcr |= sConfig->EncoderMode;
 8008a14:	6829      	ldr	r1, [r5, #0]
 8008a16:	430e      	orrs	r6, r1
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a18:	2101      	movs	r1, #1
  htim->Instance->SMCR = tmpsmcr;
 8008a1a:	609e      	str	r6, [r3, #8]
  htim->Instance->CCMR1 = tmpccmr1;
 8008a1c:	619a      	str	r2, [r3, #24]
  htim->Instance->CCER = tmpccer;
 8008a1e:	6218      	str	r0, [r3, #32]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008a20:	f884 1048 	strb.w	r1, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a24:	f884 103e 	strb.w	r1, [r4, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a28:	f884 103f 	strb.w	r1, [r4, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008a2c:	f884 1044 	strb.w	r1, [r4, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008a30:	f884 1045 	strb.w	r1, [r4, #69]	@ 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008a34:	f884 103d 	strb.w	r1, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008a38:	2000      	movs	r0, #0
}
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmpcr1 |= Structure->CounterMode;
 8008a3c:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008a3e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008a42:	433a      	orrs	r2, r7
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a44:	6927      	ldr	r7, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008a46:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008a4a:	433a      	orrs	r2, r7
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008a4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008a50:	4332      	orrs	r2, r6
  TIMx->CR1 = tmpcr1;
 8008a52:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008a54:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008a56:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008a58:	6962      	ldr	r2, [r4, #20]
 8008a5a:	631a      	str	r2, [r3, #48]	@ 0x30
 8008a5c:	e7af      	b.n	80089be <HAL_TIM_Encoder_Init+0x8e>
    htim->Lock = HAL_UNLOCKED;
 8008a5e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Encoder_MspInit(htim);
 8008a62:	f7fc fce1 	bl	8005428 <HAL_TIM_Encoder_MspInit>
 8008a66:	e770      	b.n	800894a <HAL_TIM_Encoder_Init+0x1a>
    return HAL_ERROR;
 8008a68:	2001      	movs	r0, #1
}
 8008a6a:	4770      	bx	lr
 8008a6c:	40012c00 	.word	0x40012c00
 8008a70:	40014000 	.word	0x40014000

08008a74 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8008a74:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a76:	6a02      	ldr	r2, [r0, #32]
 8008a78:	f022 0210 	bic.w	r2, r2, #16
{
 8008a7c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a7e:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008a80:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008a82:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a84:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a86:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008a8a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a8e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a92:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008a94:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a98:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a9c:	4d14      	ldr	r5, [pc, #80]	@ (8008af0 <TIM_OC2_SetConfig+0x7c>)
 8008a9e:	42a8      	cmp	r0, r5
 8008aa0:	d00f      	beq.n	8008ac2 <TIM_OC2_SetConfig+0x4e>
 8008aa2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008aa6:	42a8      	cmp	r0, r5
 8008aa8:	d00b      	beq.n	8008ac2 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008aaa:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008aae:	42a8      	cmp	r0, r5
 8008ab0:	d00e      	beq.n	8008ad0 <TIM_OC2_SetConfig+0x5c>
 8008ab2:	4d10      	ldr	r5, [pc, #64]	@ (8008af4 <TIM_OC2_SetConfig+0x80>)
 8008ab4:	42a8      	cmp	r0, r5
 8008ab6:	d00b      	beq.n	8008ad0 <TIM_OC2_SetConfig+0x5c>
 8008ab8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008abc:	42a8      	cmp	r0, r5
 8008abe:	d10f      	bne.n	8008ae0 <TIM_OC2_SetConfig+0x6c>
 8008ac0:	e006      	b.n	8008ad0 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ac2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ac4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ac8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008acc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ad0:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ad4:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ad8:	ea46 0c05 	orr.w	ip, r6, r5
 8008adc:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008ae0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008ae2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008ae4:	6182      	str	r2, [r0, #24]
}
 8008ae6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008ae8:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008aea:	6203      	str	r3, [r0, #32]
}
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	40012c00 	.word	0x40012c00
 8008af4:	40014400 	.word	0x40014400

08008af8 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008af8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	f000 80dc 	beq.w	8008cba <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8008b02:	2301      	movs	r3, #1
{
 8008b04:	b570      	push	{r4, r5, r6, lr}
 8008b06:	4604      	mov	r4, r0
 8008b08:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008b0a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008b0e:	2a14      	cmp	r2, #20
 8008b10:	d80c      	bhi.n	8008b2c <HAL_TIM_PWM_ConfigChannel+0x34>
 8008b12:	e8df f002 	tbb	[pc, r2]
 8008b16:	0b4f      	.short	0x0b4f
 8008b18:	0b630b0b 	.word	0x0b630b0b
 8008b1c:	0b740b0b 	.word	0x0b740b0b
 8008b20:	0b840b0b 	.word	0x0b840b0b
 8008b24:	0b950b0b 	.word	0x0b950b0b
 8008b28:	0b0b      	.short	0x0b0b
 8008b2a:	10          	.byte	0x10
 8008b2b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8008b32:	2001      	movs	r0, #1
}
 8008b34:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008b36:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b38:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008b3a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008b3c:	6a19      	ldr	r1, [r3, #32]
 8008b3e:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8008b42:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008b44:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008b46:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008b48:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8008b4c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b50:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b54:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008b56:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008b5a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b5e:	4e58      	ldr	r6, [pc, #352]	@ (8008cc0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008b60:	42b3      	cmp	r3, r6
 8008b62:	d00f      	beq.n	8008b84 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008b64:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008b68:	42b3      	cmp	r3, r6
 8008b6a:	d00b      	beq.n	8008b84 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008b6c:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008b70:	42b3      	cmp	r3, r6
 8008b72:	d007      	beq.n	8008b84 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008b74:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008b78:	42b3      	cmp	r3, r6
 8008b7a:	d003      	beq.n	8008b84 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008b7c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008b80:	42b3      	cmp	r3, r6
 8008b82:	d104      	bne.n	8008b8e <HAL_TIM_PWM_ConfigChannel+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b84:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008b86:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008b8a:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8e:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008b90:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008b92:	6869      	ldr	r1, [r5, #4]
 8008b94:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b96:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b98:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008b9a:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008b9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008ba0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008ba2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008ba4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008ba8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008baa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008bac:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008bb0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008bb2:	e00e      	b.n	8008bd2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bb4:	6800      	ldr	r0, [r0, #0]
 8008bb6:	f7ff fd7f 	bl	80086b8 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bba:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bbc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bbe:	f043 0308 	orr.w	r3, r3, #8
 8008bc2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bc4:	6983      	ldr	r3, [r0, #24]
 8008bc6:	f023 0304 	bic.w	r3, r3, #4
 8008bca:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bcc:	6983      	ldr	r3, [r0, #24]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008bd2:	2300      	movs	r3, #0
 8008bd4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008bd8:	2000      	movs	r0, #0
}
 8008bda:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bdc:	6800      	ldr	r0, [r0, #0]
 8008bde:	f7ff ff49 	bl	8008a74 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008be2:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008be4:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008be6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008bea:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008bec:	6983      	ldr	r3, [r0, #24]
 8008bee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008bf2:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008bf4:	6983      	ldr	r3, [r0, #24]
 8008bf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008bfa:	6183      	str	r3, [r0, #24]
      break;
 8008bfc:	e7e9      	b.n	8008bd2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008bfe:	6800      	ldr	r0, [r0, #0]
 8008c00:	f7ff fd96 	bl	8008730 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c04:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c06:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c08:	f043 0308 	orr.w	r3, r3, #8
 8008c0c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c0e:	69c3      	ldr	r3, [r0, #28]
 8008c10:	f023 0304 	bic.w	r3, r3, #4
 8008c14:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c16:	69c3      	ldr	r3, [r0, #28]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	61c3      	str	r3, [r0, #28]
      break;
 8008c1c:	e7d9      	b.n	8008bd2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c1e:	6800      	ldr	r0, [r0, #0]
 8008c20:	f7ff fdc6 	bl	80087b0 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c24:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c26:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c28:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008c2c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c2e:	69c3      	ldr	r3, [r0, #28]
 8008c30:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008c34:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c36:	69c3      	ldr	r3, [r0, #28]
 8008c38:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008c3c:	61c3      	str	r3, [r0, #28]
      break;
 8008c3e:	e7c8      	b.n	8008bd2 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008c40:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008c42:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008c44:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c46:	6a19      	ldr	r1, [r3, #32]
 8008c48:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008c4c:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008c4e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008c50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c52:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008c56:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008c5a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c5c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008c5e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c62:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c66:	4e16      	ldr	r6, [pc, #88]	@ (8008cc0 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008c68:	42b3      	cmp	r3, r6
 8008c6a:	d00f      	beq.n	8008c8c <HAL_TIM_PWM_ConfigChannel+0x194>
 8008c6c:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008c70:	42b3      	cmp	r3, r6
 8008c72:	d00b      	beq.n	8008c8c <HAL_TIM_PWM_ConfigChannel+0x194>
 8008c74:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008c78:	42b3      	cmp	r3, r6
 8008c7a:	d007      	beq.n	8008c8c <HAL_TIM_PWM_ConfigChannel+0x194>
 8008c7c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c80:	42b3      	cmp	r3, r6
 8008c82:	d003      	beq.n	8008c8c <HAL_TIM_PWM_ConfigChannel+0x194>
 8008c84:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c88:	42b3      	cmp	r3, r6
 8008c8a:	d104      	bne.n	8008c96 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c8c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c8e:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c92:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008c96:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008c98:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008c9a:	6869      	ldr	r1, [r5, #4]
 8008c9c:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8008c9e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ca0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008ca2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008ca4:	f042 0208 	orr.w	r2, r2, #8
 8008ca8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008caa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cac:	f022 0204 	bic.w	r2, r2, #4
 8008cb0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008cb2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008cb8:	e78b      	b.n	8008bd2 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8008cba:	2002      	movs	r0, #2
}
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	40012c00 	.word	0x40012c00

08008cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008cc4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d046      	beq.n	8008d5a <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8008ccc:	b470      	push	{r4, r5, r6}
 8008cce:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cd0:	4e23      	ldr	r6, [pc, #140]	@ (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008cd2:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd4:	2302      	movs	r3, #2
 8008cd6:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008cda:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8008cdc:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cde:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008ce0:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ce2:	d024      	beq.n	8008d2e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008ce4:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008ce8:	42b0      	cmp	r0, r6
 8008cea:	d02b      	beq.n	8008d44 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cec:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008cf0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cf4:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cf6:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008cfa:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cfc:	d00a      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008cfe:	4b19      	ldr	r3, [pc, #100]	@ (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008d00:	4298      	cmp	r0, r3
 8008d02:	d007      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008d04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d08:	4298      	cmp	r0, r3
 8008d0a:	d003      	beq.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008d0c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8008d10:	4298      	cmp	r0, r3
 8008d12:	d104      	bne.n	8008d1e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d14:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d16:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d1a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d1c:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008d1e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008d20:	2301      	movs	r3, #1
 8008d22:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008d26:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8008d2a:	bc70      	pop	{r4, r5, r6}
 8008d2c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d2e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d30:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d34:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d36:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d3e:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008d40:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d42:	e7e7      	b.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d44:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008d46:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008d4a:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d4c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008d50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d54:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8008d56:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d58:	e7dc      	b.n	8008d14 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8008d5a:	2002      	movs	r0, #2
}
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	40012c00 	.word	0x40012c00
 8008d64:	40000400 	.word	0x40000400

08008d68 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d68:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d045      	beq.n	8008dfc <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8008d70:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008d72:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8008d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d7e:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d80:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008d82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d86:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d88:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d8c:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008d8e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d94:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008d96:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008d9c:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008d9e:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008da0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008da4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008da6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008da8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008dac:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8008dae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008db6:	4c12      	ldr	r4, [pc, #72]	@ (8008e00 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8008db8:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8008dba:	6810      	ldr	r0, [r2, #0]
 8008dbc:	42a0      	cmp	r0, r4
 8008dbe:	d00b      	beq.n	8008dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8008dc0:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8008dc4:	42a0      	cmp	r0, r4
 8008dc6:	d007      	beq.n	8008dd8 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8008dc8:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8008dca:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8008dcc:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8008dd0:	4608      	mov	r0, r1
}
 8008dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008dd6:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008dd8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8008dda:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008dde:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008de2:	6a0c      	ldr	r4, [r1, #32]
 8008de4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008de8:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008dea:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008dec:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008dee:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008df2:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008df4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008df8:	430b      	orrs	r3, r1
 8008dfa:	e7e5      	b.n	8008dc8 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8008dfc:	2002      	movs	r0, #2
}
 8008dfe:	4770      	bx	lr
 8008e00:	40012c00 	.word	0x40012c00

08008e04 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008e04:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e06:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8008e0a:	2801      	cmp	r0, #1
 8008e0c:	d047      	beq.n	8008e9e <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 8008e0e:	6810      	ldr	r0, [r2, #0]
 8008e10:	3801      	subs	r0, #1
 8008e12:	280f      	cmp	r0, #15
{
 8008e14:	b4f0      	push	{r4, r5, r6, r7}
 8008e16:	d815      	bhi.n	8008e44 <HAL_TIMEx_ConfigBreakInput+0x40>
 8008e18:	4c22      	ldr	r4, [pc, #136]	@ (8008ea4 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8008e1a:	4e23      	ldr	r6, [pc, #140]	@ (8008ea8 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8008e1c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8008e20:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8008e24:	4c21      	ldr	r4, [pc, #132]	@ (8008eac <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8008e26:	4e22      	ldr	r6, [pc, #136]	@ (8008eb0 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8008e28:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8008e2c:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8008e30:	2901      	cmp	r1, #1
 8008e32:	d00d      	beq.n	8008e50 <HAL_TIMEx_ConfigBreakInput+0x4c>
 8008e34:	2902      	cmp	r1, #2
 8008e36:	d01c      	beq.n	8008e72 <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8008e38:	2200      	movs	r2, #0
 8008e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 8008e3e:	2001      	movs	r0, #1

  return status;
}
 8008e40:	bcf0      	pop	{r4, r5, r6, r7}
 8008e42:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8008e44:	2700      	movs	r7, #0
  switch (BreakInput)
 8008e46:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8008e48:	46bc      	mov	ip, r7
 8008e4a:	463c      	mov	r4, r7
 8008e4c:	463d      	mov	r5, r7
  switch (BreakInput)
 8008e4e:	d1f1      	bne.n	8008e34 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e50:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8008e52:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008e54:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e56:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8008e58:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008e5a:	fa01 f10c 	lsl.w	r1, r1, ip
 8008e5e:	ea81 0207 	eor.w	r2, r1, r7
 8008e62:	402a      	ands	r2, r5
 8008e64:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e66:	ea80 0102 	eor.w	r1, r0, r2
 8008e6a:	4021      	ands	r1, r4
 8008e6c:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 8008e6e:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 8008e70:	e00f      	b.n	8008e92 <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e72:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 8008e74:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008e76:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e78:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 8008e7a:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008e7c:	fa01 f10c 	lsl.w	r1, r1, ip
 8008e80:	ea81 0207 	eor.w	r2, r1, r7
 8008e84:	402a      	ands	r2, r5
 8008e86:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008e88:	ea80 0102 	eor.w	r1, r0, r2
 8008e8c:	4021      	ands	r1, r4
 8008e8e:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 8008e90:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 8008e92:	2200      	movs	r2, #0
 8008e94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008e98:	2000      	movs	r0, #0
}
 8008e9a:	bcf0      	pop	{r4, r5, r6, r7}
 8008e9c:	4770      	bx	lr
  __HAL_LOCK(htim);
 8008e9e:	2002      	movs	r0, #2
}
 8008ea0:	4770      	bx	lr
 8008ea2:	bf00      	nop
 8008ea4:	0800c58c 	.word	0x0800c58c
 8008ea8:	0800c50c 	.word	0x0800c50c
 8008eac:	0800c54c 	.word	0x0800c54c
 8008eb0:	0800c4cc 	.word	0x0800c4cc

08008eb4 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008eb4:	b1d8      	cbz	r0, 8008eee <HAL_UART_DeInit+0x3a>
{
 8008eb6:	b538      	push	{r3, r4, r5, lr}
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb8:	2224      	movs	r2, #36	@ 0x24

  __HAL_UART_DISABLE(huart);
 8008eba:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008ebc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008ec0:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008ec2:	2500      	movs	r5, #0
 8008ec4:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 8008ec6:	f022 0201 	bic.w	r2, r2, #1
 8008eca:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8008ecc:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8008ece:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008ed0:	609d      	str	r5, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008ed2:	f7fc fbcb 	bl	800566c <HAL_UART_MspDeInit>
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);
 8008ed6:	f884 5084 	strb.w	r5, [r4, #132]	@ 0x84
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eda:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90

  return HAL_OK;
 8008ede:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8008ee0:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008ee4:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ee8:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008eea:	6725      	str	r5, [r4, #112]	@ 0x70
}
 8008eec:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008eee:	2001      	movs	r0, #1
}
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop

08008ef4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ef8:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008efa:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8008efe:	2820      	cmp	r0, #32
 8008f00:	d15e      	bne.n	8008fc0 <HAL_UART_Transmit+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f02:	460d      	mov	r5, r1
 8008f04:	b109      	cbz	r1, 8008f0a <HAL_UART_Transmit+0x16>
 8008f06:	4616      	mov	r6, r2
 8008f08:	b912      	cbnz	r2, 8008f10 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8008f0a:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f10:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f12:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f16:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f18:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f1c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8008f20:	f7fc fd4e 	bl	80059c0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f24:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008f26:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8008f2e:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8008f30:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f34:	d047      	beq.n	8008fc6 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8008f36:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f3a:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8008f3c:	b29b      	uxth	r3, r3
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d04d      	beq.n	8008fde <HAL_UART_Transmit+0xea>
 8008f42:	1c7b      	adds	r3, r7, #1
 8008f44:	d12a      	bne.n	8008f9c <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f46:	69d3      	ldr	r3, [r2, #28]
 8008f48:	061f      	lsls	r7, r3, #24
 8008f4a:	d5fc      	bpl.n	8008f46 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 8008f4c:	2d00      	cmp	r5, #0
 8008f4e:	d032      	beq.n	8008fb6 <HAL_UART_Transmit+0xc2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f50:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f54:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8008f56:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8008f5a:	3b01      	subs	r3, #1
 8008f5c:	b29b      	uxth	r3, r3
 8008f5e:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008f62:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8008f66:	b29b      	uxth	r3, r3
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d1ec      	bne.n	8008f46 <HAL_UART_Transmit+0x52>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f6c:	69d3      	ldr	r3, [r2, #28]
 8008f6e:	0659      	lsls	r1, r3, #25
 8008f70:	d5fc      	bpl.n	8008f6c <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 8008f72:	2320      	movs	r3, #32
 8008f74:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 8008f78:	2000      	movs	r0, #0
}
 8008f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8008f7e:	2d00      	cmp	r5, #0
 8008f80:	d040      	beq.n	8009004 <HAL_UART_Transmit+0x110>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f82:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008f86:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8008f88:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8008f8c:	3b01      	subs	r3, #1
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8008f94:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	b313      	cbz	r3, 8008fe2 <HAL_UART_Transmit+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f9c:	69d3      	ldr	r3, [r2, #28]
 8008f9e:	061e      	lsls	r6, r3, #24
 8008fa0:	d4ed      	bmi.n	8008f7e <HAL_UART_Transmit+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fa2:	f7fc fd0d 	bl	80059c0 <HAL_GetTick>
 8008fa6:	eba0 0309 	sub.w	r3, r0, r9
 8008faa:	429f      	cmp	r7, r3
 8008fac:	d311      	bcc.n	8008fd2 <HAL_UART_Transmit+0xde>
 8008fae:	b187      	cbz	r7, 8008fd2 <HAL_UART_Transmit+0xde>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008fb0:	6822      	ldr	r2, [r4, #0]
 8008fb2:	6813      	ldr	r3, [r2, #0]
 8008fb4:	e7f2      	b.n	8008f9c <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008fb6:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008fba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fbe:	e7c9      	b.n	8008f54 <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 8008fc0:	2002      	movs	r0, #2
}
 8008fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fc6:	6923      	ldr	r3, [r4, #16]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1b4      	bne.n	8008f36 <HAL_UART_Transmit+0x42>
      pdata16bits = (const uint16_t *) pData;
 8008fcc:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8008fce:	461d      	mov	r5, r3
 8008fd0:	e7b1      	b.n	8008f36 <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 8008fd2:	2320      	movs	r3, #32
 8008fd4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8008fd8:	2003      	movs	r0, #3
}
 8008fda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008fde:	1c78      	adds	r0, r7, #1
 8008fe0:	d0c4      	beq.n	8008f6c <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fe2:	69d3      	ldr	r3, [r2, #28]
 8008fe4:	065b      	lsls	r3, r3, #25
 8008fe6:	d4c4      	bmi.n	8008f72 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008fe8:	f7fc fcea 	bl	80059c0 <HAL_GetTick>
 8008fec:	eba0 0309 	sub.w	r3, r0, r9
 8008ff0:	429f      	cmp	r7, r3
 8008ff2:	d3ee      	bcc.n	8008fd2 <HAL_UART_Transmit+0xde>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	d0ec      	beq.n	8008fd2 <HAL_UART_Transmit+0xde>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008ff8:	6822      	ldr	r2, [r4, #0]
 8008ffa:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008ffc:	69d3      	ldr	r3, [r2, #28]
 8008ffe:	065b      	lsls	r3, r3, #25
 8009000:	d5f2      	bpl.n	8008fe8 <HAL_UART_Transmit+0xf4>
 8009002:	e7b6      	b.n	8008f72 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009004:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009008:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900c:	e7bb      	b.n	8008f86 <HAL_UART_Transmit+0x92>
 800900e:	bf00      	nop

08009010 <UART_SetConfig>:
{
 8009010:	b570      	push	{r4, r5, r6, lr}
 8009012:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009014:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009016:	6882      	ldr	r2, [r0, #8]
 8009018:	6900      	ldr	r0, [r0, #16]
 800901a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800901c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800901e:	4302      	orrs	r2, r0
 8009020:	430a      	orrs	r2, r1
 8009022:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009024:	498e      	ldr	r1, [pc, #568]	@ (8009260 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009026:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009028:	4029      	ands	r1, r5
 800902a:	430a      	orrs	r2, r1
 800902c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800902e:	685a      	ldr	r2, [r3, #4]
 8009030:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009032:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009034:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8009038:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800903a:	498a      	ldr	r1, [pc, #552]	@ (8009264 <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800903c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800903e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009040:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009042:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009044:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8009048:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800904c:	f000 80b0 	beq.w	80091b0 <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 8009050:	6a26      	ldr	r6, [r4, #32]
 8009052:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009054:	430a      	orrs	r2, r1
 8009056:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009058:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800905a:	f022 020f 	bic.w	r2, r2, #15
 800905e:	432a      	orrs	r2, r5
 8009060:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009062:	4a81      	ldr	r2, [pc, #516]	@ (8009268 <UART_SetConfig+0x258>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d035      	beq.n	80090d4 <UART_SetConfig+0xc4>
 8009068:	4a80      	ldr	r2, [pc, #512]	@ (800926c <UART_SetConfig+0x25c>)
 800906a:	4293      	cmp	r3, r2
 800906c:	d00d      	beq.n	800908a <UART_SetConfig+0x7a>
 800906e:	4a80      	ldr	r2, [pc, #512]	@ (8009270 <UART_SetConfig+0x260>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d055      	beq.n	8009120 <UART_SetConfig+0x110>
 8009074:	4a7f      	ldr	r2, [pc, #508]	@ (8009274 <UART_SetConfig+0x264>)
 8009076:	4293      	cmp	r3, r2
 8009078:	d040      	beq.n	80090fc <UART_SetConfig+0xec>
        ret = HAL_ERROR;
 800907a:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 800907c:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 800907e:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 8009082:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 8009086:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 8009088:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800908a:	4b7b      	ldr	r3, [pc, #492]	@ (8009278 <UART_SetConfig+0x268>)
 800908c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009090:	f003 030c 	and.w	r3, r3, #12
 8009094:	2b0c      	cmp	r3, #12
 8009096:	d8f0      	bhi.n	800907a <UART_SetConfig+0x6a>
 8009098:	a201      	add	r2, pc, #4	@ (adr r2, 80090a0 <UART_SetConfig+0x90>)
 800909a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909e:	bf00      	nop
 80090a0:	080091a5 	.word	0x080091a5
 80090a4:	0800907b 	.word	0x0800907b
 80090a8:	0800907b 	.word	0x0800907b
 80090ac:	0800907b 	.word	0x0800907b
 80090b0:	08009113 	.word	0x08009113
 80090b4:	0800907b 	.word	0x0800907b
 80090b8:	0800907b 	.word	0x0800907b
 80090bc:	0800907b 	.word	0x0800907b
 80090c0:	08009167 	.word	0x08009167
 80090c4:	0800907b 	.word	0x0800907b
 80090c8:	0800907b 	.word	0x0800907b
 80090cc:	0800907b 	.word	0x0800907b
 80090d0:	08009135 	.word	0x08009135
 80090d4:	4b68      	ldr	r3, [pc, #416]	@ (8009278 <UART_SetConfig+0x268>)
 80090d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090da:	f003 0303 	and.w	r3, r3, #3
 80090de:	2b02      	cmp	r3, #2
 80090e0:	d041      	beq.n	8009166 <UART_SetConfig+0x156>
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d026      	beq.n	8009134 <UART_SetConfig+0x124>
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d013      	beq.n	8009112 <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80090ee:	f000 80ac 	beq.w	800924a <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 80090f2:	f7ff f979 	bl	80083e8 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80090f6:	b3a0      	cbz	r0, 8009162 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090f8:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80090fa:	e020      	b.n	800913e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090fc:	4b5e      	ldr	r3, [pc, #376]	@ (8009278 <UART_SetConfig+0x268>)
 80090fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009102:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009106:	2b80      	cmp	r3, #128	@ 0x80
 8009108:	d02d      	beq.n	8009166 <UART_SetConfig+0x156>
 800910a:	f200 808e 	bhi.w	800922a <UART_SetConfig+0x21a>
 800910e:	2b00      	cmp	r3, #0
 8009110:	d048      	beq.n	80091a4 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009112:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009116:	f000 809e 	beq.w	8009256 <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 800911a:	f7ff f811 	bl	8008140 <HAL_RCC_GetSysClockFreq>
        break;
 800911e:	e7ea      	b.n	80090f6 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009120:	4b55      	ldr	r3, [pc, #340]	@ (8009278 <UART_SetConfig+0x268>)
 8009122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009126:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800912a:	2b20      	cmp	r3, #32
 800912c:	d01b      	beq.n	8009166 <UART_SetConfig+0x156>
 800912e:	d9ee      	bls.n	800910e <UART_SetConfig+0xfe>
 8009130:	2b30      	cmp	r3, #48	@ 0x30
 8009132:	d1a2      	bne.n	800907a <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009134:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009138:	d019      	beq.n	800916e <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 800913a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800913e:	6863      	ldr	r3, [r4, #4]
 8009140:	4a4e      	ldr	r2, [pc, #312]	@ (800927c <UART_SetConfig+0x26c>)
 8009142:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8009146:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800914a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800914e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8009152:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009156:	f1a0 0310 	sub.w	r3, r0, #16
 800915a:	4293      	cmp	r3, r2
 800915c:	d88d      	bhi.n	800907a <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 800915e:	6823      	ldr	r3, [r4, #0]
 8009160:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 8009162:	2000      	movs	r0, #0
 8009164:	e78a      	b.n	800907c <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009166:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 800916a:	4845      	ldr	r0, [pc, #276]	@ (8009280 <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800916c:	d1e7      	bne.n	800913e <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800916e:	6862      	ldr	r2, [r4, #4]
 8009170:	4b42      	ldr	r3, [pc, #264]	@ (800927c <UART_SetConfig+0x26c>)
 8009172:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 8009176:	fbb0 f0f1 	udiv	r0, r0, r1
 800917a:	0853      	lsrs	r3, r2, #1
 800917c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009180:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009184:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009188:	f1a3 0210 	sub.w	r2, r3, #16
 800918c:	428a      	cmp	r2, r1
 800918e:	f63f af74 	bhi.w	800907a <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009192:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009196:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009198:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800919a:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800919e:	4313      	orrs	r3, r2
 80091a0:	60cb      	str	r3, [r1, #12]
 80091a2:	e7de      	b.n	8009162 <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80091a4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80091a8:	d049      	beq.n	800923e <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80091aa:	f7ff f90b 	bl	80083c4 <HAL_RCC_GetPCLK1Freq>
        break;
 80091ae:	e7a2      	b.n	80090f6 <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091b0:	4311      	orrs	r1, r2
 80091b2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091b6:	4930      	ldr	r1, [pc, #192]	@ (8009278 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80091b8:	f022 020f 	bic.w	r2, r2, #15
 80091bc:	432a      	orrs	r2, r5
 80091be:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80091c0:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 80091c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80091cc:	d046      	beq.n	800925c <UART_SetConfig+0x24c>
 80091ce:	d82f      	bhi.n	8009230 <UART_SetConfig+0x220>
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d03d      	beq.n	8009250 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 80091d4:	f7fe ffb4 	bl	8008140 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80091d8:	2800      	cmp	r0, #0
 80091da:	d0c2      	beq.n	8009162 <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091dc:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091de:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091e0:	4b26      	ldr	r3, [pc, #152]	@ (800927c <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091e2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80091e6:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 80091ea:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80091ee:	4299      	cmp	r1, r3
 80091f0:	f63f af43 	bhi.w	800907a <UART_SetConfig+0x6a>
 80091f4:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 80091f8:	f63f af3f 	bhi.w	800907a <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80091fc:	2300      	movs	r3, #0
 80091fe:	4619      	mov	r1, r3
 8009200:	f7f7 faa2 	bl	8000748 <__aeabi_uldivmod>
 8009204:	0872      	lsrs	r2, r6, #1
 8009206:	0203      	lsls	r3, r0, #8
 8009208:	0209      	lsls	r1, r1, #8
 800920a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800920e:	1898      	adds	r0, r3, r2
 8009210:	f141 0100 	adc.w	r1, r1, #0
 8009214:	4632      	mov	r2, r6
 8009216:	2300      	movs	r3, #0
 8009218:	f7f7 fa96 	bl	8000748 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800921c:	4b19      	ldr	r3, [pc, #100]	@ (8009284 <UART_SetConfig+0x274>)
 800921e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8009222:	429a      	cmp	r2, r3
 8009224:	f63f af29 	bhi.w	800907a <UART_SetConfig+0x6a>
 8009228:	e799      	b.n	800915e <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800922a:	2bc0      	cmp	r3, #192	@ 0xc0
 800922c:	d082      	beq.n	8009134 <UART_SetConfig+0x124>
 800922e:	e724      	b.n	800907a <UART_SetConfig+0x6a>
 8009230:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009234:	f47f af21 	bne.w	800907a <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 8009238:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800923c:	e7cf      	b.n	80091de <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 800923e:	f7ff f8c1 	bl	80083c4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8009242:	2800      	cmp	r0, #0
 8009244:	d08d      	beq.n	8009162 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009246:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009248:	e791      	b.n	800916e <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800924a:	f7ff f8cd 	bl	80083e8 <HAL_RCC_GetPCLK2Freq>
        break;
 800924e:	e7f8      	b.n	8009242 <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009250:	f7ff f8b8 	bl	80083c4 <HAL_RCC_GetPCLK1Freq>
        break;
 8009254:	e7c0      	b.n	80091d8 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8009256:	f7fe ff73 	bl	8008140 <HAL_RCC_GetSysClockFreq>
        break;
 800925a:	e7f2      	b.n	8009242 <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 800925c:	4808      	ldr	r0, [pc, #32]	@ (8009280 <UART_SetConfig+0x270>)
 800925e:	e7be      	b.n	80091de <UART_SetConfig+0x1ce>
 8009260:	cfff69f3 	.word	0xcfff69f3
 8009264:	40008000 	.word	0x40008000
 8009268:	40013800 	.word	0x40013800
 800926c:	40004400 	.word	0x40004400
 8009270:	40004800 	.word	0x40004800
 8009274:	40004c00 	.word	0x40004c00
 8009278:	40021000 	.word	0x40021000
 800927c:	0800c5cc 	.word	0x0800c5cc
 8009280:	00f42400 	.word	0x00f42400
 8009284:	000ffcff 	.word	0x000ffcff

08009288 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009288:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800928a:	071a      	lsls	r2, r3, #28
{
 800928c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800928e:	d506      	bpl.n	800929e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009290:	6801      	ldr	r1, [r0, #0]
 8009292:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009294:	684a      	ldr	r2, [r1, #4]
 8009296:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800929a:	4322      	orrs	r2, r4
 800929c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800929e:	07dc      	lsls	r4, r3, #31
 80092a0:	d506      	bpl.n	80092b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80092a2:	6801      	ldr	r1, [r0, #0]
 80092a4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 80092a6:	684a      	ldr	r2, [r1, #4]
 80092a8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80092ac:	4322      	orrs	r2, r4
 80092ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80092b0:	0799      	lsls	r1, r3, #30
 80092b2:	d506      	bpl.n	80092c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80092b4:	6801      	ldr	r1, [r0, #0]
 80092b6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80092b8:	684a      	ldr	r2, [r1, #4]
 80092ba:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80092be:	4322      	orrs	r2, r4
 80092c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80092c2:	075a      	lsls	r2, r3, #29
 80092c4:	d506      	bpl.n	80092d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80092c6:	6801      	ldr	r1, [r0, #0]
 80092c8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 80092ca:	684a      	ldr	r2, [r1, #4]
 80092cc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80092d0:	4322      	orrs	r2, r4
 80092d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80092d4:	06dc      	lsls	r4, r3, #27
 80092d6:	d506      	bpl.n	80092e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092d8:	6801      	ldr	r1, [r0, #0]
 80092da:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 80092dc:	688a      	ldr	r2, [r1, #8]
 80092de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80092e2:	4322      	orrs	r2, r4
 80092e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092e6:	0699      	lsls	r1, r3, #26
 80092e8:	d506      	bpl.n	80092f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092ea:	6801      	ldr	r1, [r0, #0]
 80092ec:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 80092ee:	688a      	ldr	r2, [r1, #8]
 80092f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80092f4:	4322      	orrs	r2, r4
 80092f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092f8:	065a      	lsls	r2, r3, #25
 80092fa:	d509      	bpl.n	8009310 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092fc:	6801      	ldr	r1, [r0, #0]
 80092fe:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8009300:	684a      	ldr	r2, [r1, #4]
 8009302:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009306:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009308:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800930c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800930e:	d00b      	beq.n	8009328 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009310:	061b      	lsls	r3, r3, #24
 8009312:	d506      	bpl.n	8009322 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009314:	6802      	ldr	r2, [r0, #0]
 8009316:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009318:	6853      	ldr	r3, [r2, #4]
 800931a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800931e:	430b      	orrs	r3, r1
 8009320:	6053      	str	r3, [r2, #4]
}
 8009322:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009326:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009328:	684a      	ldr	r2, [r1, #4]
 800932a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800932c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8009330:	4322      	orrs	r2, r4
 8009332:	604a      	str	r2, [r1, #4]
 8009334:	e7ec      	b.n	8009310 <UART_AdvFeatureConfig+0x88>
 8009336:	bf00      	nop

08009338 <UART_CheckIdleState>:
{
 8009338:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933a:	2300      	movs	r3, #0
{
 800933c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800933e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8009342:	f7fc fb3d 	bl	80059c0 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009346:	6822      	ldr	r2, [r4, #0]
 8009348:	6813      	ldr	r3, [r2, #0]
 800934a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 800934c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800934e:	d40f      	bmi.n	8009370 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009350:	6813      	ldr	r3, [r2, #0]
 8009352:	0759      	lsls	r1, r3, #29
 8009354:	d431      	bmi.n	80093ba <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009356:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8009358:	2220      	movs	r2, #32
 800935a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 800935e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8009360:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009364:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009366:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8009368:	2300      	movs	r3, #0
 800936a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800936e:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009370:	69d3      	ldr	r3, [r2, #28]
 8009372:	0298      	lsls	r0, r3, #10
 8009374:	d4ec      	bmi.n	8009350 <UART_CheckIdleState+0x18>
 8009376:	e00c      	b.n	8009392 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009378:	6819      	ldr	r1, [r3, #0]
 800937a:	0749      	lsls	r1, r1, #29
 800937c:	461a      	mov	r2, r3
 800937e:	d505      	bpl.n	800938c <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009380:	69d9      	ldr	r1, [r3, #28]
 8009382:	0708      	lsls	r0, r1, #28
 8009384:	d44a      	bmi.n	800941c <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009386:	69d9      	ldr	r1, [r3, #28]
 8009388:	0509      	lsls	r1, r1, #20
 800938a:	d475      	bmi.n	8009478 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	0298      	lsls	r0, r3, #10
 8009390:	d4de      	bmi.n	8009350 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009392:	f7fc fb15 	bl	80059c0 <HAL_GetTick>
 8009396:	1b43      	subs	r3, r0, r5
 8009398:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800939c:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800939e:	d3eb      	bcc.n	8009378 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80093a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	e843 2100 	strex	r1, r2, [r3]
 80093ac:	2900      	cmp	r1, #0
 80093ae:	d1f7      	bne.n	80093a0 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 80093b0:	2320      	movs	r3, #32
 80093b2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 80093b6:	2003      	movs	r0, #3
 80093b8:	e7d6      	b.n	8009368 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093ba:	69d3      	ldr	r3, [r2, #28]
 80093bc:	025b      	lsls	r3, r3, #9
 80093be:	d4ca      	bmi.n	8009356 <UART_CheckIdleState+0x1e>
 80093c0:	e00d      	b.n	80093de <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093c2:	681a      	ldr	r2, [r3, #0]
 80093c4:	0750      	lsls	r0, r2, #29
 80093c6:	d507      	bpl.n	80093d8 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093c8:	69da      	ldr	r2, [r3, #28]
 80093ca:	0711      	lsls	r1, r2, #28
 80093cc:	f100 8082 	bmi.w	80094d4 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80093d0:	69da      	ldr	r2, [r3, #28]
 80093d2:	0512      	lsls	r2, r2, #20
 80093d4:	f100 80ac 	bmi.w	8009530 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80093d8:	69db      	ldr	r3, [r3, #28]
 80093da:	025b      	lsls	r3, r3, #9
 80093dc:	d4bb      	bmi.n	8009356 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093de:	f7fc faef 	bl	80059c0 <HAL_GetTick>
 80093e2:	1b43      	subs	r3, r0, r5
 80093e4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80093e8:	6823      	ldr	r3, [r4, #0]
 80093ea:	d3ea      	bcc.n	80093c2 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ec:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093f0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f4:	e843 2100 	strex	r1, r2, [r3]
 80093f8:	2900      	cmp	r1, #0
 80093fa:	d1f7      	bne.n	80093ec <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fc:	f103 0208 	add.w	r2, r3, #8
 8009400:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009404:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009408:	f103 0008 	add.w	r0, r3, #8
 800940c:	e840 2100 	strex	r1, r2, [r0]
 8009410:	2900      	cmp	r1, #0
 8009412:	d1f3      	bne.n	80093fc <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8009414:	2320      	movs	r3, #32
 8009416:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800941a:	e7cc      	b.n	80093b6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800941c:	2208      	movs	r2, #8
 800941e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009424:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009428:	e843 2100 	strex	r1, r2, [r3]
 800942c:	2900      	cmp	r1, #0
 800942e:	d1f7      	bne.n	8009420 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009430:	4856      	ldr	r0, [pc, #344]	@ (800958c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	f103 0208 	add.w	r2, r3, #8
 8009436:	e852 2f00 	ldrex	r2, [r2]
 800943a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943c:	f103 0508 	add.w	r5, r3, #8
 8009440:	e845 2100 	strex	r1, r2, [r5]
 8009444:	2900      	cmp	r1, #0
 8009446:	d1f4      	bne.n	8009432 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009448:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800944a:	2a01      	cmp	r2, #1
 800944c:	d00b      	beq.n	8009466 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800944e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009450:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009452:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009454:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009458:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800945a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 800945c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009460:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009464:	e79c      	b.n	80093a0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009466:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800946a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	e843 2100 	strex	r1, r2, [r3]
 8009472:	2900      	cmp	r1, #0
 8009474:	d1f7      	bne.n	8009466 <UART_CheckIdleState+0x12e>
 8009476:	e7ea      	b.n	800944e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009478:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800947c:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947e:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009482:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009486:	e843 2100 	strex	r1, r2, [r3]
 800948a:	2900      	cmp	r1, #0
 800948c:	d1f7      	bne.n	800947e <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800948e:	483f      	ldr	r0, [pc, #252]	@ (800958c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009490:	f103 0208 	add.w	r2, r3, #8
 8009494:	e852 2f00 	ldrex	r2, [r2]
 8009498:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	f103 0508 	add.w	r5, r3, #8
 800949e:	e845 2100 	strex	r1, r2, [r5]
 80094a2:	2900      	cmp	r1, #0
 80094a4:	d1f4      	bne.n	8009490 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094a6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80094a8:	2a01      	cmp	r2, #1
 80094aa:	d00a      	beq.n	80094c2 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ac:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80094ae:	2120      	movs	r1, #32
 80094b0:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80094b4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094b6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80094b8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80094bc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80094c0:	e76e      	b.n	80093a0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094c2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	e843 2100 	strex	r1, r2, [r3]
 80094ce:	2900      	cmp	r1, #0
 80094d0:	d1f7      	bne.n	80094c2 <UART_CheckIdleState+0x18a>
 80094d2:	e7eb      	b.n	80094ac <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094d4:	2208      	movs	r2, #8
 80094d6:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d8:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80094dc:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	e843 2100 	strex	r1, r2, [r3]
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d1f7      	bne.n	80094d8 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094e8:	4828      	ldr	r0, [pc, #160]	@ (800958c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	f103 0208 	add.w	r2, r3, #8
 80094ee:	e852 2f00 	ldrex	r2, [r2]
 80094f2:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094f4:	f103 0508 	add.w	r5, r3, #8
 80094f8:	e845 2100 	strex	r1, r2, [r5]
 80094fc:	2900      	cmp	r1, #0
 80094fe:	d1f4      	bne.n	80094ea <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009500:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009502:	2a01      	cmp	r2, #1
 8009504:	d00b      	beq.n	800951e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009506:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009508:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800950a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 800950c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009510:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009512:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009514:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009518:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 800951c:	e766      	b.n	80093ec <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009522:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009526:	e843 2100 	strex	r1, r2, [r3]
 800952a:	2900      	cmp	r1, #0
 800952c:	d1f7      	bne.n	800951e <UART_CheckIdleState+0x1e6>
 800952e:	e7ea      	b.n	8009506 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009530:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009534:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009536:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800953a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	e843 2100 	strex	r1, r2, [r3]
 8009542:	2900      	cmp	r1, #0
 8009544:	d1f7      	bne.n	8009536 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009546:	4811      	ldr	r0, [pc, #68]	@ (800958c <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009548:	f103 0208 	add.w	r2, r3, #8
 800954c:	e852 2f00 	ldrex	r2, [r2]
 8009550:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009552:	f103 0508 	add.w	r5, r3, #8
 8009556:	e845 2100 	strex	r1, r2, [r5]
 800955a:	2900      	cmp	r1, #0
 800955c:	d1f4      	bne.n	8009548 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800955e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009560:	2a01      	cmp	r2, #1
 8009562:	d00a      	beq.n	800957a <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009564:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009566:	2120      	movs	r1, #32
 8009568:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800956c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800956e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009570:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009574:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8009578:	e738      	b.n	80093ec <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800957e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009582:	e843 2100 	strex	r1, r2, [r3]
 8009586:	2900      	cmp	r1, #0
 8009588:	d1f7      	bne.n	800957a <UART_CheckIdleState+0x242>
 800958a:	e7eb      	b.n	8009564 <UART_CheckIdleState+0x22c>
 800958c:	effffffe 	.word	0xeffffffe

08009590 <HAL_UART_Init>:
  if (huart == NULL)
 8009590:	b380      	cbz	r0, 80095f4 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8009592:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8009596:	b510      	push	{r4, lr}
 8009598:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800959a:	b333      	cbz	r3, 80095ea <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 800959c:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800959e:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 80095a0:	2324      	movs	r3, #36	@ 0x24
 80095a2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 80095a6:	6813      	ldr	r3, [r2, #0]
 80095a8:	f023 0301 	bic.w	r3, r3, #1
 80095ac:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80095ae:	b9c1      	cbnz	r1, 80095e2 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 80095b0:	4620      	mov	r0, r4
 80095b2:	f7ff fd2d 	bl	8009010 <UART_SetConfig>
 80095b6:	2801      	cmp	r0, #1
 80095b8:	d011      	beq.n	80095de <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80095ba:	6823      	ldr	r3, [r4, #0]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80095c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80095c4:	689a      	ldr	r2, [r3, #8]
 80095c6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80095ca:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80095d2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80095d4:	601a      	str	r2, [r3, #0]
}
 80095d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80095da:	f7ff bead 	b.w	8009338 <UART_CheckIdleState>
}
 80095de:	2001      	movs	r0, #1
 80095e0:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 80095e2:	4620      	mov	r0, r4
 80095e4:	f7ff fe50 	bl	8009288 <UART_AdvFeatureConfig>
 80095e8:	e7e2      	b.n	80095b0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 80095ea:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 80095ee:	f7fb ffb7 	bl	8005560 <HAL_UART_MspInit>
 80095f2:	e7d3      	b.n	800959c <HAL_UART_Init+0xc>
}
 80095f4:	2001      	movs	r0, #1
 80095f6:	4770      	bx	lr

080095f8 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80095f8:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d017      	beq.n	8009630 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009600:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009602:	2324      	movs	r3, #36	@ 0x24
{
 8009604:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009606:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800960a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800960c:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800960e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8009610:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009614:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8009618:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800961a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800961c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8009622:	2220      	movs	r2, #32
 8009624:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8009628:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 800962c:	4618      	mov	r0, r3
}
 800962e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8009630:	2002      	movs	r0, #2
}
 8009632:	4770      	bx	lr

08009634 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009634:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009638:	2a01      	cmp	r2, #1
 800963a:	d037      	beq.n	80096ac <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 800963c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800963e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009640:	2024      	movs	r0, #36	@ 0x24
{
 8009642:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009644:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009648:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800964a:	6810      	ldr	r0, [r2, #0]
 800964c:	f020 0001 	bic.w	r0, r0, #1
 8009650:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009652:	6890      	ldr	r0, [r2, #8]
 8009654:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8009658:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800965a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800965c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800965e:	b310      	cbz	r0, 80096a6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009660:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009662:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8009664:	4d12      	ldr	r5, [pc, #72]	@ (80096b0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009666:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800966a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800966e:	4911      	ldr	r1, [pc, #68]	@ (80096b4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8009670:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009674:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009678:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800967c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009680:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009682:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009684:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009688:	fbb1 f1f5 	udiv	r1, r1, r5
 800968c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8009690:	2100      	movs	r1, #0
 8009692:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009696:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009698:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800969a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800969e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 80096a0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 80096a4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 80096a6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 80096a8:	4608      	mov	r0, r1
 80096aa:	e7ef      	b.n	800968c <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 80096ac:	2002      	movs	r0, #2
}
 80096ae:	4770      	bx	lr
 80096b0:	0800c5e4 	.word	0x0800c5e4
 80096b4:	0800c5ec 	.word	0x0800c5ec

080096b8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 80096b8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80096bc:	2a01      	cmp	r2, #1
 80096be:	d037      	beq.n	8009730 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 80096c0:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096c2:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80096c4:	2024      	movs	r0, #36	@ 0x24
{
 80096c6:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80096c8:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096cc:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 80096ce:	6810      	ldr	r0, [r2, #0]
 80096d0:	f020 0001 	bic.w	r0, r0, #1
 80096d4:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096d6:	6890      	ldr	r0, [r2, #8]
 80096d8:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 80096dc:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096de:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80096e0:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80096e2:	b310      	cbz	r0, 800972a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80096e4:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096e6:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 80096e8:	4d12      	ldr	r5, [pc, #72]	@ (8009734 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096ea:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80096ee:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80096f2:	4911      	ldr	r1, [pc, #68]	@ (8009738 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80096f4:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80096f8:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80096fc:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8009700:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009704:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009706:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009708:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800970c:	fbb1 f1f5 	udiv	r1, r1, r5
 8009710:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8009714:	2100      	movs	r1, #0
 8009716:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 800971a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800971c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800971e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8009722:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009724:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8009728:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 800972a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 800972c:	4608      	mov	r0, r1
 800972e:	e7ef      	b.n	8009710 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009730:	2002      	movs	r0, #2
}
 8009732:	4770      	bx	lr
 8009734:	0800c5e4 	.word	0x0800c5e4
 8009738:	0800c5ec 	.word	0x0800c5ec

0800973c <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 800973c:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800973e:	8840      	ldrh	r0, [r0, #2]
 8009740:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8009744:	0c00      	lsrs	r0, r0, #16
 8009746:	4770      	bx	lr

08009748 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8009748:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 800974a:	8803      	ldrh	r3, [r0, #0]
 800974c:	140d      	asrs	r5, r1, #16
 800974e:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8009750:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8009754:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8009758:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 800975c:	428b      	cmp	r3, r1
{
 800975e:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8009760:	da0f      	bge.n	8009782 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8009762:	8846      	ldrh	r6, [r0, #2]
 8009764:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8009768:	4282      	cmp	r2, r0
 800976a:	dd13      	ble.n	8009794 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 800976c:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 800976e:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8009772:	bfb8      	it	lt
 8009774:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8009776:	f7f9 f9b9 	bl	8002aec <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 800977a:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 800977c:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 800977e:	db0e      	blt.n	800979e <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8009780:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8009782:	b2a4      	uxth	r4, r4
 8009784:	2000      	movs	r0, #0
 8009786:	f364 000f 	bfi	r0, r4, #0, #16
 800978a:	b2ad      	uxth	r5, r5
 800978c:	f365 401f 	bfi	r0, r5, #16, #16
}
 8009790:	b004      	add	sp, #16
 8009792:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8009794:	1a98      	subs	r0, r3, r2
 8009796:	f7f9 f9a9 	bl	8002aec <MCM_Sqrt>
        if (Vqd.q < 0)
 800979a:	2c00      	cmp	r4, #0
 800979c:	daf0      	bge.n	8009780 <Circle_Limitation+0x38>
          new_q = - new_q;
 800979e:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 80097a0:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 80097a2:	e7ee      	b.n	8009782 <Circle_Limitation+0x3a>

080097a4 <EAC_Init>:
  {
#endif
    pHandle->pSTC = pSTC;
    pHandle->pVSS = pVSS;
    pHandle->pENC = pENC;
    pHandle->EncAligned = false;
 80097a4:	f04f 0c00 	mov.w	ip, #0
    pHandle->pVSS = pVSS;
 80097a8:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pENC = pENC;
 80097ac:	6083      	str	r3, [r0, #8]
    pHandle->EncAligned = false;
 80097ae:	f8a0 c00e 	strh.w	ip, [r0, #14]
    pHandle->EncRestart = false;
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 80097b2:	4770      	bx	lr

080097b4 <EAC_StartAlignment>:
  * It configures the VSS (Virtual Speed Sensor) with the required angle and sets the
  * STC (Speed and Torque Controller) to execute the required torque ramp.
  * @param  pHandle: handler of the current instance of the EncAlignCtrl component.
  */
__weak void EAC_StartAlignment(EncAlign_Handle_t *pHandle)
{
 80097b4:	b510      	push	{r4, lr}
  {
#endif
    uint32_t wAux;

    /* Set pVSS mechanical speed to zero */
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80097b6:	2200      	movs	r2, #0
{
 80097b8:	4604      	mov	r4, r0
    VSS_SetMecAcceleration(pHandle->pVSS, 0, 0U);
 80097ba:	4611      	mov	r1, r2
 80097bc:	6840      	ldr	r0, [r0, #4]
 80097be:	f001 fcd1 	bl	800b164 <VSS_SetMecAcceleration>

    /* Set pVSS mechanical angle */
    VSS_SetMecAngle(pHandle->pVSS, pHandle->hElAngle);
 80097c2:	6863      	ldr	r3, [r4, #4]
 80097c4:	f9b4 0014 	ldrsh.w	r0, [r4, #20]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80097c8:	785a      	ldrb	r2, [r3, #1]
    pHandle->hElAngleAccu = hMecAngle;
 80097ca:	8618      	strh	r0, [r3, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 80097cc:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 80097ce:	fb90 f2f2 	sdiv	r2, r0, r2

    /* Set pSTC in MCM_TORQUE_MODE */
    STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80097d2:	2104      	movs	r1, #4
 80097d4:	6820      	ldr	r0, [r4, #0]
 80097d6:	80da      	strh	r2, [r3, #6]
 80097d8:	f001 fc1e 	bl	800b018 <STC_SetControlMode>

    /* Set starting torque to Zero */
    (void)STC_ExecRamp(pHandle->pSTC, 0, 0U);
 80097dc:	2200      	movs	r2, #0
 80097de:	4611      	mov	r1, r2
 80097e0:	6820      	ldr	r0, [r4, #0]
 80097e2:	f001 fc1d 	bl	800b020 <STC_ExecRamp>

    /* Execute the torque ramp */
    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, (uint32_t)pHandle->hDurationms);
 80097e6:	8ae2      	ldrh	r2, [r4, #22]
 80097e8:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80097ec:	6820      	ldr	r0, [r4, #0]
 80097ee:	f001 fc17 	bl	800b020 <STC_ExecRamp>
    /* Compute hRemainingTicks, the number of thick of alignment phase */
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80097f2:	8ae3      	ldrh	r3, [r4, #22]
 80097f4:	8a21      	ldrh	r1, [r4, #16]
    wAux /= 1000U;
 80097f6:	4a04      	ldr	r2, [pc, #16]	@ (8009808 <EAC_StartAlignment+0x54>)
    wAux = ((uint32_t)pHandle->hDurationms) * ((uint32_t)pHandle->hEACFrequencyHz);
 80097f8:	fb01 f303 	mul.w	r3, r1, r3
    wAux /= 1000U;
 80097fc:	fba2 2303 	umull	r2, r3, r2, r3
 8009800:	099b      	lsrs	r3, r3, #6
    pHandle->hRemainingTicks = (uint16_t)wAux;
    pHandle->hRemainingTicks++;
 8009802:	3301      	adds	r3, #1
 8009804:	81a3      	strh	r3, [r4, #12]
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif
}
 8009806:	bd10      	pop	{r4, pc}
 8009808:	10624dd3 	.word	0x10624dd3

0800980c <EAC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingTicks > 0U)
 800980c:	8983      	ldrh	r3, [r0, #12]
 800980e:	b90b      	cbnz	r3, 8009814 <EAC_Exec+0x8>
  bool retVal = true;
 8009810:	2001      	movs	r0, #1
#ifdef NULL_PTR_CHECK_ENC_ALI_CTRL
  }
#endif

  return (retVal);
}
 8009812:	4770      	bx	lr
      pHandle->hRemainingTicks--;
 8009814:	3b01      	subs	r3, #1
 8009816:	b29b      	uxth	r3, r3
{
 8009818:	b510      	push	{r4, lr}
 800981a:	4604      	mov	r4, r0
      pHandle->hRemainingTicks--;
 800981c:	8183      	strh	r3, [r0, #12]
      if (0U == pHandle->hRemainingTicks)
 800981e:	b10b      	cbz	r3, 8009824 <EAC_Exec+0x18>
        retVal = false;
 8009820:	2000      	movs	r0, #0
}
 8009822:	bd10      	pop	{r4, pc}
        ENC_SetMecAngle(pHandle->pENC, pHandle->hElAngle / ((int16_t)pHandle->bElToMecRatio));
 8009824:	7e03      	ldrb	r3, [r0, #24]
 8009826:	f9b0 1014 	ldrsh.w	r1, [r0, #20]
 800982a:	6880      	ldr	r0, [r0, #8]
 800982c:	fb91 f1f3 	sdiv	r1, r1, r3
 8009830:	f000 f93c 	bl	8009aac <ENC_SetMecAngle>
        pHandle->EncAligned = true;
 8009834:	2301      	movs	r3, #1
 8009836:	73a3      	strb	r3, [r4, #14]
  bool retVal = true;
 8009838:	2001      	movs	r0, #1
}
 800983a:	bd10      	pop	{r4, pc}

0800983c <ENC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    TIM_TypeDef *TIMx = pHandle->TIMx;
 800983c:	6a03      	ldr	r3, [r0, #32]
#endif
    /* Reset counter */
    LL_TIM_SetCounter(TIMx, 0);

    /*Calculations of convenience*/
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 800983e:	f8b0 c06e 	ldrh.w	ip, [r0, #110]	@ 0x6e
  SET_BIT(TIMx->CR1, TIM_CR1_UIFREMAP);
 8009842:	681a      	ldr	r2, [r3, #0]
 8009844:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
{
 8009848:	b410      	push	{r4}
 800984a:	601a      	str	r2, [r3, #0]
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 800984c:	f8b0 206c 	ldrh.w	r2, [r0, #108]	@ 0x6c
 8009850:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009854:	0052      	lsls	r2, r2, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009856:	2100      	movs	r1, #0
 8009858:	6259      	str	r1, [r3, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 800985a:	f04f 34ff 	mov.w	r4, #4294967295
    pHandle->SpeedSamplingFreqUnit = ((uint32_t)pHandle->SpeedSamplingFreqHz * (uint32_t)SPEED_UNIT);
 800985e:	6242      	str	r2, [r0, #36]	@ 0x24
    pHandle->U32MAXdivPulseNumber = UINT32_MAX / ((uint32_t) pHandle->PulseNumber);
 8009860:	fbb4 f4fc 	udiv	r4, r4, ip
 8009864:	6684      	str	r4, [r0, #104]	@ 0x68
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009866:	699c      	ldr	r4, [r3, #24]
 8009868:	f8b0 207a 	ldrh.w	r2, [r0, #122]	@ 0x7a
 800986c:	f024 0cf0 	bic.w	ip, r4, #240	@ 0xf0
 8009870:	ea42 020c 	orr.w	r2, r2, ip
 8009874:	619a      	str	r2, [r3, #24]
 8009876:	699a      	ldr	r2, [r3, #24]
 8009878:	f8b0 407a 	ldrh.w	r4, [r0, #122]	@ 0x7a
 800987c:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 8009880:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009884:	f06f 0401 	mvn.w	r4, #1
  MODIFY_REG(*pReg, ((TIM_CCMR1_IC1F) << SHIFT_TAB_ICxx[iChannel]), (ICFilter >> 16U) << SHIFT_TAB_ICxx[iChannel]);
 8009888:	619a      	str	r2, [r3, #24]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800988a:	611c      	str	r4, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800988c:	68da      	ldr	r2, [r3, #12]
 800988e:	f042 0201 	orr.w	r2, r2, #1
 8009892:	60da      	str	r2, [r3, #12]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009894:	681a      	ldr	r2, [r3, #0]
 8009896:	f042 0201 	orr.w	r2, r2, #1
 800989a:	601a      	str	r2, [r3, #0]

    /* Enable the counting timer */
    LL_TIM_EnableCounter(TIMx);

    /* Erase speed buffer */
    bufferSize = pHandle->SpeedBufferSize;
 800989c:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74

    for (index = 0U; index < bufferSize; index++)
 80098a0:	b12a      	cbz	r2, 80098ae <ENC_Init+0x72>
      pHandle->DeltaCapturesBuffer[index] = 0;
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80098a2:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->DeltaCapturesBuffer[index] = 0;
 80098a6:	0092      	lsls	r2, r2, #2
 80098a8:	3028      	adds	r0, #40	@ 0x28
 80098aa:	f001 bcd3 	b.w	800b254 <memset>
}
 80098ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b2:	4770      	bx	lr

080098b4 <ENC_Clear>:
  *         This function must be called before starting the motor to initialize
  *         the speed measurement process.
  * @param  pHandle: handler of the current instance of the encoder component
  */
__weak void ENC_Clear(ENCODER_Handle_t *pHandle)
{
 80098b4:	b510      	push	{r4, lr}
  else
  {
#endif
    uint8_t index;

    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80098b6:	f890 2074 	ldrb.w	r2, [r0, #116]	@ 0x74
{
 80098ba:	4604      	mov	r4, r0
    for (index = 0u; index < pHandle->SpeedBufferSize; index++)
 80098bc:	b122      	cbz	r2, 80098c8 <ENC_Clear+0x14>
    {
      pHandle->DeltaCapturesBuffer[index] = 0;
 80098be:	0092      	lsls	r2, r2, #2
 80098c0:	2100      	movs	r1, #0
 80098c2:	3028      	adds	r0, #40	@ 0x28
 80098c4:	f001 fcc6 	bl	800b254 <memset>
    }
    pHandle->SensorIsReliable = true;
 80098c8:	2301      	movs	r3, #1
 80098ca:	f884 3075 	strb.w	r3, [r4, #117]	@ 0x75
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 80098ce:	bd10      	pop	{r4, pc}

080098d0 <ENC_CalcAngle>:
  *         of the instantaneous value of the timer counter.
  * @param  pHandle: handler of the current instance of the encoder component
  * @retval Measured electrical angle in [s16degree](measurement_units.md) format.
  */
__weak int16_t ENC_CalcAngle(ENCODER_Handle_t *pHandle)
{
 80098d0:	b410      	push	{r4}
    int16_t mecAngle; /* s16degree format */
    uint32_t uwtemp1;
    int32_t wtemp1;
    /* PR 52926 We need to keep only the 16 LSB, bit 31 could be at 1
     if the overflow occurs just after the entry in the High frequency task */
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80098d2:	6a02      	ldr	r2, [r0, #32]
    wtemp1 = (int32_t)uwtemp1 / 65536;
#endif
    /* Computes and stores the rotor mechanical angle */
    mecAngle = (int16_t)wtemp1;

    int16_t hMecAnglePrev = pHandle->_Super.hMecAngle;
 80098d4:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
  return (uint32_t)(READ_REG(TIMx->CNT));
 80098d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
{
 80098da:	4603      	mov	r3, r0
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80098dc:	b292      	uxth	r2, r2
 80098de:	6e9c      	ldr	r4, [r3, #104]	@ 0x68

    pHandle->_Super.hMecAngle = mecAngle;

    /* Computes and stores the rotor electrical angle */
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80098e0:	7840      	ldrb	r0, [r0, #1]
    uwtemp1 = (LL_TIM_GetCounter(pHandle->TIMx) & 0xffffU) * (pHandle->U32MAXdivPulseNumber);
 80098e2:	fb04 f202 	mul.w	r2, r4, r2
    wtemp1 = (int32_t)uwtemp1 >> 16U;  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80098e6:	1412      	asrs	r2, r2, #16
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80098e8:	fb02 f000 	mul.w	r0, r2, r0

    pHandle->_Super.hElAngle = elAngle;

    int16_t hMecSpeedDpp = mecAngle - hMecAnglePrev;
 80098ec:	1a51      	subs	r1, r2, r1
    mecAngle = (int16_t)wtemp1;
 80098ee:	80da      	strh	r2, [r3, #6]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80098f0:	689a      	ldr	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  /*Returns rotor electrical angle*/
  return (elAngle);
}
 80098f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    elAngle = mecAngle * (int16_t)(pHandle->_Super.bElToMecRatio);
 80098f6:	b200      	sxth	r0, r0
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80098f8:	fa02 f281 	sxtah	r2, r2, r1
    pHandle->_Super.hElAngle = elAngle;
 80098fc:	8098      	strh	r0, [r3, #4]
    pHandle->_Super.wMecAngle += ((int32_t)hMecSpeedDpp);
 80098fe:	609a      	str	r2, [r3, #8]
}
 8009900:	4770      	bx	lr
 8009902:	bf00      	nop

08009904 <ENC_CalcAvrgMecSpeedUnit>:
  * @param  pMecSpeedUnit pointer used to return the rotor average mechanical speed
  *         expressed in the unit defined by #SPEED_UNIT
  * @retval true = sensor information is reliable. false = sensor information is not reliable
  */
__weak bool ENC_CalcAvrgMecSpeedUnit(ENCODER_Handle_t *pHandle, int16_t *pMecSpeedUnit)
{
 8009904:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t wtemp2;
    uint32_t OverflowCntSample;
    uint32_t CntCapture;
    uint32_t directionSample;
    int32_t wOverallAngleVariation = 0;
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8009906:	6a02      	ldr	r2, [r0, #32]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009908:	68d4      	ldr	r4, [r2, #12]
 800990a:	f024 0401 	bic.w	r4, r4, #1
{
 800990e:	4603      	mov	r3, r0
    uint8_t bBufferSize = pHandle->SpeedBufferSize;
 8009910:	f890 0074 	ldrb.w	r0, [r0, #116]	@ 0x74
 8009914:	60d4      	str	r4, [r2, #12]
  return (uint32_t)(READ_REG(TIMx->CNT));
 8009916:	6a54      	ldr	r4, [r2, #36]	@ 0x24
#ifdef TIM_CNT_UIFCPY
    /* disable Interrupt generation */
    LL_TIM_DisableIT_UPDATE(TIMx);
#endif
    CntCapture = LL_TIM_GetCounter(TIMx);
    OverflowCntSample = pHandle->TimerOverflowNb;
 8009918:	f8b3 5070 	ldrh.w	r5, [r3, #112]	@ 0x70
    pHandle->TimerOverflowNb = 0;
    directionSample = LL_TIM_GetDirection(TIMx);
#ifdef TIM_CNT_UIFCPY
    OFbit = __LL_TIM_GETFLAG_UIFCPY(CntCapture);
    if (0U == OFbit)
 800991c:	ea5f 7ed4 	movs.w	lr, r4, lsr #31
    pHandle->TimerOverflowNb = 0;
 8009920:	f04f 0600 	mov.w	r6, #0
 8009924:	f8a3 6070 	strh.w	r6, [r3, #112]	@ 0x70
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009928:	bf18      	it	ne
 800992a:	f06f 0701 	mvnne.w	r7, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 800992e:	6816      	ldr	r6, [r2, #0]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009930:	bf18      	it	ne
 8009932:	6117      	strne	r7, [r2, #16]
      into accout, we must not clear the interrupt in order to accumulate it */
      LL_TIM_ClearFlag_UPDATE(TIMx);
    }

    LL_TIM_EnableIT_UPDATE(TIMx);
    CLEAR_BIT(CntCapture, TIM_CNT_UIFCPY);
 8009934:	f024 4c00 	bic.w	ip, r4, #2147483648	@ 0x80000000
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009938:	68d4      	ldr	r4, [r2, #12]
    OverflowCntSample = pHandle->TimerOverflowNb;
 800993a:	b2ad      	uxth	r5, r5
 800993c:	f044 0401 	orr.w	r4, r4, #1

    /* If UIFCPY is not present, OverflowCntSample can not be used safely for
    speed computation, but we still use it to check that we do not exceed one overflow
    (sample frequency not less than mechanical motor speed */

    if ((OverflowCntSample + OFbit) > ENC_MAX_OVERFLOW_NB)
 8009940:	44ae      	add	lr, r5
 8009942:	60d4      	str	r4, [r2, #12]
 8009944:	f5be 6f00 	cmp.w	lr, #2048	@ 0x800
      /* If UIFCPY not present Overflow counter can not be safely used -> limitation to 1 OF */
#ifndef TIM_CNT_UIFCPY
      OverflowCntSample = (CntCapture > pHandle->PreviousCapture) ? 1 : 0;
#endif
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8009948:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 800994c:	f8b3 506e 	ldrh.w	r5, [r3, #110]	@ 0x6e
    {
      /* Nothing to do */
    }

    /* Checks the reliability status, then stores and returns it */
    if (pHandle->TimerOverflowError)
 8009950:	bf94      	ite	ls
 8009952:	f893 407d 	ldrbls.w	r4, [r3, #125]	@ 0x7d
      pHandle->TimerOverflowError = true;
 8009956:	2401      	movhi	r4, #1
  return (uint32_t)(READ_BIT(TIMx->CR1, TIM_CR1_DIR));
 8009958:	f006 0610 	and.w	r6, r6, #16
 800995c:	bf88      	it	hi
 800995e:	f883 407d 	strbhi.w	r4, [r3, #125]	@ 0x7d
        ((int32_t)CntCapture) - ((int32_t)pHandle->PreviousCapture)
 8009962:	ebac 0202 	sub.w	r2, ip, r2
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8009966:	fb05 fe0e 	mul.w	lr, r5, lr
    if (LL_TIM_COUNTERDIRECTION_DOWN == directionSample)
 800996a:	2e00      	cmp	r6, #0
 800996c:	f000 808c 	beq.w	8009a88 <ENC_CalcAvrgMecSpeedUnit+0x184>
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009970:	f893 607c 	ldrb.w	r6, [r3, #124]	@ 0x7c
 8009974:	360a      	adds	r6, #10
        - ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8009976:	eba2 020e 	sub.w	r2, r2, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 800997a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800997e:	2800      	cmp	r0, #0
 8009980:	f000 808b 	beq.w	8009a9a <ENC_CalcAvrgMecSpeedUnit+0x196>
 8009984:	2801      	cmp	r0, #1
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009986:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009988:	d039      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800998a:	6ade      	ldr	r6, [r3, #44]	@ 0x2c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800998c:	2802      	cmp	r0, #2
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800998e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009990:	d035      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009992:	6b1e      	ldr	r6, [r3, #48]	@ 0x30
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009994:	2803      	cmp	r0, #3
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 8009996:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009998:	d031      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800999a:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 800999c:	2804      	cmp	r0, #4
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 800999e:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099a0:	d02d      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099a2:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099a4:	2805      	cmp	r0, #5
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099a6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099a8:	d029      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099aa:	6bde      	ldr	r6, [r3, #60]	@ 0x3c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099ac:	2806      	cmp	r0, #6
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099ae:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099b0:	d025      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099b2:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099b4:	2807      	cmp	r0, #7
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099b6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099b8:	d021      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099ba:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099bc:	2808      	cmp	r0, #8
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099be:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099c0:	d01d      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099c2:	6c9e      	ldr	r6, [r3, #72]	@ 0x48
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099c4:	2809      	cmp	r0, #9
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099c6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099c8:	d019      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099ca:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099cc:	280a      	cmp	r0, #10
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099ce:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099d0:	d015      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099d2:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099d4:	280b      	cmp	r0, #11
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099d6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099d8:	d011      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099da:	6d5e      	ldr	r6, [r3, #84]	@ 0x54
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099dc:	280c      	cmp	r0, #12
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099de:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099e0:	d00d      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099e2:	6d9e      	ldr	r6, [r3, #88]	@ 0x58
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099e4:	280d      	cmp	r0, #13
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099e6:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099e8:	d009      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099ea:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099ec:	280e      	cmp	r0, #14
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099ee:	4432      	add	r2, r6
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099f0:	d005      	beq.n	80099fe <ENC_CalcAvrgMecSpeedUnit+0xfa>
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099f2:	6e1e      	ldr	r6, [r3, #96]	@ 0x60
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 80099f4:	280f      	cmp	r0, #15
      wOverallAngleVariation += pHandle->DeltaCapturesBuffer[bBufferIndex];
 80099f6:	4432      	add	r2, r6
 80099f8:	bf1c      	itt	ne
 80099fa:	6e5e      	ldrne	r6, [r3, #100]	@ 0x64
 80099fc:	1992      	addne	r2, r2, r6
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 80099fe:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
    wtemp2 = ((int32_t)pHandle->PulseNumber) * ((int32_t)pHandle->SpeedBufferSize);
 8009a00:	fb00 f505 	mul.w	r5, r0, r5
    wtemp1 = wOverallAngleVariation * ((int32_t)pHandle->SpeedSamplingFreqUnit);
 8009a04:	fb06 f202 	mul.w	r2, r6, r2
    wtemp1 = ((0 == wtemp2) ? wtemp1 : (wtemp1 / wtemp2));
 8009a08:	b10d      	cbz	r5, 8009a0e <ENC_CalcAvrgMecSpeedUnit+0x10a>
 8009a0a:	fb92 f2f5 	sdiv	r2, r2, r5
    *pMecSpeedUnit = (int16_t)wtemp1;
 8009a0e:	b216      	sxth	r6, r2
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8009a10:	b292      	uxth	r2, r2
    *pMecSpeedUnit = (int16_t)wtemp1;
 8009a12:	800e      	strh	r6, [r1, #0]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a14:	f893 507c 	ldrb.w	r5, [r3, #124]	@ 0x7c
    pHandle->DeltaCapturesIndex++;
 8009a18:	f893 e07c 	ldrb.w	lr, [r3, #124]	@ 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a1c:	350a      	adds	r5, #10
    pHandle->DeltaCapturesIndex++;
 8009a1e:	f10e 0e01 	add.w	lr, lr, #1
 8009a22:	fa5f fe8e 	uxtb.w	lr, lr
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a26:	f853 5025 	ldr.w	r5, [r3, r5, lsl #2]
    pHandle->DeltaCapturesIndex++;
 8009a2a:	f883 e07c 	strb.w	lr, [r3, #124]	@ 0x7c
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8009a2e:	f8b3 e00c 	ldrh.w	lr, [r3, #12]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wtemp1;
 8009a32:	819e      	strh	r6, [r3, #12]
    pHandle->_Super.hMecAccelUnitP = (int16_t)(wtemp1 - pHandle->_Super.hAvrMecSpeedUnit);
 8009a34:	eba2 020e 	sub.w	r2, r2, lr
 8009a38:	825a      	strh	r2, [r3, #18]
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a3a:	f8b3 206c 	ldrh.w	r2, [r3, #108]	@ 0x6c
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8009a3e:	f893 607c 	ldrb.w	r6, [r3, #124]	@ 0x7c
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a42:	fb05 f202 	mul.w	r2, r5, r2
             * ((int32_t)pHandle->_Super.bElToMecRatio);
 8009a46:	785d      	ldrb	r5, [r3, #1]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8009a48:	f64f 7eff 	movw	lr, #65535	@ 0xffff
 8009a4c:	45f4      	cmp	ip, lr
    wtemp1 = pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] * ((int32_t)pHandle->SpeedSamplingFreqHz)
 8009a4e:	fb05 f202 	mul.w	r2, r5, r2
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8009a52:	69dd      	ldr	r5, [r3, #28]
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8009a54:	bf28      	it	cs
 8009a56:	46f4      	movcs	ip, lr
    if (pHandle->DeltaCapturesIndex >= pHandle->SpeedBufferSize)
 8009a58:	4286      	cmp	r6, r0
    pHandle->PreviousCapture = (CntCapture >= (uint32_t)65535) ? 65535U : (uint16_t)CntCapture;
 8009a5a:	f8a3 c072 	strh.w	ip, [r3, #114]	@ 0x72
    wtemp1 /= ((int32_t)pHandle->PulseNumber);
 8009a5e:	f8b3 c06e 	ldrh.w	ip, [r3, #110]	@ 0x6e
 8009a62:	fb92 f2fc 	sdiv	r2, r2, ip
    wtemp1 *= ((int32_t)pHandle->_Super.DPPConvFactor);
 8009a66:	fb05 f202 	mul.w	r2, r5, r2
    wtemp1 /= ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8009a6a:	8b5d      	ldrh	r5, [r3, #26]
 8009a6c:	fb92 f2f5 	sdiv	r2, r2, r5
    pHandle->_Super.hElSpeedDpp = (int16_t)wtemp1;
 8009a70:	81da      	strh	r2, [r3, #14]
      pHandle->DeltaCapturesIndex = 0U;
 8009a72:	bf24      	itt	cs
 8009a74:	2200      	movcs	r2, #0
 8009a76:	f883 207c 	strbcs.w	r2, [r3, #124]	@ 0x7c
    if (pHandle->TimerOverflowError)
 8009a7a:	b18c      	cbz	r4, 8009aa0 <ENC_CalcAvrgMecSpeedUnit+0x19c>
    {
      bReliability = false;
      pHandle->SensorIsReliable = false;
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8009a7c:	78da      	ldrb	r2, [r3, #3]
 8009a7e:	701a      	strb	r2, [r3, #0]
      pHandle->SensorIsReliable = false;
 8009a80:	2000      	movs	r0, #0
 8009a82:	f883 0075 	strb.w	r0, [r3, #117]	@ 0x75
    }
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
  return (bReliability);
}
 8009a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009a88:	f893 607c 	ldrb.w	r6, [r3, #124]	@ 0x7c
 8009a8c:	360a      	adds	r6, #10
        + ((((int32_t)OverflowCntSample) + (int32_t)OFbit) * ((int32_t)pHandle->PulseNumber));
 8009a8e:	4472      	add	r2, lr
      pHandle->DeltaCapturesBuffer[pHandle->DeltaCapturesIndex] =
 8009a90:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
    for (bBufferIndex = 0U; bBufferIndex < bBufferSize; bBufferIndex++)
 8009a94:	2800      	cmp	r0, #0
 8009a96:	f47f af75 	bne.w	8009984 <ENC_CalcAvrgMecSpeedUnit+0x80>
 8009a9a:	4602      	mov	r2, r0
 8009a9c:	4606      	mov	r6, r0
 8009a9e:	e7b8      	b.n	8009a12 <ENC_CalcAvrgMecSpeedUnit+0x10e>
}
 8009aa0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      bReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, pMecSpeedUnit);
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f001 ba53 	b.w	800af50 <SPD_IsMecSpeedReliable>
 8009aaa:	bf00      	nop

08009aac <ENC_SetMecAngle>:
    uint16_t hAngleCounts;
    uint16_t hMecAngleuint;
    int16_t localhMecAngle = hMecAngle;

    pHandle->_Super.hMecAngle = localhMecAngle;
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8009aac:	7843      	ldrb	r3, [r0, #1]
 8009aae:	b28a      	uxth	r2, r1
 8009ab0:	fb01 f303 	mul.w	r3, r1, r3
    if (localhMecAngle < 0)
 8009ab4:	2900      	cmp	r1, #0
{
 8009ab6:	b410      	push	{r4}
 8009ab8:	bfb8      	it	lt
 8009aba:	f102 32ff 	addlt.w	r2, r2, #4294967295
    pHandle->_Super.hElAngle = localhMecAngle * (int16_t)pHandle->_Super.bElToMecRatio;
 8009abe:	8083      	strh	r3, [r0, #4]
    else
    {
      hMecAngleuint = (uint16_t)localhMecAngle;
    }

    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8009ac0:	f8b0 306e 	ldrh.w	r3, [r0, #110]	@ 0x6e
    pHandle->_Super.hMecAngle = localhMecAngle;
 8009ac4:	80c1      	strh	r1, [r0, #6]
 8009ac6:	bfb8      	it	lt
 8009ac8:	b292      	uxthlt	r2, r2
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8009aca:	4905      	ldr	r1, [pc, #20]	@ (8009ae0 <ENC_SetMecAngle+0x34>)
    TIM_TypeDef *TIMx = pHandle->TIMx;
 8009acc:	6a04      	ldr	r4, [r0, #32]
    hAngleCounts = (uint16_t)((((uint32_t)hMecAngleuint) * ((uint32_t)pHandle->PulseNumber)) / 65535U);
 8009ace:	fb02 f303 	mul.w	r3, r2, r3
 8009ad2:	fba1 1303 	umull	r1, r3, r1, r3
 8009ad6:	0bdb      	lsrs	r3, r3, #15

    TIMx->CNT = (uint16_t)hAngleCounts;
 8009ad8:	6263      	str	r3, [r4, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_ENC_SPD_POS_FDB
  }
#endif
}
 8009ada:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	80008001 	.word	0x80008001

08009ae4 <ENC_IRQHandler>:
/**
  * @brief  TIMER ENCODER Overflow interrupt counter update
  * @param  pHandleVoid: handler of the current instance of the encoder component
  */
__weak void *ENC_IRQHandler(void *pHandleVoid)
{
 8009ae4:	4602      	mov	r2, r0
  /* Updates the number of overflows occurred */
  /* The handling of overflow error is done in ENC_CalcAvrgMecSpeedUnit */
  pHandle->TimerOverflowNb += 1U;

  return (MC_NULL);
}
 8009ae6:	2000      	movs	r0, #0
  pHandle->TimerOverflowNb += 1U;
 8009ae8:	f8b2 3070 	ldrh.w	r3, [r2, #112]	@ 0x70
 8009aec:	3301      	adds	r3, #1
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	f8a2 3070 	strh.w	r3, [r2, #112]	@ 0x70
}
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop

08009af8 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8009af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009afa:	7fc3      	ldrb	r3, [r0, #31]
 8009afc:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8009b00:	429a      	cmp	r2, r3
{
 8009b02:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009b04:	d002      	beq.n	8009b0c <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8009b06:	3301      	adds	r3, #1
 8009b08:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8009b0c:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8009b0e:	2300      	movs	r3, #0
 8009b10:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8009b12:	2d00      	cmp	r5, #0
 8009b14:	d02f      	beq.n	8009b76 <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009b16:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009b18:	8ba2      	ldrh	r2, [r4, #28]
 8009b1a:	42aa      	cmp	r2, r5
 8009b1c:	d31a      	bcc.n	8009b54 <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009b1e:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009b22:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009b24:	2e00      	cmp	r6, #0
 8009b26:	d07a      	beq.n	8009c1e <MCPA_dataLog+0x126>
 8009b28:	68a2      	ldr	r2, [r4, #8]
 8009b2a:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8009b2e:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8009b30:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009b34:	8800      	ldrh	r0, [r0, #0]
 8009b36:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009b3a:	8b25      	ldrh	r5, [r4, #24]
 8009b3c:	3502      	adds	r5, #2
 8009b3e:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009b40:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009b42:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009b44:	d1f4      	bne.n	8009b30 <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 8009b46:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009b4a:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8009b4c:	2bfd      	cmp	r3, #253	@ 0xfd
 8009b4e:	d96b      	bls.n	8009c28 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009b50:	4295      	cmp	r5, r2
 8009b52:	d9da      	bls.n	8009b0a <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8009b54:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009b58:	2bfe      	cmp	r3, #254	@ 0xfe
 8009b5a:	d04a      	beq.n	8009bf2 <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009b5c:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8009b60:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8009b62:	8b22      	ldrh	r2, [r4, #24]
 8009b64:	6820      	ldr	r0, [r4, #0]
 8009b66:	3202      	adds	r2, #2
 8009b68:	2309      	movs	r3, #9
 8009b6a:	6845      	ldr	r5, [r0, #4]
 8009b6c:	b292      	uxth	r2, r2
 8009b6e:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8009b70:	2300      	movs	r3, #0
 8009b72:	8323      	strh	r3, [r4, #24]
}
 8009b74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009b76:	4601      	mov	r1, r0
 8009b78:	2209      	movs	r2, #9
 8009b7a:	f851 0b14 	ldr.w	r0, [r1], #20
 8009b7e:	6803      	ldr	r3, [r0, #0]
 8009b80:	4798      	blx	r3
 8009b82:	b390      	cbz	r0, 8009bea <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009b84:	4b3a      	ldr	r3, [pc, #232]	@ (8009c70 <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8009b86:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009b8c:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8009b90:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8009b94:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8009b98:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8009b9a:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8009b9c:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009b9e:	d101      	bne.n	8009ba4 <MCPA_dataLog+0xac>
 8009ba0:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009ba2:	e7b9      	b.n	8009b18 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009ba4:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009ba8:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009bac:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009bb0:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009bb4:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009bb8:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8009bbc:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009bbe:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8009bc0:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009bc4:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009bc8:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009bca:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8009bce:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009bd0:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009bd4:	f001 fb72 	bl	800b2bc <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8009bd8:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8009bdc:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8009be0:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8009be4:	441a      	add	r2, r3
 8009be6:	f001 fb69 	bl	800b2bc <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009bea:	8b25      	ldrh	r5, [r4, #24]
 8009bec:	2d00      	cmp	r5, #0
 8009bee:	d192      	bne.n	8009b16 <MCPA_dataLog+0x1e>
}
 8009bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009bf2:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8009bf6:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8009bfa:	4418      	add	r0, r3
 8009bfc:	4283      	cmp	r3, r0
 8009bfe:	daad      	bge.n	8009b5c <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009c00:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009c02:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009c04:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8009c08:	6812      	ldr	r2, [r2, #0]
 8009c0a:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c0c:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009c0e:	5cf3      	ldrb	r3, [r6, r3]
 8009c10:	442b      	add	r3, r5
 8009c12:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c14:	b2d3      	uxtb	r3, r2
 8009c16:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009c18:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c1a:	dbf3      	blt.n	8009c04 <MCPA_dataLog+0x10c>
 8009c1c:	e79e      	b.n	8009b5c <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8009c1e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009c22:	2bfd      	cmp	r3, #253	@ 0xfd
 8009c24:	f63f af71 	bhi.w	8009b0a <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009c28:	f894 0020 	ldrb.w	r0, [r4, #32]
 8009c2c:	4298      	cmp	r0, r3
 8009c2e:	d005      	beq.n	8009c3c <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8009c30:	3001      	adds	r0, #1
 8009c32:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009c36:	42aa      	cmp	r2, r5
 8009c38:	d390      	bcc.n	8009b5c <MCPA_dataLog+0x64>
}
 8009c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c3c:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8009c40:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8009c42:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c44:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 8009c46:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c4a:	daf4      	bge.n	8009c36 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009c4c:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009c50:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009c54:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009c5c:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c60:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009c62:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c64:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009c66:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c68:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009c6a:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009c6c:	dbf2      	blt.n	8009c54 <MCPA_dataLog+0x15c>
 8009c6e:	e76f      	b.n	8009b50 <MCPA_dataLog+0x58>
 8009c70:	20001b60 	.word	0x20001b60

08009c74 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8009c74:	8b03      	ldrh	r3, [r0, #24]
 8009c76:	b19b      	cbz	r3, 8009ca0 <MCPA_flushDataLog+0x2c>
{
 8009c78:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8009c7a:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009c7e:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8009c80:	2afe      	cmp	r2, #254	@ 0xfe
 8009c82:	4604      	mov	r4, r0
 8009c84:	d00d      	beq.n	8009ca2 <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009c86:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009c8a:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009c8c:	8b22      	ldrh	r2, [r4, #24]
 8009c8e:	6820      	ldr	r0, [r4, #0]
 8009c90:	3202      	adds	r2, #2
 8009c92:	2309      	movs	r3, #9
 8009c94:	6845      	ldr	r5, [r0, #4]
 8009c96:	b292      	uxth	r2, r2
 8009c98:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8009c9a:	2300      	movs	r3, #0
 8009c9c:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009c9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ca0:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009ca2:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8009ca6:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8009caa:	4494      	add	ip, r2
 8009cac:	4562      	cmp	r2, ip
 8009cae:	daea      	bge.n	8009c86 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009cb0:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cb2:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009cb4:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8009cb8:	6800      	ldr	r0, [r0, #0]
 8009cba:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cbc:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cbe:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cc0:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cc2:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cc4:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cc6:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009cc8:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009cca:	dbf3      	blt.n	8009cb4 <MCPA_flushDataLog+0x40>
 8009ccc:	e7db      	b.n	8009c86 <MCPA_flushDataLog+0x12>
 8009cce:	bf00      	nop

08009cd0 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009cd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009cd4:	880f      	ldrh	r7, [r1, #0]
{
 8009cd6:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8009cd8:	2f00      	cmp	r7, #0
 8009cda:	d046      	beq.n	8009d6a <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8009cdc:	6803      	ldr	r3, [r0, #0]
 8009cde:	89db      	ldrh	r3, [r3, #14]
 8009ce0:	42bb      	cmp	r3, r7
 8009ce2:	d33f      	bcc.n	8009d64 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8009ce4:	788b      	ldrb	r3, [r1, #2]
 8009ce6:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8009cea:	f891 8003 	ldrb.w	r8, [r1, #3]
 8009cee:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8009cf2:	790b      	ldrb	r3, [r1, #4]
 8009cf4:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009cf8:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009cfa:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009cfc:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009d00:	4443      	add	r3, r8
 8009d02:	4293      	cmp	r3, r2
 8009d04:	dc57      	bgt.n	8009db6 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8009d06:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d057      	beq.n	8009dbc <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009d0c:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d10:	4645      	mov	r5, r8
 8009d12:	e011      	b.n	8009d38 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009d14:	68e3      	ldr	r3, [r4, #12]
 8009d16:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d18:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d1a:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009d1e:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d22:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d24:	f105 0c01 	add.w	ip, r5, #1
 8009d28:	fa5f f58c 	uxtb.w	r5, ip
 8009d2c:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d2e:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d30:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8009d32:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009d36:	da11      	bge.n	8009d5c <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009d38:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8009d3c:	6861      	ldr	r1, [r4, #4]
 8009d3e:	4648      	mov	r0, r9
 8009d40:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009d44:	f7fa fd2a 	bl	800479c <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009d48:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009d4c:	42ab      	cmp	r3, r5
 8009d4e:	f04f 0002 	mov.w	r0, #2
 8009d52:	d8df      	bhi.n	8009d14 <MCPA_cfgLog+0x44>
 8009d54:	4648      	mov	r0, r9
 8009d56:	f7fa fd15 	bl	8004784 <RI_GetIDSize>
 8009d5a:	e7db      	b.n	8009d14 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8009d5c:	f108 0206 	add.w	r2, r8, #6
 8009d60:	4297      	cmp	r7, r2
 8009d62:	d210      	bcs.n	8009d86 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8009d64:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8009d66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8009d6a:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8009d6c:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8009d70:	b9ab      	cbnz	r3, 8009d9e <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8009d72:	2300      	movs	r3, #0
 8009d74:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8009d76:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8009d7a:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8009d7c:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8009d80:	2000      	movs	r0, #0
}
 8009d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8009d86:	3f02      	subs	r7, #2
 8009d88:	eba7 0708 	sub.w	r7, r7, r8
 8009d8c:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8009d8e:	7833      	ldrb	r3, [r6, #0]
 8009d90:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d1f3      	bne.n	8009d80 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009d98:	8b23      	ldrh	r3, [r4, #24]
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d0e9      	beq.n	8009d72 <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009d9e:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009da0:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009da4:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009da6:	8b22      	ldrh	r2, [r4, #24]
 8009da8:	6820      	ldr	r0, [r4, #0]
 8009daa:	3202      	adds	r2, #2
 8009dac:	6845      	ldr	r5, [r0, #4]
 8009dae:	b292      	uxth	r2, r2
 8009db0:	2309      	movs	r3, #9
 8009db2:	47a8      	blx	r5
 8009db4:	e7dd      	b.n	8009d72 <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8009db6:	200a      	movs	r0, #10
}
 8009db8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009dbc:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009dbe:	4698      	mov	r8, r3
 8009dc0:	e7ce      	b.n	8009d60 <MCPA_cfgLog+0x90>
 8009dc2:	bf00      	nop

08009dc4 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 8009dc4:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009dc8:	8843      	ldrh	r3, [r0, #2]
 8009dca:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 8009dcc:	2900      	cmp	r1, #0
 8009dce:	dd08      	ble.n	8009de2 <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d804      	bhi.n	8009dde <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8009dd4:	89c2      	ldrh	r2, [r0, #14]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d908      	bls.n	8009dec <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 8009dda:	2000      	movs	r0, #0
 8009ddc:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 8009dde:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8009de0:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8009de2:	4293      	cmp	r3, r2
 8009de4:	d3fb      	bcc.n	8009dde <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8009de6:	89c2      	ldrh	r2, [r0, #14]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d3f6      	bcc.n	8009dda <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 8009dec:	8900      	ldrh	r0, [r0, #8]
 8009dee:	4770      	bx	lr

08009df0 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009df0:	7803      	ldrb	r3, [r0, #0]
 8009df2:	b94b      	cbnz	r3, 8009e08 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8009df4:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	bfcc      	ite	gt
 8009dfc:	2300      	movgt	r3, #0
 8009dfe:	2301      	movle	r3, #1
 8009e00:	425b      	negs	r3, r3
 8009e02:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8009e04:	8043      	strh	r3, [r0, #2]
}
 8009e06:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009e08:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 8009e0a:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	8102      	strh	r2, [r0, #8]
}
 8009e10:	4770      	bx	lr
 8009e12:	bf00      	nop

08009e14 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8009e14:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009e16:	7803      	ldrb	r3, [r0, #0]
{
 8009e18:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8009e1a:	b983      	cbnz	r3, 8009e3e <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8009e1c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009e20:	4299      	cmp	r1, r3
 8009e22:	d007      	beq.n	8009e34 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009e24:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8009e26:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009e28:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8009e2a:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8009e2e:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8009e32:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009e34:	4620      	mov	r0, r4
 8009e36:	f7ff ffc5 	bl	8009dc4 <NTC_SetFaultState>
 8009e3a:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009e40:	8120      	strh	r0, [r4, #8]
}
 8009e42:	bd10      	pop	{r4, pc}

08009e44 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8009e44:	7803      	ldrb	r3, [r0, #0]
 8009e46:	b95b      	cbnz	r3, 8009e60 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8009e48:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8009e4a:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8009e4c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009e50:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8009e52:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8009e54:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009e58:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009e5c:	b200      	sxth	r0, r0
 8009e5e:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8009e60:	88c0      	ldrh	r0, [r0, #6]
}
 8009e62:	b200      	sxth	r0, r0
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop

08009e68 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8009e68:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009e6a:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009e6c:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009e6e:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009e70:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8009e72:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8009e74:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e76:	4770      	bx	lr

08009e78 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8009e78:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e7a:	4770      	bx	lr

08009e7c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8009e7c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e7e:	4770      	bx	lr

08009e80 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8009e80:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009e84:	4770      	bx	lr
 8009e86:	bf00      	nop

08009e88 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8009e88:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop

08009e90 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8009e90:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8009e92:	4770      	bx	lr

08009e94 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8009e94:	8b80      	ldrh	r0, [r0, #28]
 8009e96:	4770      	bx	lr

08009e98 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009e98:	2301      	movs	r3, #1
 8009e9a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009e9c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009e9e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009ea0:	4770      	bx	lr
 8009ea2:	bf00      	nop

08009ea4 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8009ea4:	8bc0      	ldrh	r0, [r0, #30]
 8009ea6:	4770      	bx	lr

08009ea8 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8009ea8:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009eaa:	4770      	bx	lr

08009eac <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8009eac:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009eae:	4770      	bx	lr

08009eb0 <PID_SetKIDivisorPOW2>:
{
 8009eb0:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009eb2:	2301      	movs	r3, #1
{
 8009eb4:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009eb6:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009eb8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009ebc:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8009ebe:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009ec0:	40a1      	lsls	r1, r4
{
 8009ec2:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009ec4:	f7ff fff2 	bl	8009eac <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8009ec8:	4902      	ldr	r1, [pc, #8]	@ (8009ed4 <PID_SetKIDivisorPOW2+0x24>)
 8009eca:	4628      	mov	r0, r5
 8009ecc:	40a1      	lsls	r1, r4
 8009ece:	f7ff ffeb 	bl	8009ea8 <PID_SetLowerIntegralTermLimit>
}
 8009ed2:	bd38      	pop	{r3, r4, r5, pc}
 8009ed4:	ffff8001 	.word	0xffff8001

08009ed8 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8009ed8:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009eda:	4770      	bx	lr

08009edc <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8009edc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop

08009ee4 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8009ee4:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8009ee6:	4770      	bx	lr

08009ee8 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009ee8:	2301      	movs	r3, #1
 8009eea:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009eec:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009eee:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009ef0:	4770      	bx	lr
 8009ef2:	bf00      	nop

08009ef4 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009ef4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8009ef8:	4603      	mov	r3, r0
 8009efa:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8009efc:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009f00:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009f04:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009f08:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8009f0c:	b17c      	cbz	r4, 8009f2e <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009f0e:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009f12:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8009f16:	eb15 0e01 	adds.w	lr, r5, r1
 8009f1a:	d41d      	bmi.n	8009f58 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8009f1c:	420d      	tst	r5, r1
 8009f1e:	4914      	ldr	r1, [pc, #80]	@ (8009f70 <PI_Controller+0x7c>)
 8009f20:	bf48      	it	mi
 8009f22:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009f24:	45a6      	cmp	lr, r4
 8009f26:	dc02      	bgt.n	8009f2e <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009f28:	691c      	ldr	r4, [r3, #16]
 8009f2a:	4574      	cmp	r4, lr
 8009f2c:	dd1d      	ble.n	8009f6a <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8009f2e:	8b99      	ldrh	r1, [r3, #28]
 8009f30:	410a      	asrs	r2, r1
 8009f32:	8bd9      	ldrh	r1, [r3, #30]
 8009f34:	fa44 f101 	asr.w	r1, r4, r1
 8009f38:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8009f3a:	4290      	cmp	r0, r2
 8009f3c:	da03      	bge.n	8009f46 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8009f3e:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8009f40:	4414      	add	r4, r2
 8009f42:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009f44:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8009f46:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8009f48:	bfc5      	ittet	gt
 8009f4a:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8009f4e:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8009f50:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8009f52:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8009f54:	609c      	str	r4, [r3, #8]
}
 8009f56:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8009f58:	2d00      	cmp	r5, #0
 8009f5a:	dde3      	ble.n	8009f24 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8009f5c:	2900      	cmp	r1, #0
 8009f5e:	dde1      	ble.n	8009f24 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009f60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009f64:	428c      	cmp	r4, r1
 8009f66:	d1e2      	bne.n	8009f2e <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8009f68:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8009f6a:	4674      	mov	r4, lr
 8009f6c:	e7df      	b.n	8009f2e <PI_Controller+0x3a>
 8009f6e:	bf00      	nop
 8009f70:	80000001 	.word	0x80000001

08009f74 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009f74:	6882      	ldr	r2, [r0, #8]
{
 8009f76:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009f78:	89d1      	ldrh	r1, [r2, #14]
 8009f7a:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8009f7e:	8993      	ldrh	r3, [r2, #12]
 8009f80:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009f84:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8009f88:	fb13 230c 	smlabb	r3, r3, ip, r2
 8009f8c:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009f8e:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8009f92:	bfbc      	itt	lt
 8009f94:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009f98:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009f9a:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8009f9e:	bf48      	it	mi
 8009fa0:	330f      	addmi	r3, #15
 8009fa2:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8009fa6:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8009fa8:	f85d fb04 	ldr.w	pc, [sp], #4

08009fac <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8009fac:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009fae:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009fb2:	ee07 3a90 	vmov	s15, r3
{
 8009fb6:	ed2d 8b02 	vpush	{d8}
 8009fba:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009fbc:	68c0      	ldr	r0, [r0, #12]
 8009fbe:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009fc2:	f7ff fbbb 	bl	800973c <VBS_GetAvBusVoltage_V>
 8009fc6:	edd4 7a01 	vldr	s15, [r4, #4]
 8009fca:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8009fce:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009fd2:	ee00 0a10 	vmov	s0, r0
 8009fd6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8009fda:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009fde:	bd10      	pop	{r4, pc}

08009fe0 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009fe0:	6883      	ldr	r3, [r0, #8]
 8009fe2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009fe6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8009fea:	b082      	sub	sp, #8
 8009fec:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009fee:	6883      	ldr	r3, [r0, #8]
 8009ff0:	00d9      	lsls	r1, r3, #3
 8009ff2:	d418      	bmi.n	800a026 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8009ff4:	4b26      	ldr	r3, [pc, #152]	@ (800a090 <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 8009ff6:	6882      	ldr	r2, [r0, #8]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	4926      	ldr	r1, [pc, #152]	@ (800a094 <R3_2_ADCxInit+0xb4>)
 8009ffc:	099b      	lsrs	r3, r3, #6
 8009ffe:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 800a002:	fba1 1303 	umull	r1, r3, r1, r3
 800a006:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800a00a:	099b      	lsrs	r3, r3, #6
 800a00c:	005b      	lsls	r3, r3, #1
 800a00e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800a012:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 800a014:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a016:	9b01      	ldr	r3, [sp, #4]
 800a018:	b12b      	cbz	r3, 800a026 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800a01a:	9b01      	ldr	r3, [sp, #4]
 800a01c:	3b01      	subs	r3, #1
 800a01e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a020:	9b01      	ldr	r3, [sp, #4]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d1f9      	bne.n	800a01a <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 800a026:	6883      	ldr	r3, [r0, #8]
 800a028:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800a02c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a030:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a034:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800a036:	6883      	ldr	r3, [r0, #8]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	dbfc      	blt.n	800a036 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a03c:	6803      	ldr	r3, [r0, #0]
 800a03e:	07da      	lsls	r2, r3, #31
 800a040:	d408      	bmi.n	800a054 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 800a042:	4a15      	ldr	r2, [pc, #84]	@ (800a098 <R3_2_ADCxInit+0xb8>)
 800a044:	6883      	ldr	r3, [r0, #8]
 800a046:	4013      	ands	r3, r2
 800a048:	f043 0301 	orr.w	r3, r3, #1
 800a04c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800a04e:	6803      	ldr	r3, [r0, #0]
 800a050:	07db      	lsls	r3, r3, #31
 800a052:	d5f7      	bpl.n	800a044 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 800a054:	6883      	ldr	r3, [r0, #8]
 800a056:	4a10      	ldr	r2, [pc, #64]	@ (800a098 <R3_2_ADCxInit+0xb8>)
 800a058:	4013      	ands	r3, r2
 800a05a:	f043 0308 	orr.w	r3, r3, #8
 800a05e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 800a060:	6883      	ldr	r3, [r0, #8]
 800a062:	4013      	ands	r3, r2
 800a064:	f043 0320 	orr.w	r3, r3, #32
 800a068:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800a06a:	68c3      	ldr	r3, [r0, #12]
 800a06c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a070:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a074:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a078:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800a07a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800a07c:	f023 030f 	bic.w	r3, r3, #15
 800a080:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 800a082:	6883      	ldr	r3, [r0, #8]
 800a084:	4013      	ands	r3, r2
 800a086:	f043 0304 	orr.w	r3, r3, #4
 800a08a:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 800a08c:	b002      	add	sp, #8
 800a08e:	4770      	bx	lr
 800a090:	200003d8 	.word	0x200003d8
 800a094:	053e2d63 	.word	0x053e2d63
 800a098:	7fffffc0 	.word	0x7fffffc0

0800a09c <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a09c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 800a0a0:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 800a0a4:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a0a6:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800a0a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800a0ac:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 800a0ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 800a0b0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 800a0b4:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a0b8:	6863      	ldr	r3, [r4, #4]
 800a0ba:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a0be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a0c2:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 800a0c4:	2a05      	cmp	r2, #5
 800a0c6:	f200 809d 	bhi.w	800a204 <R3_2_GetPhaseCurrents+0x168>
 800a0ca:	e8df f002 	tbb	[pc, r2]
 800a0ce:	1d37      	.short	0x1d37
 800a0d0:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a0d4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 800a0d8:	4a4e      	ldr	r2, [pc, #312]	@ (800a214 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a0da:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	db58      	blt.n	800a192 <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 800a0e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a0e4:	f280 8087 	bge.w	800a1f6 <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 800a0e8:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a0ec:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 800a0f0:	4d48      	ldr	r5, [pc, #288]	@ (800a214 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 800a0f2:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a0f6:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 800a0f8:	42aa      	cmp	r2, r5
 800a0fa:	da5b      	bge.n	800a1b4 <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 800a0fc:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a0fe:	fa1f f38c 	uxth.w	r3, ip
 800a102:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a106:	e030      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a108:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 800a10c:	4b41      	ldr	r3, [pc, #260]	@ (800a214 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a10e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a110:	429c      	cmp	r4, r3
 800a112:	db39      	blt.n	800a188 <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 800a114:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a118:	da62      	bge.n	800a1e0 <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 800a11a:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a11e:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a120:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 800a124:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a128:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800a12a:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800a12c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a130:	db39      	blt.n	800a1a6 <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 800a132:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a136:	804a      	strh	r2, [r1, #2]
 800a138:	4615      	mov	r5, r2
 800a13a:	e016      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a13c:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 800a140:	4b34      	ldr	r3, [pc, #208]	@ (800a214 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a142:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a144:	429c      	cmp	r4, r3
 800a146:	db1a      	blt.n	800a17e <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 800a148:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a14c:	da3d      	bge.n	800a1ca <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 800a14e:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a150:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a152:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 800a156:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a158:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 800a15a:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 800a15c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a160:	db19      	blt.n	800a196 <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 800a162:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a166:	800b      	strh	r3, [r1, #0]
 800a168:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a16a:	4413      	add	r3, r2
 800a16c:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800a16e:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 800a172:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a176:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a178:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 800a17c:	4770      	bx	lr
 800a17e:	461c      	mov	r4, r3
 800a180:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a184:	461d      	mov	r5, r3
 800a186:	e7e4      	b.n	800a152 <R3_2_GetPhaseCurrents+0xb6>
 800a188:	461c      	mov	r4, r3
 800a18a:	46a4      	mov	ip, r4
 800a18c:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a190:	e7c6      	b.n	800a120 <R3_2_GetPhaseCurrents+0x84>
 800a192:	4694      	mov	ip, r2
 800a194:	e7aa      	b.n	800a0ec <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 800a196:	4c1f      	ldr	r4, [pc, #124]	@ (800a214 <R3_2_GetPhaseCurrents+0x178>)
 800a198:	42a3      	cmp	r3, r4
 800a19a:	da26      	bge.n	800a1ea <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 800a19c:	800c      	strh	r4, [r1, #0]
 800a19e:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a1a2:	46a4      	mov	ip, r4
 800a1a4:	e7e1      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 800a1a6:	4d1b      	ldr	r5, [pc, #108]	@ (800a214 <R3_2_GetPhaseCurrents+0x178>)
 800a1a8:	42aa      	cmp	r2, r5
 800a1aa:	da27      	bge.n	800a1fc <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 800a1ac:	804d      	strh	r5, [r1, #2]
 800a1ae:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a1b2:	e7da      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 800a1b4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a1b8:	db0c      	blt.n	800a1d4 <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 800a1ba:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a1be:	461a      	mov	r2, r3
 800a1c0:	804b      	strh	r3, [r1, #2]
 800a1c2:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a1c4:	fa1f f38c 	uxth.w	r3, ip
 800a1c8:	e7cf      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
 800a1ca:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a1ce:	4614      	mov	r4, r2
 800a1d0:	4615      	mov	r5, r2
 800a1d2:	e7be      	b.n	800a152 <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 800a1d4:	b215      	sxth	r5, r2
 800a1d6:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a1d8:	fa1f f38c 	uxth.w	r3, ip
 800a1dc:	b292      	uxth	r2, r2
 800a1de:	e7c4      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
 800a1e0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a1e4:	461c      	mov	r4, r3
 800a1e6:	469c      	mov	ip, r3
 800a1e8:	e79a      	b.n	800a120 <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 800a1ea:	fa0f fc83 	sxth.w	ip, r3
 800a1ee:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	e7b9      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
 800a1f6:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800a1fa:	e777      	b.n	800a0ec <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 800a1fc:	b215      	sxth	r5, r2
 800a1fe:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a200:	b292      	uxth	r2, r2
 800a202:	e7b2      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 800a204:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 800a208:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a20c:	880b      	ldrh	r3, [r1, #0]
 800a20e:	884a      	ldrh	r2, [r1, #2]
 800a210:	e7ab      	b.n	800a16a <R3_2_GetPhaseCurrents+0xce>
 800a212:	bf00      	nop
 800a214:	ffff8001 	.word	0xffff8001

0800a218 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 800a218:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a21a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800a21e:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a222:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a226:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a22a:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a22c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a230:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a232:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a234:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a238:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a23c:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a23e:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a240:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a242:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a244:	4904      	ldr	r1, [pc, #16]	@ (800a258 <R3_2_SetADCSampPointPolarization+0x40>)
 800a246:	685b      	ldr	r3, [r3, #4]
}
 800a248:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a24c:	420b      	tst	r3, r1
}
 800a24e:	bf14      	ite	ne
 800a250:	2001      	movne	r0, #1
 800a252:	2000      	moveq	r0, #0
 800a254:	4770      	bx	lr
 800a256:	bf00      	nop
 800a258:	02000070 	.word	0x02000070

0800a25c <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 800a25c:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a25e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a262:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a266:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a268:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a26c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a26e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a270:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a274:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a278:	6853      	ldr	r3, [r2, #4]
 800a27a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a27e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a282:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a284:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a288:	2b0f      	cmp	r3, #15
 800a28a:	d80d      	bhi.n	800a2a8 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a28c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a290:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a294:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800a296:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a29a:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800a29c:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a29e:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 800a2a2:	b2db      	uxtb	r3, r3
 800a2a4:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a2a8:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a2aa:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800a2ac:	600b      	str	r3, [r1, #0]
}
 800a2ae:	4770      	bx	lr

0800a2b0 <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a2b0:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 800a2b4:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a2b6:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2b8:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a2bc:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a2be:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a2c2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800a2c6:	6853      	ldr	r3, [r2, #4]
 800a2c8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a2cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a2d0:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a2d2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a2d6:	2b0f      	cmp	r3, #15
 800a2d8:	d80a      	bhi.n	800a2f0 <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800a2da:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a2de:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a2e2:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a2e4:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800a2e6:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a2e8:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a2ec:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a2f0:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a2f2:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800a2f6:	600b      	str	r3, [r1, #0]
}
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop

0800a2fc <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2fc:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a300:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a304:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a306:	f04f 0c01 	mov.w	ip, #1
{
 800a30a:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a30c:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a310:	f04f 0e00 	mov.w	lr, #0
 800a314:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 800a318:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800a31c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a31e:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a320:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a322:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a324:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a328:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a32a:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a32c:	691a      	ldr	r2, [r3, #16]
 800a32e:	07d2      	lsls	r2, r2, #31
 800a330:	d5fc      	bpl.n	800a32c <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a332:	f06f 0201 	mvn.w	r2, #1
 800a336:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800a338:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a33a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a33e:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a340:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a342:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a346:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a348:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a34c:	2a02      	cmp	r2, #2
 800a34e:	d007      	beq.n	800a360 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a350:	f06f 0201 	mvn.w	r2, #1
 800a354:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a356:	68da      	ldr	r2, [r3, #12]
 800a358:	f042 0201 	orr.w	r2, r2, #1
 800a35c:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800a35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a360:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a362:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 800a364:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a368:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800a36a:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a36e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800a370:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a374:	f240 5255 	movw	r2, #1365	@ 0x555
 800a378:	4211      	tst	r1, r2
 800a37a:	d004      	beq.n	800a386 <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a37c:	f8c7 c018 	str.w	ip, [r7, #24]
 800a380:	61ae      	str	r6, [r5, #24]
 800a382:	61a0      	str	r0, [r4, #24]
}
 800a384:	e7e4      	b.n	800a350 <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800a386:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 800a38a:	62ae      	str	r6, [r5, #40]	@ 0x28
 800a38c:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800a38e:	e7df      	b.n	800a350 <R3_2_SwitchOnPWM+0x54>

0800a390 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a390:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 800a394:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a398:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a39a:	68da      	ldr	r2, [r3, #12]
 800a39c:	f022 0201 	bic.w	r2, r2, #1
 800a3a0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a3a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a3a4:	f04f 0c00 	mov.w	ip, #0
 800a3a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a3ac:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800a3b0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800a3b2:	b919      	cbnz	r1, 800a3bc <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a3b4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a3b8:	2a02      	cmp	r2, #2
 800a3ba:	d00c      	beq.n	800a3d6 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3bc:	f06f 0201 	mvn.w	r2, #1
 800a3c0:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a3c2:	691a      	ldr	r2, [r3, #16]
 800a3c4:	07d2      	lsls	r2, r2, #31
 800a3c6:	d5fc      	bpl.n	800a3c2 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3c8:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	6119      	str	r1, [r3, #16]
 800a3d0:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
 800a3d4:	4770      	bx	lr
{
 800a3d6:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a3d8:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a3dc:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a3e0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 800a3e2:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a3e4:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800a3e8:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a3ea:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800a3ee:	6291      	str	r1, [r2, #40]	@ 0x28
 800a3f0:	f06f 0201 	mvn.w	r2, #1
 800a3f4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a3f6:	691a      	ldr	r2, [r3, #16]
 800a3f8:	07d1      	lsls	r1, r2, #31
 800a3fa:	d5fc      	bpl.n	800a3f6 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3fc:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 800a400:	2200      	movs	r2, #0
 800a402:	6119      	str	r1, [r3, #16]
}
 800a404:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 800a406:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
}
 800a40a:	4770      	bx	lr

0800a40c <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 800a40c:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a40e:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a412:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a414:	6853      	ldr	r3, [r2, #4]
 800a416:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a41a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a41e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a420:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a424:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800a428:	480c      	ldr	r0, [pc, #48]	@ (800a45c <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a42a:	3214      	adds	r2, #20
 800a42c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800a430:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 800a434:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a438:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 800a43a:	4293      	cmp	r3, r2
 800a43c:	bfa8      	it	ge
 800a43e:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 800a440:	4283      	cmp	r3, r0
 800a442:	bfb8      	it	lt
 800a444:	4603      	movlt	r3, r0
 800a446:	b21b      	sxth	r3, r3
 800a448:	2200      	movs	r2, #0
 800a44a:	f363 020f 	bfi	r2, r3, #0, #16
 800a44e:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a452:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 800a456:	600a      	str	r2, [r1, #0]
}
 800a458:	4770      	bx	lr
 800a45a:	bf00      	nop
 800a45c:	ffff8001 	.word	0xffff8001

0800a460 <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a460:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 800a464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a468:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a46a:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a46c:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 800a46e:	2201      	movs	r2, #1
 800a470:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a474:	f06f 0201 	mvn.w	r2, #1
 800a478:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a47a:	691a      	ldr	r2, [r3, #16]
 800a47c:	07d5      	lsls	r5, r2, #31
 800a47e:	d5fc      	bpl.n	800a47a <R3_2_RLSwitchOnPWM+0x1a>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a480:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a484:	f06f 0601 	mvn.w	r6, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a488:	2501      	movs	r5, #1
 800a48a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a48c:	611e      	str	r6, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a48e:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a490:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	07d2      	lsls	r2, r2, #31
 800a496:	d5fc      	bpl.n	800a492 <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a498:	68da      	ldr	r2, [r3, #12]
 800a49a:	f042 0201 	orr.w	r2, r2, #1
 800a49e:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a4a0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4a2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a4a6:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a4a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a4aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a4ae:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a4b0:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a4b4:	2a02      	cmp	r2, #2
 800a4b6:	d00f      	beq.n	800a4d8 <R3_2_RLSwitchOnPWM+0x78>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800a4b8:	2303      	movs	r3, #3
 800a4ba:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 800a4be:	68a3      	ldr	r3, [r4, #8]
 800a4c0:	4a12      	ldr	r2, [pc, #72]	@ (800a50c <R3_2_RLSwitchOnPWM+0xac>)
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	f043 0308 	orr.w	r3, r3, #8
 800a4c8:	60a3      	str	r3, [r4, #8]
 800a4ca:	688b      	ldr	r3, [r1, #8]
 800a4cc:	4013      	ands	r3, r2
 800a4ce:	f043 0308 	orr.w	r3, r3, #8
 800a4d2:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a4d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a4d8:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a4da:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a4de:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a4e0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a4e2:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a4e6:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a4ea:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a4ee:	f240 5355 	movw	r3, #1365	@ 0x555
 800a4f2:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a4f4:	bf15      	itete	ne
 800a4f6:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a4fa:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a4fe:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a502:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 800a506:	62ae      	str	r6, [r5, #40]	@ 0x28
}
 800a508:	e7d6      	b.n	800a4b8 <R3_2_RLSwitchOnPWM+0x58>
 800a50a:	bf00      	nop
 800a50c:	7fffffc0 	.word	0x7fffffc0

0800a510 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a510:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a514:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800a516:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a51a:	f06f 0201 	mvn.w	r2, #1
 800a51e:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800a522:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a524:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a526:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a528:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a52a:	691a      	ldr	r2, [r3, #16]
 800a52c:	07d2      	lsls	r2, r2, #31
 800a52e:	d5fc      	bpl.n	800a52a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a530:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a532:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a536:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a538:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a53c:	2b02      	cmp	r3, #2
 800a53e:	d000      	beq.n	800a542 <R3_2_TurnOnLowSides+0x32>
 800a540:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a542:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a546:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a548:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a54a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a54e:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a550:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a554:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800a558:	618c      	str	r4, [r1, #24]
}
 800a55a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a55e:	619a      	str	r2, [r3, #24]
 800a560:	4770      	bx	lr
 800a562:	bf00      	nop

0800a564 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800a564:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800a568:	b510      	push	{r4, lr}
 800a56a:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 800a56e:	f101 0e08 	add.w	lr, r1, #8
 800a572:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800a574:	f85e 300c 	ldr.w	r3, [lr, ip]
 800a578:	f36f 130f 	bfc	r3, #4, #12
 800a57c:	4313      	orrs	r3, r2
 800a57e:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800a582:	684a      	ldr	r2, [r1, #4]
 800a584:	f000 0303 	and.w	r3, r0, #3
 800a588:	4313      	orrs	r3, r2
 800a58a:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800a58c:	680a      	ldr	r2, [r1, #0]
 800a58e:	f000 0010 	and.w	r0, r0, #16
 800a592:	2301      	movs	r3, #1
 800a594:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800a596:	ea33 0202 	bics.w	r2, r3, r2
 800a59a:	d014      	beq.n	800a5c6 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800a59c:	4a14      	ldr	r2, [pc, #80]	@ (800a5f0 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a59e:	4815      	ldr	r0, [pc, #84]	@ (800a5f4 <R3_2_SetAOReferenceVoltage+0x90>)
 800a5a0:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800a5a2:	680c      	ldr	r4, [r1, #0]
 800a5a4:	fba0 0202 	umull	r0, r2, r0, r2
 800a5a8:	0cd2      	lsrs	r2, r2, #19
 800a5aa:	4323      	orrs	r3, r4
 800a5ac:	00d2      	lsls	r2, r2, #3
 800a5ae:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800a5b0:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800a5b2:	9b00      	ldr	r3, [sp, #0]
 800a5b4:	b12b      	cbz	r3, 800a5c2 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a5b6:	9b00      	ldr	r3, [sp, #0]
 800a5b8:	3b01      	subs	r3, #1
 800a5ba:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800a5bc:	9b00      	ldr	r3, [sp, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1f9      	bne.n	800a5b6 <R3_2_SetAOReferenceVoltage+0x52>
}
 800a5c2:	b002      	add	sp, #8
 800a5c4:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a5c6:	4b0a      	ldr	r3, [pc, #40]	@ (800a5f0 <R3_2_SetAOReferenceVoltage+0x8c>)
 800a5c8:	4a0a      	ldr	r2, [pc, #40]	@ (800a5f4 <R3_2_SetAOReferenceVoltage+0x90>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d0:	0cdb      	lsrs	r3, r3, #19
 800a5d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a5d6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a5d8:	9b01      	ldr	r3, [sp, #4]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d0f1      	beq.n	800a5c2 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a5de:	9b01      	ldr	r3, [sp, #4]
 800a5e0:	3b01      	subs	r3, #1
 800a5e2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a5e4:	9b01      	ldr	r3, [sp, #4]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d1f9      	bne.n	800a5de <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a5ea:	b002      	add	sp, #8
 800a5ec:	bd10      	pop	{r4, pc}
 800a5ee:	bf00      	nop
 800a5f0:	200003d8 	.word	0x200003d8
 800a5f4:	431bde83 	.word	0x431bde83

0800a5f8 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a5f8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a5fc:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a5fe:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a602:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a604:	f06f 0201 	mvn.w	r2, #1
 800a608:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a60c:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a60e:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a610:	691a      	ldr	r2, [r3, #16]
 800a612:	07d2      	lsls	r2, r2, #31
 800a614:	d5fc      	bpl.n	800a610 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a618:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a61c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a61e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a622:	2b02      	cmp	r3, #2
 800a624:	d000      	beq.n	800a628 <R3_2_RLTurnOnLowSides+0x30>
 800a626:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a628:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a62c:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a62e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a630:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800a634:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a636:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a63a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800a63e:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800a640:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a644:	629a      	str	r2, [r3, #40]	@ 0x28
 800a646:	4770      	bx	lr

0800a648 <R3_2_Init>:
{
 800a648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a64c:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a650:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a652:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a654:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a656:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a658:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 800a65c:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a65e:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 800a662:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a664:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a668:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a66c:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a66e:	6a20      	ldr	r0, [r4, #32]
 800a670:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800a672:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a676:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a678:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a67a:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 800a67e:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a680:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a684:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a686:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a688:	f022 0220 	bic.w	r2, r2, #32
 800a68c:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a68e:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a690:	6872      	ldr	r2, [r6, #4]
 800a692:	f022 0204 	bic.w	r2, r2, #4
 800a696:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a698:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a69c:	6872      	ldr	r2, [r6, #4]
 800a69e:	f022 0220 	bic.w	r2, r2, #32
 800a6a2:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a6a4:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 800a6a6:	4a85      	ldr	r2, [pc, #532]	@ (800a8bc <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a6a8:	4885      	ldr	r0, [pc, #532]	@ (800a8c0 <R3_2_Init+0x278>)
 800a6aa:	4295      	cmp	r5, r2
 800a6ac:	6902      	ldr	r2, [r0, #16]
 800a6ae:	bf0c      	ite	eq
 800a6b0:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800a6b4:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800a6b8:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 800a6ba:	b181      	cbz	r1, 800a6de <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800a6bc:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a6c0:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800a6c4:	6989      	ldr	r1, [r1, #24]
 800a6c6:	f04e 0e01 	orr.w	lr, lr, #1
 800a6ca:	f8c2 e000 	str.w	lr, [r2]
 800a6ce:	6802      	ldr	r2, [r0, #0]
 800a6d0:	f042 0201 	orr.w	r2, r2, #1
 800a6d4:	6002      	str	r2, [r0, #0]
 800a6d6:	680a      	ldr	r2, [r1, #0]
 800a6d8:	f042 0201 	orr.w	r2, r2, #1
 800a6dc:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 800a6de:	b1b3      	cbz	r3, 800a70e <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800a6e0:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 800a6e4:	2a01      	cmp	r2, #1
 800a6e6:	d00a      	beq.n	800a6fe <R3_2_Init+0xb6>
 800a6e8:	f1bc 0f00 	cmp.w	ip, #0
 800a6ec:	d007      	beq.n	800a6fe <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800a6ee:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a6f2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a6f4:	9303      	str	r3, [sp, #12]
 800a6f6:	4661      	mov	r1, ip
 800a6f8:	f7ff ff34 	bl	800a564 <R3_2_SetAOReferenceVoltage>
 800a6fc:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	f042 0201 	orr.w	r2, r2, #1
 800a704:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a706:	681a      	ldr	r2, [r3, #0]
 800a708:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a70c:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800a70e:	f1bb 0f00 	cmp.w	fp, #0
 800a712:	d017      	beq.n	800a744 <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800a714:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d007      	beq.n	800a72c <R3_2_Init+0xe4>
 800a71c:	9b00      	ldr	r3, [sp, #0]
 800a71e:	b12b      	cbz	r3, 800a72c <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800a720:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a724:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a726:	4619      	mov	r1, r3
 800a728:	f7ff ff1c 	bl	800a564 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a72c:	f8db 3000 	ldr.w	r3, [fp]
 800a730:	f043 0301 	orr.w	r3, r3, #1
 800a734:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a738:	f8db 3000 	ldr.w	r3, [fp]
 800a73c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a740:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 800a744:	f1ba 0f00 	cmp.w	sl, #0
 800a748:	d017      	beq.n	800a77a <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800a74a:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800a74e:	2b01      	cmp	r3, #1
 800a750:	d007      	beq.n	800a762 <R3_2_Init+0x11a>
 800a752:	9b01      	ldr	r3, [sp, #4]
 800a754:	b12b      	cbz	r3, 800a762 <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800a756:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a75a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a75c:	4619      	mov	r1, r3
 800a75e:	f7ff ff01 	bl	800a564 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a762:	f8da 3000 	ldr.w	r3, [sl]
 800a766:	f043 0301 	orr.w	r3, r3, #1
 800a76a:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a76e:	f8da 3000 	ldr.w	r3, [sl]
 800a772:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a776:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 800a77a:	f1b9 0f00 	cmp.w	r9, #0
 800a77e:	d017      	beq.n	800a7b0 <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800a780:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 800a784:	2b01      	cmp	r3, #1
 800a786:	d007      	beq.n	800a798 <R3_2_Init+0x150>
 800a788:	9b02      	ldr	r3, [sp, #8]
 800a78a:	b12b      	cbz	r3, 800a798 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800a78c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 800a790:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a792:	4619      	mov	r1, r3
 800a794:	f7ff fee6 	bl	800a564 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a798:	f8d9 3000 	ldr.w	r3, [r9]
 800a79c:	f043 0301 	orr.w	r3, r3, #1
 800a7a0:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a7a4:	f8d9 3000 	ldr.w	r3, [r9]
 800a7a8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a7ac:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a7b0:	68bb      	ldr	r3, [r7, #8]
 800a7b2:	07da      	lsls	r2, r3, #31
 800a7b4:	d553      	bpl.n	800a85e <R3_2_Init+0x216>
 800a7b6:	68b3      	ldr	r3, [r6, #8]
 800a7b8:	07db      	lsls	r3, r3, #31
 800a7ba:	d54c      	bpl.n	800a856 <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 800a7bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a7c0:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a7c2:	682b      	ldr	r3, [r5, #0]
 800a7c4:	f023 0301 	bic.w	r3, r3, #1
 800a7c8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a7ca:	686b      	ldr	r3, [r5, #4]
 800a7cc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a7d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a7d4:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a7d6:	69ab      	ldr	r3, [r5, #24]
 800a7d8:	f043 0308 	orr.w	r3, r3, #8
 800a7dc:	61ab      	str	r3, [r5, #24]
 800a7de:	69ab      	ldr	r3, [r5, #24]
 800a7e0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a7e4:	61ab      	str	r3, [r5, #24]
 800a7e6:	69eb      	ldr	r3, [r5, #28]
 800a7e8:	f043 0308 	orr.w	r3, r3, #8
 800a7ec:	61eb      	str	r3, [r5, #28]
 800a7ee:	69eb      	ldr	r3, [r5, #28]
 800a7f0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a7f4:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a7f6:	696b      	ldr	r3, [r5, #20]
 800a7f8:	f043 0301 	orr.w	r3, r3, #1
 800a7fc:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800a7fe:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 800a802:	2b02      	cmp	r3, #2
 800a804:	d046      	beq.n	800a894 <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 800a806:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d034      	beq.n	800a878 <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a80e:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800a812:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a814:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a816:	9a05      	ldr	r2, [sp, #20]
 800a818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a81c:	b172      	cbz	r2, 800a83c <R3_2_Init+0x1f4>
 800a81e:	b16b      	cbz	r3, 800a83c <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800a820:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800a824:	e000      	b.n	800a828 <R3_2_Init+0x1e0>
 800a826:	b14b      	cbz	r3, 800a83c <R3_2_Init+0x1f4>
 800a828:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 800a82a:	9b05      	ldr	r3, [sp, #20]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a830:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a832:	9a05      	ldr	r2, [sp, #20]
 800a834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a838:	2a00      	cmp	r2, #0
 800a83a:	d1f4      	bne.n	800a826 <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800a83c:	68eb      	ldr	r3, [r5, #12]
 800a83e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a842:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 800a844:	6a2b      	ldr	r3, [r5, #32]
 800a846:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a84a:	f043 0305 	orr.w	r3, r3, #5
 800a84e:	622b      	str	r3, [r5, #32]
}
 800a850:	b007      	add	sp, #28
 800a852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 800a856:	4630      	mov	r0, r6
 800a858:	f7ff fbc2 	bl	8009fe0 <R3_2_ADCxInit>
 800a85c:	e7ae      	b.n	800a7bc <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 800a85e:	4638      	mov	r0, r7
 800a860:	f7ff fbbe 	bl	8009fe0 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800a864:	2340      	movs	r3, #64	@ 0x40
 800a866:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a86e:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a870:	68b3      	ldr	r3, [r6, #8]
 800a872:	07db      	lsls	r3, r3, #31
 800a874:	d4a2      	bmi.n	800a7bc <R3_2_Init+0x174>
 800a876:	e7ee      	b.n	800a856 <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800a878:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d00d      	beq.n	800a89c <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800a880:	2b03      	cmp	r3, #3
 800a882:	d1c4      	bne.n	800a80e <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a884:	2201      	movs	r2, #1
 800a886:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a888:	696a      	ldr	r2, [r5, #20]
 800a88a:	f042 0201 	orr.w	r2, r2, #1
 800a88e:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a890:	632b      	str	r3, [r5, #48]	@ 0x30
}
 800a892:	e7bc      	b.n	800a80e <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800a894:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 800a898:	2b01      	cmp	r3, #1
 800a89a:	d004      	beq.n	800a8a6 <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800a89c:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 800a8a0:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800a8a2:	626b      	str	r3, [r5, #36]	@ 0x24
}
 800a8a4:	e7b3      	b.n	800a80e <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800a8a6:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 800a8aa:	2a03      	cmp	r2, #3
 800a8ac:	d1f6      	bne.n	800a89c <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a8ae:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a8b0:	696b      	ldr	r3, [r5, #20]
 800a8b2:	f043 0301 	orr.w	r3, r3, #1
 800a8b6:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a8b8:	632a      	str	r2, [r5, #48]	@ 0x30
}
 800a8ba:	e7ef      	b.n	800a89c <R3_2_Init+0x254>
 800a8bc:	40012c00 	.word	0x40012c00
 800a8c0:	e0042000 	.word	0xe0042000

0800a8c4 <R3_2_SetOffsetCalib>:
{
 800a8c4:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a8c6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800a8ca:	680b      	ldr	r3, [r1, #0]
 800a8cc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 800a8d0:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a8d2:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800a8d6:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800a8da:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 800a8e0:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800a8e4:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800a8e8:	608b      	str	r3, [r1, #8]
 800a8ea:	e9c1 0200 	strd	r0, r2, [r1]
}
 800a8ee:	4770      	bx	lr

0800a8f0 <R3_2_CurrentReadingPolarization>:
{
 800a8f0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a8f2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a8f6:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a8f8:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a8fa:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 800a8fc:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 800a900:	b083      	sub	sp, #12
 800a902:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800a904:	b1ab      	cbz	r3, 800a932 <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	4a46      	ldr	r2, [pc, #280]	@ (800aa24 <R3_2_CurrentReadingPolarization+0x134>)
 800a90a:	4013      	ands	r3, r2
 800a90c:	f043 0308 	orr.w	r3, r3, #8
 800a910:	60bb      	str	r3, [r7, #8]
 800a912:	68b3      	ldr	r3, [r6, #8]
 800a914:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a916:	2180      	movs	r1, #128	@ 0x80
 800a918:	f043 0308 	orr.w	r3, r3, #8
 800a91c:	60b3      	str	r3, [r6, #8]
 800a91e:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 800a922:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 800a924:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800a926:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 800a92a:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 800a92e:	b003      	add	sp, #12
 800a930:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800a932:	6802      	ldr	r2, [r0, #0]
 800a934:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 800a936:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800a93a:	6942      	ldr	r2, [r0, #20]
 800a93c:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800a93e:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 800a942:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800a946:	6a2b      	ldr	r3, [r5, #32]
 800a948:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800a94c:	f023 0305 	bic.w	r3, r3, #5
 800a950:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 800a952:	2304      	movs	r3, #4
 800a954:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 800a958:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800a95c:	4b32      	ldr	r3, [pc, #200]	@ (800aa28 <R3_2_CurrentReadingPolarization+0x138>)
 800a95e:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800a960:	4b32      	ldr	r3, [pc, #200]	@ (800aa2c <R3_2_CurrentReadingPolarization+0x13c>)
 800a962:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a964:	2380      	movs	r3, #128	@ 0x80
 800a966:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a96a:	f7ff fcc7 	bl	800a2fc <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800a96e:	4a30      	ldr	r2, [pc, #192]	@ (800aa30 <R3_2_CurrentReadingPolarization+0x140>)
 800a970:	686b      	ldr	r3, [r5, #4]
 800a972:	4013      	ands	r3, r2
 800a974:	2b70      	cmp	r3, #112	@ 0x70
 800a976:	d1fb      	bne.n	800a970 <R3_2_CurrentReadingPolarization+0x80>
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	4a2a      	ldr	r2, [pc, #168]	@ (800aa24 <R3_2_CurrentReadingPolarization+0x134>)
 800a97c:	4013      	ands	r3, r2
 800a97e:	f043 0308 	orr.w	r3, r3, #8
 800a982:	60bb      	str	r3, [r7, #8]
 800a984:	68b3      	ldr	r3, [r6, #8]
 800a986:	4013      	ands	r3, r2
 800a988:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 800a98c:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800a990:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 800a992:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 800a996:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 800a99a:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a99e:	4631      	mov	r1, r6
 800a9a0:	463b      	mov	r3, r7
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	f7f8 ff0e 	bl	80037c4 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a9a8:	4620      	mov	r0, r4
 800a9aa:	f7ff fcf1 	bl	800a390 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 800a9b4:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 800a9b8:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800a9bc:	4b1d      	ldr	r3, [pc, #116]	@ (800aa34 <R3_2_CurrentReadingPolarization+0x144>)
 800a9be:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f7ff fc9b 	bl	800a2fc <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800a9c6:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800a9ca:	463b      	mov	r3, r7
 800a9cc:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a9d0:	4631      	mov	r1, r6
 800a9d2:	4628      	mov	r0, r5
 800a9d4:	f7f8 fef6 	bl	80037c4 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f7ff fcd9 	bl	800a390 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a9de:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800a9e2:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a9e4:	091b      	lsrs	r3, r3, #4
 800a9e6:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a9ea:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a9ee:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800a9f2:	9800      	ldr	r0, [sp, #0]
 800a9f4:	6020      	str	r0, [r4, #0]
    pHandle->_Super.offsetCalibStatus = true;
 800a9f6:	2101      	movs	r1, #1
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a9f8:	0912      	lsrs	r2, r2, #4
 800a9fa:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a9fe:	40cb      	lsrs	r3, r1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800aa00:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.offsetCalibStatus = true;
 800aa02:	f884 107f 	strb.w	r1, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800aa06:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa08:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aa0a:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aa0c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800aa0e:	696b      	ldr	r3, [r5, #20]
 800aa10:	f043 0320 	orr.w	r3, r3, #32
 800aa14:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 800aa16:	6a2b      	ldr	r3, [r5, #32]
 800aa18:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800aa1c:	f043 0305 	orr.w	r3, r3, #5
 800aa20:	622b      	str	r3, [r5, #32]
}
 800aa22:	e77e      	b.n	800a922 <R3_2_CurrentReadingPolarization+0x32>
 800aa24:	7fffffc0 	.word	0x7fffffc0
 800aa28:	0800a25d 	.word	0x0800a25d
 800aa2c:	0800a219 	.word	0x0800a219
 800aa30:	02000070 	.word	0x02000070
 800aa34:	0800a2b1 	.word	0x0800a2b1

0800aa38 <R3_2_SetADCSampPointSectX>:
{
 800aa38:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800aa3a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 800aa3e:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 800aa42:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800aa46:	ebae 0203 	sub.w	r2, lr, r3
 800aa4a:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 800aa4e:	b292      	uxth	r2, r2
 800aa50:	42a2      	cmp	r2, r4
 800aa52:	d917      	bls.n	800aa84 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 800aa54:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800aa56:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800aa5a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800aa5e:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aa60:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800aa62:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800aa66:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800aa6a:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa6e:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800aa70:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800aa72:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800aa74:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800aa76:	6852      	ldr	r2, [r2, #4]
 800aa78:	4b10      	ldr	r3, [pc, #64]	@ (800aabc <R3_2_SetADCSampPointSectX+0x84>)
 800aa7a:	421a      	tst	r2, r3
}
 800aa7c:	bf14      	ite	ne
 800aa7e:	2001      	movne	r0, #1
 800aa80:	2000      	moveq	r0, #0
 800aa82:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800aa84:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 800aa88:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800aa8c:	fa1f fc8c 	uxth.w	ip, ip
 800aa90:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800aa94:	d904      	bls.n	800aaa0 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800aa96:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	e7df      	b.n	800aa60 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800aaa0:	4423      	add	r3, r4
 800aaa2:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800aaa4:	459e      	cmp	lr, r3
 800aaa6:	d8db      	bhi.n	800aa60 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800aaa8:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800aaaa:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800aaae:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800aab2:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800aab6:	b29b      	uxth	r3, r3
 800aab8:	e7d2      	b.n	800aa60 <R3_2_SetADCSampPointSectX+0x28>
 800aaba:	bf00      	nop
 800aabc:	02000070 	.word	0x02000070

0800aac0 <R3_2_TIMx_UP_IRQHandler>:
{
 800aac0:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aac2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800aac6:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800aaca:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aacc:	681d      	ldr	r5, [r3, #0]
{
 800aace:	4601      	mov	r1, r0
 800aad0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800aad4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 800aad6:	b1d6      	cbz	r6, 800ab0e <R3_2_TIMx_UP_IRQHandler+0x4e>
 800aad8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800aadc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d1fc      	bne.n	800aadc <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800aae2:	eb06 030c 	add.w	r3, r6, ip
 800aae6:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 800aae8:	f1b7 3fff 	cmp.w	r7, #4294967295
 800aaec:	d006      	beq.n	800aafc <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800aaee:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800aaf2:	6834      	ldr	r4, [r6, #0]
 800aaf4:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 800aaf8:	433c      	orrs	r4, r7
 800aafa:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800aafc:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 800aafe:	1c66      	adds	r6, r4, #1
 800ab00:	d005      	beq.n	800ab0e <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800ab02:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800ab04:	6833      	ldr	r3, [r6, #0]
 800ab06:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800ab0a:	4323      	orrs	r3, r4
 800ab0c:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ab0e:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 800ab12:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800ab14:	431c      	orrs	r4, r3
 800ab16:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800ab18:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ab1a:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800ab1e:	4303      	orrs	r3, r0
 800ab20:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ab22:	686b      	ldr	r3, [r5, #4]
 800ab24:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800ab28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ab2c:	2280      	movs	r2, #128	@ 0x80
 800ab2e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800ab32:	606b      	str	r3, [r5, #4]
}
 800ab34:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 800ab38:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800ab3a:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 800ab3e:	4770      	bx	lr

0800ab40 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800ab40:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800ab44:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800ab46:	2900      	cmp	r1, #0
 800ab48:	d13d      	bne.n	800abc6 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab4a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800ab4e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ab50:	699a      	ldr	r2, [r3, #24]
 800ab52:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ab56:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800ab5a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ab5e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ab60:	6a1a      	ldr	r2, [r3, #32]
 800ab62:	f042 0201 	orr.w	r2, r2, #1
 800ab66:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ab68:	6a1a      	ldr	r2, [r3, #32]
 800ab6a:	f022 0204 	bic.w	r2, r2, #4
 800ab6e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ab70:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800ab72:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ab76:	2a01      	cmp	r2, #1
 800ab78:	d033      	beq.n	800abe2 <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800ab7a:	2a02      	cmp	r2, #2
 800ab7c:	d10f      	bne.n	800ab9e <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ab7e:	699a      	ldr	r2, [r3, #24]
 800ab80:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ab84:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ab88:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800ab8c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	f042 0210 	orr.w	r2, r2, #16
 800ab94:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ab96:	6a1a      	ldr	r2, [r3, #32]
 800ab98:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ab9c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ab9e:	69da      	ldr	r2, [r3, #28]
 800aba0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aba4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800aba8:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800abac:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 800abae:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800abb0:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800abb4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800abb8:	621a      	str	r2, [r3, #32]
 800abba:	6a1a      	ldr	r2, [r3, #32]
 800abbc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800abc0:	621a      	str	r2, [r3, #32]
 800abc2:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800abc6:	4b0f      	ldr	r3, [pc, #60]	@ (800ac04 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800abc8:	490f      	ldr	r1, [pc, #60]	@ (800ac08 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800abca:	4a10      	ldr	r2, [pc, #64]	@ (800ac0c <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800abcc:	4c10      	ldr	r4, [pc, #64]	@ (800ac10 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800abce:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800abd0:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800abd2:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800abd4:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800abd8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800abdc:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800abe0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800abe2:	699a      	ldr	r2, [r3, #24]
 800abe4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800abe8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800abec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800abf0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800abf2:	6a1a      	ldr	r2, [r3, #32]
 800abf4:	f022 0210 	bic.w	r2, r2, #16
 800abf8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800abfa:	6a1a      	ldr	r2, [r3, #32]
 800abfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac00:	621a      	str	r2, [r3, #32]
}
 800ac02:	e7cc      	b.n	800ab9e <R3_2_RLDetectionModeEnable+0x5e>
 800ac04:	0800a5f9 	.word	0x0800a5f9
 800ac08:	0800a461 	.word	0x0800a461
 800ac0c:	0800a391 	.word	0x0800a391
 800ac10:	0800a40d 	.word	0x0800a40d

0800ac14 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800ac14:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d03d      	beq.n	800ac98 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ac1c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800ac20:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ac24:	681b      	ldr	r3, [r3, #0]
{
 800ac26:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac28:	699a      	ldr	r2, [r3, #24]
 800ac2a:	4c40      	ldr	r4, [pc, #256]	@ (800ad2c <R3_2_RLDetectionModeDisable+0x118>)
 800ac2c:	4022      	ands	r2, r4
 800ac2e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ac32:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ac34:	6a1a      	ldr	r2, [r3, #32]
 800ac36:	f042 0201 	orr.w	r2, r2, #1
 800ac3a:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800ac3c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ac40:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800ac42:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800ac46:	d028      	beq.n	800ac9a <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800ac48:	2a02      	cmp	r2, #2
 800ac4a:	d04a      	beq.n	800ace2 <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ac4c:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac4e:	699a      	ldr	r2, [r3, #24]
 800ac50:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ac54:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ac58:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800ac5c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ac5e:	6a1a      	ldr	r2, [r3, #32]
 800ac60:	f042 0210 	orr.w	r2, r2, #16
 800ac64:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ac66:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac68:	69da      	ldr	r2, [r3, #28]
 800ac6a:	4022      	ands	r2, r4
 800ac6c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ac70:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800ac72:	6a1a      	ldr	r2, [r3, #32]
 800ac74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac78:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ac7a:	4a2d      	ldr	r2, [pc, #180]	@ (800ad30 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ac7c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800ac7e:	492d      	ldr	r1, [pc, #180]	@ (800ad34 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ac80:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ac82:	4a2d      	ldr	r2, [pc, #180]	@ (800ad38 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800ac84:	4c2d      	ldr	r4, [pc, #180]	@ (800ad3c <R3_2_RLDetectionModeDisable+0x128>)
 800ac86:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800ac88:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ac8a:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800ac8e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800ac92:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800ac96:	4770      	bx	lr
 800ac98:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800ac9a:	6a1a      	ldr	r2, [r3, #32]
 800ac9c:	f042 0204 	orr.w	r2, r2, #4
 800aca0:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aca2:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aca4:	699a      	ldr	r2, [r3, #24]
 800aca6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800acaa:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800acae:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800acb2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800acb4:	6a1a      	ldr	r2, [r3, #32]
 800acb6:	f042 0210 	orr.w	r2, r2, #16
 800acba:	621a      	str	r2, [r3, #32]
 800acbc:	6a1a      	ldr	r2, [r3, #32]
 800acbe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acc2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800acc4:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800acc6:	69da      	ldr	r2, [r3, #28]
 800acc8:	4022      	ands	r2, r4
 800acca:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800acce:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800acd0:	6a1a      	ldr	r2, [r3, #32]
 800acd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acd6:	621a      	str	r2, [r3, #32]
 800acd8:	6a1a      	ldr	r2, [r3, #32]
 800acda:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800acde:	621a      	str	r2, [r3, #32]
}
 800ace0:	e7cb      	b.n	800ac7a <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800ace2:	6a1a      	ldr	r2, [r3, #32]
 800ace4:	f022 0204 	bic.w	r2, r2, #4
 800ace8:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800acea:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800acec:	699a      	ldr	r2, [r3, #24]
 800acee:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800acf2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800acf6:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800acfa:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800acfc:	6a1a      	ldr	r2, [r3, #32]
 800acfe:	f042 0210 	orr.w	r2, r2, #16
 800ad02:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad04:	6a1a      	ldr	r2, [r3, #32]
 800ad06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ad0a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ad0c:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad0e:	69da      	ldr	r2, [r3, #28]
 800ad10:	4022      	ands	r2, r4
 800ad12:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ad16:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800ad18:	6a1a      	ldr	r2, [r3, #32]
 800ad1a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ad1e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ad20:	6a1a      	ldr	r2, [r3, #32]
 800ad22:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ad26:	621a      	str	r2, [r3, #32]
}
 800ad28:	e7a7      	b.n	800ac7a <R3_2_RLDetectionModeDisable+0x66>
 800ad2a:	bf00      	nop
 800ad2c:	fffeff8c 	.word	0xfffeff8c
 800ad30:	0800a09d 	.word	0x0800a09d
 800ad34:	0800a2fd 	.word	0x0800a2fd
 800ad38:	0800a391 	.word	0x0800a391
 800ad3c:	0800a511 	.word	0x0800a511

0800ad40 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ad40:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800ad44:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ad48:	6812      	ldr	r2, [r2, #0]
{
 800ad4a:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ad4c:	69d0      	ldr	r0, [r2, #28]
 800ad4e:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800ad52:	fb0c f101 	mul.w	r1, ip, r1
 800ad56:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 800ad5a:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800ad5c:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800ad5e:	2401      	movs	r4, #1
 800ad60:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800ad64:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800ad68:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800ad6c:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800ad6e:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800ad72:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800ad76:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ad7a:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ad7c:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ad7e:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ad80:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ad82:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800ad86:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800ad8a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800ad8e:	f04f 0c03 	mov.w	ip, #3
 800ad92:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800ad96:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ad98:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800ad9a:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ad9e:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ada0:	d007      	beq.n	800adb2 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ada2:	4b07      	ldr	r3, [pc, #28]	@ (800adc0 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 800ada4:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800ada8:	421a      	tst	r2, r3
 800adaa:	bf14      	ite	ne
 800adac:	2001      	movne	r0, #1
 800adae:	2000      	moveq	r0, #0
}
 800adb0:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800adb2:	2200      	movs	r2, #0
}
 800adb4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800adb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	02000070 	.word	0x02000070

0800adc4 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800adc4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800adc8:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 800adca:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800adcc:	f06f 0201 	mvn.w	r2, #1
{
 800add0:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800add2:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800add6:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800add8:	691a      	ldr	r2, [r3, #16]
 800adda:	07d1      	lsls	r1, r2, #31
 800addc:	d5fc      	bpl.n	800add8 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800adde:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ade2:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ade4:	f06f 0401 	mvn.w	r4, #1
 800ade8:	3a05      	subs	r2, #5
 800adea:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800adec:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800adee:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800adf0:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800adf2:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800adf4:	691a      	ldr	r2, [r3, #16]
 800adf6:	07d2      	lsls	r2, r2, #31
 800adf8:	d5fc      	bpl.n	800adf4 <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800adfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800adfc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ae00:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800ae02:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ae08:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800ae0a:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ae0e:	2a02      	cmp	r2, #2
 800ae10:	d00c      	beq.n	800ae2c <R3_2_RLTurnOnLowSidesAndStart+0x68>
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800ae12:	2203      	movs	r2, #3
 800ae14:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800ae18:	6a1a      	ldr	r2, [r3, #32]
 800ae1a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ae1e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ae20:	68da      	ldr	r2, [r3, #12]
 800ae22:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800ae26:	bc30      	pop	{r4, r5}
 800ae28:	60da      	str	r2, [r3, #12]
 800ae2a:	4770      	bx	lr
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ae2c:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800ae30:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ae34:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ae36:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ae38:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800ae3c:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ae3e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800ae42:	6191      	str	r1, [r2, #24]
}
 800ae44:	e7e5      	b.n	800ae12 <R3_2_RLTurnOnLowSidesAndStart+0x4e>
 800ae46:	bf00      	nop

0800ae48 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800ae48:	b510      	push	{r4, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800ae4a:	8a42      	ldrh	r2, [r0, #18]
 800ae4c:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ae50:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800ae52:	4496      	add	lr, r2
 800ae54:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800ae58:	2400      	movs	r4, #0
 800ae5a:	f36e 040f 	bfi	r4, lr, #0, #16
 800ae5e:	f36e 441f 	bfi	r4, lr, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ae62:	b153      	cbz	r3, 800ae7a <RVBS_Clear+0x32>
 800ae64:	6942      	ldr	r2, [r0, #20]
    {
      pHandle->aBuffer[index] = aux;
 800ae66:	2300      	movs	r3, #0
 800ae68:	3a02      	subs	r2, #2
 800ae6a:	f822 ef02 	strh.w	lr, [r2, #2]!
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ae6e:	3301      	adds	r3, #1
 800ae70:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800ae74:	b299      	uxth	r1, r3
 800ae76:	458c      	cmp	ip, r1
 800ae78:	d8f7      	bhi.n	800ae6a <RVBS_Clear+0x22>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800ae7a:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800ae7c:	6044      	str	r4, [r0, #4]
    pHandle->index = 0U;
 800ae7e:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	bf00      	nop

0800ae84 <RVBS_Init>:
{
 800ae84:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800ae86:	f7ff ffdf 	bl	800ae48 <RVBS_Clear>
}
 800ae8a:	bd08      	pop	{r3, pc}

0800ae8c <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800ae8c:	8982      	ldrh	r2, [r0, #12]
 800ae8e:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ae90:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800ae92:	428a      	cmp	r2, r1
 800ae94:	d010      	beq.n	800aeb8 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800ae96:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800ae9a:	459c      	cmp	ip, r3
 800ae9c:	d80a      	bhi.n	800aeb4 <RVBS_CheckFaultState+0x28>
{
 800ae9e:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800aea0:	7c04      	ldrb	r4, [r0, #16]
 800aea2:	b994      	cbnz	r4, 800aeca <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800aea4:	4299      	cmp	r1, r3
 800aea6:	d914      	bls.n	800aed2 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800aea8:	2301      	movs	r3, #1
 800aeaa:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800aeac:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800aeae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800aeb2:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800aeb4:	2004      	movs	r0, #4
 800aeb6:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800aeb8:	429a      	cmp	r2, r3
 800aeba:	d30c      	bcc.n	800aed6 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800aebc:	8a40      	ldrh	r0, [r0, #18]
 800aebe:	4298      	cmp	r0, r3
 800aec0:	bf94      	ite	ls
 800aec2:	2000      	movls	r0, #0
 800aec4:	2001      	movhi	r0, #1
 800aec6:	0080      	lsls	r0, r0, #2
 800aec8:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800aeca:	429a      	cmp	r2, r3
 800aecc:	d2ee      	bcs.n	800aeac <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800aece:	2300      	movs	r3, #0
 800aed0:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800aed2:	2002      	movs	r0, #2
 800aed4:	e7eb      	b.n	800aeae <RVBS_CheckFaultState+0x22>
 800aed6:	2002      	movs	r0, #2
}
 800aed8:	4770      	bx	lr
 800aeda:	bf00      	nop

0800aedc <RVBS_CalcAvVbus>:
{
 800aedc:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800aede:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800aee2:	4299      	cmp	r1, r3
{
 800aee4:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800aee6:	d021      	beq.n	800af2c <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800aee8:	6943      	ldr	r3, [r0, #20]
 800aeea:	7e45      	ldrb	r5, [r0, #25]
 800aeec:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800aef0:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800aef4:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800aef8:	d00d      	beq.n	800af16 <RVBS_CalcAvVbus+0x3a>
 800aefa:	3a01      	subs	r2, #1
 800aefc:	b2d2      	uxtb	r2, r2
 800aefe:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800af02:	3b02      	subs	r3, #2
      wtemp = 0u;
 800af04:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800af06:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800af0a:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800af0c:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800af0e:	d1fa      	bne.n	800af06 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800af10:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800af14:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800af16:	f10e 3eff 	add.w	lr, lr, #4294967295
 800af1a:	4575      	cmp	r5, lr
        pHandle->index++;
 800af1c:	bf34      	ite	cc
 800af1e:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800af20:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800af22:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800af24:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800af26:	bf34      	ite	cc
 800af28:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800af2a:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800af2c:	4620      	mov	r0, r4
 800af2e:	f7ff ffad 	bl	800ae8c <RVBS_CheckFaultState>
 800af32:	8120      	strh	r0, [r4, #8]
}
 800af34:	bd38      	pop	{r3, r4, r5, pc}
 800af36:	bf00      	nop

0800af38 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800af38:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800af3a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800af3c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800af40:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800af44:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800af46:	4770      	bx	lr

0800af48 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800af48:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800af4c:	4770      	bx	lr
 800af4e:	bf00      	nop

0800af50 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800af50:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800af54:	4603      	mov	r3, r0
 800af56:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800af58:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800af5c:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800af60:	bfb8      	it	lt
 800af62:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800af64:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800af68:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800af6a:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800af6c:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 800af6e:	bfb8      	it	lt
 800af70:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800af72:	458c      	cmp	ip, r1
 800af74:	d818      	bhi.n	800afa8 <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800af76:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800af7a:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 800af7e:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800af82:	bfb8      	it	lt
 800af84:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800af88:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800af8c:	bfb8      	it	lt
 800af8e:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800af92:	45e6      	cmp	lr, ip
 800af94:	d308      	bcc.n	800afa8 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800af96:	428c      	cmp	r4, r1
 800af98:	d306      	bcc.n	800afa8 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800af9a:	4290      	cmp	r0, r2
 800af9c:	d809      	bhi.n	800afb2 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800af9e:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800afa0:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800afa2:	bf18      	it	ne
 800afa4:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800afa6:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800afa8:	4290      	cmp	r0, r2
 800afaa:	d9f8      	bls.n	800af9e <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800afac:	3201      	adds	r2, #1
 800afae:	b2d2      	uxtb	r2, r2
 800afb0:	e7f5      	b.n	800af9e <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800afb2:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800afb4:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800afb6:	2001      	movs	r0, #1
}
 800afb8:	bd10      	pop	{r4, pc}
 800afba:	bf00      	nop

0800afbc <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800afbc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800afc0:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800afc4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800afc8:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800afcc:	b200      	sxth	r0, r0
 800afce:	4770      	bx	lr

0800afd0 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800afd0:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800afd2:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800afd6:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800afd8:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->Mode = pHandle->ModeDefault;
 800afdc:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800afe0:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800afe2:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800afe4:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800afe8:	0409      	lsls	r1, r1, #16
 800afea:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 800afee:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800aff0:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 800aff4:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800aff6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800aff8:	6183      	str	r3, [r0, #24]
}
 800affa:	4770      	bx	lr

0800affc <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800affc:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800affe:	4770      	bx	lr

0800b000 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b000:	7803      	ldrb	r3, [r0, #0]
 800b002:	2b03      	cmp	r3, #3
 800b004:	d000      	beq.n	800b008 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b006:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800b008:	6900      	ldr	r0, [r0, #16]
 800b00a:	2100      	movs	r1, #0
 800b00c:	f7fe bf40 	b.w	8009e90 <PID_SetIntegralTerm>

0800b010 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800b010:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop

0800b018 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800b018:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800b01a:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800b01c:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b01e:	4770      	bx	lr

0800b020 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800b020:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b022:	7803      	ldrb	r3, [r0, #0]
 800b024:	2b04      	cmp	r3, #4
 800b026:	d019      	beq.n	800b05c <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800b028:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 800b02c:	458c      	cmp	ip, r1
 800b02e:	da03      	bge.n	800b038 <STC_ExecRamp+0x18>
 800b030:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800b032:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b036:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800b038:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 800b03c:	428c      	cmp	r4, r1
 800b03e:	dcf7      	bgt.n	800b030 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800b040:	8c04      	ldrh	r4, [r0, #32]
 800b042:	428c      	cmp	r4, r1
 800b044:	dd03      	ble.n	800b04e <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800b046:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800b04a:	428c      	cmp	r4, r1
 800b04c:	dbf0      	blt.n	800b030 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800b04e:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800b050:	b9aa      	cbnz	r2, 800b07e <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800b052:	2b03      	cmp	r3, #3
 800b054:	d10a      	bne.n	800b06c <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800b056:	0409      	lsls	r1, r1, #16
 800b058:	6041      	str	r1, [r0, #4]
 800b05a:	e009      	b.n	800b070 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800b05c:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800b05e:	428b      	cmp	r3, r1
 800b060:	dbe6      	blt.n	800b030 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800b062:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800b066:	428b      	cmp	r3, r1
 800b068:	dce2      	bgt.n	800b030 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800b06a:	b9e2      	cbnz	r2, 800b0a6 <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800b06c:	0409      	lsls	r1, r1, #16
 800b06e:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 800b070:	2300      	movs	r3, #0
 800b072:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 800b074:	6183      	str	r3, [r0, #24]
{
 800b076:	2001      	movs	r0, #1
}
 800b078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b07c:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800b07e:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b082:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 800b084:	4c09      	ldr	r4, [pc, #36]	@ (800b0ac <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800b086:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b088:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 800b08c:	fba4 4303 	umull	r4, r3, r4, r3
 800b090:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800b092:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800b094:	eba1 0c0c 	sub.w	ip, r1, ip
 800b098:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 800b09c:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800b09e:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 800b0a2:	6182      	str	r2, [r0, #24]
 800b0a4:	e7e7      	b.n	800b076 <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800b0a6:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800b0aa:	e7ea      	b.n	800b082 <STC_ExecRamp+0x62>
 800b0ac:	10624dd3 	.word	0x10624dd3

0800b0b0 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b0b0:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b0b2:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800b0b4:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b0b6:	2a04      	cmp	r2, #4
{
 800b0b8:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b0ba:	d012      	beq.n	800b0e2 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800b0bc:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800b0be:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800b0c0:	d908      	bls.n	800b0d4 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800b0c2:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800b0c4:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800b0c6:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800b0c8:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800b0ca:	2a03      	cmp	r2, #3
 800b0cc:	d011      	beq.n	800b0f2 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800b0ce:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b0d0:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800b0d4:	d1f9      	bne.n	800b0ca <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b0d6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800b0da:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b0dc:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800b0de:	60c3      	str	r3, [r0, #12]
 800b0e0:	e7f3      	b.n	800b0ca <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800b0e2:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800b0e4:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800b0e6:	d911      	bls.n	800b10c <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800b0e8:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800b0ea:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800b0ec:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800b0ee:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b0f0:	e7ed      	b.n	800b0ce <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800b0f2:	6960      	ldr	r0, [r4, #20]
 800b0f4:	f7ff ff28 	bl	800af48 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800b0f8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800b0fc:	b209      	sxth	r1, r1
 800b0fe:	6920      	ldr	r0, [r4, #16]
 800b100:	f7fe fef8 	bl	8009ef4 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800b104:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b106:	0405      	lsls	r5, r0, #16
 800b108:	60a5      	str	r5, [r4, #8]
}
 800b10a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800b10c:	d1df      	bne.n	800b0ce <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b10e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800b112:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b114:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800b116:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b118:	e7d9      	b.n	800b0ce <STC_CalcTorqueReference+0x1e>
 800b11a:	bf00      	nop

0800b11c <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800b11c:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800b120:	4770      	bx	lr
 800b122:	bf00      	nop

0800b124 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 800b124:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 800b128:	b082      	sub	sp, #8
}
 800b12a:	b002      	add	sp, #8
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop

0800b130 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b130:	b510      	push	{r4, lr}
 800b132:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800b134:	6940      	ldr	r0, [r0, #20]
 800b136:	f7ff ff07 	bl	800af48 <SPD_GetAvrgMecSpeedUnit>
 800b13a:	0400      	lsls	r0, r0, #16
 800b13c:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b13e:	bd10      	pop	{r4, pc}

0800b140 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b140:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b142:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b144:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800b146:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800b14a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b14c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800b14e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800b150:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800b152:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b154:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800b156:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b158:	4770      	bx	lr
 800b15a:	bf00      	nop

0800b15c <VSS_Init>:
{
 800b15c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800b15e:	f7ff ffef 	bl	800b140 <VSS_Clear>
}
 800b162:	bd08      	pop	{r3, pc}

0800b164 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800b164:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b168:	b9a3      	cbnz	r3, 800b194 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b16a:	8b43      	ldrh	r3, [r0, #26]
{
 800b16c:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b16e:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b170:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b174:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b178:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b17c:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800b17e:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800b182:	b942      	cbnz	r2, 800b196 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b184:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800b188:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b18a:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800b18e:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b190:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b192:	bd10      	pop	{r4, pc}
 800b194:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800b196:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800b198:	fb02 f303 	mul.w	r3, r2, r3
 800b19c:	4a0e      	ldr	r2, [pc, #56]	@ (800b1d8 <VSS_SetMecAcceleration+0x74>)
 800b19e:	fba2 2303 	umull	r2, r3, r2, r3
 800b1a2:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1aa:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800b1ae:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800b1b0:	b91b      	cbnz	r3, 800b1ba <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b1b2:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b1b4:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b1b6:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800b1b8:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1ba:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b1be:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800b1c2:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b1c6:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b1c8:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800b1cc:	fb0e f303 	mul.w	r3, lr, r3
 800b1d0:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b1d2:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b1d4:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800b1d6:	e7ef      	b.n	800b1b8 <VSS_SetMecAcceleration+0x54>
 800b1d8:	10624dd3 	.word	0x10624dd3

0800b1dc <_vsniprintf_r>:
 800b1dc:	b530      	push	{r4, r5, lr}
 800b1de:	4614      	mov	r4, r2
 800b1e0:	2c00      	cmp	r4, #0
 800b1e2:	b09b      	sub	sp, #108	@ 0x6c
 800b1e4:	4605      	mov	r5, r0
 800b1e6:	461a      	mov	r2, r3
 800b1e8:	da05      	bge.n	800b1f6 <_vsniprintf_r+0x1a>
 800b1ea:	238b      	movs	r3, #139	@ 0x8b
 800b1ec:	6003      	str	r3, [r0, #0]
 800b1ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b1f2:	b01b      	add	sp, #108	@ 0x6c
 800b1f4:	bd30      	pop	{r4, r5, pc}
 800b1f6:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b1fa:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b1fe:	f04f 0300 	mov.w	r3, #0
 800b202:	9319      	str	r3, [sp, #100]	@ 0x64
 800b204:	bf14      	ite	ne
 800b206:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b20a:	4623      	moveq	r3, r4
 800b20c:	9302      	str	r3, [sp, #8]
 800b20e:	9305      	str	r3, [sp, #20]
 800b210:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b214:	9100      	str	r1, [sp, #0]
 800b216:	9104      	str	r1, [sp, #16]
 800b218:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b21c:	4669      	mov	r1, sp
 800b21e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b220:	f000 f9ae 	bl	800b580 <_svfiprintf_r>
 800b224:	1c43      	adds	r3, r0, #1
 800b226:	bfbc      	itt	lt
 800b228:	238b      	movlt	r3, #139	@ 0x8b
 800b22a:	602b      	strlt	r3, [r5, #0]
 800b22c:	2c00      	cmp	r4, #0
 800b22e:	d0e0      	beq.n	800b1f2 <_vsniprintf_r+0x16>
 800b230:	9b00      	ldr	r3, [sp, #0]
 800b232:	2200      	movs	r2, #0
 800b234:	701a      	strb	r2, [r3, #0]
 800b236:	e7dc      	b.n	800b1f2 <_vsniprintf_r+0x16>

0800b238 <vsniprintf>:
 800b238:	b507      	push	{r0, r1, r2, lr}
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	4613      	mov	r3, r2
 800b23e:	460a      	mov	r2, r1
 800b240:	4601      	mov	r1, r0
 800b242:	4803      	ldr	r0, [pc, #12]	@ (800b250 <vsniprintf+0x18>)
 800b244:	6800      	ldr	r0, [r0, #0]
 800b246:	f7ff ffc9 	bl	800b1dc <_vsniprintf_r>
 800b24a:	b003      	add	sp, #12
 800b24c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b250:	200003e4 	.word	0x200003e4

0800b254 <memset>:
 800b254:	4402      	add	r2, r0
 800b256:	4603      	mov	r3, r0
 800b258:	4293      	cmp	r3, r2
 800b25a:	d100      	bne.n	800b25e <memset+0xa>
 800b25c:	4770      	bx	lr
 800b25e:	f803 1b01 	strb.w	r1, [r3], #1
 800b262:	e7f9      	b.n	800b258 <memset+0x4>

0800b264 <__errno>:
 800b264:	4b01      	ldr	r3, [pc, #4]	@ (800b26c <__errno+0x8>)
 800b266:	6818      	ldr	r0, [r3, #0]
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	200003e4 	.word	0x200003e4

0800b270 <__libc_init_array>:
 800b270:	b570      	push	{r4, r5, r6, lr}
 800b272:	4d0d      	ldr	r5, [pc, #52]	@ (800b2a8 <__libc_init_array+0x38>)
 800b274:	4c0d      	ldr	r4, [pc, #52]	@ (800b2ac <__libc_init_array+0x3c>)
 800b276:	1b64      	subs	r4, r4, r5
 800b278:	10a4      	asrs	r4, r4, #2
 800b27a:	2600      	movs	r6, #0
 800b27c:	42a6      	cmp	r6, r4
 800b27e:	d109      	bne.n	800b294 <__libc_init_array+0x24>
 800b280:	4d0b      	ldr	r5, [pc, #44]	@ (800b2b0 <__libc_init_array+0x40>)
 800b282:	4c0c      	ldr	r4, [pc, #48]	@ (800b2b4 <__libc_init_array+0x44>)
 800b284:	f000 fc64 	bl	800bb50 <_init>
 800b288:	1b64      	subs	r4, r4, r5
 800b28a:	10a4      	asrs	r4, r4, #2
 800b28c:	2600      	movs	r6, #0
 800b28e:	42a6      	cmp	r6, r4
 800b290:	d105      	bne.n	800b29e <__libc_init_array+0x2e>
 800b292:	bd70      	pop	{r4, r5, r6, pc}
 800b294:	f855 3b04 	ldr.w	r3, [r5], #4
 800b298:	4798      	blx	r3
 800b29a:	3601      	adds	r6, #1
 800b29c:	e7ee      	b.n	800b27c <__libc_init_array+0xc>
 800b29e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b2a2:	4798      	blx	r3
 800b2a4:	3601      	adds	r6, #1
 800b2a6:	e7f2      	b.n	800b28e <__libc_init_array+0x1e>
 800b2a8:	0800c630 	.word	0x0800c630
 800b2ac:	0800c630 	.word	0x0800c630
 800b2b0:	0800c630 	.word	0x0800c630
 800b2b4:	0800c634 	.word	0x0800c634

0800b2b8 <__retarget_lock_acquire_recursive>:
 800b2b8:	4770      	bx	lr

0800b2ba <__retarget_lock_release_recursive>:
 800b2ba:	4770      	bx	lr

0800b2bc <memcpy>:
 800b2bc:	440a      	add	r2, r1
 800b2be:	4291      	cmp	r1, r2
 800b2c0:	f100 33ff 	add.w	r3, r0, #4294967295
 800b2c4:	d100      	bne.n	800b2c8 <memcpy+0xc>
 800b2c6:	4770      	bx	lr
 800b2c8:	b510      	push	{r4, lr}
 800b2ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2d2:	4291      	cmp	r1, r2
 800b2d4:	d1f9      	bne.n	800b2ca <memcpy+0xe>
 800b2d6:	bd10      	pop	{r4, pc}

0800b2d8 <_free_r>:
 800b2d8:	b538      	push	{r3, r4, r5, lr}
 800b2da:	4605      	mov	r5, r0
 800b2dc:	2900      	cmp	r1, #0
 800b2de:	d041      	beq.n	800b364 <_free_r+0x8c>
 800b2e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2e4:	1f0c      	subs	r4, r1, #4
 800b2e6:	2b00      	cmp	r3, #0
 800b2e8:	bfb8      	it	lt
 800b2ea:	18e4      	addlt	r4, r4, r3
 800b2ec:	f000 f8e0 	bl	800b4b0 <__malloc_lock>
 800b2f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b368 <_free_r+0x90>)
 800b2f2:	6813      	ldr	r3, [r2, #0]
 800b2f4:	b933      	cbnz	r3, 800b304 <_free_r+0x2c>
 800b2f6:	6063      	str	r3, [r4, #4]
 800b2f8:	6014      	str	r4, [r2, #0]
 800b2fa:	4628      	mov	r0, r5
 800b2fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b300:	f000 b8dc 	b.w	800b4bc <__malloc_unlock>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d908      	bls.n	800b31a <_free_r+0x42>
 800b308:	6820      	ldr	r0, [r4, #0]
 800b30a:	1821      	adds	r1, r4, r0
 800b30c:	428b      	cmp	r3, r1
 800b30e:	bf01      	itttt	eq
 800b310:	6819      	ldreq	r1, [r3, #0]
 800b312:	685b      	ldreq	r3, [r3, #4]
 800b314:	1809      	addeq	r1, r1, r0
 800b316:	6021      	streq	r1, [r4, #0]
 800b318:	e7ed      	b.n	800b2f6 <_free_r+0x1e>
 800b31a:	461a      	mov	r2, r3
 800b31c:	685b      	ldr	r3, [r3, #4]
 800b31e:	b10b      	cbz	r3, 800b324 <_free_r+0x4c>
 800b320:	42a3      	cmp	r3, r4
 800b322:	d9fa      	bls.n	800b31a <_free_r+0x42>
 800b324:	6811      	ldr	r1, [r2, #0]
 800b326:	1850      	adds	r0, r2, r1
 800b328:	42a0      	cmp	r0, r4
 800b32a:	d10b      	bne.n	800b344 <_free_r+0x6c>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	4401      	add	r1, r0
 800b330:	1850      	adds	r0, r2, r1
 800b332:	4283      	cmp	r3, r0
 800b334:	6011      	str	r1, [r2, #0]
 800b336:	d1e0      	bne.n	800b2fa <_free_r+0x22>
 800b338:	6818      	ldr	r0, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	6053      	str	r3, [r2, #4]
 800b33e:	4408      	add	r0, r1
 800b340:	6010      	str	r0, [r2, #0]
 800b342:	e7da      	b.n	800b2fa <_free_r+0x22>
 800b344:	d902      	bls.n	800b34c <_free_r+0x74>
 800b346:	230c      	movs	r3, #12
 800b348:	602b      	str	r3, [r5, #0]
 800b34a:	e7d6      	b.n	800b2fa <_free_r+0x22>
 800b34c:	6820      	ldr	r0, [r4, #0]
 800b34e:	1821      	adds	r1, r4, r0
 800b350:	428b      	cmp	r3, r1
 800b352:	bf04      	itt	eq
 800b354:	6819      	ldreq	r1, [r3, #0]
 800b356:	685b      	ldreq	r3, [r3, #4]
 800b358:	6063      	str	r3, [r4, #4]
 800b35a:	bf04      	itt	eq
 800b35c:	1809      	addeq	r1, r1, r0
 800b35e:	6021      	streq	r1, [r4, #0]
 800b360:	6054      	str	r4, [r2, #4]
 800b362:	e7ca      	b.n	800b2fa <_free_r+0x22>
 800b364:	bd38      	pop	{r3, r4, r5, pc}
 800b366:	bf00      	nop
 800b368:	20001ca8 	.word	0x20001ca8

0800b36c <sbrk_aligned>:
 800b36c:	b570      	push	{r4, r5, r6, lr}
 800b36e:	4e0f      	ldr	r6, [pc, #60]	@ (800b3ac <sbrk_aligned+0x40>)
 800b370:	460c      	mov	r4, r1
 800b372:	6831      	ldr	r1, [r6, #0]
 800b374:	4605      	mov	r5, r0
 800b376:	b911      	cbnz	r1, 800b37e <sbrk_aligned+0x12>
 800b378:	f000 fba4 	bl	800bac4 <_sbrk_r>
 800b37c:	6030      	str	r0, [r6, #0]
 800b37e:	4621      	mov	r1, r4
 800b380:	4628      	mov	r0, r5
 800b382:	f000 fb9f 	bl	800bac4 <_sbrk_r>
 800b386:	1c43      	adds	r3, r0, #1
 800b388:	d103      	bne.n	800b392 <sbrk_aligned+0x26>
 800b38a:	f04f 34ff 	mov.w	r4, #4294967295
 800b38e:	4620      	mov	r0, r4
 800b390:	bd70      	pop	{r4, r5, r6, pc}
 800b392:	1cc4      	adds	r4, r0, #3
 800b394:	f024 0403 	bic.w	r4, r4, #3
 800b398:	42a0      	cmp	r0, r4
 800b39a:	d0f8      	beq.n	800b38e <sbrk_aligned+0x22>
 800b39c:	1a21      	subs	r1, r4, r0
 800b39e:	4628      	mov	r0, r5
 800b3a0:	f000 fb90 	bl	800bac4 <_sbrk_r>
 800b3a4:	3001      	adds	r0, #1
 800b3a6:	d1f2      	bne.n	800b38e <sbrk_aligned+0x22>
 800b3a8:	e7ef      	b.n	800b38a <sbrk_aligned+0x1e>
 800b3aa:	bf00      	nop
 800b3ac:	20001ca4 	.word	0x20001ca4

0800b3b0 <_malloc_r>:
 800b3b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3b4:	1ccd      	adds	r5, r1, #3
 800b3b6:	f025 0503 	bic.w	r5, r5, #3
 800b3ba:	3508      	adds	r5, #8
 800b3bc:	2d0c      	cmp	r5, #12
 800b3be:	bf38      	it	cc
 800b3c0:	250c      	movcc	r5, #12
 800b3c2:	2d00      	cmp	r5, #0
 800b3c4:	4606      	mov	r6, r0
 800b3c6:	db01      	blt.n	800b3cc <_malloc_r+0x1c>
 800b3c8:	42a9      	cmp	r1, r5
 800b3ca:	d904      	bls.n	800b3d6 <_malloc_r+0x26>
 800b3cc:	230c      	movs	r3, #12
 800b3ce:	6033      	str	r3, [r6, #0]
 800b3d0:	2000      	movs	r0, #0
 800b3d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b3d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b4ac <_malloc_r+0xfc>
 800b3da:	f000 f869 	bl	800b4b0 <__malloc_lock>
 800b3de:	f8d8 3000 	ldr.w	r3, [r8]
 800b3e2:	461c      	mov	r4, r3
 800b3e4:	bb44      	cbnz	r4, 800b438 <_malloc_r+0x88>
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	4630      	mov	r0, r6
 800b3ea:	f7ff ffbf 	bl	800b36c <sbrk_aligned>
 800b3ee:	1c43      	adds	r3, r0, #1
 800b3f0:	4604      	mov	r4, r0
 800b3f2:	d158      	bne.n	800b4a6 <_malloc_r+0xf6>
 800b3f4:	f8d8 4000 	ldr.w	r4, [r8]
 800b3f8:	4627      	mov	r7, r4
 800b3fa:	2f00      	cmp	r7, #0
 800b3fc:	d143      	bne.n	800b486 <_malloc_r+0xd6>
 800b3fe:	2c00      	cmp	r4, #0
 800b400:	d04b      	beq.n	800b49a <_malloc_r+0xea>
 800b402:	6823      	ldr	r3, [r4, #0]
 800b404:	4639      	mov	r1, r7
 800b406:	4630      	mov	r0, r6
 800b408:	eb04 0903 	add.w	r9, r4, r3
 800b40c:	f000 fb5a 	bl	800bac4 <_sbrk_r>
 800b410:	4581      	cmp	r9, r0
 800b412:	d142      	bne.n	800b49a <_malloc_r+0xea>
 800b414:	6821      	ldr	r1, [r4, #0]
 800b416:	1a6d      	subs	r5, r5, r1
 800b418:	4629      	mov	r1, r5
 800b41a:	4630      	mov	r0, r6
 800b41c:	f7ff ffa6 	bl	800b36c <sbrk_aligned>
 800b420:	3001      	adds	r0, #1
 800b422:	d03a      	beq.n	800b49a <_malloc_r+0xea>
 800b424:	6823      	ldr	r3, [r4, #0]
 800b426:	442b      	add	r3, r5
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	f8d8 3000 	ldr.w	r3, [r8]
 800b42e:	685a      	ldr	r2, [r3, #4]
 800b430:	bb62      	cbnz	r2, 800b48c <_malloc_r+0xdc>
 800b432:	f8c8 7000 	str.w	r7, [r8]
 800b436:	e00f      	b.n	800b458 <_malloc_r+0xa8>
 800b438:	6822      	ldr	r2, [r4, #0]
 800b43a:	1b52      	subs	r2, r2, r5
 800b43c:	d420      	bmi.n	800b480 <_malloc_r+0xd0>
 800b43e:	2a0b      	cmp	r2, #11
 800b440:	d917      	bls.n	800b472 <_malloc_r+0xc2>
 800b442:	1961      	adds	r1, r4, r5
 800b444:	42a3      	cmp	r3, r4
 800b446:	6025      	str	r5, [r4, #0]
 800b448:	bf18      	it	ne
 800b44a:	6059      	strne	r1, [r3, #4]
 800b44c:	6863      	ldr	r3, [r4, #4]
 800b44e:	bf08      	it	eq
 800b450:	f8c8 1000 	streq.w	r1, [r8]
 800b454:	5162      	str	r2, [r4, r5]
 800b456:	604b      	str	r3, [r1, #4]
 800b458:	4630      	mov	r0, r6
 800b45a:	f000 f82f 	bl	800b4bc <__malloc_unlock>
 800b45e:	f104 000b 	add.w	r0, r4, #11
 800b462:	1d23      	adds	r3, r4, #4
 800b464:	f020 0007 	bic.w	r0, r0, #7
 800b468:	1ac2      	subs	r2, r0, r3
 800b46a:	bf1c      	itt	ne
 800b46c:	1a1b      	subne	r3, r3, r0
 800b46e:	50a3      	strne	r3, [r4, r2]
 800b470:	e7af      	b.n	800b3d2 <_malloc_r+0x22>
 800b472:	6862      	ldr	r2, [r4, #4]
 800b474:	42a3      	cmp	r3, r4
 800b476:	bf0c      	ite	eq
 800b478:	f8c8 2000 	streq.w	r2, [r8]
 800b47c:	605a      	strne	r2, [r3, #4]
 800b47e:	e7eb      	b.n	800b458 <_malloc_r+0xa8>
 800b480:	4623      	mov	r3, r4
 800b482:	6864      	ldr	r4, [r4, #4]
 800b484:	e7ae      	b.n	800b3e4 <_malloc_r+0x34>
 800b486:	463c      	mov	r4, r7
 800b488:	687f      	ldr	r7, [r7, #4]
 800b48a:	e7b6      	b.n	800b3fa <_malloc_r+0x4a>
 800b48c:	461a      	mov	r2, r3
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	42a3      	cmp	r3, r4
 800b492:	d1fb      	bne.n	800b48c <_malloc_r+0xdc>
 800b494:	2300      	movs	r3, #0
 800b496:	6053      	str	r3, [r2, #4]
 800b498:	e7de      	b.n	800b458 <_malloc_r+0xa8>
 800b49a:	230c      	movs	r3, #12
 800b49c:	6033      	str	r3, [r6, #0]
 800b49e:	4630      	mov	r0, r6
 800b4a0:	f000 f80c 	bl	800b4bc <__malloc_unlock>
 800b4a4:	e794      	b.n	800b3d0 <_malloc_r+0x20>
 800b4a6:	6005      	str	r5, [r0, #0]
 800b4a8:	e7d6      	b.n	800b458 <_malloc_r+0xa8>
 800b4aa:	bf00      	nop
 800b4ac:	20001ca8 	.word	0x20001ca8

0800b4b0 <__malloc_lock>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	@ (800b4b8 <__malloc_lock+0x8>)
 800b4b2:	f7ff bf01 	b.w	800b2b8 <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	20001ca0 	.word	0x20001ca0

0800b4bc <__malloc_unlock>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	@ (800b4c4 <__malloc_unlock+0x8>)
 800b4be:	f7ff befc 	b.w	800b2ba <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20001ca0 	.word	0x20001ca0

0800b4c8 <__ssputs_r>:
 800b4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	688e      	ldr	r6, [r1, #8]
 800b4ce:	461f      	mov	r7, r3
 800b4d0:	42be      	cmp	r6, r7
 800b4d2:	680b      	ldr	r3, [r1, #0]
 800b4d4:	4682      	mov	sl, r0
 800b4d6:	460c      	mov	r4, r1
 800b4d8:	4690      	mov	r8, r2
 800b4da:	d82d      	bhi.n	800b538 <__ssputs_r+0x70>
 800b4dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b4e0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b4e4:	d026      	beq.n	800b534 <__ssputs_r+0x6c>
 800b4e6:	6965      	ldr	r5, [r4, #20]
 800b4e8:	6909      	ldr	r1, [r1, #16]
 800b4ea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b4ee:	eba3 0901 	sub.w	r9, r3, r1
 800b4f2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b4f6:	1c7b      	adds	r3, r7, #1
 800b4f8:	444b      	add	r3, r9
 800b4fa:	106d      	asrs	r5, r5, #1
 800b4fc:	429d      	cmp	r5, r3
 800b4fe:	bf38      	it	cc
 800b500:	461d      	movcc	r5, r3
 800b502:	0553      	lsls	r3, r2, #21
 800b504:	d527      	bpl.n	800b556 <__ssputs_r+0x8e>
 800b506:	4629      	mov	r1, r5
 800b508:	f7ff ff52 	bl	800b3b0 <_malloc_r>
 800b50c:	4606      	mov	r6, r0
 800b50e:	b360      	cbz	r0, 800b56a <__ssputs_r+0xa2>
 800b510:	6921      	ldr	r1, [r4, #16]
 800b512:	464a      	mov	r2, r9
 800b514:	f7ff fed2 	bl	800b2bc <memcpy>
 800b518:	89a3      	ldrh	r3, [r4, #12]
 800b51a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b51e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b522:	81a3      	strh	r3, [r4, #12]
 800b524:	6126      	str	r6, [r4, #16]
 800b526:	6165      	str	r5, [r4, #20]
 800b528:	444e      	add	r6, r9
 800b52a:	eba5 0509 	sub.w	r5, r5, r9
 800b52e:	6026      	str	r6, [r4, #0]
 800b530:	60a5      	str	r5, [r4, #8]
 800b532:	463e      	mov	r6, r7
 800b534:	42be      	cmp	r6, r7
 800b536:	d900      	bls.n	800b53a <__ssputs_r+0x72>
 800b538:	463e      	mov	r6, r7
 800b53a:	6820      	ldr	r0, [r4, #0]
 800b53c:	4632      	mov	r2, r6
 800b53e:	4641      	mov	r1, r8
 800b540:	f000 faa6 	bl	800ba90 <memmove>
 800b544:	68a3      	ldr	r3, [r4, #8]
 800b546:	1b9b      	subs	r3, r3, r6
 800b548:	60a3      	str	r3, [r4, #8]
 800b54a:	6823      	ldr	r3, [r4, #0]
 800b54c:	4433      	add	r3, r6
 800b54e:	6023      	str	r3, [r4, #0]
 800b550:	2000      	movs	r0, #0
 800b552:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b556:	462a      	mov	r2, r5
 800b558:	f000 fac4 	bl	800bae4 <_realloc_r>
 800b55c:	4606      	mov	r6, r0
 800b55e:	2800      	cmp	r0, #0
 800b560:	d1e0      	bne.n	800b524 <__ssputs_r+0x5c>
 800b562:	6921      	ldr	r1, [r4, #16]
 800b564:	4650      	mov	r0, sl
 800b566:	f7ff feb7 	bl	800b2d8 <_free_r>
 800b56a:	230c      	movs	r3, #12
 800b56c:	f8ca 3000 	str.w	r3, [sl]
 800b570:	89a3      	ldrh	r3, [r4, #12]
 800b572:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b576:	81a3      	strh	r3, [r4, #12]
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	e7e9      	b.n	800b552 <__ssputs_r+0x8a>
	...

0800b580 <_svfiprintf_r>:
 800b580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b584:	4698      	mov	r8, r3
 800b586:	898b      	ldrh	r3, [r1, #12]
 800b588:	061b      	lsls	r3, r3, #24
 800b58a:	b09d      	sub	sp, #116	@ 0x74
 800b58c:	4607      	mov	r7, r0
 800b58e:	460d      	mov	r5, r1
 800b590:	4614      	mov	r4, r2
 800b592:	d510      	bpl.n	800b5b6 <_svfiprintf_r+0x36>
 800b594:	690b      	ldr	r3, [r1, #16]
 800b596:	b973      	cbnz	r3, 800b5b6 <_svfiprintf_r+0x36>
 800b598:	2140      	movs	r1, #64	@ 0x40
 800b59a:	f7ff ff09 	bl	800b3b0 <_malloc_r>
 800b59e:	6028      	str	r0, [r5, #0]
 800b5a0:	6128      	str	r0, [r5, #16]
 800b5a2:	b930      	cbnz	r0, 800b5b2 <_svfiprintf_r+0x32>
 800b5a4:	230c      	movs	r3, #12
 800b5a6:	603b      	str	r3, [r7, #0]
 800b5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5ac:	b01d      	add	sp, #116	@ 0x74
 800b5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5b2:	2340      	movs	r3, #64	@ 0x40
 800b5b4:	616b      	str	r3, [r5, #20]
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5ba:	2320      	movs	r3, #32
 800b5bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b5c4:	2330      	movs	r3, #48	@ 0x30
 800b5c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b764 <_svfiprintf_r+0x1e4>
 800b5ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5ce:	f04f 0901 	mov.w	r9, #1
 800b5d2:	4623      	mov	r3, r4
 800b5d4:	469a      	mov	sl, r3
 800b5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5da:	b10a      	cbz	r2, 800b5e0 <_svfiprintf_r+0x60>
 800b5dc:	2a25      	cmp	r2, #37	@ 0x25
 800b5de:	d1f9      	bne.n	800b5d4 <_svfiprintf_r+0x54>
 800b5e0:	ebba 0b04 	subs.w	fp, sl, r4
 800b5e4:	d00b      	beq.n	800b5fe <_svfiprintf_r+0x7e>
 800b5e6:	465b      	mov	r3, fp
 800b5e8:	4622      	mov	r2, r4
 800b5ea:	4629      	mov	r1, r5
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f7ff ff6b 	bl	800b4c8 <__ssputs_r>
 800b5f2:	3001      	adds	r0, #1
 800b5f4:	f000 80a7 	beq.w	800b746 <_svfiprintf_r+0x1c6>
 800b5f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5fa:	445a      	add	r2, fp
 800b5fc:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800b602:	2b00      	cmp	r3, #0
 800b604:	f000 809f 	beq.w	800b746 <_svfiprintf_r+0x1c6>
 800b608:	2300      	movs	r3, #0
 800b60a:	f04f 32ff 	mov.w	r2, #4294967295
 800b60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b612:	f10a 0a01 	add.w	sl, sl, #1
 800b616:	9304      	str	r3, [sp, #16]
 800b618:	9307      	str	r3, [sp, #28]
 800b61a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b61e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b620:	4654      	mov	r4, sl
 800b622:	2205      	movs	r2, #5
 800b624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b628:	484e      	ldr	r0, [pc, #312]	@ (800b764 <_svfiprintf_r+0x1e4>)
 800b62a:	f7f4 fdf9 	bl	8000220 <memchr>
 800b62e:	9a04      	ldr	r2, [sp, #16]
 800b630:	b9d8      	cbnz	r0, 800b66a <_svfiprintf_r+0xea>
 800b632:	06d0      	lsls	r0, r2, #27
 800b634:	bf44      	itt	mi
 800b636:	2320      	movmi	r3, #32
 800b638:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b63c:	0711      	lsls	r1, r2, #28
 800b63e:	bf44      	itt	mi
 800b640:	232b      	movmi	r3, #43	@ 0x2b
 800b642:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b646:	f89a 3000 	ldrb.w	r3, [sl]
 800b64a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b64c:	d015      	beq.n	800b67a <_svfiprintf_r+0xfa>
 800b64e:	9a07      	ldr	r2, [sp, #28]
 800b650:	4654      	mov	r4, sl
 800b652:	2000      	movs	r0, #0
 800b654:	f04f 0c0a 	mov.w	ip, #10
 800b658:	4621      	mov	r1, r4
 800b65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b65e:	3b30      	subs	r3, #48	@ 0x30
 800b660:	2b09      	cmp	r3, #9
 800b662:	d94b      	bls.n	800b6fc <_svfiprintf_r+0x17c>
 800b664:	b1b0      	cbz	r0, 800b694 <_svfiprintf_r+0x114>
 800b666:	9207      	str	r2, [sp, #28]
 800b668:	e014      	b.n	800b694 <_svfiprintf_r+0x114>
 800b66a:	eba0 0308 	sub.w	r3, r0, r8
 800b66e:	fa09 f303 	lsl.w	r3, r9, r3
 800b672:	4313      	orrs	r3, r2
 800b674:	9304      	str	r3, [sp, #16]
 800b676:	46a2      	mov	sl, r4
 800b678:	e7d2      	b.n	800b620 <_svfiprintf_r+0xa0>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	1d19      	adds	r1, r3, #4
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	9103      	str	r1, [sp, #12]
 800b682:	2b00      	cmp	r3, #0
 800b684:	bfbb      	ittet	lt
 800b686:	425b      	neglt	r3, r3
 800b688:	f042 0202 	orrlt.w	r2, r2, #2
 800b68c:	9307      	strge	r3, [sp, #28]
 800b68e:	9307      	strlt	r3, [sp, #28]
 800b690:	bfb8      	it	lt
 800b692:	9204      	strlt	r2, [sp, #16]
 800b694:	7823      	ldrb	r3, [r4, #0]
 800b696:	2b2e      	cmp	r3, #46	@ 0x2e
 800b698:	d10a      	bne.n	800b6b0 <_svfiprintf_r+0x130>
 800b69a:	7863      	ldrb	r3, [r4, #1]
 800b69c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b69e:	d132      	bne.n	800b706 <_svfiprintf_r+0x186>
 800b6a0:	9b03      	ldr	r3, [sp, #12]
 800b6a2:	1d1a      	adds	r2, r3, #4
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	9203      	str	r2, [sp, #12]
 800b6a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b6ac:	3402      	adds	r4, #2
 800b6ae:	9305      	str	r3, [sp, #20]
 800b6b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b774 <_svfiprintf_r+0x1f4>
 800b6b4:	7821      	ldrb	r1, [r4, #0]
 800b6b6:	2203      	movs	r2, #3
 800b6b8:	4650      	mov	r0, sl
 800b6ba:	f7f4 fdb1 	bl	8000220 <memchr>
 800b6be:	b138      	cbz	r0, 800b6d0 <_svfiprintf_r+0x150>
 800b6c0:	9b04      	ldr	r3, [sp, #16]
 800b6c2:	eba0 000a 	sub.w	r0, r0, sl
 800b6c6:	2240      	movs	r2, #64	@ 0x40
 800b6c8:	4082      	lsls	r2, r0
 800b6ca:	4313      	orrs	r3, r2
 800b6cc:	3401      	adds	r4, #1
 800b6ce:	9304      	str	r3, [sp, #16]
 800b6d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6d4:	4824      	ldr	r0, [pc, #144]	@ (800b768 <_svfiprintf_r+0x1e8>)
 800b6d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6da:	2206      	movs	r2, #6
 800b6dc:	f7f4 fda0 	bl	8000220 <memchr>
 800b6e0:	2800      	cmp	r0, #0
 800b6e2:	d036      	beq.n	800b752 <_svfiprintf_r+0x1d2>
 800b6e4:	4b21      	ldr	r3, [pc, #132]	@ (800b76c <_svfiprintf_r+0x1ec>)
 800b6e6:	bb1b      	cbnz	r3, 800b730 <_svfiprintf_r+0x1b0>
 800b6e8:	9b03      	ldr	r3, [sp, #12]
 800b6ea:	3307      	adds	r3, #7
 800b6ec:	f023 0307 	bic.w	r3, r3, #7
 800b6f0:	3308      	adds	r3, #8
 800b6f2:	9303      	str	r3, [sp, #12]
 800b6f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6f6:	4433      	add	r3, r6
 800b6f8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6fa:	e76a      	b.n	800b5d2 <_svfiprintf_r+0x52>
 800b6fc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b700:	460c      	mov	r4, r1
 800b702:	2001      	movs	r0, #1
 800b704:	e7a8      	b.n	800b658 <_svfiprintf_r+0xd8>
 800b706:	2300      	movs	r3, #0
 800b708:	3401      	adds	r4, #1
 800b70a:	9305      	str	r3, [sp, #20]
 800b70c:	4619      	mov	r1, r3
 800b70e:	f04f 0c0a 	mov.w	ip, #10
 800b712:	4620      	mov	r0, r4
 800b714:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b718:	3a30      	subs	r2, #48	@ 0x30
 800b71a:	2a09      	cmp	r2, #9
 800b71c:	d903      	bls.n	800b726 <_svfiprintf_r+0x1a6>
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d0c6      	beq.n	800b6b0 <_svfiprintf_r+0x130>
 800b722:	9105      	str	r1, [sp, #20]
 800b724:	e7c4      	b.n	800b6b0 <_svfiprintf_r+0x130>
 800b726:	fb0c 2101 	mla	r1, ip, r1, r2
 800b72a:	4604      	mov	r4, r0
 800b72c:	2301      	movs	r3, #1
 800b72e:	e7f0      	b.n	800b712 <_svfiprintf_r+0x192>
 800b730:	ab03      	add	r3, sp, #12
 800b732:	9300      	str	r3, [sp, #0]
 800b734:	462a      	mov	r2, r5
 800b736:	4b0e      	ldr	r3, [pc, #56]	@ (800b770 <_svfiprintf_r+0x1f0>)
 800b738:	a904      	add	r1, sp, #16
 800b73a:	4638      	mov	r0, r7
 800b73c:	f3af 8000 	nop.w
 800b740:	1c42      	adds	r2, r0, #1
 800b742:	4606      	mov	r6, r0
 800b744:	d1d6      	bne.n	800b6f4 <_svfiprintf_r+0x174>
 800b746:	89ab      	ldrh	r3, [r5, #12]
 800b748:	065b      	lsls	r3, r3, #25
 800b74a:	f53f af2d 	bmi.w	800b5a8 <_svfiprintf_r+0x28>
 800b74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b750:	e72c      	b.n	800b5ac <_svfiprintf_r+0x2c>
 800b752:	ab03      	add	r3, sp, #12
 800b754:	9300      	str	r3, [sp, #0]
 800b756:	462a      	mov	r2, r5
 800b758:	4b05      	ldr	r3, [pc, #20]	@ (800b770 <_svfiprintf_r+0x1f0>)
 800b75a:	a904      	add	r1, sp, #16
 800b75c:	4638      	mov	r0, r7
 800b75e:	f000 f879 	bl	800b854 <_printf_i>
 800b762:	e7ed      	b.n	800b740 <_svfiprintf_r+0x1c0>
 800b764:	0800c5f4 	.word	0x0800c5f4
 800b768:	0800c5fe 	.word	0x0800c5fe
 800b76c:	00000000 	.word	0x00000000
 800b770:	0800b4c9 	.word	0x0800b4c9
 800b774:	0800c5fa 	.word	0x0800c5fa

0800b778 <_printf_common>:
 800b778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b77c:	4616      	mov	r6, r2
 800b77e:	4698      	mov	r8, r3
 800b780:	688a      	ldr	r2, [r1, #8]
 800b782:	690b      	ldr	r3, [r1, #16]
 800b784:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b788:	4293      	cmp	r3, r2
 800b78a:	bfb8      	it	lt
 800b78c:	4613      	movlt	r3, r2
 800b78e:	6033      	str	r3, [r6, #0]
 800b790:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b794:	4607      	mov	r7, r0
 800b796:	460c      	mov	r4, r1
 800b798:	b10a      	cbz	r2, 800b79e <_printf_common+0x26>
 800b79a:	3301      	adds	r3, #1
 800b79c:	6033      	str	r3, [r6, #0]
 800b79e:	6823      	ldr	r3, [r4, #0]
 800b7a0:	0699      	lsls	r1, r3, #26
 800b7a2:	bf42      	ittt	mi
 800b7a4:	6833      	ldrmi	r3, [r6, #0]
 800b7a6:	3302      	addmi	r3, #2
 800b7a8:	6033      	strmi	r3, [r6, #0]
 800b7aa:	6825      	ldr	r5, [r4, #0]
 800b7ac:	f015 0506 	ands.w	r5, r5, #6
 800b7b0:	d106      	bne.n	800b7c0 <_printf_common+0x48>
 800b7b2:	f104 0a19 	add.w	sl, r4, #25
 800b7b6:	68e3      	ldr	r3, [r4, #12]
 800b7b8:	6832      	ldr	r2, [r6, #0]
 800b7ba:	1a9b      	subs	r3, r3, r2
 800b7bc:	42ab      	cmp	r3, r5
 800b7be:	dc26      	bgt.n	800b80e <_printf_common+0x96>
 800b7c0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7c4:	6822      	ldr	r2, [r4, #0]
 800b7c6:	3b00      	subs	r3, #0
 800b7c8:	bf18      	it	ne
 800b7ca:	2301      	movne	r3, #1
 800b7cc:	0692      	lsls	r2, r2, #26
 800b7ce:	d42b      	bmi.n	800b828 <_printf_common+0xb0>
 800b7d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7d4:	4641      	mov	r1, r8
 800b7d6:	4638      	mov	r0, r7
 800b7d8:	47c8      	blx	r9
 800b7da:	3001      	adds	r0, #1
 800b7dc:	d01e      	beq.n	800b81c <_printf_common+0xa4>
 800b7de:	6823      	ldr	r3, [r4, #0]
 800b7e0:	6922      	ldr	r2, [r4, #16]
 800b7e2:	f003 0306 	and.w	r3, r3, #6
 800b7e6:	2b04      	cmp	r3, #4
 800b7e8:	bf02      	ittt	eq
 800b7ea:	68e5      	ldreq	r5, [r4, #12]
 800b7ec:	6833      	ldreq	r3, [r6, #0]
 800b7ee:	1aed      	subeq	r5, r5, r3
 800b7f0:	68a3      	ldr	r3, [r4, #8]
 800b7f2:	bf0c      	ite	eq
 800b7f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7f8:	2500      	movne	r5, #0
 800b7fa:	4293      	cmp	r3, r2
 800b7fc:	bfc4      	itt	gt
 800b7fe:	1a9b      	subgt	r3, r3, r2
 800b800:	18ed      	addgt	r5, r5, r3
 800b802:	2600      	movs	r6, #0
 800b804:	341a      	adds	r4, #26
 800b806:	42b5      	cmp	r5, r6
 800b808:	d11a      	bne.n	800b840 <_printf_common+0xc8>
 800b80a:	2000      	movs	r0, #0
 800b80c:	e008      	b.n	800b820 <_printf_common+0xa8>
 800b80e:	2301      	movs	r3, #1
 800b810:	4652      	mov	r2, sl
 800b812:	4641      	mov	r1, r8
 800b814:	4638      	mov	r0, r7
 800b816:	47c8      	blx	r9
 800b818:	3001      	adds	r0, #1
 800b81a:	d103      	bne.n	800b824 <_printf_common+0xac>
 800b81c:	f04f 30ff 	mov.w	r0, #4294967295
 800b820:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b824:	3501      	adds	r5, #1
 800b826:	e7c6      	b.n	800b7b6 <_printf_common+0x3e>
 800b828:	18e1      	adds	r1, r4, r3
 800b82a:	1c5a      	adds	r2, r3, #1
 800b82c:	2030      	movs	r0, #48	@ 0x30
 800b82e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b832:	4422      	add	r2, r4
 800b834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b838:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b83c:	3302      	adds	r3, #2
 800b83e:	e7c7      	b.n	800b7d0 <_printf_common+0x58>
 800b840:	2301      	movs	r3, #1
 800b842:	4622      	mov	r2, r4
 800b844:	4641      	mov	r1, r8
 800b846:	4638      	mov	r0, r7
 800b848:	47c8      	blx	r9
 800b84a:	3001      	adds	r0, #1
 800b84c:	d0e6      	beq.n	800b81c <_printf_common+0xa4>
 800b84e:	3601      	adds	r6, #1
 800b850:	e7d9      	b.n	800b806 <_printf_common+0x8e>
	...

0800b854 <_printf_i>:
 800b854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b858:	7e0f      	ldrb	r7, [r1, #24]
 800b85a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b85c:	2f78      	cmp	r7, #120	@ 0x78
 800b85e:	4691      	mov	r9, r2
 800b860:	4680      	mov	r8, r0
 800b862:	460c      	mov	r4, r1
 800b864:	469a      	mov	sl, r3
 800b866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b86a:	d807      	bhi.n	800b87c <_printf_i+0x28>
 800b86c:	2f62      	cmp	r7, #98	@ 0x62
 800b86e:	d80a      	bhi.n	800b886 <_printf_i+0x32>
 800b870:	2f00      	cmp	r7, #0
 800b872:	f000 80d1 	beq.w	800ba18 <_printf_i+0x1c4>
 800b876:	2f58      	cmp	r7, #88	@ 0x58
 800b878:	f000 80b8 	beq.w	800b9ec <_printf_i+0x198>
 800b87c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b884:	e03a      	b.n	800b8fc <_printf_i+0xa8>
 800b886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b88a:	2b15      	cmp	r3, #21
 800b88c:	d8f6      	bhi.n	800b87c <_printf_i+0x28>
 800b88e:	a101      	add	r1, pc, #4	@ (adr r1, 800b894 <_printf_i+0x40>)
 800b890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b894:	0800b8ed 	.word	0x0800b8ed
 800b898:	0800b901 	.word	0x0800b901
 800b89c:	0800b87d 	.word	0x0800b87d
 800b8a0:	0800b87d 	.word	0x0800b87d
 800b8a4:	0800b87d 	.word	0x0800b87d
 800b8a8:	0800b87d 	.word	0x0800b87d
 800b8ac:	0800b901 	.word	0x0800b901
 800b8b0:	0800b87d 	.word	0x0800b87d
 800b8b4:	0800b87d 	.word	0x0800b87d
 800b8b8:	0800b87d 	.word	0x0800b87d
 800b8bc:	0800b87d 	.word	0x0800b87d
 800b8c0:	0800b9ff 	.word	0x0800b9ff
 800b8c4:	0800b92b 	.word	0x0800b92b
 800b8c8:	0800b9b9 	.word	0x0800b9b9
 800b8cc:	0800b87d 	.word	0x0800b87d
 800b8d0:	0800b87d 	.word	0x0800b87d
 800b8d4:	0800ba21 	.word	0x0800ba21
 800b8d8:	0800b87d 	.word	0x0800b87d
 800b8dc:	0800b92b 	.word	0x0800b92b
 800b8e0:	0800b87d 	.word	0x0800b87d
 800b8e4:	0800b87d 	.word	0x0800b87d
 800b8e8:	0800b9c1 	.word	0x0800b9c1
 800b8ec:	6833      	ldr	r3, [r6, #0]
 800b8ee:	1d1a      	adds	r2, r3, #4
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	6032      	str	r2, [r6, #0]
 800b8f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	e09c      	b.n	800ba3a <_printf_i+0x1e6>
 800b900:	6833      	ldr	r3, [r6, #0]
 800b902:	6820      	ldr	r0, [r4, #0]
 800b904:	1d19      	adds	r1, r3, #4
 800b906:	6031      	str	r1, [r6, #0]
 800b908:	0606      	lsls	r6, r0, #24
 800b90a:	d501      	bpl.n	800b910 <_printf_i+0xbc>
 800b90c:	681d      	ldr	r5, [r3, #0]
 800b90e:	e003      	b.n	800b918 <_printf_i+0xc4>
 800b910:	0645      	lsls	r5, r0, #25
 800b912:	d5fb      	bpl.n	800b90c <_printf_i+0xb8>
 800b914:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b918:	2d00      	cmp	r5, #0
 800b91a:	da03      	bge.n	800b924 <_printf_i+0xd0>
 800b91c:	232d      	movs	r3, #45	@ 0x2d
 800b91e:	426d      	negs	r5, r5
 800b920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b924:	4858      	ldr	r0, [pc, #352]	@ (800ba88 <_printf_i+0x234>)
 800b926:	230a      	movs	r3, #10
 800b928:	e011      	b.n	800b94e <_printf_i+0xfa>
 800b92a:	6821      	ldr	r1, [r4, #0]
 800b92c:	6833      	ldr	r3, [r6, #0]
 800b92e:	0608      	lsls	r0, r1, #24
 800b930:	f853 5b04 	ldr.w	r5, [r3], #4
 800b934:	d402      	bmi.n	800b93c <_printf_i+0xe8>
 800b936:	0649      	lsls	r1, r1, #25
 800b938:	bf48      	it	mi
 800b93a:	b2ad      	uxthmi	r5, r5
 800b93c:	2f6f      	cmp	r7, #111	@ 0x6f
 800b93e:	4852      	ldr	r0, [pc, #328]	@ (800ba88 <_printf_i+0x234>)
 800b940:	6033      	str	r3, [r6, #0]
 800b942:	bf14      	ite	ne
 800b944:	230a      	movne	r3, #10
 800b946:	2308      	moveq	r3, #8
 800b948:	2100      	movs	r1, #0
 800b94a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b94e:	6866      	ldr	r6, [r4, #4]
 800b950:	60a6      	str	r6, [r4, #8]
 800b952:	2e00      	cmp	r6, #0
 800b954:	db05      	blt.n	800b962 <_printf_i+0x10e>
 800b956:	6821      	ldr	r1, [r4, #0]
 800b958:	432e      	orrs	r6, r5
 800b95a:	f021 0104 	bic.w	r1, r1, #4
 800b95e:	6021      	str	r1, [r4, #0]
 800b960:	d04b      	beq.n	800b9fa <_printf_i+0x1a6>
 800b962:	4616      	mov	r6, r2
 800b964:	fbb5 f1f3 	udiv	r1, r5, r3
 800b968:	fb03 5711 	mls	r7, r3, r1, r5
 800b96c:	5dc7      	ldrb	r7, [r0, r7]
 800b96e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b972:	462f      	mov	r7, r5
 800b974:	42bb      	cmp	r3, r7
 800b976:	460d      	mov	r5, r1
 800b978:	d9f4      	bls.n	800b964 <_printf_i+0x110>
 800b97a:	2b08      	cmp	r3, #8
 800b97c:	d10b      	bne.n	800b996 <_printf_i+0x142>
 800b97e:	6823      	ldr	r3, [r4, #0]
 800b980:	07df      	lsls	r7, r3, #31
 800b982:	d508      	bpl.n	800b996 <_printf_i+0x142>
 800b984:	6923      	ldr	r3, [r4, #16]
 800b986:	6861      	ldr	r1, [r4, #4]
 800b988:	4299      	cmp	r1, r3
 800b98a:	bfde      	ittt	le
 800b98c:	2330      	movle	r3, #48	@ 0x30
 800b98e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b992:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b996:	1b92      	subs	r2, r2, r6
 800b998:	6122      	str	r2, [r4, #16]
 800b99a:	f8cd a000 	str.w	sl, [sp]
 800b99e:	464b      	mov	r3, r9
 800b9a0:	aa03      	add	r2, sp, #12
 800b9a2:	4621      	mov	r1, r4
 800b9a4:	4640      	mov	r0, r8
 800b9a6:	f7ff fee7 	bl	800b778 <_printf_common>
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	d14a      	bne.n	800ba44 <_printf_i+0x1f0>
 800b9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b9b2:	b004      	add	sp, #16
 800b9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9b8:	6823      	ldr	r3, [r4, #0]
 800b9ba:	f043 0320 	orr.w	r3, r3, #32
 800b9be:	6023      	str	r3, [r4, #0]
 800b9c0:	4832      	ldr	r0, [pc, #200]	@ (800ba8c <_printf_i+0x238>)
 800b9c2:	2778      	movs	r7, #120	@ 0x78
 800b9c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	6831      	ldr	r1, [r6, #0]
 800b9cc:	061f      	lsls	r7, r3, #24
 800b9ce:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9d2:	d402      	bmi.n	800b9da <_printf_i+0x186>
 800b9d4:	065f      	lsls	r7, r3, #25
 800b9d6:	bf48      	it	mi
 800b9d8:	b2ad      	uxthmi	r5, r5
 800b9da:	6031      	str	r1, [r6, #0]
 800b9dc:	07d9      	lsls	r1, r3, #31
 800b9de:	bf44      	itt	mi
 800b9e0:	f043 0320 	orrmi.w	r3, r3, #32
 800b9e4:	6023      	strmi	r3, [r4, #0]
 800b9e6:	b11d      	cbz	r5, 800b9f0 <_printf_i+0x19c>
 800b9e8:	2310      	movs	r3, #16
 800b9ea:	e7ad      	b.n	800b948 <_printf_i+0xf4>
 800b9ec:	4826      	ldr	r0, [pc, #152]	@ (800ba88 <_printf_i+0x234>)
 800b9ee:	e7e9      	b.n	800b9c4 <_printf_i+0x170>
 800b9f0:	6823      	ldr	r3, [r4, #0]
 800b9f2:	f023 0320 	bic.w	r3, r3, #32
 800b9f6:	6023      	str	r3, [r4, #0]
 800b9f8:	e7f6      	b.n	800b9e8 <_printf_i+0x194>
 800b9fa:	4616      	mov	r6, r2
 800b9fc:	e7bd      	b.n	800b97a <_printf_i+0x126>
 800b9fe:	6833      	ldr	r3, [r6, #0]
 800ba00:	6825      	ldr	r5, [r4, #0]
 800ba02:	6961      	ldr	r1, [r4, #20]
 800ba04:	1d18      	adds	r0, r3, #4
 800ba06:	6030      	str	r0, [r6, #0]
 800ba08:	062e      	lsls	r6, r5, #24
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	d501      	bpl.n	800ba12 <_printf_i+0x1be>
 800ba0e:	6019      	str	r1, [r3, #0]
 800ba10:	e002      	b.n	800ba18 <_printf_i+0x1c4>
 800ba12:	0668      	lsls	r0, r5, #25
 800ba14:	d5fb      	bpl.n	800ba0e <_printf_i+0x1ba>
 800ba16:	8019      	strh	r1, [r3, #0]
 800ba18:	2300      	movs	r3, #0
 800ba1a:	6123      	str	r3, [r4, #16]
 800ba1c:	4616      	mov	r6, r2
 800ba1e:	e7bc      	b.n	800b99a <_printf_i+0x146>
 800ba20:	6833      	ldr	r3, [r6, #0]
 800ba22:	1d1a      	adds	r2, r3, #4
 800ba24:	6032      	str	r2, [r6, #0]
 800ba26:	681e      	ldr	r6, [r3, #0]
 800ba28:	6862      	ldr	r2, [r4, #4]
 800ba2a:	2100      	movs	r1, #0
 800ba2c:	4630      	mov	r0, r6
 800ba2e:	f7f4 fbf7 	bl	8000220 <memchr>
 800ba32:	b108      	cbz	r0, 800ba38 <_printf_i+0x1e4>
 800ba34:	1b80      	subs	r0, r0, r6
 800ba36:	6060      	str	r0, [r4, #4]
 800ba38:	6863      	ldr	r3, [r4, #4]
 800ba3a:	6123      	str	r3, [r4, #16]
 800ba3c:	2300      	movs	r3, #0
 800ba3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba42:	e7aa      	b.n	800b99a <_printf_i+0x146>
 800ba44:	6923      	ldr	r3, [r4, #16]
 800ba46:	4632      	mov	r2, r6
 800ba48:	4649      	mov	r1, r9
 800ba4a:	4640      	mov	r0, r8
 800ba4c:	47d0      	blx	sl
 800ba4e:	3001      	adds	r0, #1
 800ba50:	d0ad      	beq.n	800b9ae <_printf_i+0x15a>
 800ba52:	6823      	ldr	r3, [r4, #0]
 800ba54:	079b      	lsls	r3, r3, #30
 800ba56:	d413      	bmi.n	800ba80 <_printf_i+0x22c>
 800ba58:	68e0      	ldr	r0, [r4, #12]
 800ba5a:	9b03      	ldr	r3, [sp, #12]
 800ba5c:	4298      	cmp	r0, r3
 800ba5e:	bfb8      	it	lt
 800ba60:	4618      	movlt	r0, r3
 800ba62:	e7a6      	b.n	800b9b2 <_printf_i+0x15e>
 800ba64:	2301      	movs	r3, #1
 800ba66:	4632      	mov	r2, r6
 800ba68:	4649      	mov	r1, r9
 800ba6a:	4640      	mov	r0, r8
 800ba6c:	47d0      	blx	sl
 800ba6e:	3001      	adds	r0, #1
 800ba70:	d09d      	beq.n	800b9ae <_printf_i+0x15a>
 800ba72:	3501      	adds	r5, #1
 800ba74:	68e3      	ldr	r3, [r4, #12]
 800ba76:	9903      	ldr	r1, [sp, #12]
 800ba78:	1a5b      	subs	r3, r3, r1
 800ba7a:	42ab      	cmp	r3, r5
 800ba7c:	dcf2      	bgt.n	800ba64 <_printf_i+0x210>
 800ba7e:	e7eb      	b.n	800ba58 <_printf_i+0x204>
 800ba80:	2500      	movs	r5, #0
 800ba82:	f104 0619 	add.w	r6, r4, #25
 800ba86:	e7f5      	b.n	800ba74 <_printf_i+0x220>
 800ba88:	0800c605 	.word	0x0800c605
 800ba8c:	0800c616 	.word	0x0800c616

0800ba90 <memmove>:
 800ba90:	4288      	cmp	r0, r1
 800ba92:	b510      	push	{r4, lr}
 800ba94:	eb01 0402 	add.w	r4, r1, r2
 800ba98:	d902      	bls.n	800baa0 <memmove+0x10>
 800ba9a:	4284      	cmp	r4, r0
 800ba9c:	4623      	mov	r3, r4
 800ba9e:	d807      	bhi.n	800bab0 <memmove+0x20>
 800baa0:	1e43      	subs	r3, r0, #1
 800baa2:	42a1      	cmp	r1, r4
 800baa4:	d008      	beq.n	800bab8 <memmove+0x28>
 800baa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800baaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800baae:	e7f8      	b.n	800baa2 <memmove+0x12>
 800bab0:	4402      	add	r2, r0
 800bab2:	4601      	mov	r1, r0
 800bab4:	428a      	cmp	r2, r1
 800bab6:	d100      	bne.n	800baba <memmove+0x2a>
 800bab8:	bd10      	pop	{r4, pc}
 800baba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800babe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bac2:	e7f7      	b.n	800bab4 <memmove+0x24>

0800bac4 <_sbrk_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4d06      	ldr	r5, [pc, #24]	@ (800bae0 <_sbrk_r+0x1c>)
 800bac8:	2300      	movs	r3, #0
 800baca:	4604      	mov	r4, r0
 800bacc:	4608      	mov	r0, r1
 800bace:	602b      	str	r3, [r5, #0]
 800bad0:	f7f9 fe2c 	bl	800572c <_sbrk>
 800bad4:	1c43      	adds	r3, r0, #1
 800bad6:	d102      	bne.n	800bade <_sbrk_r+0x1a>
 800bad8:	682b      	ldr	r3, [r5, #0]
 800bada:	b103      	cbz	r3, 800bade <_sbrk_r+0x1a>
 800badc:	6023      	str	r3, [r4, #0]
 800bade:	bd38      	pop	{r3, r4, r5, pc}
 800bae0:	20001c9c 	.word	0x20001c9c

0800bae4 <_realloc_r>:
 800bae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bae8:	4607      	mov	r7, r0
 800baea:	4614      	mov	r4, r2
 800baec:	460d      	mov	r5, r1
 800baee:	b921      	cbnz	r1, 800bafa <_realloc_r+0x16>
 800baf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800baf4:	4611      	mov	r1, r2
 800baf6:	f7ff bc5b 	b.w	800b3b0 <_malloc_r>
 800bafa:	b92a      	cbnz	r2, 800bb08 <_realloc_r+0x24>
 800bafc:	f7ff fbec 	bl	800b2d8 <_free_r>
 800bb00:	4625      	mov	r5, r4
 800bb02:	4628      	mov	r0, r5
 800bb04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb08:	f000 f81a 	bl	800bb40 <_malloc_usable_size_r>
 800bb0c:	4284      	cmp	r4, r0
 800bb0e:	4606      	mov	r6, r0
 800bb10:	d802      	bhi.n	800bb18 <_realloc_r+0x34>
 800bb12:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bb16:	d8f4      	bhi.n	800bb02 <_realloc_r+0x1e>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4638      	mov	r0, r7
 800bb1c:	f7ff fc48 	bl	800b3b0 <_malloc_r>
 800bb20:	4680      	mov	r8, r0
 800bb22:	b908      	cbnz	r0, 800bb28 <_realloc_r+0x44>
 800bb24:	4645      	mov	r5, r8
 800bb26:	e7ec      	b.n	800bb02 <_realloc_r+0x1e>
 800bb28:	42b4      	cmp	r4, r6
 800bb2a:	4622      	mov	r2, r4
 800bb2c:	4629      	mov	r1, r5
 800bb2e:	bf28      	it	cs
 800bb30:	4632      	movcs	r2, r6
 800bb32:	f7ff fbc3 	bl	800b2bc <memcpy>
 800bb36:	4629      	mov	r1, r5
 800bb38:	4638      	mov	r0, r7
 800bb3a:	f7ff fbcd 	bl	800b2d8 <_free_r>
 800bb3e:	e7f1      	b.n	800bb24 <_realloc_r+0x40>

0800bb40 <_malloc_usable_size_r>:
 800bb40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bb44:	1f18      	subs	r0, r3, #4
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfbc      	itt	lt
 800bb4a:	580b      	ldrlt	r3, [r1, r0]
 800bb4c:	18c0      	addlt	r0, r0, r3
 800bb4e:	4770      	bx	lr

0800bb50 <_init>:
 800bb50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb52:	bf00      	nop
 800bb54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb56:	bc08      	pop	{r3}
 800bb58:	469e      	mov	lr, r3
 800bb5a:	4770      	bx	lr

0800bb5c <_fini>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	bf00      	nop
 800bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb62:	bc08      	pop	{r3}
 800bb64:	469e      	mov	lr, r3
 800bb66:	4770      	bx	lr

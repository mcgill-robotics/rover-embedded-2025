
2025DriveMotors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c244  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a84  0800c424  0800c424  0000d424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cea8  0800cea8  0000e54c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cea8  0800cea8  0000dea8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ceb0  0800ceb0  0000e54c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ceb0  0800ceb0  0000deb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ceb4  0800ceb4  0000deb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000054c  20000000  0800ceb8  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000181c  20000550  0800d404  0000e550  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d6c  0800d404  0000ed6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e54c  2**0
                  CONTENTS, READONLY
 12 .debug_line   00053182  00000000  00000000  0000e57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000096  00000000  00000000  000616fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00052f83  00000000  00000000  00061794  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a1a0  00000000  00000000  000b4717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  000be8b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00110e04  00000000  00000000  000c0d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003cef  00000000  00000000  001d1b34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000228f0  00000000  00000000  001d5823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00030aff  00000000  00000000  001f8113  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00228c12  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00006820  00000000  00000000  00228c58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000550 	.word	0x20000550
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c40c 	.word	0x0800c40c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000554 	.word	0x20000554
 800021c:	0800c40c 	.word	0x0800c40c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__gedf2>:
 8000638:	f04f 3cff 	mov.w	ip, #4294967295
 800063c:	e006      	b.n	800064c <__cmpdf2+0x4>
 800063e:	bf00      	nop

08000640 <__ledf2>:
 8000640:	f04f 0c01 	mov.w	ip, #1
 8000644:	e002      	b.n	800064c <__cmpdf2+0x4>
 8000646:	bf00      	nop

08000648 <__cmpdf2>:
 8000648:	f04f 0c01 	mov.w	ip, #1
 800064c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000650:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000654:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000658:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800065c:	bf18      	it	ne
 800065e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000662:	d01b      	beq.n	800069c <__cmpdf2+0x54>
 8000664:	b001      	add	sp, #4
 8000666:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800066a:	bf0c      	ite	eq
 800066c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000670:	ea91 0f03 	teqne	r1, r3
 8000674:	bf02      	ittt	eq
 8000676:	ea90 0f02 	teqeq	r0, r2
 800067a:	2000      	moveq	r0, #0
 800067c:	4770      	bxeq	lr
 800067e:	f110 0f00 	cmn.w	r0, #0
 8000682:	ea91 0f03 	teq	r1, r3
 8000686:	bf58      	it	pl
 8000688:	4299      	cmppl	r1, r3
 800068a:	bf08      	it	eq
 800068c:	4290      	cmpeq	r0, r2
 800068e:	bf2c      	ite	cs
 8000690:	17d8      	asrcs	r0, r3, #31
 8000692:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000696:	f040 0001 	orr.w	r0, r0, #1
 800069a:	4770      	bx	lr
 800069c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80006a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006a4:	d102      	bne.n	80006ac <__cmpdf2+0x64>
 80006a6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80006aa:	d107      	bne.n	80006bc <__cmpdf2+0x74>
 80006ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80006b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80006b4:	d1d6      	bne.n	8000664 <__cmpdf2+0x1c>
 80006b6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80006ba:	d0d3      	beq.n	8000664 <__cmpdf2+0x1c>
 80006bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop

080006c4 <__aeabi_cdrcmple>:
 80006c4:	4684      	mov	ip, r0
 80006c6:	4610      	mov	r0, r2
 80006c8:	4662      	mov	r2, ip
 80006ca:	468c      	mov	ip, r1
 80006cc:	4619      	mov	r1, r3
 80006ce:	4663      	mov	r3, ip
 80006d0:	e000      	b.n	80006d4 <__aeabi_cdcmpeq>
 80006d2:	bf00      	nop

080006d4 <__aeabi_cdcmpeq>:
 80006d4:	b501      	push	{r0, lr}
 80006d6:	f7ff ffb7 	bl	8000648 <__cmpdf2>
 80006da:	2800      	cmp	r0, #0
 80006dc:	bf48      	it	mi
 80006de:	f110 0f00 	cmnmi.w	r0, #0
 80006e2:	bd01      	pop	{r0, pc}

080006e4 <__aeabi_dcmpeq>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff fff4 	bl	80006d4 <__aeabi_cdcmpeq>
 80006ec:	bf0c      	ite	eq
 80006ee:	2001      	moveq	r0, #1
 80006f0:	2000      	movne	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_dcmplt>:
 80006f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006fc:	f7ff ffea 	bl	80006d4 <__aeabi_cdcmpeq>
 8000700:	bf34      	ite	cc
 8000702:	2001      	movcc	r0, #1
 8000704:	2000      	movcs	r0, #0
 8000706:	f85d fb08 	ldr.w	pc, [sp], #8
 800070a:	bf00      	nop

0800070c <__aeabi_dcmple>:
 800070c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000710:	f7ff ffe0 	bl	80006d4 <__aeabi_cdcmpeq>
 8000714:	bf94      	ite	ls
 8000716:	2001      	movls	r0, #1
 8000718:	2000      	movhi	r0, #0
 800071a:	f85d fb08 	ldr.w	pc, [sp], #8
 800071e:	bf00      	nop

08000720 <__aeabi_dcmpge>:
 8000720:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000724:	f7ff ffce 	bl	80006c4 <__aeabi_cdrcmple>
 8000728:	bf94      	ite	ls
 800072a:	2001      	movls	r0, #1
 800072c:	2000      	movhi	r0, #0
 800072e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000732:	bf00      	nop

08000734 <__aeabi_dcmpgt>:
 8000734:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000738:	f7ff ffc4 	bl	80006c4 <__aeabi_cdrcmple>
 800073c:	bf34      	ite	cc
 800073e:	2001      	movcc	r0, #1
 8000740:	2000      	movcs	r0, #0
 8000742:	f85d fb08 	ldr.w	pc, [sp], #8
 8000746:	bf00      	nop

08000748 <__aeabi_uldivmod>:
 8000748:	b953      	cbnz	r3, 8000760 <__aeabi_uldivmod+0x18>
 800074a:	b94a      	cbnz	r2, 8000760 <__aeabi_uldivmod+0x18>
 800074c:	2900      	cmp	r1, #0
 800074e:	bf08      	it	eq
 8000750:	2800      	cmpeq	r0, #0
 8000752:	bf1c      	itt	ne
 8000754:	f04f 31ff 	movne.w	r1, #4294967295
 8000758:	f04f 30ff 	movne.w	r0, #4294967295
 800075c:	f000 b988 	b.w	8000a70 <__aeabi_idiv0>
 8000760:	f1ad 0c08 	sub.w	ip, sp, #8
 8000764:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000768:	f000 f806 	bl	8000778 <__udivmoddi4>
 800076c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000770:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000774:	b004      	add	sp, #16
 8000776:	4770      	bx	lr

08000778 <__udivmoddi4>:
 8000778:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800077c:	9d08      	ldr	r5, [sp, #32]
 800077e:	468e      	mov	lr, r1
 8000780:	4604      	mov	r4, r0
 8000782:	4688      	mov	r8, r1
 8000784:	2b00      	cmp	r3, #0
 8000786:	d14a      	bne.n	800081e <__udivmoddi4+0xa6>
 8000788:	428a      	cmp	r2, r1
 800078a:	4617      	mov	r7, r2
 800078c:	d962      	bls.n	8000854 <__udivmoddi4+0xdc>
 800078e:	fab2 f682 	clz	r6, r2
 8000792:	b14e      	cbz	r6, 80007a8 <__udivmoddi4+0x30>
 8000794:	f1c6 0320 	rsb	r3, r6, #32
 8000798:	fa01 f806 	lsl.w	r8, r1, r6
 800079c:	fa20 f303 	lsr.w	r3, r0, r3
 80007a0:	40b7      	lsls	r7, r6
 80007a2:	ea43 0808 	orr.w	r8, r3, r8
 80007a6:	40b4      	lsls	r4, r6
 80007a8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007ac:	fa1f fc87 	uxth.w	ip, r7
 80007b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80007b4:	0c23      	lsrs	r3, r4, #16
 80007b6:	fb0e 8811 	mls	r8, lr, r1, r8
 80007ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007be:	fb01 f20c 	mul.w	r2, r1, ip
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d909      	bls.n	80007da <__udivmoddi4+0x62>
 80007c6:	18fb      	adds	r3, r7, r3
 80007c8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007cc:	f080 80ea 	bcs.w	80009a4 <__udivmoddi4+0x22c>
 80007d0:	429a      	cmp	r2, r3
 80007d2:	f240 80e7 	bls.w	80009a4 <__udivmoddi4+0x22c>
 80007d6:	3902      	subs	r1, #2
 80007d8:	443b      	add	r3, r7
 80007da:	1a9a      	subs	r2, r3, r2
 80007dc:	b2a3      	uxth	r3, r4
 80007de:	fbb2 f0fe 	udiv	r0, r2, lr
 80007e2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007e6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ea:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ee:	459c      	cmp	ip, r3
 80007f0:	d909      	bls.n	8000806 <__udivmoddi4+0x8e>
 80007f2:	18fb      	adds	r3, r7, r3
 80007f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007f8:	f080 80d6 	bcs.w	80009a8 <__udivmoddi4+0x230>
 80007fc:	459c      	cmp	ip, r3
 80007fe:	f240 80d3 	bls.w	80009a8 <__udivmoddi4+0x230>
 8000802:	443b      	add	r3, r7
 8000804:	3802      	subs	r0, #2
 8000806:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800080a:	eba3 030c 	sub.w	r3, r3, ip
 800080e:	2100      	movs	r1, #0
 8000810:	b11d      	cbz	r5, 800081a <__udivmoddi4+0xa2>
 8000812:	40f3      	lsrs	r3, r6
 8000814:	2200      	movs	r2, #0
 8000816:	e9c5 3200 	strd	r3, r2, [r5]
 800081a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800081e:	428b      	cmp	r3, r1
 8000820:	d905      	bls.n	800082e <__udivmoddi4+0xb6>
 8000822:	b10d      	cbz	r5, 8000828 <__udivmoddi4+0xb0>
 8000824:	e9c5 0100 	strd	r0, r1, [r5]
 8000828:	2100      	movs	r1, #0
 800082a:	4608      	mov	r0, r1
 800082c:	e7f5      	b.n	800081a <__udivmoddi4+0xa2>
 800082e:	fab3 f183 	clz	r1, r3
 8000832:	2900      	cmp	r1, #0
 8000834:	d146      	bne.n	80008c4 <__udivmoddi4+0x14c>
 8000836:	4573      	cmp	r3, lr
 8000838:	d302      	bcc.n	8000840 <__udivmoddi4+0xc8>
 800083a:	4282      	cmp	r2, r0
 800083c:	f200 8105 	bhi.w	8000a4a <__udivmoddi4+0x2d2>
 8000840:	1a84      	subs	r4, r0, r2
 8000842:	eb6e 0203 	sbc.w	r2, lr, r3
 8000846:	2001      	movs	r0, #1
 8000848:	4690      	mov	r8, r2
 800084a:	2d00      	cmp	r5, #0
 800084c:	d0e5      	beq.n	800081a <__udivmoddi4+0xa2>
 800084e:	e9c5 4800 	strd	r4, r8, [r5]
 8000852:	e7e2      	b.n	800081a <__udivmoddi4+0xa2>
 8000854:	2a00      	cmp	r2, #0
 8000856:	f000 8090 	beq.w	800097a <__udivmoddi4+0x202>
 800085a:	fab2 f682 	clz	r6, r2
 800085e:	2e00      	cmp	r6, #0
 8000860:	f040 80a4 	bne.w	80009ac <__udivmoddi4+0x234>
 8000864:	1a8a      	subs	r2, r1, r2
 8000866:	0c03      	lsrs	r3, r0, #16
 8000868:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800086c:	b280      	uxth	r0, r0
 800086e:	b2bc      	uxth	r4, r7
 8000870:	2101      	movs	r1, #1
 8000872:	fbb2 fcfe 	udiv	ip, r2, lr
 8000876:	fb0e 221c 	mls	r2, lr, ip, r2
 800087a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800087e:	fb04 f20c 	mul.w	r2, r4, ip
 8000882:	429a      	cmp	r2, r3
 8000884:	d907      	bls.n	8000896 <__udivmoddi4+0x11e>
 8000886:	18fb      	adds	r3, r7, r3
 8000888:	f10c 38ff 	add.w	r8, ip, #4294967295
 800088c:	d202      	bcs.n	8000894 <__udivmoddi4+0x11c>
 800088e:	429a      	cmp	r2, r3
 8000890:	f200 80e0 	bhi.w	8000a54 <__udivmoddi4+0x2dc>
 8000894:	46c4      	mov	ip, r8
 8000896:	1a9b      	subs	r3, r3, r2
 8000898:	fbb3 f2fe 	udiv	r2, r3, lr
 800089c:	fb0e 3312 	mls	r3, lr, r2, r3
 80008a0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008a4:	fb02 f404 	mul.w	r4, r2, r4
 80008a8:	429c      	cmp	r4, r3
 80008aa:	d907      	bls.n	80008bc <__udivmoddi4+0x144>
 80008ac:	18fb      	adds	r3, r7, r3
 80008ae:	f102 30ff 	add.w	r0, r2, #4294967295
 80008b2:	d202      	bcs.n	80008ba <__udivmoddi4+0x142>
 80008b4:	429c      	cmp	r4, r3
 80008b6:	f200 80ca 	bhi.w	8000a4e <__udivmoddi4+0x2d6>
 80008ba:	4602      	mov	r2, r0
 80008bc:	1b1b      	subs	r3, r3, r4
 80008be:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008c2:	e7a5      	b.n	8000810 <__udivmoddi4+0x98>
 80008c4:	f1c1 0620 	rsb	r6, r1, #32
 80008c8:	408b      	lsls	r3, r1
 80008ca:	fa22 f706 	lsr.w	r7, r2, r6
 80008ce:	431f      	orrs	r7, r3
 80008d0:	fa0e f401 	lsl.w	r4, lr, r1
 80008d4:	fa20 f306 	lsr.w	r3, r0, r6
 80008d8:	fa2e fe06 	lsr.w	lr, lr, r6
 80008dc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008e0:	4323      	orrs	r3, r4
 80008e2:	fa00 f801 	lsl.w	r8, r0, r1
 80008e6:	fa1f fc87 	uxth.w	ip, r7
 80008ea:	fbbe f0f9 	udiv	r0, lr, r9
 80008ee:	0c1c      	lsrs	r4, r3, #16
 80008f0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008f4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008f8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008fc:	45a6      	cmp	lr, r4
 80008fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000902:	d909      	bls.n	8000918 <__udivmoddi4+0x1a0>
 8000904:	193c      	adds	r4, r7, r4
 8000906:	f100 3aff 	add.w	sl, r0, #4294967295
 800090a:	f080 809c 	bcs.w	8000a46 <__udivmoddi4+0x2ce>
 800090e:	45a6      	cmp	lr, r4
 8000910:	f240 8099 	bls.w	8000a46 <__udivmoddi4+0x2ce>
 8000914:	3802      	subs	r0, #2
 8000916:	443c      	add	r4, r7
 8000918:	eba4 040e 	sub.w	r4, r4, lr
 800091c:	fa1f fe83 	uxth.w	lr, r3
 8000920:	fbb4 f3f9 	udiv	r3, r4, r9
 8000924:	fb09 4413 	mls	r4, r9, r3, r4
 8000928:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800092c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000930:	45a4      	cmp	ip, r4
 8000932:	d908      	bls.n	8000946 <__udivmoddi4+0x1ce>
 8000934:	193c      	adds	r4, r7, r4
 8000936:	f103 3eff 	add.w	lr, r3, #4294967295
 800093a:	f080 8082 	bcs.w	8000a42 <__udivmoddi4+0x2ca>
 800093e:	45a4      	cmp	ip, r4
 8000940:	d97f      	bls.n	8000a42 <__udivmoddi4+0x2ca>
 8000942:	3b02      	subs	r3, #2
 8000944:	443c      	add	r4, r7
 8000946:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800094a:	eba4 040c 	sub.w	r4, r4, ip
 800094e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000952:	4564      	cmp	r4, ip
 8000954:	4673      	mov	r3, lr
 8000956:	46e1      	mov	r9, ip
 8000958:	d362      	bcc.n	8000a20 <__udivmoddi4+0x2a8>
 800095a:	d05f      	beq.n	8000a1c <__udivmoddi4+0x2a4>
 800095c:	b15d      	cbz	r5, 8000976 <__udivmoddi4+0x1fe>
 800095e:	ebb8 0203 	subs.w	r2, r8, r3
 8000962:	eb64 0409 	sbc.w	r4, r4, r9
 8000966:	fa04 f606 	lsl.w	r6, r4, r6
 800096a:	fa22 f301 	lsr.w	r3, r2, r1
 800096e:	431e      	orrs	r6, r3
 8000970:	40cc      	lsrs	r4, r1
 8000972:	e9c5 6400 	strd	r6, r4, [r5]
 8000976:	2100      	movs	r1, #0
 8000978:	e74f      	b.n	800081a <__udivmoddi4+0xa2>
 800097a:	fbb1 fcf2 	udiv	ip, r1, r2
 800097e:	0c01      	lsrs	r1, r0, #16
 8000980:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000984:	b280      	uxth	r0, r0
 8000986:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800098a:	463b      	mov	r3, r7
 800098c:	4638      	mov	r0, r7
 800098e:	463c      	mov	r4, r7
 8000990:	46b8      	mov	r8, r7
 8000992:	46be      	mov	lr, r7
 8000994:	2620      	movs	r6, #32
 8000996:	fbb1 f1f7 	udiv	r1, r1, r7
 800099a:	eba2 0208 	sub.w	r2, r2, r8
 800099e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009a2:	e766      	b.n	8000872 <__udivmoddi4+0xfa>
 80009a4:	4601      	mov	r1, r0
 80009a6:	e718      	b.n	80007da <__udivmoddi4+0x62>
 80009a8:	4610      	mov	r0, r2
 80009aa:	e72c      	b.n	8000806 <__udivmoddi4+0x8e>
 80009ac:	f1c6 0220 	rsb	r2, r6, #32
 80009b0:	fa2e f302 	lsr.w	r3, lr, r2
 80009b4:	40b7      	lsls	r7, r6
 80009b6:	40b1      	lsls	r1, r6
 80009b8:	fa20 f202 	lsr.w	r2, r0, r2
 80009bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009c0:	430a      	orrs	r2, r1
 80009c2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009c6:	b2bc      	uxth	r4, r7
 80009c8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009cc:	0c11      	lsrs	r1, r2, #16
 80009ce:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009d2:	fb08 f904 	mul.w	r9, r8, r4
 80009d6:	40b0      	lsls	r0, r6
 80009d8:	4589      	cmp	r9, r1
 80009da:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009de:	b280      	uxth	r0, r0
 80009e0:	d93e      	bls.n	8000a60 <__udivmoddi4+0x2e8>
 80009e2:	1879      	adds	r1, r7, r1
 80009e4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009e8:	d201      	bcs.n	80009ee <__udivmoddi4+0x276>
 80009ea:	4589      	cmp	r9, r1
 80009ec:	d81f      	bhi.n	8000a2e <__udivmoddi4+0x2b6>
 80009ee:	eba1 0109 	sub.w	r1, r1, r9
 80009f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009f6:	fb09 f804 	mul.w	r8, r9, r4
 80009fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80009fe:	b292      	uxth	r2, r2
 8000a00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a04:	4542      	cmp	r2, r8
 8000a06:	d229      	bcs.n	8000a5c <__udivmoddi4+0x2e4>
 8000a08:	18ba      	adds	r2, r7, r2
 8000a0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a0e:	d2c4      	bcs.n	800099a <__udivmoddi4+0x222>
 8000a10:	4542      	cmp	r2, r8
 8000a12:	d2c2      	bcs.n	800099a <__udivmoddi4+0x222>
 8000a14:	f1a9 0102 	sub.w	r1, r9, #2
 8000a18:	443a      	add	r2, r7
 8000a1a:	e7be      	b.n	800099a <__udivmoddi4+0x222>
 8000a1c:	45f0      	cmp	r8, lr
 8000a1e:	d29d      	bcs.n	800095c <__udivmoddi4+0x1e4>
 8000a20:	ebbe 0302 	subs.w	r3, lr, r2
 8000a24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a28:	3801      	subs	r0, #1
 8000a2a:	46e1      	mov	r9, ip
 8000a2c:	e796      	b.n	800095c <__udivmoddi4+0x1e4>
 8000a2e:	eba7 0909 	sub.w	r9, r7, r9
 8000a32:	4449      	add	r1, r9
 8000a34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a3c:	fb09 f804 	mul.w	r8, r9, r4
 8000a40:	e7db      	b.n	80009fa <__udivmoddi4+0x282>
 8000a42:	4673      	mov	r3, lr
 8000a44:	e77f      	b.n	8000946 <__udivmoddi4+0x1ce>
 8000a46:	4650      	mov	r0, sl
 8000a48:	e766      	b.n	8000918 <__udivmoddi4+0x1a0>
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	e6fd      	b.n	800084a <__udivmoddi4+0xd2>
 8000a4e:	443b      	add	r3, r7
 8000a50:	3a02      	subs	r2, #2
 8000a52:	e733      	b.n	80008bc <__udivmoddi4+0x144>
 8000a54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a58:	443b      	add	r3, r7
 8000a5a:	e71c      	b.n	8000896 <__udivmoddi4+0x11e>
 8000a5c:	4649      	mov	r1, r9
 8000a5e:	e79c      	b.n	800099a <__udivmoddi4+0x222>
 8000a60:	eba1 0109 	sub.w	r1, r1, r9
 8000a64:	46c4      	mov	ip, r8
 8000a66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a6a:	fb09 f804 	mul.w	r8, r9, r4
 8000a6e:	e7c4      	b.n	80009fa <__udivmoddi4+0x282>

08000a70 <__aeabi_idiv0>:
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop

08000a74 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a74:	480d      	ldr	r0, [pc, #52]	@ (8000aac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a76:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a78:	f005 f926 	bl	8005cc8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a7c:	480c      	ldr	r0, [pc, #48]	@ (8000ab0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a7e:	490d      	ldr	r1, [pc, #52]	@ (8000ab4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a80:	4a0d      	ldr	r2, [pc, #52]	@ (8000ab8 <LoopForever+0xe>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a84:	e002      	b.n	8000a8c <LoopCopyDataInit>

08000a86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8a:	3304      	adds	r3, #4

08000a8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a90:	d3f9      	bcc.n	8000a86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a92:	4a0a      	ldr	r2, [pc, #40]	@ (8000abc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a94:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac0 <LoopForever+0x16>)
  movs r3, #0
 8000a96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a98:	e001      	b.n	8000a9e <LoopFillZerobss>

08000a9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a9c:	3204      	adds	r2, #4

08000a9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa0:	d3fb      	bcc.n	8000a9a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8000aa2:	f00b f843 	bl	800bb2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aa6:	f001 fa29 	bl	8001efc <main>

08000aaa <LoopForever>:

LoopForever:
    b LoopForever
 8000aaa:	e7fe      	b.n	8000aaa <LoopForever>
  ldr   r0, =_estack
 8000aac:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000ab0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab4:	2000054c 	.word	0x2000054c
  ldr r2, =_sidata
 8000ab8:	0800ceb8 	.word	0x0800ceb8
  ldr r2, =_sbss
 8000abc:	20000550 	.word	0x20000550
  ldr r4, =_ebss
 8000ac0:	20001d6c 	.word	0x20001d6c

08000ac4 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac4:	e7fe      	b.n	8000ac4 <BusFault_Handler>
	...

08000ac8 <IdleSingleMotor>:
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
    g_lastCommandedSpeed = speedCmd;
}


void IdleSingleMotor(float newSpeed){
 8000ac8:	b570      	push	{r4, r5, r6, lr}
	 * The main purpose of this function is to make sure that the speed demanded falls within the actual range at which the motor
	 * is capable of operating in.
	 */

	////////////////////////////////////////////////////////////////////////////////////////////////////////
	 uart_debug_print("Checking speed...\r\n");
 8000aca:	4859      	ldr	r0, [pc, #356]	@ (8000c30 <IdleSingleMotor+0x168>)
void IdleSingleMotor(float newSpeed){
 8000acc:	ed2d 8b02 	vpush	{d8}
 8000ad0:	eeb0 8a40 	vmov.f32	s16, s0
	////////////////////////////////////////////////////////////////////////////////////////////////////////

    //Deadzone for small speeds
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000ad4:	eddf 8a57 	vldr	s17, [pc, #348]	@ 8000c34 <IdleSingleMotor+0x16c>
	 uart_debug_print("Checking speed...\r\n");
 8000ad8:	f005 f822 	bl	8005b20 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000adc:	eef0 7ac8 	vabs.f32	s15, s16
 8000ae0:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ae8:	d506      	bpl.n	8000af8 <IdleSingleMotor+0x30>
}
 8000aea:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 8000aee:	4852      	ldr	r0, [pc, #328]	@ (8000c38 <IdleSingleMotor+0x170>)
}
 8000af0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uart_debug_print("Motor received command that is or was considered to be 0, so nothing happens\r\n");
 8000af4:	f005 b814 	b.w	8005b20 <uart_debug_print>
    	targetSpeed = 0.0f;
    }

    // Check for out of bound setpoint
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000af8:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8000c3c <IdleSingleMotor+0x174>
 8000afc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b04:	dd40      	ble.n	8000b88 <IdleSingleMotor+0xc0>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000b06:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b0e:	dd7c      	ble.n	8000c0a <IdleSingleMotor+0x142>
 8000b10:	eddf 8a4b 	vldr	s17, [pc, #300]	@ 8000c40 <IdleSingleMotor+0x178>
 8000b14:	eeb0 8a47 	vmov.f32	s16, s14
 8000b18:	f44f 6648 	mov.w	r6, #3200	@ 0xc80
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), speedCmd, true);
 8000b1c:	f001 fd6a 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
    // Convert from RPM to rad/s
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;

    // If the magnitude is below threshold, treat as 0 for more stable math
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000b20:	eddf 7a44 	vldr	s15, [pc, #272]	@ 8000c34 <IdleSingleMotor+0x16c>
 8000b24:	eeb0 7ac0 	vabs.f32	s14, s0
 8000b28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000b2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b30:	d546      	bpl.n	8000bc0 <IdleSingleMotor+0xf8>
 8000b32:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8000b36:	462c      	mov	r4, r5
	 uart_debug_print("Motor will begin to ramp!\r\n");
 8000b38:	4842      	ldr	r0, [pc, #264]	@ (8000c44 <IdleSingleMotor+0x17c>)
 8000b3a:	f004 fff1 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000b3e:	4842      	ldr	r0, [pc, #264]	@ (8000c48 <IdleSingleMotor+0x180>)
 8000b40:	4631      	mov	r1, r6
 8000b42:	f004 ffed 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000b46:	4629      	mov	r1, r5
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000b48:	4d40      	ldr	r5, [pc, #256]	@ (8000c4c <IdleSingleMotor+0x184>)
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000b4a:	4841      	ldr	r0, [pc, #260]	@ (8000c50 <IdleSingleMotor+0x188>)
 8000b4c:	f004 ffe8 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("Current direction is %d \r\n", s_previousDirection);
 8000b50:	4840      	ldr	r0, [pc, #256]	@ (8000c54 <IdleSingleMotor+0x18c>)
 8000b52:	6829      	ldr	r1, [r5, #0]
 8000b54:	f004 ffe4 	bl	8005b20 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime); // Must set a setpoint before startup --> otherwise unpredictable behavior
 8000b58:	4620      	mov	r0, r4
 8000b5a:	eeb0 0a48 	vmov.f32	s0, s16
 8000b5e:	f001 fd3b 	bl	80025d8 <MC_ProgramSpeedRampMotor1_F>
	if (!MC_StartMotor1()) {
 8000b62:	f001 fd2d 	bl	80025c0 <MC_StartMotor1>
 8000b66:	2800      	cmp	r0, #0
 8000b68:	d055      	beq.n	8000c16 <IdleSingleMotor+0x14e>
	g_lastCommandedSpeed = speedCmd;
 8000b6a:	4b3b      	ldr	r3, [pc, #236]	@ (8000c58 <IdleSingleMotor+0x190>)
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000b6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
	g_lastCommandedSpeed = speedCmd;
 8000b70:	ed83 8a00 	vstr	s16, [r3]
}
 8000b74:	ecbd 8b02 	vpop	{d8}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b7c:	bfcc      	ite	gt
 8000b7e:	2201      	movgt	r2, #1
 8000b80:	f04f 32ff 	movle.w	r2, #4294967295
 8000b84:	602a      	str	r2, [r5, #0]
}
 8000b86:	bd70      	pop	{r4, r5, r6, pc}
	if (fabsf(speedCmd) < 0.001){
 8000b88:	ee17 0a90 	vmov	r0, s15
 8000b8c:	f7ff fcfc 	bl	8000588 <__aeabi_f2d>
 8000b90:	a325      	add	r3, pc, #148	@ (adr r3, 8000c28 <IdleSingleMotor+0x160>)
 8000b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b96:	f7ff fdaf 	bl	80006f8 <__aeabi_dcmplt>
 8000b9a:	2800      	cmp	r0, #0
 8000b9c:	d1a5      	bne.n	8000aea <IdleSingleMotor+0x22>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000b9e:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8000ba2:	ee17 6a90 	vmov	r6, s15
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), speedCmd, true);
 8000ba6:	f001 fd25 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000baa:	eef0 7ac0 	vabs.f32	s15, s0
 8000bae:	eef4 7ae8 	vcmpe.f32	s15, s17
 8000bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bb6:	d4bc      	bmi.n	8000b32 <IdleSingleMotor+0x6a>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000bb8:	eddf 8a28 	vldr	s17, [pc, #160]	@ 8000c5c <IdleSingleMotor+0x194>
 8000bbc:	ee68 8a28 	vmul.f32	s17, s16, s17

    // Max acceleration alpha = T_max / J
    float alpha = (isStartup ? g_startupTorque : g_maxTorque) / g_inertia;// [rad/s^2]

    // Time (seconds) = delta_omega / alpha
    float deltaW = fabsf(w2 - w1);
 8000bc0:	eddf 7a26 	vldr	s15, [pc, #152]	@ 8000c5c <IdleSingleMotor+0x194>
    // Convert to milliseconds
    float timeMs = timeSec * 1000.0f;

    // For safety, clamp time to at least 200 ms or so
    float tMin = isStartup ? RAMP_MIN_MS_STARTUP : RAMP_MIN_MS_RUN;
    if (timeMs < tMin)   timeMs = tMin;
 8000bc4:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8000c60 <IdleSingleMotor+0x198>
    float deltaW = fabsf(w2 - w1);
 8000bc8:	eee0 8a67 	vfms.f32	s17, s0, s15
 8000bcc:	eef0 7ae8 	vabs.f32	s15, s17
    if (timeMs < tMin)   timeMs = tMin;
 8000bd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bd8:	d4ab      	bmi.n	8000b32 <IdleSingleMotor+0x6a>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000bda:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000c64 <IdleSingleMotor+0x19c>
 8000bde:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be6:	dd03      	ble.n	8000bf0 <IdleSingleMotor+0x128>
 8000be8:	f241 3588 	movw	r5, #5000	@ 0x1388
 8000bec:	462c      	mov	r4, r5
 8000bee:	e7a3      	b.n	8000b38 <IdleSingleMotor+0x70>
    return (uint16_t)(timeMs + 0.5f);
 8000bf0:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8000c68 <IdleSingleMotor+0x1a0>
 8000bf4:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000bf8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000bfc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000c00:	ee17 3a90 	vmov	r3, s15
 8000c04:	b29c      	uxth	r4, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000c06:	4625      	mov	r5, r4
 8000c08:	e796      	b.n	8000b38 <IdleSingleMotor+0x70>
 8000c0a:	4e18      	ldr	r6, [pc, #96]	@ (8000c6c <IdleSingleMotor+0x1a4>)
 8000c0c:	eddf 8a18 	vldr	s17, [pc, #96]	@ 8000c70 <IdleSingleMotor+0x1a8>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000c10:	ed9f 8a18 	vldr	s16, [pc, #96]	@ 8000c74 <IdleSingleMotor+0x1ac>
 8000c14:	e782      	b.n	8000b1c <IdleSingleMotor+0x54>
}
 8000c16:	ecbd 8b02 	vpop	{d8}
		 uart_debug_print("Start Failed...");
 8000c1a:	4817      	ldr	r0, [pc, #92]	@ (8000c78 <IdleSingleMotor+0x1b0>)
}
 8000c1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		 uart_debug_print("Start Failed...");
 8000c20:	f004 bf7e 	b.w	8005b20 <uart_debug_print>
 8000c24:	f3af 8000 	nop.w
 8000c28:	d2f1a9fc 	.word	0xd2f1a9fc
 8000c2c:	3f50624d 	.word	0x3f50624d
 8000c30:	0800c424 	.word	0x0800c424
 8000c34:	42480000 	.word	0x42480000
 8000c38:	0800c438 	.word	0x0800c438
 8000c3c:	45480000 	.word	0x45480000
 8000c40:	43a78d37 	.word	0x43a78d37
 8000c44:	0800c488 	.word	0x0800c488
 8000c48:	0800c4a4 	.word	0x0800c4a4
 8000c4c:	2000056c 	.word	0x2000056c
 8000c50:	0800c4c0 	.word	0x0800c4c0
 8000c54:	0800c4e0 	.word	0x0800c4e0
 8000c58:	20000570 	.word	0x20000570
 8000c5c:	3dd67751 	.word	0x3dd67751
 8000c60:	45bcb52e 	.word	0x45bcb52e
 8000c64:	476be27a 	.word	0x476be27a
 8000c68:	3da9930c 	.word	0x3da9930c
 8000c6c:	fffff380 	.word	0xfffff380
 8000c70:	c3a78d37 	.word	0xc3a78d37
 8000c74:	c5480000 	.word	0xc5480000
 8000c78:	0800c4fc 	.word	0x0800c4fc

08000c7c <safeStopMotor>:
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 8000c7c:	b570      	push	{r4, r5, r6, lr}
 8000c7e:	4604      	mov	r4, r0
 8000c80:	ed2d 8b0a 	vpush	{d8-d12}
	 uart_debug_print("Performing a safe stop\r\n");
 8000c84:	48a2      	ldr	r0, [pc, #648]	@ (8000f10 <safeStopMotor+0x294>)
bool safeStopMotor(float currentSpeedRpm, MCI_State_t motorState){
 8000c86:	eef0 8a40 	vmov.f32	s17, s0
	 uart_debug_print("Performing a safe stop\r\n");
 8000c8a:	f004 ff49 	bl	8005b20 <uart_debug_print>
	if (fabsf(currentSpeedRpm) > 250 && motorState != START && motorState != SWITCH_OVER){
 8000c8e:	eddf 7aa1 	vldr	s15, [pc, #644]	@ 8000f14 <safeStopMotor+0x298>
 8000c92:	eeb0 7ae8 	vabs.f32	s14, s17
 8000c96:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000c9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c9e:	f340 8088 	ble.w	8000db2 <safeStopMotor+0x136>
 8000ca2:	2c04      	cmp	r4, #4
 8000ca4:	f000 8085 	beq.w	8000db2 <safeStopMotor+0x136>
 8000ca8:	2c13      	cmp	r4, #19
 8000caa:	f000 8082 	beq.w	8000db2 <safeStopMotor+0x136>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 8000cae:	489a      	ldr	r0, [pc, #616]	@ (8000f18 <safeStopMotor+0x29c>)
 8000cb0:	ed9f ca9a 	vldr	s24, [pc, #616]	@ 8000f1c <safeStopMotor+0x2a0>
 8000cb4:	ed9f ba9a 	vldr	s22, [pc, #616]	@ 8000f20 <safeStopMotor+0x2a4>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000cb8:	eddf 9a9a 	vldr	s19, [pc, #616]	@ 8000f24 <safeStopMotor+0x2a8>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000cbc:	ed9f 9a9a 	vldr	s18, [pc, #616]	@ 8000f28 <safeStopMotor+0x2ac>
    if (timeMs < tMin)   timeMs = tMin;
 8000cc0:	eddf aa9a 	vldr	s21, [pc, #616]	@ 8000f2c <safeStopMotor+0x2b0>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000cc4:	eddf ba9a 	vldr	s23, [pc, #616]	@ 8000f30 <safeStopMotor+0x2b4>
    return (uint16_t)(timeMs + 0.5f);
 8000cc8:	eddf ca9a 	vldr	s25, [pc, #616]	@ 8000f34 <safeStopMotor+0x2b8>
		 uart_debug_print("Motor is being guided to a stop\r\n");
 8000ccc:	f004 ff28 	bl	8005b20 <uart_debug_print>
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 8000cd0:	eddf 7a99 	vldr	s15, [pc, #612]	@ 8000f38 <safeStopMotor+0x2bc>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8000cd4:	4b99      	ldr	r3, [pc, #612]	@ (8000f3c <safeStopMotor+0x2c0>)
 8000cd6:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8000cda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cde:	bfd8      	it	le
 8000ce0:	eeb0 ca67 	vmovle.f32	s24, s15
 8000ce4:	ed93 7a00 	vldr	s14, [r3]
		float deltaSpeed = currentSpeedRpm - rampTarget;
 8000ce8:	ee78 6acc 	vsub.f32	s13, s17, s24
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8000cec:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8000cf0:	eeb0 6ae6 	vabs.f32	s12, s13
 8000cf4:	eec6 7a07 	vdiv.f32	s15, s12, s14
		for (int i = 1; i <= rampDownDivisions; i++) {
 8000cf8:	f04f 0401 	mov.w	r4, #1
 8000cfc:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8000f40 <safeStopMotor+0x2c4>
		int rampDownDivisions = (int)(fabsf(deltaSpeed) / DELTA_SPEED_THRESH);
 8000d00:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d04:	bfd8      	it	le
 8000d06:	eeb0 ba47 	vmovle.f32	s22, s14
 8000d0a:	ee17 6a90 	vmov	r6, s15
		if (rampDownDivisions < 1) rampDownDivisions = 1;  // Ensure at least one division
 8000d0e:	42a6      	cmp	r6, r4
 8000d10:	bfb8      	it	lt
 8000d12:	4626      	movlt	r6, r4
		float stepSize = deltaSpeed / rampDownDivisions;
 8000d14:	ee07 6a90 	vmov	s15, r6
 8000d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d1c:	ee86 aaa7 	vdiv.f32	s20, s13, s15
		for (int i = 1; i <= rampDownDivisions; i++) {
 8000d20:	e02a      	b.n	8000d78 <safeStopMotor+0xfc>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d22:	ee60 7a29 	vmul.f32	s15, s0, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8000d26:	eef4 6ac9 	vcmpe.f32	s13, s18
 8000d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float deltaW = fabsf(w2 - w1);
 8000d2e:	bf54      	ite	pl
 8000d30:	ee37 7a67 	vsubpl.f32	s14, s14, s15
        w2 = 0.0f;
 8000d34:	eeb1 7a67 	vnegmi.f32	s14, s15
    float deltaW = fabsf(w2 - w1);
 8000d38:	eeb0 7ac7 	vabs.f32	s14, s14
    if (timeMs < tMin)   timeMs = tMin;
 8000d3c:	eeb4 7aea 	vcmpe.f32	s14, s21
 8000d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d44:	d432      	bmi.n	8000dac <safeStopMotor+0x130>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000d46:	eeb4 7aeb 	vcmpe.f32	s14, s23
 8000d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d4e:	dc64      	bgt.n	8000e1a <safeStopMotor+0x19e>
    return (uint16_t)(timeMs + 0.5f);
 8000d50:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8000d54:	eee7 7a2c 	vfma.f32	s15, s14, s25
 8000d58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d5c:	ee17 3a90 	vmov	r3, s15
 8000d60:	b298      	uxth	r0, r3
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 8000d62:	4605      	mov	r5, r0
			MC_ProgramSpeedRampMotor1_F(intermediateTarget, rampTime);
 8000d64:	eeb0 0a48 	vmov.f32	s0, s16
 8000d68:	f001 fc36 	bl	80025d8 <MC_ProgramSpeedRampMotor1_F>
		for (int i = 1; i <= rampDownDivisions; i++) {
 8000d6c:	3401      	adds	r4, #1
			HAL_Delay(rampTime);  // Wait for ramp to apply before next one
 8000d6e:	4628      	mov	r0, r5
 8000d70:	f005 f804 	bl	8005d7c <HAL_Delay>
		for (int i = 1; i <= rampDownDivisions; i++) {
 8000d74:	42a6      	cmp	r6, r4
 8000d76:	db65      	blt.n	8000e44 <safeStopMotor+0x1c8>
			float intermediateTarget = currentSpeedRpm - (stepSize * i);
 8000d78:	ee07 4a90 	vmov	s15, r4
 8000d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d80:	eeb0 8a68 	vmov.f32	s16, s17
 8000d84:	eea7 8aca 	vfms.f32	s16, s15, s20
			uint16_t rampTime = computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), intermediateTarget, false);
 8000d88:	f001 fc34 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000d8c:	eef0 7ac0 	vabs.f32	s15, s0
 8000d90:	eef4 7ac9 	vcmpe.f32	s15, s18
 8000d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000d98:	ee28 7a29 	vmul.f32	s14, s16, s19
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8000d9c:	eef0 6ac8 	vabs.f32	s13, s16
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000da0:	d5bf      	bpl.n	8000d22 <safeStopMotor+0xa6>
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8000da2:	eef4 6ac9 	vcmpe.f32	s13, s18
 8000da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000daa:	d5c5      	bpl.n	8000d38 <safeStopMotor+0xbc>
 8000dac:	25c8      	movs	r5, #200	@ 0xc8
 8000dae:	4628      	mov	r0, r5
 8000db0:	e7d8      	b.n	8000d64 <safeStopMotor+0xe8>
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 8000db2:	4864      	ldr	r0, [pc, #400]	@ (8000f44 <safeStopMotor+0x2c8>)
			 uart_debug_print("current state is %d\r\n", currState);
 8000db4:	4e64      	ldr	r6, [pc, #400]	@ (8000f48 <safeStopMotor+0x2cc>)
		 uart_debug_print("Motor is moving slowly or is in a startup phase, so it is not being guided to a stop\r\n");
 8000db6:	f004 feb3 	bl	8005b20 <uart_debug_print>
	    MC_StopMotor1();
 8000dba:	f001 fc07 	bl	80025cc <MC_StopMotor1>
		uint32_t tStart = HAL_GetTick();
 8000dbe:	f004 ffd7 	bl	8005d70 <HAL_GetTick>
 8000dc2:	4605      	mov	r5, r0
			HAL_Delay(5); // poll the state until it IDLE
 8000dc4:	2005      	movs	r0, #5
 8000dc6:	f004 ffd9 	bl	8005d7c <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8000dca:	f001 fc31 	bl	8002630 <MC_GetSTMStateMotor1>
 8000dce:	4604      	mov	r4, r0
			 uart_debug_print("current state is %d\r\n", currState);
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	4630      	mov	r0, r6
 8000dd4:	f004 fea4 	bl	8005b20 <uart_debug_print>
			if (currState == IDLE && MC_GetAverageMecSpeedMotor1_F() == 0) {
 8000dd8:	b934      	cbnz	r4, 8000de8 <safeStopMotor+0x16c>
 8000dda:	f001 fc0b 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 8000dde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000de6:	d01c      	beq.n	8000e22 <safeStopMotor+0x1a6>
		    if (HAL_GetTick() - tStart > 1000) { //use 1 sec for timeout period
 8000de8:	f004 ffc2 	bl	8005d70 <HAL_GetTick>
 8000dec:	1b40      	subs	r0, r0, r5
 8000dee:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000df2:	d9e7      	bls.n	8000dc4 <safeStopMotor+0x148>
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 8000df4:	4855      	ldr	r0, [pc, #340]	@ (8000f4c <safeStopMotor+0x2d0>)
			    s_previousDirection = 0;
 8000df6:	4d56      	ldr	r5, [pc, #344]	@ (8000f50 <safeStopMotor+0x2d4>)
		        uart_debug_print("Motor failed to stop in time!!\r\n");
 8000df8:	f004 fe92 	bl	8005b20 <uart_debug_print>
			    g_lastCommandedSpeed = 0;
 8000dfc:	4b55      	ldr	r3, [pc, #340]	@ (8000f54 <safeStopMotor+0x2d8>)
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000dfe:	4856      	ldr	r0, [pc, #344]	@ (8000f58 <safeStopMotor+0x2dc>)
			    s_previousDirection = 0;
 8000e00:	2400      	movs	r4, #0
			    g_lastCommandedSpeed = 0;
 8000e02:	2100      	movs	r1, #0
 8000e04:	6019      	str	r1, [r3, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000e06:	4622      	mov	r2, r4
 8000e08:	f44f 6180 	mov.w	r1, #1024	@ 0x400
			    s_previousDirection = 0;
 8000e0c:	602c      	str	r4, [r5, #0]
		        MCI_FaultProcessing(&Mci[0], MC_DP_FAULT, 0);
 8000e0e:	f001 fc49 	bl	80026a4 <MCI_FaultProcessing>
}
 8000e12:	ecbd 8b0a 	vpop	{d8-d12}
		        return false;
 8000e16:	4620      	mov	r0, r4
}
 8000e18:	bd70      	pop	{r4, r5, r6, pc}
 8000e1a:	f241 3588 	movw	r5, #5000	@ 0x1388
 8000e1e:	4628      	mov	r0, r5
 8000e20:	e7a0      	b.n	8000d64 <safeStopMotor+0xe8>
				HAL_Delay(WAIT_AFTER_STOP); // Tune this value for seemless transition
 8000e22:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000e26:	f004 ffa9 	bl	8005d7c <HAL_Delay>
				 uart_debug_print("Motor is now stopped \r\n");
 8000e2a:	484c      	ldr	r0, [pc, #304]	@ (8000f5c <safeStopMotor+0x2e0>)
 8000e2c:	f004 fe78 	bl	8005b20 <uart_debug_print>
}
 8000e30:	ecbd 8b0a 	vpop	{d8-d12}
				s_previousDirection = 0;
 8000e34:	4946      	ldr	r1, [pc, #280]	@ (8000f50 <safeStopMotor+0x2d4>)
				g_lastCommandedSpeed = 0;
 8000e36:	4b47      	ldr	r3, [pc, #284]	@ (8000f54 <safeStopMotor+0x2d8>)
				s_previousDirection = 0;
 8000e38:	2000      	movs	r0, #0
				g_lastCommandedSpeed = 0;
 8000e3a:	2200      	movs	r2, #0
				s_previousDirection = 0;
 8000e3c:	6008      	str	r0, [r1, #0]
				g_lastCommandedSpeed = 0;
 8000e3e:	601a      	str	r2, [r3, #0]
				return true;
 8000e40:	2001      	movs	r0, #1
}
 8000e42:	bd70      	pop	{r4, r5, r6, pc}
		uint16_t finalRampTime = computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), rampTarget, false);
 8000e44:	f001 fbd6 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000e48:	eddf 7a37 	vldr	s15, [pc, #220]	@ 8000f28 <safeStopMotor+0x2ac>
 8000e4c:	eeb0 7ac0 	vabs.f32	s14, s0
 8000e50:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e58:	d455      	bmi.n	8000f06 <safeStopMotor+0x28a>
    float deltaW = fabsf(w2 - w1);
 8000e5a:	eddf 7a32 	vldr	s15, [pc, #200]	@ 8000f24 <safeStopMotor+0x2a8>
    if (timeMs < tMin)   timeMs = tMin;
 8000e5e:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8000f2c <safeStopMotor+0x2b0>
    float deltaW = fabsf(w2 - w1);
 8000e62:	eea0 ba67 	vfms.f32	s22, s0, s15
 8000e66:	eef0 7acb 	vabs.f32	s15, s22
    if (timeMs < tMin)   timeMs = tMin;
 8000e6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e72:	d448      	bmi.n	8000f06 <safeStopMotor+0x28a>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 8000e74:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8000f30 <safeStopMotor+0x2b4>
 8000e78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e80:	dc43      	bgt.n	8000f0a <safeStopMotor+0x28e>
    return (uint16_t)(timeMs + 0.5f);
 8000e82:	eddf 6a2c 	vldr	s13, [pc, #176]	@ 8000f34 <safeStopMotor+0x2b8>
 8000e86:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8000e8a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8000e8e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 8000e92:	ee17 3a90 	vmov	r3, s15
 8000e96:	b298      	uxth	r0, r3
		MC_ProgramSpeedRampMotor1_F(rampTarget, finalRampTime);
 8000e98:	eeb0 0a4c 	vmov.f32	s0, s24
 8000e9c:	f001 fb9c 	bl	80025d8 <MC_ProgramSpeedRampMotor1_F>
		uint32_t tStart = HAL_GetTick();
 8000ea0:	f004 ff66 	bl	8005d70 <HAL_GetTick>
		while (fabsf(MC_GetAverageMecSpeedMotor1_F()) > 120.0f) {
 8000ea4:	ed9f 8a2e 	vldr	s16, [pc, #184]	@ 8000f60 <safeStopMotor+0x2e4>
		uint32_t tStart = HAL_GetTick();
 8000ea8:	4604      	mov	r4, r0
		while (fabsf(MC_GetAverageMecSpeedMotor1_F()) > 120.0f) {
 8000eaa:	e00a      	b.n	8000ec2 <safeStopMotor+0x246>
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 8000eac:	f004 ff60 	bl	8005d70 <HAL_GetTick>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	1b1b      	subs	r3, r3, r4
 8000eb4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
			HAL_Delay(10);
 8000eb8:	f04f 000a 	mov.w	r0, #10
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 8000ebc:	d80a      	bhi.n	8000ed4 <safeStopMotor+0x258>
			HAL_Delay(10);
 8000ebe:	f004 ff5d 	bl	8005d7c <HAL_Delay>
		while (fabsf(MC_GetAverageMecSpeedMotor1_F()) > 120.0f) {
 8000ec2:	f001 fb97 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 8000ec6:	eeb0 0ac0 	vabs.f32	s0, s0
 8000eca:	eeb4 0ac8 	vcmpe.f32	s0, s16
 8000ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ed2:	dceb      	bgt.n	8000eac <safeStopMotor+0x230>
	    MC_StopMotor1();
 8000ed4:	f001 fb7a 	bl	80025cc <MC_StopMotor1>
	    tStart = HAL_GetTick();
 8000ed8:	f004 ff4a 	bl	8005d70 <HAL_GetTick>
 8000edc:	4604      	mov	r4, r0
			HAL_Delay(5); // poll the state until it IDLE
 8000ede:	2005      	movs	r0, #5
 8000ee0:	f004 ff4c 	bl	8005d7c <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8000ee4:	f001 fba4 	bl	8002630 <MC_GetSTMStateMotor1>
			if (currState == IDLE && MC_GetAverageMecSpeedMotor1_F() == 0) {
 8000ee8:	b930      	cbnz	r0, 8000ef8 <safeStopMotor+0x27c>
 8000eea:	f001 fb83 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 8000eee:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ef6:	d094      	beq.n	8000e22 <safeStopMotor+0x1a6>
		    if (HAL_GetTick() - tStart > 1000) { //use 1 sec for timeout period
 8000ef8:	f004 ff3a 	bl	8005d70 <HAL_GetTick>
 8000efc:	1b00      	subs	r0, r0, r4
 8000efe:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8000f02:	d9ec      	bls.n	8000ede <safeStopMotor+0x262>
 8000f04:	e776      	b.n	8000df4 <safeStopMotor+0x178>
 8000f06:	20c8      	movs	r0, #200	@ 0xc8
 8000f08:	e7c6      	b.n	8000e98 <safeStopMotor+0x21c>
 8000f0a:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000f0e:	e7c3      	b.n	8000e98 <safeStopMotor+0x21c>
 8000f10:	0800c524 	.word	0x0800c524
 8000f14:	437a0000 	.word	0x437a0000
 8000f18:	0800c540 	.word	0x0800c540
 8000f1c:	42c80000 	.word	0x42c80000
 8000f20:	41278d37 	.word	0x41278d37
 8000f24:	3dd67751 	.word	0x3dd67751
 8000f28:	42480000 	.word	0x42480000
 8000f2c:	4596f759 	.word	0x4596f759
 8000f30:	47ebe27a 	.word	0x47ebe27a
 8000f34:	3d29930c 	.word	0x3d29930c
 8000f38:	c2c80000 	.word	0xc2c80000
 8000f3c:	20000000 	.word	0x20000000
 8000f40:	c1278d37 	.word	0xc1278d37
 8000f44:	0800c5a0 	.word	0x0800c5a0
 8000f48:	0800c5f8 	.word	0x0800c5f8
 8000f4c:	0800c57c 	.word	0x0800c57c
 8000f50:	2000056c 	.word	0x2000056c
 8000f54:	20000570 	.word	0x20000570
 8000f58:	20000004 	.word	0x20000004
 8000f5c:	0800c564 	.word	0x0800c564
 8000f60:	42f00000 	.word	0x42f00000
 8000f64:	00000000 	.word	0x00000000

08000f68 <StartSingleMotor>:
void StartSingleMotor (float newSpeed){
 8000f68:	b508      	push	{r3, lr}
	 uart_debug_print("Checking speed...\r\n");
 8000f6a:	483b      	ldr	r0, [pc, #236]	@ (8001058 <StartSingleMotor+0xf0>)
void StartSingleMotor (float newSpeed){
 8000f6c:	ed2d 8b02 	vpush	{d8}
 8000f70:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 8000f74:	f004 fdd4 	bl	8005b20 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8000f78:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800105c <StartSingleMotor+0xf4>
 8000f7c:	eef0 7ac8 	vabs.f32	s15, s16
 8000f80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f88:	d43b      	bmi.n	8001002 <StartSingleMotor+0x9a>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000f8a:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8001060 <StartSingleMotor+0xf8>
 8000f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f96:	dc25      	bgt.n	8000fe4 <StartSingleMotor+0x7c>
	if (fabs(speedCmd) < 0.001){
 8000f98:	ee17 0a90 	vmov	r0, s15
 8000f9c:	f7ff faf4 	bl	8000588 <__aeabi_f2d>
 8000fa0:	a32b      	add	r3, pc, #172	@ (adr r3, 8001050 <StartSingleMotor+0xe8>)
 8000fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa6:	f7ff fba7 	bl	80006f8 <__aeabi_dcmplt>
 8000faa:	bb50      	cbnz	r0, 8001002 <StartSingleMotor+0x9a>
	 uart_debug_print("Checking reversing...\r\n");
 8000fac:	482d      	ldr	r0, [pc, #180]	@ (8001064 <StartSingleMotor+0xfc>)
 8000fae:	f004 fdb7 	bl	8005b20 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	@ (8001068 <StartSingleMotor+0x100>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	dd3a      	ble.n	8001030 <StartSingleMotor+0xc8>
 8000fba:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fc2:	d51b      	bpl.n	8000ffc <StartSingleMotor+0x94>
		if (safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), START)){
 8000fc4:	f001 fb16 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 8000fc8:	2004      	movs	r0, #4
 8000fca:	f7ff fe57 	bl	8000c7c <safeStopMotor>
 8000fce:	b340      	cbz	r0, 8001022 <StartSingleMotor+0xba>
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8000fd0:	4826      	ldr	r0, [pc, #152]	@ (800106c <StartSingleMotor+0x104>)
 8000fd2:	f004 fda5 	bl	8005b20 <uart_debug_print>
}
 8000fd6:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 8000fda:	4825      	ldr	r0, [pc, #148]	@ (8001070 <StartSingleMotor+0x108>)
}
 8000fdc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Motor is now stopped after direction change\r\n");
 8000fe0:	f004 bd9e 	b.w	8005b20 <uart_debug_print>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000fe4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000fe8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 uart_debug_print("Checking reversing...\r\n");
 8000fec:	481d      	ldr	r0, [pc, #116]	@ (8001064 <StartSingleMotor+0xfc>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000fee:	dd26      	ble.n	800103e <StartSingleMotor+0xd6>
	 uart_debug_print("Checking reversing...\r\n");
 8000ff0:	f004 fd96 	bl	8005b20 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8000ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8001068 <StartSingleMotor+0x100>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	dd27      	ble.n	800104c <StartSingleMotor+0xe4>
}
 8000ffc:	ecbd 8b02 	vpop	{d8}
 8001000:	bd08      	pop	{r3, pc}
		uart_debug_print("Motor received command that is or was considered to be 0\r\n");
 8001002:	481c      	ldr	r0, [pc, #112]	@ (8001074 <StartSingleMotor+0x10c>)
 8001004:	f004 fd8c 	bl	8005b20 <uart_debug_print>
		if (safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), START)){
 8001008:	f001 faf4 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 800100c:	2004      	movs	r0, #4
 800100e:	f7ff fe35 	bl	8000c7c <safeStopMotor>
 8001012:	b130      	cbz	r0, 8001022 <StartSingleMotor+0xba>
}
 8001014:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 8001018:	4814      	ldr	r0, [pc, #80]	@ (800106c <StartSingleMotor+0x104>)
}
 800101a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 800101e:	f004 bd7f 	b.w	8005b20 <uart_debug_print>
}
 8001022:	ecbd 8b02 	vpop	{d8}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 8001026:	4814      	ldr	r0, [pc, #80]	@ (8001078 <StartSingleMotor+0x110>)
}
 8001028:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 800102c:	f004 bd78 	b.w	8005b20 <uart_debug_print>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8001030:	d0e4      	beq.n	8000ffc <StartSingleMotor+0x94>
 8001032:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800103a:	dcc3      	bgt.n	8000fc4 <StartSingleMotor+0x5c>
 800103c:	e7de      	b.n	8000ffc <StartSingleMotor+0x94>
	 uart_debug_print("Checking reversing...\r\n");
 800103e:	f004 fd6f 	bl	8005b20 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8001042:	4b09      	ldr	r3, [pc, #36]	@ (8001068 <StartSingleMotor+0x100>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	dcbc      	bgt.n	8000fc4 <StartSingleMotor+0x5c>
 800104a:	e7d7      	b.n	8000ffc <StartSingleMotor+0x94>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 800104c:	d1ba      	bne.n	8000fc4 <StartSingleMotor+0x5c>
 800104e:	e7d5      	b.n	8000ffc <StartSingleMotor+0x94>
 8001050:	d2f1a9fc 	.word	0xd2f1a9fc
 8001054:	3f50624d 	.word	0x3f50624d
 8001058:	0800c424 	.word	0x0800c424
 800105c:	42480000 	.word	0x42480000
 8001060:	45480000 	.word	0x45480000
 8001064:	0800c610 	.word	0x0800c610
 8001068:	2000056c 	.word	0x2000056c
 800106c:	0800c664 	.word	0x0800c664
 8001070:	0800c6bc 	.word	0x0800c6bc
 8001074:	0800c628 	.word	0x0800c628
 8001078:	0800c68c 	.word	0x0800c68c
 800107c:	00000000 	.word	0x00000000

08001080 <runSingleMotorV2>:
void runSingleMotorV2(float newSpeed){
 8001080:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	 uart_debug_print("Checking speed...\r\n");
 8001084:	489e      	ldr	r0, [pc, #632]	@ (8001300 <runSingleMotorV2+0x280>)
void runSingleMotorV2(float newSpeed){
 8001086:	ed2d 8b04 	vpush	{d8-d9}
 800108a:	eeb0 8a40 	vmov.f32	s16, s0
	 uart_debug_print("Checking speed...\r\n");
 800108e:	f004 fd47 	bl	8005b20 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 8001092:	eddf 7a9c 	vldr	s15, [pc, #624]	@ 8001304 <runSingleMotorV2+0x284>
 8001096:	eef0 8ac8 	vabs.f32	s17, s16
 800109a:	eef4 8ae7 	vcmpe.f32	s17, s15
 800109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010a2:	d47d      	bmi.n	80011a0 <runSingleMotorV2+0x120>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 80010a4:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8001308 <runSingleMotorV2+0x288>
 80010a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80010ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010b0:	f300 8093 	bgt.w	80011da <runSingleMotorV2+0x15a>
	 uart_debug_print("Checking clipping...\r\n");
 80010b4:	4895      	ldr	r0, [pc, #596]	@ (800130c <runSingleMotorV2+0x28c>)
	float delta = currentSpeedSetpoint - g_lastCommandedSpeed;
 80010b6:	4c96      	ldr	r4, [pc, #600]	@ (8001310 <runSingleMotorV2+0x290>)
	 uart_debug_print("Checking clipping...\r\n");
 80010b8:	f004 fd32 	bl	8005b20 <uart_debug_print>
	if (fabsf(delta) > DELTA_SPEED_THRESH) {
 80010bc:	4b95      	ldr	r3, [pc, #596]	@ (8001314 <runSingleMotorV2+0x294>)
	float delta = currentSpeedSetpoint - g_lastCommandedSpeed;
 80010be:	ed94 7a00 	vldr	s14, [r4]
	if (fabsf(delta) > DELTA_SPEED_THRESH) {
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	ee07 3a90 	vmov	s15, r3
	float delta = currentSpeedSetpoint - g_lastCommandedSpeed;
 80010c8:	ee78 6a47 	vsub.f32	s13, s16, s14
	if (fabsf(delta) > DELTA_SPEED_THRESH) {
 80010cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010d0:	eeb0 6ae6 	vabs.f32	s12, s13
 80010d4:	eeb4 6ae7 	vcmpe.f32	s12, s15
 80010d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010dc:	dd65      	ble.n	80011aa <runSingleMotorV2+0x12a>
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 80010de:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 80010e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010e6:	f340 80a2 	ble.w	800122e <runSingleMotorV2+0x1ae>
 80010ea:	ee37 8a27 	vadd.f32	s16, s14, s15
	 uart_debug_print("Checking speed...\r\n");
 80010ee:	4884      	ldr	r0, [pc, #528]	@ (8001300 <runSingleMotorV2+0x280>)
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 80010f0:	ed84 8a00 	vstr	s16, [r4]
	 uart_debug_print("Checking speed...\r\n");
 80010f4:	f004 fd14 	bl	8005b20 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 80010f8:	eddf 7a82 	vldr	s15, [pc, #520]	@ 8001304 <runSingleMotorV2+0x284>
 80010fc:	eef0 8ac8 	vabs.f32	s17, s16
 8001100:	eef4 8ae7 	vcmpe.f32	s17, s15
 8001104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001108:	d45b      	bmi.n	80011c2 <runSingleMotorV2+0x142>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 800110a:	ed9f 9a7f 	vldr	s18, [pc, #508]	@ 8001308 <runSingleMotorV2+0x288>
 800110e:	eef4 8ac9 	vcmpe.f32	s17, s18
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dd6a      	ble.n	80011ee <runSingleMotorV2+0x16e>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001118:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	 uart_debug_print("Checking reversing...\r\n");
 8001120:	487d      	ldr	r0, [pc, #500]	@ (8001318 <runSingleMotorV2+0x298>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001122:	f340 808a 	ble.w	800123a <runSingleMotorV2+0x1ba>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8001126:	4d7d      	ldr	r5, [pc, #500]	@ (800131c <runSingleMotorV2+0x29c>)
	 uart_debug_print("Checking reversing...\r\n");
 8001128:	f004 fcfa 	bl	8005b20 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 800112c:	682b      	ldr	r3, [r5, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	db69      	blt.n	8001206 <runSingleMotorV2+0x186>
 8001132:	eddf 8a7b 	vldr	s17, [pc, #492]	@ 8001320 <runSingleMotorV2+0x2a0>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8001136:	eeb0 8a49 	vmov.f32	s16, s18
	if (s_previousDirection > 0 && speedCmd < 0) {
 800113a:	f44f 6848 	mov.w	r8, #3200	@ 0xc80
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), speedCmd, false);
 800113e:	f001 fa59 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001142:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8001304 <runSingleMotorV2+0x284>
 8001146:	eeb0 7ac0 	vabs.f32	s14, s0
 800114a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	f140 80a4 	bpl.w	800129e <runSingleMotorV2+0x21e>
 8001156:	27c8      	movs	r7, #200	@ 0xc8
 8001158:	463e      	mov	r6, r7
	 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 800115a:	4872      	ldr	r0, [pc, #456]	@ (8001324 <runSingleMotorV2+0x2a4>)
 800115c:	f004 fce0 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8001160:	4871      	ldr	r0, [pc, #452]	@ (8001328 <runSingleMotorV2+0x2a8>)
 8001162:	4641      	mov	r1, r8
 8001164:	f004 fcdc 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8001168:	4870      	ldr	r0, [pc, #448]	@ (800132c <runSingleMotorV2+0x2ac>)
 800116a:	4639      	mov	r1, r7
 800116c:	f004 fcd8 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("Current direction is %d ms\r\n", s_previousDirection);
 8001170:	486f      	ldr	r0, [pc, #444]	@ (8001330 <runSingleMotorV2+0x2b0>)
 8001172:	6829      	ldr	r1, [r5, #0]
 8001174:	f004 fcd4 	bl	8005b20 <uart_debug_print>
	MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 8001178:	eeb0 0a48 	vmov.f32	s0, s16
 800117c:	4630      	mov	r0, r6
 800117e:	f001 fa2b 	bl	80025d8 <MC_ProgramSpeedRampMotor1_F>
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8001182:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
    g_lastCommandedSpeed = speedCmd;
 8001186:	ed84 8a00 	vstr	s16, [r4]
}
 800118a:	ecbd 8b04 	vpop	{d8-d9}
	s_previousDirection = (speedCmd > 0) ? 1 : -1;
 800118e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001192:	bfcc      	ite	gt
 8001194:	2301      	movgt	r3, #1
 8001196:	f04f 33ff 	movle.w	r3, #4294967295
 800119a:	602b      	str	r3, [r5, #0]
}
 800119c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011a0:	eddf 8a64 	vldr	s17, [pc, #400]	@ 8001334 <runSingleMotorV2+0x2b4>
    	targetSpeed = 0.0f;
 80011a4:	eeb0 8a68 	vmov.f32	s16, s17
 80011a8:	e784      	b.n	80010b4 <runSingleMotorV2+0x34>
	 uart_debug_print("Checking speed...\r\n");
 80011aa:	4855      	ldr	r0, [pc, #340]	@ (8001300 <runSingleMotorV2+0x280>)
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 80011ac:	ed84 8a00 	vstr	s16, [r4]
	 uart_debug_print("Checking speed...\r\n");
 80011b0:	f004 fcb6 	bl	8005b20 <uart_debug_print>
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 80011b4:	eddf 7a53 	vldr	s15, [pc, #332]	@ 8001304 <runSingleMotorV2+0x284>
 80011b8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80011bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c0:	d515      	bpl.n	80011ee <runSingleMotorV2+0x16e>
	 uart_debug_print("Checking reversing...\r\n");
 80011c2:	4855      	ldr	r0, [pc, #340]	@ (8001318 <runSingleMotorV2+0x298>)
 80011c4:	f004 fcac 	bl	8005b20 <uart_debug_print>
		safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), RUN);
 80011c8:	f001 fa14 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
}
 80011cc:	ecbd 8b04 	vpop	{d8-d9}
		safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), RUN);
 80011d0:	2006      	movs	r0, #6
}
 80011d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), RUN);
 80011d6:	f7ff bd51 	b.w	8000c7c <safeStopMotor>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 80011da:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80011de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011e2:	eef0 8a67 	vmov.f32	s17, s15
 80011e6:	dcdd      	bgt.n	80011a4 <runSingleMotorV2+0x124>
 80011e8:	ed9f 8a53 	vldr	s16, [pc, #332]	@ 8001338 <runSingleMotorV2+0x2b8>
 80011ec:	e762      	b.n	80010b4 <runSingleMotorV2+0x34>
	if (s_previousDirection > 0 && speedCmd < 0) {
 80011ee:	4d4b      	ldr	r5, [pc, #300]	@ (800131c <runSingleMotorV2+0x29c>)
	 uart_debug_print("Checking reversing...\r\n");
 80011f0:	4849      	ldr	r0, [pc, #292]	@ (8001318 <runSingleMotorV2+0x298>)
 80011f2:	f004 fc95 	bl	8005b20 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 80011f6:	682b      	ldr	r3, [r5, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	dd2b      	ble.n	8001254 <runSingleMotorV2+0x1d4>
 80011fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8001200:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001204:	d52c      	bpl.n	8001260 <runSingleMotorV2+0x1e0>
		 uart_debug_print("REVERSING DETECTED!\r\n");
 8001206:	484d      	ldr	r0, [pc, #308]	@ (800133c <runSingleMotorV2+0x2bc>)
 8001208:	f004 fc8a 	bl	8005b20 <uart_debug_print>
		if(safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), RUN)){
 800120c:	f001 f9f2 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 8001210:	2006      	movs	r0, #6
 8001212:	f7ff fd33 	bl	8000c7c <safeStopMotor>
 8001216:	2800      	cmp	r0, #0
 8001218:	d067      	beq.n	80012ea <runSingleMotorV2+0x26a>
			 uart_debug_print("Safe Stop has executed successfully \r\n");
 800121a:	4849      	ldr	r0, [pc, #292]	@ (8001340 <runSingleMotorV2+0x2c0>)
 800121c:	f004 fc80 	bl	8005b20 <uart_debug_print>
}
 8001220:	ecbd 8b04 	vpop	{d8-d9}
			 uart_debug_print("Motor is now stopped after direction change \r\n");
 8001224:	4847      	ldr	r0, [pc, #284]	@ (8001344 <runSingleMotorV2+0x2c4>)
}
 8001226:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			 uart_debug_print("Motor is now stopped after direction change \r\n");
 800122a:	f004 bc79 	b.w	8005b20 <uart_debug_print>
		g_lastCommandedSpeed += (delta > 0.0f ? DELTA_SPEED_THRESH : -DELTA_SPEED_THRESH);
 800122e:	425b      	negs	r3, r3
 8001230:	ee07 3a90 	vmov	s15, r3
 8001234:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001238:	e757      	b.n	80010ea <runSingleMotorV2+0x6a>
	if (s_previousDirection > 0 && speedCmd < 0) {
 800123a:	4d38      	ldr	r5, [pc, #224]	@ (800131c <runSingleMotorV2+0x29c>)
	 uart_debug_print("Checking reversing...\r\n");
 800123c:	f004 fc70 	bl	8005b20 <uart_debug_print>
	if (s_previousDirection > 0 && speedCmd < 0) {
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	dcdf      	bgt.n	8001206 <runSingleMotorV2+0x186>
 8001246:	f8df 8118 	ldr.w	r8, [pc, #280]	@ 8001360 <runSingleMotorV2+0x2e0>
 800124a:	eddf 8a3f 	vldr	s17, [pc, #252]	@ 8001348 <runSingleMotorV2+0x2c8>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 800124e:	ed9f 8a3a 	vldr	s16, [pc, #232]	@ 8001338 <runSingleMotorV2+0x2b8>
 8001252:	e774      	b.n	800113e <runSingleMotorV2+0xbe>
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8001254:	d004      	beq.n	8001260 <runSingleMotorV2+0x1e0>
 8001256:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800125a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125e:	dcd2      	bgt.n	8001206 <runSingleMotorV2+0x186>
	if (fabsf(speedCmd) < 0.001){
 8001260:	ee18 0a90 	vmov	r0, s17
 8001264:	f7ff f990 	bl	8000588 <__aeabi_f2d>
 8001268:	a323      	add	r3, pc, #140	@ (adr r3, 80012f8 <runSingleMotorV2+0x278>)
 800126a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126e:	f7ff fa43 	bl	80006f8 <__aeabi_dcmplt>
 8001272:	2800      	cmp	r0, #0
 8001274:	d1a8      	bne.n	80011c8 <runSingleMotorV2+0x148>
	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8001276:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800127a:	ee17 8a90 	vmov	r8, s15
	uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), speedCmd, false);
 800127e:	f001 f9b9 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8001282:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8001304 <runSingleMotorV2+0x284>
 8001286:	eeb0 7ac0 	vabs.f32	s14, s0
 800128a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800128e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001292:	f53f af60 	bmi.w	8001156 <runSingleMotorV2+0xd6>
    float w2 = targetSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8001296:	eddf 8a2d 	vldr	s17, [pc, #180]	@ 800134c <runSingleMotorV2+0x2cc>
 800129a:	ee68 8a28 	vmul.f32	s17, s16, s17
    float deltaW = fabsf(w2 - w1);
 800129e:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800134c <runSingleMotorV2+0x2cc>
    if (timeMs < tMin)   timeMs = tMin;
 80012a2:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001350 <runSingleMotorV2+0x2d0>
    float deltaW = fabsf(w2 - w1);
 80012a6:	eee0 8a67 	vfms.f32	s17, s0, s15
 80012aa:	eef0 7ae8 	vabs.f32	s15, s17
    if (timeMs < tMin)   timeMs = tMin;
 80012ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012b6:	f53f af4e 	bmi.w	8001156 <runSingleMotorV2+0xd6>
    if (timeMs > 5000.0f) timeMs = 5000.0f;      // 5 s ceiling – tune as desired
 80012ba:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8001354 <runSingleMotorV2+0x2d4>
 80012be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c6:	dc0c      	bgt.n	80012e2 <runSingleMotorV2+0x262>
    return (uint16_t)(timeMs + 0.5f);
 80012c8:	eddf 6a23 	vldr	s13, [pc, #140]	@ 8001358 <runSingleMotorV2+0x2d8>
 80012cc:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80012d0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80012d4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 80012d8:	ee17 3a90 	vmov	r3, s15
 80012dc:	b29e      	uxth	r6, r3
	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 80012de:	4637      	mov	r7, r6
 80012e0:	e73b      	b.n	800115a <runSingleMotorV2+0xda>
 80012e2:	f241 3788 	movw	r7, #5000	@ 0x1388
 80012e6:	463e      	mov	r6, r7
 80012e8:	e737      	b.n	800115a <runSingleMotorV2+0xda>
}
 80012ea:	ecbd 8b04 	vpop	{d8-d9}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 80012ee:	481b      	ldr	r0, [pc, #108]	@ (800135c <runSingleMotorV2+0x2dc>)
}
 80012f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			 uart_debug_print("Safe Stop has NOT executed successfully!!!! \r\n");
 80012f4:	f004 bc14 	b.w	8005b20 <uart_debug_print>
 80012f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80012fc:	3f50624d 	.word	0x3f50624d
 8001300:	0800c424 	.word	0x0800c424
 8001304:	42480000 	.word	0x42480000
 8001308:	45480000 	.word	0x45480000
 800130c:	0800c50c 	.word	0x0800c50c
 8001310:	20000570 	.word	0x20000570
 8001314:	20000000 	.word	0x20000000
 8001318:	0800c610 	.word	0x0800c610
 800131c:	2000056c 	.word	0x2000056c
 8001320:	43a78d37 	.word	0x43a78d37
 8001324:	0800c734 	.word	0x0800c734
 8001328:	0800c4a4 	.word	0x0800c4a4
 800132c:	0800c4c0 	.word	0x0800c4c0
 8001330:	0800c774 	.word	0x0800c774
 8001334:	00000000 	.word	0x00000000
 8001338:	c5480000 	.word	0xc5480000
 800133c:	0800c6ec 	.word	0x0800c6ec
 8001340:	0800c664 	.word	0x0800c664
 8001344:	0800c704 	.word	0x0800c704
 8001348:	c3a78d37 	.word	0xc3a78d37
 800134c:	3dd67751 	.word	0x3dd67751
 8001350:	4596f759 	.word	0x4596f759
 8001354:	47ebe27a 	.word	0x47ebe27a
 8001358:	3d29930c 	.word	0x3d29930c
 800135c:	0800c68c 	.word	0x0800c68c
 8001360:	fffff380 	.word	0xfffff380

08001364 <ControlSingleMotor>:
void ControlSingleMotor(float newSpeed){
 8001364:	b508      	push	{r3, lr}
 8001366:	ed2d 8b02 	vpush	{d8}
 800136a:	eeb0 8a40 	vmov.f32	s16, s0
	MCI_State_t motorState =  MC_GetSTMStateMotor1();
 800136e:	f001 f95f 	bl	8002630 <MC_GetSTMStateMotor1>
	switch (motorState){
 8001372:	2813      	cmp	r0, #19
 8001374:	d80b      	bhi.n	800138e <ControlSingleMotor+0x2a>
 8001376:	e8df f000 	tbb	[pc, r0]
 800137a:	0a12      	.short	0x0a12
 800137c:	0a1d0a0a 	.word	0x0a1d0a0a
 8001380:	0a0a0a28 	.word	0x0a0a0a28
 8001384:	0a0a3a33 	.word	0x0a0a3a33
 8001388:	410a0a0a 	.word	0x410a0a0a
 800138c:	430a      	.short	0x430a
}
 800138e:	ecbd 8b02 	vpop	{d8}
 8001392:	4601      	mov	r1, r0
 8001394:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	    uart_debug_print("Motor state not explicitly handled: %d\r\n", motorState);
 8001398:	481a      	ldr	r0, [pc, #104]	@ (8001404 <ControlSingleMotor+0xa0>)
 800139a:	f004 bbc1 	b.w	8005b20 <uart_debug_print>
		uart_debug_print("Motor State: Idle\r\n");
 800139e:	481a      	ldr	r0, [pc, #104]	@ (8001408 <ControlSingleMotor+0xa4>)
 80013a0:	f004 fbbe 	bl	8005b20 <uart_debug_print>
		IdleSingleMotor(newSpeed);
 80013a4:	eeb0 0a48 	vmov.f32	s0, s16
}
 80013a8:	ecbd 8b02 	vpop	{d8}
 80013ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		IdleSingleMotor(newSpeed);
 80013b0:	f7ff bb8a 	b.w	8000ac8 <IdleSingleMotor>
		uart_debug_print("Motor State: Start\r\n");
 80013b4:	4815      	ldr	r0, [pc, #84]	@ (800140c <ControlSingleMotor+0xa8>)
		uart_debug_print("Motor State: Switch over\r\n");
 80013b6:	f004 fbb3 	bl	8005b20 <uart_debug_print>
		StartSingleMotor(newSpeed);
 80013ba:	eeb0 0a48 	vmov.f32	s0, s16
}
 80013be:	ecbd 8b02 	vpop	{d8}
 80013c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		StartSingleMotor(newSpeed);
 80013c6:	f7ff bdcf 	b.w	8000f68 <StartSingleMotor>
		uart_debug_print("Motor State: Run\r\n");
 80013ca:	4811      	ldr	r0, [pc, #68]	@ (8001410 <ControlSingleMotor+0xac>)
 80013cc:	f004 fba8 	bl	8005b20 <uart_debug_print>
		runSingleMotorV2(newSpeed);
 80013d0:	eeb0 0a48 	vmov.f32	s0, s16
}
 80013d4:	ecbd 8b02 	vpop	{d8}
 80013d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		runSingleMotorV2(newSpeed);
 80013dc:	f7ff be50 	b.w	8001080 <runSingleMotorV2>
}
 80013e0:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Now \r\n");
 80013e4:	480b      	ldr	r0, [pc, #44]	@ (8001414 <ControlSingleMotor+0xb0>)
}
 80013e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Now \r\n");
 80013ea:	f004 bb99 	b.w	8005b20 <uart_debug_print>
}
 80013ee:	ecbd 8b02 	vpop	{d8}
		uart_debug_print("Motor State: Fault Over \r\n");
 80013f2:	4809      	ldr	r0, [pc, #36]	@ (8001418 <ControlSingleMotor+0xb4>)
}
 80013f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		uart_debug_print("Motor State: Fault Over \r\n");
 80013f8:	f004 bb92 	b.w	8005b20 <uart_debug_print>
		uart_debug_print("Motor State: Offset Calibration\r\n");
 80013fc:	4807      	ldr	r0, [pc, #28]	@ (800141c <ControlSingleMotor+0xb8>)
 80013fe:	e7da      	b.n	80013b6 <ControlSingleMotor+0x52>
		uart_debug_print("Motor State: Switch over\r\n");
 8001400:	4807      	ldr	r0, [pc, #28]	@ (8001420 <ControlSingleMotor+0xbc>)
 8001402:	e7d8      	b.n	80013b6 <ControlSingleMotor+0x52>
 8001404:	0800c84c 	.word	0x0800c84c
 8001408:	0800c794 	.word	0x0800c794
 800140c:	0800c7bc 	.word	0x0800c7bc
 8001410:	0800c7a8 	.word	0x0800c7a8
 8001414:	0800c830 	.word	0x0800c830
 8001418:	0800c814 	.word	0x0800c814
 800141c:	0800c7f0 	.word	0x0800c7f0
 8001420:	0800c7d4 	.word	0x0800c7d4

08001424 <Process_Multiple_ESC_Command>:
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001424:	b538      	push	{r3, r4, r5, lr}
 8001426:	4604      	mov	r4, r0
 8001428:	ed2d 8b02 	vpush	{d8}
	 uart_debug_print("Running Multiple Motors...\r\n");
 800142c:	481d      	ldr	r0, [pc, #116]	@ (80014a4 <Process_Multiple_ESC_Command+0x80>)
void Process_Multiple_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 800142e:	460d      	mov	r5, r1
	 uart_debug_print("Running Multiple Motors...\r\n");
 8001430:	f004 fb76 	bl	8005b20 <uart_debug_print>
	switch(CANMessageID->runSpec){
 8001434:	7963      	ldrb	r3, [r4, #5]
 8001436:	b323      	cbz	r3, 8001482 <Process_Multiple_ESC_Command+0x5e>
 8001438:	2b02      	cmp	r3, #2
 800143a:	d002      	beq.n	8001442 <Process_Multiple_ESC_Command+0x1e>
}
 800143c:	ecbd 8b02 	vpop	{d8}
 8001440:	bd38      	pop	{r3, r4, r5, pc}
    return value;
}


int16_t extract_multiple_speeds(const uint8_t *rxData){
    uint16_t offset = ESC_ID * 2;
 8001442:	4b19      	ldr	r3, [pc, #100]	@ (80014a8 <Process_Multiple_ESC_Command+0x84>)
			 uart_debug_print("Running This Motor\r\n");
 8001444:	4819      	ldr	r0, [pc, #100]	@ (80014ac <Process_Multiple_ESC_Command+0x88>)
    uint16_t offset = ESC_ID * 2;
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	005b      	lsls	r3, r3, #1
    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
 800144a:	b29b      	uxth	r3, r3
 800144c:	18ea      	adds	r2, r5, r3
 800144e:	5cec      	ldrb	r4, [r5, r3]
 8001450:	7853      	ldrb	r3, [r2, #1]
 8001452:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8001456:	b224      	sxth	r4, r4
			 uart_debug_print("Running This Motor\r\n");
 8001458:	f004 fb62 	bl	8005b20 <uart_debug_print>
			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
 800145c:	4621      	mov	r1, r4
 800145e:	4814      	ldr	r0, [pc, #80]	@ (80014b0 <Process_Multiple_ESC_Command+0x8c>)
 8001460:	f004 fb5e 	bl	8005b20 <uart_debug_print>
			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 8001464:	4b13      	ldr	r3, [pc, #76]	@ (80014b4 <Process_Multiple_ESC_Command+0x90>)
 8001466:	4814      	ldr	r0, [pc, #80]	@ (80014b8 <Process_Multiple_ESC_Command+0x94>)
 8001468:	6819      	ldr	r1, [r3, #0]
 800146a:	f004 fb59 	bl	8005b20 <uart_debug_print>
}
 800146e:	ecbd 8b02 	vpop	{d8}
			ControlSingleMotor(curESCSpeed);
 8001472:	ee07 4a90 	vmov	s15, r4
}
 8001476:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			ControlSingleMotor(curESCSpeed);
 800147a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800147e:	f7ff bf71 	b.w	8001364 <ControlSingleMotor>
			 uart_debug_print("Stop this motor\r\n");
 8001482:	480e      	ldr	r0, [pc, #56]	@ (80014bc <Process_Multiple_ESC_Command+0x98>)
 8001484:	f004 fb4c 	bl	8005b20 <uart_debug_print>
	 	 	safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), MC_GetSTMStateMotor1());
 8001488:	f001 f8b4 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 800148c:	eeb0 8a40 	vmov.f32	s16, s0
 8001490:	f001 f8ce 	bl	8002630 <MC_GetSTMStateMotor1>
 8001494:	eeb0 0a48 	vmov.f32	s0, s16
}
 8001498:	ecbd 8b02 	vpop	{d8}
 800149c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	 	 	safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), MC_GetSTMStateMotor1());
 80014a0:	f7ff bbec 	b.w	8000c7c <safeStopMotor>
 80014a4:	0800c878 	.word	0x0800c878
 80014a8:	200005a8 	.word	0x200005a8
 80014ac:	0800c898 	.word	0x0800c898
 80014b0:	0800c8b0 	.word	0x0800c8b0
 80014b4:	2000056c 	.word	0x2000056c
 80014b8:	0800c8c4 	.word	0x0800c8c4
 80014bc:	0800c8dc 	.word	0x0800c8dc

080014c0 <sendCANResponse>:
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 80014c0:	b530      	push	{r4, r5, lr}
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80014c2:	7843      	ldrb	r3, [r0, #1]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80014c4:	f890 c004 	ldrb.w	ip, [r0, #4]
    txID |= (CANMessageID->motorID & 0x0f);
 80014c8:	7984      	ldrb	r4, [r0, #6]
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 80014ca:	7881      	ldrb	r1, [r0, #2]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 80014cc:	78c2      	ldrb	r2, [r0, #3]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80014ce:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80014d2:	01db      	lsls	r3, r3, #7
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 80014d4:	f00c 0070 	and.w	r0, ip, #112	@ 0x70
    txID |= (CANMessageID->motorType & 0x01) << NDRIVE_STEERING_SHIFT;
 80014d8:	b2db      	uxtb	r3, r3
    txID |= (CANMessageID->motorID & 0x0f);
 80014da:	4303      	orrs	r3, r0
 80014dc:	f004 040f 	and.w	r4, r4, #15
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 80014e0:	0209      	lsls	r1, r1, #8
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 80014e2:	b08f      	sub	sp, #60	@ 0x3c
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 80014e4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
    txID |= (CANMessageID->motorID & 0x0f);
 80014e8:	431c      	orrs	r4, r3
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 80014ea:	0253      	lsls	r3, r2, #9
    txID |= (CANMessageID->motorID & 0x0f);
 80014ec:	430c      	orrs	r4, r1
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 80014ee:	ed8d 0a01 	vstr	s0, [sp, #4]
    txID |= (CANMessageID->commandType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 80014f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
	 uart_debug_print("CAN Command Sent back!\r\n");
 80014f6:	480f      	ldr	r0, [pc, #60]	@ (8001534 <sendCANResponse+0x74>)
    txID |= (CANMessageID->motorID & 0x0f);
 80014f8:	431c      	orrs	r4, r3
    memcpy(txData, &information, sizeof(float)); // data[0] --> data[3] now stores float
 80014fa:	9b01      	ldr	r3, [sp, #4]
 80014fc:	9303      	str	r3, [sp, #12]
    txID |= (CANMessageID->motorID & 0x0f);
 80014fe:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
	 uart_debug_print("CAN Command Sent back!\r\n");
 8001502:	f004 fb0d 	bl	8005b20 <uart_debug_print>
    txHeader.DataLength          = FDCAN_DLC_BYTES_8;
 8001506:	2508      	movs	r5, #8
    txHeader.IdType              = FDCAN_STANDARD_ID;
 8001508:	2300      	movs	r3, #0
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 800150a:	480b      	ldr	r0, [pc, #44]	@ (8001538 <sendCANResponse+0x78>)
    txHeader.Identifier          = txID;
 800150c:	9405      	str	r4, [sp, #20]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 800150e:	aa03      	add	r2, sp, #12
 8001510:	a905      	add	r1, sp, #20
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8001512:	e9cd 3306 	strd	r3, r3, [sp, #24]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8001516:	e9cd 5308 	strd	r5, r3, [sp, #32]
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 800151a:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    txHeader.MessageMarker       = 0;
 800151e:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8001522:	f005 ff89 	bl	8007438 <HAL_FDCAN_AddMessageToTxFifoQ>
 8001526:	b908      	cbnz	r0, 800152c <sendCANResponse+0x6c>
}
 8001528:	b00f      	add	sp, #60	@ 0x3c
 800152a:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 800152c:	f001 f846 	bl	80025bc <Error_Handler>
}
 8001530:	b00f      	add	sp, #60	@ 0x3c
 8001532:	bd30      	pop	{r4, r5, pc}
 8001534:	0800c8f0 	.word	0x0800c8f0
 8001538:	20000804 	.word	0x20000804

0800153c <Process_Single_ESC_Command>:
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 800153c:	b510      	push	{r4, lr}
 800153e:	ed2d 8b02 	vpush	{d8}
	if (CANMessageID->commandType == ACTION_RUN){
 8001542:	78c3      	ldrb	r3, [r0, #3]
    reorderedData[0] = data[0];
 8001544:	680a      	ldr	r2, [r1, #0]
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8001546:	4604      	mov	r4, r0
	if (CANMessageID->commandType == ACTION_RUN){
 8001548:	b943      	cbnz	r3, 800155c <Process_Single_ESC_Command+0x20>
		switch(CANMessageID->runSpec){
 800154a:	7943      	ldrb	r3, [r0, #5]
 800154c:	2b01      	cmp	r3, #1
 800154e:	d02c      	beq.n	80015aa <Process_Single_ESC_Command+0x6e>
 8001550:	2b02      	cmp	r3, #2
 8001552:	d061      	beq.n	8001618 <Process_Single_ESC_Command+0xdc>
 8001554:	b1c3      	cbz	r3, 8001588 <Process_Single_ESC_Command+0x4c>
}
 8001556:	ecbd 8b02 	vpop	{d8}
 800155a:	bd10      	pop	{r4, pc}
		switch(CANMessageID->readSpec){
 800155c:	7903      	ldrb	r3, [r0, #4]
 800155e:	2b07      	cmp	r3, #7
 8001560:	d8f9      	bhi.n	8001556 <Process_Single_ESC_Command+0x1a>
 8001562:	a201      	add	r2, pc, #4	@ (adr r2, 8001568 <Process_Single_ESC_Command+0x2c>)
 8001564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001568:	080015e1 	.word	0x080015e1
 800156c:	08001557 	.word	0x08001557
 8001570:	080015b7 	.word	0x080015b7
 8001574:	080015f3 	.word	0x080015f3
 8001578:	080015f9 	.word	0x080015f9
 800157c:	08001613 	.word	0x08001613
 8001580:	08001557 	.word	0x08001557
 8001584:	080015d1 	.word	0x080015d1
				uart_debug_print("Motor Stopped \r\n");
 8001588:	4830      	ldr	r0, [pc, #192]	@ (800164c <Process_Single_ESC_Command+0x110>)
 800158a:	f004 fac9 	bl	8005b20 <uart_debug_print>
				safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), MC_GetSTMStateMotor1());
 800158e:	f001 f831 	bl	80025f4 <MC_GetAverageMecSpeedMotor1_F>
 8001592:	eeb0 8a40 	vmov.f32	s16, s0
 8001596:	f001 f84b 	bl	8002630 <MC_GetSTMStateMotor1>
 800159a:	eeb0 0a48 	vmov.f32	s0, s16
}
 800159e:	ecbd 8b02 	vpop	{d8}
 80015a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				safeStopMotor(MC_GetAverageMecSpeedMotor1_F(), MC_GetSTMStateMotor1());
 80015a6:	f7ff bb69 	b.w	8000c7c <safeStopMotor>
}
 80015aa:	ecbd 8b02 	vpop	{d8}
 80015ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				MC_AcknowledgeFaultMotor1();
 80015b2:	f001 b831 	b.w	8002618 <MC_AcknowledgeFaultMotor1>
				float phaseVoltage = MC_GetPhaseVoltageAmplitudeMotor1();
 80015b6:	f001 f829 	bl	800260c <MC_GetPhaseVoltageAmplitudeMotor1>
}
 80015ba:	ecbd 8b02 	vpop	{d8}
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 80015be:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, phaseCurrent);
 80015c2:	4620      	mov	r0, r4
 80015c4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 80015c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, phaseCurrent);
 80015cc:	f7ff bf78 	b.w	80014c0 <sendCANResponse>
}
 80015d0:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, feedback);
 80015d4:	ed9f 0a1e 	vldr	s0, [pc, #120]	@ 8001650 <Process_Single_ESC_Command+0x114>
}
 80015d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, feedback);
 80015dc:	f7ff bf70 	b.w	80014c0 <sendCANResponse>
				float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 80015e0:	f001 f802 	bl	80025e8 <MC_GetMecSpeedReferenceMotor1_F>
}
 80015e4:	ecbd 8b02 	vpop	{d8}
				sendCANResponse(CANMessageID, currentSpeed);
 80015e8:	4620      	mov	r0, r4
}
 80015ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentSpeed);
 80015ee:	f7ff bf67 	b.w	80014c0 <sendCANResponse>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 80015f2:	f001 f805 	bl	8002600 <MC_GetPhaseCurrentAmplitudeMotor1>
 80015f6:	e7e0      	b.n	80015ba <Process_Single_ESC_Command+0x7e>
				float currentFaults = MC_GetOccurredFaultsMotor1();
 80015f8:	f001 f814 	bl	8002624 <MC_GetOccurredFaultsMotor1>
}
 80015fc:	ecbd 8b02 	vpop	{d8}
				float currentState = MC_GetSTMStateMotor1();
 8001600:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, currentState);
 8001604:	4620      	mov	r0, r4
 8001606:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 800160a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				sendCANResponse(CANMessageID, currentState);
 800160e:	f7ff bf57 	b.w	80014c0 <sendCANResponse>
				float currentState = MC_GetSTMStateMotor1();
 8001612:	f001 f80d 	bl	8002630 <MC_GetSTMStateMotor1>
 8001616:	e7f1      	b.n	80015fc <Process_Single_ESC_Command+0xc0>
 8001618:	ee08 2a10 	vmov	s16, r2
				uart_debug_print("In case RUN_SPEED\r\n");
 800161c:	480d      	ldr	r0, [pc, #52]	@ (8001654 <Process_Single_ESC_Command+0x118>)
 800161e:	f004 fa7f 	bl	8005b20 <uart_debug_print>
				uart_debug_print("Setpoint %d RPM\r\n", (int)information);
 8001622:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8001626:	480c      	ldr	r0, [pc, #48]	@ (8001658 <Process_Single_ESC_Command+0x11c>)
 8001628:	ee17 1a90 	vmov	r1, s15
 800162c:	f004 fa78 	bl	8005b20 <uart_debug_print>
				uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 8001630:	4b0a      	ldr	r3, [pc, #40]	@ (800165c <Process_Single_ESC_Command+0x120>)
 8001632:	480b      	ldr	r0, [pc, #44]	@ (8001660 <Process_Single_ESC_Command+0x124>)
 8001634:	6819      	ldr	r1, [r3, #0]
 8001636:	f004 fa73 	bl	8005b20 <uart_debug_print>
				ControlSingleMotor(information);
 800163a:	eeb0 0a48 	vmov.f32	s0, s16
}
 800163e:	ecbd 8b02 	vpop	{d8}
 8001642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				ControlSingleMotor(information);
 8001646:	f7ff be8d 	b.w	8001364 <ControlSingleMotor>
 800164a:	bf00      	nop
 800164c:	0800c90c 	.word	0x0800c90c
 8001650:	428a0000 	.word	0x428a0000
 8001654:	0800c920 	.word	0x0800c920
 8001658:	0800c8b0 	.word	0x0800c8b0
 800165c:	2000056c 	.word	0x2000056c
 8001660:	0800c8c4 	.word	0x0800c8c4

08001664 <CAN_Parse_MSG>:
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 8001664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001666:	4604      	mov	r4, r0
 8001668:	b083      	sub	sp, #12
	uart_debug_print("Parsing the ID...\r\n");
 800166a:	4826      	ldr	r0, [pc, #152]	@ (8001704 <CAN_Parse_MSG+0xa0>)
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 800166c:	460e      	mov	r6, r1
	uart_debug_print("Parsing the ID...\r\n");
 800166e:	f004 fa57 	bl	8005b20 <uart_debug_print>
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8001672:	8825      	ldrh	r5, [r4, #0]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 8001674:	f3c5 2380 	ubfx	r3, r5, #10, #1
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8001678:	f3c5 040a 	ubfx	r4, r5, #0, #11
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 800167c:	f88d 3000 	strb.w	r3, [sp]
	if (CANMessage.messageSender == SLAVE){
 8001680:	bb1b      	cbnz	r3, 80016ca <CAN_Parse_MSG+0x66>
	return (CAN_ID & NDRIVE_STEETING_DEVICE_MASK) >> NDRIVE_STEERING_SHIFT;
 8001682:	f3c4 13c0 	ubfx	r3, r4, #7, #1
	CANMessage.motorType = (MotorType) get_CAN_motor_type(msg_ID);
 8001686:	f88d 3001 	strb.w	r3, [sp, #1]
	if (CANMessage.motorType == STEERING_MOTOR){
 800168a:	b9f3      	cbnz	r3, 80016ca <CAN_Parse_MSG+0x66>
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 800168c:	0a63      	lsrs	r3, r4, #9
 800168e:	f88d 3003 	strb.w	r3, [sp, #3]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 8001692:	f3c4 1702 	ubfx	r7, r4, #4, #3
	if (CANMessage.commandType == ACTION_RUN){
 8001696:	b1d3      	cbz	r3, 80016ce <CAN_Parse_MSG+0x6a>
		uart_debug_print("Read Command Detected\r\n");
 8001698:	481b      	ldr	r0, [pc, #108]	@ (8001708 <CAN_Parse_MSG+0xa4>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 800169a:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Read Command Detected\r\n");
 800169e:	f004 fa3f 	bl	8005b20 <uart_debug_print>
		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 80016a2:	f88d 7004 	strb.w	r7, [sp, #4]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 80016a6:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 80016aa:	b1dc      	cbz	r4, 80016e4 <CAN_Parse_MSG+0x80>
		if (CANMessage.motorID == ESC_ID){
 80016ac:	4b17      	ldr	r3, [pc, #92]	@ (800170c <CAN_Parse_MSG+0xa8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f005 050f 	and.w	r5, r5, #15
 80016b4:	429d      	cmp	r5, r3
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 80016b6:	f88d 5006 	strb.w	r5, [sp, #6]
		if (CANMessage.motorID == ESC_ID){
 80016ba:	d11c      	bne.n	80016f6 <CAN_Parse_MSG+0x92>
			uart_debug_print("Processing Single Command\r\n");
 80016bc:	4814      	ldr	r0, [pc, #80]	@ (8001710 <CAN_Parse_MSG+0xac>)
 80016be:	f004 fa2f 	bl	8005b20 <uart_debug_print>
			Process_Single_ESC_Command(&CANMessage, rxData);
 80016c2:	4631      	mov	r1, r6
 80016c4:	4668      	mov	r0, sp
 80016c6:	f7ff ff39 	bl	800153c <Process_Single_ESC_Command>
}
 80016ca:	b003      	add	sp, #12
 80016cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_debug_print("Run Command Detected\r\n");
 80016ce:	4811      	ldr	r0, [pc, #68]	@ (8001714 <CAN_Parse_MSG+0xb0>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 80016d0:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Run Command Detected\r\n");
 80016d4:	f004 fa24 	bl	8005b20 <uart_debug_print>
			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 80016d8:	f88d 7005 	strb.w	r7, [sp, #5]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 80016dc:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 80016e0:	2c00      	cmp	r4, #0
 80016e2:	d1e3      	bne.n	80016ac <CAN_Parse_MSG+0x48>
		uart_debug_print("Processing Multiple Commands\r\n");
 80016e4:	480c      	ldr	r0, [pc, #48]	@ (8001718 <CAN_Parse_MSG+0xb4>)
 80016e6:	f004 fa1b 	bl	8005b20 <uart_debug_print>
		Process_Multiple_ESC_Command(&CANMessage, rxData);
 80016ea:	4631      	mov	r1, r6
 80016ec:	4668      	mov	r0, sp
 80016ee:	f7ff fe99 	bl	8001424 <Process_Multiple_ESC_Command>
}
 80016f2:	b003      	add	sp, #12
 80016f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			 uart_debug_print("Not My IDr\n");
 80016f6:	4809      	ldr	r0, [pc, #36]	@ (800171c <CAN_Parse_MSG+0xb8>)
}
 80016f8:	b003      	add	sp, #12
 80016fa:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			 uart_debug_print("Not My IDr\n");
 80016fe:	f004 ba0f 	b.w	8005b20 <uart_debug_print>
 8001702:	bf00      	nop
 8001704:	0800c934 	.word	0x0800c934
 8001708:	0800c960 	.word	0x0800c960
 800170c:	200005a8 	.word	0x200005a8
 8001710:	0800c978 	.word	0x0800c978
 8001714:	0800c948 	.word	0x0800c948
 8001718:	0800c9a0 	.word	0x0800c9a0
 800171c:	0800c994 	.word	0x0800c994

08001720 <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8001720:	b570      	push	{r4, r5, r6, lr}
 8001722:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8001724:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8001726:	6940      	ldr	r0, [r0, #20]
 8001728:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800172a:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800172c:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800172e:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8001732:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001736:	6960      	ldr	r0, [r4, #20]
 8001738:	f104 011c 	add.w	r1, r4, #28
 800173c:	462b      	mov	r3, r5
 800173e:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001740:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001744:	4718      	bx	r3
 8001746:	bf00      	nop

08001748 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8001748:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800174a:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 800174c:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800174e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001752:	4c1e      	ldr	r4, [pc, #120]	@ (80017cc <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8001754:	01db      	lsls	r3, r3, #7
 8001756:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800175a:	784a      	ldrb	r2, [r1, #1]
 800175c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8001760:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8001762:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8001766:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800176a:	b2da      	uxtb	r2, r3
 800176c:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8001770:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001774:	5ca2      	ldrb	r2, [r4, r2]
 8001776:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800177a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800177c:	5ca2      	ldrb	r2, [r4, r2]
 800177e:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8001782:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001784:	5ca2      	ldrb	r2, [r4, r2]
 8001786:	4c12      	ldr	r4, [pc, #72]	@ (80017d0 <ASPEP_sendBeacon+0x88>)
 8001788:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800178c:	5ca2      	ldrb	r2, [r4, r2]
 800178e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001792:	f043 0305 	orr.w	r3, r3, #5
 8001796:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800179a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800179c:	b14b      	cbz	r3, 80017b2 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 800179e:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80017a0:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80017a4:	b913      	cbnz	r3, 80017ac <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80017a6:	2302      	movs	r3, #2
 80017a8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 80017ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80017b0:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80017b2:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80017b6:	2303      	movs	r3, #3
 80017b8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80017bc:	6481      	str	r1, [r0, #72]	@ 0x48
 80017be:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80017c0:	2204      	movs	r2, #4
 80017c2:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 80017c4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 80017c8:	6940      	ldr	r0, [r0, #20]
 80017ca:	4718      	bx	r3
 80017cc:	0800ca5c 	.word	0x0800ca5c
 80017d0:	0800ca4c 	.word	0x0800ca4c

080017d4 <ASPEP_sendPing>:
{
 80017d4:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 80017d6:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80017d8:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 80017dc:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80017e0:	4d1d      	ldr	r5, [pc, #116]	@ (8001858 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 80017e2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80017e6:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 80017ea:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80017ee:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 80017f2:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 80017f6:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80017fa:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80017fe:	b2da      	uxtb	r2, r3
 8001800:	4c16      	ldr	r4, [pc, #88]	@ (800185c <ASPEP_sendPing+0x88>)
 8001802:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8001806:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800180a:	5ca2      	ldrb	r2, [r4, r2]
 800180c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8001810:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001812:	5ca2      	ldrb	r2, [r4, r2]
 8001814:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8001818:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800181a:	5ca2      	ldrb	r2, [r4, r2]
 800181c:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8001820:	5ceb      	ldrb	r3, [r5, r3]
 8001822:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8001826:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001828:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800182a:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 800182c:	b143      	cbz	r3, 8001840 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 800182e:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001830:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001834:	b913      	cbnz	r3, 800183c <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8001836:	2302      	movs	r3, #2
 8001838:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 800183c:	bc30      	pop	{r4, r5}
 800183e:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001840:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8001844:	2303      	movs	r3, #3
 8001846:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800184a:	6481      	str	r1, [r0, #72]	@ 0x48
 800184c:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 800184e:	2204      	movs	r2, #4
 8001850:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001852:	6940      	ldr	r0, [r0, #20]
}
 8001854:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001856:	4718      	bx	r3
 8001858:	0800ca4c 	.word	0x0800ca4c
 800185c:	0800ca5c 	.word	0x0800ca5c

08001860 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8001860:	2a0a      	cmp	r2, #10
 8001862:	d009      	beq.n	8001878 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8001864:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8001868:	2b01      	cmp	r3, #1
 800186a:	d91d      	bls.n	80018a8 <ASPEP_getBuffer+0x48>
 800186c:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8001870:	2b01      	cmp	r3, #1
 8001872:	d90d      	bls.n	8001890 <ASPEP_getBuffer+0x30>
        result = false;
 8001874:	2000      	movs	r0, #0
}
 8001876:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8001878:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 800187c:	2b01      	cmp	r3, #1
 800187e:	d8f9      	bhi.n	8001874 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001880:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8001882:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8001884:	3304      	adds	r3, #4
 8001886:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8001888:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 800188c:	2001      	movs	r0, #1
 800188e:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8001890:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8001892:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8001896:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 800189a:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 800189c:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80018a0:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80018a2:	600b      	str	r3, [r1, #0]
  bool result = true;
 80018a4:	2001      	movs	r0, #1
 80018a6:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80018a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 80018aa:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80018ae:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80018b2:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 80018b4:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80018b8:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80018ba:	600b      	str	r3, [r1, #0]
 80018bc:	e7f2      	b.n	80018a4 <ASPEP_getBuffer+0x44>
 80018be:	bf00      	nop

080018c0 <ASPEP_sendPacket>:
{
 80018c0:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80018c2:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 80018c6:	2802      	cmp	r0, #2
 80018c8:	d001      	beq.n	80018ce <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 80018ca:	2002      	movs	r0, #2
 80018cc:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80018ce:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 80018d2:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80018d6:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 80018da:	2801      	cmp	r0, #1
 80018dc:	d104      	bne.n	80018e8 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 80018de:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 80018e2:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 80018e4:	3202      	adds	r2, #2
 80018e6:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 80018e8:	2b0a      	cmp	r3, #10
 80018ea:	d105      	bne.n	80018f8 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 80018ec:	f89c 0010 	ldrb.w	r0, [ip, #16]
 80018f0:	b348      	cbz	r0, 8001946 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 80018f2:	2000      	movs	r0, #0
 80018f4:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 80018f8:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 80018fc:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 80018fe:	4d34      	ldr	r5, [pc, #208]	@ (80019d0 <ASPEP_sendPacket+0x110>)
 8001900:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001902:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001904:	5d2e      	ldrb	r6, [r5, r4]
 8001906:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800190a:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 800190c:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001910:	5d2e      	ldrb	r6, [r5, r4]
 8001912:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8001916:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8001918:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800191a:	5d2c      	ldrb	r4, [r5, r4]
 800191c:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8001920:	406c      	eors	r4, r5
 8001922:	4d2c      	ldr	r5, [pc, #176]	@ (80019d4 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8001924:	5d2c      	ldrb	r4, [r5, r4]
 8001926:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 800192a:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 800192e:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001930:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8001934:	b1b9      	cbz	r1, 8001966 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8001936:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8001938:	2b09      	cmp	r3, #9
 800193a:	d006      	beq.n	800194a <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 800193c:	2b0a      	cmp	r3, #10
 800193e:	d02a      	beq.n	8001996 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8001940:	b37b      	cbz	r3, 80019a2 <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8001942:	2000      	movs	r0, #0
}
 8001944:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8001946:	2001      	movs	r0, #1
}
 8001948:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800194a:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 800194e:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8001950:	458e      	cmp	lr, r1
 8001952:	bf14      	ite	ne
 8001954:	2003      	movne	r0, #3
 8001956:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8001958:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 800195c:	b3a1      	cbz	r1, 80019c8 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800195e:	2102      	movs	r1, #2
 8001960:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8001962:	809a      	strh	r2, [r3, #4]
}
 8001964:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8001966:	2b09      	cmp	r3, #9
 8001968:	d029      	beq.n	80019be <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 800196a:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 800196c:	f04f 0303 	mov.w	r3, #3
 8001970:	bf0b      	itete	eq
 8001972:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8001976:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800197a:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800197e:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8001982:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8001986:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001988:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 800198c:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8001990:	4671      	mov	r1, lr
 8001992:	4798      	blx	r3
 8001994:	e7d5      	b.n	8001942 <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8001996:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 800199a:	2b01      	cmp	r3, #1
 800199c:	d009      	beq.n	80019b2 <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 800199e:	2003      	movs	r0, #3
}
 80019a0:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 80019a2:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1f9      	bne.n	800199e <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 80019aa:	2302      	movs	r3, #2
 80019ac:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 80019b0:	e7c7      	b.n	8001942 <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 80019b2:	2302      	movs	r3, #2
 80019b4:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80019b8:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 80019bc:	e7c1      	b.n	8001942 <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80019be:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 80019c2:	2103      	movs	r1, #3
 80019c4:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80019c6:	e7dc      	b.n	8001982 <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80019c8:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 80019cc:	e7c7      	b.n	800195e <ASPEP_sendPacket+0x9e>
 80019ce:	bf00      	nop
 80019d0:	0800ca5c 	.word	0x0800ca5c
 80019d4:	0800ca4c 	.word	0x0800ca4c

080019d8 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 80019d8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 80019da:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80019de:	2b03      	cmp	r3, #3
{
 80019e0:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 80019e2:	d013      	beq.n	8001a0c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 80019e4:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 80019e6:	2100      	movs	r1, #0
 80019e8:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 80019ea:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 80019ee:	2a02      	cmp	r2, #2
 80019f0:	d013      	beq.n	8001a1a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d11d      	bne.n	8001a32 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80019f6:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80019fa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 80019fc:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 80019fe:	2204      	movs	r2, #4
 8001a00:	6940      	ldr	r0, [r0, #20]
 8001a02:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8001a04:	2303      	movs	r3, #3
 8001a06:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001a0a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8001a0c:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 8001a10:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8001a12:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8001a14:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8001a18:	d10b      	bne.n	8001a32 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001a1a:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8001a1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001a20:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8001a22:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001a24:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001a26:	6960      	ldr	r0, [r4, #20]
 8001a28:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 8001a30:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8001a32:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8001a34:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001a36:	b1cb      	cbz	r3, 8001a6c <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8001a38:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8001a3a:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8001a3c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	889a      	ldrh	r2, [r3, #4]
 8001a42:	6960      	ldr	r0, [r4, #20]
 8001a44:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a46:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8001a48:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d007      	beq.n	8001a60 <ASPEP_HWDataTransmittedIT+0x88>
 8001a50:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d003      	beq.n	8001a60 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8001a5c:	b662      	cpsie	i
}
 8001a5e:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8001a60:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8001a62:	0063      	lsls	r3, r4, #1
 8001a64:	3368      	adds	r3, #104	@ 0x68
 8001a66:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8001a68:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8001a6a:	e7f7      	b.n	8001a5c <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8001a6c:	64a3      	str	r3, [r4, #72]	@ 0x48
 8001a6e:	e7f5      	b.n	8001a5c <ASPEP_HWDataTransmittedIT+0x84>

08001a70 <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8001a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8001a74:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8001a78:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8001a7a:	2300      	movs	r3, #0
{
 8001a7c:	4604      	mov	r4, r0
    *packetLength = 0;
 8001a7e:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8001a80:	b19d      	cbz	r5, 8001aaa <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8001a82:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8001a86:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8001a8a:	2d01      	cmp	r5, #1
 8001a8c:	d04e      	beq.n	8001b2c <ASPEP_RXframeProcess+0xbc>
 8001a8e:	2d02      	cmp	r5, #2
 8001a90:	d012      	beq.n	8001ab8 <ASPEP_RXframeProcess+0x48>
 8001a92:	b9d5      	cbnz	r5, 8001aca <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8001a94:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8001a96:	2b05      	cmp	r3, #5
 8001a98:	d062      	beq.n	8001b60 <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8001a9a:	2b06      	cmp	r3, #6
 8001a9c:	d115      	bne.n	8001aca <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8001a9e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7ff fe96 	bl	80017d4 <ASPEP_sendPing>
 8001aa8:	e00f      	b.n	8001aca <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8001aaa:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 8001aae:	b9b3      	cbnz	r3, 8001ade <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001ab0:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 8001ab2:	4628      	mov	r0, r5
 8001ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 8001ab8:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8001aba:	2d05      	cmp	r5, #5
 8001abc:	f000 80d9 	beq.w	8001c72 <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 8001ac0:	2d06      	cmp	r5, #6
 8001ac2:	f000 8125 	beq.w	8001d10 <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8001ac6:	2d09      	cmp	r5, #9
 8001ac8:	d03e      	beq.n	8001b48 <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 8001aca:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001acc:	6960      	ldr	r0, [r4, #20]
 8001ace:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	f104 011c 	add.w	r1, r4, #28
 8001ad6:	4798      	blx	r3
}
 8001ad8:	4628      	mov	r0, r5
 8001ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001ade:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 8001ae2:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001ae4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8001ae8:	488c      	ldr	r0, [pc, #560]	@ (8001d1c <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001aea:	4d8d      	ldr	r5, [pc, #564]	@ (8001d20 <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001aec:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8001af0:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001af4:	5c82      	ldrb	r2, [r0, r2]
 8001af6:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 8001afa:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8001afc:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 8001afe:	5ceb      	ldrb	r3, [r5, r3]
 8001b00:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8001b04:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b06:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001b08:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	f000 80f4 	beq.w	8001cf8 <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b10:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8001b12:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001b16:	b913      	cbnz	r3, 8001b1e <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8001b1e:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8001b20:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8001b22:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8001b24:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8001b28:	4798      	blx	r3
 8001b2a:	e7c1      	b.n	8001ab0 <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8001b2c:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 8001b2e:	2905      	cmp	r1, #5
 8001b30:	d064      	beq.n	8001bfc <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 8001b32:	2906      	cmp	r1, #6
 8001b34:	d1c9      	bne.n	8001aca <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001b36:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7ff fe4a 	bl	80017d4 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8001b40:	2302      	movs	r3, #2
 8001b42:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001b46:	e7c0      	b.n	8001aca <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001b48:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 8001b4c:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 8001b50:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001b52:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001b54:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001b56:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001b5a:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8001b5c:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8001b5e:	e7b5      	b.n	8001acc <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001b60:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001b64:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001b68:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001b6a:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001b6e:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001b72:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001b76:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001b7a:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001b7c:	4563      	cmp	r3, ip
 8001b7e:	bf28      	it	cs
 8001b80:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001b82:	42b0      	cmp	r0, r6
 8001b84:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001b86:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001b8a:	bf28      	it	cs
 8001b8c:	4631      	movcs	r1, r6
 8001b8e:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001b92:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001b96:	45b8      	cmp	r8, r7
 8001b98:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001b9a:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001b9e:	bf28      	it	cs
 8001ba0:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001ba2:	45ca      	cmp	sl, r9
 8001ba4:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001ba6:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001baa:	bf28      	it	cs
 8001bac:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001bae:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001bb2:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001bb4:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001bb6:	d81b      	bhi.n	8001bf0 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001bb8:	459c      	cmp	ip, r3
 8001bba:	d819      	bhi.n	8001bf0 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001bbc:	45b8      	cmp	r8, r7
 8001bbe:	d817      	bhi.n	8001bf0 <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001bc0:	45ca      	cmp	sl, r9
 8001bc2:	d815      	bhi.n	8001bf0 <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001bc4:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 8001bc8:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001bcc:	4290      	cmp	r0, r2
 8001bce:	d10f      	bne.n	8001bf0 <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001bd0:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001bd2:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001bd4:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001bd6:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001bd8:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001bda:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001bde:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001be0:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001be2:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8001be4:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8001be8:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8001bec:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001bf0:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7ff fda7 	bl	8001748 <ASPEP_sendBeacon>
 8001bfa:	e766      	b.n	8001aca <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001bfc:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001bfe:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001c02:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c04:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c08:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c0c:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001c10:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001c14:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c16:	42a8      	cmp	r0, r5
 8001c18:	bf28      	it	cs
 8001c1a:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c1c:	4561      	cmp	r1, ip
 8001c1e:	460f      	mov	r7, r1
 8001c20:	bf28      	it	cs
 8001c22:	4667      	movcs	r7, ip
 8001c24:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001c28:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001c2c:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c30:	42b7      	cmp	r7, r6
 8001c32:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c34:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c38:	bf28      	it	cs
 8001c3a:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c3c:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c3e:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c42:	46c1      	mov	r9, r8
 8001c44:	bf28      	it	cs
 8001c46:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c48:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001c4c:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c4e:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001c50:	d80b      	bhi.n	8001c6a <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001c52:	4285      	cmp	r5, r0
 8001c54:	d809      	bhi.n	8001c6a <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001c56:	42b7      	cmp	r7, r6
 8001c58:	d807      	bhi.n	8001c6a <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001c5a:	45f0      	cmp	r8, lr
 8001c5c:	d805      	bhi.n	8001c6a <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001c5e:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001c62:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d0c2      	beq.n	8001bf0 <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001c70:	e7be      	b.n	8001bf0 <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001c72:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c76:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001c7a:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c7c:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001c80:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001c84:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001c88:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001c8c:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001c8e:	4565      	cmp	r5, ip
 8001c90:	bf28      	it	cs
 8001c92:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001c94:	4570      	cmp	r0, lr
 8001c96:	4607      	mov	r7, r0
 8001c98:	4619      	mov	r1, r3
 8001c9a:	bf28      	it	cs
 8001c9c:	4677      	movcs	r7, lr
 8001c9e:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001ca2:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001ca6:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001caa:	42b7      	cmp	r7, r6
 8001cac:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cae:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001cb2:	bf28      	it	cs
 8001cb4:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cb6:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cb8:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001cbc:	46ca      	mov	sl, r9
 8001cbe:	bf28      	it	cs
 8001cc0:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cc2:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001cc6:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001cc8:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001cca:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 8001cce:	d80d      	bhi.n	8001cec <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001cd0:	45ac      	cmp	ip, r5
 8001cd2:	d80b      	bhi.n	8001cec <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001cd4:	42b7      	cmp	r7, r6
 8001cd6:	d809      	bhi.n	8001cec <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001cd8:	45c1      	cmp	r9, r8
 8001cda:	d807      	bhi.n	8001cec <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001cdc:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 8001ce0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001ce4:	1a9b      	subs	r3, r3, r2
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	095b      	lsrs	r3, r3, #5
 8001cec:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff fd29 	bl	8001748 <ASPEP_sendBeacon>
 8001cf6:	e6e8      	b.n	8001aca <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8001cf8:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8001d02:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001d04:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001d06:	2204      	movs	r2, #4
 8001d08:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001d0a:	6960      	ldr	r0, [r4, #20]
 8001d0c:	4798      	blx	r3
 8001d0e:	e706      	b.n	8001b1e <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001d10:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001d14:	2101      	movs	r1, #1
 8001d16:	f7ff fd5d 	bl	80017d4 <ASPEP_sendPing>
 8001d1a:	e6d6      	b.n	8001aca <ASPEP_RXframeProcess+0x5a>
 8001d1c:	0800ca5c 	.word	0x0800ca5c
 8001d20:	0800ca4c 	.word	0x0800ca4c

08001d24 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001d24:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8001d26:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8001d2a:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001d2c:	b143      	cbz	r3, 8001d40 <ASPEP_HWDataReceivedIT+0x1c>
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d000      	beq.n	8001d34 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001d32:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001d34:	2200      	movs	r2, #0
 8001d36:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 8001d3a:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 8001d3e:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001d40:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001d42:	4a1f      	ldr	r2, [pc, #124]	@ (8001dc0 <ASPEP_HWDataReceivedIT+0x9c>)
 8001d44:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001d46:	5cd3      	ldrb	r3, [r2, r3]
 8001d48:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001d4c:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001d54:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001d56:	5cd3      	ldrb	r3, [r2, r3]
 8001d58:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001d5c:	5cd3      	ldrb	r3, [r2, r3]
 8001d5e:	b95b      	cbnz	r3, 8001d78 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001d60:	7f03      	ldrb	r3, [r0, #28]
 8001d62:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8001d66:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001d68:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8001d6a:	d809      	bhi.n	8001d80 <ASPEP_HWDataReceivedIT+0x5c>
 8001d6c:	2b04      	cmp	r3, #4
 8001d6e:	d91f      	bls.n	8001db0 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 8001d70:	2301      	movs	r3, #1
 8001d72:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8001d76:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8001d78:	2304      	movs	r3, #4
 8001d7a:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001d7e:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 8001d80:	2b09      	cmp	r3, #9
 8001d82:	d115      	bne.n	8001db0 <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001d84:	8b83      	ldrh	r3, [r0, #28]
 8001d86:	091b      	lsrs	r3, r3, #4
 8001d88:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ef      	beq.n	8001d70 <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 8001d90:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d30f      	bcc.n	8001db8 <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001d98:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8001d9c:	6981      	ldr	r1, [r0, #24]
 8001d9e:	6940      	ldr	r0, [r0, #20]
 8001da0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8001da4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8001da6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8001da8:	2301      	movs	r3, #1
 8001daa:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 8001dae:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8001db0:	2301      	movs	r3, #1
 8001db2:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 8001db6:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8001db8:	2302      	movs	r3, #2
 8001dba:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 8001dbe:	bd10      	pop	{r4, pc}
 8001dc0:	0800ca5c 	.word	0x0800ca5c

08001dc4 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 8001dc4:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8001dcc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8001dce:	6940      	ldr	r0, [r0, #20]
 8001dd0:	2204      	movs	r2, #4
 8001dd2:	311c      	adds	r1, #28
 8001dd4:	4718      	bx	r3
 8001dd6:	bf00      	nop

08001dd8 <HAL_FDCAN_RxFifo0Callback>:
  }
}

//keep latest command only
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 8001dd8:	07ca      	lsls	r2, r1, #31
 8001dda:	d515      	bpl.n	8001e08 <HAL_FDCAN_RxFifo0Callback+0x30>
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 8001ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        // Keep reading until FIFO is empty, but only keep the last message
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8001dde:	4f0b      	ldr	r7, [pc, #44]	@ (8001e0c <HAL_FDCAN_RxFifo0Callback+0x34>)
 8001de0:	4e0b      	ldr	r6, [pc, #44]	@ (8001e10 <HAL_FDCAN_RxFifo0Callback+0x38>)
 8001de2:	4604      	mov	r4, r0
 8001de4:	e001      	b.n	8001dea <HAL_FDCAN_RxFifo0Callback+0x12>
 8001de6:	f005 fb89 	bl	80074fc <HAL_FDCAN_GetRxMessage>
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001dea:	2140      	movs	r1, #64	@ 0x40
 8001dec:	4620      	mov	r0, r4
 8001dee:	f005 fc25 	bl	800763c <HAL_FDCAN_GetRxFifoFillLevel>
 8001df2:	4605      	mov	r5, r0
            HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData);
 8001df4:	2140      	movs	r1, #64	@ 0x40
 8001df6:	463b      	mov	r3, r7
 8001df8:	4632      	mov	r2, r6
 8001dfa:	4620      	mov	r0, r4
        while (HAL_FDCAN_GetRxFifoFillLevel(hfdcan, FDCAN_RX_FIFO0) > 0) {
 8001dfc:	2d00      	cmp	r5, #0
 8001dfe:	d1f2      	bne.n	8001de6 <HAL_FDCAN_RxFifo0Callback+0xe>
        }

        received_CAN_command = true;
 8001e00:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <HAL_FDCAN_RxFifo0Callback+0x3c>)
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
    }
}
 8001e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000574 	.word	0x20000574
 8001e10:	2000057c 	.word	0x2000057c
 8001e14:	200005a4 	.word	0x200005a4

08001e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e18:	b510      	push	{r4, lr}
 8001e1a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e1c:	2238      	movs	r2, #56	@ 0x38
 8001e1e:	2100      	movs	r1, #0
 8001e20:	a806      	add	r0, sp, #24
 8001e22:	f009 fe75 	bl	800bb10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e26:	2000      	movs	r0, #0
 8001e28:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001e2c:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001e30:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e32:	f006 f89d 	bl	8007f70 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e36:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001e88 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e3a:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e3c:	2255      	movs	r2, #85	@ 0x55
 8001e3e:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e42:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001e44:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e46:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e48:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e4c:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001e50:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e54:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e56:	f006 f905 	bl	8008064 <HAL_RCC_OscConfig>
 8001e5a:	b108      	cbz	r0, 8001e60 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001e5c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e5e:	e7fe      	b.n	8001e5e <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e60:	2104      	movs	r1, #4
 8001e62:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e64:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e66:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e6a:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e6e:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e72:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e74:	f006 fb74 	bl	8008560 <HAL_RCC_ClockConfig>
 8001e78:	b108      	cbz	r0, 8001e7e <SystemClock_Config+0x66>
 8001e7a:	b672      	cpsid	i
  while (1)
 8001e7c:	e7fe      	b.n	8001e7c <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 8001e7e:	f006 fc9d 	bl	80087bc <HAL_RCC_EnableCSS>
}
 8001e82:	b014      	add	sp, #80	@ 0x50
 8001e84:	bd10      	pop	{r4, pc}
 8001e86:	bf00      	nop
 8001e88:	00000001 	.word	0x00000001
 8001e8c:	00010000 	.word	0x00010000

08001e90 <MX_USART2_UART_Init>:
{
 8001e90:	b510      	push	{r4, lr}
__HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 8001e92:	4a17      	ldr	r2, [pc, #92]	@ (8001ef0 <MX_USART2_UART_Init+0x60>)
 8001e94:	4c17      	ldr	r4, [pc, #92]	@ (8001ef4 <MX_USART2_UART_Init+0x64>)
  huart2.Instance = USART2;
 8001e96:	4818      	ldr	r0, [pc, #96]	@ (8001ef8 <MX_USART2_UART_Init+0x68>)
__HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 8001e98:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9a:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001e9c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
__HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 8001ea0:	6294      	str	r4, [r2, #40]	@ 0x28
  huart2.Instance = USART2;
 8001ea2:	6020      	str	r0, [r4, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ea4:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ea6:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ea8:	e9c4 1301 	strd	r1, r3, [r4, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001eac:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb0:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001eb4:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001eb8:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ebc:	f007 fc9e 	bl	80097fc <HAL_UART_Init>
 8001ec0:	b108      	cbz	r0, 8001ec6 <MX_USART2_UART_Init+0x36>
 8001ec2:	b672      	cpsid	i
  while (1)
 8001ec4:	e7fe      	b.n	8001ec4 <MX_USART2_UART_Init+0x34>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec6:	4601      	mov	r1, r0
 8001ec8:	4620      	mov	r0, r4
 8001eca:	f007 fce9 	bl	80098a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001ece:	b108      	cbz	r0, 8001ed4 <MX_USART2_UART_Init+0x44>
 8001ed0:	b672      	cpsid	i
  while (1)
 8001ed2:	e7fe      	b.n	8001ed2 <MX_USART2_UART_Init+0x42>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ed4:	4601      	mov	r1, r0
 8001ed6:	4620      	mov	r0, r4
 8001ed8:	f007 fd24 	bl	8009924 <HAL_UARTEx_SetRxFifoThreshold>
 8001edc:	b108      	cbz	r0, 8001ee2 <MX_USART2_UART_Init+0x52>
 8001ede:	b672      	cpsid	i
  while (1)
 8001ee0:	e7fe      	b.n	8001ee0 <MX_USART2_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001ee2:	4620      	mov	r0, r4
 8001ee4:	f007 fcbe 	bl	8009864 <HAL_UARTEx_DisableFifoMode>
 8001ee8:	b108      	cbz	r0, 8001eee <MX_USART2_UART_Init+0x5e>
 8001eea:	b672      	cpsid	i
  while (1)
 8001eec:	e7fe      	b.n	8001eec <MX_USART2_UART_Init+0x5c>
}
 8001eee:	bd10      	pop	{r4, pc}
 8001ef0:	200005ac 	.word	0x200005ac
 8001ef4:	20000670 	.word	0x20000670
 8001ef8:	40004400 	.word	0x40004400

08001efc <main>:
{
 8001efc:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	2500      	movs	r5, #0
{
 8001f02:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 8001f04:	f003 ff10 	bl	8005d28 <HAL_Init>
  SystemClock_Config();
 8001f08:	f7ff ff86 	bl	8001e18 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	e9cd 5517 	strd	r5, r5, [sp, #92]	@ 0x5c
 8001f10:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f14:	4eab      	ldr	r6, [pc, #684]	@ (80021c4 <main+0x2c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f16:	951b      	str	r5, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f18:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f1a:	48ab      	ldr	r0, [pc, #684]	@ (80021c8 <main+0x2cc>)
  hadc1.Instance = ADC1;
 8001f1c:	f8df 92dc 	ldr.w	r9, [pc, #732]	@ 80021fc <main+0x300>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f20:	f043 0304 	orr.w	r3, r3, #4
 8001f24:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001f26:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	9305      	str	r3, [sp, #20]
 8001f2e:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001f30:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f32:	f043 0320 	orr.w	r3, r3, #32
 8001f36:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001f38:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f3a:	f003 0320 	and.w	r3, r3, #32
 8001f3e:	9306      	str	r3, [sp, #24]
 8001f40:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001f4a:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	9307      	str	r3, [sp, #28]
 8001f52:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f56:	f043 0302 	orr.w	r3, r3, #2
 8001f5a:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001f5c:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001f5e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f62:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f64:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f66:	f244 0140 	movw	r1, #16448	@ 0x4040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f6a:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f6c:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001f6e:	f005 ff77 	bl	8007e60 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	f244 0340 	movw	r3, #16448	@ 0x4040
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f76:	4894      	ldr	r0, [pc, #592]	@ (80021c8 <main+0x2cc>)
 8001f78:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f7a:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f82:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f86:	f005 fcb7 	bl	80078f8 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f8a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001f8e:	488e      	ldr	r0, [pc, #568]	@ (80021c8 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f90:	9519      	str	r5, [sp, #100]	@ 0x64
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001f92:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f94:	e9cd 8317 	strd	r8, r3, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001f98:	f005 fcae 	bl	80078f8 <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001f9c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8001f9e:	f043 0304 	orr.w	r3, r3, #4
 8001fa2:	64b3      	str	r3, [r6, #72]	@ 0x48
 8001fa4:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8001fa6:	f003 0304 	and.w	r3, r3, #4
 8001faa:	9303      	str	r3, [sp, #12]
 8001fac:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fae:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8001fb0:	4323      	orrs	r3, r4
 8001fb2:	64b3      	str	r3, [r6, #72]	@ 0x48
 8001fb4:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 8001fb6:	950c      	str	r5, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb8:	4023      	ands	r3, r4
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001fba:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fbc:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001fbe:	223c      	movs	r2, #60	@ 0x3c
 8001fc0:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 8001fc2:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc6:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001fc8:	f009 fda2 	bl	800bb10 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001fcc:	2220      	movs	r2, #32
 8001fce:	4629      	mov	r1, r5
 8001fd0:	a80f      	add	r0, sp, #60	@ 0x3c
 8001fd2:	f009 fd9d 	bl	800bb10 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8001fd6:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fda:	e9c9 5501 	strd	r5, r5, [r9, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001fde:	e9c9 5404 	strd	r5, r4, [r9, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fe2:	e9c9 550b 	strd	r5, r5, [r9, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001fe6:	f8a9 501c 	strh.w	r5, [r9, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fea:	f889 5024 	strb.w	r5, [r9, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001fee:	f889 5038 	strb.w	r5, [r9, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001ff2:	f8c9 503c 	str.w	r5, [r9, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001ff6:	f889 5040 	strb.w	r5, [r9, #64]	@ 0x40
  hadc1.Instance = ADC1;
 8001ffa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ffe:	2504      	movs	r5, #4
  hadc1.Init.NbrOfConversion = 2;
 8002000:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002002:	4648      	mov	r0, r9
  hadc1.Instance = ADC1;
 8002004:	f8c9 2000 	str.w	r2, [r9]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8002008:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200c:	f8c9 5018 	str.w	r5, [r9, #24]
  hadc1.Init.NbrOfConversion = 2;
 8002010:	f8c9 6020 	str.w	r6, [r9, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002014:	f003 fec4 	bl	8005da0 <HAL_ADC_Init>
 8002018:	b108      	cbz	r0, 800201e <main+0x122>
 800201a:	b672      	cpsid	i
  while (1)
 800201c:	e7fe      	b.n	800201c <main+0x120>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800201e:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8002020:	a90c      	add	r1, sp, #48	@ 0x30
 8002022:	4648      	mov	r0, r9
 8002024:	f004 fd1e 	bl	8006a64 <HAL_ADCEx_MultiModeConfigChannel>
 8002028:	b108      	cbz	r0, 800202e <main+0x132>
 800202a:	b672      	cpsid	i
  while (1)
 800202c:	e7fe      	b.n	800202c <main+0x130>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800202e:	4b67      	ldr	r3, [pc, #412]	@ (80021cc <main+0x2d0>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8002030:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8002034:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 8002038:	e9cd 501b 	strd	r5, r0, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800203c:	e9cd 3b17 	strd	r3, fp, [sp, #92]	@ 0x5c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002040:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002044:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8002048:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800204c:	f04f 0a84 	mov.w	sl, #132	@ 0x84
 8002050:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002052:	a917      	add	r1, sp, #92	@ 0x5c
 8002054:	4648      	mov	r0, r9
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8002056:	e9cd a321 	strd	sl, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800205a:	9419      	str	r4, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 800205c:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 800205e:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002062:	f004 fa01 	bl	8006468 <HAL_ADCEx_InjectedConfigChannel>
 8002066:	b108      	cbz	r0, 800206c <main+0x170>
 8002068:	b672      	cpsid	i
  while (1)
 800206a:	e7fe      	b.n	800206a <main+0x16e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800206c:	4a58      	ldr	r2, [pc, #352]	@ (80021d0 <main+0x2d4>)
 800206e:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8002072:	a917      	add	r1, sp, #92	@ 0x5c
 8002074:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002076:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800207a:	f004 f9f5 	bl	8006468 <HAL_ADCEx_InjectedConfigChannel>
 800207e:	b108      	cbz	r0, 8002084 <main+0x188>
 8002080:	b672      	cpsid	i
  while (1)
 8002082:	e7fe      	b.n	8002082 <main+0x186>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002084:	f8df e178 	ldr.w	lr, [pc, #376]	@ 8002200 <main+0x304>
  sConfig.Offset = 0;
 8002088:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800208a:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800208c:	a90f      	add	r1, sp, #60	@ 0x3c
 800208e:	4648      	mov	r0, r9
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002090:	e9cd 5811 	strd	r5, r8, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002094:	e9cd e20f 	strd	lr, r2, [sp, #60]	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002098:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800209a:	f003 ff75 	bl	8005f88 <HAL_ADC_ConfigChannel>
 800209e:	b108      	cbz	r0, 80020a4 <main+0x1a8>
 80020a0:	b672      	cpsid	i
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <main+0x1a6>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020a4:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 8002204 <main+0x308>
 80020a8:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020aa:	a90f      	add	r1, sp, #60	@ 0x3c
 80020ac:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80020ae:	e9cd c30f 	strd	ip, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020b2:	f003 ff69 	bl	8005f88 <HAL_ADC_ConfigChannel>
 80020b6:	4601      	mov	r1, r0
 80020b8:	b108      	cbz	r0, 80020be <main+0x1c2>
 80020ba:	b672      	cpsid	i
  while (1)
 80020bc:	e7fe      	b.n	80020bc <main+0x1c0>
  hadc2.Instance = ADC2;
 80020be:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 8002208 <main+0x30c>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80020c2:	9001      	str	r0, [sp, #4]
 80020c4:	223c      	movs	r2, #60	@ 0x3c
 80020c6:	a817      	add	r0, sp, #92	@ 0x5c
 80020c8:	f009 fd22 	bl	800bb10 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80020cc:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80020ce:	4a41      	ldr	r2, [pc, #260]	@ (80021d4 <main+0x2d8>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80020d0:	f8c9 700c 	str.w	r7, [r9, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80020d4:	4648      	mov	r0, r9
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80020d6:	e9c9 1101 	strd	r1, r1, [r9, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020da:	e9c9 1404 	strd	r1, r4, [r9, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020de:	f8c9 5018 	str.w	r5, [r9, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80020e2:	f8a9 101c 	strh.w	r1, [r9, #28]
  hadc2.Init.NbrOfConversion = 1;
 80020e6:	f8c9 4020 	str.w	r4, [r9, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80020ea:	f889 1024 	strb.w	r1, [r9, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80020ee:	f889 1038 	strb.w	r1, [r9, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80020f2:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80020f6:	f889 1040 	strb.w	r1, [r9, #64]	@ 0x40
  hadc2.Instance = ADC2;
 80020fa:	f8c9 2000 	str.w	r2, [r9]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80020fe:	f003 fe4f 	bl	8005da0 <HAL_ADC_Init>
 8002102:	b108      	cbz	r0, 8002108 <main+0x20c>
 8002104:	b672      	cpsid	i
  while (1)
 8002106:	e7fe      	b.n	8002106 <main+0x20a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8002108:	4a33      	ldr	r2, [pc, #204]	@ (80021d8 <main+0x2dc>)
  sConfigInjected.InjectedOffset = 0;
 800210a:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800210c:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 800210e:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 8002112:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 8002116:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800211a:	a917      	add	r1, sp, #92	@ 0x5c
 800211c:	4648      	mov	r0, r9
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 800211e:	e9cd b418 	strd	fp, r4, [sp, #96]	@ 0x60
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8002122:	e9cd 851a 	strd	r8, r5, [sp, #104]	@ 0x68
  sConfigInjected.InjectedNbrOfConversion = 2;
 8002126:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8002128:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800212c:	9322      	str	r3, [sp, #136]	@ 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 800212e:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002130:	f004 f99a 	bl	8006468 <HAL_ADCEx_InjectedConfigChannel>
 8002134:	b108      	cbz	r0, 800213a <main+0x23e>
 8002136:	b672      	cpsid	i
  while (1)
 8002138:	e7fe      	b.n	8002138 <main+0x23c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <main+0x2d0>)
 800213c:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800213e:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002140:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002144:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8002146:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8002148:	f004 f98e 	bl	8006468 <HAL_ADCEx_InjectedConfigChannel>
 800214c:	4603      	mov	r3, r0
 800214e:	b108      	cbz	r0, 8002154 <main+0x258>
 8002150:	b672      	cpsid	i
  while (1)
 8002152:	e7fe      	b.n	8002152 <main+0x256>
  hcomp1.Instance = COMP1;
 8002154:	4821      	ldr	r0, [pc, #132]	@ (80021dc <main+0x2e0>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8002156:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800215a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800215e:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 8002160:	4b1f      	ldr	r3, [pc, #124]	@ (80021e0 <main+0x2e4>)
 8002162:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 8002164:	2340      	movs	r3, #64	@ 0x40
 8002166:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8002168:	f004 fce0 	bl	8006b2c <HAL_COMP_Init>
 800216c:	b108      	cbz	r0, 8002172 <main+0x276>
 800216e:	b672      	cpsid	i
  while (1)
 8002170:	e7fe      	b.n	8002170 <main+0x274>
  hcomp2.Instance = COMP2;
 8002172:	481c      	ldr	r0, [pc, #112]	@ (80021e4 <main+0x2e8>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8002174:	4e1c      	ldr	r6, [pc, #112]	@ (80021e8 <main+0x2ec>)
 8002176:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8002178:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800217a:	e9c0 6300 	strd	r6, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800217e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8002182:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8002186:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8002188:	f004 fcd0 	bl	8006b2c <HAL_COMP_Init>
 800218c:	4603      	mov	r3, r0
 800218e:	b108      	cbz	r0, 8002194 <main+0x298>
 8002190:	b672      	cpsid	i
  while (1)
 8002192:	e7fe      	b.n	8002192 <main+0x296>
  hcomp4.Instance = COMP4;
 8002194:	4815      	ldr	r0, [pc, #84]	@ (80021ec <main+0x2f0>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8002196:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800219a:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800219e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 80021a2:	4b13      	ldr	r3, [pc, #76]	@ (80021f0 <main+0x2f4>)
 80021a4:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 80021a6:	f004 fcc1 	bl	8006b2c <HAL_COMP_Init>
 80021aa:	b108      	cbz	r0, 80021b0 <main+0x2b4>
 80021ac:	b672      	cpsid	i
  while (1)
 80021ae:	e7fe      	b.n	80021ae <main+0x2b2>
  hcordic.Instance = CORDIC;
 80021b0:	4810      	ldr	r0, [pc, #64]	@ (80021f4 <main+0x2f8>)
 80021b2:	4b11      	ldr	r3, [pc, #68]	@ (80021f8 <main+0x2fc>)
 80021b4:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 80021b6:	f004 fd59 	bl	8006c6c <HAL_CORDIC_Init>
 80021ba:	4601      	mov	r1, r0
 80021bc:	b330      	cbz	r0, 800220c <main+0x310>
 80021be:	b672      	cpsid	i
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <main+0x2c4>
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	48000800 	.word	0x48000800
 80021cc:	0c900008 	.word	0x0c900008
 80021d0:	32601000 	.word	0x32601000
 80021d4:	50000100 	.word	0x50000100
 80021d8:	cb8c0000 	.word	0xcb8c0000
 80021dc:	200008ec 	.word	0x200008ec
 80021e0:	40010200 	.word	0x40010200
 80021e4:	200008c8 	.word	0x200008c8
 80021e8:	40010204 	.word	0x40010204
 80021ec:	200008a4 	.word	0x200008a4
 80021f0:	4001020c 	.word	0x4001020c
 80021f4:	2000087c 	.word	0x2000087c
 80021f8:	40020c00 	.word	0x40020c00
 80021fc:	2000097c 	.word	0x2000097c
 8002200:	04300002 	.word	0x04300002
 8002204:	14f00020 	.word	0x14f00020
 8002208:	20000910 	.word	0x20000910
  hdac3.Instance = DAC3;
 800220c:	4d9f      	ldr	r5, [pc, #636]	@ (800248c <main+0x590>)
  DAC_ChannelConfTypeDef sConfig = {0};
 800220e:	2230      	movs	r2, #48	@ 0x30
 8002210:	a817      	add	r0, sp, #92	@ 0x5c
 8002212:	f009 fc7d 	bl	800bb10 <memset>
  hdac3.Instance = DAC3;
 8002216:	4b9e      	ldr	r3, [pc, #632]	@ (8002490 <main+0x594>)
 8002218:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 800221a:	4628      	mov	r0, r5
 800221c:	f004 fdce 	bl	8006dbc <HAL_DAC_Init>
 8002220:	4602      	mov	r2, r0
 8002222:	b108      	cbz	r0, 8002228 <main+0x32c>
 8002224:	b672      	cpsid	i
  while (1)
 8002226:	e7fe      	b.n	8002226 <main+0x32a>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8002228:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800222a:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800222e:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8002232:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002234:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002236:	a917      	add	r1, sp, #92	@ 0x5c
 8002238:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 800223a:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 800223e:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002240:	f004 fdd2 	bl	8006de8 <HAL_DAC_ConfigChannel>
 8002244:	b108      	cbz	r0, 800224a <main+0x34e>
 8002246:	b672      	cpsid	i
  while (1)
 8002248:	e7fe      	b.n	8002248 <main+0x34c>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800224a:	4628      	mov	r0, r5
 800224c:	2210      	movs	r2, #16
 800224e:	a917      	add	r1, sp, #92	@ 0x5c
 8002250:	f004 fdca 	bl	8006de8 <HAL_DAC_ConfigChannel>
 8002254:	4603      	mov	r3, r0
 8002256:	b108      	cbz	r0, 800225c <main+0x360>
 8002258:	b672      	cpsid	i
  while (1)
 800225a:	e7fe      	b.n	800225a <main+0x35e>
  hopamp1.Instance = OPAMP1;
 800225c:	488d      	ldr	r0, [pc, #564]	@ (8002494 <main+0x598>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800225e:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8002262:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8002266:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8002268:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800226a:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800226c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800226e:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 8002272:	4b89      	ldr	r3, [pc, #548]	@ (8002498 <main+0x59c>)
 8002274:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002276:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800227a:	f005 fe01 	bl	8007e80 <HAL_OPAMP_Init>
 800227e:	4603      	mov	r3, r0
 8002280:	b108      	cbz	r0, 8002286 <main+0x38a>
 8002282:	b672      	cpsid	i
  while (1)
 8002284:	e7fe      	b.n	8002284 <main+0x388>
  hopamp2.Instance = OPAMP2;
 8002286:	4885      	ldr	r0, [pc, #532]	@ (800249c <main+0x5a0>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8002288:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800228c:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 800228e:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8002290:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8002292:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 8002294:	4b82      	ldr	r3, [pc, #520]	@ (80024a0 <main+0x5a4>)
 8002296:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8002298:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 800229c:	f005 fdf0 	bl	8007e80 <HAL_OPAMP_Init>
 80022a0:	4603      	mov	r3, r0
 80022a2:	b108      	cbz	r0, 80022a8 <main+0x3ac>
 80022a4:	b672      	cpsid	i
  while (1)
 80022a6:	e7fe      	b.n	80022a6 <main+0x3aa>
  hopamp3.Instance = OPAMP3;
 80022a8:	487e      	ldr	r0, [pc, #504]	@ (80024a4 <main+0x5a8>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80022aa:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 80022ae:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80022b0:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80022b2:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80022b4:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 80022b6:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 80022b8:	4b7b      	ldr	r3, [pc, #492]	@ (80024a8 <main+0x5ac>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80022ba:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 80022bc:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80022be:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80022c0:	f005 fdde 	bl	8007e80 <HAL_OPAMP_Init>
 80022c4:	4604      	mov	r4, r0
 80022c6:	b108      	cbz	r0, 80022cc <main+0x3d0>
 80022c8:	b672      	cpsid	i
  while (1)
 80022ca:	e7fe      	b.n	80022ca <main+0x3ce>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80022cc:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022d0:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80022d4:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80022d8:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 80022dc:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022e0:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80022e4:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022e6:	4601      	mov	r1, r0
 80022e8:	2234      	movs	r2, #52	@ 0x34
 80022ea:	a817      	add	r0, sp, #92	@ 0x5c
 80022ec:	f009 fc10 	bl	800bb10 <memset>
  htim1.Instance = TIM1;
 80022f0:	486e      	ldr	r0, [pc, #440]	@ (80024ac <main+0x5b0>)
 80022f2:	4b6f      	ldr	r3, [pc, #444]	@ (80024b0 <main+0x5b4>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80022f4:	6145      	str	r5, [r0, #20]
  htim1.Instance = TIM1;
 80022f6:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80022f8:	2520      	movs	r5, #32
 80022fa:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 80022fe:	e9c0 5302 	strd	r5, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8002302:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8002306:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002308:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800230a:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800230c:	f006 fc6a 	bl	8008be4 <HAL_TIM_PWM_Init>
 8002310:	b108      	cbz	r0, 8002316 <main+0x41a>
 8002312:	b672      	cpsid	i
  while (1)
 8002314:	e7fe      	b.n	8002314 <main+0x418>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8002316:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002318:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231a:	4864      	ldr	r0, [pc, #400]	@ (80024ac <main+0x5b0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 800231c:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800231e:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002320:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002324:	f006 fe04 	bl	8008f30 <HAL_TIMEx_MasterConfigSynchronization>
 8002328:	b108      	cbz	r0, 800232e <main+0x432>
 800232a:	b672      	cpsid	i
  while (1)
 800232c:	e7fe      	b.n	800232c <main+0x430>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800232e:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8002330:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8002332:	2602      	movs	r6, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002334:	485d      	ldr	r0, [pc, #372]	@ (80024ac <main+0x5b0>)
 8002336:	aa0c      	add	r2, sp, #48	@ 0x30
 8002338:	4629      	mov	r1, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800233a:	e9cd 650c 	strd	r6, r5, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800233e:	f006 fe97 	bl	8009070 <HAL_TIMEx_ConfigBreakInput>
 8002342:	b108      	cbz	r0, 8002348 <main+0x44c>
 8002344:	b672      	cpsid	i
  while (1)
 8002346:	e7fe      	b.n	8002346 <main+0x44a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8002348:	2704      	movs	r7, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800234a:	4858      	ldr	r0, [pc, #352]	@ (80024ac <main+0x5b0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 800234c:	970c      	str	r7, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800234e:	aa0c      	add	r2, sp, #48	@ 0x30
 8002350:	4629      	mov	r1, r5
 8002352:	f006 fe8d 	bl	8009070 <HAL_TIMEx_ConfigBreakInput>
 8002356:	b108      	cbz	r0, 800235c <main+0x460>
 8002358:	b672      	cpsid	i
  while (1)
 800235a:	e7fe      	b.n	800235a <main+0x45e>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800235c:	aa0c      	add	r2, sp, #48	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 800235e:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002360:	4852      	ldr	r0, [pc, #328]	@ (80024ac <main+0x5b0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8002362:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8002364:	4629      	mov	r1, r5
 8002366:	f006 fe83 	bl	8009070 <HAL_TIMEx_ConfigBreakInput>
 800236a:	4602      	mov	r2, r0
 800236c:	b108      	cbz	r0, 8002372 <main+0x476>
 800236e:	b672      	cpsid	i
  while (1)
 8002370:	e7fe      	b.n	8002370 <main+0x474>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002372:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002376:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800237a:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 800237c:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
 8002380:	2060      	movs	r0, #96	@ 0x60
 8002382:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002386:	a90f      	add	r1, sp, #60	@ 0x3c
 8002388:	4848      	ldr	r0, [pc, #288]	@ (80024ac <main+0x5b0>)
 800238a:	f006 fceb 	bl	8008d64 <HAL_TIM_PWM_ConfigChannel>
 800238e:	b108      	cbz	r0, 8002394 <main+0x498>
 8002390:	b672      	cpsid	i
  while (1)
 8002392:	e7fe      	b.n	8002392 <main+0x496>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002394:	4845      	ldr	r0, [pc, #276]	@ (80024ac <main+0x5b0>)
 8002396:	463a      	mov	r2, r7
 8002398:	a90f      	add	r1, sp, #60	@ 0x3c
 800239a:	f006 fce3 	bl	8008d64 <HAL_TIM_PWM_ConfigChannel>
 800239e:	b108      	cbz	r0, 80023a4 <main+0x4a8>
 80023a0:	b672      	cpsid	i
  while (1)
 80023a2:	e7fe      	b.n	80023a2 <main+0x4a6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80023a4:	4841      	ldr	r0, [pc, #260]	@ (80024ac <main+0x5b0>)
 80023a6:	2208      	movs	r2, #8
 80023a8:	a90f      	add	r1, sp, #60	@ 0x3c
 80023aa:	f006 fcdb 	bl	8008d64 <HAL_TIM_PWM_ConfigChannel>
 80023ae:	b108      	cbz	r0, 80023b4 <main+0x4b8>
 80023b0:	b672      	cpsid	i
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <main+0x4b6>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80023b4:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023b8:	483c      	ldr	r0, [pc, #240]	@ (80024ac <main+0x5b0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80023ba:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023bc:	a90f      	add	r1, sp, #60	@ 0x3c
 80023be:	220c      	movs	r2, #12
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80023c0:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80023c2:	f006 fccf 	bl	8008d64 <HAL_TIM_PWM_ConfigChannel>
 80023c6:	b108      	cbz	r0, 80023cc <main+0x4d0>
 80023c8:	b672      	cpsid	i
  while (1)
 80023ca:	e7fe      	b.n	80023ca <main+0x4ce>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80023cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80023d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023d4:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80023d8:	223f      	movs	r2, #63	@ 0x3f
 80023da:	e9cd 0219 	strd	r0, r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80023de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80023e2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023e6:	e9cd 121b 	strd	r1, r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80023ea:	e9cd 001e 	strd	r0, r0, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.BreakFilter = 3;
 80023ee:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80023f0:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80023f4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023f8:	482c      	ldr	r0, [pc, #176]	@ (80024ac <main+0x5b0>)
  sBreakDeadTimeConfig.BreakFilter = 3;
 80023fa:	921d      	str	r2, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80023fc:	a917      	add	r1, sp, #92	@ 0x5c
  sBreakDeadTimeConfig.Break2Filter = 3;
 80023fe:	9221      	str	r2, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8002400:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002402:	f006 fde7 	bl	8008fd4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002406:	4604      	mov	r4, r0
 8002408:	b108      	cbz	r0, 800240e <main+0x512>
 800240a:	b672      	cpsid	i
  while (1)
 800240c:	e7fe      	b.n	800240c <main+0x510>
  HAL_TIM_MspPostInit(&htim1);
 800240e:	4827      	ldr	r0, [pc, #156]	@ (80024ac <main+0x5b0>)
 8002410:	f003 fa20 	bl	8005854 <HAL_TIM_MspPostInit>
  MX_USART2_UART_Init();
 8002414:	f7ff fd3c 	bl	8001e90 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 8002418:	f001 f9b0 	bl	800377c <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 800241c:	4825      	ldr	r0, [pc, #148]	@ (80024b4 <main+0x5b8>)
 800241e:	4a26      	ldr	r2, [pc, #152]	@ (80024b8 <main+0x5bc>)
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8002420:	60c4      	str	r4, [r0, #12]
  hfdcan1.Init.NominalPrescaler = 68;
 8002422:	2344      	movs	r3, #68	@ 0x44
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8002424:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8002428:	e9c0 5606 	strd	r5, r6, [r0, #24]
  hfdcan1.Init.DataPrescaler = 1;
 800242c:	e9c0 6508 	strd	r6, r5, [r0, #32]
  hfdcan1.Init.DataTimeSeg1 = 1;
 8002430:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
  hfdcan1.Init.StdFiltersNbr = 0;
 8002434:	e9c0 540c 	strd	r5, r4, [r0, #48]	@ 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8002438:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800243c:	8204      	strh	r4, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 800243e:	7484      	strb	r4, [r0, #18]
  hfdcan1.Instance = FDCAN1;
 8002440:	6002      	str	r2, [r0, #0]
  hfdcan1.Init.NominalPrescaler = 68;
 8002442:	6143      	str	r3, [r0, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8002444:	f004 fec6 	bl	80071d4 <HAL_FDCAN_Init>
 8002448:	b108      	cbz	r0, 800244e <main+0x552>
 800244a:	b672      	cpsid	i
  while (1)
 800244c:	e7fe      	b.n	800244c <main+0x550>
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 800244e:	2300      	movs	r3, #0
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8002450:	2602      	movs	r6, #2
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8002452:	2501      	movs	r5, #1
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8002454:	4817      	ldr	r0, [pc, #92]	@ (80024b4 <main+0x5b8>)
 8002456:	a917      	add	r1, sp, #92	@ 0x5c
  sFilterConfig.FilterIndex = 0;
 8002458:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800245c:	e9cd 6519 	strd	r6, r5, [sp, #100]	@ 0x64
  sFilterConfig.FilterID2 = 0x000;
 8002460:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8002464:	f004 ffa4 	bl	80073b0 <HAL_FDCAN_ConfigFilter>
 8002468:	b108      	cbz	r0, 800246e <main+0x572>
 800246a:	b672      	cpsid	i
  while (1)
 800246c:	e7fe      	b.n	800246c <main+0x570>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 800246e:	4811      	ldr	r0, [pc, #68]	@ (80024b4 <main+0x5b8>)
 8002470:	f004 ffca 	bl	8007408 <HAL_FDCAN_Start>
 8002474:	4602      	mov	r2, r0
 8002476:	b108      	cbz	r0, 800247c <main+0x580>
 8002478:	b672      	cpsid	i
  while (1)
 800247a:	e7fe      	b.n	800247a <main+0x57e>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 800247c:	480d      	ldr	r0, [pc, #52]	@ (80024b4 <main+0x5b8>)
 800247e:	4629      	mov	r1, r5
 8002480:	f005 f8e6 	bl	8007650 <HAL_FDCAN_ActivateNotification>
 8002484:	4604      	mov	r4, r0
 8002486:	b1c8      	cbz	r0, 80024bc <main+0x5c0>
 8002488:	b672      	cpsid	i
  while (1)
 800248a:	e7fe      	b.n	800248a <main+0x58e>
 800248c:	20000868 	.word	0x20000868
 8002490:	50001000 	.word	0x50001000
 8002494:	200007c8 	.word	0x200007c8
 8002498:	40010300 	.word	0x40010300
 800249c:	2000078c 	.word	0x2000078c
 80024a0:	40010304 	.word	0x40010304
 80024a4:	20000750 	.word	0x20000750
 80024a8:	40010308 	.word	0x40010308
 80024ac:	20000704 	.word	0x20000704
 80024b0:	40012c00 	.word	0x40012c00
 80024b4:	20000804 	.word	0x20000804
 80024b8:	40006400 	.word	0x40006400
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80024bc:	462a      	mov	r2, r5
 80024be:	2103      	movs	r1, #3
 80024c0:	2026      	movs	r0, #38	@ 0x26
 80024c2:	f004 fbff 	bl	8006cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80024c6:	2026      	movs	r0, #38	@ 0x26
 80024c8:	f004 fc38 	bl	8006d3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80024cc:	4622      	mov	r2, r4
 80024ce:	2103      	movs	r1, #3
 80024d0:	200b      	movs	r0, #11
 80024d2:	f004 fbf7 	bl	8006cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80024d6:	200b      	movs	r0, #11
 80024d8:	f004 fc30 	bl	8006d3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 80024dc:	462a      	mov	r2, r5
 80024de:	2104      	movs	r1, #4
 80024e0:	2018      	movs	r0, #24
 80024e2:	f004 fbef 	bl	8006cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80024e6:	2018      	movs	r0, #24
 80024e8:	f004 fc28 	bl	8006d3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80024ec:	4622      	mov	r2, r4
 80024ee:	4621      	mov	r1, r4
 80024f0:	2019      	movs	r0, #25
 80024f2:	f004 fbe7 	bl	8006cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80024f6:	2019      	movs	r0, #25
 80024f8:	f004 fc20 	bl	8006d3c <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 80024fc:	4631      	mov	r1, r6
 80024fe:	4622      	mov	r2, r4
 8002500:	2012      	movs	r0, #18
 8002502:	f004 fbdf 	bl	8006cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002506:	2012      	movs	r0, #18
 8002508:	f004 fc18 	bl	8006d3c <HAL_NVIC_EnableIRQ>
	if (ESC_ID == RF_CAN_ID || ESC_ID == LB_CAN_ID){
 800250c:	4e22      	ldr	r6, [pc, #136]	@ (8002598 <main+0x69c>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 800250e:	4622      	mov	r2, r4
 8002510:	2103      	movs	r1, #3
 8002512:	2028      	movs	r0, #40	@ 0x28
 8002514:	f004 fbd6 	bl	8006cc4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002518:	2028      	movs	r0, #40	@ 0x28
 800251a:	f004 fc0f 	bl	8006d3c <HAL_NVIC_EnableIRQ>
	if (ESC_ID == RF_CAN_ID || ESC_ID == LB_CAN_ID){
 800251e:	6833      	ldr	r3, [r6, #0]
 8002520:	f033 0302 	bics.w	r3, r3, #2
 8002524:	d02e      	beq.n	8002584 <main+0x688>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8002526:	481d      	ldr	r0, [pc, #116]	@ (800259c <main+0x6a0>)
 8002528:	4622      	mov	r2, r4
 800252a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800252e:	f005 fc97 	bl	8007e60 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8002532:	2200      	movs	r2, #0
 8002534:	2140      	movs	r1, #64	@ 0x40
 8002536:	4819      	ldr	r0, [pc, #100]	@ (800259c <main+0x6a0>)
 8002538:	4d19      	ldr	r5, [pc, #100]	@ (80025a0 <main+0x6a4>)
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800253a:	4c18      	ldr	r4, [pc, #96]	@ (800259c <main+0x6a0>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 800253c:	f005 fc90 	bl	8007e60 <HAL_GPIO_WritePin>
     uart_debug_print("UART is initialized and ready to go\r\n");
 8002540:	4818      	ldr	r0, [pc, #96]	@ (80025a4 <main+0x6a8>)
 8002542:	f003 faed 	bl	8005b20 <uart_debug_print>
	 uart_debug_print("ESC ID is set to: %d\r\n", (int)ESC_ID);
 8002546:	4818      	ldr	r0, [pc, #96]	@ (80025a8 <main+0x6ac>)
 8002548:	6831      	ldr	r1, [r6, #0]
 800254a:	f003 fae9 	bl	8005b20 <uart_debug_print>
	 if (received_CAN_command){
 800254e:	782b      	ldrb	r3, [r5, #0]
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0fc      	beq.n	800254e <main+0x652>
	     received_CAN_command = false;
 8002554:	2300      	movs	r3, #0
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002556:	2140      	movs	r1, #64	@ 0x40
 8002558:	4620      	mov	r0, r4
	     received_CAN_command = false;
 800255a:	702b      	strb	r3, [r5, #0]
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 800255c:	f005 fc86 	bl	8007e6c <HAL_GPIO_TogglePin>
	     HAL_Delay(5);
 8002560:	2005      	movs	r0, #5
 8002562:	f003 fc0b 	bl	8005d7c <HAL_Delay>
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8002566:	2140      	movs	r1, #64	@ 0x40
 8002568:	4620      	mov	r0, r4
 800256a:	f005 fc7f 	bl	8007e6c <HAL_GPIO_TogglePin>
	     HAL_Delay(5);
 800256e:	2005      	movs	r0, #5
 8002570:	f003 fc04 	bl	8005d7c <HAL_Delay>
	 	 uart_debug_print("---------->>>>>>Received CAN command<<<<<<-----------\r\n");
 8002574:	480d      	ldr	r0, [pc, #52]	@ (80025ac <main+0x6b0>)
 8002576:	f003 fad3 	bl	8005b20 <uart_debug_print>
	     CAN_Parse_MSG(&rxHeader, rxData);
 800257a:	490d      	ldr	r1, [pc, #52]	@ (80025b0 <main+0x6b4>)
 800257c:	480d      	ldr	r0, [pc, #52]	@ (80025b4 <main+0x6b8>)
 800257e:	f7ff f871 	bl	8001664 <CAN_Parse_MSG>
 8002582:	e7e4      	b.n	800254e <main+0x652>
	     uart_debug_print("EnableTermination\r\n");
 8002584:	480c      	ldr	r0, [pc, #48]	@ (80025b8 <main+0x6bc>)
 8002586:	f003 facb 	bl	8005b20 <uart_debug_print>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 800258a:	4804      	ldr	r0, [pc, #16]	@ (800259c <main+0x6a0>)
 800258c:	462a      	mov	r2, r5
 800258e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002592:	f005 fc65 	bl	8007e60 <HAL_GPIO_WritePin>
 8002596:	e7cc      	b.n	8002532 <main+0x636>
 8002598:	200005a8 	.word	0x200005a8
 800259c:	48000800 	.word	0x48000800
 80025a0:	200005a4 	.word	0x200005a4
 80025a4:	0800c9d4 	.word	0x0800c9d4
 80025a8:	0800c9fc 	.word	0x0800c9fc
 80025ac:	0800ca14 	.word	0x0800ca14
 80025b0:	20000574 	.word	0x20000574
 80025b4:	2000057c 	.word	0x2000057c
 80025b8:	0800c9c0 	.word	0x0800c9c0

080025bc <Error_Handler>:
 80025bc:	b672      	cpsid	i
  while (1)
 80025be:	e7fe      	b.n	80025be <Error_Handler+0x2>

080025c0 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 80025c0:	4b01      	ldr	r3, [pc, #4]	@ (80025c8 <MC_StartMotor1+0x8>)
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	f000 b8bc 	b.w	8002740 <MCI_StartMotor>
 80025c8:	20001bb8 	.word	0x20001bb8

080025cc <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 80025cc:	4b01      	ldr	r3, [pc, #4]	@ (80025d4 <MC_StopMotor1+0x8>)
 80025ce:	6818      	ldr	r0, [r3, #0]
 80025d0:	f000 b8cc 	b.w	800276c <MCI_StopMotor>
 80025d4:	20001bb8 	.word	0x20001bb8

080025d8 <MC_ProgramSpeedRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
{
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 80025d8:	4b02      	ldr	r3, [pc, #8]	@ (80025e4 <MC_ProgramSpeedRampMotor1_F+0xc>)
{
 80025da:	4601      	mov	r1, r0
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	f000 b83d 	b.w	800265c <MCI_ExecSpeedRamp_F>
 80025e2:	bf00      	nop
 80025e4:	20001bb8 	.word	0x20001bb8

080025e8 <MC_GetMecSpeedReferenceMotor1_F>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
{
  return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 80025e8:	4b01      	ldr	r3, [pc, #4]	@ (80025f0 <MC_GetMecSpeedReferenceMotor1_F+0x8>)
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	f000 b93e 	b.w	800286c <MCI_GetMecSpeedRef_F>
 80025f0:	20001bb8 	.word	0x20001bb8

080025f4 <MC_GetAverageMecSpeedMotor1_F>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetAverageMecSpeedMotor1_F(void)
{
  return (MCI_GetAvrgMecSpeed_F(pMCI[M1]));
 80025f4:	4b01      	ldr	r3, [pc, #4]	@ (80025fc <MC_GetAverageMecSpeedMotor1_F+0x8>)
 80025f6:	6818      	ldr	r0, [r3, #0]
 80025f8:	f000 b926 	b.w	8002848 <MCI_GetAvrgMecSpeed_F>
 80025fc:	20001bb8 	.word	0x20001bb8

08002600 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
  return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 8002600:	4b01      	ldr	r3, [pc, #4]	@ (8002608 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f000 b980 	b.w	8002908 <MCI_GetPhaseCurrentAmplitude>
 8002608:	20001bb8 	.word	0x20001bb8

0800260c <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
  return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 800260c:	4b01      	ldr	r3, [pc, #4]	@ (8002614 <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 800260e:	6818      	ldr	r0, [r3, #0]
 8002610:	f000 b992 	b.w	8002938 <MCI_GetPhaseVoltageAmplitude>
 8002614:	20001bb8 	.word	0x20001bb8

08002618 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8002618:	4b01      	ldr	r3, [pc, #4]	@ (8002620 <MC_AcknowledgeFaultMotor1+0x8>)
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	f000 b8c2 	b.w	80027a4 <MCI_FaultAcknowledged>
 8002620:	20001bb8 	.word	0x20001bb8

08002624 <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 8002624:	4b01      	ldr	r3, [pc, #4]	@ (800262c <MC_GetOccurredFaultsMotor1+0x8>)
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f000 b886 	b.w	8002738 <MCI_GetOccurredFaults>
 800262c:	20001bb8 	.word	0x20001bb8

08002630 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8002630:	4b01      	ldr	r3, [pc, #4]	@ (8002638 <MC_GetSTMStateMotor1+0x8>)
 8002632:	6818      	ldr	r0, [r3, #0]
 8002634:	f000 b87e 	b.w	8002734 <MCI_GetSTMState>
 8002638:	20001bb8 	.word	0x20001bb8

0800263c <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 800263c:	2002      	movs	r0, #2
 800263e:	4770      	bx	lr

08002640 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop

08002644 <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop

08002648 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002648:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800264c:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8002650:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8002654:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8002656:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002658:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800265a:	4770      	bx	lr

0800265c <MCI_ExecSpeedRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
 800265c:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8002678 <MCI_ExecSpeedRamp_F+0x1c>
 8002660:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8002664:	b508      	push	{r3, lr}
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8002666:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 800266a:	460a      	mov	r2, r1
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 800266c:	ee10 3a10 	vmov	r3, s0
 8002670:	b219      	sxth	r1, r3
 8002672:	f7ff ffe9 	bl	8002648 <MCI_ExecSpeedRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002676:	bd08      	pop	{r3, pc}
 8002678:	3e2aaaab 	.word	0x3e2aaaab

0800267c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800267c:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002680:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8002684:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8002688:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800268a:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800268c:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800268e:	4770      	bx	lr

08002690 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8002690:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002692:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002694:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8002698:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 800269a:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800269e:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80026a0:	b002      	add	sp, #8
 80026a2:	4770      	bx	lr

080026a4 <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80026a4:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80026a6:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80026aa:	430b      	orrs	r3, r1
 80026ac:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 80026b0:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80026b4:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 80026b6:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop

080026bc <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80026bc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d000      	beq.n	80026c6 <MCI_ExecBufferedCommands+0xa>
 80026c4:	4770      	bx	lr
{
 80026c6:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80026c8:	7b02      	ldrb	r2, [r0, #12]
 80026ca:	2a02      	cmp	r2, #2
 80026cc:	4604      	mov	r4, r0
 80026ce:	d021      	beq.n	8002714 <MCI_ExecBufferedCommands+0x58>
 80026d0:	2a03      	cmp	r2, #3
 80026d2:	d014      	beq.n	80026fe <MCI_ExecBufferedCommands+0x42>
 80026d4:	2a01      	cmp	r2, #1
 80026d6:	d119      	bne.n	800270c <MCI_ExecBufferedCommands+0x50>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80026d8:	6843      	ldr	r3, [r0, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80026e0:	6800      	ldr	r0, [r0, #0]
 80026e2:	2103      	movs	r1, #3
 80026e4:	f008 fd7a 	bl	800b1dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80026e8:	8ba2      	ldrh	r2, [r4, #28]
 80026ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80026ee:	6820      	ldr	r0, [r4, #0]
 80026f0:	f008 fd78 	bl	800b1e4 <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 80026f4:	b150      	cbz	r0, 800270c <MCI_ExecBufferedCommands+0x50>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 80026f6:	2302      	movs	r3, #2
 80026f8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 80026fc:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80026fe:	6842      	ldr	r2, [r0, #4]
 8002700:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8002704:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8002708:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 800270a:	e7f4      	b.n	80026f6 <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 800270c:	2303      	movs	r3, #3
 800270e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8002712:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8002714:	6843      	ldr	r3, [r0, #4]
 8002716:	2200      	movs	r2, #0
 8002718:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 800271c:	6800      	ldr	r0, [r0, #0]
 800271e:	2104      	movs	r1, #4
 8002720:	f008 fd5c 	bl	800b1dc <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8002724:	8ba2      	ldrh	r2, [r4, #28]
 8002726:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 800272a:	6820      	ldr	r0, [r4, #0]
 800272c:	f008 fd5a 	bl	800b1e4 <STC_ExecRamp>
          break;
 8002730:	e7e0      	b.n	80026f4 <MCI_ExecBufferedCommands+0x38>
 8002732:	bf00      	nop

08002734 <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8002734:	7fc0      	ldrb	r0, [r0, #31]
 8002736:	4770      	bx	lr

08002738 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8002738:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 800273a:	4770      	bx	lr

0800273c <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 800273c:	8c00      	ldrh	r0, [r0, #32]
 800273e:	4770      	bx	lr

08002740 <MCI_StartMotor>:
{
 8002740:	b510      	push	{r4, lr}
 8002742:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8002744:	f7ff fff6 	bl	8002734 <MCI_GetSTMState>
 8002748:	b108      	cbz	r0, 800274e <MCI_StartMotor+0xe>
  bool retVal = false;
 800274a:	2000      	movs	r0, #0
}
 800274c:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800274e:	4620      	mov	r0, r4
 8002750:	f7ff fff2 	bl	8002738 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8002754:	2800      	cmp	r0, #0
 8002756:	d1f8      	bne.n	800274a <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8002758:	4620      	mov	r0, r4
 800275a:	f7ff ffef 	bl	800273c <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800275e:	2800      	cmp	r0, #0
 8002760:	d1f3      	bne.n	800274a <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8002762:	2001      	movs	r0, #1
 8002764:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8002766:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 800276a:	bd10      	pop	{r4, pc}

0800276c <MCI_StopMotor>:
{
 800276c:	b538      	push	{r3, r4, r5, lr}
 800276e:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8002770:	f7ff ffe0 	bl	8002734 <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8002774:	4604      	mov	r4, r0
 8002776:	b118      	cbz	r0, 8002780 <MCI_StopMotor+0x14>
 8002778:	f1b0 040c 	subs.w	r4, r0, #12
 800277c:	bf18      	it	ne
 800277e:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002780:	4628      	mov	r0, r5
 8002782:	f7ff ffd9 	bl	8002738 <MCI_GetOccurredFaults>
 8002786:	b110      	cbz	r0, 800278e <MCI_StopMotor+0x22>
  bool retVal = false;
 8002788:	2400      	movs	r4, #0
}
 800278a:	4620      	mov	r0, r4
 800278c:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 800278e:	4628      	mov	r0, r5
 8002790:	f7ff ffd4 	bl	800273c <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8002794:	2800      	cmp	r0, #0
 8002796:	d1f7      	bne.n	8002788 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8002798:	2c00      	cmp	r4, #0
 800279a:	d0f5      	beq.n	8002788 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 800279c:	2305      	movs	r3, #5
 800279e:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 80027a0:	e7f3      	b.n	800278a <MCI_StopMotor+0x1e>
 80027a2:	bf00      	nop

080027a4 <MCI_FaultAcknowledged>:
{
 80027a4:	b510      	push	{r4, lr}
 80027a6:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80027a8:	f7ff ffc4 	bl	8002734 <MCI_GetSTMState>
 80027ac:	280b      	cmp	r0, #11
 80027ae:	d001      	beq.n	80027b4 <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 80027b0:	2000      	movs	r0, #0
}
 80027b2:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff ffc1 	bl	800273c <MCI_GetCurrentFaults>
 80027ba:	2800      	cmp	r0, #0
 80027bc:	d1f8      	bne.n	80027b0 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 80027be:	2302      	movs	r3, #2
 80027c0:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 80027c2:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 80027c4:	2001      	movs	r0, #1
}
 80027c6:	bd10      	pop	{r4, pc}

080027c8 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80027c8:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80027ca:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 80027cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop

080027d4 <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80027d4:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop

080027dc <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80027dc:	7b03      	ldrb	r3, [r0, #12]
 80027de:	2b02      	cmp	r3, #2
 80027e0:	d013      	beq.n	800280a <MCI_GetImposedMotorDirection+0x2e>
 80027e2:	2b03      	cmp	r3, #3
 80027e4:	d009      	beq.n	80027fa <MCI_GetImposedMotorDirection+0x1e>
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d117      	bne.n	800281a <MCI_GetImposedMotorDirection+0x3e>
    {
      case MCI_CMD_EXECSPEEDRAMP:
      {
        if (pHandle->hFinalSpeed < 0)
 80027ea:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  int16_t retVal = 1;
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	bfb4      	ite	lt
 80027f2:	f04f 30ff 	movlt.w	r0, #4294967295
 80027f6:	2001      	movge	r0, #1
 80027f8:	4770      	bx	lr
        break;
      }

      case MCI_CMD_SETCURRENTREFERENCES:
      {
        if (pHandle->Iqdref.q < 0)
 80027fa:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  int16_t retVal = 1;
 80027fe:	2b00      	cmp	r3, #0
 8002800:	bfb4      	ite	lt
 8002802:	f04f 30ff 	movlt.w	r0, #4294967295
 8002806:	2001      	movge	r0, #1
 8002808:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 800280a:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  int16_t retVal = 1;
 800280e:	2b00      	cmp	r3, #0
 8002810:	bfb4      	ite	lt
 8002812:	f04f 30ff 	movlt.w	r0, #4294967295
 8002816:	2001      	movge	r0, #1
 8002818:	4770      	bx	lr
 800281a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop

08002820 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8002820:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop

08002828 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8002828:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop

08002830 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8002830:	8b80      	ldrh	r0, [r0, #28]
 8002832:	4770      	bx	lr

08002834 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8002834:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 800283a:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop

08002840 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8002840:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8002842:	6958      	ldr	r0, [r3, #20]
 8002844:	f008 bc62 	b.w	800b10c <SPD_GetAvrgMecSpeedUnit>

08002848 <MCI_GetAvrgMecSpeed_F>:
  * @brief  Returns the last computed average mechanical speed, expressed in rpm
  *         and related to the sensor actually used by FOC algorithm.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak float_t MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
{
 8002848:	b508      	push	{r3, lr}
 800284a:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)SPEED_UNIT);
 800284c:	6958      	ldr	r0, [r3, #20]
 800284e:	f008 fc5d 	bl	800b10c <SPD_GetAvrgMecSpeedUnit>
 8002852:	ee07 0a90 	vmov	s15, r0
 8002856:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800285a:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (returnAvrgSpeed);
}
 800285e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002862:	bd08      	pop	{r3, pc}

08002864 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8002864:	6800      	ldr	r0, [r0, #0]
 8002866:	f008 bcb5 	b.w	800b1d4 <STC_GetMecSpeedRefUnit>
 800286a:	bf00      	nop

0800286c <MCI_GetMecSpeedRef_F>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
{
 800286c:	b508      	push	{r3, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0.0f :
          (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
#else
  return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
 800286e:	6800      	ldr	r0, [r0, #0]
 8002870:	f008 fcb0 	bl	800b1d4 <STC_GetMecSpeedRefUnit>
 8002874:	ee07 0a90 	vmov	s15, r0
 8002878:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800287c:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#endif
}
 8002880:	ee27 0a80 	vmul.f32	s0, s15, s0
 8002884:	bd08      	pop	{r3, pc}
 8002886:	bf00      	nop

08002888 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8002888:	6843      	ldr	r3, [r0, #4]
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	b283      	uxth	r3, r0
 800288e:	f36f 000f 	bfc	r0, #0, #16
{
 8002892:	b082      	sub	sp, #8
#endif
}
 8002894:	4318      	orrs	r0, r3
 8002896:	b002      	add	sp, #8
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop

0800289c <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 800289c:	6843      	ldr	r3, [r0, #4]
 800289e:	6858      	ldr	r0, [r3, #4]
 80028a0:	b283      	uxth	r3, r0
 80028a2:	f36f 000f 	bfc	r0, #0, #16
{
 80028a6:	b082      	sub	sp, #8
#endif
}
 80028a8:	4318      	orrs	r0, r3
 80028aa:	b002      	add	sp, #8
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop

080028b0 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80028b0:	6843      	ldr	r3, [r0, #4]
 80028b2:	68d8      	ldr	r0, [r3, #12]
 80028b4:	b283      	uxth	r3, r0
 80028b6:	f36f 000f 	bfc	r0, #0, #16
{
 80028ba:	b082      	sub	sp, #8
#endif
}
 80028bc:	4318      	orrs	r0, r3
 80028be:	b002      	add	sp, #8
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop

080028c4 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80028c4:	6843      	ldr	r3, [r0, #4]
 80028c6:	6918      	ldr	r0, [r3, #16]
 80028c8:	b283      	uxth	r3, r0
 80028ca:	f36f 000f 	bfc	r0, #0, #16
{
 80028ce:	b082      	sub	sp, #8
#endif
}
 80028d0:	4318      	orrs	r0, r3
 80028d2:	b002      	add	sp, #8
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop

080028d8 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80028d8:	6843      	ldr	r3, [r0, #4]
 80028da:	f8d3 0016 	ldr.w	r0, [r3, #22]
 80028de:	b283      	uxth	r3, r0
 80028e0:	f36f 000f 	bfc	r0, #0, #16
{
 80028e4:	b082      	sub	sp, #8
#endif
}
 80028e6:	4318      	orrs	r0, r3
 80028e8:	b002      	add	sp, #8
 80028ea:	4770      	bx	lr

080028ec <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80028ec:	6843      	ldr	r3, [r0, #4]
 80028ee:	f8d3 001a 	ldr.w	r0, [r3, #26]
 80028f2:	b283      	uxth	r3, r0
 80028f4:	f36f 000f 	bfc	r0, #0, #16
{
 80028f8:	b082      	sub	sp, #8
#endif
}
 80028fa:	4318      	orrs	r0, r3
 80028fc:	b002      	add	sp, #8
 80028fe:	4770      	bx	lr

08002900 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8002900:	6843      	ldr	r3, [r0, #4]
#endif
}
 8002902:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8002906:	4770      	bx	lr

08002908 <MCI_GetPhaseCurrentAmplitude>:
    wAux = 0;
  }
  else
  {
#endif
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8002908:	6842      	ldr	r2, [r0, #4]
 800290a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 800290e:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8002912:	b672      	cpsid	i
static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
{
  uint32_t temp_val;
  __disable_irq();
  /* Configure and call to CORDIC- */
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 8002914:	4a06      	ldr	r2, [pc, #24]	@ (8002930 <MCI_GetPhaseCurrentAmplitude+0x28>)
 8002916:	4907      	ldr	r1, [pc, #28]	@ (8002934 <MCI_GetPhaseCurrentAmplitude+0x2c>)
 8002918:	6011      	str	r1, [r2, #0]
  LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (uint32_t)alpha));
 800291a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 800291e:	6053      	str	r3, [r2, #4]
  return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 8002920:	6813      	ldr	r3, [r2, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	dafc      	bge.n	8002920 <MCI_GetPhaseCurrentAmplitude+0x18>
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002926:	6890      	ldr	r0, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8002928:	b662      	cpsie	i
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif

  return (wAux);
}
 800292a:	b200      	sxth	r0, r0
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	40020c00 	.word	0x40020c00
 8002934:	00600063 	.word	0x00600063

08002938 <MCI_GetPhaseVoltageAmplitude>:
#endif
    alphabeta_t Local_Voltage;
    int32_t wAux1;
    int32_t wAux2;

    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8002938:	6842      	ldr	r2, [r0, #4]
{
 800293a:	b508      	push	{r3, lr}
    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 800293c:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8002940:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
    wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
    wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 8002944:	fb03 f303 	mul.w	r3, r3, r3

    wAux1 += wAux2;
    wAux1 = MCM_Sqrt(wAux1);
 8002948:	fb00 3000 	mla	r0, r0, r0, r3
 800294c:	f000 f8ac 	bl	8002aa8 <MCM_Sqrt>

    if (wAux1 > INT16_MAX)
 8002950:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8002954:	4298      	cmp	r0, r3
 8002956:	bfa8      	it	ge
 8002958:	4618      	movge	r0, r3
    temp_wAux = (int16_t)wAux1;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_wAux);
}
 800295a:	b200      	sxth	r0, r0
 800295c:	bd08      	pop	{r3, pc}
 800295e:	bf00      	nop

08002960 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8002960:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8002962:	e9d0 0400 	ldrd	r0, r4, [r0]
 8002966:	f008 fcbf 	bl	800b2e8 <STC_GetDefaultIqdref>
 800296a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800296e:	8220      	strh	r0, [r4, #16]
 8002970:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8002972:	bd10      	pop	{r4, pc}

08002974 <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8002974:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002978:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800297c:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8002980:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8002984:	fb10 f202 	smulbb	r2, r0, r2
 8002988:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 800298c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8002990:	b084      	sub	sp, #16
 8002992:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8002994:	da05      	bge.n	80029a2 <MCM_Clarke+0x2e>
 8002996:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8002998:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 800299c:	da0c      	bge.n	80029b8 <MCM_Clarke+0x44>
 800299e:	4a09      	ldr	r2, [pc, #36]	@ (80029c4 <MCM_Clarke+0x50>)
 80029a0:	e001      	b.n	80029a6 <MCM_Clarke+0x32>
 80029a2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2000      	movs	r0, #0
 80029aa:	f363 000f 	bfi	r0, r3, #0, #16
 80029ae:	b293      	uxth	r3, r2
 80029b0:	f363 401f 	bfi	r0, r3, #16, #16
}
 80029b4:	b004      	add	sp, #16
 80029b6:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80029b8:	4802      	ldr	r0, [pc, #8]	@ (80029c4 <MCM_Clarke+0x50>)
 80029ba:	b20a      	sxth	r2, r1
 80029bc:	4282      	cmp	r2, r0
 80029be:	bfb8      	it	lt
 80029c0:	4602      	movlt	r2, r0
 80029c2:	e7f0      	b.n	80029a6 <MCM_Clarke+0x32>
 80029c4:	ffff8001 	.word	0xffff8001

080029c8 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80029c8:	4b06      	ldr	r3, [pc, #24]	@ (80029e4 <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 80029ca:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80029ce:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 80029d2:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 80029d6:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 80029d8:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 80029da:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80029dc:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 80029de:	b002      	add	sp, #8
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	40020c00 	.word	0x40020c00

080029e8 <MCM_Park>:
{
 80029e8:	b530      	push	{r4, r5, lr}
 80029ea:	4605      	mov	r5, r0
 80029ec:	4604      	mov	r4, r0
 80029ee:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80029f0:	4608      	mov	r0, r1
 80029f2:	f7ff ffe9 	bl	80029c8 <MCM_Trig_Functions>
 80029f6:	b22d      	sxth	r5, r5
 80029f8:	b201      	sxth	r1, r0
 80029fa:	1424      	asrs	r4, r4, #16
 80029fc:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80029fe:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a02:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8002a06:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a0a:	da05      	bge.n	8002a18 <MCM_Park+0x30>
 8002a0c:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8002a0e:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8002a12:	da22      	bge.n	8002a5a <MCM_Park+0x72>
 8002a14:	4a14      	ldr	r2, [pc, #80]	@ (8002a68 <MCM_Park+0x80>)
 8002a16:	e001      	b.n	8002a1c <MCM_Park+0x34>
 8002a18:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002a1c:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a20:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 8002a24:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002a28:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8002a2c:	da04      	bge.n	8002a38 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8002a2e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8002a32:	da0c      	bge.n	8002a4e <MCM_Park+0x66>
 8002a34:	4b0c      	ldr	r3, [pc, #48]	@ (8002a68 <MCM_Park+0x80>)
 8002a36:	e001      	b.n	8002a3c <MCM_Park+0x54>
 8002a38:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8002a3c:	b292      	uxth	r2, r2
 8002a3e:	2000      	movs	r0, #0
 8002a40:	f362 000f 	bfi	r0, r2, #0, #16
 8002a44:	b29b      	uxth	r3, r3
 8002a46:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002a4a:	b005      	add	sp, #20
 8002a4c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a4e:	4906      	ldr	r1, [pc, #24]	@ (8002a68 <MCM_Park+0x80>)
 8002a50:	b21b      	sxth	r3, r3
 8002a52:	428b      	cmp	r3, r1
 8002a54:	bfb8      	it	lt
 8002a56:	460b      	movlt	r3, r1
 8002a58:	e7f0      	b.n	8002a3c <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002a5a:	4b03      	ldr	r3, [pc, #12]	@ (8002a68 <MCM_Park+0x80>)
 8002a5c:	b212      	sxth	r2, r2
 8002a5e:	429a      	cmp	r2, r3
 8002a60:	bfb8      	it	lt
 8002a62:	461a      	movlt	r2, r3
 8002a64:	e7da      	b.n	8002a1c <MCM_Park+0x34>
 8002a66:	bf00      	nop
 8002a68:	ffff8001 	.word	0xffff8001

08002a6c <MCM_Rev_Park>:
{
 8002a6c:	b530      	push	{r4, r5, lr}
 8002a6e:	4605      	mov	r5, r0
 8002a70:	b085      	sub	sp, #20
 8002a72:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8002a74:	4608      	mov	r0, r1
 8002a76:	f7ff ffa7 	bl	80029c8 <MCM_Trig_Functions>
 8002a7a:	1424      	asrs	r4, r4, #16
 8002a7c:	1402      	asrs	r2, r0, #16
 8002a7e:	b22d      	sxth	r5, r5
 8002a80:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8002a82:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8002a86:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002a8a:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8002a8e:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8002a92:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8002a96:	2000      	movs	r0, #0
 8002a98:	f363 000f 	bfi	r0, r3, #0, #16
 8002a9c:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002aa0:	f364 401f 	bfi	r0, r4, #16, #16
}
 8002aa4:	b005      	add	sp, #20
 8002aa6:	bd30      	pop	{r4, r5, pc}

08002aa8 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002aa8:	2800      	cmp	r0, #0
 8002aaa:	dd09      	ble.n	8002ac0 <MCM_Sqrt+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002aac:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8002aae:	4b05      	ldr	r3, [pc, #20]	@ (8002ac4 <MCM_Sqrt+0x1c>)
 8002ab0:	f240 1269 	movw	r2, #361	@ 0x169
 8002ab4:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8002ab6:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8002ab8:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002aba:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 8002abc:	b662      	cpsie	i
}
 8002abe:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8002ac0:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8002ac2:	4770      	bx	lr
 8002ac4:	40020c00 	.word	0x40020c00

08002ac8 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 8002ac8:	b310      	cbz	r0, 8002b10 <MCboot+0x48>
{
 8002aca:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 8002acc:	4d11      	ldr	r5, [pc, #68]	@ (8002b14 <MCboot+0x4c>)
 8002ace:	2300      	movs	r3, #0
 8002ad0:	702b      	strb	r3, [r5, #0]
 8002ad2:	4604      	mov	r4, r0

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    FOC_Init();
 8002ad4:	f000 fa12 	bl	8002efc <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 8002ad8:	480f      	ldr	r0, [pc, #60]	@ (8002b18 <MCboot+0x50>)
 8002ada:	f7fe fe21 	bl	8001720 <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002ade:	480f      	ldr	r0, [pc, #60]	@ (8002b1c <MCboot+0x54>)
 8002ae0:	f007 f94e 	bl	8009d80 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 8002ae4:	480e      	ldr	r0, [pc, #56]	@ (8002b20 <MCboot+0x58>)
 8002ae6:	f008 fee1 	bl	800b8ac <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 8002aea:	480e      	ldr	r0, [pc, #56]	@ (8002b24 <MCboot+0x5c>)
 8002aec:	f002 f902 	bl	8004cf4 <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 8002af0:	480d      	ldr	r0, [pc, #52]	@ (8002b28 <MCboot+0x60>)
 8002af2:	f008 f955 	bl	800ada0 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 8002af6:	480d      	ldr	r0, [pc, #52]	@ (8002b2c <MCboot+0x64>)
 8002af8:	f002 f8fc 	bl	8004cf4 <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 8002afc:	480c      	ldr	r0, [pc, #48]	@ (8002b30 <MCboot+0x68>)
 8002afe:	f007 f903 	bl	8009d08 <NTC_Init>

    pMCIList[M1] = &Mci[M1];
 8002b02:	4b0c      	ldr	r3, [pc, #48]	@ (8002b34 <MCboot+0x6c>)
 8002b04:	6023      	str	r3, [r4, #0]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 8002b06:	f7ff fd9b 	bl	8002640 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	702b      	strb	r3, [r5, #0]
  }
}
 8002b0e:	bd38      	pop	{r3, r4, r5, pc}
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000a24 	.word	0x20000a24
 8002b18:	20000464 	.word	0x20000464
 8002b1c:	2000033c 	.word	0x2000033c
 8002b20:	200003d0 	.word	0x200003d0
 8002b24:	20000394 	.word	0x20000394
 8002b28:	20000378 	.word	0x20000378
 8002b2c:	200003c0 	.word	0x200003c0
 8002b30:	200003a4 	.word	0x200003a4
 8002b34:	20000004 	.word	0x20000004

08002b38 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002b38:	4b01      	ldr	r3, [pc, #4]	@ (8002b40 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002b3a:	8018      	strh	r0, [r3, #0]
}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000a28 	.word	0x20000a28

08002b44 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8002b44:	4b03      	ldr	r3, [pc, #12]	@ (8002b54 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8002b46:	8818      	ldrh	r0, [r3, #0]
 8002b48:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002b4a:	fab0 f080 	clz	r0, r0
 8002b4e:	0940      	lsrs	r0, r0, #5
 8002b50:	4770      	bx	lr
 8002b52:	bf00      	nop
 8002b54:	20000a28 	.word	0x20000a28

08002b58 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002b58:	4b01      	ldr	r3, [pc, #4]	@ (8002b60 <TSK_SetStopPermanencyTimeM1+0x8>)
 8002b5a:	8018      	strh	r0, [r3, #0]
}
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	20000a26 	.word	0x20000a26

08002b64 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8002b66:	8818      	ldrh	r0, [r3, #0]
 8002b68:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002b6a:	fab0 f080 	clz	r0, r0
 8002b6e:	0940      	lsrs	r0, r0, #5
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	20000a26 	.word	0x20000a26

08002b78 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002b78:	b508      	push	{r3, lr}
  uint8_t bMotorNbr;
  bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	f000 fbd8 	bl	8003330 <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8002b80:	4a06      	ldr	r2, [pc, #24]	@ (8002b9c <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 8002b82:	4807      	ldr	r0, [pc, #28]	@ (8002ba0 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 8002b84:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002b86:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002b8e:	b909      	cbnz	r1, 8002b94 <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 8002b90:	2000      	movs	r0, #0
 8002b92:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 8002b94:	f006 ff3c 	bl	8009a10 <MCPA_dataLog>
}
 8002b98:	2000      	movs	r0, #0
 8002b9a:	bd08      	pop	{r3, pc}
 8002b9c:	20001c20 	.word	0x20001c20
 8002ba0:	20000428 	.word	0x20000428

08002ba4 <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8002ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 8002ba6:	4604      	mov	r4, r0
 8002ba8:	b198      	cbz	r0, 8002bd2 <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002baa:	4e21      	ldr	r6, [pc, #132]	@ (8002c30 <TSK_SafetyTask_PWMOFF+0x8c>)
 8002bac:	6830      	ldr	r0, [r6, #0]
 8002bae:	f001 f803 	bl	8003bb8 <PWMC_IsFaultOccurred>
 8002bb2:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 8002bb4:	4d1f      	ldr	r5, [pc, #124]	@ (8002c34 <TSK_SafetyTask_PWMOFF+0x90>)
 8002bb6:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8002bba:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8002bbe:	43ca      	mvns	r2, r1
 8002bc0:	4628      	mov	r0, r5
 8002bc2:	b292      	uxth	r2, r2
 8002bc4:	f7ff fd6e 	bl	80026a4 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002bc8:	4628      	mov	r0, r5
 8002bca:	f7ff fdfd 	bl	80027c8 <MCI_GetFaultState>
 8002bce:	b9d8      	cbnz	r0, 8002c08 <TSK_SafetyTask_PWMOFF+0x64>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002bd2:	4819      	ldr	r0, [pc, #100]	@ (8002c38 <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002bd4:	4e16      	ldr	r6, [pc, #88]	@ (8002c30 <TSK_SafetyTask_PWMOFF+0x8c>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 8002bd6:	f002 f9af 	bl	8004f38 <RCM_ExecRegularConv>
 8002bda:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 8002bdc:	4817      	ldr	r0, [pc, #92]	@ (8002c3c <TSK_SafetyTask_PWMOFF+0x98>)
 8002bde:	f007 f8a5 	bl	8009d2c <NTC_CalcAvTemp>
 8002be2:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002be4:	6830      	ldr	r0, [r6, #0]
 8002be6:	f000 ffe7 	bl	8003bb8 <PWMC_IsFaultOccurred>
 8002bea:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 8002bec:	4814      	ldr	r0, [pc, #80]	@ (8002c40 <TSK_SafetyTask_PWMOFF+0x9c>)
 8002bee:	f002 f9a3 	bl	8004f38 <RCM_ExecRegularConv>
 8002bf2:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 8002bf4:	4813      	ldr	r0, [pc, #76]	@ (8002c44 <TSK_SafetyTask_PWMOFF+0xa0>)
 8002bf6:	f008 f8ff 	bl	800adf8 <RVBS_CalcAvVbus>
 8002bfa:	4307      	orrs	r7, r0
 8002bfc:	f007 070e 	and.w	r7, r7, #14
 8002c00:	ea45 0107 	orr.w	r1, r5, r7
 8002c04:	b289      	uxth	r1, r1
 8002c06:	e7d5      	b.n	8002bb4 <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002c08:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002c0c:	f000 ff88 	bl	8003b20 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 8002c10:	480d      	ldr	r0, [pc, #52]	@ (8002c48 <TSK_SafetyTask_PWMOFF+0xa4>)
 8002c12:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 8002c16:	b923      	cbnz	r3, 8002c22 <TSK_SafetyTask_PWMOFF+0x7e>
    FOC_Clear(bMotor);
 8002c18:	4620      	mov	r0, r4
}
 8002c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002c1e:	f000 b933 	b.w	8002e88 <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002c22:	f006 ffb3 	bl	8009b8c <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 8002c26:	4620      	mov	r0, r4
}
 8002c28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002c2c:	f000 b92c 	b.w	8002e88 <FOC_Clear>
 8002c30:	20000a14 	.word	0x20000a14
 8002c34:	20000004 	.word	0x20000004
 8002c38:	200003c0 	.word	0x200003c0
 8002c3c:	200003a4 	.word	0x200003a4
 8002c40:	20000394 	.word	0x20000394
 8002c44:	20000378 	.word	0x20000378
 8002c48:	20000428 	.word	0x20000428

08002c4c <TSK_SafetyTask>:
{
 8002c4c:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002c4e:	4b06      	ldr	r3, [pc, #24]	@ (8002c68 <TSK_SafetyTask+0x1c>)
 8002c50:	781b      	ldrb	r3, [r3, #0]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d000      	beq.n	8002c58 <TSK_SafetyTask+0xc>
}
 8002c56:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7ff ffa3 	bl	8002ba4 <TSK_SafetyTask_PWMOFF>
}
 8002c5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8002c62:	f002 ba31 	b.w	80050c8 <RCM_ExecUserConv>
 8002c66:	bf00      	nop
 8002c68:	20000a24 	.word	0x20000a24

08002c6c <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8002c6c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce8 <MC_RunMotorControlTasks+0x7c>)
 8002c6e:	781b      	ldrb	r3, [r3, #0]
 8002c70:	b1cb      	cbz	r3, 8002ca6 <MC_RunMotorControlTasks+0x3a>
{
 8002c72:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002c74:	4c1d      	ldr	r4, [pc, #116]	@ (8002cec <MC_RunMotorControlTasks+0x80>)
 8002c76:	8823      	ldrh	r3, [r4, #0]
 8002c78:	b1b3      	cbz	r3, 8002ca8 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8002c7e:	4a1c      	ldr	r2, [pc, #112]	@ (8002cf0 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8002c80:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8002c82:	8813      	ldrh	r3, [r2, #0]
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	b11b      	cbz	r3, 8002c90 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8002c88:	8813      	ldrh	r3, [r2, #0]
 8002c8a:	3b01      	subs	r3, #1
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002c90:	4a18      	ldr	r2, [pc, #96]	@ (8002cf4 <MC_RunMotorControlTasks+0x88>)
 8002c92:	8813      	ldrh	r3, [r2, #0]
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	b11b      	cbz	r3, 8002ca0 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8002c98:	8813      	ldrh	r3, [r2, #0]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8002ca0:	f7ff ffd4 	bl	8002c4c <TSK_SafetyTask>
}
 8002ca4:	bd70      	pop	{r4, r5, r6, pc}
 8002ca6:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002ca8:	4d13      	ldr	r5, [pc, #76]	@ (8002cf8 <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8002caa:	f000 f9bb 	bl	8003024 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8002cae:	f7ff fcc9 	bl	8002644 <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002cb2:	4629      	mov	r1, r5
 8002cb4:	f851 0b0c 	ldr.w	r0, [r1], #12
 8002cb8:	6883      	ldr	r3, [r0, #8]
 8002cba:	4798      	blx	r3
 8002cbc:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8002cbe:	b130      	cbz	r0, 8002cce <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8002cc0:	4629      	mov	r1, r5
 8002cc2:	220a      	movs	r2, #10
 8002cc4:	f851 0b08 	ldr.w	r0, [r1], #8
 8002cc8:	6803      	ldr	r3, [r0, #0]
 8002cca:	4798      	blx	r3
 8002ccc:	b908      	cbnz	r0, 8002cd2 <MC_RunMotorControlTasks+0x66>
{
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e7d5      	b.n	8002c7e <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 fc96 	bl	8003604 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8002cd8:	6828      	ldr	r0, [r5, #0]
 8002cda:	89ea      	ldrh	r2, [r5, #14]
 8002cdc:	6846      	ldr	r6, [r0, #4]
 8002cde:	68a9      	ldr	r1, [r5, #8]
 8002ce0:	230a      	movs	r3, #10
 8002ce2:	47b0      	blx	r6
 8002ce4:	e7f3      	b.n	8002cce <MC_RunMotorControlTasks+0x62>
 8002ce6:	bf00      	nop
 8002ce8:	20000a24 	.word	0x20000a24
 8002cec:	20000a2a 	.word	0x20000a2a
 8002cf0:	20000a28 	.word	0x20000a28
 8002cf4:	20000a26 	.word	0x20000a26
 8002cf8:	20000454 	.word	0x20000454

08002cfc <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8002cfc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 8002cfe:	2000      	movs	r0, #0
 8002d00:	f000 f8c2 	bl	8002e88 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8002d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8002d08:	4802      	ldr	r0, [pc, #8]	@ (8002d14 <TSK_HardwareFaultTask+0x18>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	2180      	movs	r1, #128	@ 0x80
 8002d0e:	f7ff bcc9 	b.w	80026a4 <MCI_FaultProcessing>
 8002d12:	bf00      	nop
 8002d14:	20000004 	.word	0x20000004

08002d18 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002d18:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002d1a:	f7ff fc89 	bl	8002630 <MC_GetSTMStateMotor1>
 8002d1e:	b918      	cbnz	r0, 8002d28 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002d20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 8002d24:	f7ff bc4c 	b.w	80025c0 <MC_StartMotor1>
}
 8002d28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002d2c:	f7ff bc4e 	b.w	80025cc <MC_StopMotor1>

08002d30 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002d30:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d32:	4a4d      	ldr	r2, [pc, #308]	@ (8002e68 <mc_lock_pins+0x138>)
 8002d34:	494d      	ldr	r1, [pc, #308]	@ (8002e6c <mc_lock_pins+0x13c>)
 8002d36:	484e      	ldr	r0, [pc, #312]	@ (8002e70 <mc_lock_pins+0x140>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d38:	2504      	movs	r5, #4
 8002d3a:	b092      	sub	sp, #72	@ 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d3c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d3e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d40:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 8002d42:	69d3      	ldr	r3, [r2, #28]
 8002d44:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d46:	2602      	movs	r6, #2
  (void) temp;
 8002d48:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d4a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d4c:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d4e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d50:	69d3      	ldr	r3, [r2, #28]
 8002d52:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 8002d54:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d56:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d5a:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 8002d5e:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d60:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d62:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d64:	69d4      	ldr	r4, [r2, #28]
 8002d66:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d68:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8002d6c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d6e:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d70:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 8002d74:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d76:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d78:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d7a:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002d7e:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 8002d82:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d86:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d88:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d8a:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d8c:	69d4      	ldr	r4, [r2, #28]
 8002d8e:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8002d90:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d92:	4c38      	ldr	r4, [pc, #224]	@ (8002e74 <mc_lock_pins+0x144>)
 8002d94:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002d96:	2780      	movs	r7, #128	@ 0x80
 8002d98:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002d9a:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002d9c:	69dc      	ldr	r4, [r3, #28]
 8002d9e:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8002da0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002da2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002da4:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002da6:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002da8:	69d8      	ldr	r0, [r3, #28]
 8002daa:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 8002dac:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dae:	4832      	ldr	r0, [pc, #200]	@ (8002e78 <mc_lock_pins+0x148>)
 8002db0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002db2:	2408      	movs	r4, #8
 8002db4:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002db6:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002db8:	69d8      	ldr	r0, [r3, #28]
 8002dba:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 8002dbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dbe:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dc0:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dc2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002dc4:	69d9      	ldr	r1, [r3, #28]
 8002dc6:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dc8:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dca:	492c      	ldr	r1, [pc, #176]	@ (8002e7c <mc_lock_pins+0x14c>)
  (void) temp;
 8002dcc:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dce:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dd0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dd2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002dd4:	69d9      	ldr	r1, [r3, #28]
 8002dd6:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dd8:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dda:	4929      	ldr	r1, [pc, #164]	@ (8002e80 <mc_lock_pins+0x150>)
  (void) temp;
 8002ddc:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dde:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002de0:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002de2:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002de4:	69d8      	ldr	r0, [r3, #28]
 8002de6:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002de8:	31e0      	adds	r1, #224	@ 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dea:	f44f 7080 	mov.w	r0, #256	@ 0x100
  (void) temp;
 8002dee:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002df0:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002df2:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002df4:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002df6:	69d9      	ldr	r1, [r3, #28]
 8002df8:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002dfa:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002dfe:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 8002e02:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e04:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e06:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e08:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e0a:	69d9      	ldr	r1, [r3, #28]
 8002e0c:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e0e:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e12:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 8002e16:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e18:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e1a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e1c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e1e:	69d9      	ldr	r1, [r3, #28]
 8002e20:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e22:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e26:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 8002e2a:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e2c:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e2e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e30:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e32:	69db      	ldr	r3, [r3, #28]
 8002e34:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e36:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e3a:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8002e3e:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e40:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e42:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e44:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e46:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e48:	4b0e      	ldr	r3, [pc, #56]	@ (8002e84 <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 8002e4a:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e50:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 8002e54:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e56:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002e58:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002e5a:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002e5c:	69db      	ldr	r3, [r3, #28]
 8002e5e:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002e60:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 8002e62:	b012      	add	sp, #72	@ 0x48
 8002e64:	bcf0      	pop	{r4, r5, r6, r7}
 8002e66:	4770      	bx	lr
 8002e68:	48000400 	.word	0x48000400
 8002e6c:	00010004 	.word	0x00010004
 8002e70:	00010002 	.word	0x00010002
 8002e74:	00010080 	.word	0x00010080
 8002e78:	00010008 	.word	0x00010008
 8002e7c:	00010040 	.word	0x00010040
 8002e80:	00010020 	.word	0x00010020
 8002e84:	48000800 	.word	0x48000800

08002e88 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	2326      	movs	r3, #38	@ 0x26
 8002e8c:	4916      	ldr	r1, [pc, #88]	@ (8002ee8 <FOC_Clear+0x60>)
 8002e8e:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 8002e92:	2400      	movs	r4, #0
 8002e94:	50cc      	str	r4, [r1, r3]
{
 8002e96:	4605      	mov	r5, r0
 8002e98:	f103 0208 	add.w	r2, r3, #8
 8002e9c:	1858      	adds	r0, r3, r1
 8002e9e:	3310      	adds	r3, #16
 8002ea0:	440a      	add	r2, r1
 8002ea2:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002ea4:	4911      	ldr	r1, [pc, #68]	@ (8002eec <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8002ea6:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002ea8:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002eac:	6054      	str	r4, [r2, #4]
 8002eae:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002eb0:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 8002eb2:	f8c3 4006 	str.w	r4, [r3, #6]
 8002eb6:	f8c3 400a 	str.w	r4, [r3, #10]
 8002eba:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002ebe:	f006 ff73 	bl	8009da8 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef0 <FOC_Clear+0x68>)
 8002ec4:	4621      	mov	r1, r4
 8002ec6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002eca:	f006 ff6d 	bl	8009da8 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8002ece:	4b09      	ldr	r3, [pc, #36]	@ (8002ef4 <FOC_Clear+0x6c>)
 8002ed0:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8002ed4:	f008 f976 	bl	800b1c4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002ed8:	4b07      	ldr	r3, [pc, #28]	@ (8002ef8 <FOC_Clear+0x70>)
 8002eda:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8002ede:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8002ee2:	f000 be1d 	b.w	8003b20 <PWMC_SwitchOffPWM>
 8002ee6:	bf00      	nop
 8002ee8:	200009ec 	.word	0x200009ec
 8002eec:	20000034 	.word	0x20000034
 8002ef0:	20000030 	.word	0x20000030
 8002ef4:	20000038 	.word	0x20000038
 8002ef8:	20000a14 	.word	0x20000a14

08002efc <FOC_Init>:
{
 8002efc:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002efe:	4c27      	ldr	r4, [pc, #156]	@ (8002f9c <FOC_Init+0xa0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002f00:	4e27      	ldr	r6, [pc, #156]	@ (8002fa0 <FOC_Init+0xa4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002f02:	4828      	ldr	r0, [pc, #160]	@ (8002fa4 <FOC_Init+0xa8>)
    STO_PLL_Init (&STO_PLL_M1);
 8002f04:	4f28      	ldr	r7, [pc, #160]	@ (8002fa8 <FOC_Init+0xac>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002f06:	4d29      	ldr	r5, [pc, #164]	@ (8002fac <FOC_Init+0xb0>)
{
 8002f08:	b085      	sub	sp, #20
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8002f0a:	6020      	str	r0, [r4, #0]
    R3_2_Init(&PWM_Handle_M1);
 8002f0c:	f007 fb2a 	bl	800a564 <R3_2_Init>
    startTimers();
 8002f10:	f000 fc52 	bl	80037b8 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8002f14:	4630      	mov	r0, r6
 8002f16:	f006 ff33 	bl	8009d80 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8002f1a:	4638      	mov	r0, r7
 8002f1c:	f008 fbdc 	bl	800b6d8 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002f20:	6828      	ldr	r0, [r5, #0]
 8002f22:	463a      	mov	r2, r7
 8002f24:	4631      	mov	r1, r6
 8002f26:	f008 f935 	bl	800b194 <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002f2a:	6820      	ldr	r0, [r4, #0]
 8002f2c:	6829      	ldr	r1, [r5, #0]
 8002f2e:	4b20      	ldr	r3, [pc, #128]	@ (8002fb0 <FOC_Init+0xb4>)
 8002f30:	4a20      	ldr	r2, [pc, #128]	@ (8002fb4 <FOC_Init+0xb8>)
 8002f32:	9000      	str	r0, [sp, #0]
 8002f34:	4820      	ldr	r0, [pc, #128]	@ (8002fb8 <FOC_Init+0xbc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002f36:	4c21      	ldr	r4, [pc, #132]	@ (8002fbc <FOC_Init+0xc0>)
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002f38:	f008 f81e 	bl	800af78 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002f3c:	4820      	ldr	r0, [pc, #128]	@ (8002fc0 <FOC_Init+0xc4>)
 8002f3e:	f006 ff1f 	bl	8009d80 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8002f42:	4820      	ldr	r0, [pc, #128]	@ (8002fc4 <FOC_Init+0xc8>)
 8002f44:	f006 ff1c 	bl	8009d80 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002f48:	4b1f      	ldr	r3, [pc, #124]	@ (8002fc8 <FOC_Init+0xcc>)
 8002f4a:	4a20      	ldr	r2, [pc, #128]	@ (8002fcc <FOC_Init+0xd0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002f4e:	4820      	ldr	r0, [pc, #128]	@ (8002fd0 <FOC_Init+0xd4>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002f50:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002f54:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd4 <FOC_Init+0xd8>)
 8002f56:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8002f58:	f007 ff7c 	bl	800ae54 <REMNG_Init>
    FOC_Clear(M1);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7ff ff93 	bl	8002e88 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002f62:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002f64:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8002f66:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002f6a:	f008 f9bd 	bl	800b2e8 <STC_GetDefaultIqdref>
 8002f6e:	f3c0 420f 	ubfx	r2, r0, #16, #16
 8002f72:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002f74:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002f76:	8262      	strh	r2, [r4, #18]
 8002f78:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002f7a:	f008 f9b5 	bl	800b2e8 <STC_GetDefaultIqdref>
 8002f7e:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 8002f82:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002f84:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 8002f86:	f008 f9ab 	bl	800b2e0 <STC_GetMecSpeedRefUnitDefault>
 8002f8a:	4601      	mov	r1, r0
 8002f8c:	4812      	ldr	r0, [pc, #72]	@ (8002fd8 <FOC_Init+0xdc>)
 8002f8e:	2200      	movs	r2, #0
}
 8002f90:	b005      	add	sp, #20
 8002f92:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 8002f96:	f7ff bb57 	b.w	8002648 <MCI_ExecSpeedRamp>
 8002f9a:	bf00      	nop
 8002f9c:	20000a14 	.word	0x20000a14
 8002fa0:	2000033c 	.word	0x2000033c
 8002fa4:	20000194 	.word	0x20000194
 8002fa8:	2000006c 	.word	0x2000006c
 8002fac:	20000038 	.word	0x20000038
 8002fb0:	20000058 	.word	0x20000058
 8002fb4:	200003d0 	.word	0x200003d0
 8002fb8:	20000238 	.word	0x20000238
 8002fbc:	200009ec 	.word	0x200009ec
 8002fc0:	20000310 	.word	0x20000310
 8002fc4:	200002e4 	.word	0x200002e4
 8002fc8:	2000002c 	.word	0x2000002c
 8002fcc:	20000378 	.word	0x20000378
 8002fd0:	20000040 	.word	0x20000040
 8002fd4:	200009e8 	.word	0x200009e8
 8002fd8:	20000004 	.word	0x20000004

08002fdc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8002fdc:	4770      	bx	lr
 8002fde:	bf00      	nop

08002fe0 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8002fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fe2:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8002fe4:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 8002fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800301c <FOC_CalcCurrRef+0x3c>)
 8002fe8:	2426      	movs	r4, #38	@ 0x26
 8002fea:	fb04 5400 	mla	r4, r4, r0, r5
 8002fee:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 8002ff2:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 8002ff6:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8002ff8:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8002ffc:	b13b      	cbz	r3, 800300e <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8002ffe:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 8003000:	2326      	movs	r3, #38	@ 0x26
 8003002:	fb03 5506 	mla	r5, r3, r6, r5
 8003006:	8228      	strh	r0, [r5, #16]
 8003008:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 800300a:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800300c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800300e:	4b04      	ldr	r3, [pc, #16]	@ (8003020 <FOC_CalcCurrRef+0x40>)
 8003010:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8003014:	f008 f92e 	bl	800b274 <STC_CalcTorqueReference>
 8003018:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 800301a:	e7f0      	b.n	8002ffe <FOC_CalcCurrRef+0x1e>
 800301c:	200009ec 	.word	0x200009ec
 8003020:	20000038 	.word	0x20000038

08003024 <TSK_MediumFrequencyTaskM1>:
{
 8003024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003026:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8003028:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800302a:	4669      	mov	r1, sp
 800302c:	48b6      	ldr	r0, [pc, #728]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x2e4>)
  int16_t wAux = 0;
 800302e:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8003032:	f008 fa59 	bl	800b4e8 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8003036:	4bb5      	ldr	r3, [pc, #724]	@ (800330c <TSK_MediumFrequencyTaskM1+0x2e8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003038:	4cb5      	ldr	r4, [pc, #724]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800303a:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 800303c:	6818      	ldr	r0, [r3, #0]
 800303e:	f006 ff27 	bl	8009e90 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003042:	4620      	mov	r0, r4
 8003044:	f7ff fb7a 	bl	800273c <MCI_GetCurrentFaults>
 8003048:	b118      	cbz	r0, 8003052 <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 800304a:	230a      	movs	r3, #10
 800304c:	77e3      	strb	r3, [r4, #31]
}
 800304e:	b003      	add	sp, #12
 8003050:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8003052:	4620      	mov	r0, r4
 8003054:	f7ff fb70 	bl	8002738 <MCI_GetOccurredFaults>
 8003058:	bb70      	cbnz	r0, 80030b8 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 800305a:	7fe3      	ldrb	r3, [r4, #31]
 800305c:	2b13      	cmp	r3, #19
 800305e:	d8f6      	bhi.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
 8003060:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <TSK_MediumFrequencyTaskM1+0x44>)
 8003062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003066:	bf00      	nop
 8003068:	08003235 	.word	0x08003235
 800306c:	0800304f 	.word	0x0800304f
 8003070:	0800304f 	.word	0x0800304f
 8003074:	0800304f 	.word	0x0800304f
 8003078:	080031a7 	.word	0x080031a7
 800307c:	0800304f 	.word	0x0800304f
 8003080:	08003183 	.word	0x08003183
 8003084:	0800304f 	.word	0x0800304f
 8003088:	08003163 	.word	0x08003163
 800308c:	0800304f 	.word	0x0800304f
 8003090:	080030b9 	.word	0x080030b9
 8003094:	08003155 	.word	0x08003155
 8003098:	0800304f 	.word	0x0800304f
 800309c:	0800304f 	.word	0x0800304f
 80030a0:	0800304f 	.word	0x0800304f
 80030a4:	0800304f 	.word	0x0800304f
 80030a8:	08003113 	.word	0x08003113
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	0800304f 	.word	0x0800304f
 80030b4:	080030c1 	.word	0x080030c1
      Mci[M1].State = FAULT_OVER;
 80030b8:	230b      	movs	r3, #11
 80030ba:	77e3      	strb	r3, [r4, #31]
}
 80030bc:	b003      	add	sp, #12
 80030be:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80030c0:	7fa3      	ldrb	r3, [r4, #30]
 80030c2:	2b05      	cmp	r3, #5
 80030c4:	f000 80ce 	beq.w	8003264 <TSK_MediumFrequencyTaskM1+0x240>
            if (! RUC_Exec(&RevUpControlM1))
 80030c8:	4892      	ldr	r0, [pc, #584]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x2f0>)
 80030ca:	f007 ffdd 	bl	800b088 <RUC_Exec>
 80030ce:	4602      	mov	r2, r0
 80030d0:	2800      	cmp	r0, #0
 80030d2:	f040 80df 	bne.w	8003294 <TSK_MediumFrequencyTaskM1+0x270>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80030d6:	488e      	ldr	r0, [pc, #568]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80030d8:	2110      	movs	r1, #16
 80030da:	f7ff fae3 	bl	80026a4 <MCI_FaultProcessing>
 80030de:	e7b6      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80030e0:	7fa3      	ldrb	r3, [r4, #30]
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80030e2:	4d8d      	ldr	r5, [pc, #564]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x2f4>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 80030e4:	2b05      	cmp	r3, #5
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80030e6:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 80030e8:	f000 80be 	beq.w	8003268 <TSK_MediumFrequencyTaskM1+0x244>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80030ec:	2101      	movs	r1, #1
 80030ee:	f000 fd1b 	bl	8003b28 <PWMC_CurrentReadingCalibr>
 80030f2:	2800      	cmp	r0, #0
 80030f4:	d0ab      	beq.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80030f6:	7fa3      	ldrb	r3, [r4, #30]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	f000 80ff 	beq.w	80032fc <TSK_MediumFrequencyTaskM1+0x2d8>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80030fe:	6828      	ldr	r0, [r5, #0]
 8003100:	2100      	movs	r1, #0
 8003102:	f007 f993 	bl	800a42c <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 8003106:	2014      	movs	r0, #20
 8003108:	f7ff fd16 	bl	8002b38 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 800310c:	2310      	movs	r3, #16
 800310e:	77e3      	strb	r3, [r4, #31]
 8003110:	e79d      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003112:	7fa3      	ldrb	r3, [r4, #30]
 8003114:	2b05      	cmp	r3, #5
 8003116:	f000 80a5 	beq.w	8003264 <TSK_MediumFrequencyTaskM1+0x240>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 800311a:	f7ff fd13 	bl	8002b44 <TSK_ChargeBootCapDelayHasElapsedM1>
 800311e:	2800      	cmp	r0, #0
 8003120:	d095      	beq.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 8003122:	4d7d      	ldr	r5, [pc, #500]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8003124:	6828      	ldr	r0, [r5, #0]
 8003126:	f007 f8c1 	bl	800a2ac <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800312a:	497c      	ldr	r1, [pc, #496]	@ (800331c <TSK_MediumFrequencyTaskM1+0x2f8>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 800312c:	4b7c      	ldr	r3, [pc, #496]	@ (8003320 <TSK_MediumFrequencyTaskM1+0x2fc>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 800312e:	6808      	ldr	r0, [r1, #0]
 8003130:	497c      	ldr	r1, [pc, #496]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8003132:	2201      	movs	r2, #1
 8003134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8003138:	f008 f842 	bl	800b1c0 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 800313c:	4872      	ldr	r0, [pc, #456]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x2e4>)
 800313e:	f008 faa5 	bl	800b68c <STO_PLL_Clear>
              FOC_Clear( M1 );
 8003142:	2000      	movs	r0, #0
 8003144:	f7ff fea0 	bl	8002e88 <FOC_Clear>
                Mci[M1].State = START;
 8003148:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800314a:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 800314c:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 800314e:	f000 fce9 	bl	8003b24 <PWMC_SwitchOnPWM>
 8003152:	e77c      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8003154:	7fa3      	ldrb	r3, [r4, #30]
 8003156:	2b02      	cmp	r3, #2
 8003158:	f47f af79 	bne.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800315c:	2300      	movs	r3, #0
 800315e:	83e3      	strh	r3, [r4, #30]
 8003160:	e775      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8003162:	f7ff fcff 	bl	8002b64 <TSK_StopPermanencyTimeHasElapsedM1>
 8003166:	2800      	cmp	r0, #0
 8003168:	f43f af71 	beq.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 800316c:	4b6b      	ldr	r3, [pc, #428]	@ (800331c <TSK_MediumFrequencyTaskM1+0x2f8>)
 800316e:	496d      	ldr	r1, [pc, #436]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
 8003170:	6818      	ldr	r0, [r3, #0]
 8003172:	f008 f825 	bl	800b1c0 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8003176:	486b      	ldr	r0, [pc, #428]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
 8003178:	f008 fb8a 	bl	800b890 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 800317c:	2300      	movs	r3, #0
 800317e:	83e3      	strh	r3, [r4, #30]
 8003180:	e765      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8003182:	7fa3      	ldrb	r3, [r4, #30]
 8003184:	2b05      	cmp	r3, #5
 8003186:	d06d      	beq.n	8003264 <TSK_MediumFrequencyTaskM1+0x240>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8003188:	4861      	ldr	r0, [pc, #388]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
 800318a:	f7ff fa97 	bl	80026bc <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 800318e:	2000      	movs	r0, #0
 8003190:	f7ff ff26 	bl	8002fe0 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8003194:	2d00      	cmp	r5, #0
 8003196:	f47f af5a 	bne.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 800319a:	485d      	ldr	r0, [pc, #372]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
 800319c:	462a      	mov	r2, r5
 800319e:	2120      	movs	r1, #32
 80031a0:	f7ff fa80 	bl	80026a4 <MCI_FaultProcessing>
 80031a4:	e753      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80031a6:	7fa3      	ldrb	r3, [r4, #30]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d05b      	beq.n	8003264 <TSK_MediumFrequencyTaskM1+0x240>
            if(! RUC_Exec(&RevUpControlM1))
 80031ac:	4859      	ldr	r0, [pc, #356]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x2f0>)
 80031ae:	f007 ff6b 	bl	800b088 <RUC_Exec>
 80031b2:	4602      	mov	r2, r0
 80031b4:	2800      	cmp	r0, #0
 80031b6:	d163      	bne.n	8003280 <TSK_MediumFrequencyTaskM1+0x25c>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80031b8:	4855      	ldr	r0, [pc, #340]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80031ba:	2110      	movs	r1, #16
 80031bc:	f7ff fa72 	bl	80026a4 <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80031c0:	4858      	ldr	r0, [pc, #352]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
 80031c2:	f10d 0102 	add.w	r1, sp, #2
 80031c6:	f008 fbc7 	bl	800b958 <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 80031ca:	4852      	ldr	r0, [pc, #328]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x2f0>)
 80031cc:	f007 ff94 	bl	800b0f8 <RUC_FirstAccelerationStageReached>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	f43f af3c 	beq.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 80031d6:	4e4c      	ldr	r6, [pc, #304]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x2e4>)
 80031d8:	f10d 0102 	add.w	r1, sp, #2
 80031dc:	4630      	mov	r0, r6
 80031de:	f008 fab5 	bl	800b74c <STO_PLL_IsObserverConverged>
 80031e2:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 80031e4:	484a      	ldr	r0, [pc, #296]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80031e6:	f7ff faf9 	bl	80027dc <MCI_GetImposedMotorDirection>
 80031ea:	b241      	sxtb	r1, r0
 80031ec:	4630      	mov	r0, r6
 80031ee:	f008 fb4b 	bl	800b888 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 80031f2:	484c      	ldr	r0, [pc, #304]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
 80031f4:	4629      	mov	r1, r5
 80031f6:	f008 fc3d 	bl	800ba74 <VSS_SetStartTransition>
            if (ObserverConverged)
 80031fa:	2d00      	cmp	r5, #0
 80031fc:	f43f af27 	beq.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8003200:	4f47      	ldr	r7, [pc, #284]	@ (8003320 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8003202:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 8003206:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 8003208:	4d47      	ldr	r5, [pc, #284]	@ (8003328 <TSK_MediumFrequencyTaskM1+0x304>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800320a:	f7ff fbed 	bl	80029e8 <MCM_Park>
 800320e:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8003210:	6828      	ldr	r0, [r5, #0]
 8003212:	f007 fe1f 	bl	800ae54 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8003216:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 800321a:	6828      	ldr	r0, [r5, #0]
 800321c:	2200      	movs	r2, #0
 800321e:	f007 fe65 	bl	800aeec <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8003222:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8003226:	6828      	ldr	r0, [r5, #0]
 8003228:	2219      	movs	r2, #25
 800322a:	f007 fe5f 	bl	800aeec <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 800322e:	2313      	movs	r3, #19
 8003230:	77e3      	strb	r3, [r4, #31]
 8003232:	e70c      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8003234:	7fa5      	ldrb	r5, [r4, #30]
 8003236:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 800323a:	2d01      	cmp	r5, #1
 800323c:	f47f af07 	bne.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8003240:	4833      	ldr	r0, [pc, #204]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8003242:	4e35      	ldr	r6, [pc, #212]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x2f4>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8003244:	f7ff faca 	bl	80027dc <MCI_GetImposedMotorDirection>
 8003248:	4601      	mov	r1, r0
 800324a:	4832      	ldr	r0, [pc, #200]	@ (8003314 <TSK_MediumFrequencyTaskM1+0x2f0>)
 800324c:	f007 fed0 	bl	800aff0 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8003250:	6830      	ldr	r0, [r6, #0]
 8003252:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 8003256:	2900      	cmp	r1, #0
 8003258:	d148      	bne.n	80032ec <TSK_MediumFrequencyTaskM1+0x2c8>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 800325a:	f000 fc65 	bl	8003b28 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 800325e:	2311      	movs	r3, #17
 8003260:	77e3      	strb	r3, [r4, #31]
 8003262:	e6f4      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 8003264:	4b2c      	ldr	r3, [pc, #176]	@ (8003318 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	f007 f820 	bl	800a2ac <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 800326c:	2000      	movs	r0, #0
 800326e:	f7ff fe0b 	bl	8002e88 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8003272:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8003276:	f7ff fc6f 	bl	8002b58 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 800327a:	2308      	movs	r3, #8
 800327c:	77e3      	strb	r3, [r4, #31]
}
 800327e:	e6e6      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8003280:	4b26      	ldr	r3, [pc, #152]	@ (800331c <TSK_MediumFrequencyTaskM1+0x2f8>)
 8003282:	6818      	ldr	r0, [r3, #0]
 8003284:	f007 fff6 	bl	800b274 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8003288:	4b25      	ldr	r3, [pc, #148]	@ (8003320 <TSK_MediumFrequencyTaskM1+0x2fc>)
 800328a:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 800328e:	8218      	strh	r0, [r3, #16]
 8003290:	825a      	strh	r2, [r3, #18]
 8003292:	e795      	b.n	80031c0 <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8003294:	4823      	ldr	r0, [pc, #140]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
 8003296:	a901      	add	r1, sp, #4
 8003298:	f008 fb5e 	bl	800b958 <VSS_CalcAvrgMecSpeedUnit>
 800329c:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 800329e:	4821      	ldr	r0, [pc, #132]	@ (8003324 <TSK_MediumFrequencyTaskM1+0x300>)
 80032a0:	f008 fbf6 	bl	800ba90 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 80032a4:	b915      	cbnz	r5, 80032ac <TSK_MediumFrequencyTaskM1+0x288>
 80032a6:	2800      	cmp	r0, #0
 80032a8:	f43f aed1 	beq.w	800304e <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 80032ac:	4b1c      	ldr	r3, [pc, #112]	@ (8003320 <TSK_MediumFrequencyTaskM1+0x2fc>)
 80032ae:	481f      	ldr	r0, [pc, #124]	@ (800332c <TSK_MediumFrequencyTaskM1+0x308>)
 80032b0:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 80032b4:	f006 fd82 	bl	8009dbc <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80032b8:	b201      	sxth	r1, r0
 80032ba:	fb05 f101 	mul.w	r1, r5, r1
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 80032be:	4d17      	ldr	r5, [pc, #92]	@ (800331c <TSK_MediumFrequencyTaskM1+0x2f8>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80032c0:	481a      	ldr	r0, [pc, #104]	@ (800332c <TSK_MediumFrequencyTaskM1+0x308>)
 80032c2:	f006 fd71 	bl	8009da8 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 80032c6:	4910      	ldr	r1, [pc, #64]	@ (8003308 <TSK_MediumFrequencyTaskM1+0x2e4>)
 80032c8:	6828      	ldr	r0, [r5, #0]
 80032ca:	f007 ff79 	bl	800b1c0 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 80032ce:	2000      	movs	r0, #0
 80032d0:	f7ff fe84 	bl	8002fdc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 80032d4:	2000      	movs	r0, #0
 80032d6:	f7ff fe83 	bl	8002fe0 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80032da:	6828      	ldr	r0, [r5, #0]
 80032dc:	f008 f80a 	bl	800b2f4 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80032e0:	480b      	ldr	r0, [pc, #44]	@ (8003310 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80032e2:	f7ff f9eb 	bl	80026bc <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 80032e6:	2306      	movs	r3, #6
 80032e8:	77e3      	strb	r3, [r4, #31]
 80032ea:	e6b0      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80032ec:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80032ee:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80032f2:	f000 fc19 	bl	8003b28 <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80032f6:	6830      	ldr	r0, [r6, #0]
 80032f8:	2100      	movs	r1, #0
 80032fa:	e702      	b.n	8003102 <TSK_MediumFrequencyTaskM1+0xde>
                FOC_Clear(M1);
 80032fc:	2000      	movs	r0, #0
 80032fe:	f7ff fdc3 	bl	8002e88 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8003302:	2300      	movs	r3, #0
 8003304:	83e3      	strh	r3, [r4, #30]
 8003306:	e6a2      	b.n	800304e <TSK_MediumFrequencyTaskM1+0x2a>
 8003308:	2000006c 	.word	0x2000006c
 800330c:	2000002c 	.word	0x2000002c
 8003310:	20000004 	.word	0x20000004
 8003314:	20000238 	.word	0x20000238
 8003318:	20000a14 	.word	0x20000a14
 800331c:	20000038 	.word	0x20000038
 8003320:	200009ec 	.word	0x200009ec
 8003324:	200003d0 	.word	0x200003d0
 8003328:	200009e8 	.word	0x200009e8
 800332c:	2000033c 	.word	0x2000033c

08003330 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8003330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 8003334:	4f4c      	ldr	r7, [pc, #304]	@ (8003468 <FOC_HighFrequencyTask+0x138>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8003336:	4c4d      	ldr	r4, [pc, #308]	@ (800346c <FOC_HighFrequencyTask+0x13c>)
  if (SWITCH_OVER == Mci[M1].State)
 8003338:	7ffb      	ldrb	r3, [r7, #31]
{
 800333a:	b089      	sub	sp, #36	@ 0x24
 800333c:	4605      	mov	r5, r0
  if (SWITCH_OVER == Mci[M1].State)
 800333e:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8003340:	f8d4 001a 	ldr.w	r0, [r4, #26]
 8003344:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8003346:	f000 8083 	beq.w	8003450 <FOC_HighFrequencyTask+0x120>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800334a:	4b49      	ldr	r3, [pc, #292]	@ (8003470 <FOC_HighFrequencyTask+0x140>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 800334c:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8003494 <FOC_HighFrequencyTask+0x164>
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8d8 0000 	ldr.w	r0, [r8]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 8003356:	695b      	ldr	r3, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8003358:	a902      	add	r1, sp, #8
 800335a:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	4798      	blx	r3
  RCM_ReadOngoingConv();
 8003362:	f001 ff29 	bl	80051b8 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 8003366:	f001 fee3 	bl	8005130 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 800336a:	9802      	ldr	r0, [sp, #8]
 800336c:	f7ff fb02 	bl	8002974 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003370:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 8003372:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8003374:	f7ff fb38 	bl	80029e8 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003378:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800337c:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800337e:	b201      	sxth	r1, r0
 8003380:	1a59      	subs	r1, r3, r1
 8003382:	4b3c      	ldr	r3, [pc, #240]	@ (8003474 <FOC_HighFrequencyTask+0x144>)
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	f006 fd43 	bl	8009e10 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 800338a:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 800338e:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8003392:	1ac9      	subs	r1, r1, r3
 8003394:	4b38      	ldr	r3, [pc, #224]	@ (8003478 <FOC_HighFrequencyTask+0x148>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8003396:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8003398:	6818      	ldr	r0, [r3, #0]
 800339a:	f006 fd39 	bl	8009e10 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 800339e:	f8ad 9004 	strh.w	r9, [sp, #4]
 80033a2:	f8ad 0006 	strh.w	r0, [sp, #6]
 80033a6:	9901      	ldr	r1, [sp, #4]
 80033a8:	4834      	ldr	r0, [pc, #208]	@ (800347c <FOC_HighFrequencyTask+0x14c>)
 80033aa:	f006 fb03 	bl	80099b4 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80033ae:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 80033b0:	4681      	mov	r9, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80033b2:	f7ff fb5b 	bl	8002a6c <MCM_Rev_Park>
 80033b6:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80033b8:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80033bc:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80033be:	f000 fa67 	bl	8003890 <PWMC_SetPhaseVoltage>
 80033c2:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80033c4:	9802      	ldr	r0, [sp, #8]
 80033c6:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80033c8:	9803      	ldr	r0, [sp, #12]
 80033ca:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80033cc:	9800      	ldr	r0, [sp, #0]
 80033ce:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 80033d0:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80033d2:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 80033d4:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 80033d8:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80033da:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 80033de:	d02f      	beq.n	8003440 <FOC_HighFrequencyTask+0x110>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80033e0:	4827      	ldr	r0, [pc, #156]	@ (8003480 <FOC_HighFrequencyTask+0x150>)
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80033e2:	4e28      	ldr	r6, [pc, #160]	@ (8003484 <FOC_HighFrequencyTask+0x154>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80033e4:	f007 fe88 	bl	800b0f8 <RUC_FirstAccelerationStageReached>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 80033e8:	4a27      	ldr	r2, [pc, #156]	@ (8003488 <FOC_HighFrequencyTask+0x158>)
 80033ea:	4603      	mov	r3, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 80033ec:	6860      	ldr	r0, [r4, #4]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 80033ee:	88d2      	ldrh	r2, [r2, #6]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 80033f0:	9006      	str	r0, [sp, #24]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80033f2:	a905      	add	r1, sp, #20
 80033f4:	4630      	mov	r0, r6
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80033f6:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 80033f8:	f8ad 201c 	strh.w	r2, [sp, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80033fc:	f007 ff82 	bl	800b304 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 8003400:	4630      	mov	r0, r6
 8003402:	f008 f917 	bl	800b634 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 8003406:	b144      	cbz	r4, 800341a <FOC_HighFrequencyTask+0xea>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8003408:	7ffb      	ldrb	r3, [r7, #31]
 800340a:	2b04      	cmp	r3, #4
 800340c:	d00d      	beq.n	800342a <FOC_HighFrequencyTask+0xfa>
 800340e:	2b13      	cmp	r3, #19
 8003410:	d00b      	beq.n	800342a <FOC_HighFrequencyTask+0xfa>
}
 8003412:	4628      	mov	r0, r5
 8003414:	b009      	add	sp, #36	@ 0x24
 8003416:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 800341a:	4621      	mov	r1, r4
 800341c:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8003420:	f006 fcc2 	bl	8009da8 <PID_SetIntegralTerm>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8003424:	7ffb      	ldrb	r3, [r7, #31]
 8003426:	2b04      	cmp	r3, #4
 8003428:	d1f1      	bne.n	800340e <FOC_HighFrequencyTask+0xde>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800342a:	88b3      	ldrh	r3, [r6, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 800342c:	4817      	ldr	r0, [pc, #92]	@ (800348c <FOC_HighFrequencyTask+0x15c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800342e:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8003432:	a904      	add	r1, sp, #16
 8003434:	f008 fa3e 	bl	800b8b4 <VSS_CalcElAngle>
}
 8003438:	4628      	mov	r0, r5
 800343a:	b009      	add	sp, #36	@ 0x24
 800343c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8003440:	4809      	ldr	r0, [pc, #36]	@ (8003468 <FOC_HighFrequencyTask+0x138>)
 8003442:	2200      	movs	r2, #0
 8003444:	f7ff f92e 	bl	80026a4 <MCI_FaultProcessing>
}
 8003448:	4628      	mov	r0, r5
 800344a:	b009      	add	sp, #36	@ 0x24
 800344c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8003450:	4e0f      	ldr	r6, [pc, #60]	@ (8003490 <FOC_HighFrequencyTask+0x160>)
 8003452:	6830      	ldr	r0, [r6, #0]
 8003454:	f007 fd28 	bl	800aea8 <REMNG_RampCompleted>
 8003458:	2800      	cmp	r0, #0
 800345a:	f47f af76 	bne.w	800334a <FOC_HighFrequencyTask+0x1a>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 800345e:	6830      	ldr	r0, [r6, #0]
 8003460:	f007 fd00 	bl	800ae64 <REMNG_Calc>
 8003464:	8220      	strh	r0, [r4, #16]
 8003466:	e770      	b.n	800334a <FOC_HighFrequencyTask+0x1a>
 8003468:	20000004 	.word	0x20000004
 800346c:	200009ec 	.word	0x200009ec
 8003470:	20000038 	.word	0x20000038
 8003474:	20000034 	.word	0x20000034
 8003478:	20000030 	.word	0x20000030
 800347c:	2000003c 	.word	0x2000003c
 8003480:	20000238 	.word	0x20000238
 8003484:	2000006c 	.word	0x2000006c
 8003488:	20000378 	.word	0x20000378
 800348c:	200003d0 	.word	0x200003d0
 8003490:	200009e8 	.word	0x200009e8
 8003494:	20000a14 	.word	0x20000a14

08003498 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800349c:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 800349e:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80034a0:	4b33      	ldr	r3, [pc, #204]	@ (8003570 <RI_SetRegCommandParser+0xd8>)
 80034a2:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 80034a4:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80034a8:	4b32      	ldr	r3, [pc, #200]	@ (8003574 <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 80034aa:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 80034ac:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 80034b0:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 80034b4:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 80034b6:	f8a0 800e 	strh.w	r8, [r0, #14]
 80034ba:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 80034bc:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 80034c0:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 80034c2:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80034c6:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 80034ca:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80034cc:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80034d0:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 80034d4:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 80034d8:	dd36      	ble.n	8003548 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 80034da:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80034de:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 80034e2:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 80034e6:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 80034ea:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80034ee:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 80034f0:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80034f2:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80034f6:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 80034fa:	d12d      	bne.n	8003558 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 80034fc:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8003500:	f8cd e000 	str.w	lr, [sp]
 8003504:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8003506:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 800350a:	eb05 0309 	add.w	r3, r5, r9
 800350e:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8003510:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8003514:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8003516:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8003518:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 800351a:	d012      	beq.n	8003542 <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 800351c:	42bd      	cmp	r5, r7
 800351e:	d021      	beq.n	8003564 <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 8003520:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8003524:	89f3      	ldrh	r3, [r6, #14]
 8003526:	3301      	adds	r3, #1
 8003528:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800352a:	2800      	cmp	r0, #0
 800352c:	d0cb      	beq.n	80034c6 <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 800352e:	2807      	cmp	r0, #7
 8003530:	d012      	beq.n	8003558 <RI_SetRegCommandParser+0xc0>
 8003532:	2301      	movs	r3, #1
 8003534:	280a      	cmp	r0, #10
 8003536:	9303      	str	r3, [sp, #12]
 8003538:	d1c5      	bne.n	80034c6 <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 800353a:	9803      	ldr	r0, [sp, #12]
 800353c:	b009      	add	sp, #36	@ 0x24
 800353e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8003542:	2a00      	cmp	r2, #0
 8003544:	d1ea      	bne.n	800351c <RI_SetRegCommandParser+0x84>
 8003546:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8003548:	9b03      	ldr	r3, [sp, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d1f5      	bne.n	800353a <RI_SetRegCommandParser+0xa2>
}
 800354e:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 8003550:	81f3      	strh	r3, [r6, #14]
}
 8003552:	b009      	add	sp, #36	@ 0x24
 8003554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 8003558:	2301      	movs	r3, #1
 800355a:	9303      	str	r3, [sp, #12]
}
 800355c:	9803      	ldr	r0, [sp, #12]
 800355e:	b009      	add	sp, #36	@ 0x24
 8003560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003564:	2308      	movs	r3, #8
 8003566:	9303      	str	r3, [sp, #12]
}
 8003568:	9803      	ldr	r0, [sp, #12]
 800356a:	b009      	add	sp, #36	@ 0x24
 800356c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003570:	08003bf1 	.word	0x08003bf1
 8003574:	08003cf1 	.word	0x08003cf1

08003578 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8003578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800357c:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8003584:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8003586:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 800358a:	4b1c      	ldr	r3, [pc, #112]	@ (80035fc <RI_GetRegCommandParser+0x84>)
 800358c:	9304      	str	r3, [sp, #16]
 800358e:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 8003590:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8003594:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8003596:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8003598:	f1b8 0f00 	cmp.w	r8, #0
 800359c:	d029      	beq.n	80035f2 <RI_GetRegCommandParser+0x7a>
 800359e:	4607      	mov	r7, r0
 80035a0:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 80035a2:	464d      	mov	r5, r9
 80035a4:	e012      	b.n	80035cc <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80035a6:	f85e ac08 	ldr.w	sl, [lr, #-8]
 80035aa:	9400      	str	r4, [sp, #0]
 80035ac:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 80035ae:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 80035b2:	fa19 f383 	uxtah	r3, r9, r3
 80035b6:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 80035b8:	b9e0      	cbnz	r0, 80035f4 <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 80035ba:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 80035be:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80035c0:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 80035c2:	440a      	add	r2, r1
          txData = txData+size;
 80035c4:	440e      	add	r6, r1
          pHandle->txLength += size;
 80035c6:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 80035c8:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 80035ca:	b19b      	cbz	r3, 80035f4 <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 80035cc:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80035d0:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 80035d4:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 80035d8:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 80035dc:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80035e0:	f10d 030e 	add.w	r3, sp, #14
 80035e4:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 80035e6:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 80035e8:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 80035ec:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 80035f0:	d0d9      	beq.n	80035a6 <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 80035f2:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80035f4:	b006      	add	sp, #24
 80035f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fa:	bf00      	nop
 80035fc:	080042ad 	.word	0x080042ad
 8003600:	080043e1 	.word	0x080043e1

08003604 <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8003604:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003606:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8003608:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800360a:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800360c:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003610:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003612:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003614:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003618:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 800361a:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800361c:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003620:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8003624:	b291      	uxth	r1, r2
{
 8003626:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003628:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800362a:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 800362e:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8003630:	d039      	beq.n	80036a6 <MCP_ReceivedPacket+0xa2>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8003632:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003634:	4f4f      	ldr	r7, [pc, #316]	@ (8003774 <MCP_ReceivedPacket+0x170>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8003636:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003638:	f003 0307 	and.w	r3, r3, #7
 800363c:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8003640:	2500      	movs	r5, #0

    switch (command)
 8003642:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8003646:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8003648:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 800364c:	81e5      	strh	r5, [r4, #14]
    switch (command)
 800364e:	d835      	bhi.n	80036bc <MCP_ReceivedPacket+0xb8>
 8003650:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8003654:	d81e      	bhi.n	8003694 <MCP_ReceivedPacket+0x90>
 8003656:	e8df f00c 	tbb	[pc, ip]
 800365a:	1d6b      	.short	0x1d6b
 800365c:	1d1d1d1d 	.word	0x1d1d1d1d
 8003660:	1d731d1d 	.word	0x1d731d1d
 8003664:	1d1d1d1d 	.word	0x1d1d1d1d
 8003668:	1d581d1d 	.word	0x1d581d1d
 800366c:	1d1d1d1d 	.word	0x1d1d1d1d
 8003670:	1d501d1d 	.word	0x1d501d1d
 8003674:	1d1d1d1d 	.word	0x1d1d1d1d
 8003678:	1d4a1d1d 	.word	0x1d4a1d1d
 800367c:	1d1d1d1d 	.word	0x1d1d1d1d
 8003680:	1d5d1d1d 	.word	0x1d5d1d1d
 8003684:	1d1d1d1d 	.word	0x1d1d1d1d
 8003688:	1d461d1d 	.word	0x1d461d1d
 800368c:	1d1d1d1d 	.word	0x1d1d1d1d
 8003690:	1d1d      	.short	0x1d1d
 8003692:	65          	.byte	0x65
 8003693:	00          	.byte	0x00
 8003694:	2300      	movs	r3, #0
 8003696:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003698:	68a2      	ldr	r2, [r4, #8]
 800369a:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800369c:	89e3      	ldrh	r3, [r4, #14]
 800369e:	3301      	adds	r3, #1
 80036a0:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80036a2:	b003      	add	sp, #12
 80036a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 80036a6:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 80036aa:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80036ac:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 80036b0:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 80036b2:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 80036b4:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 80036b6:	d948      	bls.n	800374a <MCP_ReceivedPacket+0x146>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 80036b8:	200d      	movs	r0, #13
 80036ba:	e7ed      	b.n	8003698 <MCP_ReceivedPacket+0x94>
    switch (command)
 80036bc:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 80036c0:	d008      	beq.n	80036d4 <MCP_ReceivedPacket+0xd0>
 80036c2:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 80036c6:	d1e5      	bne.n	8003694 <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 80036c8:	4638      	mov	r0, r7
 80036ca:	f7ff f949 	bl	8002960 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036ce:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80036d0:	4628      	mov	r0, r5
        break;
 80036d2:	e7e1      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 80036d4:	68a3      	ldr	r3, [r4, #8]
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	4631      	mov	r1, r6
 80036da:	f104 030e 	add.w	r3, r4, #14
 80036de:	f7fe ffad 	bl	800263c <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036e2:	89e3      	ldrh	r3, [r4, #14]
        break;
 80036e4:	e7d8      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 80036e6:	4638      	mov	r0, r7
 80036e8:	f7ff f824 	bl	8002734 <MCI_GetSTMState>
 80036ec:	b128      	cbz	r0, 80036fa <MCP_ReceivedPacket+0xf6>
          (void)MCI_StopMotor(pMCI);
 80036ee:	4638      	mov	r0, r7
 80036f0:	f7ff f83c 	bl	800276c <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80036f4:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80036f6:	2000      	movs	r0, #0
 80036f8:	e7ce      	b.n	8003698 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 80036fa:	4638      	mov	r0, r7
 80036fc:	f7ff f820 	bl	8002740 <MCI_StartMotor>
 8003700:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003704:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8003706:	b2c0      	uxtb	r0, r0
 8003708:	e7c6      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 800370a:	4620      	mov	r0, r4
 800370c:	f7ff ff34 	bl	8003578 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003710:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003712:	e7c1      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8003714:	4638      	mov	r0, r7
 8003716:	f7ff f80d 	bl	8002734 <MCI_GetSTMState>
 800371a:	2806      	cmp	r0, #6
 800371c:	d021      	beq.n	8003762 <MCP_ReceivedPacket+0x15e>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800371e:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8003720:	2000      	movs	r0, #0
 8003722:	e7b9      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8003724:	4638      	mov	r0, r7
 8003726:	f7ff f83d 	bl	80027a4 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800372a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800372c:	2000      	movs	r0, #0
        break;
 800372e:	e7b3      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8003730:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8003732:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8003734:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8003736:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8003738:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800373a:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800373c:	2000      	movs	r0, #0
        break;
 800373e:	e7ab      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8003740:	4620      	mov	r0, r4
 8003742:	f7ff fea9 	bl	8003498 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003746:	89e3      	ldrh	r3, [r4, #14]
        break;
 8003748:	e7a6      	b.n	8003698 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 800374a:	4b0b      	ldr	r3, [pc, #44]	@ (8003778 <MCP_ReceivedPacket+0x174>)
 800374c:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8003750:	b16d      	cbz	r5, 800376e <MCP_ReceivedPacket+0x16a>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8003752:	68a3      	ldr	r3, [r4, #8]
 8003754:	9300      	str	r3, [sp, #0]
 8003756:	4631      	mov	r1, r6
 8003758:	f104 030e 	add.w	r3, r4, #14
 800375c:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800375e:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8003760:	e79a      	b.n	8003698 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8003762:	4638      	mov	r0, r7
 8003764:	f7ff f866 	bl	8002834 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8003768:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 800376a:	2000      	movs	r0, #0
 800376c:	e794      	b.n	8003698 <MCP_ReceivedPacket+0x94>
 800376e:	462b      	mov	r3, r5
 8003770:	e7a2      	b.n	80036b8 <MCP_ReceivedPacket+0xb4>
 8003772:	bf00      	nop
 8003774:	20000004 	.word	0x20000004
 8003778:	20000a2c 	.word	0x20000a2c

0800377c <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 800377c:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 800377e:	f004 fff3 	bl	8008768 <HAL_RCC_GetHCLKFreq>
 8003782:	4b0a      	ldr	r3, [pc, #40]	@ (80037ac <MX_MotorControl_Init+0x30>)
 8003784:	fba3 3000 	umull	r3, r0, r3, r0
 8003788:	09c0      	lsrs	r0, r0, #7
 800378a:	f003 faf7 	bl	8006d7c <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <MX_MotorControl_Init+0x34>)
 8003790:	2200      	movs	r2, #0
 8003792:	6819      	ldr	r1, [r3, #0]
 8003794:	f04f 30ff 	mov.w	r0, #4294967295
 8003798:	f003 fa94 	bl	8006cc4 <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 800379c:	4805      	ldr	r0, [pc, #20]	@ (80037b4 <MX_MotorControl_Init+0x38>)
 800379e:	f7ff f993 	bl	8002ac8 <MCboot>
  mc_lock_pins();
}
 80037a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80037a6:	f7ff bac3 	b.w	8002d30 <mc_lock_pins>
 80037aa:	bf00      	nop
 80037ac:	10624dd3 	.word	0x10624dd3
 80037b0:	200004f8 	.word	0x200004f8
 80037b4:	20001bb8 	.word	0x20001bb8

080037b8 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 80037b8:	4922      	ldr	r1, [pc, #136]	@ (8003844 <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 80037ba:	4a23      	ldr	r2, [pc, #140]	@ (8003848 <startTimers+0x90>)
 80037bc:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 80037be:	b410      	push	{r4}
 80037c0:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 80037c4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037c8:	f043 0310 	orr.w	r3, r3, #16
 80037cc:	b083      	sub	sp, #12
 80037ce:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 80037d0:	688b      	ldr	r3, [r1, #8]
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d6:	f023 0307 	bic.w	r3, r3, #7
 80037da:	f043 0306 	orr.w	r3, r3, #6
 80037de:	608b      	str	r3, [r1, #8]
 80037e0:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80037e2:	07db      	lsls	r3, r3, #31
 80037e4:	d416      	bmi.n	8003814 <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 80037e6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80037e8:	f043 0301 	orr.w	r3, r3, #1
 80037ec:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80037ee:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80037f0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80037f4:	f003 0301 	and.w	r3, r3, #1
 80037f8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 80037fa:	9b01      	ldr	r3, [sp, #4]
 80037fc:	694b      	ldr	r3, [r1, #20]
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8003804:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8003806:	f023 0301 	bic.w	r3, r3, #1
 800380a:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 800380c:	b003      	add	sp, #12
 800380e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003812:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8003814:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003818:	480c      	ldr	r0, [pc, #48]	@ (800384c <startTimers+0x94>)
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	6859      	ldr	r1, [r3, #4]
 800381e:	4c0c      	ldr	r4, [pc, #48]	@ (8003850 <startTimers+0x98>)
 8003820:	4001      	ands	r1, r0
 8003822:	f041 0120 	orr.w	r1, r1, #32
 8003826:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003828:	6959      	ldr	r1, [r3, #20]
 800382a:	f041 0101 	orr.w	r1, r1, #1
 800382e:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003830:	6859      	ldr	r1, [r3, #4]
 8003832:	4022      	ands	r2, r4
 8003834:	4001      	ands	r1, r0
 8003836:	430a      	orrs	r2, r1
 8003838:	605a      	str	r2, [r3, #4]
}
 800383a:	b003      	add	sp, #12
 800383c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	40012c00 	.word	0x40012c00
 8003848:	40021000 	.word	0x40021000
 800384c:	fdffff8f 	.word	0xfdffff8f
 8003850:	02000070 	.word	0x02000070

08003854 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8003854:	3201      	adds	r2, #1
{
 8003856:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8003858:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800385a:	f06f 0602 	mvn.w	r6, #2
 800385e:	0155      	lsls	r5, r2, #5
 8003860:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8003862:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8003864:	f893 c000 	ldrb.w	ip, [r3]
 8003868:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 800386c:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8003870:	d80c      	bhi.n	800388c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8003872:	6904      	ldr	r4, [r0, #16]
 8003874:	07a4      	lsls	r4, r4, #30
 8003876:	d5f5      	bpl.n	8003864 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8003878:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800387c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800387e:	6106      	str	r6, [r0, #16]
 8003880:	d8f0      	bhi.n	8003864 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8003882:	781c      	ldrb	r4, [r3, #0]
 8003884:	2c0f      	cmp	r4, #15
 8003886:	d8ed      	bhi.n	8003864 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8003888:	2301      	movs	r3, #1
 800388a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 800388c:	bd70      	pop	{r4, r5, r6, pc}
 800388e:	bf00      	nop

08003890 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8003890:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8003892:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8003896:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800389a:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800389e:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80038a0:	fb04 fc0c 	mul.w	ip, r4, ip
 80038a4:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 80038a8:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 80038ac:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 80038b0:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80038b4:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 80038b8:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 80038bc:	1c55      	adds	r5, r2, #1
{
 80038be:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80038c0:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 80038c4:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 80038c8:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 80038cc:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 80038d0:	db6b      	blt.n	80039aa <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 80038d2:	1c5d      	adds	r5, r3, #1
 80038d4:	db3d      	blt.n	8003952 <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80038d6:	ebbe 0e01 	subs.w	lr, lr, r1
 80038da:	bf44      	itt	mi
 80038dc:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80038e0:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	bfbc      	itt	lt
 80038e8:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 80038ec:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 80038f0:	2a00      	cmp	r2, #0
 80038f2:	bfb8      	it	lt
 80038f4:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 80038f8:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80038fc:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8003900:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8003904:	bfb8      	it	lt
 8003906:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 800390a:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 800390e:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8003912:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8003916:	2900      	cmp	r1, #0
 8003918:	d16e      	bne.n	80039f8 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 800391a:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 800391e:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 8003922:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 8003924:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003928:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 800392a:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800392e:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003932:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003936:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 800393a:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 800393e:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8003942:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8003946:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 800394a:	b003      	add	sp, #12
 800394c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8003950:	4708      	bx	r1
        if ( wX <= 0 )
 8003952:	f1bc 0f00 	cmp.w	ip, #0
 8003956:	dd7b      	ble.n	8003a50 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8003958:	2b00      	cmp	r3, #0
 800395a:	bfb8      	it	lt
 800395c:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8003960:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 8003964:	bfb8      	it	lt
 8003966:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 800396a:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800396e:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003972:	bfb8      	it	lt
 8003974:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8003978:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 800397c:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8003980:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003984:	bfb8      	it	lt
 8003986:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 800398a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 800398e:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8003992:	2900      	cmp	r1, #0
 8003994:	f040 80ae 	bne.w	8003af4 <PWMC_SetPhaseVoltage+0x264>
 8003998:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 800399c:	2c00      	cmp	r4, #0
 800399e:	f000 80b9 	beq.w	8003b14 <PWMC_SetPhaseVoltage+0x284>
 80039a2:	f04f 0c02 	mov.w	ip, #2
 80039a6:	2401      	movs	r4, #1
 80039a8:	e7bc      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 80039ae:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 80039b2:	db70      	blt.n	8003a96 <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 80039b4:	f1bc 0f00 	cmp.w	ip, #0
 80039b8:	dd23      	ble.n	8003a02 <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80039ba:	ebbe 0e0c 	subs.w	lr, lr, ip
 80039be:	bf44      	itt	mi
 80039c0:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 80039c4:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80039c8:	2a00      	cmp	r2, #0
 80039ca:	bfb8      	it	lt
 80039cc:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80039d0:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80039d4:	bfb8      	it	lt
 80039d6:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 80039da:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 80039dc:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 80039e0:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 80039e4:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 80039e8:	2d00      	cmp	r5, #0
 80039ea:	d17e      	bne.n	8003aea <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80039ec:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 80039f0:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 80039f2:	fa1f f18e 	uxth.w	r1, lr
 80039f6:	e795      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
 80039f8:	f04f 0c02 	mov.w	ip, #2
 80039fc:	2400      	movs	r4, #0
 80039fe:	2101      	movs	r1, #1
 8003a00:	e790      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003a02:	ebbc 0101 	subs.w	r1, ip, r1
 8003a06:	bf44      	itt	mi
 8003a08:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8003a0c:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	bfb8      	it	lt
 8003a14:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8003a18:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8003a1c:	bfb8      	it	lt
 8003a1e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 8003a22:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8003a26:	f1bc 0200 	subs.w	r2, ip, #0
 8003a2a:	bfb8      	it	lt
 8003a2c:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003a30:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 8003a34:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003a38:	bfb8      	it	lt
 8003a3a:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8003a3e:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 8003a42:	2d00      	cmp	r5, #0
 8003a44:	d060      	beq.n	8003b08 <PWMC_SetPhaseVoltage+0x278>
 8003a46:	f04f 0c00 	mov.w	ip, #0
 8003a4a:	2401      	movs	r4, #1
 8003a4c:	2102      	movs	r1, #2
 8003a4e:	e769      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 8003a50:	2a00      	cmp	r2, #0
 8003a52:	bfb8      	it	lt
 8003a54:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8003a58:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8003a5c:	bfb8      	it	lt
 8003a5e:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8003a62:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 8003a66:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8003a6a:	f1bc 0300 	subs.w	r3, ip, #0
 8003a6e:	bfb8      	it	lt
 8003a70:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8003a74:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 8003a78:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 8003a7c:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8003a80:	bfb8      	it	lt
 8003a82:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 8003a86:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8003a8a:	b3c1      	cbz	r1, 8003afe <PWMC_SetPhaseVoltage+0x26e>
 8003a8c:	f04f 0c01 	mov.w	ip, #1
 8003a90:	2402      	movs	r4, #2
 8003a92:	2100      	movs	r1, #0
 8003a94:	e746      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003a96:	ebbe 0e01 	subs.w	lr, lr, r1
 8003a9a:	bf44      	itt	mi
 8003a9c:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003aa0:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	bfbc      	itt	lt
 8003aa8:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8003aac:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003ab0:	2a00      	cmp	r2, #0
 8003ab2:	bfb8      	it	lt
 8003ab4:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8003ab8:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 8003abc:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003ac0:	bfb8      	it	lt
 8003ac2:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 8003ac6:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8003aca:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003ace:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8003ad2:	b92d      	cbnz	r5, 8003ae0 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003ad4:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 8003ad8:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 8003adc:	b299      	uxth	r1, r3
 8003ade:	e721      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
 8003ae0:	f04f 0c01 	mov.w	ip, #1
 8003ae4:	2400      	movs	r4, #0
 8003ae6:	2102      	movs	r1, #2
 8003ae8:	e71c      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
 8003aea:	f04f 0c00 	mov.w	ip, #0
 8003aee:	2402      	movs	r4, #2
 8003af0:	2101      	movs	r1, #1
 8003af2:	e717      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
 8003af4:	f04f 0c02 	mov.w	ip, #2
 8003af8:	2401      	movs	r4, #1
 8003afa:	2100      	movs	r1, #0
 8003afc:	e712      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003afe:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 8003b02:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 8003b04:	b299      	uxth	r1, r3
 8003b06:	e70d      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8003b08:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 8003b0c:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 8003b0e:	fa1f f18e 	uxth.w	r1, lr
 8003b12:	e707      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 8003b14:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8003b18:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8003b1a:	b291      	uxth	r1, r2
 8003b1c:	e702      	b.n	8003924 <PWMC_SetPhaseVoltage+0x94>
 8003b1e:	bf00      	nop

08003b20 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8003b20:	6843      	ldr	r3, [r0, #4]
 8003b22:	4718      	bx	r3

08003b24 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8003b24:	6883      	ldr	r3, [r0, #8]
 8003b26:	4718      	bx	r3

08003b28 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003b28:	b510      	push	{r4, lr}
 8003b2a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003b2c:	b179      	cbz	r1, 8003b4e <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8003b2e:	2901      	cmp	r1, #1
 8003b30:	d001      	beq.n	8003b36 <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 8003b32:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8003b34:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8003b36:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8003b3a:	b16b      	cbz	r3, 8003b58 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d1f4      	bne.n	8003b32 <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8003b48:	68c3      	ldr	r3, [r0, #12]
 8003b4a:	4798      	blx	r3
          retVal = true;
 8003b4c:	e004      	b.n	8003b58 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8003b4e:	f7ff ffe7 	bl	8003b20 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8003b52:	68e3      	ldr	r3, [r4, #12]
 8003b54:	4620      	mov	r0, r4
 8003b56:	4798      	blx	r3
      retVal = true;
 8003b58:	2001      	movs	r0, #1
}
 8003b5a:	bd10      	pop	{r4, pc}

08003b5c <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8003b5c:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 8003b60:	b91b      	cbnz	r3, 8003b6a <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 8003b62:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d004      	beq.n	8003b74 <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003b70:	3078      	adds	r0, #120	@ 0x78
 8003b72:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8003b74:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8003b78:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003b7a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8003b7c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003b80:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 8003b82:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003b86:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8003b8a:	628c      	str	r4, [r1, #40]	@ 0x28
 8003b8c:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 8003b94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003b98:	3078      	adds	r0, #120	@ 0x78
 8003b9a:	4770      	bx	lr

08003b9c <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003b9c:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8003b9e:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8003ba0:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003ba4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003ba8:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003baa:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8003bac:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8003bb0:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 8003bb4:	4770      	bx	lr
 8003bb6:	bf00      	nop

08003bb8 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 8003bb8:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 8003bba:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 8003bbe:	b1a8      	cbz	r0, 8003bec <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8003bc6:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 8003bc8:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 8003bca:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 8003bce:	b11a      	cbz	r2, 8003bd8 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 8003bd6:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 8003bd8:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 8003bdc:	b12a      	cbz	r2, 8003bea <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 8003bde:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 8003be2:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 8003be4:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 8003be6:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 8003bea:	4770      	bx	lr
 8003bec:	2140      	movs	r1, #64	@ 0x40
 8003bee:	e7ec      	b.n	8003bca <PWMC_IsFaultOccurred+0x12>

08003bf0 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 8003bf0:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 8003bf2:	3908      	subs	r1, #8
{
 8003bf4:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 8003bf8:	2920      	cmp	r1, #32
 8003bfa:	d812      	bhi.n	8003c22 <RI_SetRegisterGlobal+0x32>
 8003bfc:	e8df f001 	tbb	[pc, r1]
 8003c00:	11111117 	.word	0x11111117
 8003c04:	11111111 	.word	0x11111111
 8003c08:	11111121 	.word	0x11111121
 8003c0c:	11111111 	.word	0x11111111
 8003c10:	1111112f 	.word	0x1111112f
 8003c14:	11111111 	.word	0x11111111
 8003c18:	11111139 	.word	0x11111139
 8003c1c:	11111111 	.word	0x11111111
 8003c20:	4d          	.byte	0x4d
 8003c21:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003c22:	2200      	movs	r2, #0
 8003c24:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003c26:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8003c28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003c2c:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8003c2e:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8003c30:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 8003c34:	bf14      	ite	ne
 8003c36:	2005      	movne	r0, #5
 8003c38:	2004      	moveq	r0, #4
}
 8003c3a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8003c3e:	801a      	strh	r2, [r3, #0]
}
 8003c40:	4770      	bx	lr
      switch (regID)
 8003c42:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003c46:	d039      	beq.n	8003cbc <RI_SetRegisterGlobal+0xcc>
 8003c48:	d942      	bls.n	8003cd0 <RI_SetRegisterGlobal+0xe0>
 8003c4a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003c4e:	d035      	beq.n	8003cbc <RI_SetRegisterGlobal+0xcc>
 8003c50:	f641 3258 	movw	r2, #7000	@ 0x1b58
 8003c54:	4290      	cmp	r0, r2
 8003c56:	bf14      	ite	ne
 8003c58:	2005      	movne	r0, #5
 8003c5a:	2004      	moveq	r0, #4
 8003c5c:	e02f      	b.n	8003cbe <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 8003c5e:	2818      	cmp	r0, #24
      *size = 4;
 8003c60:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 8003c64:	bf14      	ite	ne
 8003c66:	2005      	movne	r0, #5
 8003c68:	4610      	moveq	r0, r2
}
 8003c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8003c6e:	801a      	strh	r2, [r3, #0]
}
 8003c70:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 8003c72:	2101      	movs	r1, #1
 8003c74:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003c76:	f992 0000 	ldrsb.w	r0, [r2]
 8003c7a:	b328      	cbz	r0, 8003cc8 <RI_SetRegisterGlobal+0xd8>
 8003c7c:	fa1f f08c 	uxth.w	r0, ip
 8003c80:	e003      	b.n	8003c8a <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8003c82:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003c84:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8003c88:	b1f4      	cbz	r4, 8003cc8 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8003c8a:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003c8e:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8003c90:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003c94:	d3f5      	bcc.n	8003c82 <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 8003c96:	2004      	movs	r0, #4
 8003c98:	e7c6      	b.n	8003c28 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8003c9a:	8812      	ldrh	r2, [r2, #0]
 8003c9c:	3202      	adds	r2, #2
 8003c9e:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003ca0:	fa1f fc8c 	uxth.w	ip, ip
 8003ca4:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 8003ca6:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8003ca8:	d81a      	bhi.n	8003ce0 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8003caa:	28a8      	cmp	r0, #168	@ 0xa8
 8003cac:	d0f3      	beq.n	8003c96 <RI_SetRegisterGlobal+0xa6>
 8003cae:	d81b      	bhi.n	8003ce8 <RI_SetRegisterGlobal+0xf8>
 8003cb0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003cb4:	2828      	cmp	r0, #40	@ 0x28
 8003cb6:	d0ee      	beq.n	8003c96 <RI_SetRegisterGlobal+0xa6>
 8003cb8:	2005      	movs	r0, #5
 8003cba:	e7b5      	b.n	8003c28 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 8003cbc:	2000      	movs	r0, #0
      *size = 2;
 8003cbe:	2202      	movs	r2, #2
}
 8003cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 8003cc4:	801a      	strh	r2, [r3, #0]
}
 8003cc6:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 8003ccc:	2004      	movs	r0, #4
 8003cce:	e7ab      	b.n	8003c28 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 8003cd0:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003cd4:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003cd8:	bf14      	ite	ne
 8003cda:	2005      	movne	r0, #5
 8003cdc:	2004      	moveq	r0, #4
 8003cde:	e7ee      	b.n	8003cbe <RI_SetRegisterGlobal+0xce>
        *size = 0;
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 8003ce4:	200a      	movs	r0, #10
 8003ce6:	e79f      	b.n	8003c28 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 8003ce8:	28e8      	cmp	r0, #232	@ 0xe8
 8003cea:	d1e5      	bne.n	8003cb8 <RI_SetRegisterGlobal+0xc8>
 8003cec:	e7d3      	b.n	8003c96 <RI_SetRegisterGlobal+0xa6>
 8003cee:	bf00      	nop

08003cf0 <RI_SetRegisterMotor1>:
{
 8003cf0:	b530      	push	{r4, r5, lr}
 8003cf2:	b083      	sub	sp, #12
  switch(typeID)
 8003cf4:	3908      	subs	r1, #8
{
 8003cf6:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 8003cfa:	4694      	mov	ip, r2
 8003cfc:	461c      	mov	r4, r3
  switch(typeID)
 8003cfe:	2920      	cmp	r1, #32
 8003d00:	d812      	bhi.n	8003d28 <RI_SetRegisterMotor1+0x38>
 8003d02:	e8df f001 	tbb	[pc, r1]
 8003d06:	1116      	.short	0x1116
 8003d08:	11111111 	.word	0x11111111
 8003d0c:	11231111 	.word	0x11231111
 8003d10:	11111111 	.word	0x11111111
 8003d14:	11581111 	.word	0x11581111
 8003d18:	11111111 	.word	0x11111111
 8003d1c:	11461111 	.word	0x11461111
 8003d20:	11111111 	.word	0x11111111
 8003d24:	1111      	.short	0x1111
 8003d26:	65          	.byte	0x65
 8003d27:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003d28:	2300      	movs	r3, #0
 8003d2a:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003d2c:	2007      	movs	r0, #7
}
 8003d2e:	b003      	add	sp, #12
 8003d30:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003d32:	2888      	cmp	r0, #136	@ 0x88
 8003d34:	f000 8098 	beq.w	8003e68 <RI_SetRegisterMotor1+0x178>
 8003d38:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8003d3c:	2848      	cmp	r0, #72	@ 0x48
 8003d3e:	bf0c      	ite	eq
 8003d40:	2004      	moveq	r0, #4
 8003d42:	2005      	movne	r0, #5
      *size = 1;
 8003d44:	2301      	movs	r3, #1
 8003d46:	8023      	strh	r3, [r4, #0]
}
 8003d48:	b003      	add	sp, #12
 8003d4a:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003d4c:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003d50:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 8003d52:	f000 8214 	beq.w	800417e <RI_SetRegisterMotor1+0x48e>
 8003d56:	d85e      	bhi.n	8003e16 <RI_SetRegisterMotor1+0x126>
 8003d58:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003d5c:	f000 820a 	beq.w	8004174 <RI_SetRegisterMotor1+0x484>
 8003d60:	f240 80bb 	bls.w	8003eda <RI_SetRegisterMotor1+0x1ea>
 8003d64:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003d68:	f000 81ee 	beq.w	8004148 <RI_SetRegisterMotor1+0x458>
 8003d6c:	f200 817e 	bhi.w	800406c <RI_SetRegisterMotor1+0x37c>
 8003d70:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8003d74:	f000 81c5 	beq.w	8004102 <RI_SetRegisterMotor1+0x412>
 8003d78:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8003d7c:	f000 81b4 	beq.w	80040e8 <RI_SetRegisterMotor1+0x3f8>
 8003d80:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003d84:	f040 81ae 	bne.w	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8003d88:	48b2      	ldr	r0, [pc, #712]	@ (8004054 <RI_SetRegisterMotor1+0x364>)
 8003d8a:	b229      	sxth	r1, r5
 8003d8c:	f006 f802 	bl	8009d94 <PID_SetKI>
          break;
 8003d90:	e061      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
  *size= 1U ; /* /0 is the min String size */
 8003d92:	2201      	movs	r2, #1
 8003d94:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003d96:	f99c 3000 	ldrsb.w	r3, [ip]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d036      	beq.n	8003e0c <RI_SetRegisterMotor1+0x11c>
 8003d9e:	fa1f f38e 	uxth.w	r3, lr
 8003da2:	e003      	b.n	8003dac <RI_SetRegisterMotor1+0xbc>
    *size = *size + 1U;
 8003da4:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003da6:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003daa:	b379      	cbz	r1, 8003e0c <RI_SetRegisterMotor1+0x11c>
    *size = *size + 1U;
 8003dac:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003dae:	4293      	cmp	r3, r2
    *size = *size + 1U;
 8003db0:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003db2:	d8f7      	bhi.n	8003da4 <RI_SetRegisterMotor1+0xb4>
 8003db4:	e02d      	b.n	8003e12 <RI_SetRegisterMotor1+0x122>
      switch (regID)
 8003db6:	2898      	cmp	r0, #152	@ 0x98
 8003db8:	d066      	beq.n	8003e88 <RI_SetRegisterMotor1+0x198>
 8003dba:	d85d      	bhi.n	8003e78 <RI_SetRegisterMotor1+0x188>
 8003dbc:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_RO_REG;
 8003dc0:	2818      	cmp	r0, #24
 8003dc2:	bf14      	ite	ne
 8003dc4:	2005      	movne	r0, #5
 8003dc6:	2004      	moveq	r0, #4
      *size = 4;
 8003dc8:	2304      	movs	r3, #4
 8003dca:	8023      	strh	r3, [r4, #0]
}
 8003dcc:	b003      	add	sp, #12
 8003dce:	bd30      	pop	{r4, r5, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003dd0:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 8003dd2:	1c8a      	adds	r2, r1, #2
 8003dd4:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003dd6:	fa1f f38e 	uxth.w	r3, lr
 8003dda:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 8003ddc:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 8003dde:	d83f      	bhi.n	8003e60 <RI_SetRegisterMotor1+0x170>
        switch (regID)
 8003de0:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003de4:	f000 80c3 	beq.w	8003f6e <RI_SetRegisterMotor1+0x27e>
 8003de8:	f200 80a6 	bhi.w	8003f38 <RI_SetRegisterMotor1+0x248>
 8003dec:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003df0:	f000 8088 	beq.w	8003f04 <RI_SetRegisterMotor1+0x214>
 8003df4:	f200 80af 	bhi.w	8003f56 <RI_SetRegisterMotor1+0x266>
 8003df8:	28a8      	cmp	r0, #168	@ 0xa8
 8003dfa:	d00a      	beq.n	8003e12 <RI_SetRegisterMotor1+0x122>
 8003dfc:	f200 81b6 	bhi.w	800416c <RI_SetRegisterMotor1+0x47c>
 8003e00:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 8003e04:	2828      	cmp	r0, #40	@ 0x28
 8003e06:	d004      	beq.n	8003e12 <RI_SetRegisterMotor1+0x122>
 8003e08:	2005      	movs	r0, #5
 8003e0a:	e790      	b.n	8003d2e <RI_SetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 8003e12:	2004      	movs	r0, #4
 8003e14:	e78b      	b.n	8003d2e <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 8003e16:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003e1a:	4298      	cmp	r0, r3
 8003e1c:	f000 81a1 	beq.w	8004162 <RI_SetRegisterMotor1+0x472>
 8003e20:	d840      	bhi.n	8003ea4 <RI_SetRegisterMotor1+0x1b4>
 8003e22:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003e26:	4298      	cmp	r0, r3
 8003e28:	f000 8170 	beq.w	800410c <RI_SetRegisterMotor1+0x41c>
 8003e2c:	f240 80fc 	bls.w	8004028 <RI_SetRegisterMotor1+0x338>
 8003e30:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003e34:	4298      	cmp	r0, r3
 8003e36:	f000 81c7 	beq.w	80041c8 <RI_SetRegisterMotor1+0x4d8>
 8003e3a:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003e3e:	4298      	cmp	r0, r3
 8003e40:	f000 81b8 	beq.w	80041b4 <RI_SetRegisterMotor1+0x4c4>
 8003e44:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003e48:	4298      	cmp	r0, r3
 8003e4a:	f040 814b 	bne.w	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003e4e:	4882      	ldr	r0, [pc, #520]	@ (8004058 <RI_SetRegisterMotor1+0x368>)
 8003e50:	4629      	mov	r1, r5
 8003e52:	f005 ffbb 	bl	8009dcc <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 8003e56:	2000      	movs	r0, #0
      *size = 2;
 8003e58:	2302      	movs	r3, #2
 8003e5a:	8023      	strh	r3, [r4, #0]
}
 8003e5c:	b003      	add	sp, #12
 8003e5e:	bd30      	pop	{r4, r5, pc}
        *size = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8003e64:	200a      	movs	r0, #10
 8003e66:	e762      	b.n	8003d2e <RI_SetRegisterMotor1+0x3e>
          uint8_t regdata8 = *data;
 8003e68:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8003e6a:	2b04      	cmp	r3, #4
 8003e6c:	d05b      	beq.n	8003f26 <RI_SetRegisterMotor1+0x236>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003e6e:	2b03      	cmp	r3, #3
 8003e70:	f000 8125 	beq.w	80040be <RI_SetRegisterMotor1+0x3ce>
  uint8_t retVal = MCP_CMD_OK;
 8003e74:	2000      	movs	r0, #0
 8003e76:	e765      	b.n	8003d44 <RI_SetRegisterMotor1+0x54>
      switch (regID)
 8003e78:	28d8      	cmp	r0, #216	@ 0xd8
 8003e7a:	d052      	beq.n	8003f22 <RI_SetRegisterMotor1+0x232>
          retVal = MCP_ERROR_RO_REG;
 8003e7c:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8003e80:	bf14      	ite	ne
 8003e82:	2005      	movne	r0, #5
 8003e84:	2004      	moveq	r0, #4
 8003e86:	e79f      	b.n	8003dc8 <RI_SetRegisterMotor1+0xd8>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003e88:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003e8c:	4973      	ldr	r1, [pc, #460]	@ (800405c <RI_SetRegisterMotor1+0x36c>)
 8003e8e:	4874      	ldr	r0, [pc, #464]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 8003e90:	fb81 2103 	smull	r2, r1, r1, r3
 8003e94:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003e98:	2200      	movs	r2, #0
 8003e9a:	b209      	sxth	r1, r1
 8003e9c:	f7fe fbd4 	bl	8002648 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003ea0:	2000      	movs	r0, #0
          break;
 8003ea2:	e791      	b.n	8003dc8 <RI_SetRegisterMotor1+0xd8>
      switch (regID)
 8003ea4:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003ea8:	4298      	cmp	r0, r3
 8003eaa:	f000 8134 	beq.w	8004116 <RI_SetRegisterMotor1+0x426>
 8003eae:	f200 80ea 	bhi.w	8004086 <RI_SetRegisterMotor1+0x396>
 8003eb2:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003eb6:	4298      	cmp	r0, r3
 8003eb8:	f000 8137 	beq.w	800412a <RI_SetRegisterMotor1+0x43a>
 8003ebc:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003ec0:	4298      	cmp	r0, r3
 8003ec2:	f000 812d 	beq.w	8004120 <RI_SetRegisterMotor1+0x430>
 8003ec6:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003eca:	4298      	cmp	r0, r3
 8003ecc:	f040 810a 	bne.w	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8003ed0:	4860      	ldr	r0, [pc, #384]	@ (8004054 <RI_SetRegisterMotor1+0x364>)
 8003ed2:	4629      	mov	r1, r5
 8003ed4:	f005 ff96 	bl	8009e04 <PID_SetKDDivisorPOW2>
          break;
 8003ed8:	e7bd      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
      switch (regID)
 8003eda:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003ede:	f000 812e 	beq.w	800413e <RI_SetRegisterMotor1+0x44e>
 8003ee2:	f200 80e0 	bhi.w	80040a6 <RI_SetRegisterMotor1+0x3b6>
 8003ee6:	28d0      	cmp	r0, #208	@ 0xd0
 8003ee8:	f000 815a 	beq.w	80041a0 <RI_SetRegisterMotor1+0x4b0>
 8003eec:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003ef0:	f000 8151 	beq.w	8004196 <RI_SetRegisterMotor1+0x4a6>
 8003ef4:	2890      	cmp	r0, #144	@ 0x90
 8003ef6:	f040 80f5 	bne.w	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003efa:	4857      	ldr	r0, [pc, #348]	@ (8004058 <RI_SetRegisterMotor1+0x368>)
 8003efc:	b229      	sxth	r1, r5
 8003efe:	f005 ff47 	bl	8009d90 <PID_SetKP>
          break;
 8003f02:	e7a8      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8003f04:	f8dc 1002 	ldr.w	r1, [ip, #2]
 8003f08:	4b54      	ldr	r3, [pc, #336]	@ (800405c <RI_SetRegisterMotor1+0x36c>)
 8003f0a:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003f0e:	fb83 0301 	smull	r0, r3, r3, r1
 8003f12:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 8003f16:	4852      	ldr	r0, [pc, #328]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 8003f18:	b209      	sxth	r1, r1
 8003f1a:	f7fe fb95 	bl	8002648 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003f1e:	2000      	movs	r0, #0
 8003f20:	e705      	b.n	8003d2e <RI_SetRegisterMotor1+0x3e>
          retVal = MCP_ERROR_RO_REG;
 8003f22:	2004      	movs	r0, #4
 8003f24:	e750      	b.n	8003dc8 <RI_SetRegisterMotor1+0xd8>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8003f26:	484e      	ldr	r0, [pc, #312]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 8003f28:	f7fe fcea 	bl	8002900 <MCI_GetTeref>
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	4601      	mov	r1, r0
 8003f30:	484b      	ldr	r0, [pc, #300]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 8003f32:	f7fe fba3 	bl	800267c <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003f36:	e79d      	b.n	8003e74 <RI_SetRegisterMotor1+0x184>
        switch (regID)
 8003f38:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003f3c:	d06d      	beq.n	800401a <RI_SetRegisterMotor1+0x32a>
 8003f3e:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 8003f42:	f47f af61 	bne.w	8003e08 <RI_SetRegisterMotor1+0x118>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003f46:	4847      	ldr	r0, [pc, #284]	@ (8004064 <RI_SetRegisterMotor1+0x374>)
 8003f48:	f10c 0102 	add.w	r1, ip, #2
}
 8003f4c:	b003      	add	sp, #12
 8003f4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003f52:	f005 be49 	b.w	8009be8 <MCPA_cfgLog>
        switch (regID)
 8003f56:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003f5a:	f47f af55 	bne.w	8003e08 <RI_SetRegisterMotor1+0x118>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003f5e:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 8003f62:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 8003f66:	483e      	ldr	r0, [pc, #248]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 8003f68:	f7fe fb88 	bl	800267c <MCI_ExecTorqueRamp>
            break;
 8003f6c:	e7d7      	b.n	8003f1e <RI_SetRegisterMotor1+0x22e>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003f6e:	074b      	lsls	r3, r1, #29
 8003f70:	f47f af78 	bne.w	8003e64 <RI_SetRegisterMotor1+0x174>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8003f74:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003f76:	292f      	cmp	r1, #47	@ 0x2f
 8003f78:	f63f af74 	bhi.w	8003e64 <RI_SetRegisterMotor1+0x174>
              for (i = 0; i <nbrOfPhase; i++)
 8003f7c:	08c9      	lsrs	r1, r1, #3
 8003f7e:	d0ce      	beq.n	8003f1e <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003f80:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 8003f84:	4a35      	ldr	r2, [pc, #212]	@ (800405c <RI_SetRegisterMotor1+0x36c>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003f86:	f8bc 5008 	ldrh.w	r5, [ip, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003f8a:	fb82 4003 	smull	r4, r0, r2, r3
 8003f8e:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003f92:	4b35      	ldr	r3, [pc, #212]	@ (8004068 <RI_SetRegisterMotor1+0x378>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003f94:	f9bc 4006 	ldrsh.w	r4, [ip, #6]
 8003f98:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 8003f9a:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003f9c:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003f9e:	81d8      	strh	r0, [r3, #14]
 8003fa0:	d0bd      	beq.n	8003f1e <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003fa2:	f9bc 400a 	ldrsh.w	r4, [ip, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003fa6:	f9bc 500e 	ldrsh.w	r5, [ip, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003faa:	fb82 e004 	smull	lr, r0, r2, r4
 8003fae:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003fb2:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003fb4:	f8bc 4010 	ldrh.w	r4, [ip, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003fb8:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003fba:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003fbc:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 8003fbe:	d0ae      	beq.n	8003f1e <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003fc0:	f9bc 4012 	ldrsh.w	r4, [ip, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003fc4:	f9bc 5016 	ldrsh.w	r5, [ip, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003fc8:	fb82 e004 	smull	lr, r0, r2, r4
 8003fcc:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003fd0:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003fd2:	f8bc 4018 	ldrh.w	r4, [ip, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003fd6:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003fd8:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003fda:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 8003fdc:	d09f      	beq.n	8003f1e <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003fde:	f9bc 401a 	ldrsh.w	r4, [ip, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003fe2:	f9bc 501e 	ldrsh.w	r5, [ip, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003fe6:	fb82 e004 	smull	lr, r0, r2, r4
 8003fea:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 8003fee:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003ff0:	f8bc 4020 	ldrh.w	r4, [ip, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003ff4:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8003ff6:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003ff8:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 8003ffa:	d190      	bne.n	8003f1e <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003ffc:	f9bc 1022 	ldrsh.w	r1, [ip, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8004000:	f9bc 0026 	ldrsh.w	r0, [ip, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8004004:	fb82 4201 	smull	r4, r2, r2, r1
 8004008:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800400c:	f8bc 4028 	ldrh.w	r4, [ip, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8004010:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 8004012:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8004016:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 8004018:	e781      	b.n	8003f1e <RI_SetRegisterMotor1+0x22e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 800401a:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800401e:	4810      	ldr	r0, [pc, #64]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8004020:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8004022:	f7fe fb35 	bl	8002690 <MCI_SetCurrentReferences>
            break;
 8004026:	e77a      	b.n	8003f1e <RI_SetRegisterMotor1+0x22e>
      switch (regID)
 8004028:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 800402c:	f000 80d1 	beq.w	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004030:	d84e      	bhi.n	80040d0 <RI_SetRegisterMotor1+0x3e0>
 8004032:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8004036:	f040 80de 	bne.w	80041f6 <RI_SetRegisterMotor1+0x506>
          currComp = MCI_GetIqdref(pMCIN);
 800403a:	4809      	ldr	r0, [pc, #36]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 800403c:	f7fe fc42 	bl	80028c4 <MCI_GetIqdref>
 8004040:	4603      	mov	r3, r0
 8004042:	9301      	str	r3, [sp, #4]
          currComp.d = (int16_t)regdata16;
 8004044:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8004048:	4805      	ldr	r0, [pc, #20]	@ (8004060 <RI_SetRegisterMotor1+0x370>)
 800404a:	9901      	ldr	r1, [sp, #4]
 800404c:	f7fe fb20 	bl	8002690 <MCI_SetCurrentReferences>
          break;
 8004050:	e701      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
 8004052:	bf00      	nop
 8004054:	200002e4 	.word	0x200002e4
 8004058:	2000033c 	.word	0x2000033c
 800405c:	2aaaaaab 	.word	0x2aaaaaab
 8004060:	20000004 	.word	0x20000004
 8004064:	20000428 	.word	0x20000428
 8004068:	20000238 	.word	0x20000238
      switch (regID)
 800406c:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8004070:	d060      	beq.n	8004134 <RI_SetRegisterMotor1+0x444>
 8004072:	f200 80b0 	bhi.w	80041d6 <RI_SetRegisterMotor1+0x4e6>
 8004076:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 800407a:	d133      	bne.n	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 800407c:	4885      	ldr	r0, [pc, #532]	@ (8004294 <RI_SetRegisterMotor1+0x5a4>)
 800407e:	b229      	sxth	r1, r5
 8004080:	f005 fe88 	bl	8009d94 <PID_SetKI>
          break;
 8004084:	e6e7      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
      switch (regID)
 8004086:	f641 1310 	movw	r3, #6416	@ 0x1910
 800408a:	4298      	cmp	r0, r3
 800408c:	f000 808d 	beq.w	80041aa <RI_SetRegisterMotor1+0x4ba>
 8004090:	f200 80da 	bhi.w	8004248 <RI_SetRegisterMotor1+0x558>
 8004094:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8004098:	4298      	cmp	r0, r3
 800409a:	d123      	bne.n	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 800409c:	487d      	ldr	r0, [pc, #500]	@ (8004294 <RI_SetRegisterMotor1+0x5a4>)
 800409e:	4629      	mov	r1, r5
 80040a0:	f005 fe94 	bl	8009dcc <PID_SetKIDivisorPOW2>
          break;
 80040a4:	e6d7      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
      switch (regID)
 80040a6:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80040aa:	f000 8088 	beq.w	80041be <RI_SetRegisterMotor1+0x4ce>
 80040ae:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 80040b2:	d117      	bne.n	80040e4 <RI_SetRegisterMotor1+0x3f4>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 80040b4:	4878      	ldr	r0, [pc, #480]	@ (8004298 <RI_SetRegisterMotor1+0x5a8>)
 80040b6:	b229      	sxth	r1, r5
 80040b8:	f005 fe9c 	bl	8009df4 <PID_SetKD>
          break;
 80040bc:	e6cb      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80040be:	4877      	ldr	r0, [pc, #476]	@ (800429c <RI_SetRegisterMotor1+0x5ac>)
 80040c0:	f7fe fbd0 	bl	8002864 <MCI_GetMecSpeedRefUnit>
 80040c4:	2200      	movs	r2, #0
 80040c6:	4601      	mov	r1, r0
 80040c8:	4874      	ldr	r0, [pc, #464]	@ (800429c <RI_SetRegisterMotor1+0x5ac>)
 80040ca:	f7fe fabd 	bl	8002648 <MCI_ExecSpeedRamp>
 80040ce:	e6d1      	b.n	8003e74 <RI_SetRegisterMotor1+0x184>
      switch (regID)
 80040d0:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80040d4:	f43f aebf 	beq.w	8003e56 <RI_SetRegisterMotor1+0x166>
 80040d8:	f240 809c 	bls.w	8004214 <RI_SetRegisterMotor1+0x524>
 80040dc:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80040e0:	f43f aeb9 	beq.w	8003e56 <RI_SetRegisterMotor1+0x166>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80040e4:	2005      	movs	r0, #5
 80040e6:	e6b7      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80040e8:	aa01      	add	r2, sp, #4
 80040ea:	f10d 0102 	add.w	r1, sp, #2
 80040ee:	486c      	ldr	r0, [pc, #432]	@ (80042a0 <RI_SetRegisterMotor1+0x5b0>)
 80040f0:	f007 fba8 	bl	800b844 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 80040f4:	486a      	ldr	r0, [pc, #424]	@ (80042a0 <RI_SetRegisterMotor1+0x5b0>)
 80040f6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80040fa:	b229      	sxth	r1, r5
 80040fc:	f007 fbaa 	bl	800b854 <STO_PLL_SetObserverGains>
          break;
 8004100:	e6a9      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 8004102:	4868      	ldr	r0, [pc, #416]	@ (80042a4 <RI_SetRegisterMotor1+0x5b4>)
 8004104:	b229      	sxth	r1, r5
 8004106:	f005 fe75 	bl	8009df4 <PID_SetKD>
          break;
 800410a:	e6a4      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 800410c:	4866      	ldr	r0, [pc, #408]	@ (80042a8 <RI_SetRegisterMotor1+0x5b8>)
 800410e:	4629      	mov	r1, r5
 8004110:	f005 fe4e 	bl	8009db0 <PID_SetKPDivisorPOW2>
          break;
 8004114:	e69f      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8004116:	4860      	ldr	r0, [pc, #384]	@ (8004298 <RI_SetRegisterMotor1+0x5a8>)
 8004118:	4629      	mov	r1, r5
 800411a:	f005 fe73 	bl	8009e04 <PID_SetKDDivisorPOW2>
          break;
 800411e:	e69a      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8004120:	485d      	ldr	r0, [pc, #372]	@ (8004298 <RI_SetRegisterMotor1+0x5a8>)
 8004122:	4629      	mov	r1, r5
 8004124:	f005 fe52 	bl	8009dcc <PID_SetKIDivisorPOW2>
          break;
 8004128:	e695      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 800412a:	485b      	ldr	r0, [pc, #364]	@ (8004298 <RI_SetRegisterMotor1+0x5a8>)
 800412c:	4629      	mov	r1, r5
 800412e:	f005 fe3f 	bl	8009db0 <PID_SetKPDivisorPOW2>
          break;
 8004132:	e690      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8004134:	4857      	ldr	r0, [pc, #348]	@ (8004294 <RI_SetRegisterMotor1+0x5a4>)
 8004136:	b229      	sxth	r1, r5
 8004138:	f005 fe2a 	bl	8009d90 <PID_SetKP>
          break;
 800413c:	e68b      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 800413e:	4856      	ldr	r0, [pc, #344]	@ (8004298 <RI_SetRegisterMotor1+0x5a8>)
 8004140:	b229      	sxth	r1, r5
 8004142:	f005 fe25 	bl	8009d90 <PID_SetKP>
          break;
 8004146:	e686      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8004148:	aa01      	add	r2, sp, #4
 800414a:	f10d 0102 	add.w	r1, sp, #2
 800414e:	4854      	ldr	r0, [pc, #336]	@ (80042a0 <RI_SetRegisterMotor1+0x5b0>)
 8004150:	f007 fb78 	bl	800b844 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 8004154:	4852      	ldr	r0, [pc, #328]	@ (80042a0 <RI_SetRegisterMotor1+0x5b0>)
 8004156:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 800415a:	b22a      	sxth	r2, r5
 800415c:	f007 fb7a 	bl	800b854 <STO_PLL_SetObserverGains>
          break;
 8004160:	e679      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 8004162:	4850      	ldr	r0, [pc, #320]	@ (80042a4 <RI_SetRegisterMotor1+0x5b4>)
 8004164:	4629      	mov	r1, r5
 8004166:	f005 fe31 	bl	8009dcc <PID_SetKIDivisorPOW2>
          break;
 800416a:	e674      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
        switch (regID)
 800416c:	28e8      	cmp	r0, #232	@ 0xe8
 800416e:	f43f ae50 	beq.w	8003e12 <RI_SetRegisterMotor1+0x122>
 8004172:	e649      	b.n	8003e08 <RI_SetRegisterMotor1+0x118>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 8004174:	484b      	ldr	r0, [pc, #300]	@ (80042a4 <RI_SetRegisterMotor1+0x5b4>)
 8004176:	b229      	sxth	r1, r5
 8004178:	f005 fe0a 	bl	8009d90 <PID_SetKP>
          break;
 800417c:	e66b      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          currComp = MCI_GetIqdref(pMCIN);
 800417e:	4847      	ldr	r0, [pc, #284]	@ (800429c <RI_SetRegisterMotor1+0x5ac>)
 8004180:	f7fe fba0 	bl	80028c4 <MCI_GetIqdref>
 8004184:	4603      	mov	r3, r0
 8004186:	9301      	str	r3, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8004188:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 800418c:	4843      	ldr	r0, [pc, #268]	@ (800429c <RI_SetRegisterMotor1+0x5ac>)
 800418e:	9901      	ldr	r1, [sp, #4]
 8004190:	f7fe fa7e 	bl	8002690 <MCI_SetCurrentReferences>
          break;
 8004194:	e65f      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8004196:	4844      	ldr	r0, [pc, #272]	@ (80042a8 <RI_SetRegisterMotor1+0x5b8>)
 8004198:	b229      	sxth	r1, r5
 800419a:	f005 fe2b 	bl	8009df4 <PID_SetKD>
          break;
 800419e:	e65a      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80041a0:	4841      	ldr	r0, [pc, #260]	@ (80042a8 <RI_SetRegisterMotor1+0x5b8>)
 80041a2:	b229      	sxth	r1, r5
 80041a4:	f005 fdf6 	bl	8009d94 <PID_SetKI>
          break;
 80041a8:	e655      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 80041aa:	483a      	ldr	r0, [pc, #232]	@ (8004294 <RI_SetRegisterMotor1+0x5a4>)
 80041ac:	4629      	mov	r1, r5
 80041ae:	f005 fdff 	bl	8009db0 <PID_SetKPDivisorPOW2>
          break;
 80041b2:	e650      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80041b4:	483b      	ldr	r0, [pc, #236]	@ (80042a4 <RI_SetRegisterMotor1+0x5b4>)
 80041b6:	4629      	mov	r1, r5
 80041b8:	f005 fdfa 	bl	8009db0 <PID_SetKPDivisorPOW2>
          break;
 80041bc:	e64b      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 80041be:	4836      	ldr	r0, [pc, #216]	@ (8004298 <RI_SetRegisterMotor1+0x5a8>)
 80041c0:	b229      	sxth	r1, r5
 80041c2:	f005 fde7 	bl	8009d94 <PID_SetKI>
          break;
 80041c6:	e646      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80041c8:	4837      	ldr	r0, [pc, #220]	@ (80042a8 <RI_SetRegisterMotor1+0x5b8>)
 80041ca:	4629      	mov	r1, r5
 80041cc:	f005 fe1a 	bl	8009e04 <PID_SetKDDivisorPOW2>
          break;
 80041d0:	e641      	b.n	8003e56 <RI_SetRegisterMotor1+0x166>
      switch (regID)
 80041d2:	2004      	movs	r0, #4
 80041d4:	e640      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 80041d6:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80041da:	d0fa      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 80041dc:	d827      	bhi.n	800422e <RI_SetRegisterMotor1+0x53e>
 80041de:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80041e2:	d0f6      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 80041e4:	d84a      	bhi.n	800427c <RI_SetRegisterMotor1+0x58c>
 80041e6:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80041ea:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80041ee:	bf14      	ite	ne
 80041f0:	2005      	movne	r0, #5
 80041f2:	2004      	moveq	r0, #4
 80041f4:	e630      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 80041f6:	f4ff af75 	bcc.w	80040e4 <RI_SetRegisterMotor1+0x3f4>
 80041fa:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 80041fe:	d0e8      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004200:	d82d      	bhi.n	800425e <RI_SetRegisterMotor1+0x56e>
 8004202:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8004206:	d0e4      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004208:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 800420c:	bf14      	ite	ne
 800420e:	2005      	movne	r0, #5
 8004210:	2004      	moveq	r0, #4
 8004212:	e621      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 8004214:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8004218:	d0db      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 800421a:	d835      	bhi.n	8004288 <RI_SetRegisterMotor1+0x598>
 800421c:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8004220:	d0d7      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004222:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8004226:	bf14      	ite	ne
 8004228:	2005      	movne	r0, #5
 800422a:	2004      	moveq	r0, #4
 800422c:	e614      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 800422e:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8004232:	d0ce      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004234:	d81c      	bhi.n	8004270 <RI_SetRegisterMotor1+0x580>
 8004236:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 800423a:	d0ca      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 800423c:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8004240:	bf14      	ite	ne
 8004242:	2005      	movne	r0, #5
 8004244:	2004      	moveq	r0, #4
 8004246:	e607      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 8004248:	f641 2390 	movw	r3, #6800	@ 0x1a90
 800424c:	4298      	cmp	r0, r3
 800424e:	d0c0      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004250:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8004254:	4298      	cmp	r0, r3
 8004256:	bf14      	ite	ne
 8004258:	2005      	movne	r0, #5
 800425a:	2004      	moveq	r0, #4
 800425c:	e5fc      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 800425e:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8004262:	d0b6      	beq.n	80041d2 <RI_SetRegisterMotor1+0x4e2>
 8004264:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8004268:	bf14      	ite	ne
 800426a:	2005      	movne	r0, #5
 800426c:	2004      	moveq	r0, #4
 800426e:	e5f3      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 8004270:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8004274:	bf14      	ite	ne
 8004276:	2005      	movne	r0, #5
 8004278:	2004      	moveq	r0, #4
 800427a:	e5ed      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 800427c:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8004280:	bf14      	ite	ne
 8004282:	2005      	movne	r0, #5
 8004284:	2004      	moveq	r0, #4
 8004286:	e5e7      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 8004288:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 800428c:	bf14      	ite	ne
 800428e:	2005      	movne	r0, #5
 8004290:	2004      	moveq	r0, #4
 8004292:	e5e1      	b.n	8003e58 <RI_SetRegisterMotor1+0x168>
 8004294:	200000a0 	.word	0x200000a0
 8004298:	20000310 	.word	0x20000310
 800429c:	20000004 	.word	0x20000004
 80042a0:	2000006c 	.word	0x2000006c
 80042a4:	200002e4 	.word	0x200002e4
 80042a8:	2000033c 	.word	0x2000033c

080042ac <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80042ac:	b510      	push	{r4, lr}
    switch (typeID)
 80042ae:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 80042b2:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 80042b6:	f1bc 0f20 	cmp.w	ip, #32
 80042ba:	d812      	bhi.n	80042e2 <RI_GetRegisterGlobal+0x36>
 80042bc:	e8df f00c 	tbb	[pc, ip]
 80042c0:	1111111b 	.word	0x1111111b
 80042c4:	11111111 	.word	0x11111111
 80042c8:	11111127 	.word	0x11111127
 80042cc:	11111111 	.word	0x11111111
 80042d0:	11111122 	.word	0x11111122
 80042d4:	11111111 	.word	0x11111111
 80042d8:	11111135 	.word	0x11111135
 80042dc:	11111111 	.word	0x11111111
 80042e0:	13          	.byte	0x13
 80042e1:	00          	.byte	0x00
 80042e2:	2007      	movs	r0, #7
}
 80042e4:	bd10      	pop	{r4, pc}
        switch (regID)
 80042e6:	2828      	cmp	r0, #40	@ 0x28
 80042e8:	d029      	beq.n	800433e <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 80042ea:	8812      	ldrh	r2, [r2, #0]
 80042ec:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80042ee:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80042f0:	b292      	uxth	r2, r2
 80042f2:	801a      	strh	r2, [r3, #0]
}
 80042f4:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 80042f6:	f1be 0f00 	cmp.w	lr, #0
 80042fa:	dd1e      	ble.n	800433a <RI_GetRegisterGlobal+0x8e>
 80042fc:	2201      	movs	r2, #1
            *size= 0 ; /* */
 80042fe:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 8004300:	2005      	movs	r0, #5
}
 8004302:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 8004304:	f1be 0f03 	cmp.w	lr, #3
 8004308:	dd15      	ble.n	8004336 <RI_GetRegisterGlobal+0x8a>
 800430a:	2204      	movs	r2, #4
 800430c:	e7f7      	b.n	80042fe <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 800430e:	f1be 0f01 	cmp.w	lr, #1
 8004312:	dd10      	ble.n	8004336 <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 8004314:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8004318:	d05a      	beq.n	80043d0 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 800431a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 800431e:	bf14      	ite	ne
 8004320:	2005      	movne	r0, #5
 8004322:	2000      	moveq	r0, #0
          *size = 2;
 8004324:	2202      	movs	r2, #2
 8004326:	801a      	strh	r2, [r3, #0]
}
 8004328:	bd10      	pop	{r4, pc}
        switch (regID)
 800432a:	2820      	cmp	r0, #32
 800432c:	d02c      	beq.n	8004388 <RI_GetRegisterGlobal+0xdc>
 800432e:	2860      	cmp	r0, #96	@ 0x60
 8004330:	d00f      	beq.n	8004352 <RI_GetRegisterGlobal+0xa6>
 8004332:	2200      	movs	r2, #0
 8004334:	e7e3      	b.n	80042fe <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004336:	2008      	movs	r0, #8
}
 8004338:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800433a:	4608      	mov	r0, r1
}
 800433c:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800433e:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8004342:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004344:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8004348:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800434a:	d835      	bhi.n	80043b8 <RI_GetRegisterGlobal+0x10c>
 800434c:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800434e:	2008      	movs	r0, #8
 8004350:	e7cf      	b.n	80042f2 <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004352:	4c20      	ldr	r4, [pc, #128]	@ (80043d4 <RI_GetRegisterGlobal+0x128>)
 8004354:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8004358:	2101      	movs	r1, #1
 800435a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800435c:	b180      	cbz	r0, 8004380 <RI_GetRegisterGlobal+0xd4>
 800435e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8004362:	46a4      	mov	ip, r4
 8004364:	e008      	b.n	8004378 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 8004366:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800436a:	8819      	ldrh	r1, [r3, #0]
 800436c:	3101      	adds	r1, #1
 800436e:	b289      	uxth	r1, r1
 8004370:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004372:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8004376:	b118      	cbz	r0, 8004380 <RI_GetRegisterGlobal+0xd4>
 8004378:	4571      	cmp	r1, lr
 800437a:	d3f4      	bcc.n	8004366 <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 800437c:	2006      	movs	r0, #6
}
 800437e:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8004380:	2300      	movs	r3, #0
 8004382:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 8004384:	2000      	movs	r0, #0
}
 8004386:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004388:	4c13      	ldr	r4, [pc, #76]	@ (80043d8 <RI_GetRegisterGlobal+0x12c>)
 800438a:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 800438e:	2101      	movs	r1, #1
 8004390:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004392:	2800      	cmp	r0, #0
 8004394:	d0f4      	beq.n	8004380 <RI_GetRegisterGlobal+0xd4>
 8004396:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800439a:	46a4      	mov	ip, r4
 800439c:	e009      	b.n	80043b2 <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 800439e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 80043a2:	8819      	ldrh	r1, [r3, #0]
 80043a4:	3101      	adds	r1, #1
 80043a6:	b289      	uxth	r1, r1
 80043a8:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80043aa:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 80043ae:	2800      	cmp	r0, #0
 80043b0:	d0e6      	beq.n	8004380 <RI_GetRegisterGlobal+0xd4>
 80043b2:	458e      	cmp	lr, r1
 80043b4:	d8f3      	bhi.n	800439e <RI_GetRegisterGlobal+0xf2>
 80043b6:	e7e1      	b.n	800437c <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80043b8:	4908      	ldr	r1, [pc, #32]	@ (80043dc <RI_GetRegisterGlobal+0x130>)
 80043ba:	6848      	ldr	r0, [r1, #4]
 80043bc:	680c      	ldr	r4, [r1, #0]
 80043be:	8909      	ldrh	r1, [r1, #8]
 80043c0:	f8c2 0006 	str.w	r0, [r2, #6]
 80043c4:	f8c2 4002 	str.w	r4, [r2, #2]
 80043c8:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 80043ca:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80043cc:	220c      	movs	r2, #12
 80043ce:	e790      	b.n	80042f2 <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 80043d0:	2000      	movs	r0, #0
 80043d2:	e7a7      	b.n	8004324 <RI_GetRegisterGlobal+0x78>
 80043d4:	0800cbe8 	.word	0x0800cbe8
 80043d8:	0800cbc4 	.word	0x0800cbc4
 80043dc:	0800cbb8 	.word	0x0800cbb8

080043e0 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80043e0:	b530      	push	{r4, r5, lr}
 80043e2:	b095      	sub	sp, #84	@ 0x54
 80043e4:	461d      	mov	r5, r3
    switch (typeID)
 80043e6:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80043ea:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 80043ee:	4614      	mov	r4, r2
    switch (typeID)
 80043f0:	2b20      	cmp	r3, #32
 80043f2:	d812      	bhi.n	800441a <RI_GetRegisterMotor1+0x3a>
 80043f4:	e8df f003 	tbb	[pc, r3]
 80043f8:	11111131 	.word	0x11111131
 80043fc:	11111111 	.word	0x11111111
 8004400:	1111116a 	.word	0x1111116a
 8004404:	11111111 	.word	0x11111111
 8004408:	11111147 	.word	0x11111147
 800440c:	11111111 	.word	0x11111111
 8004410:	11111161 	.word	0x11111161
 8004414:	11111111 	.word	0x11111111
 8004418:	14          	.byte	0x14
 8004419:	00          	.byte	0x00
 800441a:	2007      	movs	r0, #7
  }
 800441c:	b015      	add	sp, #84	@ 0x54
 800441e:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004420:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8004424:	f000 81d2 	beq.w	80047cc <RI_GetRegisterMotor1+0x3ec>
 8004428:	d87c      	bhi.n	8004524 <RI_GetRegisterMotor1+0x144>
 800442a:	28e8      	cmp	r0, #232	@ 0xe8
        rawData++;
 800442c:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8004430:	f000 81e8 	beq.w	8004804 <RI_GetRegisterMotor1+0x424>
 8004434:	f200 8121 	bhi.w	800467a <RI_GetRegisterMotor1+0x29a>
 8004438:	2868      	cmp	r0, #104	@ 0x68
 800443a:	f000 81d8 	beq.w	80047ee <RI_GetRegisterMotor1+0x40e>
 800443e:	28a8      	cmp	r0, #168	@ 0xa8
 8004440:	f040 81ac 	bne.w	800479c <RI_GetRegisterMotor1+0x3bc>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004444:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8004448:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800444a:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 800444e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004450:	f200 825a 	bhi.w	8004908 <RI_GetRegisterMotor1+0x528>
 8004454:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004456:	2008      	movs	r0, #8
 8004458:	e080      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
        if (freeSpace > 0)
 800445a:	f1bc 0f00 	cmp.w	ip, #0
 800445e:	f340 8174 	ble.w	800474a <RI_GetRegisterMotor1+0x36a>
          switch (regID)
 8004462:	2888      	cmp	r0, #136	@ 0x88
 8004464:	f000 8196 	beq.w	8004794 <RI_GetRegisterMotor1+0x3b4>
 8004468:	28c8      	cmp	r0, #200	@ 0xc8
 800446a:	f000 818f 	beq.w	800478c <RI_GetRegisterMotor1+0x3ac>
 800446e:	2848      	cmp	r0, #72	@ 0x48
 8004470:	f040 80cd 	bne.w	800460e <RI_GetRegisterMotor1+0x22e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8004474:	48b6      	ldr	r0, [pc, #728]	@ (8004750 <RI_GetRegisterMotor1+0x370>)
 8004476:	f7fe f95d 	bl	8002734 <MCI_GetSTMState>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 800447a:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 800447c:	2000      	movs	r0, #0
          *size = 1;
 800447e:	2301      	movs	r3, #1
 8004480:	802b      	strh	r3, [r5, #0]
  }
 8004482:	b015      	add	sp, #84	@ 0x54
 8004484:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8004486:	f1bc 0f03 	cmp.w	ip, #3
 800448a:	dd48      	ble.n	800451e <RI_GetRegisterMotor1+0x13e>
          switch (regID)
 800448c:	28d8      	cmp	r0, #216	@ 0xd8
 800448e:	f000 81c8 	beq.w	8004822 <RI_GetRegisterMotor1+0x442>
 8004492:	f200 816b 	bhi.w	800476c <RI_GetRegisterMotor1+0x38c>
 8004496:	2858      	cmp	r0, #88	@ 0x58
 8004498:	f000 814f 	beq.w	800473a <RI_GetRegisterMotor1+0x35a>
 800449c:	2898      	cmp	r0, #152	@ 0x98
 800449e:	f000 81c7 	beq.w	8004830 <RI_GetRegisterMotor1+0x450>
 80044a2:	2818      	cmp	r0, #24
 80044a4:	f040 81c2 	bne.w	800482c <RI_GetRegisterMotor1+0x44c>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80044a8:	48a9      	ldr	r0, [pc, #676]	@ (8004750 <RI_GetRegisterMotor1+0x370>)
 80044aa:	f7fe f98d 	bl	80027c8 <MCI_GetFaultState>
 80044ae:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80044b0:	2000      	movs	r0, #0
          *size = 4;
 80044b2:	2304      	movs	r3, #4
 80044b4:	802b      	strh	r3, [r5, #0]
  }
 80044b6:	b015      	add	sp, #84	@ 0x54
 80044b8:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 80044ba:	28a0      	cmp	r0, #160	@ 0xa0
 80044bc:	f000 808f 	beq.w	80045de <RI_GetRegisterMotor1+0x1fe>
 80044c0:	28e0      	cmp	r0, #224	@ 0xe0
 80044c2:	d06f      	beq.n	80045a4 <RI_GetRegisterMotor1+0x1c4>
            *size= 0 ; /* */
 80044c4:	2300      	movs	r3, #0
 80044c6:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 80044c8:	2005      	movs	r0, #5
            break;
 80044ca:	e7a7      	b.n	800441c <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 80044cc:	f1bc 0f01 	cmp.w	ip, #1
 80044d0:	dd25      	ble.n	800451e <RI_GetRegisterMotor1+0x13e>
          switch (regID)
 80044d2:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 80044d6:	f000 833e 	beq.w	8004b56 <RI_GetRegisterMotor1+0x776>
 80044da:	d842      	bhi.n	8004562 <RI_GetRegisterMotor1+0x182>
 80044dc:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 80044e0:	f000 8334 	beq.w	8004b4c <RI_GetRegisterMotor1+0x76c>
 80044e4:	f200 80b0 	bhi.w	8004648 <RI_GetRegisterMotor1+0x268>
 80044e8:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 80044ec:	f000 8301 	beq.w	8004af2 <RI_GetRegisterMotor1+0x712>
 80044f0:	f200 81bc 	bhi.w	800486c <RI_GetRegisterMotor1+0x48c>
 80044f4:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80044f8:	f000 82ab 	beq.w	8004a52 <RI_GetRegisterMotor1+0x672>
 80044fc:	f200 8258 	bhi.w	80049b0 <RI_GetRegisterMotor1+0x5d0>
 8004500:	2890      	cmp	r0, #144	@ 0x90
 8004502:	f000 82d0 	beq.w	8004aa6 <RI_GetRegisterMotor1+0x6c6>
 8004506:	28d0      	cmp	r0, #208	@ 0xd0
 8004508:	f040 82f1 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 800450c:	4891      	ldr	r0, [pc, #580]	@ (8004754 <RI_GetRegisterMotor1+0x374>)
 800450e:	f005 fc47 	bl	8009da0 <PID_GetKI>
 8004512:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8004514:	2000      	movs	r0, #0
          *size = 2;
 8004516:	2302      	movs	r3, #2
 8004518:	802b      	strh	r3, [r5, #0]
  }
 800451a:	b015      	add	sp, #84	@ 0x54
 800451c:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800451e:	2008      	movs	r0, #8
  }
 8004520:	b015      	add	sp, #84	@ 0x54
 8004522:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8004524:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8004528:	f000 80bf 	beq.w	80046aa <RI_GetRegisterMotor1+0x2ca>
 800452c:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8004530:	f000 8139 	beq.w	80047a6 <RI_GetRegisterMotor1+0x3c6>
 8004534:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8004538:	f040 8130 	bne.w	800479c <RI_GetRegisterMotor1+0x3bc>
            *rawSize = 4;
 800453c:	2304      	movs	r3, #4
 800453e:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8004540:	4883      	ldr	r0, [pc, #524]	@ (8004750 <RI_GetRegisterMotor1+0x370>)
 8004542:	f7fe f971 	bl	8002828 <MCI_GetLastRampFinalTorque>
 8004546:	4603      	mov	r3, r0
 8004548:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 800454a:	4881      	ldr	r0, [pc, #516]	@ (8004750 <RI_GetRegisterMotor1+0x370>)
 800454c:	f7fe f970 	bl	8002830 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8004550:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8004552:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 8004554:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8004556:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8004558:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 800455a:	b29b      	uxth	r3, r3
 800455c:	802b      	strh	r3, [r5, #0]
  }
 800455e:	b015      	add	sp, #84	@ 0x54
 8004560:	bd30      	pop	{r4, r5, pc}
          switch (regID)
 8004562:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8004566:	d0d5      	beq.n	8004514 <RI_GetRegisterMotor1+0x134>
 8004568:	d953      	bls.n	8004612 <RI_GetRegisterMotor1+0x232>
 800456a:	f241 5390 	movw	r3, #5520	@ 0x1590
 800456e:	4298      	cmp	r0, r3
 8004570:	f000 82c4 	beq.w	8004afc <RI_GetRegisterMotor1+0x71c>
 8004574:	f200 8164 	bhi.w	8004840 <RI_GetRegisterMotor1+0x460>
 8004578:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800457c:	4298      	cmp	r0, r3
 800457e:	f000 8288 	beq.w	8004a92 <RI_GetRegisterMotor1+0x6b2>
 8004582:	f200 81f9 	bhi.w	8004978 <RI_GetRegisterMotor1+0x598>
 8004586:	f241 4350 	movw	r3, #5200	@ 0x1450
 800458a:	4298      	cmp	r0, r3
 800458c:	f000 82bb 	beq.w	8004b06 <RI_GetRegisterMotor1+0x726>
 8004590:	f241 4390 	movw	r3, #5264	@ 0x1490
 8004594:	4298      	cmp	r0, r3
 8004596:	f040 82aa 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 800459a:	486e      	ldr	r0, [pc, #440]	@ (8004754 <RI_GetRegisterMotor1+0x374>)
 800459c:	f005 fc10 	bl	8009dc0 <PID_GetKIDivisorPOW2>
 80045a0:	8020      	strh	r0, [r4, #0]
              break;
 80045a2:	e7b7      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80045a4:	4b6c      	ldr	r3, [pc, #432]	@ (8004758 <RI_GetRegisterMotor1+0x378>)
 80045a6:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 80045a8:	2301      	movs	r3, #1
 80045aa:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 80045ac:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80045b0:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 80045b4:	b17a      	cbz	r2, 80045d6 <RI_GetRegisterMotor1+0x1f6>
 80045b6:	fa1f fc8c 	uxth.w	ip, ip
 80045ba:	e008      	b.n	80045ce <RI_GetRegisterMotor1+0x1ee>
    *tempdestString = *tempsrcString;
 80045bc:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80045c0:	882b      	ldrh	r3, [r5, #0]
 80045c2:	3301      	adds	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80045c8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 80045cc:	b11a      	cbz	r2, 80045d6 <RI_GetRegisterMotor1+0x1f6>
 80045ce:	459c      	cmp	ip, r3
 80045d0:	d8f4      	bhi.n	80045bc <RI_GetRegisterMotor1+0x1dc>
    retVal = MCP_ERROR_STRING_FORMAT;
 80045d2:	2006      	movs	r0, #6
 80045d4:	e722      	b.n	800441c <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 80045da:	2000      	movs	r0, #0
 80045dc:	e71e      	b.n	800441c <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80045de:	4a5f      	ldr	r2, [pc, #380]	@ (800475c <RI_GetRegisterMotor1+0x37c>)
  *size= 1U ; /* /0 is the min String size */
 80045e0:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 80045e2:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 80045e4:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 80045e6:	f991 2000 	ldrsb.w	r2, [r1]
 80045ea:	2a00      	cmp	r2, #0
 80045ec:	d0f3      	beq.n	80045d6 <RI_GetRegisterMotor1+0x1f6>
 80045ee:	fa1f fc8c 	uxth.w	ip, ip
 80045f2:	e009      	b.n	8004608 <RI_GetRegisterMotor1+0x228>
    *tempdestString = *tempsrcString;
 80045f4:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 80045f8:	882b      	ldrh	r3, [r5, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8004600:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8004604:	2a00      	cmp	r2, #0
 8004606:	d0e6      	beq.n	80045d6 <RI_GetRegisterMotor1+0x1f6>
 8004608:	459c      	cmp	ip, r3
 800460a:	d8f3      	bhi.n	80045f4 <RI_GetRegisterMotor1+0x214>
 800460c:	e7e1      	b.n	80045d2 <RI_GetRegisterMotor1+0x1f2>
          switch (regID)
 800460e:	2005      	movs	r0, #5
 8004610:	e735      	b.n	800447e <RI_GetRegisterMotor1+0x9e>
          switch (regID)
 8004612:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8004616:	f000 827b 	beq.w	8004b10 <RI_GetRegisterMotor1+0x730>
 800461a:	f200 813a 	bhi.w	8004892 <RI_GetRegisterMotor1+0x4b2>
 800461e:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8004622:	f000 824c 	beq.w	8004abe <RI_GetRegisterMotor1+0x6de>
 8004626:	f200 81b6 	bhi.w	8004996 <RI_GetRegisterMotor1+0x5b6>
 800462a:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 800462e:	f000 8283 	beq.w	8004b38 <RI_GetRegisterMotor1+0x758>
 8004632:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8004636:	f040 825a 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 800463a:	4845      	ldr	r0, [pc, #276]	@ (8004750 <RI_GetRegisterMotor1+0x370>)
 800463c:	f7fe f94c 	bl	80028d8 <MCI_GetVqd>
 8004640:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004644:	8023      	strh	r3, [r4, #0]
              break;
 8004646:	e765      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004648:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 800464c:	f000 828a 	beq.w	8004b64 <RI_GetRegisterMotor1+0x784>
 8004650:	f200 8134 	bhi.w	80048bc <RI_GetRegisterMotor1+0x4dc>
 8004654:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8004658:	f000 823b 	beq.w	8004ad2 <RI_GetRegisterMotor1+0x6f2>
 800465c:	f200 81b5 	bhi.w	80049ca <RI_GetRegisterMotor1+0x5ea>
 8004660:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8004664:	f000 826d 	beq.w	8004b42 <RI_GetRegisterMotor1+0x762>
 8004668:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 800466c:	f040 823f 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8004670:	483b      	ldr	r0, [pc, #236]	@ (8004760 <RI_GetRegisterMotor1+0x380>)
 8004672:	f005 f999 	bl	80099a8 <VBS_GetAvBusVoltage_V>
 8004676:	8020      	strh	r0, [r4, #0]
              break;
 8004678:	e74c      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
        switch (regID)
 800467a:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 800467e:	f040 808d 	bne.w	800479c <RI_GetRegisterMotor1+0x3bc>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004682:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8004686:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8004688:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 800468c:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 800468e:	f240 812b 	bls.w	80048e8 <RI_GetRegisterMotor1+0x508>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8004692:	4a34      	ldr	r2, [pc, #208]	@ (8004764 <RI_GetRegisterMotor1+0x384>)
 8004694:	6850      	ldr	r0, [r2, #4]
 8004696:	6814      	ldr	r4, [r2, #0]
 8004698:	6891      	ldr	r1, [r2, #8]
 800469a:	68d2      	ldr	r2, [r2, #12]
 800469c:	60da      	str	r2, [r3, #12]
 800469e:	6058      	str	r0, [r3, #4]
 80046a0:	601c      	str	r4, [r3, #0]
 80046a2:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 80046a4:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 80046a6:	230e      	movs	r3, #14
 80046a8:	e758      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80046aa:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80046ae:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80046b0:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80046b4:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80046b6:	f240 8114 	bls.w	80048e2 <RI_GetRegisterMotor1+0x502>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80046ba:	4b2b      	ldr	r3, [pc, #172]	@ (8004768 <RI_GetRegisterMotor1+0x388>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046bc:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 80046c0:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80046c4:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 80046c6:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80046cc:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046ce:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80046d0:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 80046d4:	f8c4 2002 	str.w	r2, [r4, #2]
 80046d8:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80046dc:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 80046de:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046e0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80046e4:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046e6:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 80046e8:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 80046ec:	f8c4 200a 	str.w	r2, [r4, #10]
 80046f0:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 80046f4:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 80046f6:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046f8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 80046fc:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 80046fe:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8004700:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 8004704:	f8c4 2012 	str.w	r2, [r4, #18]
 8004708:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800470c:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 800470e:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004710:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8004714:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004716:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8004718:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 800471c:	f8c4 201a 	str.w	r2, [r4, #26]
 8004720:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8004724:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 8004726:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004728:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800472c:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800472e:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8004730:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8004734:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8004736:	2000      	movs	r0, #0
 8004738:	e710      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 800473a:	4805      	ldr	r0, [pc, #20]	@ (8004750 <RI_GetRegisterMotor1+0x370>)
 800473c:	f7fe f880 	bl	8002840 <MCI_GetAvrgMecSpeedUnit>
 8004740:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8004744:	0040      	lsls	r0, r0, #1
 8004746:	6020      	str	r0, [r4, #0]
              break;
 8004748:	e6b2      	b.n	80044b0 <RI_GetRegisterMotor1+0xd0>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800474a:	4608      	mov	r0, r1
 800474c:	e666      	b.n	800441c <RI_GetRegisterMotor1+0x3c>
 800474e:	bf00      	nop
 8004750:	20000004 	.word	0x20000004
 8004754:	2000033c 	.word	0x2000033c
 8004758:	2000040c 	.word	0x2000040c
 800475c:	20000414 	.word	0x20000414
 8004760:	20000378 	.word	0x20000378
 8004764:	20000418 	.word	0x20000418
 8004768:	20000238 	.word	0x20000238
          switch (regID)
 800476c:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8004770:	d052      	beq.n	8004818 <RI_GetRegisterMotor1+0x438>
 8004772:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8004776:	4298      	cmp	r0, r3
 8004778:	d158      	bne.n	800482c <RI_GetRegisterMotor1+0x44c>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 800477a:	4bb8      	ldr	r3, [pc, #736]	@ (8004a5c <RI_GetRegisterMotor1+0x67c>)
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f005 fba3 	bl	8009ec8 <PQD_GetAvrgElMotorPowerW>
 8004782:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8004786:	9b01      	ldr	r3, [sp, #4]
 8004788:	6023      	str	r3, [r4, #0]
              break;
 800478a:	e691      	b.n	80044b0 <RI_GetRegisterMotor1+0xd0>
  return ((uint8_t)pHandle->bPhaseNbr);
 800478c:	4bb4      	ldr	r3, [pc, #720]	@ (8004a60 <RI_GetRegisterMotor1+0x680>)
 800478e:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 8004792:	e672      	b.n	800447a <RI_GetRegisterMotor1+0x9a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8004794:	48b3      	ldr	r0, [pc, #716]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 8004796:	f7fe f81d 	bl	80027d4 <MCI_GetControlMode>
              break;
 800479a:	e66e      	b.n	800447a <RI_GetRegisterMotor1+0x9a>
        *size = (*rawSize) + 2U;
 800479c:	8823      	ldrh	r3, [r4, #0]
 800479e:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80047a0:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	e6da      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
            *rawSize = 4;
 80047a6:	2304      	movs	r3, #4
 80047a8:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80047aa:	48ae      	ldr	r0, [pc, #696]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 80047ac:	f7fe f88a 	bl	80028c4 <MCI_GetIqdref>
 80047b0:	4603      	mov	r3, r0
 80047b2:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80047b4:	48ab      	ldr	r0, [pc, #684]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80047b6:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80047b8:	f7fe f884 	bl	80028c4 <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 80047bc:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80047be:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 80047c2:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80047c4:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 80047c6:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 80047c8:	2000      	movs	r0, #0
            break;
 80047ca:	e6c7      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80047cc:	48a5      	ldr	r0, [pc, #660]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 80047ce:	f7fe f827 	bl	8002820 <MCI_GetLastRampFinalSpeed>
 80047d2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80047d6:	0043      	lsls	r3, r0, #1
 80047d8:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80047dc:	48a1      	ldr	r0, [pc, #644]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 80047de:	f7fe f827 	bl	8002830 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80047e2:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80047e4:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 80047e6:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 80047e8:	2000      	movs	r0, #0
            break;
 80047ea:	2308      	movs	r3, #8
 80047ec:	e6b6      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80047ee:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80047f2:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80047f4:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 80047f8:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 80047fa:	f200 8092 	bhi.w	8004922 <RI_GetRegisterMotor1+0x542>
 80047fe:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004800:	2008      	movs	r0, #8
 8004802:	e6ab      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004804:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8004808:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800480a:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 800480e:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8004810:	d86d      	bhi.n	80048ee <RI_GetRegisterMotor1+0x50e>
 8004812:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8004814:	2008      	movs	r0, #8
 8004816:	e6a1      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8004818:	4b93      	ldr	r3, [pc, #588]	@ (8004a68 <RI_GetRegisterMotor1+0x688>)
 800481a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 800481e:	6023      	str	r3, [r4, #0]
              break;
 8004820:	e646      	b.n	80044b0 <RI_GetRegisterMotor1+0xd0>
  return (pHandle->Est_Bemf_Level);
 8004822:	4b91      	ldr	r3, [pc, #580]	@ (8004a68 <RI_GetRegisterMotor1+0x688>)
 8004824:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8004828:	6023      	str	r3, [r4, #0]
              break;
 800482a:	e641      	b.n	80044b0 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 800482c:	2005      	movs	r0, #5
 800482e:	e640      	b.n	80044b2 <RI_GetRegisterMotor1+0xd2>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8004830:	488c      	ldr	r0, [pc, #560]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 8004832:	f7fe f817 	bl	8002864 <MCI_GetMecSpeedRefUnit>
 8004836:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800483a:	0040      	lsls	r0, r0, #1
 800483c:	6020      	str	r0, [r4, #0]
              break;
 800483e:	e637      	b.n	80044b0 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 8004840:	f241 6350 	movw	r3, #5712	@ 0x1650
 8004844:	4298      	cmp	r0, r3
 8004846:	f000 80ff 	beq.w	8004a48 <RI_GetRegisterMotor1+0x668>
 800484a:	f200 8086 	bhi.w	800495a <RI_GetRegisterMotor1+0x57a>
 800484e:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8004852:	4298      	cmp	r0, r3
 8004854:	f000 8118 	beq.w	8004a88 <RI_GetRegisterMotor1+0x6a8>
 8004858:	f241 6310 	movw	r3, #5648	@ 0x1610
 800485c:	4298      	cmp	r0, r3
 800485e:	f040 8146 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8004862:	4882      	ldr	r0, [pc, #520]	@ (8004a6c <RI_GetRegisterMotor1+0x68c>)
 8004864:	f005 faac 	bl	8009dc0 <PID_GetKIDivisorPOW2>
 8004868:	8020      	strh	r0, [r4, #0]
              break;
 800486a:	e653      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 800486c:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8004870:	f000 8158 	beq.w	8004b24 <RI_GetRegisterMotor1+0x744>
 8004874:	f200 80b8 	bhi.w	80049e8 <RI_GetRegisterMotor1+0x608>
 8004878:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 800487c:	f000 814d 	beq.w	8004b1a <RI_GetRegisterMotor1+0x73a>
 8004880:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8004884:	f040 8133 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8004888:	4879      	ldr	r0, [pc, #484]	@ (8004a70 <RI_GetRegisterMotor1+0x690>)
 800488a:	f005 fa89 	bl	8009da0 <PID_GetKI>
 800488e:	8020      	strh	r0, [r4, #0]
              break;
 8004890:	e640      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004892:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8004896:	f000 816f 	beq.w	8004b78 <RI_GetRegisterMotor1+0x798>
 800489a:	f200 80b5 	bhi.w	8004a08 <RI_GetRegisterMotor1+0x628>
 800489e:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 80048a2:	f000 8164 	beq.w	8004b6e <RI_GetRegisterMotor1+0x78e>
 80048a6:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 80048aa:	f040 8120 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 80048ae:	486e      	ldr	r0, [pc, #440]	@ (8004a68 <RI_GetRegisterMotor1+0x688>)
 80048b0:	f006 ffb6 	bl	800b820 <STO_PLL_GetEstimatedCurrent>
 80048b4:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80048b8:	8023      	strh	r3, [r4, #0]
              break;
 80048ba:	e62b      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 80048bc:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 80048c0:	f000 80b4 	beq.w	8004a2c <RI_GetRegisterMotor1+0x64c>
 80048c4:	f200 80aa 	bhi.w	8004a1c <RI_GetRegisterMotor1+0x63c>
 80048c8:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 80048cc:	f000 80b5 	beq.w	8004a3a <RI_GetRegisterMotor1+0x65a>
 80048d0:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 80048d4:	f040 810b 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 80048d8:	4862      	ldr	r0, [pc, #392]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 80048da:	f7fd ffe9 	bl	80028b0 <MCI_GetIqd>
 80048de:	8020      	strh	r0, [r4, #0]
              break;
 80048e0:	e618      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
 80048e2:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80048e4:	2008      	movs	r0, #8
 80048e6:	e639      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
 80048e8:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80048ea:	2008      	movs	r0, #8
 80048ec:	e636      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 80048ee:	4a61      	ldr	r2, [pc, #388]	@ (8004a74 <RI_GetRegisterMotor1+0x694>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	6810      	ldr	r0, [r2, #0]
 80048f4:	6851      	ldr	r1, [r2, #4]
 80048f6:	6894      	ldr	r4, [r2, #8]
 80048f8:	609c      	str	r4, [r3, #8]
 80048fa:	6018      	str	r0, [r3, #0]
 80048fc:	6059      	str	r1, [r3, #4]
 80048fe:	8992      	ldrh	r2, [r2, #12]
 8004900:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8004902:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8004904:	2310      	movs	r3, #16
 8004906:	e629      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8004908:	4a5b      	ldr	r2, [pc, #364]	@ (8004a78 <RI_GetRegisterMotor1+0x698>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	6850      	ldr	r0, [r2, #4]
 800490e:	6814      	ldr	r4, [r2, #0]
 8004910:	6891      	ldr	r1, [r2, #8]
 8004912:	68d2      	ldr	r2, [r2, #12]
 8004914:	60da      	str	r2, [r3, #12]
 8004916:	6058      	str	r0, [r3, #4]
 8004918:	601c      	str	r4, [r3, #0]
 800491a:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 800491c:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 800491e:	2312      	movs	r3, #18
 8004920:	e61c      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8004922:	4a56      	ldr	r2, [pc, #344]	@ (8004a7c <RI_GetRegisterMotor1+0x69c>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 800492a:	6814      	ldr	r4, [r2, #0]
 800492c:	6850      	ldr	r0, [r2, #4]
 800492e:	6891      	ldr	r1, [r2, #8]
 8004930:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8004934:	f8c3 c00c 	str.w	ip, [r3, #12]
 8004938:	3210      	adds	r2, #16
 800493a:	4572      	cmp	r2, lr
 800493c:	601c      	str	r4, [r3, #0]
 800493e:	6058      	str	r0, [r3, #4]
 8004940:	6099      	str	r1, [r3, #8]
 8004942:	f103 0310 	add.w	r3, r3, #16
 8004946:	d1f0      	bne.n	800492a <RI_GetRegisterMotor1+0x54a>
 8004948:	6810      	ldr	r0, [r2, #0]
 800494a:	6851      	ldr	r1, [r2, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	609a      	str	r2, [r3, #8]
 8004950:	6018      	str	r0, [r3, #0]
 8004952:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8004954:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8004956:	233e      	movs	r3, #62	@ 0x3e
 8004958:	e600      	b.n	800455c <RI_GetRegisterMotor1+0x17c>
          switch (regID)
 800495a:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 800495e:	4298      	cmp	r0, r3
 8004960:	f000 809c 	beq.w	8004a9c <RI_GetRegisterMotor1+0x6bc>
 8004964:	f641 1310 	movw	r3, #6416	@ 0x1910
 8004968:	4298      	cmp	r0, r3
 800496a:	f040 80c0 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 800496e:	4844      	ldr	r0, [pc, #272]	@ (8004a80 <RI_GetRegisterMotor1+0x6a0>)
 8004970:	f005 fa1c 	bl	8009dac <PID_GetKPDivisorPOW2>
 8004974:	8020      	strh	r0, [r4, #0]
              break;
 8004976:	e5cd      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004978:	f241 5310 	movw	r3, #5392	@ 0x1510
 800497c:	4298      	cmp	r0, r3
 800497e:	f000 80a3 	beq.w	8004ac8 <RI_GetRegisterMotor1+0x6e8>
 8004982:	f241 5350 	movw	r3, #5456	@ 0x1550
 8004986:	4298      	cmp	r0, r3
 8004988:	f040 80b1 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 800498c:	4838      	ldr	r0, [pc, #224]	@ (8004a70 <RI_GetRegisterMotor1+0x690>)
 800498e:	f005 fa17 	bl	8009dc0 <PID_GetKIDivisorPOW2>
 8004992:	8020      	strh	r0, [r4, #0]
              break;
 8004994:	e5be      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004996:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800499a:	f000 8089 	beq.w	8004ab0 <RI_GetRegisterMotor1+0x6d0>
 800499e:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 80049a2:	f040 80a4 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
 80049a6:	4b30      	ldr	r3, [pc, #192]	@ (8004a68 <RI_GetRegisterMotor1+0x688>)
 80049a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80049ac:	8023      	strh	r3, [r4, #0]
              break;
 80049ae:	e5b1      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 80049b0:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80049b4:	f000 8092 	beq.w	8004adc <RI_GetRegisterMotor1+0x6fc>
 80049b8:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 80049bc:	f040 8097 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 80049c0:	482a      	ldr	r0, [pc, #168]	@ (8004a6c <RI_GetRegisterMotor1+0x68c>)
 80049c2:	f005 f9ed 	bl	8009da0 <PID_GetKI>
 80049c6:	8020      	strh	r0, [r4, #0]
              break;
 80049c8:	e5a4      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 80049ca:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 80049ce:	f000 80ae 	beq.w	8004b2e <RI_GetRegisterMotor1+0x74e>
 80049d2:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80049d6:	f040 808a 	bne.w	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80049da:	4822      	ldr	r0, [pc, #136]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 80049dc:	f7fd ff54 	bl	8002888 <MCI_GetIab>
 80049e0:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80049e4:	8023      	strh	r3, [r4, #0]
              break;
 80049e6:	e595      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 80049e8:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 80049ec:	f000 80c9 	beq.w	8004b82 <RI_GetRegisterMotor1+0x7a2>
 80049f0:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 80049f4:	d17b      	bne.n	8004aee <RI_GetRegisterMotor1+0x70e>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80049f6:	481c      	ldr	r0, [pc, #112]	@ (8004a68 <RI_GetRegisterMotor1+0x688>)
 80049f8:	aa13      	add	r2, sp, #76	@ 0x4c
 80049fa:	a912      	add	r1, sp, #72	@ 0x48
 80049fc:	f006 ff22 	bl	800b844 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8004a00:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8004a04:	8023      	strh	r3, [r4, #0]
              break;
 8004a06:	e585      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004a08:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8004a0c:	d16b      	bne.n	8004ae6 <RI_GetRegisterMotor1+0x706>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8004a0e:	4816      	ldr	r0, [pc, #88]	@ (8004a68 <RI_GetRegisterMotor1+0x688>)
 8004a10:	f006 ff02 	bl	800b818 <STO_PLL_GetEstimatedBemf>
 8004a14:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004a18:	8023      	strh	r3, [r4, #0]
              break;
 8004a1a:	e57b      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004a1c:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8004a20:	d165      	bne.n	8004aee <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8004a22:	4810      	ldr	r0, [pc, #64]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 8004a24:	f7fd ff4e 	bl	80028c4 <MCI_GetIqdref>
 8004a28:	8020      	strh	r0, [r4, #0]
              break;
 8004a2a:	e573      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8004a2c:	480d      	ldr	r0, [pc, #52]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 8004a2e:	f7fd ff3f 	bl	80028b0 <MCI_GetIqd>
 8004a32:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004a36:	8023      	strh	r3, [r4, #0]
              break;
 8004a38:	e56c      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8004a3a:	480a      	ldr	r0, [pc, #40]	@ (8004a64 <RI_GetRegisterMotor1+0x684>)
 8004a3c:	f7fd ff2e 	bl	800289c <MCI_GetIalphabeta>
 8004a40:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004a44:	8023      	strh	r3, [r4, #0]
              break;
 8004a46:	e565      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8004a48:	4808      	ldr	r0, [pc, #32]	@ (8004a6c <RI_GetRegisterMotor1+0x68c>)
 8004a4a:	f005 f9d9 	bl	8009e00 <PID_GetKDDivisorPOW2>
 8004a4e:	8020      	strh	r0, [r4, #0]
              break;
 8004a50:	e560      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 8004a52:	480c      	ldr	r0, [pc, #48]	@ (8004a84 <RI_GetRegisterMotor1+0x6a4>)
 8004a54:	f005 f9d0 	bl	8009df8 <PID_GetKD>
 8004a58:	8020      	strh	r0, [r4, #0]
              break;
 8004a5a:	e55b      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
 8004a5c:	2000002c 	.word	0x2000002c
 8004a60:	20000238 	.word	0x20000238
 8004a64:	20000004 	.word	0x20000004
 8004a68:	2000006c 	.word	0x2000006c
 8004a6c:	20000310 	.word	0x20000310
 8004a70:	200002e4 	.word	0x200002e4
 8004a74:	20000410 	.word	0x20000410
 8004a78:	20000408 	.word	0x20000408
 8004a7c:	2000040c 	.word	0x2000040c
 8004a80:	200000a0 	.word	0x200000a0
 8004a84:	2000033c 	.word	0x2000033c
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8004a88:	4842      	ldr	r0, [pc, #264]	@ (8004b94 <RI_GetRegisterMotor1+0x7b4>)
 8004a8a:	f005 f98f 	bl	8009dac <PID_GetKPDivisorPOW2>
 8004a8e:	8020      	strh	r0, [r4, #0]
              break;
 8004a90:	e540      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 8004a92:	4841      	ldr	r0, [pc, #260]	@ (8004b98 <RI_GetRegisterMotor1+0x7b8>)
 8004a94:	f005 f9b4 	bl	8009e00 <PID_GetKDDivisorPOW2>
 8004a98:	8020      	strh	r0, [r4, #0]
              break;
 8004a9a:	e53b      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8004a9c:	483f      	ldr	r0, [pc, #252]	@ (8004b9c <RI_GetRegisterMotor1+0x7bc>)
 8004a9e:	f005 f98f 	bl	8009dc0 <PID_GetKIDivisorPOW2>
 8004aa2:	8020      	strh	r0, [r4, #0]
              break;
 8004aa4:	e536      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 8004aa6:	483c      	ldr	r0, [pc, #240]	@ (8004b98 <RI_GetRegisterMotor1+0x7b8>)
 8004aa8:	f005 f976 	bl	8009d98 <PID_GetKP>
 8004aac:	8020      	strh	r0, [r4, #0]
              break;
 8004aae:	e531      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004ab0:	483b      	ldr	r0, [pc, #236]	@ (8004ba0 <RI_GetRegisterMotor1+0x7c0>)
 8004ab2:	f7fd ff1b 	bl	80028ec <MCI_GetValphabeta>
 8004ab6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004aba:	8023      	strh	r3, [r4, #0]
              break;
 8004abc:	e52a      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 8004abe:	4838      	ldr	r0, [pc, #224]	@ (8004ba0 <RI_GetRegisterMotor1+0x7c0>)
 8004ac0:	f7fd ff14 	bl	80028ec <MCI_GetValphabeta>
 8004ac4:	8020      	strh	r0, [r4, #0]
              break;
 8004ac6:	e525      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 8004ac8:	4836      	ldr	r0, [pc, #216]	@ (8004ba4 <RI_GetRegisterMotor1+0x7c4>)
 8004aca:	f005 f96f 	bl	8009dac <PID_GetKPDivisorPOW2>
 8004ace:	8020      	strh	r0, [r4, #0]
              break;
 8004ad0:	e520      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 8004ad2:	4835      	ldr	r0, [pc, #212]	@ (8004ba8 <RI_GetRegisterMotor1+0x7c8>)
 8004ad4:	f005 f942 	bl	8009d5c <NTC_GetAvTemp_C>
 8004ad8:	8020      	strh	r0, [r4, #0]
              break;
 8004ada:	e51b      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 8004adc:	482d      	ldr	r0, [pc, #180]	@ (8004b94 <RI_GetRegisterMotor1+0x7b4>)
 8004ade:	f005 f95b 	bl	8009d98 <PID_GetKP>
 8004ae2:	8020      	strh	r0, [r4, #0]
              break;
 8004ae4:	e516      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004ae6:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8004aea:	f43f ad13 	beq.w	8004514 <RI_GetRegisterMotor1+0x134>
 8004aee:	2005      	movs	r0, #5
 8004af0:	e511      	b.n	8004516 <RI_GetRegisterMotor1+0x136>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 8004af2:	4828      	ldr	r0, [pc, #160]	@ (8004b94 <RI_GetRegisterMotor1+0x7b4>)
 8004af4:	f005 f980 	bl	8009df8 <PID_GetKD>
 8004af8:	8020      	strh	r0, [r4, #0]
              break;
 8004afa:	e50b      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 8004afc:	4829      	ldr	r0, [pc, #164]	@ (8004ba4 <RI_GetRegisterMotor1+0x7c4>)
 8004afe:	f005 f97f 	bl	8009e00 <PID_GetKDDivisorPOW2>
 8004b02:	8020      	strh	r0, [r4, #0]
              break;
 8004b04:	e506      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 8004b06:	4824      	ldr	r0, [pc, #144]	@ (8004b98 <RI_GetRegisterMotor1+0x7b8>)
 8004b08:	f005 f950 	bl	8009dac <PID_GetKPDivisorPOW2>
 8004b0c:	8020      	strh	r0, [r4, #0]
              break;
 8004b0e:	e501      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8004b10:	4826      	ldr	r0, [pc, #152]	@ (8004bac <RI_GetRegisterMotor1+0x7cc>)
 8004b12:	f006 fb35 	bl	800b180 <SPD_GetS16Speed>
 8004b16:	8020      	strh	r0, [r4, #0]
              break;
 8004b18:	e4fc      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8004b1a:	4822      	ldr	r0, [pc, #136]	@ (8004ba4 <RI_GetRegisterMotor1+0x7c4>)
 8004b1c:	f005 f93c 	bl	8009d98 <PID_GetKP>
 8004b20:	8020      	strh	r0, [r4, #0]
              break;
 8004b22:	e4f7      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 8004b24:	481f      	ldr	r0, [pc, #124]	@ (8004ba4 <RI_GetRegisterMotor1+0x7c4>)
 8004b26:	f005 f967 	bl	8009df8 <PID_GetKD>
 8004b2a:	8020      	strh	r0, [r4, #0]
              break;
 8004b2c:	e4f2      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8004b2e:	481c      	ldr	r0, [pc, #112]	@ (8004ba0 <RI_GetRegisterMotor1+0x7c0>)
 8004b30:	f7fd feaa 	bl	8002888 <MCI_GetIab>
 8004b34:	8020      	strh	r0, [r4, #0]
              break;
 8004b36:	e4ed      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8004b38:	4819      	ldr	r0, [pc, #100]	@ (8004ba0 <RI_GetRegisterMotor1+0x7c0>)
 8004b3a:	f7fd fecd 	bl	80028d8 <MCI_GetVqd>
 8004b3e:	8020      	strh	r0, [r4, #0]
              break;
 8004b40:	e4e8      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 8004b42:	4816      	ldr	r0, [pc, #88]	@ (8004b9c <RI_GetRegisterMotor1+0x7bc>)
 8004b44:	f005 f928 	bl	8009d98 <PID_GetKP>
 8004b48:	8020      	strh	r0, [r4, #0]
              break;
 8004b4a:	e4e3      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8004b4c:	4813      	ldr	r0, [pc, #76]	@ (8004b9c <RI_GetRegisterMotor1+0x7bc>)
 8004b4e:	f005 f927 	bl	8009da0 <PID_GetKI>
 8004b52:	8020      	strh	r0, [r4, #0]
              break;
 8004b54:	e4de      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8004b56:	4812      	ldr	r0, [pc, #72]	@ (8004ba0 <RI_GetRegisterMotor1+0x7c0>)
 8004b58:	f7fd feb4 	bl	80028c4 <MCI_GetIqdref>
 8004b5c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004b60:	8023      	strh	r3, [r4, #0]
              break;
 8004b62:	e4d7      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8004b64:	480e      	ldr	r0, [pc, #56]	@ (8004ba0 <RI_GetRegisterMotor1+0x7c0>)
 8004b66:	f7fd fe99 	bl	800289c <MCI_GetIalphabeta>
 8004b6a:	8020      	strh	r0, [r4, #0]
              break;
 8004b6c:	e4d2      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8004b6e:	480f      	ldr	r0, [pc, #60]	@ (8004bac <RI_GetRegisterMotor1+0x7cc>)
 8004b70:	f006 fe56 	bl	800b820 <STO_PLL_GetEstimatedCurrent>
 8004b74:	8020      	strh	r0, [r4, #0]
              break;
 8004b76:	e4cd      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8004b78:	480c      	ldr	r0, [pc, #48]	@ (8004bac <RI_GetRegisterMotor1+0x7cc>)
 8004b7a:	f006 fe4d 	bl	800b818 <STO_PLL_GetEstimatedBemf>
 8004b7e:	8020      	strh	r0, [r4, #0]
              break;
 8004b80:	e4c8      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8004b82:	480a      	ldr	r0, [pc, #40]	@ (8004bac <RI_GetRegisterMotor1+0x7cc>)
 8004b84:	aa13      	add	r2, sp, #76	@ 0x4c
 8004b86:	a912      	add	r1, sp, #72	@ 0x48
 8004b88:	f006 fe5c 	bl	800b844 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8004b8c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004b90:	8023      	strh	r3, [r4, #0]
              break;
 8004b92:	e4bf      	b.n	8004514 <RI_GetRegisterMotor1+0x134>
 8004b94:	20000310 	.word	0x20000310
 8004b98:	2000033c 	.word	0x2000033c
 8004b9c:	200000a0 	.word	0x200000a0
 8004ba0:	20000004 	.word	0x20000004
 8004ba4:	200002e4 	.word	0x200002e4
 8004ba8:	200003a4 	.word	0x200003a4
 8004bac:	2000006c 	.word	0x2000006c

08004bb0 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004bb0:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 8004bb4:	3808      	subs	r0, #8
 8004bb6:	b2c0      	uxtb	r0, r0
 8004bb8:	2810      	cmp	r0, #16
 8004bba:	bf9a      	itte	ls
 8004bbc:	4b01      	ldrls	r3, [pc, #4]	@ (8004bc4 <RI_GetIDSize+0x14>)
 8004bbe:	5c18      	ldrbls	r0, [r3, r0]
 8004bc0:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8004bc2:	4770      	bx	lr
 8004bc4:	0800cd08 	.word	0x0800cd08

08004bc8 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8004bc8:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d003      	beq.n	8004bd8 <RI_GetPtrReg+0x10>
 8004bd0:	4b42      	ldr	r3, [pc, #264]	@ (8004cdc <RI_GetPtrReg+0x114>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 8004bd2:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004bd4:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8004bd6:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8004bd8:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 8004bdc:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
    uint16_t regID = dataID & REG_MASK;
 8004be0:	b282      	uxth	r2, r0
        switch (regID)
 8004be2:	d068      	beq.n	8004cb6 <RI_GetPtrReg+0xee>
 8004be4:	d812      	bhi.n	8004c0c <RI_GetPtrReg+0x44>
 8004be6:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 8004bea:	d05f      	beq.n	8004cac <RI_GetPtrReg+0xe4>
 8004bec:	d820      	bhi.n	8004c30 <RI_GetPtrReg+0x68>
 8004bee:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 8004bf2:	d065      	beq.n	8004cc0 <RI_GetPtrReg+0xf8>
 8004bf4:	d84d      	bhi.n	8004c92 <RI_GetPtrReg+0xca>
 8004bf6:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 8004bfa:	d03b      	beq.n	8004c74 <RI_GetPtrReg+0xac>
 8004bfc:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 8004c00:	d1e6      	bne.n	8004bd0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8004c02:	4b37      	ldr	r3, [pc, #220]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004c04:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004c06:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8004c08:	3302      	adds	r3, #2
            break;
 8004c0a:	e7e3      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004c0c:	f5b2 6f35 	cmp.w	r2, #2896	@ 0xb50
 8004c10:	d034      	beq.n	8004c7c <RI_GetPtrReg+0xb4>
 8004c12:	d81b      	bhi.n	8004c4c <RI_GetPtrReg+0x84>
 8004c14:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 8004c18:	d043      	beq.n	8004ca2 <RI_GetPtrReg+0xda>
 8004c1a:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 8004c1e:	d024      	beq.n	8004c6a <RI_GetPtrReg+0xa2>
 8004c20:	f5b2 6f21 	cmp.w	r2, #2576	@ 0xa10
 8004c24:	d1d4      	bne.n	8004bd0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004c26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004c28:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004c2a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004c2c:	3318      	adds	r3, #24
            break;
 8004c2e:	e7d1      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004c30:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 8004c34:	d04c      	beq.n	8004cd0 <RI_GetPtrReg+0x108>
 8004c36:	f5b2 6f19 	cmp.w	r2, #2448	@ 0x990
 8004c3a:	d022      	beq.n	8004c82 <RI_GetPtrReg+0xba>
 8004c3c:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 8004c40:	d1c6      	bne.n	8004bd0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004c42:	4b27      	ldr	r3, [pc, #156]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004c44:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004c46:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004c48:	330e      	adds	r3, #14
            break;
 8004c4a:	e7c3      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004c4c:	f5b2 6f45 	cmp.w	r2, #3152	@ 0xc50
 8004c50:	d03b      	beq.n	8004cca <RI_GetPtrReg+0x102>
 8004c52:	f5b2 6f49 	cmp.w	r2, #3216	@ 0xc90
 8004c56:	d019      	beq.n	8004c8c <RI_GetPtrReg+0xc4>
 8004c58:	4822      	ldr	r0, [pc, #136]	@ (8004ce4 <RI_GetPtrReg+0x11c>)
 8004c5a:	4b20      	ldr	r3, [pc, #128]	@ (8004cdc <RI_GetPtrReg+0x114>)
 8004c5c:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8004c60:	bf0a      	itet	eq
 8004c62:	4603      	moveq	r3, r0
 8004c64:	2005      	movne	r0, #5
 8004c66:	2000      	moveq	r0, #0
 8004c68:	e7b4      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004c6e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004c70:	331c      	adds	r3, #28
            break;
 8004c72:	e7af      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004c74:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce0 <RI_GetPtrReg+0x118>)
  uint8_t retVal = MCP_CMD_OK;
 8004c76:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004c78:	685b      	ldr	r3, [r3, #4]
             break;
 8004c7a:	e7ab      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8004ce8 <RI_GetPtrReg+0x120>)
  uint8_t retVal = MCP_CMD_OK;
 8004c7e:	2000      	movs	r0, #0
 8004c80:	e7a8      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004c82:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004c84:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004c86:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004c88:	3312      	adds	r3, #18
            break;
 8004c8a:	e7a3      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004c8c:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <RI_GetPtrReg+0x124>)
  uint8_t retVal = MCP_CMD_OK;
 8004c8e:	2000      	movs	r0, #0
 8004c90:	e7a0      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004c92:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 8004c96:	d19b      	bne.n	8004bd0 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004c98:	4b11      	ldr	r3, [pc, #68]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004c9c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004c9e:	3306      	adds	r3, #6
            break;
 8004ca0:	e798      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004ca2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004ca6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004ca8:	331a      	adds	r3, #26
            break;
 8004caa:	e793      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004cac:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004cae:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004cb0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004cb2:	330c      	adds	r3, #12
            break;
 8004cb4:	e78e      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8004cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004cba:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8004cbc:	3316      	adds	r3, #22
            break;
 8004cbe:	e789      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004cc0:	4b07      	ldr	r3, [pc, #28]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004cc4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8004cc6:	3304      	adds	r3, #4
            break;
 8004cc8:	e784      	b.n	8004bd4 <RI_GetPtrReg+0xc>
        switch (regID)
 8004cca:	4b09      	ldr	r3, [pc, #36]	@ (8004cf0 <RI_GetPtrReg+0x128>)
  uint8_t retVal = MCP_CMD_OK;
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e781      	b.n	8004bd4 <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <RI_GetPtrReg+0x118>)
 8004cd2:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004cd4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8004cd6:	3310      	adds	r3, #16
            break;
 8004cd8:	e77c      	b.n	8004bd4 <RI_GetPtrReg+0xc>
 8004cda:	bf00      	nop
 8004cdc:	20001bbc 	.word	0x20001bbc
 8004ce0:	20000004 	.word	0x20000004
 8004ce4:	20000078 	.word	0x20000078
 8004ce8:	20000070 	.word	0x20000070
 8004cec:	200000de 	.word	0x200000de
 8004cf0:	200000dc 	.word	0x200000dc

08004cf4 <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 8004cf4:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004cf6:	4c8c      	ldr	r4, [pc, #560]	@ (8004f28 <RCM_RegisterRegConv+0x234>)
 8004cf8:	6822      	ldr	r2, [r4, #0]
 8004cfa:	2a00      	cmp	r2, #0
 8004cfc:	d033      	beq.n	8004d66 <RCM_RegisterRegConv+0x72>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004cfe:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004d02:	7913      	ldrb	r3, [r2, #4]
 8004d04:	4563      	cmp	r3, ip
 8004d06:	d01e      	beq.n	8004d46 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d08:	6861      	ldr	r1, [r4, #4]
 8004d0a:	2900      	cmp	r1, #0
 8004d0c:	f000 80d3 	beq.w	8004eb6 <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d10:	790b      	ldrb	r3, [r1, #4]
 8004d12:	4563      	cmp	r3, ip
 8004d14:	d036      	beq.n	8004d84 <RCM_RegisterRegConv+0x90>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d16:	68a5      	ldr	r5, [r4, #8]
 8004d18:	2d00      	cmp	r5, #0
 8004d1a:	f000 80ad 	beq.w	8004e78 <RCM_RegisterRegConv+0x184>
  uint8_t handle = 255U;
 8004d1e:	22ff      	movs	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d20:	792b      	ldrb	r3, [r5, #4]
 8004d22:	4563      	cmp	r3, ip
 8004d24:	f000 80b8 	beq.w	8004e98 <RCM_RegisterRegConv+0x1a4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d28:	68e5      	ldr	r5, [r4, #12]
 8004d2a:	2d00      	cmp	r5, #0
 8004d2c:	f000 80bc 	beq.w	8004ea8 <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d30:	792b      	ldrb	r3, [r5, #4]
 8004d32:	4563      	cmp	r3, ip
 8004d34:	f000 80ce 	beq.w	8004ed4 <RCM_RegisterRegConv+0x1e0>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8004d38:	2a03      	cmp	r2, #3
 8004d3a:	bf98      	it	ls
 8004d3c:	6803      	ldrls	r3, [r0, #0]
 8004d3e:	d936      	bls.n	8004dae <RCM_RegisterRegConv+0xba>
 8004d40:	22ff      	movs	r2, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 8004d42:	7302      	strb	r2, [r0, #12]
}
 8004d44:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004d46:	6803      	ldr	r3, [r0, #0]
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d031      	beq.n	8004db2 <RCM_RegisterRegConv+0xbe>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d4e:	6861      	ldr	r1, [r4, #4]
 8004d50:	2900      	cmp	r1, #0
 8004d52:	f000 80da 	beq.w	8004f0a <RCM_RegisterRegConv+0x216>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d56:	790a      	ldrb	r2, [r1, #4]
 8004d58:	4562      	cmp	r2, ip
 8004d5a:	f000 80cb 	beq.w	8004ef4 <RCM_RegisterRegConv+0x200>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d5e:	68a5      	ldr	r5, [r4, #8]
 8004d60:	2d00      	cmp	r5, #0
 8004d62:	d1dc      	bne.n	8004d1e <RCM_RegisterRegConv+0x2a>
 8004d64:	e089      	b.n	8004e7a <RCM_RegisterRegConv+0x186>
 8004d66:	6861      	ldr	r1, [r4, #4]
 8004d68:	2900      	cmp	r1, #0
 8004d6a:	f000 80a8 	beq.w	8004ebe <RCM_RegisterRegConv+0x1ca>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004d6e:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004d72:	790b      	ldrb	r3, [r1, #4]
 8004d74:	4563      	cmp	r3, ip
 8004d76:	d006      	beq.n	8004d86 <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d78:	68a5      	ldr	r5, [r4, #8]
 8004d7a:	2d00      	cmp	r5, #0
 8004d7c:	d1d0      	bne.n	8004d20 <RCM_RegisterRegConv+0x2c>
 8004d7e:	6803      	ldr	r3, [r0, #0]
 8004d80:	462a      	mov	r2, r5
 8004d82:	e00b      	b.n	8004d9c <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004d84:	22ff      	movs	r2, #255	@ 0xff
 8004d86:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004d88:	6809      	ldr	r1, [r1, #0]
 8004d8a:	4299      	cmp	r1, r3
 8004d8c:	f000 80a8 	beq.w	8004ee0 <RCM_RegisterRegConv+0x1ec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004d90:	68a5      	ldr	r5, [r4, #8]
 8004d92:	2d00      	cmp	r5, #0
 8004d94:	d1c4      	bne.n	8004d20 <RCM_RegisterRegConv+0x2c>
 8004d96:	2a04      	cmp	r2, #4
 8004d98:	d86f      	bhi.n	8004e7a <RCM_RegisterRegConv+0x186>
 8004d9a:	462a      	mov	r2, r5
 8004d9c:	68e1      	ldr	r1, [r4, #12]
 8004d9e:	b131      	cbz	r1, 8004dae <RCM_RegisterRegConv+0xba>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004da0:	790d      	ldrb	r5, [r1, #4]
 8004da2:	4565      	cmp	r5, ip
 8004da4:	d103      	bne.n	8004dae <RCM_RegisterRegConv+0xba>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004da6:	6809      	ldr	r1, [r1, #0]
 8004da8:	4299      	cmp	r1, r3
 8004daa:	f000 8081 	beq.w	8004eb0 <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 8004dae:	4611      	mov	r1, r2
 8004db0:	e001      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
    uint8_t i = 0;
 8004db2:	2200      	movs	r2, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004db4:	4611      	mov	r1, r2
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004db6:	4d5d      	ldr	r5, [pc, #372]	@ (8004f2c <RCM_RegisterRegConv+0x238>)
      RCM_handle_array [handle] = regConv;
 8004db8:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
 8004dbc:	2400      	movs	r4, #0
 8004dbe:	46a6      	mov	lr, r4
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 8004dc0:	f845 4031 	str.w	r4, [r5, r1, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004dc4:	689c      	ldr	r4, [r3, #8]
 8004dc6:	f362 0e07 	bfi	lr, r2, #0, #8
 8004dca:	07e6      	lsls	r6, r4, #31
 8004dcc:	f362 2e0f 	bfi	lr, r2, #8, #8
 8004dd0:	d422      	bmi.n	8004e18 <RCM_RegisterRegConv+0x124>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8004dd2:	685c      	ldr	r4, [r3, #4]
 8004dd4:	f024 0404 	bic.w	r4, r4, #4
 8004dd8:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004dda:	2404      	movs	r4, #4
 8004ddc:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8004dde:	685c      	ldr	r4, [r3, #4]
 8004de0:	f024 0420 	bic.w	r4, r4, #32
 8004de4:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8004de6:	2420      	movs	r4, #32
 8004de8:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8004dea:	689c      	ldr	r4, [r3, #8]
 8004dec:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 8004df0:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 8004df4:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8004df8:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004dfa:	689c      	ldr	r4, [r3, #8]
 8004dfc:	2c00      	cmp	r4, #0
 8004dfe:	dbfc      	blt.n	8004dfa <RCM_RegisterRegConv+0x106>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004e00:	681c      	ldr	r4, [r3, #0]
 8004e02:	07e5      	lsls	r5, r4, #31
 8004e04:	d408      	bmi.n	8004e18 <RCM_RegisterRegConv+0x124>
  MODIFY_REG(ADCx->CR,
 8004e06:	4d4a      	ldr	r5, [pc, #296]	@ (8004f30 <RCM_RegisterRegConv+0x23c>)
 8004e08:	689c      	ldr	r4, [r3, #8]
 8004e0a:	402c      	ands	r4, r5
 8004e0c:	f044 0401 	orr.w	r4, r4, #1
 8004e10:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8004e12:	681c      	ldr	r4, [r3, #0]
 8004e14:	07e4      	lsls	r4, r4, #31
 8004e16:	d5f7      	bpl.n	8004e08 <RCM_RegisterRegConv+0x114>
      RCM_NoInj_array[handle].enable = false;
 8004e18:	4d46      	ldr	r5, [pc, #280]	@ (8004f34 <RCM_RegisterRegConv+0x240>)
 8004e1a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004e1e:	004c      	lsls	r4, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8004e20:	1d2e      	adds	r6, r5, #4
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004e22:	2101      	movs	r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8004e24:	f826 e004 	strh.w	lr, [r6, r4]
      RCM_NoInj_array[handle].enable = false;
 8004e28:	f04f 0e00 	mov.w	lr, #0
 8004e2c:	f805 e004 	strb.w	lr, [r5, r4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004e30:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004e32:	fa01 f10c 	lsl.w	r1, r1, ip
 8004e36:	f024 040f 	bic.w	r4, r4, #15
 8004e3a:	f1bc 0f09 	cmp.w	ip, #9
 8004e3e:	631c      	str	r4, [r3, #48]	@ 0x30
 8004e40:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 8004e44:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004e48:	d81f      	bhi.n	8004e8a <RCM_RegisterRegConv+0x196>
 8004e4a:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004e4e:	0dcd      	lsrs	r5, r1, #23
 8004e50:	f005 0504 	and.w	r5, r5, #4
 8004e54:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 8004e56:	6886      	ldr	r6, [r0, #8]
 8004e58:	595c      	ldr	r4, [r3, r5]
 8004e5a:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004e5e:	f04f 0e07 	mov.w	lr, #7
 8004e62:	fa06 fc01 	lsl.w	ip, r6, r1
 8004e66:	fa0e f101 	lsl.w	r1, lr, r1
 8004e6a:	ea24 0101 	bic.w	r1, r4, r1
 8004e6e:	ea41 010c 	orr.w	r1, r1, ip
 8004e72:	5159      	str	r1, [r3, r5]
  regConv->convHandle = handle;
 8004e74:	7302      	strb	r2, [r0, #12]
}
 8004e76:	bd70      	pop	{r4, r5, r6, pc}
 8004e78:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004e7a:	68e2      	ldr	r2, [r4, #12]
 8004e7c:	b112      	cbz	r2, 8004e84 <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004e7e:	7911      	ldrb	r1, [r2, #4]
 8004e80:	4561      	cmp	r1, ip
 8004e82:	d03e      	beq.n	8004f02 <RCM_RegisterRegConv+0x20e>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004e84:	2202      	movs	r2, #2
      RCM_handle_array [handle] = regConv;
 8004e86:	4611      	mov	r1, r2
 8004e88:	e795      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004e8a:	3c1e      	subs	r4, #30
 8004e8c:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8004e90:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 8004e94:	e7db      	b.n	8004e4e <RCM_RegisterRegConv+0x15a>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004e96:	460a      	mov	r2, r1
 8004e98:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004e9a:	6829      	ldr	r1, [r5, #0]
 8004e9c:	4299      	cmp	r1, r3
 8004e9e:	f47f af43 	bne.w	8004d28 <RCM_RegisterRegConv+0x34>
      i++;
 8004ea2:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	e786      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
 8004ea8:	2a04      	cmp	r2, #4
 8004eaa:	6803      	ldr	r3, [r0, #0]
 8004eac:	f67f af7f 	bls.w	8004dae <RCM_RegisterRegConv+0xba>
 8004eb0:	2203      	movs	r2, #3
      RCM_handle_array [handle] = regConv;
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	e77f      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004eb6:	68a5      	ldr	r5, [r4, #8]
 8004eb8:	b1cd      	cbz	r5, 8004eee <RCM_RegisterRegConv+0x1fa>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004eba:	2201      	movs	r2, #1
 8004ebc:	e730      	b.n	8004d20 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ebe:	68a5      	ldr	r5, [r4, #8]
 8004ec0:	b1d5      	cbz	r5, 8004ef8 <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004ec2:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004ec6:	792b      	ldrb	r3, [r5, #4]
 8004ec8:	4563      	cmp	r3, ip
 8004eca:	d0e4      	beq.n	8004e96 <RCM_RegisterRegConv+0x1a2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ecc:	68e5      	ldr	r5, [r4, #12]
 8004ece:	b155      	cbz	r5, 8004ee6 <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004ed0:	460a      	mov	r2, r1
 8004ed2:	e72d      	b.n	8004d30 <RCM_RegisterRegConv+0x3c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004ed4:	6829      	ldr	r1, [r5, #0]
 8004ed6:	6803      	ldr	r3, [r0, #0]
 8004ed8:	4299      	cmp	r1, r3
 8004eda:	f47f af2d 	bne.w	8004d38 <RCM_RegisterRegConv+0x44>
 8004ede:	e7e7      	b.n	8004eb0 <RCM_RegisterRegConv+0x1bc>
      i++;
 8004ee0:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	e767      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004ee6:	462a      	mov	r2, r5
 8004ee8:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array [handle] = regConv;
 8004eea:	4611      	mov	r1, r2
 8004eec:	e763      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
 8004eee:	6803      	ldr	r3, [r0, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	e753      	b.n	8004d9c <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 8004ef4:	22ff      	movs	r2, #255	@ 0xff
 8004ef6:	e747      	b.n	8004d88 <RCM_RegisterRegConv+0x94>
 8004ef8:	f890 c004 	ldrb.w	ip, [r0, #4]
 8004efc:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004efe:	462a      	mov	r2, r5
 8004f00:	e74c      	b.n	8004d9c <RCM_RegisterRegConv+0xa8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004f02:	6812      	ldr	r2, [r2, #0]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d0d3      	beq.n	8004eb0 <RCM_RegisterRegConv+0x1bc>
 8004f08:	e7bc      	b.n	8004e84 <RCM_RegisterRegConv+0x190>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004f0a:	68a5      	ldr	r5, [r4, #8]
 8004f0c:	2d00      	cmp	r5, #0
 8004f0e:	d0ef      	beq.n	8004ef0 <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004f10:	792a      	ldrb	r2, [r5, #4]
 8004f12:	4562      	cmp	r2, ip
 8004f14:	d006      	beq.n	8004f24 <RCM_RegisterRegConv+0x230>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004f16:	68e5      	ldr	r5, [r4, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004f18:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004f1a:	2d00      	cmp	r5, #0
 8004f1c:	f47f af08 	bne.w	8004d30 <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 8004f20:	4611      	mov	r1, r2
 8004f22:	e748      	b.n	8004db6 <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004f24:	2201      	movs	r2, #1
 8004f26:	e7b8      	b.n	8004e9a <RCM_RegisterRegConv+0x1a6>
 8004f28:	20001c04 	.word	0x20001c04
 8004f2c:	20001be4 	.word	0x20001be4
 8004f30:	7fffffc0 	.word	0x7fffffc0
 8004f34:	20001bcc 	.word	0x20001bcc

08004f38 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8004f38:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8004f3a:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004f3c:	4a5e      	ldr	r2, [pc, #376]	@ (80050b8 <RCM_ExecRegularConv+0x180>)
 8004f3e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8004f42:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8004f46:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8004f4a:	2800      	cmp	r0, #0
 8004f4c:	d138      	bne.n	8004fc0 <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004f4e:	7811      	ldrb	r1, [r2, #0]
 8004f50:	b991      	cbnz	r1, 8004f78 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 8004f52:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 8004f54:	7991      	ldrb	r1, [r2, #6]
 8004f56:	2900      	cmp	r1, #0
 8004f58:	d175      	bne.n	8005046 <RCM_ExecRegularConv+0x10e>
 8004f5a:	7b11      	ldrb	r1, [r2, #12]
 8004f5c:	2900      	cmp	r1, #0
 8004f5e:	d177      	bne.n	8005050 <RCM_ExecRegularConv+0x118>
 8004f60:	7c91      	ldrb	r1, [r2, #18]
 8004f62:	2900      	cmp	r1, #0
 8004f64:	f000 809a 	beq.w	800509c <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004f68:	7dd1      	ldrb	r1, [r2, #23]
 8004f6a:	4299      	cmp	r1, r3
 8004f6c:	f240 80a0 	bls.w	80050b0 <RCM_ExecRegularConv+0x178>
 8004f70:	f04f 0e03 	mov.w	lr, #3
 8004f74:	4670      	mov	r0, lr
 8004f76:	e003      	b.n	8004f80 <RCM_ExecRegularConv+0x48>
 8004f78:	7951      	ldrb	r1, [r2, #5]
 8004f7a:	428b      	cmp	r3, r1
 8004f7c:	d2ea      	bcs.n	8004f54 <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8004f7e:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8004f80:	eb0c 0403 	add.w	r4, ip, r3
 8004f84:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8004f88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8004f8c:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004f8e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 8004f92:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 8004f96:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004f9a:	4c48      	ldr	r4, [pc, #288]	@ (80050bc <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8004f9c:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8004f9e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004fa2:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 8004fa4:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 8004fa6:	eb0c 0003 	add.w	r0, ip, r3
 8004faa:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004fac:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8004fb0:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004fb4:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8004fb8:	7849      	ldrb	r1, [r1, #1]
 8004fba:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 8004fbc:	bf18      	it	ne
 8004fbe:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 8004fc0:	493f      	ldr	r1, [pc, #252]	@ (80050c0 <RCM_ExecRegularConv+0x188>)
 8004fc2:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 8004fc6:	2900      	cmp	r1, #0
 8004fc8:	d138      	bne.n	800503c <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004fca:	493e      	ldr	r1, [pc, #248]	@ (80050c4 <RCM_ExecRegularConv+0x18c>)
 8004fcc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004fd0:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004fd2:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004fd4:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004fd6:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8004fd8:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 8004fdc:	fa01 f104 	lsl.w	r1, r1, r4
 8004fe0:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8004fe4:	bf84      	itt	hi
 8004fe6:	3d1e      	subhi	r5, #30
 8004fe8:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 8004fec:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8004fee:	bf94      	ite	ls
 8004ff0:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 8004ff4:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 8004ff8:	0d09      	lsrs	r1, r1, #20
 8004ffa:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 8004ffe:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 8005002:	4321      	orrs	r1, r4
 8005004:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 8005006:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8005008:	6881      	ldr	r1, [r0, #8]
 800500a:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800500e:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005012:	f041 0104 	orr.w	r1, r1, #4
 8005016:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8005018:	6801      	ldr	r1, [r0, #0]
 800501a:	0749      	lsls	r1, r1, #29
 800501c:	d5fc      	bpl.n	8005018 <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 800501e:	eb0c 0103 	add.w	r1, ip, r3
 8005022:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8005026:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8005028:	4d24      	ldr	r5, [pc, #144]	@ (80050bc <RCM_ExecRegularConv+0x184>)
 800502a:	f891 e005 	ldrb.w	lr, [r1, #5]
 800502e:	f885 e000 	strb.w	lr, [r5]
 8005032:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 8005036:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8005038:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 800503a:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 800503c:	449c      	add	ip, r3
 800503e:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 8005042:	8850      	ldrh	r0, [r2, #2]
 8005044:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 8005046:	7ad1      	ldrb	r1, [r2, #11]
 8005048:	428b      	cmp	r3, r1
 800504a:	d31d      	bcc.n	8005088 <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 800504c:	7b11      	ldrb	r1, [r2, #12]
 800504e:	b1f9      	cbz	r1, 8005090 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8005050:	7c51      	ldrb	r1, [r2, #17]
 8005052:	4299      	cmp	r1, r3
 8005054:	d828      	bhi.n	80050a8 <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 8005056:	7c91      	ldrb	r1, [r2, #18]
 8005058:	2900      	cmp	r1, #0
 800505a:	d185      	bne.n	8004f68 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 800505c:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 800505e:	4608      	mov	r0, r1
 8005060:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 8005064:	eb0c 0403 	add.w	r4, ip, r3
 8005068:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 800506c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8005070:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 8005072:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 8005074:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 8005076:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800507a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800507e:	4c0f      	ldr	r4, [pc, #60]	@ (80050bc <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8005080:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 8005082:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8005084:	7821      	ldrb	r1, [r4, #0]
 8005086:	e78e      	b.n	8004fa6 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8005088:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 800508c:	4670      	mov	r0, lr
 800508e:	e777      	b.n	8004f80 <RCM_ExecRegularConv+0x48>
 8005090:	7c91      	ldrb	r1, [r2, #18]
 8005092:	2900      	cmp	r1, #0
 8005094:	f47f af68 	bne.w	8004f68 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8005098:	2101      	movs	r1, #1
 800509a:	e7e0      	b.n	800505e <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 800509c:	2800      	cmp	r0, #0
 800509e:	d0de      	beq.n	800505e <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 80050a0:	4c06      	ldr	r4, [pc, #24]	@ (80050bc <RCM_ExecRegularConv+0x184>)
 80050a2:	4619      	mov	r1, r3
 80050a4:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 80050a6:	e77e      	b.n	8004fa6 <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 80050a8:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 80050ac:	4670      	mov	r0, lr
 80050ae:	e767      	b.n	8004f80 <RCM_ExecRegularConv+0x48>
 80050b0:	2003      	movs	r0, #3
          LastEnable = i;
 80050b2:	4601      	mov	r1, r0
 80050b4:	e7d4      	b.n	8005060 <RCM_ExecRegularConv+0x128>
 80050b6:	bf00      	nop
 80050b8:	20001bcc 	.word	0x20001bcc
 80050bc:	20001bc8 	.word	0x20001bc8
 80050c0:	20000194 	.word	0x20000194
 80050c4:	20001c04 	.word	0x20001c04

080050c8 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80050c8:	4b14      	ldr	r3, [pc, #80]	@ (800511c <RCM_ExecUserConv+0x54>)
{
 80050ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 80050ce:	681c      	ldr	r4, [r3, #0]
 80050d0:	b124      	cbz	r4, 80050dc <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80050d2:	4d13      	ldr	r5, [pc, #76]	@ (8005120 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 80050d4:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80050d6:	782b      	ldrb	r3, [r5, #0]
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d001      	beq.n	80050e0 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80050dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80050e0:	4620      	mov	r0, r4
 80050e2:	f7ff ff29 	bl	8004f38 <RCM_ExecRegularConv>
 80050e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005124 <RCM_ExecUserConv+0x5c>)
 80050e8:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 80050ea:	4b0f      	ldr	r3, [pc, #60]	@ (8005128 <RCM_ExecUserConv+0x60>)
 80050ec:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80050f0:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80050f4:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 80050f6:	785b      	ldrb	r3, [r3, #1]
 80050f8:	b10b      	cbz	r3, 80050fe <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 80050fa:	2302      	movs	r3, #2
 80050fc:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80050fe:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <RCM_ExecUserConv+0x64>)
 8005100:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 8005104:	2f00      	cmp	r7, #0
 8005106:	d0e9      	beq.n	80050dc <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8005108:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800510c:	4620      	mov	r0, r4
 800510e:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 8005110:	2300      	movs	r3, #0
 8005112:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8005114:	463b      	mov	r3, r7
}
 8005116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800511a:	4718      	bx	r3
 800511c:	20001bc0 	.word	0x20001bc0
 8005120:	20001bc4 	.word	0x20001bc4
 8005124:	20001bc6 	.word	0x20001bc6
 8005128:	20001bcc 	.word	0x20001bcc
 800512c:	20001be4 	.word	0x20001be4

08005130 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8005130:	4b1e      	ldr	r3, [pc, #120]	@ (80051ac <RCM_ExecNextConv+0x7c>)
 8005132:	491f      	ldr	r1, [pc, #124]	@ (80051b0 <RCM_ExecNextConv+0x80>)
 8005134:	781a      	ldrb	r2, [r3, #0]
 8005136:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800513a:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 800513e:	b3a3      	cbz	r3, 80051aa <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8005140:	4b1c      	ldr	r3, [pc, #112]	@ (80051b4 <RCM_ExecNextConv+0x84>)
{
 8005142:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8005144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005148:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800514a:	2404      	movs	r4, #4
 800514c:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800514e:	f893 c004 	ldrb.w	ip, [r3, #4]
 8005152:	2301      	movs	r3, #1
 8005154:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8005158:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 800515c:	fa03 f30c 	lsl.w	r3, r3, ip
 8005160:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 8005164:	bf84      	itt	hi
 8005166:	3c1e      	subhi	r4, #30
 8005168:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 800516c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8005170:	bf98      	it	ls
 8005172:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8005176:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8005178:	bf88      	it	hi
 800517a:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 800517e:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8005180:	0d1b      	lsrs	r3, r3, #20
 8005182:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 8005186:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 800518a:	4313      	orrs	r3, r2
 800518c:	6303      	str	r3, [r0, #48]	@ 0x30
 800518e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8005190:	6883      	ldr	r3, [r0, #8]
 8005192:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 8005196:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 800519a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800519e:	2401      	movs	r4, #1
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6083      	str	r3, [r0, #8]
 80051a6:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 80051a8:	bd10      	pop	{r4, pc}
 80051aa:	4770      	bx	lr
 80051ac:	20001bc8 	.word	0x20001bc8
 80051b0:	20001bcc 	.word	0x20001bcc
 80051b4:	20001c04 	.word	0x20001c04

080051b8 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80051b8:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80051ba:	4812      	ldr	r0, [pc, #72]	@ (8005204 <RCM_ReadOngoingConv+0x4c>)
 80051bc:	4a12      	ldr	r2, [pc, #72]	@ (8005208 <RCM_ReadOngoingConv+0x50>)
 80051be:	7803      	ldrb	r3, [r0, #0]
 80051c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80051c4:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 80051c8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80051cc:	b16c      	cbz	r4, 80051ea <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80051ce:	4c0f      	ldr	r4, [pc, #60]	@ (800520c <RCM_ReadOngoingConv+0x54>)
 80051d0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80051d4:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80051d6:	6825      	ldr	r5, [r4, #0]
 80051d8:	076d      	lsls	r5, r5, #29
 80051da:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80051de:	d406      	bmi.n	80051ee <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80051e0:	449c      	add	ip, r3
 80051e2:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 80051e6:	7953      	ldrb	r3, [r2, #5]
 80051e8:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 80051ea:	bc30      	pop	{r4, r5}
 80051ec:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 80051ee:	784d      	ldrb	r5, [r1, #1]
 80051f0:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 80051f4:	d0f4      	beq.n	80051e0 <RCM_ReadOngoingConv+0x28>
 80051f6:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 80051f8:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 80051fc:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 80051fe:	2402      	movs	r4, #2
 8005200:	704c      	strb	r4, [r1, #1]
 8005202:	e7ed      	b.n	80051e0 <RCM_ReadOngoingConv+0x28>
 8005204:	20001bc8 	.word	0x20001bc8
 8005208:	20001bcc 	.word	0x20001bcc
 800520c:	20001c04 	.word	0x20001c04

08005210 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8005210:	4b44      	ldr	r3, [pc, #272]	@ (8005324 <USART2_IRQHandler+0x114>)
 8005212:	69da      	ldr	r2, [r3, #28]
 8005214:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 8005216:	b510      	push	{r4, lr}
 8005218:	d509      	bpl.n	800522e <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800521a:	4943      	ldr	r1, [pc, #268]	@ (8005328 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 800521c:	4843      	ldr	r0, [pc, #268]	@ (800532c <USART2_IRQHandler+0x11c>)
 800521e:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005220:	2440      	movs	r4, #64	@ 0x40
 8005222:	f022 0201 	bic.w	r2, r2, #1
 8005226:	61ca      	str	r2, [r1, #28]
 8005228:	621c      	str	r4, [r3, #32]
 800522a:	f7fc fbd5 	bl	80019d8 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800522e:	4b3d      	ldr	r3, [pc, #244]	@ (8005324 <USART2_IRQHandler+0x114>)
 8005230:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005232:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005234:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8005236:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8005238:	074c      	lsls	r4, r1, #29
 800523a:	d56a      	bpl.n	8005312 <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 800523c:	07d8      	lsls	r0, r3, #31
 800523e:	d51e      	bpl.n	800527e <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8005240:	4b38      	ldr	r3, [pc, #224]	@ (8005324 <USART2_IRQHandler+0x114>)
 8005242:	220e      	movs	r2, #14
 8005244:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005246:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800524a:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 800524e:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8005252:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005256:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 800525a:	e840 3100 	strex	r1, r3, [r0]
 800525e:	2900      	cmp	r1, #0
 8005260:	d1f3      	bne.n	800524a <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005262:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005266:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 800526a:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800526e:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8005276:	e840 3100 	strex	r1, r3, [r0]
 800527a:	2900      	cmp	r1, #0
 800527c:	d1f3      	bne.n	8005266 <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800527e:	4b29      	ldr	r3, [pc, #164]	@ (8005324 <USART2_IRQHandler+0x114>)
 8005280:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8005282:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8005284:	06d2      	lsls	r2, r2, #27
 8005286:	d543      	bpl.n	8005310 <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8005288:	06db      	lsls	r3, r3, #27
 800528a:	d541      	bpl.n	8005310 <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8005290:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8005294:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005298:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 80052a0:	e840 3100 	strex	r1, r3, [r0]
 80052a4:	2900      	cmp	r1, #0
 80052a6:	d1f3      	bne.n	8005290 <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80052ac:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80052b0:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80052b4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052b8:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80052bc:	e840 3100 	strex	r1, r3, [r0]
 80052c0:	2900      	cmp	r1, #0
 80052c2:	d1f3      	bne.n	80052ac <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80052c8:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80052cc:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80052d0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80052d8:	e840 3100 	strex	r1, r3, [r0]
 80052dc:	2900      	cmp	r1, #0
 80052de:	d1f3      	bne.n	80052c8 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80052e0:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <USART2_IRQHandler+0x114>)
 80052e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e4:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80052e8:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80052ec:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80052f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f4:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80052f8:	e840 3100 	strex	r1, r3, [r0]
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d1f3      	bne.n	80052e8 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8005300:	4b09      	ldr	r3, [pc, #36]	@ (8005328 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 8005302:	480a      	ldr	r0, [pc, #40]	@ (800532c <USART2_IRQHandler+0x11c>)
 8005304:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 8005306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800530a:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 800530c:	f7fc bd5a 	b.w	8001dc4 <ASPEP_HWReset>
}
 8005310:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8005312:	07d9      	lsls	r1, r3, #31
 8005314:	d5b3      	bpl.n	800527e <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 8005316:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 800531a:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 800531e:	4302      	orrs	r2, r0
 8005320:	d18e      	bne.n	8005240 <USART2_IRQHandler+0x30>
 8005322:	e7ac      	b.n	800527e <USART2_IRQHandler+0x6e>
 8005324:	40004400 	.word	0x40004400
 8005328:	40020000 	.word	0x40020000
 800532c:	20000464 	.word	0x20000464

08005330 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8005330:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 8005332:	f7fd fce3 	bl	8002cfc <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 8005336:	e7fe      	b.n	8005336 <HardFault_Handler+0x6>

08005338 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8005338:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 800533a:	4c0d      	ldr	r4, [pc, #52]	@ (8005370 <SysTick_Handler+0x38>)
 800533c:	7823      	ldrb	r3, [r4, #0]
 800533e:	2b02      	cmp	r3, #2
 8005340:	d00f      	beq.n	8005362 <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 8005342:	3301      	adds	r3, #1
 8005344:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 8005346:	4a0b      	ldr	r2, [pc, #44]	@ (8005374 <SysTick_Handler+0x3c>)
 8005348:	7023      	strb	r3, [r4, #0]
 800534a:	6813      	ldr	r3, [r2, #0]
 800534c:	079b      	lsls	r3, r3, #30
 800534e:	d504      	bpl.n	800535a <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8005350:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 8005352:	4809      	ldr	r0, [pc, #36]	@ (8005378 <SysTick_Handler+0x40>)
 8005354:	6053      	str	r3, [r2, #4]
 8005356:	f7fc fce5 	bl	8001d24 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 800535a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 800535e:	f7fd bc85 	b.w	8002c6c <MC_RunMotorControlTasks>
    HAL_IncTick();
 8005362:	f000 fcf9 	bl	8005d58 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8005366:	f001 fd25 	bl	8006db4 <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 800536a:	2301      	movs	r3, #1
 800536c:	e7eb      	b.n	8005346 <SysTick_Handler+0xe>
 800536e:	bf00      	nop
 8005370:	200004ec 	.word	0x200004ec
 8005374:	40020000 	.word	0x40020000
 8005378:	20000464 	.word	0x20000464

0800537c <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 800537c:	4b04      	ldr	r3, [pc, #16]	@ (8005390 <EXTI15_10_IRQHandler+0x14>)
 800537e:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8005380:	0552      	lsls	r2, r2, #21
 8005382:	d400      	bmi.n	8005386 <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 8005384:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005386:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800538a:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 800538c:	f7fd bcc4 	b.w	8002d18 <UI_HandleStartStopButton_cb>
 8005390:	40010400 	.word	0x40010400

08005394 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005394:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005396:	4b0e      	ldr	r3, [pc, #56]	@ (80053d0 <HAL_MspInit+0x3c>)
 8005398:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800539a:	f042 0201 	orr.w	r2, r2, #1
{
 800539e:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053a0:	661a      	str	r2, [r3, #96]	@ 0x60
 80053a2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80053a4:	f002 0201 	and.w	r2, r2, #1
 80053a8:	9200      	str	r2, [sp, #0]
 80053aa:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80053ac:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80053ae:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80053b2:	659a      	str	r2, [r3, #88]	@ 0x58
 80053b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80053b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ba:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80053bc:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80053be:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80053c0:	f001 fc6e 	bl	8006ca0 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80053c4:	b003      	add	sp, #12
 80053c6:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80053ca:	f002 be43 	b.w	8008054 <HAL_PWREx_DisableUCPDDeadBattery>
 80053ce:	bf00      	nop
 80053d0:	40021000 	.word	0x40021000
 80053d4:	00000000 	.word	0x00000000

080053d8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80053d8:	b510      	push	{r4, lr}
 80053da:	4604      	mov	r4, r0
 80053dc:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053de:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053e0:	2244      	movs	r2, #68	@ 0x44
 80053e2:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e4:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80053e8:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80053ec:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053ee:	f006 fb8f 	bl	800bb10 <memset>
  if(hadc->Instance==ADC1)
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80053f8:	d004      	beq.n	8005404 <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80053fa:	4a43      	ldr	r2, [pc, #268]	@ (8005508 <HAL_ADC_MspInit+0x130>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d046      	beq.n	800548e <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8005400:	b01c      	add	sp, #112	@ 0x70
 8005402:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005404:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005408:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800540c:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800540e:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005410:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005412:	f003 f9db 	bl	80087cc <HAL_RCCEx_PeriphCLKConfig>
 8005416:	2800      	cmp	r0, #0
 8005418:	d16a      	bne.n	80054f0 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800541a:	4a3c      	ldr	r2, [pc, #240]	@ (800550c <HAL_ADC_MspInit+0x134>)
 800541c:	6813      	ldr	r3, [r2, #0]
 800541e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005420:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8005422:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8005424:	d109      	bne.n	800543a <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8005426:	4b3a      	ldr	r3, [pc, #232]	@ (8005510 <HAL_ADC_MspInit+0x138>)
 8005428:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800542a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800542e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005432:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005436:	9301      	str	r3, [sp, #4]
 8005438:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800543a:	4b35      	ldr	r3, [pc, #212]	@ (8005510 <HAL_ADC_MspInit+0x138>)
 800543c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800543e:	f042 0201 	orr.w	r2, r2, #1
 8005442:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005444:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005446:	f002 0201 	and.w	r2, r2, #1
 800544a:	9202      	str	r2, [sp, #8]
 800544c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800544e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005450:	f042 0202 	orr.w	r2, r2, #2
 8005454:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005456:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8005458:	2005      	movs	r0, #5
 800545a:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800545c:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8005460:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005464:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005468:	a906      	add	r1, sp, #24
 800546a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800546e:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005470:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005472:	f002 fa41 	bl	80078f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8005476:	f244 0202 	movw	r2, #16386	@ 0x4002
 800547a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800547c:	4825      	ldr	r0, [pc, #148]	@ (8005514 <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800547e:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005480:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8005482:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005486:	f002 fa37 	bl	80078f8 <HAL_GPIO_Init>
}
 800548a:	b01c      	add	sp, #112	@ 0x70
 800548c:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800548e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8005492:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005496:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8005498:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 800549a:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800549c:	f003 f996 	bl	80087cc <HAL_RCCEx_PeriphCLKConfig>
 80054a0:	bb48      	cbnz	r0, 80054f6 <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80054a2:	4a1a      	ldr	r2, [pc, #104]	@ (800550c <HAL_ADC_MspInit+0x134>)
 80054a4:	6813      	ldr	r3, [r2, #0]
 80054a6:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80054a8:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 80054aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80054ac:	d109      	bne.n	80054c2 <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80054ae:	4b18      	ldr	r3, [pc, #96]	@ (8005510 <HAL_ADC_MspInit+0x138>)
 80054b0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054b2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80054ba:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80054be:	9304      	str	r3, [sp, #16]
 80054c0:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054c2:	4b13      	ldr	r3, [pc, #76]	@ (8005510 <HAL_ADC_MspInit+0x138>)
 80054c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80054c6:	f042 0201 	orr.w	r2, r2, #1
 80054ca:	64da      	str	r2, [r3, #76]	@ 0x4c
 80054cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80054ce:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8005500 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80054d8:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054da:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80054dc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 80054e0:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80054e4:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054e6:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 80054e8:	f002 fa06 	bl	80078f8 <HAL_GPIO_Init>
}
 80054ec:	b01c      	add	sp, #112	@ 0x70
 80054ee:	bd10      	pop	{r4, pc}
      Error_Handler();
 80054f0:	f7fd f864 	bl	80025bc <Error_Handler>
 80054f4:	e791      	b.n	800541a <HAL_ADC_MspInit+0x42>
      Error_Handler();
 80054f6:	f7fd f861 	bl	80025bc <Error_Handler>
 80054fa:	e7d2      	b.n	80054a2 <HAL_ADC_MspInit+0xca>
 80054fc:	f3af 8000 	nop.w
 8005500:	00000040 	.word	0x00000040
 8005504:	00000003 	.word	0x00000003
 8005508:	50000100 	.word	0x50000100
 800550c:	20001c14 	.word	0x20001c14
 8005510:	40021000 	.word	0x40021000
 8005514:	48000400 	.word	0x48000400

08005518 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8005518:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 800551a:	6802      	ldr	r2, [r0, #0]
 800551c:	4934      	ldr	r1, [pc, #208]	@ (80055f0 <HAL_COMP_MspInit+0xd8>)
{
 800551e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005520:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8005522:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005524:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005528:	e9cd 3306 	strd	r3, r3, [sp, #24]
 800552c:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 800552e:	d008      	beq.n	8005542 <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8005530:	4b30      	ldr	r3, [pc, #192]	@ (80055f4 <HAL_COMP_MspInit+0xdc>)
 8005532:	429a      	cmp	r2, r3
 8005534:	d01e      	beq.n	8005574 <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8005536:	4b30      	ldr	r3, [pc, #192]	@ (80055f8 <HAL_COMP_MspInit+0xe0>)
 8005538:	429a      	cmp	r2, r3
 800553a:	d034      	beq.n	80055a6 <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 800553c:	b00b      	add	sp, #44	@ 0x2c
 800553e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005542:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005546:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 800554a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 80055d8 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800554e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005550:	f042 0201 	orr.w	r2, r2, #1
 8005554:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005556:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005558:	f003 0301 	and.w	r3, r3, #1
 800555c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800555e:	a904      	add	r1, sp, #16
 8005560:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8005564:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005568:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 800556a:	f002 f9c5 	bl	80078f8 <HAL_GPIO_Init>
}
 800556e:	b00b      	add	sp, #44	@ 0x2c
 8005570:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005574:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8005578:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 800557c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800557e:	f042 0201 	orr.w	r2, r2, #1
 8005582:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8005586:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 80055e0 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800558a:	f003 0301 	and.w	r3, r3, #1
 800558e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8005590:	a904      	add	r1, sp, #16
 8005592:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8005596:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800559a:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 800559c:	f002 f9ac 	bl	80078f8 <HAL_GPIO_Init>
}
 80055a0:	b00b      	add	sp, #44	@ 0x2c
 80055a2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055a6:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80055aa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80055ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80055b0:	4812      	ldr	r0, [pc, #72]	@ (80055fc <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b2:	f042 0202 	orr.w	r2, r2, #2
 80055b6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80055b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80055ba:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 80055e8 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80055c4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 80055c6:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055ca:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 80055cc:	f002 f994 	bl	80078f8 <HAL_GPIO_Init>
}
 80055d0:	b00b      	add	sp, #44	@ 0x2c
 80055d2:	f85d fb04 	ldr.w	pc, [sp], #4
 80055d6:	bf00      	nop
 80055d8:	00000002 	.word	0x00000002
 80055dc:	00000003 	.word	0x00000003
 80055e0:	00000080 	.word	0x00000080
 80055e4:	00000003 	.word	0x00000003
 80055e8:	00000001 	.word	0x00000001
 80055ec:	00000003 	.word	0x00000003
 80055f0:	40010200 	.word	0x40010200
 80055f4:	40010204 	.word	0x40010204
 80055f8:	4001020c 	.word	0x4001020c
 80055fc:	48000400 	.word	0x48000400

08005600 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8005600:	4b09      	ldr	r3, [pc, #36]	@ (8005628 <HAL_CORDIC_MspInit+0x28>)
 8005602:	6802      	ldr	r2, [r0, #0]
 8005604:	429a      	cmp	r2, r3
 8005606:	d000      	beq.n	800560a <HAL_CORDIC_MspInit+0xa>
 8005608:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 800560a:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 800560e:	f042 0208 	orr.w	r2, r2, #8
{
 8005612:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8005614:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005618:	649a      	str	r2, [r3, #72]	@ 0x48
 800561a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800561c:	f003 0308 	and.w	r3, r3, #8
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8005624:	b002      	add	sp, #8
 8005626:	4770      	bx	lr
 8005628:	40020c00 	.word	0x40020c00

0800562c <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 800562c:	4b0a      	ldr	r3, [pc, #40]	@ (8005658 <HAL_DAC_MspInit+0x2c>)
 800562e:	6802      	ldr	r2, [r0, #0]
 8005630:	429a      	cmp	r2, r3
 8005632:	d000      	beq.n	8005636 <HAL_DAC_MspInit+0xa>
 8005634:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8005636:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 800563a:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 800563e:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8005640:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005642:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005646:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800564a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800564e:	9301      	str	r3, [sp, #4]
 8005650:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8005652:	b002      	add	sp, #8
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	50001000 	.word	0x50001000

0800565c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800565c:	b5d0      	push	{r4, r6, r7, lr}
 800565e:	4604      	mov	r4, r0
 8005660:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005662:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005664:	2244      	movs	r2, #68	@ 0x44
 8005666:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005668:	e9cd 1104 	strd	r1, r1, [sp, #16]
 800566c:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8005670:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005672:	f006 fa4d 	bl	800bb10 <memset>
  if(hfdcan->Instance==FDCAN1)
 8005676:	4b2f      	ldr	r3, [pc, #188]	@ (8005734 <HAL_FDCAN_MspInit+0xd8>)
 8005678:	6822      	ldr	r2, [r4, #0]
 800567a:	429a      	cmp	r2, r3
 800567c:	d001      	beq.n	8005682 <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 800567e:	b01a      	add	sp, #104	@ 0x68
 8005680:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8005682:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8005686:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800568a:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800568c:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800568e:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005690:	f003 f89c 	bl	80087cc <HAL_RCCEx_PeriphCLKConfig>
 8005694:	2800      	cmp	r0, #0
 8005696:	d149      	bne.n	800572c <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8005698:	4b27      	ldr	r3, [pc, #156]	@ (8005738 <HAL_FDCAN_MspInit+0xdc>)
 800569a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800569c:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 80056a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80056a2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80056a4:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 80056a8:	9201      	str	r2, [sp, #4]
 80056aa:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056ac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056ae:	f042 0201 	orr.w	r2, r2, #1
 80056b2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80056b4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056b6:	f002 0201 	and.w	r2, r2, #1
 80056ba:	9202      	str	r2, [sp, #8]
 80056bc:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056be:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80056c0:	f042 0202 	orr.w	r2, r2, #2
 80056c4:	64da      	str	r2, [r3, #76]	@ 0x4c
 80056c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056c8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80056cc:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056ce:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056d8:	2600      	movs	r6, #0
 80056da:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80056dc:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056de:	a904      	add	r1, sp, #16
 80056e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056e4:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80056e6:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80056e8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80056ec:	f002 f904 	bl	80078f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056f0:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f2:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056f8:	4810      	ldr	r0, [pc, #64]	@ (800573c <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80056fa:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80056fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005700:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005704:	f002 f8f8 	bl	80078f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8005708:	2200      	movs	r2, #0
 800570a:	4611      	mov	r1, r2
 800570c:	2015      	movs	r0, #21
 800570e:	f001 fad9 	bl	8006cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8005712:	2015      	movs	r0, #21
 8005714:	f001 fb12 	bl	8006d3c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8005718:	2200      	movs	r2, #0
 800571a:	4611      	mov	r1, r2
 800571c:	2016      	movs	r0, #22
 800571e:	f001 fad1 	bl	8006cc4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8005722:	2016      	movs	r0, #22
 8005724:	f001 fb0a 	bl	8006d3c <HAL_NVIC_EnableIRQ>
}
 8005728:	b01a      	add	sp, #104	@ 0x68
 800572a:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 800572c:	f7fc ff46 	bl	80025bc <Error_Handler>
 8005730:	e7b2      	b.n	8005698 <HAL_FDCAN_MspInit+0x3c>
 8005732:	bf00      	nop
 8005734:	40006400 	.word	0x40006400
 8005738:	40021000 	.word	0x40021000
 800573c:	48000400 	.word	0x48000400

08005740 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8005740:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8005742:	6802      	ldr	r2, [r0, #0]
 8005744:	4934      	ldr	r1, [pc, #208]	@ (8005818 <HAL_OPAMP_MspInit+0xd8>)
{
 8005746:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005748:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 800574a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800574c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005750:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005754:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8005756:	d008      	beq.n	800576a <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8005758:	4b30      	ldr	r3, [pc, #192]	@ (800581c <HAL_OPAMP_MspInit+0xdc>)
 800575a:	429a      	cmp	r2, r3
 800575c:	d01e      	beq.n	800579c <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 800575e:	4b30      	ldr	r3, [pc, #192]	@ (8005820 <HAL_OPAMP_MspInit+0xe0>)
 8005760:	429a      	cmp	r2, r3
 8005762:	d033      	beq.n	80057cc <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8005764:	b00b      	add	sp, #44	@ 0x2c
 8005766:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800576a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800576e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8005772:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8005800 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005776:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005778:	f042 0201 	orr.w	r2, r2, #1
 800577c:	64da      	str	r2, [r3, #76]	@ 0x4c
 800577e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005780:	f003 0301 	and.w	r3, r3, #1
 8005784:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005786:	a904      	add	r1, sp, #16
 8005788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 800578c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005790:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005792:	f002 f8b1 	bl	80078f8 <HAL_GPIO_Init>
}
 8005796:	b00b      	add	sp, #44	@ 0x2c
 8005798:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800579c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80057a0:	33fc      	adds	r3, #252	@ 0xfc
 80057a2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80057a4:	f042 0201 	orr.w	r2, r2, #1
 80057a8:	64da      	str	r2, [r3, #76]	@ 0x4c
 80057aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80057ac:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8005808 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057b6:	a904      	add	r1, sp, #16
 80057b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 80057bc:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80057c0:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057c2:	f002 f899 	bl	80078f8 <HAL_GPIO_Init>
}
 80057c6:	b00b      	add	sp, #44	@ 0x2c
 80057c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057cc:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 80057d0:	33f8      	adds	r3, #248	@ 0xf8
 80057d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057d4:	4813      	ldr	r0, [pc, #76]	@ (8005824 <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057d6:	f042 0202 	orr.w	r2, r2, #2
 80057da:	64da      	str	r2, [r3, #76]	@ 0x4c
 80057dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80057de:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8005810 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057e8:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 80057ea:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ee:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057f0:	f002 f882 	bl	80078f8 <HAL_GPIO_Init>
}
 80057f4:	b00b      	add	sp, #44	@ 0x2c
 80057f6:	f85d fb04 	ldr.w	pc, [sp], #4
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w
 8005800:	0000000e 	.word	0x0000000e
 8005804:	00000003 	.word	0x00000003
 8005808:	000000e0 	.word	0x000000e0
 800580c:	00000003 	.word	0x00000003
 8005810:	00000007 	.word	0x00000007
 8005814:	00000003 	.word	0x00000003
 8005818:	40010300 	.word	0x40010300
 800581c:	40010304 	.word	0x40010304
 8005820:	40010308 	.word	0x40010308
 8005824:	48000400 	.word	0x48000400

08005828 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8005828:	4b09      	ldr	r3, [pc, #36]	@ (8005850 <HAL_TIM_PWM_MspInit+0x28>)
 800582a:	6802      	ldr	r2, [r0, #0]
 800582c:	429a      	cmp	r2, r3
 800582e:	d000      	beq.n	8005832 <HAL_TIM_PWM_MspInit+0xa>
 8005830:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005832:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8005836:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005838:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800583a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800583e:	661a      	str	r2, [r3, #96]	@ 0x60
 8005840:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 800584a:	b002      	add	sp, #8
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40012c00 	.word	0x40012c00

08005854 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005854:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8005856:	4a2b      	ldr	r2, [pc, #172]	@ (8005904 <HAL_TIM_MspPostInit+0xb0>)
 8005858:	6801      	ldr	r1, [r0, #0]
{
 800585a:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800585c:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800585e:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005860:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8005864:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8005868:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 800586a:	d001      	beq.n	8005870 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800586c:	b00a      	add	sp, #40	@ 0x28
 800586e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005870:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005874:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8005878:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800587c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800587e:	f042 0204 	orr.w	r2, r2, #4
 8005882:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005884:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005886:	f002 0204 	and.w	r2, r2, #4
 800588a:	9201      	str	r2, [sp, #4]
 800588c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800588e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005890:	f042 0202 	orr.w	r2, r2, #2
 8005894:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005896:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005898:	f002 0202 	and.w	r2, r2, #2
 800589c:	9202      	str	r2, [sp, #8]
 800589e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058a0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80058a2:	f042 0201 	orr.w	r2, r2, #1
 80058a6:	64da      	str	r2, [r3, #76]	@ 0x4c
 80058a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80058aa:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058ac:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80058b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80058b4:	2402      	movs	r4, #2
 80058b6:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058b8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80058ba:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80058bc:	a904      	add	r1, sp, #16
 80058be:	4812      	ldr	r0, [pc, #72]	@ (8005908 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80058c0:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80058c2:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 80058c4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 80058c8:	f002 f816 	bl	80078f8 <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80058cc:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80058ce:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80058d2:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80058d4:	480d      	ldr	r0, [pc, #52]	@ (800590c <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80058d6:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 80058d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058dc:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 80058e0:	f002 f80a 	bl	80078f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80058e4:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 80058e8:	2302      	movs	r3, #2
 80058ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058ee:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80058f0:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 80058f6:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80058fa:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80058fc:	f001 fffc 	bl	80078f8 <HAL_GPIO_Init>
}
 8005900:	b00a      	add	sp, #40	@ 0x28
 8005902:	bd70      	pop	{r4, r5, r6, pc}
 8005904:	40012c00 	.word	0x40012c00
 8005908:	48000800 	.word	0x48000800
 800590c:	48000400 	.word	0x48000400

08005910 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	4604      	mov	r4, r0
 8005914:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005916:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005918:	2244      	movs	r2, #68	@ 0x44
 800591a:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800591c:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8005920:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8005924:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005926:	f006 f8f3 	bl	800bb10 <memset>
  if(huart->Instance==USART2)
 800592a:	4b35      	ldr	r3, [pc, #212]	@ (8005a00 <HAL_UART_MspInit+0xf0>)
 800592c:	6822      	ldr	r2, [r4, #0]
 800592e:	429a      	cmp	r2, r3
 8005930:	d001      	beq.n	8005936 <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8005932:	b018      	add	sp, #96	@ 0x60
 8005934:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005936:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005938:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800593a:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800593c:	f002 ff46 	bl	80087cc <HAL_RCCEx_PeriphCLKConfig>
 8005940:	2800      	cmp	r0, #0
 8005942:	d14c      	bne.n	80059de <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005944:	4b2f      	ldr	r3, [pc, #188]	@ (8005a04 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005946:	4830      	ldr	r0, [pc, #192]	@ (8005a08 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005948:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 800594a:	4e30      	ldr	r6, [pc, #192]	@ (8005a0c <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800594c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005950:	659a      	str	r2, [r3, #88]	@ 0x58
 8005952:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8005954:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8005958:	9200      	str	r2, [sp, #0]
 800595a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800595c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800595e:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 80059f0 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005962:	f042 0202 	orr.w	r2, r2, #2
 8005966:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 800596a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800596e:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80059f8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005978:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800597a:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800597c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800597e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8005980:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005984:	f001 ffb8 	bl	80078f8 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005988:	4921      	ldr	r1, [pc, #132]	@ (8005a10 <HAL_UART_MspInit+0x100>)
 800598a:	221a      	movs	r2, #26
 800598c:	2300      	movs	r3, #0
 800598e:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8005992:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8005994:	2280      	movs	r2, #128	@ 0x80
 8005996:	e9c6 3302 	strd	r3, r3, [r6, #8]
 800599a:	e9c6 2304 	strd	r2, r3, [r6, #16]
 800599e:	e9c6 3306 	strd	r3, r3, [r6, #24]
 80059a2:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80059a4:	f001 fb0c 	bl	8006fc0 <HAL_DMA_Init>
 80059a8:	b9f8      	cbnz	r0, 80059ea <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 80059aa:	4d1a      	ldr	r5, [pc, #104]	@ (8005a14 <HAL_UART_MspInit+0x104>)
 80059ac:	491a      	ldr	r1, [pc, #104]	@ (8005a18 <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80059ae:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80059b2:	221b      	movs	r2, #27
 80059b4:	2300      	movs	r3, #0
 80059b6:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80059ba:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80059bc:	2110      	movs	r1, #16
 80059be:	2280      	movs	r2, #128	@ 0x80
 80059c0:	e9c5 1302 	strd	r1, r3, [r5, #8]
 80059c4:	e9c5 3305 	strd	r3, r3, [r5, #20]
 80059c8:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80059cc:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80059ce:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80059d0:	f001 faf6 	bl	8006fc0 <HAL_DMA_Init>
 80059d4:	b930      	cbnz	r0, 80059e4 <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80059d6:	67e5      	str	r5, [r4, #124]	@ 0x7c
 80059d8:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 80059da:	b018      	add	sp, #96	@ 0x60
 80059dc:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 80059de:	f7fc fded 	bl	80025bc <Error_Handler>
 80059e2:	e7af      	b.n	8005944 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80059e4:	f7fc fdea 	bl	80025bc <Error_Handler>
 80059e8:	e7f5      	b.n	80059d6 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 80059ea:	f7fc fde7 	bl	80025bc <Error_Handler>
 80059ee:	e7dc      	b.n	80059aa <HAL_UART_MspInit+0x9a>
 80059f0:	00000018 	.word	0x00000018
 80059f4:	00000002 	.word	0x00000002
	...
 8005a00:	40004400 	.word	0x40004400
 8005a04:	40021000 	.word	0x40021000
 8005a08:	48000400 	.word	0x48000400
 8005a0c:	2000060c 	.word	0x2000060c
 8005a10:	40020008 	.word	0x40020008
 8005a14:	200005ac 	.word	0x200005ac
 8005a18:	4002001c 	.word	0x4002001c

08005a1c <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a54 <HAL_UART_MspDeInit+0x38>)
 8005a1e:	6802      	ldr	r2, [r0, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d000      	beq.n	8005a26 <HAL_UART_MspDeInit+0xa>
 8005a24:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8005a26:	4a0c      	ldr	r2, [pc, #48]	@ (8005a58 <HAL_UART_MspDeInit+0x3c>)
 8005a28:	6d93      	ldr	r3, [r2, #88]	@ 0x58
{
 8005a2a:	b510      	push	{r4, lr}
    __HAL_RCC_USART2_CLK_DISABLE();
 8005a2c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005a30:	4604      	mov	r4, r0

    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8005a32:	2118      	movs	r1, #24
    __HAL_RCC_USART2_CLK_DISABLE();
 8005a34:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 8005a36:	4809      	ldr	r0, [pc, #36]	@ (8005a5c <HAL_UART_MspDeInit+0x40>)
 8005a38:	f002 f91c 	bl	8007c74 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005a3c:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005a40:	f001 fb50 	bl	80070e4 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 8005a44:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 8005a46:	f001 fb4d 	bl	80070e4 <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8005a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005a4e:	2026      	movs	r0, #38	@ 0x26
 8005a50:	f001 b982 	b.w	8006d58 <HAL_NVIC_DisableIRQ>
 8005a54:	40004400 	.word	0x40004400
 8005a58:	40021000 	.word	0x40021000
 8005a5c:	48000400 	.word	0x48000400

08005a60 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005a60:	4801      	ldr	r0, [pc, #4]	@ (8005a68 <FDCAN1_IT0_IRQHandler+0x8>)
 8005a62:	f001 be85 	b.w	8007770 <HAL_FDCAN_IRQHandler>
 8005a66:	bf00      	nop
 8005a68:	20000804 	.word	0x20000804

08005a6c <FDCAN1_IT1_IRQHandler>:
}

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
 8005a6c:	4801      	ldr	r0, [pc, #4]	@ (8005a74 <FDCAN1_IT1_IRQHandler+0x8>)
 8005a6e:	f001 be7f 	b.w	8007770 <HAL_FDCAN_IRQHandler>
 8005a72:	bf00      	nop
 8005a74:	20000804 	.word	0x20000804

08005a78 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8005a78:	4b02      	ldr	r3, [pc, #8]	@ (8005a84 <ADC1_2_IRQHandler+0xc>)
 8005a7a:	2240      	movs	r2, #64	@ 0x40
 8005a7c:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8005a7e:	f7fd b87b 	b.w	8002b78 <TSK_HighFrequencyTask>
 8005a82:	bf00      	nop
 8005a84:	50000100 	.word	0x50000100

08005a88 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005a88:	4b03      	ldr	r3, [pc, #12]	@ (8005a98 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8005a8a:	4804      	ldr	r0, [pc, #16]	@ (8005a9c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005a8c:	f06f 0201 	mvn.w	r2, #1
 8005a90:	611a      	str	r2, [r3, #16]
 8005a92:	f004 bfa3 	b.w	800a9dc <R3_2_TIMx_UP_IRQHandler>
 8005a96:	bf00      	nop
 8005a98:	40012c00 	.word	0x40012c00
 8005a9c:	20000194 	.word	0x20000194

08005aa0 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8005aa0:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8005aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8005aa4:	691a      	ldr	r2, [r3, #16]
 8005aa6:	0612      	lsls	r2, r2, #24
 8005aa8:	d505      	bpl.n	8005ab6 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005aaa:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8005aae:	480a      	ldr	r0, [pc, #40]	@ (8005ad8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8005ab0:	611a      	str	r2, [r3, #16]
 8005ab2:	f7fe f853 	bl	8003b5c <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8005ab6:	4907      	ldr	r1, [pc, #28]	@ (8005ad4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8005ab8:	690b      	ldr	r3, [r1, #16]
 8005aba:	05db      	lsls	r3, r3, #23
 8005abc:	d505      	bpl.n	8005aca <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8005abe:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 8005ac2:	4805      	ldr	r0, [pc, #20]	@ (8005ad8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8005ac4:	610b      	str	r3, [r1, #16]
 8005ac6:	f7fe f869 	bl	8003b9c <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8005aca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 8005ace:	f7fd b8cd 	b.w	8002c6c <MC_RunMotorControlTasks>
 8005ad2:	bf00      	nop
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	20000194 	.word	0x20000194

08005adc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005adc:	490c      	ldr	r1, [pc, #48]	@ (8005b10 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ade:	4a0d      	ldr	r2, [pc, #52]	@ (8005b14 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 8005ae0:	680b      	ldr	r3, [r1, #0]
{
 8005ae2:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ae4:	4c0c      	ldr	r4, [pc, #48]	@ (8005b18 <_sbrk+0x3c>)
 8005ae6:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 8005ae8:	b12b      	cbz	r3, 8005af6 <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005aea:	4418      	add	r0, r3
 8005aec:	4290      	cmp	r0, r2
 8005aee:	d807      	bhi.n	8005b00 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005af0:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <_sbrk+0x40>)
 8005af8:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8005afa:	4418      	add	r0, r3
 8005afc:	4290      	cmp	r0, r2
 8005afe:	d9f7      	bls.n	8005af0 <_sbrk+0x14>
    errno = ENOMEM;
 8005b00:	f006 f80e 	bl	800bb20 <__errno>
 8005b04:	230c      	movs	r3, #12
 8005b06:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8005b08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	bd10      	pop	{r4, pc}
 8005b10:	20001c18 	.word	0x20001c18
 8005b14:	20008000 	.word	0x20008000
 8005b18:	00000400 	.word	0x00000400
 8005b1c:	20001d70 	.word	0x20001d70

08005b20 <uart_debug_print>:
extern UART_HandleTypeDef huart2;
uint8_t uartTxBuffer[UART_TX_BUFFER_SIZE];
volatile bool uartTxDone = true;
extern void MX_USART2_UART_Init(void);

void uart_debug_print(const char *format, ...) {
 8005b20:	b40f      	push	{r0, r1, r2, r3}
 8005b22:	b570      	push	{r4, r5, r6, lr}
 8005b24:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005b28:	f50d 6383 	add.w	r3, sp, #1048	@ 0x418
    char buffer[UART_TX_BUFFER_SIZE];

    va_list args;
    va_start(args, format);
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8005b2c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
void uart_debug_print(const char *format, ...) {
 8005b30:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 8005b34:	9301      	str	r3, [sp, #4]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8005b36:	a802      	add	r0, sp, #8
 8005b38:	f005 ffdc 	bl	800baf4 <vsniprintf>
    va_end(args);

    if (len > 0 && len < sizeof(buffer)) {
 8005b3c:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8005b40:	1e42      	subs	r2, r0, #1
 8005b42:	429a      	cmp	r2, r3
 8005b44:	d905      	bls.n	8005b52 <uart_debug_print+0x32>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // LED ON = error
        } else {
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
        }
    }
}
 8005b46:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 8005b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b4e:	b004      	add	sp, #16
 8005b50:	4770      	bx	lr
 8005b52:	4604      	mov	r4, r0
        uint32_t startTick = HAL_GetTick();
 8005b54:	f000 f90c 	bl	8005d70 <HAL_GetTick>
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 8005b58:	4e15      	ldr	r6, [pc, #84]	@ (8005bb0 <uart_debug_print+0x90>)
        uint32_t startTick = HAL_GetTick();
 8005b5a:	4605      	mov	r5, r0
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 8005b5c:	b2a4      	uxth	r4, r4
 8005b5e:	e004      	b.n	8005b6a <uart_debug_print+0x4a>
        } while (status == HAL_BUSY && (HAL_GetTick() - startTick < 200));
 8005b60:	f000 f906 	bl	8005d70 <HAL_GetTick>
 8005b64:	1b40      	subs	r0, r0, r5
 8005b66:	28c7      	cmp	r0, #199	@ 0xc7
 8005b68:	d812      	bhi.n	8005b90 <uart_debug_print+0x70>
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 8005b6a:	2364      	movs	r3, #100	@ 0x64
 8005b6c:	4622      	mov	r2, r4
 8005b6e:	a902      	add	r1, sp, #8
 8005b70:	4630      	mov	r0, r6
 8005b72:	f003 faf5 	bl	8009160 <HAL_UART_Transmit>
        } while (status == HAL_BUSY && (HAL_GetTick() - startTick < 200));
 8005b76:	2802      	cmp	r0, #2
 8005b78:	d0f2      	beq.n	8005b60 <uart_debug_print+0x40>
        if (status != HAL_OK) {
 8005b7a:	b948      	cbnz	r0, 8005b90 <uart_debug_print+0x70>
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
 8005b7c:	480d      	ldr	r0, [pc, #52]	@ (8005bb4 <uart_debug_print+0x94>)
 8005b7e:	2140      	movs	r1, #64	@ 0x40
 8005b80:	f002 f974 	bl	8007e6c <HAL_GPIO_TogglePin>
}
 8005b84:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 8005b88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b8c:	b004      	add	sp, #16
 8005b8e:	4770      	bx	lr
            HAL_UART_DeInit(&huart2);
 8005b90:	4807      	ldr	r0, [pc, #28]	@ (8005bb0 <uart_debug_print+0x90>)
 8005b92:	f003 fac5 	bl	8009120 <HAL_UART_DeInit>
            MX_USART2_UART_Init();
 8005b96:	f7fc f97b 	bl	8001e90 <MX_USART2_UART_Init>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // LED ON = error
 8005b9a:	4806      	ldr	r0, [pc, #24]	@ (8005bb4 <uart_debug_print+0x94>)
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	2140      	movs	r1, #64	@ 0x40
 8005ba0:	f002 f95e 	bl	8007e60 <HAL_GPIO_WritePin>
}
 8005ba4:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 8005ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005bac:	b004      	add	sp, #16
 8005bae:	4770      	bx	lr
 8005bb0:	20000670 	.word	0x20000670
 8005bb4:	48000800 	.word	0x48000800

08005bb8 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 8005bb8:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 8005bba:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 8005bbc:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8005bc4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	e841 3400 	strex	r4, r3, [r1]
 8005bcc:	2c00      	cmp	r4, #0
 8005bce:	d1f7      	bne.n	8005bc0 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 8005bd0:	68c1      	ldr	r1, [r0, #12]
 8005bd2:	4d19      	ldr	r5, [pc, #100]	@ (8005c38 <UASPEP_INIT+0x80>)
 8005bd4:	6843      	ldr	r3, [r0, #4]
 8005bd6:	5c6c      	ldrb	r4, [r5, r1]
 8005bd8:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 8005bda:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 8005bde:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005be0:	2340      	movs	r3, #64	@ 0x40
 8005be2:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 8005be4:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8005bec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf0:	e841 3400 	strex	r4, r3, [r1]
 8005bf4:	2c00      	cmp	r4, #0
 8005bf6:	d1f7      	bne.n	8005be8 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005bf8:	2340      	movs	r3, #64	@ 0x40
 8005bfa:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bfc:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8005c00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c04:	e842 3100 	strex	r1, r3, [r2]
 8005c08:	2900      	cmp	r1, #0
 8005c0a:	d1f7      	bne.n	8005bfc <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 8005c0c:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c10:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8005c14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c18:	e841 3400 	strex	r4, r3, [r1]
 8005c1c:	2c00      	cmp	r4, #0
 8005c1e:	d1f7      	bne.n	8005c10 <UASPEP_INIT+0x58>
 8005c20:	6901      	ldr	r1, [r0, #16]
 8005c22:	6883      	ldr	r3, [r0, #8]
 8005c24:	5c69      	ldrb	r1, [r5, r1]
 8005c26:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8005c28:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005c2c:	2140      	movs	r1, #64	@ 0x40
 8005c2e:	6098      	str	r0, [r3, #8]
}
 8005c30:	bc30      	pop	{r4, r5}
 8005c32:	6211      	str	r1, [r2, #32]
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	0800cd1c 	.word	0x0800cd1c

08005c3c <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005c3c:	6903      	ldr	r3, [r0, #16]
 8005c3e:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8005c40:	b410      	push	{r4}
 8005c42:	4c0b      	ldr	r4, [pc, #44]	@ (8005c70 <UASPEP_CFG_TRANSMISSION+0x34>)
 8005c44:	5ce3      	ldrb	r3, [r4, r3]
 8005c46:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005c48:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005c4a:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005c4e:	d40c      	bmi.n	8005c6a <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005c50:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8005c54:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005c58:	f36f 010f 	bfc	r1, #0, #16
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005c62:	58c2      	ldr	r2, [r0, r3]
 8005c64:	f042 0201 	orr.w	r2, r2, #1
 8005c68:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	0800cd1c 	.word	0x0800cd1c

08005c74 <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 8005c74:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005c76:	68c3      	ldr	r3, [r0, #12]
 8005c78:	4c0c      	ldr	r4, [pc, #48]	@ (8005cac <UASPEP_CFG_RECEPTION+0x38>)
 8005c7a:	6840      	ldr	r0, [r0, #4]
 8005c7c:	5ce3      	ldrb	r3, [r4, r3]
 8005c7e:	58c4      	ldr	r4, [r0, r3]
 8005c80:	eb00 0c03 	add.w	ip, r0, r3
 8005c84:	f024 0401 	bic.w	r4, r4, #1
 8005c88:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005c8a:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8005c8e:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 8005c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c96:	f36f 010f 	bfc	r1, #0, #16
 8005c9a:	4311      	orrs	r1, r2
 8005c9c:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005ca0:	58c2      	ldr	r2, [r0, r3]
 8005ca2:	f042 0201 	orr.w	r2, r2, #1
 8005ca6:	50c2      	str	r2, [r0, r3]
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	0800cd1c 	.word	0x0800cd1c

08005cb0 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8005cb0:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8005cb2:	2310      	movs	r3, #16
 8005cb4:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb6:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8005cba:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cbe:	e842 3100 	strex	r1, r3, [r2]
 8005cc2:	2900      	cmp	r1, #0
 8005cc4:	d1f7      	bne.n	8005cb6 <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8005cc6:	4770      	bx	lr

08005cc8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005cc8:	4a03      	ldr	r2, [pc, #12]	@ (8005cd8 <SystemInit+0x10>)
 8005cca:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8005cce:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005cd2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005cd6:	4770      	bx	lr
 8005cd8:	e000ed00 	.word	0xe000ed00

08005cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005cdc:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 8005cde:	4b0f      	ldr	r3, [pc, #60]	@ (8005d1c <HAL_InitTick+0x40>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 8005ce4:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 8005ce6:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005ce8:	490d      	ldr	r1, [pc, #52]	@ (8005d20 <HAL_InitTick+0x44>)
 8005cea:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005cee:	4605      	mov	r5, r0
 8005cf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cf4:	6808      	ldr	r0, [r1, #0]
 8005cf6:	fbb0 f0f3 	udiv	r0, r0, r3
 8005cfa:	f001 f83f 	bl	8006d7c <HAL_SYSTICK_Config>
 8005cfe:	4604      	mov	r4, r0
 8005d00:	2800      	cmp	r0, #0
 8005d02:	d1ef      	bne.n	8005ce4 <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005d04:	2d0f      	cmp	r5, #15
 8005d06:	d8ed      	bhi.n	8005ce4 <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005d08:	4602      	mov	r2, r0
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8005d10:	f000 ffd8 	bl	8006cc4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005d14:	4b03      	ldr	r3, [pc, #12]	@ (8005d24 <HAL_InitTick+0x48>)
 8005d16:	4620      	mov	r0, r4
 8005d18:	601d      	str	r5, [r3, #0]
}
 8005d1a:	bd38      	pop	{r3, r4, r5, pc}
 8005d1c:	200004f4 	.word	0x200004f4
 8005d20:	200004f0 	.word	0x200004f0
 8005d24:	200004f8 	.word	0x200004f8

08005d28 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d28:	4a0a      	ldr	r2, [pc, #40]	@ (8005d54 <HAL_Init+0x2c>)
 8005d2a:	6813      	ldr	r3, [r2, #0]
 8005d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8005d30:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d32:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005d34:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005d36:	f000 ffb3 	bl	8006ca0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005d3a:	2004      	movs	r0, #4
 8005d3c:	f7ff ffce 	bl	8005cdc <HAL_InitTick>
 8005d40:	b110      	cbz	r0, 8005d48 <HAL_Init+0x20>
    status = HAL_ERROR;
 8005d42:	2401      	movs	r4, #1
}
 8005d44:	4620      	mov	r0, r4
 8005d46:	bd10      	pop	{r4, pc}
 8005d48:	4604      	mov	r4, r0
    HAL_MspInit();
 8005d4a:	f7ff fb23 	bl	8005394 <HAL_MspInit>
}
 8005d4e:	4620      	mov	r0, r4
 8005d50:	bd10      	pop	{r4, pc}
 8005d52:	bf00      	nop
 8005d54:	40022000 	.word	0x40022000

08005d58 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005d58:	4a03      	ldr	r2, [pc, #12]	@ (8005d68 <HAL_IncTick+0x10>)
 8005d5a:	4904      	ldr	r1, [pc, #16]	@ (8005d6c <HAL_IncTick+0x14>)
 8005d5c:	6813      	ldr	r3, [r2, #0]
 8005d5e:	6809      	ldr	r1, [r1, #0]
 8005d60:	440b      	add	r3, r1
 8005d62:	6013      	str	r3, [r2, #0]
}
 8005d64:	4770      	bx	lr
 8005d66:	bf00      	nop
 8005d68:	20001c1c 	.word	0x20001c1c
 8005d6c:	200004f4 	.word	0x200004f4

08005d70 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005d70:	4b01      	ldr	r3, [pc, #4]	@ (8005d78 <HAL_GetTick+0x8>)
 8005d72:	6818      	ldr	r0, [r3, #0]
}
 8005d74:	4770      	bx	lr
 8005d76:	bf00      	nop
 8005d78:	20001c1c 	.word	0x20001c1c

08005d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7ff fff6 	bl	8005d70 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005d84:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8005d86:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005d88:	d002      	beq.n	8005d90 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005d8a:	4b04      	ldr	r3, [pc, #16]	@ (8005d9c <HAL_Delay+0x20>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005d90:	f7ff ffee 	bl	8005d70 <HAL_GetTick>
 8005d94:	1b40      	subs	r0, r0, r5
 8005d96:	42a0      	cmp	r0, r4
 8005d98:	d3fa      	bcc.n	8005d90 <HAL_Delay+0x14>
  {
  }
}
 8005d9a:	bd38      	pop	{r3, r4, r5, pc}
 8005d9c:	200004f4 	.word	0x200004f4

08005da0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005da0:	b530      	push	{r4, r5, lr}
 8005da2:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8005da4:	2300      	movs	r3, #0
 8005da6:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f000 80aa 	beq.w	8005f02 <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005dae:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8005db0:	4604      	mov	r4, r0
 8005db2:	2d00      	cmp	r5, #0
 8005db4:	f000 80aa 	beq.w	8005f0c <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005db8:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005dba:	6893      	ldr	r3, [r2, #8]
 8005dbc:	009d      	lsls	r5, r3, #2
 8005dbe:	d505      	bpl.n	8005dcc <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005dc0:	6893      	ldr	r3, [r2, #8]
 8005dc2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8005dc6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8005dca:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005dcc:	6893      	ldr	r3, [r2, #8]
 8005dce:	00d8      	lsls	r0, r3, #3
 8005dd0:	d419      	bmi.n	8005e06 <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005dd2:	4b68      	ldr	r3, [pc, #416]	@ (8005f74 <HAL_ADC_Init+0x1d4>)
 8005dd4:	4868      	ldr	r0, [pc, #416]	@ (8005f78 <HAL_ADC_Init+0x1d8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8005dd8:	6891      	ldr	r1, [r2, #8]
 8005dda:	099b      	lsrs	r3, r3, #6
 8005ddc:	fba0 0303 	umull	r0, r3, r0, r3
 8005de0:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 8005de4:	099b      	lsrs	r3, r3, #6
 8005de6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8005dea:	3301      	adds	r3, #1
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 8005df2:	6091      	str	r1, [r2, #8]
 8005df4:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005df6:	9b01      	ldr	r3, [sp, #4]
 8005df8:	b12b      	cbz	r3, 8005e06 <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 8005dfa:	9b01      	ldr	r3, [sp, #4]
 8005dfc:	3b01      	subs	r3, #1
 8005dfe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8005e00:	9b01      	ldr	r3, [sp, #4]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1f9      	bne.n	8005dfa <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005e06:	6893      	ldr	r3, [r2, #8]
 8005e08:	00d9      	lsls	r1, r3, #3
 8005e0a:	d47d      	bmi.n	8005f08 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e0c:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005e0e:	f043 0310 	orr.w	r3, r3, #16
 8005e12:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e14:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8005e16:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e18:	4303      	orrs	r3, r0
 8005e1a:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005e1c:	6893      	ldr	r3, [r2, #8]
 8005e1e:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005e22:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005e24:	d169      	bne.n	8005efa <HAL_ADC_Init+0x15a>
 8005e26:	06db      	lsls	r3, r3, #27
 8005e28:	d467      	bmi.n	8005efa <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005e2a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005e2c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005e30:	f043 0302 	orr.w	r3, r3, #2
 8005e34:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005e36:	6893      	ldr	r3, [r2, #8]
 8005e38:	07dd      	lsls	r5, r3, #31
 8005e3a:	d409      	bmi.n	8005e50 <HAL_ADC_Init+0xb0>
 8005e3c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005e40:	689b      	ldr	r3, [r3, #8]
 8005e42:	f013 0f01 	tst.w	r3, #1
 8005e46:	4b4d      	ldr	r3, [pc, #308]	@ (8005f7c <HAL_ADC_Init+0x1dc>)
 8005e48:	689b      	ldr	r3, [r3, #8]
 8005e4a:	d101      	bne.n	8005e50 <HAL_ADC_Init+0xb0>
 8005e4c:	07d9      	lsls	r1, r3, #31
 8005e4e:	d57a      	bpl.n	8005f46 <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8005e50:	68e5      	ldr	r5, [r4, #12]
 8005e52:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005e54:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8005e58:	432b      	orrs	r3, r5
 8005e5a:	68a5      	ldr	r5, [r4, #8]
 8005e5c:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e5e:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e60:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 8005e62:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005e66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005e6a:	d055      	beq.n	8005f18 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005e6c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005e6e:	b121      	cbz	r1, 8005e7a <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8005e70:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e72:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8005e76:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005e78:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005e7a:	68d5      	ldr	r5, [r2, #12]
 8005e7c:	4940      	ldr	r1, [pc, #256]	@ (8005f80 <HAL_ADC_Init+0x1e0>)
 8005e7e:	4029      	ands	r1, r5
 8005e80:	4319      	orrs	r1, r3
 8005e82:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005e84:	6913      	ldr	r3, [r2, #16]
 8005e86:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e88:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005e8c:	430b      	orrs	r3, r1
 8005e8e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005e90:	6893      	ldr	r3, [r2, #8]
 8005e92:	071b      	lsls	r3, r3, #28
 8005e94:	d422      	bmi.n	8005edc <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005e96:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e98:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e9c:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005e9e:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005ea2:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005ea4:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005ea8:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005eac:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 8005eae:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005eb0:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005eb2:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d03c      	beq.n	8005f32 <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005eb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ebc:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005ebe:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005ec2:	f36f 030d 	bfc	r3, #0, #14
 8005ec6:	430b      	orrs	r3, r1
 8005ec8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ecc:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d040      	beq.n	8005f56 <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005ed4:	6913      	ldr	r3, [r2, #16]
 8005ed6:	f023 0301 	bic.w	r3, r3, #1
 8005eda:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005edc:	6963      	ldr	r3, [r4, #20]
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d01f      	beq.n	8005f22 <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005ee2:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8005ee4:	f023 030f 	bic.w	r3, r3, #15
 8005ee8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005eea:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005eec:	f023 0303 	bic.w	r3, r3, #3
 8005ef0:	f043 0301 	orr.w	r3, r3, #1
 8005ef4:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 8005ef6:	b003      	add	sp, #12
 8005ef8:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005efa:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005efc:	f043 0310 	orr.w	r3, r3, #16
 8005f00:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 8005f02:	2001      	movs	r0, #1
}
 8005f04:	b003      	add	sp, #12
 8005f06:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f08:	2000      	movs	r0, #0
 8005f0a:	e787      	b.n	8005e1c <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 8005f0c:	f7ff fa64 	bl	80053d8 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8005f10:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 8005f12:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 8005f16:	e74f      	b.n	8005db8 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005f18:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005f1a:	3901      	subs	r1, #1
 8005f1c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005f20:	e7a4      	b.n	8005e6c <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f22:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005f24:	6a23      	ldr	r3, [r4, #32]
 8005f26:	f021 010f 	bic.w	r1, r1, #15
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	430b      	orrs	r3, r1
 8005f2e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005f30:	e7db      	b.n	8005eea <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f36:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005f38:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005f3c:	f36f 030d 	bfc	r3, #0, #14
 8005f40:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8005f44:	e7c2      	b.n	8005ecc <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005f46:	490f      	ldr	r1, [pc, #60]	@ (8005f84 <HAL_ADC_Init+0x1e4>)
 8005f48:	6865      	ldr	r5, [r4, #4]
 8005f4a:	688b      	ldr	r3, [r1, #8]
 8005f4c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005f50:	432b      	orrs	r3, r5
 8005f52:	608b      	str	r3, [r1, #8]
}
 8005f54:	e77c      	b.n	8005e50 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 8005f56:	6911      	ldr	r1, [r2, #16]
 8005f58:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005f5a:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8005f5c:	f36f 018a 	bfc	r1, #2, #9
 8005f60:	432b      	orrs	r3, r5
 8005f62:	430b      	orrs	r3, r1
 8005f64:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8005f66:	430b      	orrs	r3, r1
 8005f68:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005f6a:	430b      	orrs	r3, r1
 8005f6c:	f043 0301 	orr.w	r3, r3, #1
 8005f70:	6113      	str	r3, [r2, #16]
 8005f72:	e7b3      	b.n	8005edc <HAL_ADC_Init+0x13c>
 8005f74:	200004f0 	.word	0x200004f0
 8005f78:	053e2d63 	.word	0x053e2d63
 8005f7c:	50000100 	.word	0x50000100
 8005f80:	fff04007 	.word	0xfff04007
 8005f84:	50000300 	.word	0x50000300

08005f88 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005f88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f8c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8005f90:	b082      	sub	sp, #8
 8005f92:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 8005f94:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 8005f96:	f04f 0000 	mov.w	r0, #0
 8005f9a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005f9c:	f000 812d 	beq.w	80061fa <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005fa0:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 8005fa2:	2001      	movs	r0, #1
 8005fa4:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fa8:	6894      	ldr	r4, [r2, #8]
 8005faa:	0764      	lsls	r4, r4, #29
 8005fac:	d455      	bmi.n	800605a <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005fae:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005fb0:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 8005fb4:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005fb8:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 8005fbc:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005fbe:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 8005fc2:	f3c0 6084 	ubfx	r0, r0, #26, #5
 8005fc6:	f854 500e 	ldr.w	r5, [r4, lr]
 8005fca:	261f      	movs	r6, #31
 8005fcc:	fa00 f00c 	lsl.w	r0, r0, ip
 8005fd0:	fa06 fc0c 	lsl.w	ip, r6, ip
 8005fd4:	ea25 0c0c 	bic.w	ip, r5, ip
 8005fd8:	ea40 000c 	orr.w	r0, r0, ip
 8005fdc:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fe0:	6890      	ldr	r0, [r2, #8]
 8005fe2:	0747      	lsls	r7, r0, #29
 8005fe4:	d543      	bpl.n	800606e <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fe6:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005fe8:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005fea:	6894      	ldr	r4, [r2, #8]
 8005fec:	07e5      	lsls	r5, r4, #31
 8005fee:	d412      	bmi.n	8006016 <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005ff0:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005ff2:	4cb0      	ldr	r4, [pc, #704]	@ (80062b4 <HAL_ADC_ConfigChannel+0x32c>)
 8005ff4:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 8005ff8:	f006 0718 	and.w	r7, r6, #24
 8005ffc:	40fc      	lsrs	r4, r7
 8005ffe:	f3c0 0712 	ubfx	r7, r0, #0, #19
 8006002:	4004      	ands	r4, r0
 8006004:	ea25 0507 	bic.w	r5, r5, r7
 8006008:	432c      	orrs	r4, r5
 800600a:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800600e:	4caa      	ldr	r4, [pc, #680]	@ (80062b8 <HAL_ADC_ConfigChannel+0x330>)
 8006010:	42a6      	cmp	r6, r4
 8006012:	f000 80a2 	beq.w	800615a <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8006016:	49a9      	ldr	r1, [pc, #676]	@ (80062bc <HAL_ADC_ConfigChannel+0x334>)
 8006018:	4208      	tst	r0, r1
 800601a:	d01c      	beq.n	8006056 <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800601c:	4ca8      	ldr	r4, [pc, #672]	@ (80062c0 <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800601e:	4da9      	ldr	r5, [pc, #676]	@ (80062c4 <HAL_ADC_ConfigChannel+0x33c>)
 8006020:	68a1      	ldr	r1, [r4, #8]
 8006022:	42a8      	cmp	r0, r5
 8006024:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8006028:	d074      	beq.n	8006114 <HAL_ADC_ConfigChannel+0x18c>
 800602a:	4da7      	ldr	r5, [pc, #668]	@ (80062c8 <HAL_ADC_ConfigChannel+0x340>)
 800602c:	42a8      	cmp	r0, r5
 800602e:	d071      	beq.n	8006114 <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8006030:	4da6      	ldr	r5, [pc, #664]	@ (80062cc <HAL_ADC_ConfigChannel+0x344>)
 8006032:	42a8      	cmp	r0, r5
 8006034:	f000 80e5 	beq.w	8006202 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8006038:	4da5      	ldr	r5, [pc, #660]	@ (80062d0 <HAL_ADC_ConfigChannel+0x348>)
 800603a:	42a8      	cmp	r0, r5
 800603c:	d10b      	bne.n	8006056 <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800603e:	0249      	lsls	r1, r1, #9
 8006040:	d409      	bmi.n	8006056 <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006042:	49a4      	ldr	r1, [pc, #656]	@ (80062d4 <HAL_ADC_ConfigChannel+0x34c>)
 8006044:	428a      	cmp	r2, r1
 8006046:	d006      	beq.n	8006056 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006048:	68a2      	ldr	r2, [r4, #8]
 800604a:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 800604e:	4332      	orrs	r2, r6
 8006050:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8006054:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006056:	2000      	movs	r0, #0
 8006058:	e003      	b.n	8006062 <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800605a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800605c:	f042 0220 	orr.w	r2, r2, #32
 8006060:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8006068:	b002      	add	sp, #8
 800606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800606e:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006070:	6808      	ldr	r0, [r1, #0]
 8006072:	0726      	lsls	r6, r4, #28
 8006074:	d4b9      	bmi.n	8005fea <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006076:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8006078:	f3c0 5604 	ubfx	r6, r0, #20, #5
 800607c:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800607e:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8006080:	40b4      	lsls	r4, r6
 8006082:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006086:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 800608a:	ea6f 0404 	mvn.w	r4, r4
 800608e:	f000 8107 	beq.w	80062a0 <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006092:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 8006096:	40b5      	lsls	r5, r6
 8006098:	583e      	ldr	r6, [r7, r0]
 800609a:	4034      	ands	r4, r6
 800609c:	432c      	orrs	r4, r5
 800609e:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80060a0:	6950      	ldr	r0, [r2, #20]
 80060a2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80060a6:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80060a8:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80060ac:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80060ae:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80060b0:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80060b2:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80060b4:	f000 80c8 	beq.w	8006248 <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80060b8:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80060bc:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80060be:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 80060c2:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060c6:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 80060ca:	4d83      	ldr	r5, [pc, #524]	@ (80062d8 <HAL_ADC_ConfigChannel+0x350>)
 80060cc:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 80060d0:	ea0c 0505 	and.w	r5, ip, r5
 80060d4:	433d      	orrs	r5, r7
 80060d6:	4328      	orrs	r0, r5
 80060d8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80060dc:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060e0:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80060e2:	698e      	ldr	r6, [r1, #24]
 80060e4:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80060e8:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80060ec:	4330      	orrs	r0, r6
 80060ee:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80060f2:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80060f4:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 80060f6:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80060fa:	f1a5 0501 	sub.w	r5, r5, #1
 80060fe:	fab5 f585 	clz	r5, r5
 8006102:	096d      	lsrs	r5, r5, #5
 8006104:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8006108:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 800610c:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8006110:	6808      	ldr	r0, [r1, #0]
}
 8006112:	e76a      	b.n	8005fea <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006114:	020c      	lsls	r4, r1, #8
 8006116:	d49e      	bmi.n	8006056 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006118:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 800611c:	d19b      	bne.n	8006056 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800611e:	4968      	ldr	r1, [pc, #416]	@ (80062c0 <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006120:	486e      	ldr	r0, [pc, #440]	@ (80062dc <HAL_ADC_ConfigChannel+0x354>)
 8006122:	688a      	ldr	r2, [r1, #8]
 8006124:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8006128:	4332      	orrs	r2, r6
 800612a:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800612e:	608a      	str	r2, [r1, #8]
 8006130:	6802      	ldr	r2, [r0, #0]
 8006132:	496b      	ldr	r1, [pc, #428]	@ (80062e0 <HAL_ADC_ConfigChannel+0x358>)
 8006134:	0992      	lsrs	r2, r2, #6
 8006136:	fba1 1202 	umull	r1, r2, r1, r2
 800613a:	0992      	lsrs	r2, r2, #6
 800613c:	3201      	adds	r2, #1
 800613e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8006142:	0092      	lsls	r2, r2, #2
 8006144:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006146:	9a01      	ldr	r2, [sp, #4]
 8006148:	2a00      	cmp	r2, #0
 800614a:	d084      	beq.n	8006056 <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 800614c:	9a01      	ldr	r2, [sp, #4]
 800614e:	3a01      	subs	r2, #1
 8006150:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8006152:	9a01      	ldr	r2, [sp, #4]
 8006154:	2a00      	cmp	r2, #0
 8006156:	d1f9      	bne.n	800614c <HAL_ADC_ConfigChannel+0x1c4>
 8006158:	e77d      	b.n	8006056 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800615a:	2f00      	cmp	r7, #0
 800615c:	d060      	beq.n	8006220 <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800615e:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8006162:	2c00      	cmp	r4, #0
 8006164:	f000 80be 	beq.w	80062e4 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8006168:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800616c:	3401      	adds	r4, #1
 800616e:	f004 041f 	and.w	r4, r4, #31
 8006172:	2c09      	cmp	r4, #9
 8006174:	f240 80b6 	bls.w	80062e4 <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006178:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800617c:	2c00      	cmp	r4, #0
 800617e:	f000 8157 	beq.w	8006430 <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 8006182:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006186:	3401      	adds	r4, #1
 8006188:	06a4      	lsls	r4, r4, #26
 800618a:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800618e:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006192:	2d00      	cmp	r5, #0
 8006194:	f000 8156 	beq.w	8006444 <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8006198:	fab5 f585 	clz	r5, r5
 800619c:	3501      	adds	r5, #1
 800619e:	f005 051f 	and.w	r5, r5, #31
 80061a2:	2601      	movs	r6, #1
 80061a4:	fa06 f505 	lsl.w	r5, r6, r5
 80061a8:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061aa:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 80061ae:	2800      	cmp	r0, #0
 80061b0:	f000 8146 	beq.w	8006440 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 80061b4:	fab0 f080 	clz	r0, r0
 80061b8:	1c45      	adds	r5, r0, #1
 80061ba:	f005 051f 	and.w	r5, r5, #31
 80061be:	2003      	movs	r0, #3
 80061c0:	f06f 061d 	mvn.w	r6, #29
 80061c4:	fb10 6005 	smlabb	r0, r0, r5, r6
 80061c8:	0500      	lsls	r0, r0, #20
 80061ca:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80061ce:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80061d0:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80061d2:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80061d4:	f005 0504 	and.w	r5, r5, #4
 80061d8:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80061dc:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80061e0:	fa04 f700 	lsl.w	r7, r4, r0
 80061e4:	f04f 0c07 	mov.w	ip, #7
 80061e8:	5974      	ldr	r4, [r6, r5]
 80061ea:	fa0c f000 	lsl.w	r0, ip, r0
 80061ee:	ea24 0000 	bic.w	r0, r4, r0
 80061f2:	4338      	orrs	r0, r7
 80061f4:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80061f6:	6808      	ldr	r0, [r1, #0]
}
 80061f8:	e70d      	b.n	8006016 <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80061fa:	2002      	movs	r0, #2
}
 80061fc:	b002      	add	sp, #8
 80061fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006202:	01c8      	lsls	r0, r1, #7
 8006204:	f53f af27 	bmi.w	8006056 <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006208:	4932      	ldr	r1, [pc, #200]	@ (80062d4 <HAL_ADC_ConfigChannel+0x34c>)
 800620a:	428a      	cmp	r2, r1
 800620c:	f43f af23 	beq.w	8006056 <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006210:	68a2      	ldr	r2, [r4, #8]
 8006212:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8006216:	4332      	orrs	r2, r6
 8006218:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800621c:	60a2      	str	r2, [r4, #8]
}
 800621e:	e71a      	b.n	8006056 <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006220:	0e80      	lsrs	r0, r0, #26
 8006222:	3001      	adds	r0, #1
 8006224:	f000 051f 	and.w	r5, r0, #31
 8006228:	2401      	movs	r4, #1
 800622a:	0680      	lsls	r0, r0, #26
 800622c:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8006230:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006232:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006234:	ea44 0400 	orr.w	r4, r4, r0
 8006238:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800623c:	d977      	bls.n	800632e <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800623e:	381e      	subs	r0, #30
 8006240:	0500      	lsls	r0, r0, #20
 8006242:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8006246:	e7c2      	b.n	80061ce <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006248:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 800624a:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800624c:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006250:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006254:	2d00      	cmp	r5, #0
 8006256:	d16c      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x3aa>
 8006258:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800625c:	4284      	cmp	r4, r0
 800625e:	f000 80a0 	beq.w	80063a2 <HAL_ADC_ConfigChannel+0x41a>
 8006262:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8006264:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006266:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800626a:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800626e:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 8006272:	4285      	cmp	r5, r0
 8006274:	f000 80c0 	beq.w	80063f8 <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006278:	68a5      	ldr	r5, [r4, #8]
 800627a:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800627c:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006280:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006284:	4285      	cmp	r5, r0
 8006286:	f000 80a1 	beq.w	80063cc <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800628a:	68e5      	ldr	r5, [r4, #12]
 800628c:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800628e:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006292:	f3c5 6484 	ubfx	r4, r5, #26, #5
 8006296:	42a0      	cmp	r0, r4
 8006298:	f000 80c4 	beq.w	8006424 <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800629c:	4638      	mov	r0, r7
 800629e:	e6a4      	b.n	8005fea <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80062a0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80062a4:	5835      	ldr	r5, [r6, r0]
 80062a6:	402c      	ands	r4, r5
 80062a8:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80062aa:	6950      	ldr	r0, [r2, #20]
 80062ac:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80062b0:	6150      	str	r0, [r2, #20]
}
 80062b2:	e6f9      	b.n	80060a8 <HAL_ADC_ConfigChannel+0x120>
 80062b4:	0007ffff 	.word	0x0007ffff
 80062b8:	407f0000 	.word	0x407f0000
 80062bc:	80080000 	.word	0x80080000
 80062c0:	50000300 	.word	0x50000300
 80062c4:	c3210000 	.word	0xc3210000
 80062c8:	90c00010 	.word	0x90c00010
 80062cc:	c7520000 	.word	0xc7520000
 80062d0:	cb840000 	.word	0xcb840000
 80062d4:	50000100 	.word	0x50000100
 80062d8:	03fff000 	.word	0x03fff000
 80062dc:	200004f0 	.word	0x200004f0
 80062e0:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062e4:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80062e8:	2c00      	cmp	r4, #0
 80062ea:	f000 80b7 	beq.w	800645c <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 80062ee:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80062f2:	3401      	adds	r4, #1
 80062f4:	06a4      	lsls	r4, r4, #26
 80062f6:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062fa:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80062fe:	2d00      	cmp	r5, #0
 8006300:	f000 80aa 	beq.w	8006458 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 8006304:	fab5 f585 	clz	r5, r5
 8006308:	3501      	adds	r5, #1
 800630a:	f005 051f 	and.w	r5, r5, #31
 800630e:	2601      	movs	r6, #1
 8006310:	fa06 f505 	lsl.w	r5, r6, r5
 8006314:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006316:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 800631a:	2800      	cmp	r0, #0
 800631c:	f000 8099 	beq.w	8006452 <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8006320:	fab0 f080 	clz	r0, r0
 8006324:	3001      	adds	r0, #1
 8006326:	f000 001f 	and.w	r0, r0, #31
 800632a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800632e:	0500      	lsls	r0, r0, #20
 8006330:	e74d      	b.n	80061ce <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006332:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 8006336:	b11d      	cbz	r5, 8006340 <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8006338:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800633c:	42ac      	cmp	r4, r5
 800633e:	d030      	beq.n	80063a2 <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006340:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 8006342:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006344:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006348:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800634c:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006350:	fa97 f6a7 	rbit	r6, r7
 8006354:	f104 0c08 	add.w	ip, r4, #8
 8006358:	46e0      	mov	r8, ip
  if (value == 0U)
 800635a:	2e00      	cmp	r6, #0
 800635c:	d074      	beq.n	8006448 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 800635e:	fab6 f686 	clz	r6, r6
 8006362:	42ae      	cmp	r6, r5
 8006364:	d04a      	beq.n	80063fc <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006366:	f8dc 5000 	ldr.w	r5, [ip]
 800636a:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800636e:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006372:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006376:	f104 060c 	add.w	r6, r4, #12
 800637a:	46b0      	mov	r8, r6
  if (value == 0U)
 800637c:	f1be 0f00 	cmp.w	lr, #0
 8006380:	d059      	beq.n	8006436 <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 8006382:	fabe fe8e 	clz	lr, lr
 8006386:	45ae      	cmp	lr, r5
 8006388:	d022      	beq.n	80063d0 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800638a:	6834      	ldr	r4, [r6, #0]
 800638c:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800638e:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006392:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 8006396:	2d00      	cmp	r5, #0
 8006398:	f43f ae27 	beq.w	8005fea <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 800639c:	fab5 f085 	clz	r0, r5
 80063a0:	e779      	b.n	8006296 <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 80063a2:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 80063a4:	4614      	mov	r4, r2
 80063a6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80063aa:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063ae:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80063b0:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 80063b2:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 80063b4:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063b8:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80063bc:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063c0:	4638      	mov	r0, r7
 80063c2:	2e00      	cmp	r6, #0
 80063c4:	d1c4      	bne.n	8006350 <HAL_ADC_ConfigChannel+0x3c8>
 80063c6:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80063ca:	e752      	b.n	8006272 <HAL_ADC_ConfigChannel+0x2ea>
 80063cc:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80063d0:	f8dc 0000 	ldr.w	r0, [ip]
 80063d4:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80063d8:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063dc:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80063de:	68e0      	ldr	r0, [r4, #12]
 80063e0:	68e4      	ldr	r4, [r4, #12]
 80063e2:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063e6:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80063e8:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80063ec:	4638      	mov	r0, r7
 80063ee:	2d00      	cmp	r5, #0
 80063f0:	d1cf      	bne.n	8006392 <HAL_ADC_ConfigChannel+0x40a>
 80063f2:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80063f6:	e74e      	b.n	8006296 <HAL_ADC_ConfigChannel+0x30e>
 80063f8:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 80063fc:	f8de 0000 	ldr.w	r0, [lr]
 8006400:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006404:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006408:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800640a:	68a0      	ldr	r0, [r4, #8]
 800640c:	68a5      	ldr	r5, [r4, #8]
 800640e:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006412:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006414:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8006418:	4638      	mov	r0, r7
 800641a:	2e00      	cmp	r6, #0
 800641c:	d1a9      	bne.n	8006372 <HAL_ADC_ConfigChannel+0x3ea>
 800641e:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8006422:	e72f      	b.n	8006284 <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8006424:	6830      	ldr	r0, [r6, #0]
 8006426:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800642a:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800642c:	6808      	ldr	r0, [r1, #0]
}
 800642e:	e5dc      	b.n	8005fea <HAL_ADC_ConfigChannel+0x62>
 8006430:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8006434:	e6ab      	b.n	800618e <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006436:	68e5      	ldr	r5, [r4, #12]
 8006438:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800643a:	f3c4 6484 	ubfx	r4, r4, #26, #5
 800643e:	e7a8      	b.n	8006392 <HAL_ADC_ConfigChannel+0x40a>
 8006440:	4808      	ldr	r0, [pc, #32]	@ (8006464 <HAL_ADC_ConfigChannel+0x4dc>)
 8006442:	e6c4      	b.n	80061ce <HAL_ADC_ConfigChannel+0x246>
 8006444:	2502      	movs	r5, #2
 8006446:	e6af      	b.n	80061a8 <HAL_ADC_ConfigChannel+0x220>
 8006448:	68a5      	ldr	r5, [r4, #8]
 800644a:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800644c:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006450:	e78f      	b.n	8006372 <HAL_ADC_ConfigChannel+0x3ea>
 8006452:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8006456:	e6ba      	b.n	80061ce <HAL_ADC_ConfigChannel+0x246>
 8006458:	2502      	movs	r5, #2
 800645a:	e75b      	b.n	8006314 <HAL_ADC_ConfigChannel+0x38c>
 800645c:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8006460:	e74b      	b.n	80062fa <HAL_ADC_ConfigChannel+0x372>
 8006462:	bf00      	nop
 8006464:	fe500000 	.word	0xfe500000

08006468 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8006468:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800646c:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8006470:	b083      	sub	sp, #12
 8006472:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8006474:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8006476:	f04f 0000 	mov.w	r0, #0
 800647a:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800647c:	f000 8175 	beq.w	800676a <HAL_ADCEx_InjectedConfigChannel+0x302>
 8006480:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006482:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8006484:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8006488:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 800648c:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 800648e:	2d00      	cmp	r5, #0
 8006490:	d072      	beq.n	8006578 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8006492:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8006494:	2d01      	cmp	r5, #1
 8006496:	d06f      	beq.n	8006578 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8006498:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 800649a:	f000 001f 	and.w	r0, r0, #31
 800649e:	f3c4 6684 	ubfx	r6, r4, #26, #5
 80064a2:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80064a4:	2f00      	cmp	r7, #0
 80064a6:	f040 811a 	bne.w	80066de <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80064aa:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80064ac:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f000 821e 	beq.w	80068f0 <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80064b4:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 80064b6:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 80064ba:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 80064bc:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80064be:	4330      	orrs	r0, r6
 80064c0:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064c4:	6898      	ldr	r0, [r3, #8]
 80064c6:	0700      	lsls	r0, r0, #28
 80064c8:	d410      	bmi.n	80064ec <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 80064ca:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80064ce:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 80064d2:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80064d4:	2d00      	cmp	r5, #0
 80064d6:	f040 80f7 	bne.w	80066c8 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 80064da:	68dd      	ldr	r5, [r3, #12]
 80064dc:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 80064e0:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80064e4:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 80064e8:	4328      	orrs	r0, r5
 80064ea:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80064ec:	6898      	ldr	r0, [r3, #8]
 80064ee:	f010 0004 	ands.w	r0, r0, #4
 80064f2:	d057      	beq.n	80065a4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80064f4:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064f6:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80064f8:	689d      	ldr	r5, [r3, #8]
 80064fa:	07ee      	lsls	r6, r5, #31
 80064fc:	d414      	bmi.n	8006528 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80064fe:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8006500:	4da3      	ldr	r5, [pc, #652]	@ (8006790 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8006502:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8006506:	f007 0c18 	and.w	ip, r7, #24
 800650a:	fa25 f50c 	lsr.w	r5, r5, ip
 800650e:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8006512:	4025      	ands	r5, r4
 8006514:	ea26 0c0e 	bic.w	ip, r6, lr
 8006518:	ea45 050c 	orr.w	r5, r5, ip
 800651c:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006520:	4d9c      	ldr	r5, [pc, #624]	@ (8006794 <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8006522:	42af      	cmp	r7, r5
 8006524:	f000 80f6 	beq.w	8006714 <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006528:	499b      	ldr	r1, [pc, #620]	@ (8006798 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 800652a:	420c      	tst	r4, r1
 800652c:	d01e      	beq.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800652e:	4e9b      	ldr	r6, [pc, #620]	@ (800679c <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8006530:	4d9b      	ldr	r5, [pc, #620]	@ (80067a0 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8006532:	68b1      	ldr	r1, [r6, #8]
 8006534:	42ac      	cmp	r4, r5
 8006536:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 800653a:	f000 809f 	beq.w	800667c <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800653e:	4d99      	ldr	r5, [pc, #612]	@ (80067a4 <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8006540:	42ac      	cmp	r4, r5
 8006542:	f000 809b 	beq.w	800667c <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8006546:	4d98      	ldr	r5, [pc, #608]	@ (80067a8 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8006548:	42ac      	cmp	r4, r5
 800654a:	f000 8112 	beq.w	8006772 <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 800654e:	4d97      	ldr	r5, [pc, #604]	@ (80067ac <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8006550:	42ac      	cmp	r4, r5
 8006552:	d10b      	bne.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006554:	0249      	lsls	r1, r1, #9
 8006556:	d409      	bmi.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8006558:	4995      	ldr	r1, [pc, #596]	@ (80067b0 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800655a:	428b      	cmp	r3, r1
 800655c:	d006      	beq.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800655e:	68b3      	ldr	r3, [r6, #8]
 8006560:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006564:	433b      	orrs	r3, r7
 8006566:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800656a:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800656c:	2300      	movs	r3, #0
 800656e:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8006572:	b003      	add	sp, #12
 8006574:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8006578:	2809      	cmp	r0, #9
 800657a:	d1a3      	bne.n	80064c4 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800657c:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800657e:	0c65      	lsrs	r5, r4, #17
 8006580:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8006584:	b120      	cbz	r0, 8006590 <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8006586:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8006588:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 800658c:	4330      	orrs	r0, r6
 800658e:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8006590:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8006592:	4e88      	ldr	r6, [pc, #544]	@ (80067b4 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8006594:	4030      	ands	r0, r6
 8006596:	4328      	orrs	r0, r5
 8006598:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800659a:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 800659c:	6655      	str	r5, [r2, #100]	@ 0x64
 800659e:	0700      	lsls	r0, r0, #28
 80065a0:	d4a4      	bmi.n	80064ec <HAL_ADCEx_InjectedConfigChannel+0x84>
 80065a2:	e792      	b.n	80064ca <HAL_ADCEx_InjectedConfigChannel+0x62>
 80065a4:	689d      	ldr	r5, [r3, #8]
 80065a6:	072f      	lsls	r7, r5, #28
 80065a8:	d4a6      	bmi.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80065aa:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 80065ac:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 80065b0:	2d00      	cmp	r5, #0
 80065b2:	f040 80a6 	bne.w	8006702 <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80065b6:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80065b8:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 80065ba:	f000 819b 	beq.w	80068f4 <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80065be:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80065c2:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80065c4:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 80065c6:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 80065ca:	2d01      	cmp	r5, #1
 80065cc:	f000 8185 	beq.w	80068da <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 80065d0:	691d      	ldr	r5, [r3, #16]
 80065d2:	f025 0502 	bic.w	r5, r5, #2
 80065d6:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80065d8:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 80065da:	f3c4 5704 	ubfx	r7, r4, #20, #5
 80065de:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80065e0:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 80065e2:	40bd      	lsls	r5, r7
 80065e4:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80065e8:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 80065ec:	ea6f 0505 	mvn.w	r5, r5
 80065f0:	f000 8169 	beq.w	80068c6 <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80065f4:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 80065f8:	40be      	lsls	r6, r7
 80065fa:	f85c 7004 	ldr.w	r7, [ip, r4]
 80065fe:	403d      	ands	r5, r7
 8006600:	4335      	orrs	r5, r6
 8006602:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8006606:	695c      	ldr	r4, [r3, #20]
 8006608:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800660c:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800660e:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006610:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8006612:	694d      	ldr	r5, [r1, #20]
 8006614:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8006616:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8006618:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 800661a:	f000 810c 	beq.w	8006836 <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 800661e:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8006622:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8006624:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8006628:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800662c:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8006630:	4e61      	ldr	r6, [pc, #388]	@ (80067b8 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8006632:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8006636:	ea0e 0606 	and.w	r6, lr, r6
 800663a:	ea46 060c 	orr.w	r6, r6, ip
 800663e:	4334      	orrs	r4, r6
 8006640:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8006644:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006648:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 800664a:	698e      	ldr	r6, [r1, #24]
 800664c:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8006650:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8006654:	4334      	orrs	r4, r6
 8006656:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800665a:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 800665c:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 800665e:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8006662:	f1a6 0601 	sub.w	r6, r6, #1
 8006666:	fab6 f686 	clz	r6, r6
 800666a:	0976      	lsrs	r6, r6, #5
 800666c:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8006670:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8006674:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006678:	680c      	ldr	r4, [r1, #0]
}
 800667a:	e73d      	b.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800667c:	020d      	lsls	r5, r1, #8
 800667e:	f53f af75 	bmi.w	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006682:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006686:	f47f af71 	bne.w	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800668a:	4944      	ldr	r1, [pc, #272]	@ (800679c <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 800668c:	4c4b      	ldr	r4, [pc, #300]	@ (80067bc <HAL_ADCEx_InjectedConfigChannel+0x354>)
 800668e:	688b      	ldr	r3, [r1, #8]
 8006690:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006694:	433b      	orrs	r3, r7
 8006696:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800669a:	608b      	str	r3, [r1, #8]
 800669c:	6823      	ldr	r3, [r4, #0]
 800669e:	4948      	ldr	r1, [pc, #288]	@ (80067c0 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 80066a0:	099b      	lsrs	r3, r3, #6
 80066a2:	fba1 1303 	umull	r1, r3, r1, r3
 80066a6:	099b      	lsrs	r3, r3, #6
 80066a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80066b0:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80066b2:	9b01      	ldr	r3, [sp, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f43f af59 	beq.w	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	3b01      	subs	r3, #1
 80066be:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 80066c0:	9b01      	ldr	r3, [sp, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f9      	bne.n	80066ba <HAL_ADCEx_InjectedConfigChannel+0x252>
 80066c6:	e751      	b.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 80066c8:	68dd      	ldr	r5, [r3, #12]
 80066ca:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 80066ce:	4328      	orrs	r0, r5
 80066d0:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066d2:	6898      	ldr	r0, [r3, #8]
 80066d4:	f010 0004 	ands.w	r0, r0, #4
 80066d8:	f43f af64 	beq.w	80065a4 <HAL_ADCEx_InjectedConfigChannel+0x13c>
 80066dc:	e70a      	b.n	80064f4 <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80066de:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 80066e0:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80066e2:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 80066e4:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 80066e6:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 80066e8:	2f00      	cmp	r7, #0
 80066ea:	f47f aeeb 	bne.w	80064c4 <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 80066ee:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80066f0:	4e30      	ldr	r6, [pc, #192]	@ (80067b4 <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 80066f2:	4030      	ands	r0, r6
 80066f4:	4328      	orrs	r0, r5
 80066f6:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80066f8:	6898      	ldr	r0, [r3, #8]
 80066fa:	0700      	lsls	r0, r0, #28
 80066fc:	f53f aef6 	bmi.w	80064ec <HAL_ADCEx_InjectedConfigChannel+0x84>
 8006700:	e6e3      	b.n	80064ca <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8006702:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8006704:	2d00      	cmp	r5, #0
 8006706:	f43f af56 	beq.w	80065b6 <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 800670a:	2801      	cmp	r0, #1
 800670c:	f000 8118 	beq.w	8006940 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8006710:	68d8      	ldr	r0, [r3, #12]
 8006712:	e754      	b.n	80065be <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006714:	f1be 0f00 	cmp.w	lr, #0
 8006718:	d154      	bne.n	80067c4 <HAL_ADCEx_InjectedConfigChannel+0x35c>
 800671a:	0ea4      	lsrs	r4, r4, #26
 800671c:	3401      	adds	r4, #1
 800671e:	f004 061f 	and.w	r6, r4, #31
 8006722:	2501      	movs	r5, #1
 8006724:	06a4      	lsls	r4, r4, #26
 8006726:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 800672a:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800672c:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800672e:	ea45 0504 	orr.w	r5, r5, r4
 8006732:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006736:	f200 80fe 	bhi.w	8006936 <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800673a:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800673c:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800673e:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8006740:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8006742:	f006 0604 	and.w	r6, r6, #4
 8006746:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 800674a:	f3c4 5404 	ubfx	r4, r4, #20, #5
 800674e:	fa05 fc04 	lsl.w	ip, r5, r4
 8006752:	f04f 0e07 	mov.w	lr, #7
 8006756:	59bd      	ldr	r5, [r7, r6]
 8006758:	fa0e f404 	lsl.w	r4, lr, r4
 800675c:	ea25 0404 	bic.w	r4, r5, r4
 8006760:	ea44 040c 	orr.w	r4, r4, ip
 8006764:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8006766:	680c      	ldr	r4, [r1, #0]
}
 8006768:	e6de      	b.n	8006528 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 800676a:	2002      	movs	r0, #2
}
 800676c:	b003      	add	sp, #12
 800676e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006772:	01cc      	lsls	r4, r1, #7
 8006774:	f53f aefa 	bmi.w	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006778:	490d      	ldr	r1, [pc, #52]	@ (80067b0 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 800677a:	428b      	cmp	r3, r1
 800677c:	f43f aef6 	beq.w	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8006780:	68b3      	ldr	r3, [r6, #8]
 8006782:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8006786:	433b      	orrs	r3, r7
 8006788:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800678c:	60b3      	str	r3, [r6, #8]
}
 800678e:	e6ed      	b.n	800656c <HAL_ADCEx_InjectedConfigChannel+0x104>
 8006790:	0007ffff 	.word	0x0007ffff
 8006794:	407f0000 	.word	0x407f0000
 8006798:	80080000 	.word	0x80080000
 800679c:	50000300 	.word	0x50000300
 80067a0:	c3210000 	.word	0xc3210000
 80067a4:	90c00010 	.word	0x90c00010
 80067a8:	c7520000 	.word	0xc7520000
 80067ac:	cb840000 	.word	0xcb840000
 80067b0:	50000100 	.word	0x50000100
 80067b4:	04104000 	.word	0x04104000
 80067b8:	03fff000 	.word	0x03fff000
 80067bc:	200004f0 	.word	0x200004f0
 80067c0:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067c4:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80067c8:	2d00      	cmp	r5, #0
 80067ca:	f000 80be 	beq.w	800694a <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 80067ce:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80067d2:	3501      	adds	r5, #1
 80067d4:	f005 051f 	and.w	r5, r5, #31
 80067d8:	2d09      	cmp	r5, #9
 80067da:	f240 80b6 	bls.w	800694a <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067de:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 80067e2:	2d00      	cmp	r5, #0
 80067e4:	f000 812b 	beq.w	8006a3e <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 80067e8:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80067ec:	3501      	adds	r5, #1
 80067ee:	06ad      	lsls	r5, r5, #26
 80067f0:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067f4:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	f000 811e 	beq.w	8006a3a <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 80067fe:	fab6 f686 	clz	r6, r6
 8006802:	3601      	adds	r6, #1
 8006804:	f006 061f 	and.w	r6, r6, #31
 8006808:	2701      	movs	r7, #1
 800680a:	fa07 f606 	lsl.w	r6, r7, r6
 800680e:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006810:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8006814:	2c00      	cmp	r4, #0
 8006816:	f000 8109 	beq.w	8006a2c <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 800681a:	fab4 f484 	clz	r4, r4
 800681e:	1c66      	adds	r6, r4, #1
 8006820:	f006 061f 	and.w	r6, r6, #31
 8006824:	2403      	movs	r4, #3
 8006826:	f06f 071d 	mvn.w	r7, #29
 800682a:	fb14 7406 	smlabb	r4, r4, r6, r7
 800682e:	0524      	lsls	r4, r4, #20
 8006830:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8006834:	e782      	b.n	800673c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006836:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8006838:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 800683a:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800683e:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006842:	2e00      	cmp	r6, #0
 8006844:	d05a      	beq.n	80068fc <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006846:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 800684a:	b126      	cbz	r6, 8006856 <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 800684c:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006850:	42b5      	cmp	r5, r6
 8006852:	f000 80ce 	beq.w	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x58a>
 8006856:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006858:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800685a:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800685e:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006862:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006866:	fa9c f7ac 	rbit	r7, ip
 800686a:	f105 0e08 	add.w	lr, r5, #8
 800686e:	46f1      	mov	r9, lr
  if (value == 0U)
 8006870:	2f00      	cmp	r7, #0
 8006872:	f000 80dd 	beq.w	8006a30 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 8006876:	fab7 f787 	clz	r7, r7
 800687a:	42b7      	cmp	r7, r6
 800687c:	f000 80a3 	beq.w	80069c6 <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006880:	f8de 6000 	ldr.w	r6, [lr]
 8006884:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006888:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800688c:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006890:	f105 070c 	add.w	r7, r5, #12
 8006894:	46b9      	mov	r9, r7
  if (value == 0U)
 8006896:	f1b8 0f00 	cmp.w	r8, #0
 800689a:	f000 80d3 	beq.w	8006a44 <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 800689e:	fab8 f888 	clz	r8, r8
 80068a2:	45b0      	cmp	r8, r6
 80068a4:	d077      	beq.n	8006996 <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80068a6:	683d      	ldr	r5, [r7, #0]
 80068a8:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068aa:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ae:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	f43f ae20 	beq.w	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 80068b8:	fab6 f486 	clz	r4, r6
 80068bc:	42ac      	cmp	r4, r5
 80068be:	f000 80af 	beq.w	8006a20 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 80068c2:	4664      	mov	r4, ip
 80068c4:	e618      	b.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80068c6:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 80068ca:	593e      	ldr	r6, [r7, r4]
 80068cc:	4035      	ands	r5, r6
 80068ce:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80068d0:	695c      	ldr	r4, [r3, #20]
 80068d2:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80068d6:	615c      	str	r4, [r3, #20]
}
 80068d8:	e699      	b.n	800660e <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 80068da:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 80068de:	691e      	ldr	r6, [r3, #16]
 80068e0:	433d      	orrs	r5, r7
 80068e2:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 80068e6:	4335      	orrs	r5, r6
 80068e8:	f045 0502 	orr.w	r5, r5, #2
 80068ec:	611d      	str	r5, [r3, #16]
 80068ee:	e673      	b.n	80065d8 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 80068f0:	4628      	mov	r0, r5
 80068f2:	e5e4      	b.n	80064be <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 80068f4:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 80068f8:	60d8      	str	r0, [r3, #12]
 80068fa:	e663      	b.n	80065c4 <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80068fc:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006900:	42a5      	cmp	r5, r4
 8006902:	d076      	beq.n	80069f2 <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006904:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8006906:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006908:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800690c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006910:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8006914:	42a6      	cmp	r6, r4
 8006916:	d054      	beq.n	80069c2 <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006918:	68ae      	ldr	r6, [r5, #8]
 800691a:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800691c:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006920:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006924:	42a6      	cmp	r6, r4
 8006926:	d034      	beq.n	8006992 <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006928:	68ee      	ldr	r6, [r5, #12]
 800692a:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800692c:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006930:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8006934:	e7c2      	b.n	80068bc <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006936:	3c1e      	subs	r4, #30
 8006938:	0524      	lsls	r4, r4, #20
 800693a:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 800693e:	e6fd      	b.n	800673c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006940:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8006942:	f045 0520 	orr.w	r5, r5, #32
 8006946:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8006948:	e63d      	b.n	80065c6 <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800694a:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 800694e:	2d00      	cmp	r5, #0
 8006950:	f000 8082 	beq.w	8006a58 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8006954:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8006958:	3501      	adds	r5, #1
 800695a:	06ad      	lsls	r5, r5, #26
 800695c:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006960:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8006964:	2e00      	cmp	r6, #0
 8006966:	d075      	beq.n	8006a54 <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8006968:	fab6 f686 	clz	r6, r6
 800696c:	3601      	adds	r6, #1
 800696e:	f006 061f 	and.w	r6, r6, #31
 8006972:	2701      	movs	r7, #1
 8006974:	fa07 f606 	lsl.w	r6, r7, r6
 8006978:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800697a:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 800697e:	2c00      	cmp	r4, #0
 8006980:	d065      	beq.n	8006a4e <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8006982:	fab4 f484 	clz	r4, r4
 8006986:	3401      	adds	r4, #1
 8006988:	f004 041f 	and.w	r4, r4, #31
 800698c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8006990:	e6d3      	b.n	800673a <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 8006992:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8006996:	f8de 4000 	ldr.w	r4, [lr]
 800699a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800699e:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80069a2:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069a6:	68ec      	ldr	r4, [r5, #12]
 80069a8:	68ed      	ldr	r5, [r5, #12]
 80069aa:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069ae:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80069b0:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80069b4:	4664      	mov	r4, ip
 80069b6:	2e00      	cmp	r6, #0
 80069b8:	f47f af79 	bne.w	80068ae <HAL_ADCEx_InjectedConfigChannel+0x446>
 80069bc:	f3cc 6484 	ubfx	r4, ip, #26, #5
 80069c0:	e77c      	b.n	80068bc <HAL_ADCEx_InjectedConfigChannel+0x454>
 80069c2:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 80069c6:	f8d8 4000 	ldr.w	r4, [r8]
 80069ca:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80069ce:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80069d2:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80069d6:	68ac      	ldr	r4, [r5, #8]
 80069d8:	68ae      	ldr	r6, [r5, #8]
 80069da:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80069de:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80069e0:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80069e4:	4664      	mov	r4, ip
 80069e6:	2f00      	cmp	r7, #0
 80069e8:	f47f af50 	bne.w	800688c <HAL_ADCEx_InjectedConfigChannel+0x424>
 80069ec:	f3cc 6484 	ubfx	r4, ip, #26, #5
 80069f0:	e798      	b.n	8006924 <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 80069f2:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 80069f4:	461d      	mov	r5, r3
 80069f6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80069fa:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 80069fe:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a02:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8006a04:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8006a06:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006a0a:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006a0e:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8006a12:	4664      	mov	r4, ip
 8006a14:	2f00      	cmp	r7, #0
 8006a16:	f47f af26 	bne.w	8006866 <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8006a1a:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006a1e:	e779      	b.n	8006914 <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 8006a20:	683c      	ldr	r4, [r7, #0]
 8006a22:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8006a26:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006a28:	680c      	ldr	r4, [r1, #0]
}
 8006a2a:	e565      	b.n	80064f8 <HAL_ADCEx_InjectedConfigChannel+0x90>
 8006a2c:	4c0c      	ldr	r4, [pc, #48]	@ (8006a60 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8006a2e:	e685      	b.n	800673c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006a30:	68ae      	ldr	r6, [r5, #8]
 8006a32:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006a34:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006a38:	e728      	b.n	800688c <HAL_ADCEx_InjectedConfigChannel+0x424>
 8006a3a:	2602      	movs	r6, #2
 8006a3c:	e6e7      	b.n	800680e <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8006a3e:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006a42:	e6d7      	b.n	80067f4 <HAL_ADCEx_InjectedConfigChannel+0x38c>
 8006a44:	68ee      	ldr	r6, [r5, #12]
 8006a46:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006a48:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006a4c:	e72f      	b.n	80068ae <HAL_ADCEx_InjectedConfigChannel+0x446>
 8006a4e:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 8006a52:	e673      	b.n	800673c <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 8006a54:	2602      	movs	r6, #2
 8006a56:	e78f      	b.n	8006978 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8006a58:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006a5c:	e780      	b.n	8006960 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8006a5e:	bf00      	nop
 8006a60:	fe500000 	.word	0xfe500000

08006a64 <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a64:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8006a68:	2a01      	cmp	r2, #1
 8006a6a:	d045      	beq.n	8006af8 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8006a6c:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a6e:	6804      	ldr	r4, [r0, #0]
{
 8006a70:	b09c      	sub	sp, #112	@ 0x70
 8006a72:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a74:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8006a76:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a78:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006a7c:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8006a7e:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8006a82:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006a84:	d008      	beq.n	8006a98 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a86:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a88:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a8c:	f041 0120 	orr.w	r1, r1, #32
 8006a90:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 8006a92:	b01c      	add	sp, #112	@ 0x70
 8006a94:	bcf0      	pop	{r4, r5, r6, r7}
 8006a96:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006a98:	4a22      	ldr	r2, [pc, #136]	@ (8006b24 <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8006a9a:	6890      	ldr	r0, [r2, #8]
 8006a9c:	0740      	lsls	r0, r0, #29
 8006a9e:	d50b      	bpl.n	8006ab8 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8006aa0:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aa2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006aa4:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006aa8:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006aaa:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 8006ab2:	b01c      	add	sp, #112	@ 0x70
 8006ab4:	bcf0      	pop	{r4, r5, r6, r7}
 8006ab6:	4770      	bx	lr
 8006ab8:	68a0      	ldr	r0, [r4, #8]
 8006aba:	0745      	lsls	r5, r0, #29
 8006abc:	d4f1      	bmi.n	8006aa2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8006abe:	680d      	ldr	r5, [r1, #0]
 8006ac0:	b1e5      	cbz	r5, 8006afc <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006ac2:	4e19      	ldr	r6, [pc, #100]	@ (8006b28 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006ac4:	684f      	ldr	r7, [r1, #4]
 8006ac6:	68b0      	ldr	r0, [r6, #8]
 8006ac8:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 8006acc:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 8006ad0:	4338      	orrs	r0, r7
 8006ad2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 8006ad6:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006ad8:	68a0      	ldr	r0, [r4, #8]
 8006ada:	6892      	ldr	r2, [r2, #8]
 8006adc:	07c0      	lsls	r0, r0, #31
 8006ade:	d41e      	bmi.n	8006b1e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8006ae0:	07d7      	lsls	r7, r2, #31
 8006ae2:	d41c      	bmi.n	8006b1e <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 8006ae4:	68b2      	ldr	r2, [r6, #8]
 8006ae6:	6889      	ldr	r1, [r1, #8]
 8006ae8:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006aec:	430d      	orrs	r5, r1
 8006aee:	f022 020f 	bic.w	r2, r2, #15
 8006af2:	4315      	orrs	r5, r2
 8006af4:	60b5      	str	r5, [r6, #8]
 8006af6:	e012      	b.n	8006b1e <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 8006af8:	2002      	movs	r0, #2
}
 8006afa:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006afc:	480a      	ldr	r0, [pc, #40]	@ (8006b28 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 8006afe:	6881      	ldr	r1, [r0, #8]
 8006b00:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 8006b04:	6081      	str	r1, [r0, #8]
 8006b06:	68a1      	ldr	r1, [r4, #8]
 8006b08:	6892      	ldr	r2, [r2, #8]
 8006b0a:	07cd      	lsls	r5, r1, #31
 8006b0c:	d407      	bmi.n	8006b1e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8006b0e:	07d4      	lsls	r4, r2, #31
 8006b10:	d405      	bmi.n	8006b1e <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b12:	6882      	ldr	r2, [r0, #8]
 8006b14:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006b18:	f022 020f 	bic.w	r2, r2, #15
 8006b1c:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006b1e:	2000      	movs	r0, #0
 8006b20:	e7c4      	b.n	8006aac <HAL_ADCEx_MultiModeConfigChannel+0x48>
 8006b22:	bf00      	nop
 8006b24:	50000100 	.word	0x50000100
 8006b28:	50000300 	.word	0x50000300

08006b2c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006b2c:	b530      	push	{r4, r5, lr}
 8006b2e:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006b30:	2300      	movs	r3, #0
 8006b32:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 8006b34:	2800      	cmp	r0, #0
 8006b36:	d051      	beq.n	8006bdc <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006b38:	6802      	ldr	r2, [r0, #0]
 8006b3a:	6813      	ldr	r3, [r2, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	4604      	mov	r4, r0
 8006b40:	db4c      	blt.n	8006bdc <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006b42:	7f43      	ldrb	r3, [r0, #29]
 8006b44:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d073      	beq.n	8006c34 <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8006b4c:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8006b50:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006b52:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 8006b54:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 8006b56:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8006b58:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006b5a:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8006b5c:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 8006b5e:	6921      	ldr	r1, [r4, #16]
 8006b60:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 8006b62:	493c      	ldr	r1, [pc, #240]	@ (8006c54 <HAL_COMP_Init+0x128>)
 8006b64:	4001      	ands	r1, r0
 8006b66:	430b      	orrs	r3, r1
 8006b68:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006b6a:	6813      	ldr	r3, [r2, #0]
 8006b6c:	021b      	lsls	r3, r3, #8
 8006b6e:	d501      	bpl.n	8006b74 <HAL_COMP_Init+0x48>
 8006b70:	022d      	lsls	r5, r5, #8
 8006b72:	d549      	bpl.n	8006c08 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006b74:	4b38      	ldr	r3, [pc, #224]	@ (8006c58 <HAL_COMP_Init+0x12c>)
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d062      	beq.n	8006c40 <HAL_COMP_Init+0x114>
 8006b7a:	4b38      	ldr	r3, [pc, #224]	@ (8006c5c <HAL_COMP_Init+0x130>)
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d064      	beq.n	8006c4a <HAL_COMP_Init+0x11e>
 8006b80:	3304      	adds	r3, #4
 8006b82:	429a      	cmp	r2, r3
 8006b84:	bf15      	itete	ne
 8006b86:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 8006b8a:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 8006b8e:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 8006b92:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006b96:	69a3      	ldr	r3, [r4, #24]
 8006b98:	0798      	lsls	r0, r3, #30
 8006b9a:	d022      	beq.n	8006be2 <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006b9c:	4d30      	ldr	r5, [pc, #192]	@ (8006c60 <HAL_COMP_Init+0x134>)
 8006b9e:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006ba0:	f013 0f10 	tst.w	r3, #16
 8006ba4:	bf14      	ite	ne
 8006ba6:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006ba8:	4010      	andeq	r0, r2
 8006baa:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006bac:	4d2c      	ldr	r5, [pc, #176]	@ (8006c60 <HAL_COMP_Init+0x134>)
 8006bae:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006bb0:	f013 0f20 	tst.w	r3, #32
 8006bb4:	bf14      	ite	ne
 8006bb6:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006bb8:	4010      	andeq	r0, r2
 8006bba:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006bbc:	4828      	ldr	r0, [pc, #160]	@ (8006c60 <HAL_COMP_Init+0x134>)
 8006bbe:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8006bc0:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006bc2:	f013 0f02 	tst.w	r3, #2
 8006bc6:	bf14      	ite	ne
 8006bc8:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006bca:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006bcc:	07db      	lsls	r3, r3, #31
 8006bce:	6045      	str	r5, [r0, #4]
 8006bd0:	d515      	bpl.n	8006bfe <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8006bd2:	4b23      	ldr	r3, [pc, #140]	@ (8006c60 <HAL_COMP_Init+0x134>)
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	4311      	orrs	r1, r2
 8006bd8:	6019      	str	r1, [r3, #0]
}
 8006bda:	e009      	b.n	8006bf0 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 8006bdc:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 8006bde:	b003      	add	sp, #12
 8006be0:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006be2:	4b1f      	ldr	r3, [pc, #124]	@ (8006c60 <HAL_COMP_Init+0x134>)
 8006be4:	6859      	ldr	r1, [r3, #4]
 8006be6:	4011      	ands	r1, r2
 8006be8:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006bea:	6819      	ldr	r1, [r3, #0]
 8006bec:	400a      	ands	r2, r1
 8006bee:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006bf0:	7f63      	ldrb	r3, [r4, #29]
 8006bf2:	b90b      	cbnz	r3, 8006bf8 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 8006bf8:	2000      	movs	r0, #0
}
 8006bfa:	b003      	add	sp, #12
 8006bfc:	bd30      	pop	{r4, r5, pc}
 8006bfe:	4918      	ldr	r1, [pc, #96]	@ (8006c60 <HAL_COMP_Init+0x134>)
 8006c00:	680b      	ldr	r3, [r1, #0]
 8006c02:	4013      	ands	r3, r2
 8006c04:	600b      	str	r3, [r1, #0]
}
 8006c06:	e7f3      	b.n	8006bf0 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006c08:	4b16      	ldr	r3, [pc, #88]	@ (8006c64 <HAL_COMP_Init+0x138>)
 8006c0a:	4917      	ldr	r1, [pc, #92]	@ (8006c68 <HAL_COMP_Init+0x13c>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	099b      	lsrs	r3, r3, #6
 8006c10:	fba1 1303 	umull	r1, r3, r1, r3
 8006c14:	099b      	lsrs	r3, r3, #6
 8006c16:	3301      	adds	r3, #1
 8006c18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006c20:	9b01      	ldr	r3, [sp, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d0a6      	beq.n	8006b74 <HAL_COMP_Init+0x48>
        wait_loop_index--;
 8006c26:	9b01      	ldr	r3, [sp, #4]
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006c2c:	9b01      	ldr	r3, [sp, #4]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1f9      	bne.n	8006c26 <HAL_COMP_Init+0xfa>
 8006c32:	e79f      	b.n	8006b74 <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 8006c34:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 8006c36:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8006c38:	f7fe fc6e 	bl	8005518 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006c3c:	6822      	ldr	r2, [r4, #0]
 8006c3e:	e785      	b.n	8006b4c <HAL_COMP_Init+0x20>
 8006c40:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006c44:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006c48:	e7a5      	b.n	8006b96 <HAL_COMP_Init+0x6a>
 8006c4a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006c4e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006c52:	e7a0      	b.n	8006b96 <HAL_COMP_Init+0x6a>
 8006c54:	ff007e0f 	.word	0xff007e0f
 8006c58:	40010200 	.word	0x40010200
 8006c5c:	40010204 	.word	0x40010204
 8006c60:	40010400 	.word	0x40010400
 8006c64:	200004f0 	.word	0x200004f0
 8006c68:	053e2d63 	.word	0x053e2d63

08006c6c <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006c6c:	b1b0      	cbz	r0, 8006c9c <HAL_CORDIC_Init+0x30>
{
 8006c6e:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006c70:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8006c74:	4604      	mov	r4, r0
 8006c76:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006c7a:	b153      	cbz	r3, 8006c92 <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006c7c:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006c7e:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006c80:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006c82:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 8006c86:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8006c8a:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006c8e:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8006c90:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 8006c92:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 8006c96:	f7fe fcb3 	bl	8005600 <HAL_CORDIC_MspInit>
 8006c9a:	e7ef      	b.n	8006c7c <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006c9c:	2001      	movs	r0, #1
}
 8006c9e:	4770      	bx	lr

08006ca0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006ca0:	4907      	ldr	r1, [pc, #28]	@ (8006cc0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8006ca2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006ca4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ca6:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006caa:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006cae:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006cb0:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006cb2:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006cb6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006cba:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006cbc:	4770      	bx	lr
 8006cbe:	bf00      	nop
 8006cc0:	e000ed00 	.word	0xe000ed00

08006cc4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8006d34 <HAL_NVIC_SetPriority+0x70>)
 8006cc6:	68db      	ldr	r3, [r3, #12]
 8006cc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006ccc:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cce:	f1c3 0e07 	rsb	lr, r3, #7
 8006cd2:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006cd6:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006cda:	bf28      	it	cs
 8006cdc:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006ce0:	f1bc 0f06 	cmp.w	ip, #6
 8006ce4:	d91c      	bls.n	8006d20 <HAL_NVIC_SetPriority+0x5c>
 8006ce6:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006cea:	f04f 33ff 	mov.w	r3, #4294967295
 8006cee:	fa03 f30c 	lsl.w	r3, r3, ip
 8006cf2:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8006cfa:	fa03 f30e 	lsl.w	r3, r3, lr
 8006cfe:	ea21 0303 	bic.w	r3, r1, r3
 8006d02:	fa03 f30c 	lsl.w	r3, r3, ip
 8006d06:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d08:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8006d0a:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d0c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8006d0e:	db0a      	blt.n	8006d26 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d10:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006d14:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006d18:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006d1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d20:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006d22:	4694      	mov	ip, r2
 8006d24:	e7e7      	b.n	8006cf6 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d26:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <HAL_NVIC_SetPriority+0x74>)
 8006d28:	f000 000f 	and.w	r0, r0, #15
 8006d2c:	4402      	add	r2, r0
 8006d2e:	7613      	strb	r3, [r2, #24]
 8006d30:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d34:	e000ed00 	.word	0xe000ed00
 8006d38:	e000ecfc 	.word	0xe000ecfc

08006d3c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d3c:	2800      	cmp	r0, #0
 8006d3e:	db07      	blt.n	8006d50 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d40:	4a04      	ldr	r2, [pc, #16]	@ (8006d54 <HAL_NVIC_EnableIRQ+0x18>)
 8006d42:	0941      	lsrs	r1, r0, #5
 8006d44:	2301      	movs	r3, #1
 8006d46:	f000 001f 	and.w	r0, r0, #31
 8006d4a:	4083      	lsls	r3, r0
 8006d4c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006d50:	4770      	bx	lr
 8006d52:	bf00      	nop
 8006d54:	e000e100 	.word	0xe000e100

08006d58 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006d58:	2800      	cmp	r0, #0
 8006d5a:	db0c      	blt.n	8006d76 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006d5c:	0943      	lsrs	r3, r0, #5
 8006d5e:	4906      	ldr	r1, [pc, #24]	@ (8006d78 <HAL_NVIC_DisableIRQ+0x20>)
 8006d60:	f000 001f 	and.w	r0, r0, #31
 8006d64:	3320      	adds	r3, #32
 8006d66:	2201      	movs	r2, #1
 8006d68:	4082      	lsls	r2, r0
 8006d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006d6e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006d72:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006d76:	4770      	bx	lr
 8006d78:	e000e100 	.word	0xe000e100

08006d7c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006d7c:	3801      	subs	r0, #1
 8006d7e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8006d82:	d301      	bcc.n	8006d88 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006d84:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8006d86:	4770      	bx	lr
{
 8006d88:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d8a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d8e:	4c07      	ldr	r4, [pc, #28]	@ (8006dac <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006d90:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006d92:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8006d96:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006d9a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006d9c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006d9e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006da0:	619a      	str	r2, [r3, #24]
}
 8006da2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006da6:	6119      	str	r1, [r3, #16]
 8006da8:	4770      	bx	lr
 8006daa:	bf00      	nop
 8006dac:	e000ed00 	.word	0xe000ed00

08006db0 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop

08006db4 <HAL_SYSTICK_IRQHandler>:
{
 8006db4:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8006db6:	f7ff fffb 	bl	8006db0 <HAL_SYSTICK_Callback>
}
 8006dba:	bd08      	pop	{r3, pc}

08006dbc <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8006dbc:	b188      	cbz	r0, 8006de2 <HAL_DAC_Init+0x26>
{
 8006dbe:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8006dc0:	7903      	ldrb	r3, [r0, #4]
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006dc8:	b13b      	cbz	r3, 8006dda <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006dca:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8006dcc:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006dce:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8006dd0:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006dd2:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8006dd4:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8006dd6:	4618      	mov	r0, r3
}
 8006dd8:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8006dda:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8006ddc:	f7fe fc26 	bl	800562c <HAL_DAC_MspInit>
 8006de0:	e7f3      	b.n	8006dca <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8006de2:	2001      	movs	r0, #1
}
 8006de4:	4770      	bx	lr
 8006de6:	bf00      	nop

08006de8 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8006de8:	2800      	cmp	r0, #0
 8006dea:	f000 80c2 	beq.w	8006f72 <HAL_DAC_ConfigChannel+0x18a>
{
 8006dee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df2:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 8006df4:	2900      	cmp	r1, #0
 8006df6:	f000 80be 	beq.w	8006f76 <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8006dfa:	7943      	ldrb	r3, [r0, #5]
 8006dfc:	2b01      	cmp	r3, #1
 8006dfe:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8006e00:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 8006e02:	f000 80c7 	beq.w	8006f94 <HAL_DAC_ConfigChannel+0x1ac>
 8006e06:	2301      	movs	r3, #1
 8006e08:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e0a:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 8006e0c:	f04f 0302 	mov.w	r3, #2
 8006e10:	4616      	mov	r6, r2
 8006e12:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8006e14:	d06f      	beq.n	8006ef6 <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8006e16:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006e18:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006e1c:	69fa      	ldr	r2, [r7, #28]
 8006e1e:	2a01      	cmp	r2, #1
 8006e20:	d108      	bne.n	8006e34 <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 8006e22:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e24:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e26:	241f      	movs	r4, #31
 8006e28:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e2a:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006e2c:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e30:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006e32:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e34:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 8006e36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006e38:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006e3c:	2901      	cmp	r1, #1
 8006e3e:	f000 8095 	beq.w	8006f6c <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8006e42:	2902      	cmp	r1, #2
 8006e44:	f000 809a 	beq.w	8006f7c <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006e48:	fabe fc8e 	clz	ip, lr
 8006e4c:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006e50:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e52:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006e54:	f1a4 0401 	sub.w	r4, r4, #1
 8006e58:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e5c:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006e60:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e62:	fab1 f181 	clz	r1, r1
 8006e66:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006e68:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e6a:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006e6e:	f240 3107 	movw	r1, #775	@ 0x307
 8006e72:	40b1      	lsls	r1, r6
 8006e74:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006e78:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e7a:	ea44 040e 	orr.w	r4, r4, lr
 8006e7e:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006e80:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006e82:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8006e86:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006e8a:	d07a      	beq.n	8006f82 <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006e8c:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006e90:	40b4      	lsls	r4, r6
 8006e92:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006e96:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006e9e:	40b1      	lsls	r1, r6
 8006ea0:	ea22 0201 	bic.w	r2, r2, r1
 8006ea4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006ea6:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8006eaa:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006eac:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8006eb0:	40b0      	lsls	r0, r6
 8006eb2:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006eb6:	fa01 f006 	lsl.w	r0, r1, r6
 8006eba:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006ebc:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 8006ebe:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8006ec0:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8006ec4:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 8006ec8:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8006eca:	24c0      	movs	r4, #192	@ 0xc0
 8006ecc:	6819      	ldr	r1, [r3, #0]
 8006ece:	40b4      	lsls	r4, r6
 8006ed0:	ea21 0104 	bic.w	r1, r1, r4
 8006ed4:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ed6:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8006ed8:	f640 700f 	movw	r0, #3855	@ 0xf0f
 8006edc:	40b0      	lsls	r0, r6
 8006ede:	ea21 0100 	bic.w	r1, r1, r0
 8006ee2:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006ee4:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006ee6:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 8006ee8:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8006eea:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 8006eec:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 8006eee:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 8006ef0:	716c      	strb	r4, [r5, #5]
}
 8006ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 8006ef6:	f7fe ff3b 	bl	8005d70 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006efa:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006efc:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006efe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 8006f00:	b156      	cbz	r6, 8006f18 <HAL_DAC_ConfigChannel+0x130>
 8006f02:	e018      	b.n	8006f36 <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f04:	f7fe ff34 	bl	8005d70 <HAL_GetTick>
 8006f08:	1b00      	subs	r0, r0, r4
 8006f0a:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f0c:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f0e:	d902      	bls.n	8006f16 <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f12:	0411      	lsls	r1, r2, #16
 8006f14:	d448      	bmi.n	8006fa8 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8006f16:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f18:	0412      	lsls	r2, r2, #16
 8006f1a:	d4f3      	bmi.n	8006f04 <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006f1c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f1e:	641a      	str	r2, [r3, #64]	@ 0x40
 8006f20:	e00d      	b.n	8006f3e <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f22:	f7fe ff25 	bl	8005d70 <HAL_GetTick>
 8006f26:	1b00      	subs	r0, r0, r4
 8006f28:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006f2a:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006f2c:	d902      	bls.n	8006f34 <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006f2e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f30:	2a00      	cmp	r2, #0
 8006f32:	db39      	blt.n	8006fa8 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006f34:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	dbf3      	blt.n	8006f22 <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f3c:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006f3e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006f40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f42:	f006 0610 	and.w	r6, r6, #16
 8006f46:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8006f4a:	40b0      	lsls	r0, r6
 8006f4c:	40b1      	lsls	r1, r6
 8006f4e:	ea22 0200 	bic.w	r2, r2, r0
 8006f52:	430a      	orrs	r2, r1
 8006f54:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006f56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f58:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006f5a:	20ff      	movs	r0, #255	@ 0xff
 8006f5c:	40b0      	lsls	r0, r6
 8006f5e:	ea22 0200 	bic.w	r2, r2, r0
 8006f62:	40b1      	lsls	r1, r6
 8006f64:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8006f66:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006f68:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006f6a:	e757      	b.n	8006e1c <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8006f6c:	f04f 0c00 	mov.w	ip, #0
 8006f70:	e76e      	b.n	8006e50 <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 8006f72:	2001      	movs	r0, #1
}
 8006f74:	4770      	bx	lr
    return HAL_ERROR;
 8006f76:	2001      	movs	r0, #1
}
 8006f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006f7c:	f04f 0c01 	mov.w	ip, #1
 8006f80:	e766      	b.n	8006e50 <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8006f82:	f001 fbf1 	bl	8008768 <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8006f86:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb8 <HAL_DAC_ConfigChannel+0x1d0>)
 8006f88:	4298      	cmp	r0, r3
 8006f8a:	d905      	bls.n	8006f98 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8006f8c:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006f8e:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 8006f92:	e77d      	b.n	8006e90 <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 8006f94:	2002      	movs	r0, #2
 8006f96:	e7ac      	b.n	8006ef2 <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006f98:	4a08      	ldr	r2, [pc, #32]	@ (8006fbc <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 8006f9a:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006f9c:	4290      	cmp	r0, r2
 8006f9e:	f67f af77 	bls.w	8006e90 <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006fa2:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 8006fa6:	e773      	b.n	8006e90 <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006fa8:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006faa:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006fac:	f043 0308 	orr.w	r3, r3, #8
 8006fb0:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 8006fb2:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006fb4:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 8006fb6:	e79c      	b.n	8006ef2 <HAL_DAC_ConfigChannel+0x10a>
 8006fb8:	09896800 	.word	0x09896800
 8006fbc:	04c4b400 	.word	0x04c4b400

08006fc0 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006fc0:	2800      	cmp	r0, #0
 8006fc2:	d076      	beq.n	80070b2 <HAL_DMA_Init+0xf2>
{
 8006fc4:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006fc6:	4a3c      	ldr	r2, [pc, #240]	@ (80070b8 <HAL_DMA_Init+0xf8>)
 8006fc8:	6804      	ldr	r4, [r0, #0]
 8006fca:	4294      	cmp	r4, r2
 8006fcc:	4603      	mov	r3, r0
 8006fce:	d95c      	bls.n	800708a <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006fd0:	493a      	ldr	r1, [pc, #232]	@ (80070bc <HAL_DMA_Init+0xfc>)
 8006fd2:	4a3b      	ldr	r2, [pc, #236]	@ (80070c0 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 8006fd4:	483b      	ldr	r0, [pc, #236]	@ (80070c4 <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006fd6:	4421      	add	r1, r4
 8006fd8:	fba2 2101 	umull	r2, r1, r2, r1
 8006fdc:	0909      	lsrs	r1, r1, #4
 8006fde:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fe0:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006fe2:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 8006fe4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 8006fe8:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006fea:	4e35      	ldr	r6, [pc, #212]	@ (80070c0 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006fec:	4f36      	ldr	r7, [pc, #216]	@ (80070c8 <HAL_DMA_Init+0x108>)
 8006fee:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ff2:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 8006ff4:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006ff6:	4302      	orrs	r2, r0
 8006ff8:	6958      	ldr	r0, [r3, #20]
 8006ffa:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006ffc:	6998      	ldr	r0, [r3, #24]
 8006ffe:	4302      	orrs	r2, r0
 8007000:	69d8      	ldr	r0, [r3, #28]
 8007002:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007004:	b2e0      	uxtb	r0, r4
 8007006:	3808      	subs	r0, #8
 8007008:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 800700c:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800700e:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 8007012:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8007014:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8007018:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 800701a:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 800701e:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007020:	4e25      	ldr	r6, [pc, #148]	@ (80070b8 <HAL_DMA_Init+0xf8>)
 8007022:	4a2a      	ldr	r2, [pc, #168]	@ (80070cc <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007024:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007028:	42b4      	cmp	r4, r6
 800702a:	bf98      	it	ls
 800702c:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800702e:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007032:	2401      	movs	r4, #1
 8007034:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007038:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800703a:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800703e:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007042:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007044:	649e      	str	r6, [r3, #72]	@ 0x48
 8007046:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800704a:	d027      	beq.n	800709c <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800704c:	685e      	ldr	r6, [r3, #4]
 800704e:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007050:	3e01      	subs	r6, #1
 8007052:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007054:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007058:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800705c:	d824      	bhi.n	80070a8 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800705e:	4a1c      	ldr	r2, [pc, #112]	@ (80070d0 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007060:	481c      	ldr	r0, [pc, #112]	@ (80070d4 <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007062:	442a      	add	r2, r5
 8007064:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007066:	3d01      	subs	r5, #1
 8007068:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800706a:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800706c:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007070:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007072:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007074:	4a18      	ldr	r2, [pc, #96]	@ (80070d8 <HAL_DMA_Init+0x118>)
 8007076:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007078:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 800707a:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800707c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 800707e:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 8007082:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 8007086:	bcf0      	pop	{r4, r5, r6, r7}
 8007088:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800708a:	4914      	ldr	r1, [pc, #80]	@ (80070dc <HAL_DMA_Init+0x11c>)
 800708c:	4a0c      	ldr	r2, [pc, #48]	@ (80070c0 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 800708e:	4814      	ldr	r0, [pc, #80]	@ (80070e0 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007090:	4421      	add	r1, r4
 8007092:	fba2 2101 	umull	r2, r1, r2, r1
 8007096:	0909      	lsrs	r1, r1, #4
 8007098:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 800709a:	e7a1      	b.n	8006fe0 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800709c:	2400      	movs	r4, #0
 800709e:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80070a0:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070a4:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 80070a8:	2200      	movs	r2, #0
 80070aa:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80070ae:	65da      	str	r2, [r3, #92]	@ 0x5c
 80070b0:	e7e2      	b.n	8007078 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 80070b2:	2001      	movs	r0, #1
}
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40020407 	.word	0x40020407
 80070bc:	bffdfbf8 	.word	0xbffdfbf8
 80070c0:	cccccccd 	.word	0xcccccccd
 80070c4:	40020400 	.word	0x40020400
 80070c8:	40020800 	.word	0x40020800
 80070cc:	40020820 	.word	0x40020820
 80070d0:	1000823f 	.word	0x1000823f
 80070d4:	40020940 	.word	0x40020940
 80070d8:	40020900 	.word	0x40020900
 80070dc:	bffdfff8 	.word	0xbffdfff8
 80070e0:	40020000 	.word	0x40020000

080070e4 <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80070e4:	2800      	cmp	r0, #0
 80070e6:	d05f      	beq.n	80071a8 <HAL_DMA_DeInit+0xc4>
  __HAL_DMA_DISABLE(hdma);
 80070e8:	6802      	ldr	r2, [r0, #0]
 80070ea:	4603      	mov	r3, r0
 80070ec:	6811      	ldr	r1, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070ee:	482f      	ldr	r0, [pc, #188]	@ (80071ac <HAL_DMA_DeInit+0xc8>)
  __HAL_DMA_DISABLE(hdma);
 80070f0:	f021 0101 	bic.w	r1, r1, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070f4:	4282      	cmp	r2, r0
{
 80070f6:	b430      	push	{r4, r5}
  __HAL_DMA_DISABLE(hdma);
 80070f8:	6011      	str	r1, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80070fa:	d942      	bls.n	8007182 <HAL_DMA_DeInit+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80070fc:	492c      	ldr	r1, [pc, #176]	@ (80071b0 <HAL_DMA_DeInit+0xcc>)
 80070fe:	482d      	ldr	r0, [pc, #180]	@ (80071b4 <HAL_DMA_DeInit+0xd0>)
    hdma->DmaBaseAddress = DMA2;
 8007100:	4c2d      	ldr	r4, [pc, #180]	@ (80071b8 <HAL_DMA_DeInit+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007102:	4411      	add	r1, r2
 8007104:	fba0 0101 	umull	r0, r1, r0, r1
 8007108:	0909      	lsrs	r1, r1, #4
 800710a:	0089      	lsls	r1, r1, #2
  hdma->Instance->CCR  = 0;
 800710c:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA2;
 800710e:	e9c3 4110 	strd	r4, r1, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007112:	f001 051f 	and.w	r5, r1, #31
  hdma->Instance->CCR  = 0;
 8007116:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007118:	2001      	movs	r0, #1
 800711a:	40a8      	lsls	r0, r5
 800711c:	6060      	str	r0, [r4, #4]
 800711e:	4827      	ldr	r0, [pc, #156]	@ (80071bc <HAL_DMA_DeInit+0xd8>)
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007120:	4d27      	ldr	r5, [pc, #156]	@ (80071c0 <HAL_DMA_DeInit+0xdc>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007122:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 8007126:	4401      	add	r1, r0
 8007128:	6499      	str	r1, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800712a:	4926      	ldr	r1, [pc, #152]	@ (80071c4 <HAL_DMA_DeInit+0xe0>)
 800712c:	64d9      	str	r1, [r3, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800712e:	b2d2      	uxtb	r2, r2
 8007130:	4920      	ldr	r1, [pc, #128]	@ (80071b4 <HAL_DMA_DeInit+0xd0>)
 8007132:	3a08      	subs	r2, #8
 8007134:	fba1 1202 	umull	r1, r2, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007138:	f3c2 1204 	ubfx	r2, r2, #4, #5
 800713c:	2101      	movs	r1, #1
 800713e:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DMAmuxChannel->CCR = 0;
 8007142:	2400      	movs	r4, #0
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007144:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel->CCR = 0;
 8007146:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800714a:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800714e:	6858      	ldr	r0, [r3, #4]
 8007150:	1e42      	subs	r2, r0, #1
 8007152:	2a03      	cmp	r2, #3
 8007154:	d806      	bhi.n	8007164 <HAL_DMA_DeInit+0x80>
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007156:	4091      	lsls	r1, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007158:	4a1b      	ldr	r2, [pc, #108]	@ (80071c8 <HAL_DMA_DeInit+0xe4>)
 800715a:	4402      	add	r2, r0
 800715c:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800715e:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007160:	f8c5 1144 	str.w	r1, [r5, #324]	@ 0x144
  hdma->DMAmuxRequestGen = 0U;
 8007164:	2000      	movs	r0, #0
 8007166:	e9c3 0015 	strd	r0, r0, [r3, #84]	@ 0x54
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800716a:	63d8      	str	r0, [r3, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 800716c:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8007170:	f883 0025 	strb.w	r0, [r3, #37]	@ 0x25
}
 8007174:	bc30      	pop	{r4, r5}
  hdma->XferHalfCpltCallback = NULL;
 8007176:	e9c3 000b 	strd	r0, r0, [r3, #44]	@ 0x2c
  hdma->XferAbortCallback = NULL;
 800717a:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 800717e:	65d8      	str	r0, [r3, #92]	@ 0x5c
}
 8007180:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007182:	4912      	ldr	r1, [pc, #72]	@ (80071cc <HAL_DMA_DeInit+0xe8>)
 8007184:	480b      	ldr	r0, [pc, #44]	@ (80071b4 <HAL_DMA_DeInit+0xd0>)
    hdma->DmaBaseAddress = DMA1;
 8007186:	4c12      	ldr	r4, [pc, #72]	@ (80071d0 <HAL_DMA_DeInit+0xec>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007188:	4411      	add	r1, r2
 800718a:	fba0 0101 	umull	r0, r1, r0, r1
 800718e:	0909      	lsrs	r1, r1, #4
 8007190:	0089      	lsls	r1, r1, #2
  hdma->Instance->CCR  = 0;
 8007192:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA1;
 8007194:	e9c3 4110 	strd	r4, r1, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007198:	f001 051f 	and.w	r5, r1, #31
  hdma->Instance->CCR  = 0;
 800719c:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800719e:	2001      	movs	r0, #1
 80071a0:	40a8      	lsls	r0, r5
 80071a2:	6060      	str	r0, [r4, #4]
 80071a4:	4806      	ldr	r0, [pc, #24]	@ (80071c0 <HAL_DMA_DeInit+0xdc>)
 80071a6:	e7bb      	b.n	8007120 <HAL_DMA_DeInit+0x3c>
    return HAL_ERROR;
 80071a8:	2001      	movs	r0, #1
}
 80071aa:	4770      	bx	lr
 80071ac:	40020407 	.word	0x40020407
 80071b0:	bffdfbf8 	.word	0xbffdfbf8
 80071b4:	cccccccd 	.word	0xcccccccd
 80071b8:	40020400 	.word	0x40020400
 80071bc:	40020820 	.word	0x40020820
 80071c0:	40020800 	.word	0x40020800
 80071c4:	40020880 	.word	0x40020880
 80071c8:	1000823f 	.word	0x1000823f
 80071cc:	bffdfff8 	.word	0xbffdfff8
 80071d0:	40020000 	.word	0x40020000

080071d4 <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80071d4:	2800      	cmp	r0, #0
 80071d6:	f000 80d9 	beq.w	800738c <HAL_FDCAN_Init+0x1b8>
{
 80071da:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80071dc:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80071e0:	4604      	mov	r4, r0
 80071e2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d071      	beq.n	80072ce <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80071ea:	6822      	ldr	r2, [r4, #0]
 80071ec:	6993      	ldr	r3, [r2, #24]
 80071ee:	f023 0310 	bic.w	r3, r3, #16
 80071f2:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80071f4:	f7fe fdbc 	bl	8005d70 <HAL_GetTick>
 80071f8:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80071fa:	e004      	b.n	8007206 <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80071fc:	f7fe fdb8 	bl	8005d70 <HAL_GetTick>
 8007200:	1b40      	subs	r0, r0, r5
 8007202:	280a      	cmp	r0, #10
 8007204:	d85a      	bhi.n	80072bc <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007206:	6823      	ldr	r3, [r4, #0]
 8007208:	699a      	ldr	r2, [r3, #24]
 800720a:	0711      	lsls	r1, r2, #28
 800720c:	d4f6      	bmi.n	80071fc <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800720e:	699a      	ldr	r2, [r3, #24]
 8007210:	f042 0201 	orr.w	r2, r2, #1
 8007214:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007216:	f7fe fdab 	bl	8005d70 <HAL_GetTick>
 800721a:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800721c:	e004      	b.n	8007228 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800721e:	f7fe fda7 	bl	8005d70 <HAL_GetTick>
 8007222:	1b40      	subs	r0, r0, r5
 8007224:	280a      	cmp	r0, #10
 8007226:	d849      	bhi.n	80072bc <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	699a      	ldr	r2, [r3, #24]
 800722c:	07d2      	lsls	r2, r2, #31
 800722e:	d5f6      	bpl.n	800721e <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007230:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8007232:	4959      	ldr	r1, [pc, #356]	@ (8007398 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007234:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8007238:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800723a:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 800723c:	f000 80a1 	beq.w	8007382 <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007240:	7c22      	ldrb	r2, [r4, #16]
 8007242:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007244:	699a      	ldr	r2, [r3, #24]
 8007246:	bf0c      	ite	eq
 8007248:	f022 0240 	biceq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800724c:	f042 0240 	orrne.w	r2, r2, #64	@ 0x40
 8007250:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007252:	7c62      	ldrb	r2, [r4, #17]
 8007254:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007256:	699a      	ldr	r2, [r3, #24]
 8007258:	bf0c      	ite	eq
 800725a:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800725e:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
 8007262:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007264:	7ca2      	ldrb	r2, [r4, #18]
 8007266:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007268:	699a      	ldr	r2, [r3, #24]
 800726a:	bf0c      	ite	eq
 800726c:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007270:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
 8007274:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007276:	699a      	ldr	r2, [r3, #24]
 8007278:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800727a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800727c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007280:	4302      	orrs	r2, r0
 8007282:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007284:	699a      	ldr	r2, [r3, #24]
 8007286:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 800728a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800728c:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800728e:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007290:	f022 0210 	bic.w	r2, r2, #16
 8007294:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007296:	d01f      	beq.n	80072d8 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007298:	b311      	cbz	r1, 80072e0 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800729a:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800729c:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800729e:	d077      	beq.n	8007390 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80072a0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80072a4:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072a6:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072a8:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80072aa:	f042 0210 	orr.w	r2, r2, #16
 80072ae:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80072b0:	d116      	bne.n	80072e0 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80072b2:	699a      	ldr	r2, [r3, #24]
 80072b4:	f042 0220 	orr.w	r2, r2, #32
 80072b8:	619a      	str	r2, [r3, #24]
 80072ba:	e011      	b.n	80072e0 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072bc:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072be:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072c0:	f043 0301 	orr.w	r3, r3, #1
 80072c4:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072c6:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80072ca:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80072cc:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80072ce:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80072d2:	f7fe f9c3 	bl	800565c <HAL_FDCAN_MspInit>
 80072d6:	e788      	b.n	80071ea <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80072d8:	699a      	ldr	r2, [r3, #24]
 80072da:	f042 0204 	orr.w	r2, r2, #4
 80072de:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072e0:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80072e4:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072e6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80072e8:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80072ea:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80072ee:	6a21      	ldr	r1, [r4, #32]
 80072f0:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80072f2:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80072f4:	6961      	ldr	r1, [r4, #20]
 80072f6:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80072f8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80072fc:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007300:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007302:	d10e      	bne.n	8007322 <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007304:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007308:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800730a:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800730c:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800730e:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007310:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007312:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8007316:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007318:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800731a:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800731c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007320:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007322:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 8007326:	6be0      	ldr	r0, [r4, #60]	@ 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007328:	6b61      	ldr	r1, [r4, #52]	@ 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800732a:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800732c:	4302      	orrs	r2, r0
 800732e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007332:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007336:	4819      	ldr	r0, [pc, #100]	@ (800739c <HAL_FDCAN_Init+0x1c8>)
 8007338:	6420      	str	r0, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800733a:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 800733e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8007342:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007346:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800734a:	4915      	ldr	r1, [pc, #84]	@ (80073a0 <HAL_FDCAN_Init+0x1cc>)
 800734c:	6461      	str	r1, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800734e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007352:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 8007356:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 800735a:	4b12      	ldr	r3, [pc, #72]	@ (80073a4 <HAL_FDCAN_Init+0x1d0>)
 800735c:	4a12      	ldr	r2, [pc, #72]	@ (80073a8 <HAL_FDCAN_Init+0x1d4>)
 800735e:	3140      	adds	r1, #64	@ 0x40
 8007360:	e9c4 1312 	strd	r1, r3, [r4, #72]	@ 0x48
 8007364:	33f0      	adds	r3, #240	@ 0xf0
 8007366:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800736a:	2100      	movs	r1, #0
 800736c:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8007370:	f004 fbce 	bl	800bb10 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 8007374:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007376:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007378:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800737a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 800737e:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8007380:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007382:	4a0a      	ldr	r2, [pc, #40]	@ (80073ac <HAL_FDCAN_Init+0x1d8>)
 8007384:	6861      	ldr	r1, [r4, #4]
 8007386:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 800738a:	e759      	b.n	8007240 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 800738c:	2001      	movs	r0, #1
}
 800738e:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007390:	f042 0220 	orr.w	r2, r2, #32
 8007394:	619a      	str	r2, [r3, #24]
 8007396:	e7a3      	b.n	80072e0 <HAL_FDCAN_Init+0x10c>
 8007398:	40006400 	.word	0x40006400
 800739c:	4000a400 	.word	0x4000a400
 80073a0:	4000a470 	.word	0x4000a470
 80073a4:	4000a588 	.word	0x4000a588
 80073a8:	4000a660 	.word	0x4000a660
 80073ac:	40006000 	.word	0x40006000

080073b0 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80073b0:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073b4:	3a01      	subs	r2, #1
 80073b6:	2a01      	cmp	r2, #1
{
 80073b8:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80073ba:	d905      	bls.n	80073c8 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073bc:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80073be:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80073c2:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80073c4:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80073c6:	4770      	bx	lr
{
 80073c8:	b470      	push	{r4, r5, r6}
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073ca:	688a      	ldr	r2, [r1, #8]
                         sFilterConfig->FilterID2);
 80073cc:	6948      	ldr	r0, [r1, #20]
                         (sFilterConfig->FilterID1 << 16U)    |
 80073ce:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80073d2:	e9d1 6100 	ldrd	r6, r1, [r1]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073d6:	0792      	lsls	r2, r2, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80073d8:	b956      	cbnz	r6, 80073f0 <HAL_FDCAN_ConfigFilter+0x40>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073da:	ea42 62c5 	orr.w	r2, r2, r5, lsl #27
 80073de:	4302      	orrs	r2, r0
      *FilterAddress = FilterElementW1;
 80073e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80073e2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    return HAL_OK;
 80073e6:	2000      	movs	r0, #0
}
 80073e8:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW1;
 80073ea:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80073ee:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80073f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80073f2:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
      *FilterAddress = FilterElementW1;
 80073f6:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80073fa:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80073fe:	4310      	orrs	r0, r2
      *FilterAddress = FilterElementW2;
 8007400:	6058      	str	r0, [r3, #4]
}
 8007402:	bc70      	pop	{r4, r5, r6}
    return HAL_OK;
 8007404:	2000      	movs	r0, #0
}
 8007406:	4770      	bx	lr

08007408 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007408:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 800740c:	2a01      	cmp	r2, #1
{
 800740e:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007410:	d005      	beq.n	800741e <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007412:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007414:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8007418:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800741a:	661a      	str	r2, [r3, #96]	@ 0x60
}
 800741c:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800741e:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007420:	2202      	movs	r2, #2
 8007422:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007426:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007428:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800742a:	f022 0201 	bic.w	r2, r2, #1
 800742e:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8007430:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007432:	6619      	str	r1, [r3, #96]	@ 0x60
    return HAL_OK;
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop

08007438 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8007438:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800743a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 800743e:	2b02      	cmp	r3, #2
{
 8007440:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007442:	d10b      	bne.n	800745c <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007444:	6805      	ldr	r5, [r0, #0]
 8007446:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 800744a:	f413 1c00 	ands.w	ip, r3, #2097152	@ 0x200000
 800744e:	d00b      	beq.n	8007468 <HAL_FDCAN_AddMessageToTxFifoQ+0x30>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007450:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007452:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007456:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8007458:	2001      	movs	r0, #1
}
 800745a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800745c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 800745e:	f043 0308 	orr.w	r3, r3, #8
 8007462:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8007464:	2001      	movs	r0, #1
}
 8007466:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007468:	f8d5 60c4 	ldr.w	r6, [r5, #196]	@ 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800746c:	684b      	ldr	r3, [r1, #4]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800746e:	690f      	ldr	r7, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007470:	6888      	ldr	r0, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8007472:	680c      	ldr	r4, [r1, #0]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007474:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007478:	2b00      	cmp	r3, #0
 800747a:	d137      	bne.n	80074ec <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
                   FDCAN_STANDARD_ID |
 800747c:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800747e:	ea47 4784 	orr.w	r7, r7, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 8007482:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8007486:	4303      	orrs	r3, r0
 8007488:	6948      	ldr	r0, [r1, #20]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 800748a:	68cc      	ldr	r4, [r1, #12]
                 pTxHeader->FDFormat |
 800748c:	4303      	orrs	r3, r0
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800748e:	6a08      	ldr	r0, [r1, #32]
                 pTxHeader->FDFormat |
 8007490:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007494:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8007498:	f8de 0054 	ldr.w	r0, [lr, #84]	@ 0x54
 800749c:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80074a0:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 80074a4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074a8:	4c13      	ldr	r4, [pc, #76]	@ (80074f8 <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
  *TxAddress = TxElementW2;
 80074aa:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074ac:	68cb      	ldr	r3, [r1, #12]
 80074ae:	5ce3      	ldrb	r3, [r4, r3]
 80074b0:	b1a3      	cbz	r3, 80074dc <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074b2:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074b4:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 80074b6:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074b8:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 80074bc:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 80074be:	433b      	orrs	r3, r7
 80074c0:	7857      	ldrb	r7, [r2, #1]
 80074c2:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074c6:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074ca:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 80074ce:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 80074d0:	68cb      	ldr	r3, [r1, #12]
 80074d2:	5ce3      	ldrb	r3, [r4, r3]
 80074d4:	459c      	cmp	ip, r3
 80074d6:	f102 0204 	add.w	r2, r2, #4
 80074da:	d3ea      	bcc.n	80074b2 <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80074dc:	2301      	movs	r3, #1
 80074de:	40b3      	lsls	r3, r6
 80074e0:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    return HAL_OK;
 80074e4:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80074e6:	f8ce 3058 	str.w	r3, [lr, #88]	@ 0x58
}
 80074ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 80074ec:	4327      	orrs	r7, r4
 80074ee:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80074f0:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
 80074f4:	e7c5      	b.n	8007482 <HAL_FDCAN_AddMessageToTxFifoQ+0x4a>
 80074f6:	bf00      	nop
 80074f8:	0800cd3c 	.word	0x0800cd3c

080074fc <HAL_FDCAN_GetRxMessage>:
{
 80074fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007500:	f890 405c 	ldrb.w	r4, [r0, #92]	@ 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8007504:	2c02      	cmp	r4, #2
 8007506:	d10d      	bne.n	8007524 <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007508:	2940      	cmp	r1, #64	@ 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800750a:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800750c:	d010      	beq.n	8007530 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800750e:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8007512:	0724      	lsls	r4, r4, #28
 8007514:	d16e      	bne.n	80075f4 <HAL_FDCAN_GetRxMessage+0xf8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007516:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007518:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800751c:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 800751e:	2001      	movs	r0, #1
}
 8007520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007524:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8007526:	f043 0308 	orr.w	r3, r3, #8
 800752a:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 800752c:	2001      	movs	r0, #1
 800752e:	e7f7      	b.n	8007520 <HAL_FDCAN_GetRxMessage+0x24>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007530:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8007534:	0726      	lsls	r6, r4, #28
 8007536:	d0ee      	beq.n	8007516 <HAL_FDCAN_GetRxMessage+0x1a>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007538:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 800753c:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007540:	bf18      	it	ne
 8007542:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007546:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 800754a:	bf18      	it	ne
 800754c:	f3c4 2440 	ubfxne	r4, r4, #9, #1
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007550:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8007554:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007558:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800755a:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 800755e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007562:	6826      	ldr	r6, [r4, #0]
 8007564:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8007568:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 800756a:	2e00      	cmp	r6, #0
 800756c:	d15d      	bne.n	800762a <HAL_FDCAN_GetRxMessage+0x12e>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 800756e:	6826      	ldr	r6, [r4, #0]
 8007570:	f3c6 468a 	ubfx	r6, r6, #18, #11
 8007574:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007576:	6826      	ldr	r6, [r4, #0]
 8007578:	f006 5600 	and.w	r6, r6, #536870912	@ 0x20000000
 800757c:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 800757e:	6826      	ldr	r6, [r4, #0]
 8007580:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8007584:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007586:	88a6      	ldrh	r6, [r4, #4]
 8007588:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 800758a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 800758e:	f00c 0c0f 	and.w	ip, ip, #15
 8007592:	f8c2 c00c 	str.w	ip, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007596:	6866      	ldr	r6, [r4, #4]
 8007598:	f406 1680 	and.w	r6, r6, #1048576	@ 0x100000
 800759c:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800759e:	6866      	ldr	r6, [r4, #4]
 80075a0:	f406 1600 	and.w	r6, r6, #2097152	@ 0x200000
 80075a4:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 80075a6:	79e6      	ldrb	r6, [r4, #7]
 80075a8:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 80075ac:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075ae:	4e22      	ldr	r6, [pc, #136]	@ (8007638 <HAL_FDCAN_GetRxMessage+0x13c>)
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80075b0:	6867      	ldr	r7, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075b2:	f816 e00c 	ldrb.w	lr, [r6, ip]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 80075b6:	ea4f 7cd7 	mov.w	ip, r7, lsr #31
 80075ba:	f8c2 c024 	str.w	ip, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075be:	f1be 0f00 	cmp.w	lr, #0
 80075c2:	d010      	beq.n	80075e6 <HAL_FDCAN_GetRxMessage+0xea>
 80075c4:	3b01      	subs	r3, #1
 80075c6:	f104 0e07 	add.w	lr, r4, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 80075ca:	46f4      	mov	ip, lr
 80075cc:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
 80075d0:	f803 5f01 	strb.w	r5, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 80075d4:	68d5      	ldr	r5, [r2, #12]
 80075d6:	f1ac 0c06 	sub.w	ip, ip, #6
 80075da:	5d75      	ldrb	r5, [r6, r5]
 80075dc:	ebac 0c04 	sub.w	ip, ip, r4
 80075e0:	4565      	cmp	r5, ip
 80075e2:	d8f2      	bhi.n	80075ca <HAL_FDCAN_GetRxMessage+0xce>
 80075e4:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80075e6:	2940      	cmp	r1, #64	@ 0x40
 80075e8:	d023      	beq.n	8007632 <HAL_FDCAN_GetRxMessage+0x136>
      hfdcan->Instance->RXF1A = GetIndex;
 80075ea:	f8c5 809c 	str.w	r8, [r5, #156]	@ 0x9c
    return HAL_OK;
 80075ee:	2000      	movs	r0, #0
}
 80075f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80075f4:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 80075f8:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80075fc:	bf18      	it	ne
 80075fe:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007602:	f8d5 7098 	ldr.w	r7, [r5, #152]	@ 0x98
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007606:	bf18      	it	ne
 8007608:	f3c4 2400 	ubfxne	r4, r4, #8, #1
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800760c:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8007610:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007614:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8007616:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 800761a:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800761e:	6826      	ldr	r6, [r4, #0]
 8007620:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8007624:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007626:	2e00      	cmp	r6, #0
 8007628:	d0a1      	beq.n	800756e <HAL_FDCAN_GetRxMessage+0x72>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 800762a:	6826      	ldr	r6, [r4, #0]
 800762c:	f026 4660 	bic.w	r6, r6, #3758096384	@ 0xe0000000
 8007630:	e7a0      	b.n	8007574 <HAL_FDCAN_GetRxMessage+0x78>
      hfdcan->Instance->RXF0A = GetIndex;
 8007632:	f8c5 8094 	str.w	r8, [r5, #148]	@ 0x94
 8007636:	e7da      	b.n	80075ee <HAL_FDCAN_GetRxMessage+0xf2>
 8007638:	0800cd3c 	.word	0x0800cd3c

0800763c <HAL_FDCAN_GetRxFifoFillLevel>:
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 800763c:	6803      	ldr	r3, [r0, #0]
  if (RxFifo == FDCAN_RX_FIFO0)
 800763e:	2940      	cmp	r1, #64	@ 0x40
    FillLevel = hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL;
 8007640:	bf0c      	ite	eq
 8007642:	f8d3 0090 	ldreq.w	r0, [r3, #144]	@ 0x90
    FillLevel = hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL;
 8007646:	f8d3 0098 	ldrne.w	r0, [r3, #152]	@ 0x98
 800764a:	f000 000f 	and.w	r0, r0, #15
}
 800764e:	4770      	bx	lr

08007650 <HAL_FDCAN_ActivateNotification>:
{
 8007650:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007652:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007656:	3801      	subs	r0, #1
 8007658:	2801      	cmp	r0, #1
 800765a:	d905      	bls.n	8007668 <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800765c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800765e:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8007662:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007664:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8007666:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007668:	681b      	ldr	r3, [r3, #0]
{
 800766a:	b470      	push	{r4, r5, r6}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 800766c:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8007670:	6d98      	ldr	r0, [r3, #88]	@ 0x58
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8007672:	f001 0438 	and.w	r4, r1, #56	@ 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8007676:	d009      	beq.n	800768c <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8007678:	07c6      	lsls	r6, r0, #31
 800767a:	d407      	bmi.n	800768c <HAL_FDCAN_ActivateNotification+0x3c>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800767c:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 800767e:	f045 0501 	orr.w	r5, r5, #1
 8007682:	65dd      	str	r5, [r3, #92]	@ 0x5c
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8007684:	b154      	cbz	r4, 800769c <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8007686:	0784      	lsls	r4, r0, #30
 8007688:	d42f      	bmi.n	80076ea <HAL_FDCAN_ActivateNotification+0x9a>
 800768a:	e007      	b.n	800769c <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 800768c:	b304      	cbz	r4, 80076d0 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 800768e:	0786      	lsls	r6, r0, #30
 8007690:	d41e      	bmi.n	80076d0 <HAL_FDCAN_ActivateNotification+0x80>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007692:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8007694:	f046 0601 	orr.w	r6, r6, #1
 8007698:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800769a:	bb25      	cbnz	r5, 80076e6 <HAL_FDCAN_ActivateNotification+0x96>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800769c:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 80076a0:	d001      	beq.n	80076a6 <HAL_FDCAN_ActivateNotification+0x56>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80076a2:	0746      	lsls	r6, r0, #29
 80076a4:	d421      	bmi.n	80076ea <HAL_FDCAN_ActivateNotification+0x9a>
 80076a6:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 80076aa:	d001      	beq.n	80076b0 <HAL_FDCAN_ActivateNotification+0x60>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80076ac:	0705      	lsls	r5, r0, #28
 80076ae:	d41c      	bmi.n	80076ea <HAL_FDCAN_ActivateNotification+0x9a>
 80076b0:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 80076b4:	d001      	beq.n	80076ba <HAL_FDCAN_ActivateNotification+0x6a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80076b6:	06c4      	lsls	r4, r0, #27
 80076b8:	d417      	bmi.n	80076ea <HAL_FDCAN_ActivateNotification+0x9a>
 80076ba:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 80076be:	d001      	beq.n	80076c4 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80076c0:	0686      	lsls	r6, r0, #26
 80076c2:	d412      	bmi.n	80076ea <HAL_FDCAN_ActivateNotification+0x9a>
 80076c4:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 80076c8:	d013      	beq.n	80076f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80076ca:	0645      	lsls	r5, r0, #25
 80076cc:	d40d      	bmi.n	80076ea <HAL_FDCAN_ActivateNotification+0x9a>
 80076ce:	e010      	b.n	80076f2 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80076d0:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 80076d4:	d021      	beq.n	800771a <HAL_FDCAN_ActivateNotification+0xca>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 80076d6:	0746      	lsls	r6, r0, #29
 80076d8:	d41f      	bmi.n	800771a <HAL_FDCAN_ActivateNotification+0xca>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 80076da:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 80076dc:	f046 0601 	orr.w	r6, r6, #1
 80076e0:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 80076e2:	2d00      	cmp	r5, #0
 80076e4:	d0ce      	beq.n	8007684 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 80076e6:	07c5      	lsls	r5, r0, #31
 80076e8:	d5cc      	bpl.n	8007684 <HAL_FDCAN_ActivateNotification+0x34>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80076ea:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 80076ec:	f040 0002 	orr.w	r0, r0, #2
 80076f0:	65d8      	str	r0, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80076f2:	060c      	lsls	r4, r1, #24
 80076f4:	d504      	bpl.n	8007700 <HAL_FDCAN_ActivateNotification+0xb0>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80076f6:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 80076fa:	4310      	orrs	r0, r2
 80076fc:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007700:	05c8      	lsls	r0, r1, #23
 8007702:	d504      	bpl.n	800770e <HAL_FDCAN_ActivateNotification+0xbe>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007704:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8007708:	4302      	orrs	r2, r0
 800770a:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 800770e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007710:	430a      	orrs	r2, r1
    return HAL_OK;
 8007712:	2000      	movs	r0, #0
}
 8007714:	bc70      	pop	{r4, r5, r6}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007716:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8007718:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 800771a:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 800771e:	d001      	beq.n	8007724 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8007720:	0706      	lsls	r6, r0, #28
 8007722:	d5da      	bpl.n	80076da <HAL_FDCAN_ActivateNotification+0x8a>
 8007724:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8007728:	d001      	beq.n	800772e <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800772a:	06c6      	lsls	r6, r0, #27
 800772c:	d5d5      	bpl.n	80076da <HAL_FDCAN_ActivateNotification+0x8a>
 800772e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8007732:	d001      	beq.n	8007738 <HAL_FDCAN_ActivateNotification+0xe8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8007734:	0686      	lsls	r6, r0, #26
 8007736:	d5d0      	bpl.n	80076da <HAL_FDCAN_ActivateNotification+0x8a>
 8007738:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 800773c:	d0d1      	beq.n	80076e2 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 800773e:	0646      	lsls	r6, r0, #25
 8007740:	d5cb      	bpl.n	80076da <HAL_FDCAN_ActivateNotification+0x8a>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8007742:	2d00      	cmp	r5, #0
 8007744:	d09e      	beq.n	8007684 <HAL_FDCAN_ActivateNotification+0x34>
 8007746:	e7ce      	b.n	80076e6 <HAL_FDCAN_ActivateNotification+0x96>

08007748 <HAL_FDCAN_TxEventFifoCallback>:
}
 8007748:	4770      	bx	lr
 800774a:	bf00      	nop

0800774c <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop

08007750 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 8007750:	4770      	bx	lr
 8007752:	bf00      	nop

08007754 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop

08007758 <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop

0800775c <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 800775c:	4770      	bx	lr
 800775e:	bf00      	nop

08007760 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop

08007764 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop

08007768 <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 8007768:	4770      	bx	lr
 800776a:	bf00      	nop

0800776c <HAL_FDCAN_ErrorStatusCallback>:
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop

08007770 <HAL_FDCAN_IRQHandler>:
{
 8007770:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007774:	6803      	ldr	r3, [r0, #0]
 8007776:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007778:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800777a:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 800777e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007780:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007782:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007786:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007788:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 800778a:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 800778c:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 8007790:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007792:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 8007794:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007796:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 8007798:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 800779c:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 800779e:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80077a0:	0669      	lsls	r1, r5, #25
{
 80077a2:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 80077a4:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 80077a8:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 80077ac:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 80077b0:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 80077b4:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80077b8:	d502      	bpl.n	80077c0 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80077ba:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 80077be:	d172      	bne.n	80078a6 <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80077c0:	05ea      	lsls	r2, r5, #23
 80077c2:	d502      	bpl.n	80077ca <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80077c4:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 80077c8:	d15d      	bne.n	8007886 <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 80077ca:	f1ba 0f00 	cmp.w	sl, #0
 80077ce:	d14a      	bne.n	8007866 <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 80077d0:	f1b9 0f00 	cmp.w	r9, #0
 80077d4:	d135      	bne.n	8007842 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 80077d6:	f1b8 0f00 	cmp.w	r8, #0
 80077da:	d13c      	bne.n	8007856 <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80077dc:	05ab      	lsls	r3, r5, #22
 80077de:	d502      	bpl.n	80077e6 <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80077e0:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 80077e4:	d174      	bne.n	80078d0 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80077e6:	0628      	lsls	r0, r5, #24
 80077e8:	d502      	bpl.n	80077f0 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80077ea:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 80077ee:	d177      	bne.n	80078e0 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 80077f0:	04a9      	lsls	r1, r5, #18
 80077f2:	d502      	bpl.n	80077fa <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 80077f4:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 80077f8:	d15a      	bne.n	80078b0 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 80077fa:	042a      	lsls	r2, r5, #16
 80077fc:	d502      	bpl.n	8007804 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 80077fe:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 8007802:	d15d      	bne.n	80078c0 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8007804:	046b      	lsls	r3, r5, #17
 8007806:	d50a      	bpl.n	800781e <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8007808:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 800780c:	d007      	beq.n	800781e <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800780e:	6823      	ldr	r3, [r4, #0]
 8007810:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8007814:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007816:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800781c:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 800781e:	b94f      	cbnz	r7, 8007834 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8007820:	b126      	cbz	r6, 800782c <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007822:	6823      	ldr	r3, [r4, #0]
 8007824:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 8007826:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8007828:	4333      	orrs	r3, r6
 800782a:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800782c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 800782e:	bb2b      	cbnz	r3, 800787c <HAL_FDCAN_IRQHandler+0x10c>
}
 8007830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007834:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007836:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007838:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800783a:	4620      	mov	r0, r4
 800783c:	f7ff ff96 	bl	800776c <HAL_FDCAN_ErrorStatusCallback>
 8007840:	e7ee      	b.n	8007820 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007842:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007844:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007846:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 800784a:	4620      	mov	r0, r4
 800784c:	f7fa fac4 	bl	8001dd8 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 8007850:	f1b8 0f00 	cmp.w	r8, #0
 8007854:	d0c2      	beq.n	80077dc <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007856:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007858:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800785a:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800785e:	4620      	mov	r0, r4
 8007860:	f7ff ff74 	bl	800774c <HAL_FDCAN_RxFifo1Callback>
 8007864:	e7ba      	b.n	80077dc <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007866:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007868:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800786a:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800786e:	4620      	mov	r0, r4
 8007870:	f7ff ff6a 	bl	8007748 <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 8007874:	f1b9 0f00 	cmp.w	r9, #0
 8007878:	d0ad      	beq.n	80077d6 <HAL_FDCAN_IRQHandler+0x66>
 800787a:	e7e2      	b.n	8007842 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 800787c:	4620      	mov	r0, r4
 800787e:	f7ff ff73 	bl	8007768 <HAL_FDCAN_ErrorCallback>
}
 8007882:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 800788c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007890:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8007894:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007896:	4011      	ands	r1, r2
 8007898:	4620      	mov	r0, r4
 800789a:	f7ff ff5d 	bl	8007758 <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 800789e:	f1ba 0f00 	cmp.w	sl, #0
 80078a2:	d095      	beq.n	80077d0 <HAL_FDCAN_IRQHandler+0x60>
 80078a4:	e7df      	b.n	8007866 <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80078a6:	2240      	movs	r2, #64	@ 0x40
 80078a8:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80078aa:	f7ff ff5b 	bl	8007764 <HAL_FDCAN_HighPriorityMessageCallback>
 80078ae:	e787      	b.n	80077c0 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 80078b0:	6823      	ldr	r3, [r4, #0]
 80078b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80078b6:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 80078b8:	4620      	mov	r0, r4
 80078ba:	f7ff ff4f 	bl	800775c <HAL_FDCAN_TimestampWraparoundCallback>
 80078be:	e79c      	b.n	80077fa <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80078c6:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80078c8:	4620      	mov	r0, r4
 80078ca:	f7ff ff49 	bl	8007760 <HAL_FDCAN_TimeoutOccurredCallback>
 80078ce:	e799      	b.n	8007804 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80078d6:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80078d8:	4620      	mov	r0, r4
 80078da:	f7ff ff39 	bl	8007750 <HAL_FDCAN_TxFifoEmptyCallback>
 80078de:	e782      	b.n	80077e6 <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80078e0:	6823      	ldr	r3, [r4, #0]
 80078e2:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80078e6:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80078ea:	2080      	movs	r0, #128	@ 0x80
 80078ec:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80078ee:	4011      	ands	r1, r2
 80078f0:	4620      	mov	r0, r4
 80078f2:	f7ff ff2f 	bl	8007754 <HAL_FDCAN_TxBufferCompleteCallback>
 80078f6:	e77b      	b.n	80077f0 <HAL_FDCAN_IRQHandler+0x80>

080078f8 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80078f8:	680b      	ldr	r3, [r1, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 8198 	beq.w	8007c30 <HAL_GPIO_Init+0x338>
{
 8007900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007904:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8007908:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 800790a:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800790e:	f04f 0b01 	mov.w	fp, #1
 8007912:	f000 810d 	beq.w	8007b30 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007916:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8007c64 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800791a:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 800791c:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800791e:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8007922:	ea1c 0a03 	ands.w	sl, ip, r3
 8007926:	d077      	beq.n	8007a18 <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007928:	684d      	ldr	r5, [r1, #4]
 800792a:	f005 0703 	and.w	r7, r5, #3
 800792e:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007930:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007932:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007936:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800793a:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800793e:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007942:	f240 8119 	bls.w	8007b78 <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007946:	2f03      	cmp	r7, #3
 8007948:	f040 8179 	bne.w	8007c3e <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800794c:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8007950:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007952:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007954:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007956:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 800795a:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800795c:	d05c      	beq.n	8007a18 <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800795e:	4ebe      	ldr	r6, [pc, #760]	@ (8007c58 <HAL_GPIO_Init+0x360>)
 8007960:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8007962:	f044 0401 	orr.w	r4, r4, #1
 8007966:	6634      	str	r4, [r6, #96]	@ 0x60
 8007968:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 800796a:	f004 0401 	and.w	r4, r4, #1
 800796e:	9403      	str	r4, [sp, #12]
 8007970:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007972:	f022 0403 	bic.w	r4, r2, #3
 8007976:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800797a:	f002 0703 	and.w	r7, r2, #3
 800797e:	230f      	movs	r3, #15
 8007980:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8007984:	00bf      	lsls	r7, r7, #2
 8007986:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800798a:	4bb4      	ldr	r3, [pc, #720]	@ (8007c5c <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 800798c:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800798e:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007990:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007994:	f000 8140 	beq.w	8007c18 <HAL_GPIO_Init+0x320>
 8007998:	4bb1      	ldr	r3, [pc, #708]	@ (8007c60 <HAL_GPIO_Init+0x368>)
 800799a:	4298      	cmp	r0, r3
 800799c:	f000 812d 	beq.w	8007bfa <HAL_GPIO_Init+0x302>
 80079a0:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 8007c68 <HAL_GPIO_Init+0x370>
 80079a4:	4560      	cmp	r0, ip
 80079a6:	f000 813d 	beq.w	8007c24 <HAL_GPIO_Init+0x32c>
 80079aa:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8007c6c <HAL_GPIO_Init+0x374>
 80079ae:	4560      	cmp	r0, ip
 80079b0:	f000 813f 	beq.w	8007c32 <HAL_GPIO_Init+0x33a>
 80079b4:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8007c70 <HAL_GPIO_Init+0x378>
 80079b8:	4560      	cmp	r0, ip
 80079ba:	bf0c      	ite	eq
 80079bc:	f04f 0c05 	moveq.w	ip, #5
 80079c0:	f04f 0c06 	movne.w	ip, #6
 80079c4:	fa0c f707 	lsl.w	r7, ip, r7
 80079c8:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80079ca:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 80079cc:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 80079d0:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80079d4:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 80079d6:	bf54      	ite	pl
 80079d8:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80079da:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 80079de:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 80079e2:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80079e6:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 80079e8:	bf54      	ite	pl
 80079ea:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80079ec:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 80079f0:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 80079f4:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80079f8:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 80079fa:	bf54      	ite	pl
 80079fc:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 80079fe:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8007a02:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007a06:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007a0a:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8007a0c:	bf54      	ite	pl
 8007a0e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8007a10:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8007a14:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a18:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8007a1a:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007a1c:	fa33 f402 	lsrs.w	r4, r3, r2
 8007a20:	f47f af7c 	bne.w	800791c <HAL_GPIO_Init+0x24>
  }
}
 8007a24:	b005      	add	sp, #20
 8007a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8007a2a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a2e:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a30:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a34:	fa06 f807 	lsl.w	r8, r6, r7
 8007a38:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007a3c:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007a40:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a44:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a48:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8007a4c:	fa0e fe02 	lsl.w	lr, lr, r2
 8007a50:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8007a54:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8007a58:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a5c:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007a5e:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007a62:	fa06 fe07 	lsl.w	lr, r6, r7
 8007a66:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a6a:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8007a6c:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007a70:	d119      	bne.n	8007aa6 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8007a72:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a76:	690e      	ldr	r6, [r1, #16]
 8007a78:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a7c:	f002 0807 	and.w	r8, r2, #7
 8007a80:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8007a84:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a88:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 8007a8c:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a90:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a92:	260f      	movs	r6, #15
 8007a94:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a98:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007a9a:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007a9e:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8007aa2:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aa6:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 8007aa8:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007aaa:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007aae:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ab0:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8007ab4:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ab6:	d036      	beq.n	8007b26 <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007ab8:	4f67      	ldr	r7, [pc, #412]	@ (8007c58 <HAL_GPIO_Init+0x360>)
 8007aba:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007abc:	f044 0401 	orr.w	r4, r4, #1
 8007ac0:	663c      	str	r4, [r7, #96]	@ 0x60
 8007ac2:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007ac4:	f004 0401 	and.w	r4, r4, #1
 8007ac8:	9403      	str	r4, [sp, #12]
 8007aca:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007acc:	f022 0403 	bic.w	r4, r2, #3
 8007ad0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007ad4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ad8:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8007adc:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007ae0:	260f      	movs	r6, #15
 8007ae2:	00bf      	lsls	r7, r7, #2
 8007ae4:	fa06 f707 	lsl.w	r7, r6, r7
 8007ae8:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007aec:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 8007aee:	4c5d      	ldr	r4, [pc, #372]	@ (8007c64 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007af0:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 8007af2:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 8007af4:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007af8:	d47c      	bmi.n	8007bf4 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 8007afa:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 8007afc:	4e59      	ldr	r6, [pc, #356]	@ (8007c64 <HAL_GPIO_Init+0x36c>)
 8007afe:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 8007b00:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007b02:	02ae      	lsls	r6, r5, #10
 8007b04:	f100 8085 	bmi.w	8007c12 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 8007b08:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 8007b0a:	4e56      	ldr	r6, [pc, #344]	@ (8007c64 <HAL_GPIO_Init+0x36c>)
 8007b0c:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 8007b0e:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007b10:	03ae      	lsls	r6, r5, #14
 8007b12:	d47b      	bmi.n	8007c0c <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 8007b14:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 8007b16:	4e53      	ldr	r6, [pc, #332]	@ (8007c64 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b18:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 8007b1a:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 8007b1c:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007b1e:	d472      	bmi.n	8007c06 <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 8007b20:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 8007b22:	4d50      	ldr	r5, [pc, #320]	@ (8007c64 <HAL_GPIO_Init+0x36c>)
 8007b24:	602c      	str	r4, [r5, #0]
    position++;
 8007b26:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007b28:	fa33 f402 	lsrs.w	r4, r3, r2
 8007b2c:	f43f af7a 	beq.w	8007a24 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007b30:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8007b34:	ea13 0c0e 	ands.w	ip, r3, lr
 8007b38:	d0f5      	beq.n	8007b26 <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b3a:	684d      	ldr	r5, [r1, #4]
 8007b3c:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b3e:	2603      	movs	r6, #3
 8007b40:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b44:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b48:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007b4c:	f104 38ff 	add.w	r8, r4, #4294967295
 8007b50:	f1b8 0f01 	cmp.w	r8, #1
 8007b54:	f67f af69 	bls.w	8007a2a <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007b58:	2c03      	cmp	r4, #3
 8007b5a:	d0a4      	beq.n	8007aa6 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8007b5c:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b60:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8007b62:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b66:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007b6a:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b6e:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8007b72:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007b76:	e796      	b.n	8007aa6 <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 8007b78:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b7c:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007b7e:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007b82:	fa03 f804 	lsl.w	r8, r3, r4
 8007b86:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007b8a:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007b8e:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007b92:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007b94:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007b98:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8007b9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8007ba0:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8007ba4:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8007ba8:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bac:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007bb0:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007bb4:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bb8:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 8007bba:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007bbe:	f47f aec5 	bne.w	800794c <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bc2:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007bc4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bc8:	f002 0c07 	and.w	ip, r2, #7
 8007bcc:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 8007bd0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bd4:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 8007bd8:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bdc:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007bde:	230f      	movs	r3, #15
 8007be0:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007be4:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007be6:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007bea:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 8007bee:	f8c8 c020 	str.w	ip, [r8, #32]
 8007bf2:	e6ab      	b.n	800794c <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 8007bf4:	ea44 040c 	orr.w	r4, r4, ip
 8007bf8:	e780      	b.n	8007afc <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bfa:	f04f 0c02 	mov.w	ip, #2
 8007bfe:	fa0c f707 	lsl.w	r7, ip, r7
 8007c02:	433e      	orrs	r6, r7
 8007c04:	e6e1      	b.n	80079ca <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 8007c06:	ea4c 0404 	orr.w	r4, ip, r4
 8007c0a:	e78a      	b.n	8007b22 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 8007c0c:	ea44 040c 	orr.w	r4, r4, ip
 8007c10:	e781      	b.n	8007b16 <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 8007c12:	ea4c 0404 	orr.w	r4, ip, r4
 8007c16:	e778      	b.n	8007b0a <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007c18:	f04f 0c01 	mov.w	ip, #1
 8007c1c:	fa0c f707 	lsl.w	r7, ip, r7
 8007c20:	433e      	orrs	r6, r7
 8007c22:	e6d2      	b.n	80079ca <HAL_GPIO_Init+0xd2>
 8007c24:	f04f 0c03 	mov.w	ip, #3
 8007c28:	fa0c f707 	lsl.w	r7, ip, r7
 8007c2c:	433e      	orrs	r6, r7
 8007c2e:	e6cc      	b.n	80079ca <HAL_GPIO_Init+0xd2>
 8007c30:	4770      	bx	lr
 8007c32:	f04f 0c04 	mov.w	ip, #4
 8007c36:	fa0c f707 	lsl.w	r7, ip, r7
 8007c3a:	433e      	orrs	r6, r7
 8007c3c:	e6c5      	b.n	80079ca <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 8007c3e:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c42:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c44:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c48:	fa03 fc04 	lsl.w	ip, r3, r4
 8007c4c:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8007c50:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c54:	e67a      	b.n	800794c <HAL_GPIO_Init+0x54>
 8007c56:	bf00      	nop
 8007c58:	40021000 	.word	0x40021000
 8007c5c:	48000400 	.word	0x48000400
 8007c60:	48000800 	.word	0x48000800
 8007c64:	40010400 	.word	0x40010400
 8007c68:	48000c00 	.word	0x48000c00
 8007c6c:	48001000 	.word	0x48001000
 8007c70:	48001400 	.word	0x48001400

08007c74 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007c74:	2900      	cmp	r1, #0
 8007c76:	f000 80e5 	beq.w	8007e44 <HAL_GPIO_DeInit+0x1d0>
 8007c7a:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
{
 8007c7e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007c82:	f04f 0300 	mov.w	r3, #0
 8007c86:	d07e      	beq.n	8007d86 <HAL_GPIO_DeInit+0x112>
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8007c88:	4e6f      	ldr	r6, [pc, #444]	@ (8007e48 <HAL_GPIO_DeInit+0x1d4>)
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007c8a:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007c8e:	f04f 0a03 	mov.w	sl, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007c92:	2201      	movs	r2, #1
 8007c94:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8007c96:	ea12 0e01 	ands.w	lr, r2, r1
 8007c9a:	d05f      	beq.n	8007d5c <HAL_GPIO_DeInit+0xe8>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007c9c:	f023 0403 	bic.w	r4, r3, #3
 8007ca0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007ca4:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007ca8:	4f68      	ldr	r7, [pc, #416]	@ (8007e4c <HAL_GPIO_DeInit+0x1d8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007caa:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007cae:	f003 0503 	and.w	r5, r3, #3
 8007cb2:	00ad      	lsls	r5, r5, #2
 8007cb4:	fa09 f805 	lsl.w	r8, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007cb8:	42b8      	cmp	r0, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007cba:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007cbe:	d013      	beq.n	8007ce8 <HAL_GPIO_DeInit+0x74>
 8007cc0:	4f63      	ldr	r7, [pc, #396]	@ (8007e50 <HAL_GPIO_DeInit+0x1dc>)
 8007cc2:	42b8      	cmp	r0, r7
 8007cc4:	d055      	beq.n	8007d72 <HAL_GPIO_DeInit+0xfe>
 8007cc6:	4f63      	ldr	r7, [pc, #396]	@ (8007e54 <HAL_GPIO_DeInit+0x1e0>)
 8007cc8:	42b8      	cmp	r0, r7
 8007cca:	d057      	beq.n	8007d7c <HAL_GPIO_DeInit+0x108>
 8007ccc:	4f62      	ldr	r7, [pc, #392]	@ (8007e58 <HAL_GPIO_DeInit+0x1e4>)
 8007cce:	42b8      	cmp	r0, r7
 8007cd0:	d04a      	beq.n	8007d68 <HAL_GPIO_DeInit+0xf4>
 8007cd2:	f8df b188 	ldr.w	fp, [pc, #392]	@ 8007e5c <HAL_GPIO_DeInit+0x1e8>
 8007cd6:	4558      	cmp	r0, fp
 8007cd8:	bf0c      	ite	eq
 8007cda:	f04f 0b05 	moveq.w	fp, #5
 8007cde:	f04f 0b06 	movne.w	fp, #6
 8007ce2:	fa0b f505 	lsl.w	r5, fp, r5
 8007ce6:	e002      	b.n	8007cee <HAL_GPIO_DeInit+0x7a>
 8007ce8:	2701      	movs	r7, #1
 8007cea:	fa07 f505 	lsl.w	r5, r7, r5
 8007cee:	45ac      	cmp	ip, r5
 8007cf0:	d113      	bne.n	8007d1a <HAL_GPIO_DeInit+0xa6>
        EXTI->IMR1 &= ~(iocurrent);
 8007cf2:	6835      	ldr	r5, [r6, #0]
 8007cf4:	ea25 050e 	bic.w	r5, r5, lr
 8007cf8:	6035      	str	r5, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8007cfa:	6875      	ldr	r5, [r6, #4]
 8007cfc:	ea25 050e 	bic.w	r5, r5, lr
 8007d00:	6075      	str	r5, [r6, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8007d02:	68f5      	ldr	r5, [r6, #12]
 8007d04:	ea25 050e 	bic.w	r5, r5, lr
 8007d08:	60f5      	str	r5, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007d0a:	68b5      	ldr	r5, [r6, #8]
 8007d0c:	ea25 050e 	bic.w	r5, r5, lr
 8007d10:	60b5      	str	r5, [r6, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007d12:	68a5      	ldr	r5, [r4, #8]
 8007d14:	ea25 0508 	bic.w	r5, r5, r8
 8007d18:	60a5      	str	r5, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007d1a:	6804      	ldr	r4, [r0, #0]
 8007d1c:	005d      	lsls	r5, r3, #1
 8007d1e:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007d22:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007d26:	432c      	orrs	r4, r5
 8007d28:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007d2c:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007d2e:	f003 0407 	and.w	r4, r3, #7
 8007d32:	f8dc e020 	ldr.w	lr, [ip, #32]
 8007d36:	00a4      	lsls	r4, r4, #2
 8007d38:	fa09 f404 	lsl.w	r4, r9, r4
 8007d3c:	ea2e 0404 	bic.w	r4, lr, r4
 8007d40:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007d44:	68c4      	ldr	r4, [r0, #12]
 8007d46:	ea24 0405 	bic.w	r4, r4, r5
 8007d4a:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8007d4c:	6844      	ldr	r4, [r0, #4]
 8007d4e:	ea24 0202 	bic.w	r2, r4, r2
 8007d52:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007d54:	6882      	ldr	r2, [r0, #8]
 8007d56:	ea22 0205 	bic.w	r2, r2, r5
 8007d5a:	6082      	str	r2, [r0, #8]
    }

    position++;
 8007d5c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8007d5e:	fa31 f203 	lsrs.w	r2, r1, r3
 8007d62:	d196      	bne.n	8007c92 <HAL_GPIO_DeInit+0x1e>
  }
}
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007d68:	f04f 0b04 	mov.w	fp, #4
 8007d6c:	fa0b f505 	lsl.w	r5, fp, r5
 8007d70:	e7bd      	b.n	8007cee <HAL_GPIO_DeInit+0x7a>
 8007d72:	f04f 0b02 	mov.w	fp, #2
 8007d76:	fa0b f505 	lsl.w	r5, fp, r5
 8007d7a:	e7b8      	b.n	8007cee <HAL_GPIO_DeInit+0x7a>
 8007d7c:	f04f 0b03 	mov.w	fp, #3
 8007d80:	fa0b f505 	lsl.w	r5, fp, r5
 8007d84:	e7b3      	b.n	8007cee <HAL_GPIO_DeInit+0x7a>
        EXTI->IMR1 &= ~(iocurrent);
 8007d86:	4e30      	ldr	r6, [pc, #192]	@ (8007e48 <HAL_GPIO_DeInit+0x1d4>)
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007d88:	2701      	movs	r7, #1
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007d8a:	250f      	movs	r5, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007d8c:	f04f 0c03 	mov.w	ip, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007d90:	f023 0203 	bic.w	r2, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007d94:	f003 0403 	and.w	r4, r3, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007d98:	fa07 fe03 	lsl.w	lr, r7, r3
    if (iocurrent != 0x00u)
 8007d9c:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007da0:	00a4      	lsls	r4, r4, #2
    if (iocurrent != 0x00u)
 8007da2:	ea11 080e 	ands.w	r8, r1, lr
 8007da6:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007daa:	fa05 f404 	lsl.w	r4, r5, r4
    if (iocurrent != 0x00u)
 8007dae:	d043      	beq.n	8007e38 <HAL_GPIO_DeInit+0x1c4>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007db0:	f8d2 9008 	ldr.w	r9, [r2, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007db4:	ea14 0f09 	tst.w	r4, r9
 8007db8:	d11c      	bne.n	8007df4 <HAL_GPIO_DeInit+0x180>
        EXTI->IMR1 &= ~(iocurrent);
 8007dba:	f8d6 9000 	ldr.w	r9, [r6]
 8007dbe:	ea29 0908 	bic.w	r9, r9, r8
 8007dc2:	f8c6 9000 	str.w	r9, [r6]
        EXTI->EMR1 &= ~(iocurrent);
 8007dc6:	f8d6 9004 	ldr.w	r9, [r6, #4]
 8007dca:	ea29 0908 	bic.w	r9, r9, r8
 8007dce:	f8c6 9004 	str.w	r9, [r6, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 8007dd2:	f8d6 900c 	ldr.w	r9, [r6, #12]
 8007dd6:	ea29 0908 	bic.w	r9, r9, r8
 8007dda:	f8c6 900c 	str.w	r9, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8007dde:	f8d6 9008 	ldr.w	r9, [r6, #8]
 8007de2:	ea29 0808 	bic.w	r8, r9, r8
 8007de6:	f8c6 8008 	str.w	r8, [r6, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007dea:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8007dee:	ea28 0404 	bic.w	r4, r8, r4
 8007df2:	6094      	str	r4, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007df4:	6802      	ldr	r2, [r0, #0]
 8007df6:	ea4f 0843 	mov.w	r8, r3, lsl #1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007dfa:	08dc      	lsrs	r4, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007dfc:	fa0c f808 	lsl.w	r8, ip, r8
 8007e00:	00a4      	lsls	r4, r4, #2
 8007e02:	ea42 0208 	orr.w	r2, r2, r8
 8007e06:	f104 4490 	add.w	r4, r4, #1207959552	@ 0x48000000
 8007e0a:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007e0c:	f003 0207 	and.w	r2, r3, #7
 8007e10:	f8d4 9020 	ldr.w	r9, [r4, #32]
 8007e14:	0092      	lsls	r2, r2, #2
 8007e16:	fa05 f202 	lsl.w	r2, r5, r2
 8007e1a:	ea29 0202 	bic.w	r2, r9, r2
 8007e1e:	6222      	str	r2, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007e20:	68c2      	ldr	r2, [r0, #12]
 8007e22:	ea22 0208 	bic.w	r2, r2, r8
 8007e26:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8007e28:	6842      	ldr	r2, [r0, #4]
 8007e2a:	ea22 020e 	bic.w	r2, r2, lr
 8007e2e:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007e30:	6882      	ldr	r2, [r0, #8]
 8007e32:	ea22 0208 	bic.w	r2, r2, r8
 8007e36:	6082      	str	r2, [r0, #8]
    position++;
 8007e38:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8007e3a:	fa31 f203 	lsrs.w	r2, r1, r3
 8007e3e:	d1a7      	bne.n	8007d90 <HAL_GPIO_DeInit+0x11c>
}
 8007e40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e44:	4770      	bx	lr
 8007e46:	bf00      	nop
 8007e48:	40010400 	.word	0x40010400
 8007e4c:	48000400 	.word	0x48000400
 8007e50:	48000800 	.word	0x48000800
 8007e54:	48000c00 	.word	0x48000c00
 8007e58:	48001000 	.word	0x48001000
 8007e5c:	48001400 	.word	0x48001400

08007e60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007e60:	b10a      	cbz	r2, 8007e66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e62:	6181      	str	r1, [r0, #24]
 8007e64:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e66:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop

08007e6c <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007e6c:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007e6e:	ea01 0203 	and.w	r2, r1, r3
 8007e72:	ea21 0103 	bic.w	r1, r1, r3
 8007e76:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e7a:	6181      	str	r1, [r0, #24]
}
 8007e7c:	4770      	bx	lr
 8007e7e:	bf00      	nop

08007e80 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007e80:	2800      	cmp	r0, #0
 8007e82:	d06f      	beq.n	8007f64 <HAL_OPAMP_Init+0xe4>
{
 8007e84:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007e86:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007e8a:	2b05      	cmp	r3, #5
{
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007e90:	d056      	beq.n	8007f40 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007e92:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	d052      	beq.n	8007f40 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e9a:	4b33      	ldr	r3, [pc, #204]	@ (8007f68 <HAL_OPAMP_Init+0xe8>)
 8007e9c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007e9e:	f042 0201 	orr.w	r2, r2, #1
 8007ea2:	661a      	str	r2, [r3, #96]	@ 0x60
 8007ea4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007ea6:	f003 0301 	and.w	r3, r3, #1
 8007eaa:	9301      	str	r3, [sp, #4]
 8007eac:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007eae:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007eb2:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007eb6:	b90b      	cbnz	r3, 8007ebc <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8007eb8:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007ebc:	4620      	mov	r0, r4
 8007ebe:	f7fd fc3f 	bl	8005740 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007ec2:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007ec4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007ec6:	f023 0220 	bic.w	r2, r3, #32
 8007eca:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 8007ecc:	6822      	ldr	r2, [r4, #0]
 8007ece:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007ed0:	d039      	beq.n	8007f46 <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8007ed2:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007ed4:	f021 0110 	bic.w	r1, r1, #16
 8007ed8:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007eda:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 8007edc:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007ede:	432b      	orrs	r3, r5
 8007ee0:	4303      	orrs	r3, r0
 8007ee2:	6920      	ldr	r0, [r4, #16]
 8007ee4:	6811      	ldr	r1, [r2, #0]
 8007ee6:	4303      	orrs	r3, r0
 8007ee8:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8007eea:	4303      	orrs	r3, r0
 8007eec:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8007eee:	4303      	orrs	r3, r0
 8007ef0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007ef2:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 8007ef6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8007ef8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007efc:	481b      	ldr	r0, [pc, #108]	@ (8007f6c <HAL_OPAMP_Init+0xec>)
 8007efe:	4008      	ands	r0, r1
 8007f00:	7d21      	ldrb	r1, [r4, #20]
 8007f02:	f1a1 0101 	sub.w	r1, r1, #1
 8007f06:	fab1 f181 	clz	r1, r1
 8007f0a:	4303      	orrs	r3, r0
 8007f0c:	0949      	lsrs	r1, r1, #5
 8007f0e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8007f12:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8007f14:	6993      	ldr	r3, [r2, #24]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	db09      	blt.n	8007f2e <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8007f1a:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8007f1e:	6991      	ldr	r1, [r2, #24]
 8007f20:	4303      	orrs	r3, r0
 8007f22:	6a20      	ldr	r0, [r4, #32]
 8007f24:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007f28:	4303      	orrs	r3, r0
 8007f2a:	430b      	orrs	r3, r1
 8007f2c:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007f2e:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8007f32:	b913      	cbnz	r3, 8007f3a <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007f34:	2301      	movs	r3, #1
 8007f36:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8007f3a:	2000      	movs	r0, #0
  }
}
 8007f3c:	b003      	add	sp, #12
 8007f3e:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007f40:	2001      	movs	r0, #1
}
 8007f42:	b003      	add	sp, #12
 8007f44:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 8007f46:	f021 0110 	bic.w	r1, r1, #16
 8007f4a:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007f4c:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007f4e:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007f50:	4303      	orrs	r3, r0
 8007f52:	6920      	ldr	r0, [r4, #16]
 8007f54:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007f56:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007f58:	4303      	orrs	r3, r0
 8007f5a:	430b      	orrs	r3, r1
 8007f5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007f5e:	6811      	ldr	r1, [r2, #0]
 8007f60:	432b      	orrs	r3, r5
 8007f62:	e7c6      	b.n	8007ef2 <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8007f64:	2001      	movs	r0, #1
}
 8007f66:	4770      	bx	lr
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	e0003e11 	.word	0xe0003e11

08007f70 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f70:	4a35      	ldr	r2, [pc, #212]	@ (8008048 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007f72:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007f74:	b960      	cbnz	r0, 8007f90 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007f7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f7e:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007f82:	d01b      	beq.n	8007fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007f84:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f88:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007f8c:	2000      	movs	r0, #0
}
 8007f8e:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007f90:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007f94:	d006      	beq.n	8007fa4 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007f96:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007f9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007f9e:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007fa0:	2000      	movs	r0, #0
}
 8007fa2:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fa4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fa8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fac:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007fb0:	d029      	beq.n	8008006 <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007fb6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8007fba:	e7f1      	b.n	8007fa0 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007fbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007fc0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fc4:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fc6:	4821      	ldr	r0, [pc, #132]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8007fc8:	4921      	ldr	r1, [pc, #132]	@ (8008050 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007fca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8007fce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007fd2:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fd4:	6803      	ldr	r3, [r0, #0]
 8007fd6:	2032      	movs	r0, #50	@ 0x32
 8007fd8:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fdc:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fde:	fba1 1303 	umull	r1, r3, r1, r3
 8007fe2:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fe4:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007fe6:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007fea:	d506      	bpl.n	8007ffa <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007fec:	e000      	b.n	8007ff0 <HAL_PWREx_ControlVoltageScaling+0x80>
 8007fee:	b123      	cbz	r3, 8007ffa <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007ff0:	6951      	ldr	r1, [r2, #20]
 8007ff2:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007ff4:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007ff8:	d4f9      	bmi.n	8007fee <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007ffa:	4b13      	ldr	r3, [pc, #76]	@ (8008048 <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007ffc:	695b      	ldr	r3, [r3, #20]
 8007ffe:	055b      	lsls	r3, r3, #21
 8008000:	d5ce      	bpl.n	8007fa0 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 8008002:	2003      	movs	r0, #3
 8008004:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008006:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800800a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800800e:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008010:	480e      	ldr	r0, [pc, #56]	@ (800804c <HAL_PWREx_ControlVoltageScaling+0xdc>)
 8008012:	490f      	ldr	r1, [pc, #60]	@ (8008050 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008014:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8008018:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800801c:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800801e:	6803      	ldr	r3, [r0, #0]
 8008020:	2032      	movs	r0, #50	@ 0x32
 8008022:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008026:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008028:	fba1 1303 	umull	r1, r3, r1, r3
 800802c:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800802e:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008030:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008034:	d5e1      	bpl.n	8007ffa <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008036:	e001      	b.n	800803c <HAL_PWREx_ControlVoltageScaling+0xcc>
 8008038:	2b00      	cmp	r3, #0
 800803a:	d0de      	beq.n	8007ffa <HAL_PWREx_ControlVoltageScaling+0x8a>
 800803c:	6951      	ldr	r1, [r2, #20]
 800803e:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8008040:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008044:	d5d9      	bpl.n	8007ffa <HAL_PWREx_ControlVoltageScaling+0x8a>
 8008046:	e7f7      	b.n	8008038 <HAL_PWREx_ControlVoltageScaling+0xc8>
 8008048:	40007000 	.word	0x40007000
 800804c:	200004f0 	.word	0x200004f0
 8008050:	431bde83 	.word	0x431bde83

08008054 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008054:	4a02      	ldr	r2, [pc, #8]	@ (8008060 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 8008056:	6893      	ldr	r3, [r2, #8]
 8008058:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800805c:	6093      	str	r3, [r2, #8]
}
 800805e:	4770      	bx	lr
 8008060:	40007000 	.word	0x40007000

08008064 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008064:	2800      	cmp	r0, #0
 8008066:	f000 81bd 	beq.w	80083e4 <HAL_RCC_OscConfig+0x380>
{
 800806a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800806e:	6803      	ldr	r3, [r0, #0]
 8008070:	07d9      	lsls	r1, r3, #31
{
 8008072:	b082      	sub	sp, #8
 8008074:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008076:	d512      	bpl.n	800809e <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008078:	49a6      	ldr	r1, [pc, #664]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 800807a:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800807c:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800807e:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008082:	2a0c      	cmp	r2, #12
 8008084:	f000 80d0 	beq.w	8008228 <HAL_RCC_OscConfig+0x1c4>
 8008088:	2a08      	cmp	r2, #8
 800808a:	f040 80d2 	bne.w	8008232 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800808e:	4aa1      	ldr	r2, [pc, #644]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 8008090:	6812      	ldr	r2, [r2, #0]
 8008092:	0392      	lsls	r2, r2, #14
 8008094:	d503      	bpl.n	800809e <HAL_RCC_OscConfig+0x3a>
 8008096:	6862      	ldr	r2, [r4, #4]
 8008098:	2a00      	cmp	r2, #0
 800809a:	f000 8137 	beq.w	800830c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800809e:	079a      	lsls	r2, r3, #30
 80080a0:	d522      	bpl.n	80080e8 <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a2:	4a9c      	ldr	r2, [pc, #624]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 80080a4:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80080a6:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80080a8:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80080ac:	2b0c      	cmp	r3, #12
 80080ae:	f000 80f8 	beq.w	80082a2 <HAL_RCC_OscConfig+0x23e>
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	f040 80fa 	bne.w	80082ac <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80080b8:	4b96      	ldr	r3, [pc, #600]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	055b      	lsls	r3, r3, #21
 80080be:	d503      	bpl.n	80080c8 <HAL_RCC_OscConfig+0x64>
 80080c0:	68e3      	ldr	r3, [r4, #12]
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f000 8122 	beq.w	800830c <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080c8:	4a92      	ldr	r2, [pc, #584]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 80080ca:	6920      	ldr	r0, [r4, #16]
 80080cc:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80080ce:	4992      	ldr	r1, [pc, #584]	@ (8008318 <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80080d0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80080d4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80080d8:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80080da:	6808      	ldr	r0, [r1, #0]
 80080dc:	f7fd fdfe 	bl	8005cdc <HAL_InitTick>
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f040 8113 	bne.w	800830c <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80080e6:	6823      	ldr	r3, [r4, #0]
 80080e8:	071a      	lsls	r2, r3, #28
 80080ea:	d519      	bpl.n	8008120 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080ec:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80080ee:	4d89      	ldr	r5, [pc, #548]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	f000 80c2 	beq.w	800827a <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80080f6:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80080fa:	f043 0301 	orr.w	r3, r3, #1
 80080fe:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008102:	f7fd fe35 	bl	8005d70 <HAL_GetTick>
 8008106:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008108:	e005      	b.n	8008116 <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800810a:	f7fd fe31 	bl	8005d70 <HAL_GetTick>
 800810e:	1b80      	subs	r0, r0, r6
 8008110:	2802      	cmp	r0, #2
 8008112:	f200 8117 	bhi.w	8008344 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008116:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800811a:	079b      	lsls	r3, r3, #30
 800811c:	d5f5      	bpl.n	800810a <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	075d      	lsls	r5, r3, #29
 8008122:	d541      	bpl.n	80081a8 <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008124:	4b7b      	ldr	r3, [pc, #492]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 8008126:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008128:	00d0      	lsls	r0, r2, #3
 800812a:	f100 810f 	bmi.w	800834c <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800812e:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8008130:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8008134:	659a      	str	r2, [r3, #88]	@ 0x58
 8008136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008138:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800813c:	9301      	str	r3, [sp, #4]
 800813e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8008140:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008142:	4e76      	ldr	r6, [pc, #472]	@ (800831c <HAL_RCC_OscConfig+0x2b8>)
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	05d9      	lsls	r1, r3, #23
 8008148:	f140 812e 	bpl.w	80083a8 <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800814c:	68a3      	ldr	r3, [r4, #8]
 800814e:	2b01      	cmp	r3, #1
 8008150:	f000 80fe 	beq.w	8008350 <HAL_RCC_OscConfig+0x2ec>
 8008154:	2b05      	cmp	r3, #5
 8008156:	f000 8184 	beq.w	8008462 <HAL_RCC_OscConfig+0x3fe>
 800815a:	4e6e      	ldr	r6, [pc, #440]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 800815c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8008160:	f022 0201 	bic.w	r2, r2, #1
 8008164:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 8008168:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 800816c:	f022 0204 	bic.w	r2, r2, #4
 8008170:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008174:	2b00      	cmp	r3, #0
 8008176:	f040 80f2 	bne.w	800835e <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800817a:	f7fd fdf9 	bl	8005d70 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800817e:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8008182:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008184:	e005      	b.n	8008192 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008186:	f7fd fdf3 	bl	8005d70 <HAL_GetTick>
 800818a:	1bc0      	subs	r0, r0, r7
 800818c:	4540      	cmp	r0, r8
 800818e:	f200 80d9 	bhi.w	8008344 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008192:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 8008196:	0799      	lsls	r1, r3, #30
 8008198:	d4f5      	bmi.n	8008186 <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800819a:	b125      	cbz	r5, 80081a6 <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800819c:	4a5d      	ldr	r2, [pc, #372]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 800819e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 80081a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80081a4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	069a      	lsls	r2, r3, #26
 80081aa:	d518      	bpl.n	80081de <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081ac:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80081ae:	4d59      	ldr	r5, [pc, #356]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f000 80e5 	beq.w	8008380 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 80081b6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80081ba:	f043 0301 	orr.w	r3, r3, #1
 80081be:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081c2:	f7fd fdd5 	bl	8005d70 <HAL_GetTick>
 80081c6:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081c8:	e005      	b.n	80081d6 <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80081ca:	f7fd fdd1 	bl	8005d70 <HAL_GetTick>
 80081ce:	1b80      	subs	r0, r0, r6
 80081d0:	2802      	cmp	r0, #2
 80081d2:	f200 80b7 	bhi.w	8008344 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80081d6:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80081da:	079b      	lsls	r3, r3, #30
 80081dc:	d5f5      	bpl.n	80081ca <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80081de:	69e3      	ldr	r3, [r4, #28]
 80081e0:	b1f3      	cbz	r3, 8008220 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80081e2:	4d4c      	ldr	r5, [pc, #304]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 80081e4:	68aa      	ldr	r2, [r5, #8]
 80081e6:	f002 020c 	and.w	r2, r2, #12
 80081ea:	2a0c      	cmp	r2, #12
 80081ec:	f000 8147 	beq.w	800847e <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80081f0:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80081f2:	682b      	ldr	r3, [r5, #0]
 80081f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80081f8:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80081fa:	f000 80f5 	beq.w	80083e8 <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80081fe:	f7fd fdb7 	bl	8005d70 <HAL_GetTick>
 8008202:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008204:	e005      	b.n	8008212 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008206:	f7fd fdb3 	bl	8005d70 <HAL_GetTick>
 800820a:	1b00      	subs	r0, r0, r4
 800820c:	2802      	cmp	r0, #2
 800820e:	f200 8099 	bhi.w	8008344 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008212:	682b      	ldr	r3, [r5, #0]
 8008214:	019b      	lsls	r3, r3, #6
 8008216:	d4f6      	bmi.n	8008206 <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8008218:	68ea      	ldr	r2, [r5, #12]
 800821a:	4b41      	ldr	r3, [pc, #260]	@ (8008320 <HAL_RCC_OscConfig+0x2bc>)
 800821c:	4013      	ands	r3, r2
 800821e:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 8008220:	2000      	movs	r0, #0
}
 8008222:	b002      	add	sp, #8
 8008224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008228:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800822c:	2903      	cmp	r1, #3
 800822e:	f43f af2e 	beq.w	800808e <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008232:	6863      	ldr	r3, [r4, #4]
 8008234:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008238:	d055      	beq.n	80082e6 <HAL_RCC_OscConfig+0x282>
 800823a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800823e:	f000 80c4 	beq.w	80083ca <HAL_RCC_OscConfig+0x366>
 8008242:	4d34      	ldr	r5, [pc, #208]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 8008244:	682a      	ldr	r2, [r5, #0]
 8008246:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800824a:	602a      	str	r2, [r5, #0]
 800824c:	682a      	ldr	r2, [r5, #0]
 800824e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008252:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008254:	2b00      	cmp	r3, #0
 8008256:	d14b      	bne.n	80082f0 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 8008258:	f7fd fd8a 	bl	8005d70 <HAL_GetTick>
 800825c:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800825e:	e004      	b.n	800826a <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008260:	f7fd fd86 	bl	8005d70 <HAL_GetTick>
 8008264:	1b80      	subs	r0, r0, r6
 8008266:	2864      	cmp	r0, #100	@ 0x64
 8008268:	d86c      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800826a:	682b      	ldr	r3, [r5, #0]
 800826c:	0399      	lsls	r1, r3, #14
 800826e:	d4f7      	bmi.n	8008260 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008270:	6823      	ldr	r3, [r4, #0]
 8008272:	079a      	lsls	r2, r3, #30
 8008274:	f57f af38 	bpl.w	80080e8 <HAL_RCC_OscConfig+0x84>
 8008278:	e713      	b.n	80080a2 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800827a:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800827e:	f023 0301 	bic.w	r3, r3, #1
 8008282:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 8008286:	f7fd fd73 	bl	8005d70 <HAL_GetTick>
 800828a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800828c:	e004      	b.n	8008298 <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800828e:	f7fd fd6f 	bl	8005d70 <HAL_GetTick>
 8008292:	1b80      	subs	r0, r0, r6
 8008294:	2802      	cmp	r0, #2
 8008296:	d855      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008298:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800829c:	079f      	lsls	r7, r3, #30
 800829e:	d4f6      	bmi.n	800828e <HAL_RCC_OscConfig+0x22a>
 80082a0:	e73d      	b.n	800811e <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082a2:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80082a6:	2a02      	cmp	r2, #2
 80082a8:	f43f af06 	beq.w	80080b8 <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082ac:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 80082ae:	4d19      	ldr	r5, [pc, #100]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d037      	beq.n	8008324 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 80082b4:	682b      	ldr	r3, [r5, #0]
 80082b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082ba:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80082bc:	f7fd fd58 	bl	8005d70 <HAL_GetTick>
 80082c0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082c2:	e004      	b.n	80082ce <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80082c4:	f7fd fd54 	bl	8005d70 <HAL_GetTick>
 80082c8:	1b80      	subs	r0, r0, r6
 80082ca:	2802      	cmp	r0, #2
 80082cc:	d83a      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80082ce:	682b      	ldr	r3, [r5, #0]
 80082d0:	055f      	lsls	r7, r3, #21
 80082d2:	d5f7      	bpl.n	80082c4 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80082d4:	686b      	ldr	r3, [r5, #4]
 80082d6:	6922      	ldr	r2, [r4, #16]
 80082d8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80082dc:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80082e0:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	e700      	b.n	80080e8 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082e6:	4a0b      	ldr	r2, [pc, #44]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
 80082e8:	6813      	ldr	r3, [r2, #0]
 80082ea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80082ee:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80082f0:	f7fd fd3e 	bl	8005d70 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082f4:	4e07      	ldr	r6, [pc, #28]	@ (8008314 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80082f6:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80082f8:	e004      	b.n	8008304 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80082fa:	f7fd fd39 	bl	8005d70 <HAL_GetTick>
 80082fe:	1b40      	subs	r0, r0, r5
 8008300:	2864      	cmp	r0, #100	@ 0x64
 8008302:	d81f      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008304:	6833      	ldr	r3, [r6, #0]
 8008306:	039f      	lsls	r7, r3, #14
 8008308:	d5f7      	bpl.n	80082fa <HAL_RCC_OscConfig+0x296>
 800830a:	e7b1      	b.n	8008270 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 800830c:	2001      	movs	r0, #1
}
 800830e:	b002      	add	sp, #8
 8008310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008314:	40021000 	.word	0x40021000
 8008318:	200004f8 	.word	0x200004f8
 800831c:	40007000 	.word	0x40007000
 8008320:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 8008324:	682b      	ldr	r3, [r5, #0]
 8008326:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800832a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800832c:	f7fd fd20 	bl	8005d70 <HAL_GetTick>
 8008330:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008332:	682b      	ldr	r3, [r5, #0]
 8008334:	0559      	lsls	r1, r3, #21
 8008336:	f57f aed6 	bpl.w	80080e6 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800833a:	f7fd fd19 	bl	8005d70 <HAL_GetTick>
 800833e:	1b80      	subs	r0, r0, r6
 8008340:	2802      	cmp	r0, #2
 8008342:	d9f6      	bls.n	8008332 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8008344:	2003      	movs	r0, #3
}
 8008346:	b002      	add	sp, #8
 8008348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 800834c:	2500      	movs	r5, #0
 800834e:	e6f8      	b.n	8008142 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008350:	4a65      	ldr	r2, [pc, #404]	@ (80084e8 <HAL_RCC_OscConfig+0x484>)
 8008352:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 800835e:	f7fd fd07 	bl	8005d70 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008362:	4f61      	ldr	r7, [pc, #388]	@ (80084e8 <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8008364:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008366:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800836a:	e004      	b.n	8008376 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800836c:	f7fd fd00 	bl	8005d70 <HAL_GetTick>
 8008370:	1b80      	subs	r0, r0, r6
 8008372:	4540      	cmp	r0, r8
 8008374:	d8e6      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008376:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800837a:	079b      	lsls	r3, r3, #30
 800837c:	d5f6      	bpl.n	800836c <HAL_RCC_OscConfig+0x308>
 800837e:	e70c      	b.n	800819a <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8008380:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8008384:	f023 0301 	bic.w	r3, r3, #1
 8008388:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 800838c:	f7fd fcf0 	bl	8005d70 <HAL_GetTick>
 8008390:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008392:	e004      	b.n	800839e <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008394:	f7fd fcec 	bl	8005d70 <HAL_GetTick>
 8008398:	1b80      	subs	r0, r0, r6
 800839a:	2802      	cmp	r0, #2
 800839c:	d8d2      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800839e:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80083a2:	079f      	lsls	r7, r3, #30
 80083a4:	d4f6      	bmi.n	8008394 <HAL_RCC_OscConfig+0x330>
 80083a6:	e71a      	b.n	80081de <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80083a8:	6833      	ldr	r3, [r6, #0]
 80083aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80083ae:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80083b0:	f7fd fcde 	bl	8005d70 <HAL_GetTick>
 80083b4:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80083b6:	6833      	ldr	r3, [r6, #0]
 80083b8:	05da      	lsls	r2, r3, #23
 80083ba:	f53f aec7 	bmi.w	800814c <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083be:	f7fd fcd7 	bl	8005d70 <HAL_GetTick>
 80083c2:	1bc0      	subs	r0, r0, r7
 80083c4:	2802      	cmp	r0, #2
 80083c6:	d9f6      	bls.n	80083b6 <HAL_RCC_OscConfig+0x352>
 80083c8:	e7bc      	b.n	8008344 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083ca:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80083ce:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80083d2:	681a      	ldr	r2, [r3, #0]
 80083d4:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80083d8:	601a      	str	r2, [r3, #0]
 80083da:	681a      	ldr	r2, [r3, #0]
 80083dc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80083e0:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083e2:	e785      	b.n	80082f0 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 80083e4:	2001      	movs	r0, #1
}
 80083e6:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80083e8:	f7fd fcc2 	bl	8005d70 <HAL_GetTick>
 80083ec:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083ee:	e004      	b.n	80083fa <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80083f0:	f7fd fcbe 	bl	8005d70 <HAL_GetTick>
 80083f4:	1b80      	subs	r0, r0, r6
 80083f6:	2802      	cmp	r0, #2
 80083f8:	d8a4      	bhi.n	8008344 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80083fa:	682b      	ldr	r3, [r5, #0]
 80083fc:	0199      	lsls	r1, r3, #6
 80083fe:	d4f7      	bmi.n	80083f0 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008400:	68e9      	ldr	r1, [r5, #12]
 8008402:	4b3a      	ldr	r3, [pc, #232]	@ (80084ec <HAL_RCC_OscConfig+0x488>)
 8008404:	6a22      	ldr	r2, [r4, #32]
 8008406:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008408:	400b      	ands	r3, r1
 800840a:	4313      	orrs	r3, r2
 800840c:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 8008410:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8008414:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 8008418:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 800841c:	3801      	subs	r0, #1
 800841e:	0849      	lsrs	r1, r1, #1
 8008420:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 8008424:	3901      	subs	r1, #1
 8008426:	0852      	lsrs	r2, r2, #1
 8008428:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 800842c:	3a01      	subs	r2, #1
 800842e:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8008432:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8008434:	682b      	ldr	r3, [r5, #0]
 8008436:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800843a:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800843c:	68eb      	ldr	r3, [r5, #12]
 800843e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8008442:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8008444:	f7fd fc94 	bl	8005d70 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008448:	4d27      	ldr	r5, [pc, #156]	@ (80084e8 <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 800844a:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800844c:	e005      	b.n	800845a <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800844e:	f7fd fc8f 	bl	8005d70 <HAL_GetTick>
 8008452:	1b00      	subs	r0, r0, r4
 8008454:	2802      	cmp	r0, #2
 8008456:	f63f af75 	bhi.w	8008344 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800845a:	682b      	ldr	r3, [r5, #0]
 800845c:	019a      	lsls	r2, r3, #6
 800845e:	d5f6      	bpl.n	800844e <HAL_RCC_OscConfig+0x3ea>
 8008460:	e6de      	b.n	8008220 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008462:	4b21      	ldr	r3, [pc, #132]	@ (80084e8 <HAL_RCC_OscConfig+0x484>)
 8008464:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008468:	f042 0204 	orr.w	r2, r2, #4
 800846c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8008470:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8008474:	f042 0201 	orr.w	r2, r2, #1
 8008478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800847c:	e76f      	b.n	800835e <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800847e:	2b01      	cmp	r3, #1
 8008480:	f43f af44 	beq.w	800830c <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8008484:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008486:	6a22      	ldr	r2, [r4, #32]
 8008488:	f003 0103 	and.w	r1, r3, #3
 800848c:	4291      	cmp	r1, r2
 800848e:	f47f af3d 	bne.w	800830c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008492:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008494:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008498:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800849a:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 800849e:	f47f af35 	bne.w	800830c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80084a2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80084a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80084a8:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80084ac:	f47f af2e 	bne.w	800830c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80084b0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80084b2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80084b6:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 80084ba:	f47f af27 	bne.w	800830c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084be:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80084c0:	0852      	lsrs	r2, r2, #1
 80084c2:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 80084c6:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80084c8:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80084cc:	f47f af1e 	bne.w	800830c <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80084d0:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80084d2:	0852      	lsrs	r2, r2, #1
 80084d4:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 80084d8:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80084da:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80084de:	bf14      	ite	ne
 80084e0:	2001      	movne	r0, #1
 80084e2:	2000      	moveq	r0, #0
 80084e4:	e69d      	b.n	8008222 <HAL_RCC_OscConfig+0x1be>
 80084e6:	bf00      	nop
 80084e8:	40021000 	.word	0x40021000
 80084ec:	019f800c 	.word	0x019f800c

080084f0 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80084f0:	4b18      	ldr	r3, [pc, #96]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x64>)
 80084f2:	689a      	ldr	r2, [r3, #8]
 80084f4:	f002 020c 	and.w	r2, r2, #12
 80084f8:	2a04      	cmp	r2, #4
 80084fa:	d026      	beq.n	800854a <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80084fc:	689a      	ldr	r2, [r3, #8]
 80084fe:	f002 020c 	and.w	r2, r2, #12
 8008502:	2a08      	cmp	r2, #8
 8008504:	d023      	beq.n	800854e <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008506:	689a      	ldr	r2, [r3, #8]
 8008508:	f002 020c 	and.w	r2, r2, #12
 800850c:	2a0c      	cmp	r2, #12
 800850e:	d001      	beq.n	8008514 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8008510:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8008512:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008514:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008516:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008518:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800851a:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 800851e:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008520:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008524:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008528:	bf0c      	ite	eq
 800852a:	4b0b      	ldreq	r3, [pc, #44]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800852c:	4b0b      	ldrne	r3, [pc, #44]	@ (800855c <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800852e:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008530:	fbb3 f3f2 	udiv	r3, r3, r2
 8008534:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008538:	4b06      	ldr	r3, [pc, #24]	@ (8008554 <HAL_RCC_GetSysClockFreq+0x64>)
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8008540:	3301      	adds	r3, #1
 8008542:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8008544:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8008548:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 800854a:	4804      	ldr	r0, [pc, #16]	@ (800855c <HAL_RCC_GetSysClockFreq+0x6c>)
 800854c:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 800854e:	4802      	ldr	r0, [pc, #8]	@ (8008558 <HAL_RCC_GetSysClockFreq+0x68>)
 8008550:	4770      	bx	lr
 8008552:	bf00      	nop
 8008554:	40021000 	.word	0x40021000
 8008558:	007a1200 	.word	0x007a1200
 800855c:	00f42400 	.word	0x00f42400

08008560 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8008560:	2800      	cmp	r0, #0
 8008562:	f000 80ee 	beq.w	8008742 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008566:	4a78      	ldr	r2, [pc, #480]	@ (8008748 <HAL_RCC_ClockConfig+0x1e8>)
{
 8008568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800856c:	6813      	ldr	r3, [r2, #0]
 800856e:	f003 030f 	and.w	r3, r3, #15
 8008572:	428b      	cmp	r3, r1
 8008574:	460d      	mov	r5, r1
 8008576:	4604      	mov	r4, r0
 8008578:	d20c      	bcs.n	8008594 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800857a:	6813      	ldr	r3, [r2, #0]
 800857c:	f023 030f 	bic.w	r3, r3, #15
 8008580:	430b      	orrs	r3, r1
 8008582:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008584:	6813      	ldr	r3, [r2, #0]
 8008586:	f003 030f 	and.w	r3, r3, #15
 800858a:	428b      	cmp	r3, r1
 800858c:	d002      	beq.n	8008594 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 800858e:	2001      	movs	r0, #1
}
 8008590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008594:	6823      	ldr	r3, [r4, #0]
 8008596:	07df      	lsls	r7, r3, #31
 8008598:	d569      	bpl.n	800866e <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800859a:	6867      	ldr	r7, [r4, #4]
 800859c:	2f03      	cmp	r7, #3
 800859e:	f000 80a0 	beq.w	80086e2 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085a2:	4b6a      	ldr	r3, [pc, #424]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a4:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80085a6:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80085a8:	f000 8097 	beq.w	80086da <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80085ac:	055b      	lsls	r3, r3, #21
 80085ae:	d5ee      	bpl.n	800858e <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 80085b0:	f7ff ff9e 	bl	80084f0 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 80085b4:	4b66      	ldr	r3, [pc, #408]	@ (8008750 <HAL_RCC_ClockConfig+0x1f0>)
 80085b6:	4298      	cmp	r0, r3
 80085b8:	f240 80c0 	bls.w	800873c <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80085bc:	4a63      	ldr	r2, [pc, #396]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 80085be:	6893      	ldr	r3, [r2, #8]
 80085c0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80085c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80085c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80085ca:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80085ce:	4e5f      	ldr	r6, [pc, #380]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 80085d0:	68b3      	ldr	r3, [r6, #8]
 80085d2:	f023 0303 	bic.w	r3, r3, #3
 80085d6:	433b      	orrs	r3, r7
 80085d8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80085da:	f7fd fbc9 	bl	8005d70 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085de:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80085e2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085e4:	e004      	b.n	80085f0 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80085e6:	f7fd fbc3 	bl	8005d70 <HAL_GetTick>
 80085ea:	1bc0      	subs	r0, r0, r7
 80085ec:	4540      	cmp	r0, r8
 80085ee:	d871      	bhi.n	80086d4 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80085f0:	68b3      	ldr	r3, [r6, #8]
 80085f2:	6862      	ldr	r2, [r4, #4]
 80085f4:	f003 030c 	and.w	r3, r3, #12
 80085f8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80085fc:	d1f3      	bne.n	80085e6 <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	079f      	lsls	r7, r3, #30
 8008602:	d436      	bmi.n	8008672 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8008604:	f1b9 0f00 	cmp.w	r9, #0
 8008608:	d003      	beq.n	8008612 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800860a:	68b3      	ldr	r3, [r6, #8]
 800860c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008610:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008612:	4e4d      	ldr	r6, [pc, #308]	@ (8008748 <HAL_RCC_ClockConfig+0x1e8>)
 8008614:	6833      	ldr	r3, [r6, #0]
 8008616:	f003 030f 	and.w	r3, r3, #15
 800861a:	42ab      	cmp	r3, r5
 800861c:	d846      	bhi.n	80086ac <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800861e:	6823      	ldr	r3, [r4, #0]
 8008620:	075a      	lsls	r2, r3, #29
 8008622:	d506      	bpl.n	8008632 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008624:	4949      	ldr	r1, [pc, #292]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 8008626:	68e0      	ldr	r0, [r4, #12]
 8008628:	688a      	ldr	r2, [r1, #8]
 800862a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800862e:	4302      	orrs	r2, r0
 8008630:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008632:	071b      	lsls	r3, r3, #28
 8008634:	d507      	bpl.n	8008646 <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008636:	4a45      	ldr	r2, [pc, #276]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 8008638:	6921      	ldr	r1, [r4, #16]
 800863a:	6893      	ldr	r3, [r2, #8]
 800863c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8008640:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8008644:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008646:	f7ff ff53 	bl	80084f0 <HAL_RCC_GetSysClockFreq>
 800864a:	4a40      	ldr	r2, [pc, #256]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 800864c:	4c41      	ldr	r4, [pc, #260]	@ (8008754 <HAL_RCC_ClockConfig+0x1f4>)
 800864e:	6892      	ldr	r2, [r2, #8]
 8008650:	4941      	ldr	r1, [pc, #260]	@ (8008758 <HAL_RCC_ClockConfig+0x1f8>)
 8008652:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8008656:	4603      	mov	r3, r0
 8008658:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 800865a:	4840      	ldr	r0, [pc, #256]	@ (800875c <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800865c:	f002 021f 	and.w	r2, r2, #31
 8008660:	40d3      	lsrs	r3, r2
 8008662:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8008664:	6800      	ldr	r0, [r0, #0]
}
 8008666:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 800866a:	f7fd bb37 	b.w	8005cdc <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800866e:	079e      	lsls	r6, r3, #30
 8008670:	d5cf      	bpl.n	8008612 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008672:	0758      	lsls	r0, r3, #29
 8008674:	d504      	bpl.n	8008680 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008676:	4935      	ldr	r1, [pc, #212]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 8008678:	688a      	ldr	r2, [r1, #8]
 800867a:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 800867e:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008680:	0719      	lsls	r1, r3, #28
 8008682:	d506      	bpl.n	8008692 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008684:	4a31      	ldr	r2, [pc, #196]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 8008686:	6893      	ldr	r3, [r2, #8]
 8008688:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800868c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8008690:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008692:	4a2e      	ldr	r2, [pc, #184]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 8008694:	68a1      	ldr	r1, [r4, #8]
 8008696:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008698:	4e2b      	ldr	r6, [pc, #172]	@ (8008748 <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800869a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800869e:	430b      	orrs	r3, r1
 80086a0:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80086a2:	6833      	ldr	r3, [r6, #0]
 80086a4:	f003 030f 	and.w	r3, r3, #15
 80086a8:	42ab      	cmp	r3, r5
 80086aa:	d9b8      	bls.n	800861e <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80086ac:	6833      	ldr	r3, [r6, #0]
 80086ae:	f023 030f 	bic.w	r3, r3, #15
 80086b2:	432b      	orrs	r3, r5
 80086b4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80086b6:	f7fd fb5b 	bl	8005d70 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ba:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80086be:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80086c0:	6833      	ldr	r3, [r6, #0]
 80086c2:	f003 030f 	and.w	r3, r3, #15
 80086c6:	42ab      	cmp	r3, r5
 80086c8:	d0a9      	beq.n	800861e <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80086ca:	f7fd fb51 	bl	8005d70 <HAL_GetTick>
 80086ce:	1bc0      	subs	r0, r0, r7
 80086d0:	4540      	cmp	r0, r8
 80086d2:	d9f5      	bls.n	80086c0 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 80086d4:	2003      	movs	r0, #3
}
 80086d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80086da:	039a      	lsls	r2, r3, #14
 80086dc:	f53f af68 	bmi.w	80085b0 <HAL_RCC_ClockConfig+0x50>
 80086e0:	e755      	b.n	800858e <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80086e2:	4a1a      	ldr	r2, [pc, #104]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
 80086e4:	6811      	ldr	r1, [r2, #0]
 80086e6:	0188      	lsls	r0, r1, #6
 80086e8:	f57f af51 	bpl.w	800858e <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086ec:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086ee:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086f0:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 80086f2:	4e17      	ldr	r6, [pc, #92]	@ (8008750 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80086f4:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 80086f8:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80086fa:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80086fe:	bf0c      	ite	eq
 8008700:	4817      	ldreq	r0, [pc, #92]	@ (8008760 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008702:	4818      	ldrne	r0, [pc, #96]	@ (8008764 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008704:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008706:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800870a:	4810      	ldr	r0, [pc, #64]	@ (800874c <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800870c:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8008710:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008714:	68c1      	ldr	r1, [r0, #12]
 8008716:	f3c1 6141 	ubfx	r1, r1, #25, #2
 800871a:	3101      	adds	r1, #1
 800871c:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 800871e:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8008722:	42b2      	cmp	r2, r6
 8008724:	d90a      	bls.n	800873c <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008726:	6882      	ldr	r2, [r0, #8]
 8008728:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 800872c:	f43f af46 	beq.w	80085bc <HAL_RCC_ClockConfig+0x5c>
 8008730:	0799      	lsls	r1, r3, #30
 8008732:	d503      	bpl.n	800873c <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008734:	68a3      	ldr	r3, [r4, #8]
 8008736:	2b00      	cmp	r3, #0
 8008738:	f43f af40 	beq.w	80085bc <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800873c:	f04f 0900 	mov.w	r9, #0
 8008740:	e745      	b.n	80085ce <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8008742:	2001      	movs	r0, #1
}
 8008744:	4770      	bx	lr
 8008746:	bf00      	nop
 8008748:	40022000 	.word	0x40022000
 800874c:	40021000 	.word	0x40021000
 8008750:	04c4b400 	.word	0x04c4b400
 8008754:	0800cd2c 	.word	0x0800cd2c
 8008758:	200004f0 	.word	0x200004f0
 800875c:	200004f8 	.word	0x200004f8
 8008760:	007a1200 	.word	0x007a1200
 8008764:	00f42400 	.word	0x00f42400

08008768 <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8008768:	4b01      	ldr	r3, [pc, #4]	@ (8008770 <HAL_RCC_GetHCLKFreq+0x8>)
}
 800876a:	6818      	ldr	r0, [r3, #0]
 800876c:	4770      	bx	lr
 800876e:	bf00      	nop
 8008770:	200004f0 	.word	0x200004f0

08008774 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008774:	4b05      	ldr	r3, [pc, #20]	@ (800878c <HAL_RCC_GetPCLK1Freq+0x18>)
 8008776:	4a06      	ldr	r2, [pc, #24]	@ (8008790 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8008778:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800877a:	4906      	ldr	r1, [pc, #24]	@ (8008794 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800877c:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8008780:	6808      	ldr	r0, [r1, #0]
 8008782:	5cd3      	ldrb	r3, [r2, r3]
 8008784:	f003 031f 	and.w	r3, r3, #31
}
 8008788:	40d8      	lsrs	r0, r3
 800878a:	4770      	bx	lr
 800878c:	40021000 	.word	0x40021000
 8008790:	0800cd24 	.word	0x0800cd24
 8008794:	200004f0 	.word	0x200004f0

08008798 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008798:	4b05      	ldr	r3, [pc, #20]	@ (80087b0 <HAL_RCC_GetPCLK2Freq+0x18>)
 800879a:	4a06      	ldr	r2, [pc, #24]	@ (80087b4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800879c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800879e:	4906      	ldr	r1, [pc, #24]	@ (80087b8 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80087a0:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80087a4:	6808      	ldr	r0, [r1, #0]
 80087a6:	5cd3      	ldrb	r3, [r2, r3]
 80087a8:	f003 031f 	and.w	r3, r3, #31
}
 80087ac:	40d8      	lsrs	r0, r3
 80087ae:	4770      	bx	lr
 80087b0:	40021000 	.word	0x40021000
 80087b4:	0800cd24 	.word	0x0800cd24
 80087b8:	200004f0 	.word	0x200004f0

080087bc <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 80087bc:	4a02      	ldr	r2, [pc, #8]	@ (80087c8 <HAL_RCC_EnableCSS+0xc>)
 80087be:	6813      	ldr	r3, [r2, #0]
 80087c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087c4:	6013      	str	r3, [r2, #0]
}
 80087c6:	4770      	bx	lr
 80087c8:	40021000 	.word	0x40021000

080087cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087d0:	6803      	ldr	r3, [r0, #0]
{
 80087d2:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087d4:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 80087d8:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80087da:	d041      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087dc:	4ba0      	ldr	r3, [pc, #640]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80087de:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80087e0:	00d5      	lsls	r5, r2, #3
 80087e2:	f140 80f7 	bpl.w	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 80087e6:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087e8:	4d9e      	ldr	r5, [pc, #632]	@ (8008a64 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 80087ea:	682b      	ldr	r3, [r5, #0]
 80087ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087f0:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80087f2:	f7fd fabd 	bl	8005d70 <HAL_GetTick>
 80087f6:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80087f8:	e004      	b.n	8008804 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087fa:	f7fd fab9 	bl	8005d70 <HAL_GetTick>
 80087fe:	1b83      	subs	r3, r0, r6
 8008800:	2b02      	cmp	r3, #2
 8008802:	d828      	bhi.n	8008856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	05d8      	lsls	r0, r3, #23
 8008808:	d5f7      	bpl.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800880a:	4d95      	ldr	r5, [pc, #596]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800880c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800880e:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008812:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8008816:	f000 8119 	beq.w	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x280>
 800881a:	4293      	cmp	r3, r2
 800881c:	f000 8116 	beq.w	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008820:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008824:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800882c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008830:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008834:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008838:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800883c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008840:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8008842:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008846:	f140 8101 	bpl.w	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800884a:	f7fd fa91 	bl	8005d70 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800884e:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8008852:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008854:	e0f5      	b.n	8008a42 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008856:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008858:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 800885a:	2f00      	cmp	r7, #0
 800885c:	f040 80c5 	bne.w	80089ea <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008860:	07de      	lsls	r6, r3, #31
 8008862:	d508      	bpl.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008864:	497e      	ldr	r1, [pc, #504]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008866:	6865      	ldr	r5, [r4, #4]
 8008868:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800886c:	f022 0203 	bic.w	r2, r2, #3
 8008870:	432a      	orrs	r2, r5
 8008872:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008876:	079d      	lsls	r5, r3, #30
 8008878:	d508      	bpl.n	800888c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800887a:	4979      	ldr	r1, [pc, #484]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800887c:	68a5      	ldr	r5, [r4, #8]
 800887e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008882:	f022 020c 	bic.w	r2, r2, #12
 8008886:	432a      	orrs	r2, r5
 8008888:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800888c:	0759      	lsls	r1, r3, #29
 800888e:	d508      	bpl.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008890:	4973      	ldr	r1, [pc, #460]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008892:	68e5      	ldr	r5, [r4, #12]
 8008894:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008898:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 800889c:	432a      	orrs	r2, r5
 800889e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80088a2:	071a      	lsls	r2, r3, #28
 80088a4:	d508      	bpl.n	80088b8 <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80088a6:	496e      	ldr	r1, [pc, #440]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80088a8:	6925      	ldr	r5, [r4, #16]
 80088aa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80088ae:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 80088b2:	432a      	orrs	r2, r5
 80088b4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80088b8:	069f      	lsls	r7, r3, #26
 80088ba:	d508      	bpl.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80088bc:	4968      	ldr	r1, [pc, #416]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80088be:	6965      	ldr	r5, [r4, #20]
 80088c0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80088c4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80088c8:	432a      	orrs	r2, r5
 80088ca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80088ce:	065e      	lsls	r6, r3, #25
 80088d0:	d508      	bpl.n	80088e4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80088d2:	4963      	ldr	r1, [pc, #396]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80088d4:	69a5      	ldr	r5, [r4, #24]
 80088d6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80088da:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80088de:	432a      	orrs	r2, r5
 80088e0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80088e4:	061d      	lsls	r5, r3, #24
 80088e6:	d508      	bpl.n	80088fa <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80088e8:	495d      	ldr	r1, [pc, #372]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80088ea:	69e5      	ldr	r5, [r4, #28]
 80088ec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80088f0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 80088f4:	432a      	orrs	r2, r5
 80088f6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80088fa:	05d9      	lsls	r1, r3, #23
 80088fc:	d508      	bpl.n	8008910 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80088fe:	4958      	ldr	r1, [pc, #352]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008900:	6a25      	ldr	r5, [r4, #32]
 8008902:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008906:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 800890a:	432a      	orrs	r2, r5
 800890c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008910:	059a      	lsls	r2, r3, #22
 8008912:	d508      	bpl.n	8008926 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008914:	4952      	ldr	r1, [pc, #328]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008916:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008918:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800891c:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8008920:	432a      	orrs	r2, r5
 8008922:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008926:	055f      	lsls	r7, r3, #21
 8008928:	d50b      	bpl.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800892a:	494d      	ldr	r1, [pc, #308]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800892c:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800892e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008932:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8008936:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008938:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800893c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8008940:	d059      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8008942:	051e      	lsls	r6, r3, #20
 8008944:	d50b      	bpl.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008946:	4946      	ldr	r1, [pc, #280]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008948:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800894a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800894e:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8008952:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8008954:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008958:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800895c:	d050      	beq.n	8008a00 <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800895e:	04dd      	lsls	r5, r3, #19
 8008960:	d50b      	bpl.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008962:	493f      	ldr	r1, [pc, #252]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008964:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8008966:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 800896a:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 800896e:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008970:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008974:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8008978:	d047      	beq.n	8008a0a <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800897a:	0499      	lsls	r1, r3, #18
 800897c:	d50b      	bpl.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800897e:	4938      	ldr	r1, [pc, #224]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008980:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8008982:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8008986:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 800898a:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800898c:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008990:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008994:	d03e      	beq.n	8008a14 <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008996:	045a      	lsls	r2, r3, #17
 8008998:	d50b      	bpl.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800899a:	4931      	ldr	r1, [pc, #196]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800899c:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 800899e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 80089a2:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 80089a6:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089a8:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80089ac:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80089b0:	d035      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80089b2:	041b      	lsls	r3, r3, #16
 80089b4:	d50b      	bpl.n	80089ce <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80089b8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 80089ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80089be:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 80089c2:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089c4:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80089c8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80089cc:	d02c      	beq.n	8008a28 <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 80089ce:	b002      	add	sp, #8
 80089d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80089d4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80089d6:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80089da:	659a      	str	r2, [r3, #88]	@ 0x58
 80089dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80089de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80089e2:	9301      	str	r3, [sp, #4]
 80089e4:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80089e6:	2701      	movs	r7, #1
 80089e8:	e6fe      	b.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 80089ea:	491d      	ldr	r1, [pc, #116]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 80089ec:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 80089ee:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80089f2:	658a      	str	r2, [r1, #88]	@ 0x58
 80089f4:	e734      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80089f6:	68ca      	ldr	r2, [r1, #12]
 80089f8:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80089fc:	60ca      	str	r2, [r1, #12]
 80089fe:	e7a0      	b.n	8008942 <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a00:	68ca      	ldr	r2, [r1, #12]
 8008a02:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008a06:	60ca      	str	r2, [r1, #12]
 8008a08:	e7a9      	b.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a0a:	68ca      	ldr	r2, [r1, #12]
 8008a0c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008a10:	60ca      	str	r2, [r1, #12]
 8008a12:	e7b2      	b.n	800897a <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a14:	68ca      	ldr	r2, [r1, #12]
 8008a16:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008a1a:	60ca      	str	r2, [r1, #12]
 8008a1c:	e7bb      	b.n	8008996 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008a1e:	68ca      	ldr	r2, [r1, #12]
 8008a20:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8008a24:	60ca      	str	r2, [r1, #12]
 8008a26:	e7c4      	b.n	80089b2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8008a28:	68d3      	ldr	r3, [r2, #12]
 8008a2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a2e:	60d3      	str	r3, [r2, #12]
}
 8008a30:	b002      	add	sp, #8
 8008a32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a36:	f7fd f99b 	bl	8005d70 <HAL_GetTick>
 8008a3a:	1b80      	subs	r0, r0, r6
 8008a3c:	4540      	cmp	r0, r8
 8008a3e:	f63f af0a 	bhi.w	8008856 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a42:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8008a46:	079b      	lsls	r3, r3, #30
 8008a48:	d5f5      	bpl.n	8008a36 <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008a4a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008a4c:	4904      	ldr	r1, [pc, #16]	@ (8008a60 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008a4e:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8008a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a56:	4313      	orrs	r3, r2
 8008a58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008a5c:	2000      	movs	r0, #0
 8008a5e:	e6fb      	b.n	8008858 <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8008a60:	40021000 	.word	0x40021000
 8008a64:	40007000 	.word	0x40007000

08008a68 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a68:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a6a:	6a02      	ldr	r2, [r0, #32]
 8008a6c:	f022 0201 	bic.w	r2, r2, #1
{
 8008a70:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a72:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a74:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a76:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a7a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008a7e:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008a82:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a84:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8008a86:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8008a8a:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a8c:	4d13      	ldr	r5, [pc, #76]	@ (8008adc <TIM_OC1_SetConfig+0x74>)
 8008a8e:	42a8      	cmp	r0, r5
 8008a90:	d00f      	beq.n	8008ab2 <TIM_OC1_SetConfig+0x4a>
 8008a92:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008a96:	42a8      	cmp	r0, r5
 8008a98:	d00b      	beq.n	8008ab2 <TIM_OC1_SetConfig+0x4a>
 8008a9a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008a9e:	42a8      	cmp	r0, r5
 8008aa0:	d007      	beq.n	8008ab2 <TIM_OC1_SetConfig+0x4a>
 8008aa2:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008aa6:	42a8      	cmp	r0, r5
 8008aa8:	d003      	beq.n	8008ab2 <TIM_OC1_SetConfig+0x4a>
 8008aaa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008aae:	42a8      	cmp	r0, r5
 8008ab0:	d10d      	bne.n	8008ace <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ab2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ab4:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8008ab8:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aba:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008abe:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ac2:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ac6:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8008aca:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ace:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008ad0:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008ad2:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008ad4:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 8008ad6:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 8008ad8:	6203      	str	r3, [r0, #32]
}
 8008ada:	4770      	bx	lr
 8008adc:	40012c00 	.word	0x40012c00

08008ae0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae0:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ae2:	6a02      	ldr	r2, [r0, #32]
 8008ae4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 8008ae8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008aea:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aee:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008af0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008af2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008af6:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008afa:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008afc:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8008afe:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b02:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b06:	4d14      	ldr	r5, [pc, #80]	@ (8008b58 <TIM_OC3_SetConfig+0x78>)
 8008b08:	42a8      	cmp	r0, r5
 8008b0a:	d00f      	beq.n	8008b2c <TIM_OC3_SetConfig+0x4c>
 8008b0c:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008b10:	42a8      	cmp	r0, r5
 8008b12:	d00b      	beq.n	8008b2c <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b14:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008b18:	42a8      	cmp	r0, r5
 8008b1a:	d00e      	beq.n	8008b3a <TIM_OC3_SetConfig+0x5a>
 8008b1c:	4d0f      	ldr	r5, [pc, #60]	@ (8008b5c <TIM_OC3_SetConfig+0x7c>)
 8008b1e:	42a8      	cmp	r0, r5
 8008b20:	d00b      	beq.n	8008b3a <TIM_OC3_SetConfig+0x5a>
 8008b22:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008b26:	42a8      	cmp	r0, r5
 8008b28:	d10f      	bne.n	8008b4a <TIM_OC3_SetConfig+0x6a>
 8008b2a:	e006      	b.n	8008b3a <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b2c:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b32:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b36:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b3a:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b3e:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b42:	ea46 0c05 	orr.w	ip, r6, r5
 8008b46:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b4a:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008b4c:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008b4e:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008b50:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008b52:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8008b54:	6203      	str	r3, [r0, #32]
}
 8008b56:	4770      	bx	lr
 8008b58:	40012c00 	.word	0x40012c00
 8008b5c:	40014400 	.word	0x40014400

08008b60 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b60:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b62:	6a02      	ldr	r2, [r0, #32]
 8008b64:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 8008b68:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b6a:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b6c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b6e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b70:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b72:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008b76:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b7a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b7e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008b80:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b84:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008b88:	4d14      	ldr	r5, [pc, #80]	@ (8008bdc <TIM_OC4_SetConfig+0x7c>)
 8008b8a:	42a8      	cmp	r0, r5
 8008b8c:	d00f      	beq.n	8008bae <TIM_OC4_SetConfig+0x4e>
 8008b8e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008b92:	42a8      	cmp	r0, r5
 8008b94:	d00b      	beq.n	8008bae <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b96:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008b9a:	42a8      	cmp	r0, r5
 8008b9c:	d00e      	beq.n	8008bbc <TIM_OC4_SetConfig+0x5c>
 8008b9e:	4d10      	ldr	r5, [pc, #64]	@ (8008be0 <TIM_OC4_SetConfig+0x80>)
 8008ba0:	42a8      	cmp	r0, r5
 8008ba2:	d00b      	beq.n	8008bbc <TIM_OC4_SetConfig+0x5c>
 8008ba4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008ba8:	42a8      	cmp	r0, r5
 8008baa:	d10f      	bne.n	8008bcc <TIM_OC4_SetConfig+0x6c>
 8008bac:	e006      	b.n	8008bbc <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bae:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008bb0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008bb4:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 8008bb8:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008bbc:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008bc0:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008bc4:	ea46 0c05 	orr.w	ip, r6, r5
 8008bc8:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008bcc:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008bce:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008bd0:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008bd2:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 8008bd4:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 8008bd6:	6203      	str	r3, [r0, #32]
}
 8008bd8:	4770      	bx	lr
 8008bda:	bf00      	nop
 8008bdc:	40012c00 	.word	0x40012c00
 8008be0:	40014400 	.word	0x40014400

08008be4 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d075      	beq.n	8008cd4 <HAL_TIM_PWM_Init+0xf0>
{
 8008be8:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008bea:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008bee:	4604      	mov	r4, r0
 8008bf0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d068      	beq.n	8008cca <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008bf8:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008bfa:	4e37      	ldr	r6, [pc, #220]	@ (8008cd8 <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 8008bfc:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bfe:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c00:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 8008c02:	2202      	movs	r2, #2
 8008c04:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c08:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 8008c0a:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c0c:	d04c      	beq.n	8008ca8 <HAL_TIM_PWM_Init+0xc4>
 8008c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c12:	d017      	beq.n	8008c44 <HAL_TIM_PWM_Init+0x60>
 8008c14:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 8008c18:	42b3      	cmp	r3, r6
 8008c1a:	d013      	beq.n	8008c44 <HAL_TIM_PWM_Init+0x60>
 8008c1c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c20:	42b3      	cmp	r3, r6
 8008c22:	d00f      	beq.n	8008c44 <HAL_TIM_PWM_Init+0x60>
 8008c24:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 8008c28:	42b3      	cmp	r3, r6
 8008c2a:	d03d      	beq.n	8008ca8 <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c2c:	4e2b      	ldr	r6, [pc, #172]	@ (8008cdc <HAL_TIM_PWM_Init+0xf8>)
 8008c2e:	42b3      	cmp	r3, r6
 8008c30:	d03e      	beq.n	8008cb0 <HAL_TIM_PWM_Init+0xcc>
 8008c32:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c36:	42b3      	cmp	r3, r6
 8008c38:	d03a      	beq.n	8008cb0 <HAL_TIM_PWM_Init+0xcc>
 8008c3a:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008c3e:	42b3      	cmp	r3, r6
 8008c40:	d108      	bne.n	8008c54 <HAL_TIM_PWM_Init+0x70>
 8008c42:	e035      	b.n	8008cb0 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8008c44:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008c4a:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c4c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008c4e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008c52:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008c54:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008c58:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8008c5a:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008c5c:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008c5e:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008c60:	2201      	movs	r2, #1
 8008c62:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008c64:	691a      	ldr	r2, [r3, #16]
 8008c66:	07d2      	lsls	r2, r2, #31
 8008c68:	d503      	bpl.n	8008c72 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008c6a:	691a      	ldr	r2, [r3, #16]
 8008c6c:	f022 0201 	bic.w	r2, r2, #1
 8008c70:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008c72:	2301      	movs	r3, #1
 8008c74:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c78:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008c7c:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008c80:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008c84:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 8008c88:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c8c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008c90:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008c94:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 8008c98:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008c9c:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008ca0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008ca4:	2000      	movs	r0, #0
}
 8008ca6:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 8008ca8:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008caa:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008cae:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb0:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cb2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cb6:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008cbc:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8008cbe:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cc0:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008cc2:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008cc4:	6962      	ldr	r2, [r4, #20]
 8008cc6:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cc8:	e7ca      	b.n	8008c60 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 8008cca:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008cce:	f7fc fdab 	bl	8005828 <HAL_TIM_PWM_MspInit>
 8008cd2:	e791      	b.n	8008bf8 <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 8008cd4:	2001      	movs	r0, #1
}
 8008cd6:	4770      	bx	lr
 8008cd8:	40012c00 	.word	0x40012c00
 8008cdc:	40014000 	.word	0x40014000

08008ce0 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 8008ce0:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ce2:	6a02      	ldr	r2, [r0, #32]
 8008ce4:	f022 0210 	bic.w	r2, r2, #16
{
 8008ce8:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cea:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8008cec:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8008cee:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cf0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cf2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 8008cf6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008cfa:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008cfe:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8008d00:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008d04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008d08:	4d14      	ldr	r5, [pc, #80]	@ (8008d5c <TIM_OC2_SetConfig+0x7c>)
 8008d0a:	42a8      	cmp	r0, r5
 8008d0c:	d00f      	beq.n	8008d2e <TIM_OC2_SetConfig+0x4e>
 8008d0e:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008d12:	42a8      	cmp	r0, r5
 8008d14:	d00b      	beq.n	8008d2e <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d16:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008d1a:	42a8      	cmp	r0, r5
 8008d1c:	d00e      	beq.n	8008d3c <TIM_OC2_SetConfig+0x5c>
 8008d1e:	4d10      	ldr	r5, [pc, #64]	@ (8008d60 <TIM_OC2_SetConfig+0x80>)
 8008d20:	42a8      	cmp	r0, r5
 8008d22:	d00b      	beq.n	8008d3c <TIM_OC2_SetConfig+0x5c>
 8008d24:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008d28:	42a8      	cmp	r0, r5
 8008d2a:	d10f      	bne.n	8008d4c <TIM_OC2_SetConfig+0x6c>
 8008d2c:	e006      	b.n	8008d3c <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d2e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008d30:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d3c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d40:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d44:	ea46 0c05 	orr.w	ip, r6, r5
 8008d48:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008d4c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008d4e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008d50:	6182      	str	r2, [r0, #24]
}
 8008d52:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008d54:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 8008d56:	6203      	str	r3, [r0, #32]
}
 8008d58:	4770      	bx	lr
 8008d5a:	bf00      	nop
 8008d5c:	40012c00 	.word	0x40012c00
 8008d60:	40014400 	.word	0x40014400

08008d64 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008d64:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	f000 80dc 	beq.w	8008f26 <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8008d6e:	2301      	movs	r3, #1
{
 8008d70:	b570      	push	{r4, r5, r6, lr}
 8008d72:	4604      	mov	r4, r0
 8008d74:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8008d76:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 8008d7a:	2a14      	cmp	r2, #20
 8008d7c:	d80c      	bhi.n	8008d98 <HAL_TIM_PWM_ConfigChannel+0x34>
 8008d7e:	e8df f002 	tbb	[pc, r2]
 8008d82:	0b4f      	.short	0x0b4f
 8008d84:	0b630b0b 	.word	0x0b630b0b
 8008d88:	0b740b0b 	.word	0x0b740b0b
 8008d8c:	0b840b0b 	.word	0x0b840b0b
 8008d90:	0b950b0b 	.word	0x0b950b0b
 8008d94:	0b0b      	.short	0x0b0b
 8008d96:	10          	.byte	0x10
 8008d97:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8008d98:	2300      	movs	r3, #0
 8008d9a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8008d9e:	2001      	movs	r0, #1
}
 8008da0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008da2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008da4:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008da6:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008da8:	6a19      	ldr	r1, [r3, #32]
 8008daa:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8008dae:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008db0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008db2:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008db4:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 8008db8:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008dbc:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dc0:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008dc2:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008dc6:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dca:	4e58      	ldr	r6, [pc, #352]	@ (8008f2c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008dcc:	42b3      	cmp	r3, r6
 8008dce:	d00f      	beq.n	8008df0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008dd0:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008dd4:	42b3      	cmp	r3, r6
 8008dd6:	d00b      	beq.n	8008df0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008dd8:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008ddc:	42b3      	cmp	r3, r6
 8008dde:	d007      	beq.n	8008df0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008de0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008de4:	42b3      	cmp	r3, r6
 8008de6:	d003      	beq.n	8008df0 <HAL_TIM_PWM_ConfigChannel+0x8c>
 8008de8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008dec:	42b3      	cmp	r3, r6
 8008dee:	d104      	bne.n	8008dfa <HAL_TIM_PWM_ConfigChannel+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008df0:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008df2:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008df6:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dfa:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dfc:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008dfe:	6869      	ldr	r1, [r5, #4]
 8008e00:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e02:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e04:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e06:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008e08:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e0c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e0e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e10:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e14:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008e18:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008e1c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008e1e:	e00e      	b.n	8008e3e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008e20:	6800      	ldr	r0, [r0, #0]
 8008e22:	f7ff fe21 	bl	8008a68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e26:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e28:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008e2a:	f043 0308 	orr.w	r3, r3, #8
 8008e2e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008e30:	6983      	ldr	r3, [r0, #24]
 8008e32:	f023 0304 	bic.w	r3, r3, #4
 8008e36:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008e38:	6983      	ldr	r3, [r0, #24]
 8008e3a:	4313      	orrs	r3, r2
 8008e3c:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008e3e:	2300      	movs	r3, #0
 8008e40:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008e44:	2000      	movs	r0, #0
}
 8008e46:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008e48:	6800      	ldr	r0, [r0, #0]
 8008e4a:	f7ff ff49 	bl	8008ce0 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e4e:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e50:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008e52:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e56:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008e58:	6983      	ldr	r3, [r0, #24]
 8008e5a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e5e:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008e60:	6983      	ldr	r3, [r0, #24]
 8008e62:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008e66:	6183      	str	r3, [r0, #24]
      break;
 8008e68:	e7e9      	b.n	8008e3e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008e6a:	6800      	ldr	r0, [r0, #0]
 8008e6c:	f7ff fe38 	bl	8008ae0 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e70:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e72:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008e74:	f043 0308 	orr.w	r3, r3, #8
 8008e78:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008e7a:	69c3      	ldr	r3, [r0, #28]
 8008e7c:	f023 0304 	bic.w	r3, r3, #4
 8008e80:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008e82:	69c3      	ldr	r3, [r0, #28]
 8008e84:	4313      	orrs	r3, r2
 8008e86:	61c3      	str	r3, [r0, #28]
      break;
 8008e88:	e7d9      	b.n	8008e3e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	f7ff fe68 	bl	8008b60 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e90:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008e92:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008e94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008e98:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008e9a:	69c3      	ldr	r3, [r0, #28]
 8008e9c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ea0:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ea2:	69c3      	ldr	r3, [r0, #28]
 8008ea4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8008ea8:	61c3      	str	r3, [r0, #28]
      break;
 8008eaa:	e7c8      	b.n	8008e3e <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008eac:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008eae:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008eb0:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008eb2:	6a19      	ldr	r1, [r3, #32]
 8008eb4:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008eb8:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008eba:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008ebc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008ebe:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008ec2:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 8008ec6:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ec8:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 8008eca:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008ece:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ed2:	4e16      	ldr	r6, [pc, #88]	@ (8008f2c <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 8008ed4:	42b3      	cmp	r3, r6
 8008ed6:	d00f      	beq.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008ed8:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008edc:	42b3      	cmp	r3, r6
 8008ede:	d00b      	beq.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008ee0:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 8008ee4:	42b3      	cmp	r3, r6
 8008ee6:	d007      	beq.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008ee8:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008eec:	42b3      	cmp	r3, r6
 8008eee:	d003      	beq.n	8008ef8 <HAL_TIM_PWM_ConfigChannel+0x194>
 8008ef0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008ef4:	42b3      	cmp	r3, r6
 8008ef6:	d104      	bne.n	8008f02 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008ef8:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008efa:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008efe:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8008f02:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8008f04:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 8008f06:	6869      	ldr	r1, [r5, #4]
 8008f08:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 8008f0a:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f0e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008f10:	f042 0208 	orr.w	r2, r2, #8
 8008f14:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008f16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f18:	f022 0204 	bic.w	r2, r2, #4
 8008f1c:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008f1e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008f20:	430a      	orrs	r2, r1
 8008f22:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8008f24:	e78b      	b.n	8008e3e <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 8008f26:	2002      	movs	r0, #2
}
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40012c00 	.word	0x40012c00

08008f30 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008f30:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d046      	beq.n	8008fc6 <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 8008f38:	b470      	push	{r4, r5, r6}
 8008f3a:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f3c:	4e23      	ldr	r6, [pc, #140]	@ (8008fcc <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008f3e:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008f40:	2302      	movs	r3, #2
 8008f42:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f46:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 8008f48:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f4a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008f4c:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008f4e:	d024      	beq.n	8008f9a <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008f50:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008f54:	42b0      	cmp	r0, r6
 8008f56:	d02b      	beq.n	8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f58:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008f5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f60:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f62:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 8008f66:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f68:	d00a      	beq.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008f6a:	4b19      	ldr	r3, [pc, #100]	@ (8008fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008f6c:	4298      	cmp	r0, r3
 8008f6e:	d007      	beq.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008f70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008f74:	4298      	cmp	r0, r3
 8008f76:	d003      	beq.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008f78:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8008f7c:	4298      	cmp	r0, r3
 8008f7e:	d104      	bne.n	8008f8a <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f80:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f82:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f86:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f88:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8008f8a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008f8c:	2301      	movs	r3, #1
 8008f8e:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008f92:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 8008f96:	bc70      	pop	{r4, r5, r6}
 8008f98:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f9a:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008f9c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fa0:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fa2:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fa6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008faa:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008fac:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fae:	e7e7      	b.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fb0:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008fb2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008fb6:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008fb8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008fbc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008fc0:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8008fc2:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008fc4:	e7dc      	b.n	8008f80 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 8008fc6:	2002      	movs	r0, #2
}
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	40012c00 	.word	0x40012c00
 8008fd0:	40000400 	.word	0x40000400

08008fd4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fd4:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008fd8:	2b01      	cmp	r3, #1
 8008fda:	d045      	beq.n	8009068 <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 8008fdc:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008fde:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 8008fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fea:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008fec:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008fee:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008ff2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ff4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ff8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ffa:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ffc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009000:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009002:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009004:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009008:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800900a:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800900c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009010:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009012:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009014:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009018:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800901a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800901e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009022:	4c12      	ldr	r4, [pc, #72]	@ (800906c <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8009024:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009026:	6810      	ldr	r0, [r2, #0]
 8009028:	42a0      	cmp	r0, r4
 800902a:	d00b      	beq.n	8009044 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 800902c:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8009030:	42a0      	cmp	r0, r4
 8009032:	d007      	beq.n	8009044 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8009034:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 8009036:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 8009038:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 800903c:	4608      	mov	r0, r1
}
 800903e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009042:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009044:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8009046:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800904a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800904e:	6a0c      	ldr	r4, [r1, #32]
 8009050:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009054:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009056:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009058:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800905a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800905e:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009060:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009064:	430b      	orrs	r3, r1
 8009066:	e7e5      	b.n	8009034 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 8009068:	2002      	movs	r0, #2
}
 800906a:	4770      	bx	lr
 800906c:	40012c00 	.word	0x40012c00

08009070 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8009070:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8009072:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 8009076:	2801      	cmp	r0, #1
 8009078:	d047      	beq.n	800910a <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 800907a:	6810      	ldr	r0, [r2, #0]
 800907c:	3801      	subs	r0, #1
 800907e:	280f      	cmp	r0, #15
{
 8009080:	b4f0      	push	{r4, r5, r6, r7}
 8009082:	d815      	bhi.n	80090b0 <HAL_TIMEx_ConfigBreakInput+0x40>
 8009084:	4c22      	ldr	r4, [pc, #136]	@ (8009110 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 8009086:	4e23      	ldr	r6, [pc, #140]	@ (8009114 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 8009088:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 800908c:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8009090:	4c21      	ldr	r4, [pc, #132]	@ (8009118 <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8009092:	4e22      	ldr	r6, [pc, #136]	@ (800911c <HAL_TIMEx_ConfigBreakInput+0xac>)
 8009094:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8009098:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 800909c:	2901      	cmp	r1, #1
 800909e:	d00d      	beq.n	80090bc <HAL_TIMEx_ConfigBreakInput+0x4c>
 80090a0:	2902      	cmp	r1, #2
 80090a2:	d01c      	beq.n	80090de <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 80090a4:	2200      	movs	r2, #0
 80090a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 80090aa:	2001      	movs	r0, #1

  return status;
}
 80090ac:	bcf0      	pop	{r4, r5, r6, r7}
 80090ae:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 80090b0:	2700      	movs	r7, #0
  switch (BreakInput)
 80090b2:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 80090b4:	46bc      	mov	ip, r7
 80090b6:	463c      	mov	r4, r7
 80090b8:	463d      	mov	r5, r7
  switch (BreakInput)
 80090ba:	d1f1      	bne.n	80090a0 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090bc:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 80090be:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090c0:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090c2:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 80090c4:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090c6:	fa01 f10c 	lsl.w	r1, r1, ip
 80090ca:	ea81 0207 	eor.w	r2, r1, r7
 80090ce:	402a      	ands	r2, r5
 80090d0:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090d2:	ea80 0102 	eor.w	r1, r0, r2
 80090d6:	4021      	ands	r1, r4
 80090d8:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 80090da:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 80090dc:	e00f      	b.n	80090fe <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090de:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80090e0:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090e2:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090e4:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80090e6:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80090e8:	fa01 f10c 	lsl.w	r1, r1, ip
 80090ec:	ea81 0207 	eor.w	r2, r1, r7
 80090f0:	402a      	ands	r2, r5
 80090f2:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80090f4:	ea80 0102 	eor.w	r1, r0, r2
 80090f8:	4021      	ands	r1, r4
 80090fa:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 80090fc:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 80090fe:	2200      	movs	r2, #0
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8009104:	2000      	movs	r0, #0
}
 8009106:	bcf0      	pop	{r4, r5, r6, r7}
 8009108:	4770      	bx	lr
  __HAL_LOCK(htim);
 800910a:	2002      	movs	r0, #2
}
 800910c:	4770      	bx	lr
 800910e:	bf00      	nop
 8009110:	0800ce0c 	.word	0x0800ce0c
 8009114:	0800cd8c 	.word	0x0800cd8c
 8009118:	0800cdcc 	.word	0x0800cdcc
 800911c:	0800cd4c 	.word	0x0800cd4c

08009120 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009120:	b1d8      	cbz	r0, 800915a <HAL_UART_DeInit+0x3a>
{
 8009122:	b538      	push	{r3, r4, r5, lr}
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 8009124:	2224      	movs	r2, #36	@ 0x24

  __HAL_UART_DISABLE(huart);
 8009126:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009128:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800912c:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800912e:	2500      	movs	r5, #0
 8009130:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 8009132:	f022 0201 	bic.w	r2, r2, #1
 8009136:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 8009138:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800913a:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800913c:	609d      	str	r5, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 800913e:	f7fc fc6d 	bl	8005a1c <HAL_UART_MspDeInit>
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);
 8009142:	f884 5084 	strb.w	r5, [r4, #132]	@ 0x84
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009146:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90

  return HAL_OK;
 800914a:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 800914c:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8009150:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009154:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009156:	6725      	str	r5, [r4, #112]	@ 0x70
}
 8009158:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800915a:	2001      	movs	r0, #1
}
 800915c:	4770      	bx	lr
 800915e:	bf00      	nop

08009160 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009164:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009166:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800916a:	2820      	cmp	r0, #32
 800916c:	d15e      	bne.n	800922c <HAL_UART_Transmit+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 800916e:	460d      	mov	r5, r1
 8009170:	b109      	cbz	r1, 8009176 <HAL_UART_Transmit+0x16>
 8009172:	4616      	mov	r6, r2
 8009174:	b912      	cbnz	r2, 800917c <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 8009176:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8009178:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800917c:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800917e:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009182:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009184:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009188:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800918c:	f7fc fdf0 	bl	8005d70 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009190:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8009192:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009196:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800919a:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800919c:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80091a0:	d047      	beq.n	8009232 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 80091a2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091a6:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d04d      	beq.n	800924a <HAL_UART_Transmit+0xea>
 80091ae:	1c7b      	adds	r3, r7, #1
 80091b0:	d12a      	bne.n	8009208 <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091b2:	69d3      	ldr	r3, [r2, #28]
 80091b4:	061f      	lsls	r7, r3, #24
 80091b6:	d5fc      	bpl.n	80091b2 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 80091b8:	2d00      	cmp	r5, #0
 80091ba:	d032      	beq.n	8009222 <HAL_UART_Transmit+0xc2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091bc:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091c0:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80091c2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80091c6:	3b01      	subs	r3, #1
 80091c8:	b29b      	uxth	r3, r3
 80091ca:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80091ce:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d1ec      	bne.n	80091b2 <HAL_UART_Transmit+0x52>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091d8:	69d3      	ldr	r3, [r2, #28]
 80091da:	0659      	lsls	r1, r3, #25
 80091dc:	d5fc      	bpl.n	80091d8 <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 80091de:	2320      	movs	r3, #32
 80091e0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80091e4:	2000      	movs	r0, #0
}
 80091e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 80091ea:	2d00      	cmp	r5, #0
 80091ec:	d040      	beq.n	8009270 <HAL_UART_Transmit+0x110>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80091ee:	f815 3b01 	ldrb.w	r3, [r5], #1
 80091f2:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80091f4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80091f8:	3b01      	subs	r3, #1
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8009200:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 8009204:	b29b      	uxth	r3, r3
 8009206:	b313      	cbz	r3, 800924e <HAL_UART_Transmit+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009208:	69d3      	ldr	r3, [r2, #28]
 800920a:	061e      	lsls	r6, r3, #24
 800920c:	d4ed      	bmi.n	80091ea <HAL_UART_Transmit+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800920e:	f7fc fdaf 	bl	8005d70 <HAL_GetTick>
 8009212:	eba0 0309 	sub.w	r3, r0, r9
 8009216:	429f      	cmp	r7, r3
 8009218:	d311      	bcc.n	800923e <HAL_UART_Transmit+0xde>
 800921a:	b187      	cbz	r7, 800923e <HAL_UART_Transmit+0xde>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800921c:	6822      	ldr	r2, [r4, #0]
 800921e:	6813      	ldr	r3, [r2, #0]
 8009220:	e7f2      	b.n	8009208 <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009222:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009226:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800922a:	e7c9      	b.n	80091c0 <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 800922c:	2002      	movs	r0, #2
}
 800922e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009232:	6923      	ldr	r3, [r4, #16]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1b4      	bne.n	80091a2 <HAL_UART_Transmit+0x42>
      pdata16bits = (const uint16_t *) pData;
 8009238:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800923a:	461d      	mov	r5, r3
 800923c:	e7b1      	b.n	80091a2 <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 800923e:	2320      	movs	r3, #32
 8009240:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8009244:	2003      	movs	r0, #3
}
 8009246:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800924a:	1c78      	adds	r0, r7, #1
 800924c:	d0c4      	beq.n	80091d8 <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800924e:	69d3      	ldr	r3, [r2, #28]
 8009250:	065b      	lsls	r3, r3, #25
 8009252:	d4c4      	bmi.n	80091de <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009254:	f7fc fd8c 	bl	8005d70 <HAL_GetTick>
 8009258:	eba0 0309 	sub.w	r3, r0, r9
 800925c:	429f      	cmp	r7, r3
 800925e:	d3ee      	bcc.n	800923e <HAL_UART_Transmit+0xde>
 8009260:	2f00      	cmp	r7, #0
 8009262:	d0ec      	beq.n	800923e <HAL_UART_Transmit+0xde>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009264:	6822      	ldr	r2, [r4, #0]
 8009266:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009268:	69d3      	ldr	r3, [r2, #28]
 800926a:	065b      	lsls	r3, r3, #25
 800926c:	d5f2      	bpl.n	8009254 <HAL_UART_Transmit+0xf4>
 800926e:	e7b6      	b.n	80091de <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009270:	f838 3b02 	ldrh.w	r3, [r8], #2
 8009274:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009278:	e7bb      	b.n	80091f2 <HAL_UART_Transmit+0x92>
 800927a:	bf00      	nop

0800927c <UART_SetConfig>:
{
 800927c:	b570      	push	{r4, r5, r6, lr}
 800927e:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009280:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009282:	6882      	ldr	r2, [r0, #8]
 8009284:	6900      	ldr	r0, [r0, #16]
 8009286:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009288:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800928a:	4302      	orrs	r2, r0
 800928c:	430a      	orrs	r2, r1
 800928e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009290:	498e      	ldr	r1, [pc, #568]	@ (80094cc <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009292:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009294:	4029      	ands	r1, r5
 8009296:	430a      	orrs	r2, r1
 8009298:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800929a:	685a      	ldr	r2, [r3, #4]
 800929c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800929e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a0:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 80092a4:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092a6:	498a      	ldr	r1, [pc, #552]	@ (80094d0 <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092a8:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092aa:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092ac:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ae:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092b0:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 80092b4:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092b8:	f000 80b0 	beq.w	800941c <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 80092bc:	6a26      	ldr	r6, [r4, #32]
 80092be:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80092c0:	430a      	orrs	r2, r1
 80092c2:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80092c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092c6:	f022 020f 	bic.w	r2, r2, #15
 80092ca:	432a      	orrs	r2, r5
 80092cc:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092ce:	4a81      	ldr	r2, [pc, #516]	@ (80094d4 <UART_SetConfig+0x258>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d035      	beq.n	8009340 <UART_SetConfig+0xc4>
 80092d4:	4a80      	ldr	r2, [pc, #512]	@ (80094d8 <UART_SetConfig+0x25c>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d00d      	beq.n	80092f6 <UART_SetConfig+0x7a>
 80092da:	4a80      	ldr	r2, [pc, #512]	@ (80094dc <UART_SetConfig+0x260>)
 80092dc:	4293      	cmp	r3, r2
 80092de:	d055      	beq.n	800938c <UART_SetConfig+0x110>
 80092e0:	4a7f      	ldr	r2, [pc, #508]	@ (80094e0 <UART_SetConfig+0x264>)
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d040      	beq.n	8009368 <UART_SetConfig+0xec>
        ret = HAL_ERROR;
 80092e6:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80092e8:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80092ea:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 80092ee:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80092f2:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 80092f4:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80092f6:	4b7b      	ldr	r3, [pc, #492]	@ (80094e4 <UART_SetConfig+0x268>)
 80092f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fc:	f003 030c 	and.w	r3, r3, #12
 8009300:	2b0c      	cmp	r3, #12
 8009302:	d8f0      	bhi.n	80092e6 <UART_SetConfig+0x6a>
 8009304:	a201      	add	r2, pc, #4	@ (adr r2, 800930c <UART_SetConfig+0x90>)
 8009306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800930a:	bf00      	nop
 800930c:	08009411 	.word	0x08009411
 8009310:	080092e7 	.word	0x080092e7
 8009314:	080092e7 	.word	0x080092e7
 8009318:	080092e7 	.word	0x080092e7
 800931c:	0800937f 	.word	0x0800937f
 8009320:	080092e7 	.word	0x080092e7
 8009324:	080092e7 	.word	0x080092e7
 8009328:	080092e7 	.word	0x080092e7
 800932c:	080093d3 	.word	0x080093d3
 8009330:	080092e7 	.word	0x080092e7
 8009334:	080092e7 	.word	0x080092e7
 8009338:	080092e7 	.word	0x080092e7
 800933c:	080093a1 	.word	0x080093a1
 8009340:	4b68      	ldr	r3, [pc, #416]	@ (80094e4 <UART_SetConfig+0x268>)
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b02      	cmp	r3, #2
 800934c:	d041      	beq.n	80093d2 <UART_SetConfig+0x156>
 800934e:	2b03      	cmp	r3, #3
 8009350:	d026      	beq.n	80093a0 <UART_SetConfig+0x124>
 8009352:	2b01      	cmp	r3, #1
 8009354:	d013      	beq.n	800937e <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009356:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800935a:	f000 80ac 	beq.w	80094b6 <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 800935e:	f7ff fa1b 	bl	8008798 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8009362:	b3a0      	cbz	r0, 80093ce <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009364:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009366:	e020      	b.n	80093aa <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009368:	4b5e      	ldr	r3, [pc, #376]	@ (80094e4 <UART_SetConfig+0x268>)
 800936a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800936e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009372:	2b80      	cmp	r3, #128	@ 0x80
 8009374:	d02d      	beq.n	80093d2 <UART_SetConfig+0x156>
 8009376:	f200 808e 	bhi.w	8009496 <UART_SetConfig+0x21a>
 800937a:	2b00      	cmp	r3, #0
 800937c:	d048      	beq.n	8009410 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009382:	f000 809e 	beq.w	80094c2 <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 8009386:	f7ff f8b3 	bl	80084f0 <HAL_RCC_GetSysClockFreq>
        break;
 800938a:	e7ea      	b.n	8009362 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800938c:	4b55      	ldr	r3, [pc, #340]	@ (80094e4 <UART_SetConfig+0x268>)
 800938e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009392:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009396:	2b20      	cmp	r3, #32
 8009398:	d01b      	beq.n	80093d2 <UART_SetConfig+0x156>
 800939a:	d9ee      	bls.n	800937a <UART_SetConfig+0xfe>
 800939c:	2b30      	cmp	r3, #48	@ 0x30
 800939e:	d1a2      	bne.n	80092e6 <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093a0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80093a4:	d019      	beq.n	80093da <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 80093a6:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093aa:	6863      	ldr	r3, [r4, #4]
 80093ac:	4a4e      	ldr	r2, [pc, #312]	@ (80094e8 <UART_SetConfig+0x26c>)
 80093ae:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 80093b2:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093b6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093ba:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80093be:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093c2:	f1a0 0310 	sub.w	r3, r0, #16
 80093c6:	4293      	cmp	r3, r2
 80093c8:	d88d      	bhi.n	80092e6 <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 80093ca:	6823      	ldr	r3, [r4, #0]
 80093cc:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 80093ce:	2000      	movs	r0, #0
 80093d0:	e78a      	b.n	80092e8 <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093d2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80093d6:	4845      	ldr	r0, [pc, #276]	@ (80094ec <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093d8:	d1e7      	bne.n	80093aa <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093da:	6862      	ldr	r2, [r4, #4]
 80093dc:	4b42      	ldr	r3, [pc, #264]	@ (80094e8 <UART_SetConfig+0x26c>)
 80093de:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80093e2:	fbb0 f0f1 	udiv	r0, r0, r1
 80093e6:	0853      	lsrs	r3, r2, #1
 80093e8:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093ec:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80093f0:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80093f4:	f1a3 0210 	sub.w	r2, r3, #16
 80093f8:	428a      	cmp	r2, r1
 80093fa:	f63f af74 	bhi.w	80092e6 <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80093fe:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 8009402:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009404:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009406:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800940a:	4313      	orrs	r3, r2
 800940c:	60cb      	str	r3, [r1, #12]
 800940e:	e7de      	b.n	80093ce <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009410:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8009414:	d049      	beq.n	80094aa <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8009416:	f7ff f9ad 	bl	8008774 <HAL_RCC_GetPCLK1Freq>
        break;
 800941a:	e7a2      	b.n	8009362 <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800941c:	4311      	orrs	r1, r2
 800941e:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009420:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009422:	4930      	ldr	r1, [pc, #192]	@ (80094e4 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009424:	f022 020f 	bic.w	r2, r2, #15
 8009428:	432a      	orrs	r2, r5
 800942a:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800942c:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8009430:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009434:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009438:	d046      	beq.n	80094c8 <UART_SetConfig+0x24c>
 800943a:	d82f      	bhi.n	800949c <UART_SetConfig+0x220>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d03d      	beq.n	80094bc <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 8009440:	f7ff f856 	bl	80084f0 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8009444:	2800      	cmp	r0, #0
 8009446:	d0c2      	beq.n	80093ce <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009448:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800944a:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800944c:	4b26      	ldr	r3, [pc, #152]	@ (80094e8 <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800944e:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009452:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8009456:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800945a:	4299      	cmp	r1, r3
 800945c:	f63f af43 	bhi.w	80092e6 <UART_SetConfig+0x6a>
 8009460:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8009464:	f63f af3f 	bhi.w	80092e6 <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009468:	2300      	movs	r3, #0
 800946a:	4619      	mov	r1, r3
 800946c:	f7f7 f96c 	bl	8000748 <__aeabi_uldivmod>
 8009470:	0872      	lsrs	r2, r6, #1
 8009472:	0203      	lsls	r3, r0, #8
 8009474:	0209      	lsls	r1, r1, #8
 8009476:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800947a:	1898      	adds	r0, r3, r2
 800947c:	f141 0100 	adc.w	r1, r1, #0
 8009480:	4632      	mov	r2, r6
 8009482:	2300      	movs	r3, #0
 8009484:	f7f7 f960 	bl	8000748 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009488:	4b19      	ldr	r3, [pc, #100]	@ (80094f0 <UART_SetConfig+0x274>)
 800948a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800948e:	429a      	cmp	r2, r3
 8009490:	f63f af29 	bhi.w	80092e6 <UART_SetConfig+0x6a>
 8009494:	e799      	b.n	80093ca <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009496:	2bc0      	cmp	r3, #192	@ 0xc0
 8009498:	d082      	beq.n	80093a0 <UART_SetConfig+0x124>
 800949a:	e724      	b.n	80092e6 <UART_SetConfig+0x6a>
 800949c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094a0:	f47f af21 	bne.w	80092e6 <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 80094a4:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80094a8:	e7cf      	b.n	800944a <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 80094aa:	f7ff f963 	bl	8008774 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80094ae:	2800      	cmp	r0, #0
 80094b0:	d08d      	beq.n	80093ce <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094b2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80094b4:	e791      	b.n	80093da <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 80094b6:	f7ff f96f 	bl	8008798 <HAL_RCC_GetPCLK2Freq>
        break;
 80094ba:	e7f8      	b.n	80094ae <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 80094bc:	f7ff f95a 	bl	8008774 <HAL_RCC_GetPCLK1Freq>
        break;
 80094c0:	e7c0      	b.n	8009444 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 80094c2:	f7ff f815 	bl	80084f0 <HAL_RCC_GetSysClockFreq>
        break;
 80094c6:	e7f2      	b.n	80094ae <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 80094c8:	4808      	ldr	r0, [pc, #32]	@ (80094ec <UART_SetConfig+0x270>)
 80094ca:	e7be      	b.n	800944a <UART_SetConfig+0x1ce>
 80094cc:	cfff69f3 	.word	0xcfff69f3
 80094d0:	40008000 	.word	0x40008000
 80094d4:	40013800 	.word	0x40013800
 80094d8:	40004400 	.word	0x40004400
 80094dc:	40004800 	.word	0x40004800
 80094e0:	40004c00 	.word	0x40004c00
 80094e4:	40021000 	.word	0x40021000
 80094e8:	0800ce4c 	.word	0x0800ce4c
 80094ec:	00f42400 	.word	0x00f42400
 80094f0:	000ffcff 	.word	0x000ffcff

080094f4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094f4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80094f6:	071a      	lsls	r2, r3, #28
{
 80094f8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80094fa:	d506      	bpl.n	800950a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80094fc:	6801      	ldr	r1, [r0, #0]
 80094fe:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8009500:	684a      	ldr	r2, [r1, #4]
 8009502:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009506:	4322      	orrs	r2, r4
 8009508:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800950a:	07dc      	lsls	r4, r3, #31
 800950c:	d506      	bpl.n	800951c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800950e:	6801      	ldr	r1, [r0, #0]
 8009510:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8009512:	684a      	ldr	r2, [r1, #4]
 8009514:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8009518:	4322      	orrs	r2, r4
 800951a:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800951c:	0799      	lsls	r1, r3, #30
 800951e:	d506      	bpl.n	800952e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009520:	6801      	ldr	r1, [r0, #0]
 8009522:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8009524:	684a      	ldr	r2, [r1, #4]
 8009526:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800952a:	4322      	orrs	r2, r4
 800952c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800952e:	075a      	lsls	r2, r3, #29
 8009530:	d506      	bpl.n	8009540 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009532:	6801      	ldr	r1, [r0, #0]
 8009534:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8009536:	684a      	ldr	r2, [r1, #4]
 8009538:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800953c:	4322      	orrs	r2, r4
 800953e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009540:	06dc      	lsls	r4, r3, #27
 8009542:	d506      	bpl.n	8009552 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009544:	6801      	ldr	r1, [r0, #0]
 8009546:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8009548:	688a      	ldr	r2, [r1, #8]
 800954a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800954e:	4322      	orrs	r2, r4
 8009550:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009552:	0699      	lsls	r1, r3, #26
 8009554:	d506      	bpl.n	8009564 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009556:	6801      	ldr	r1, [r0, #0]
 8009558:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800955a:	688a      	ldr	r2, [r1, #8]
 800955c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009560:	4322      	orrs	r2, r4
 8009562:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009564:	065a      	lsls	r2, r3, #25
 8009566:	d509      	bpl.n	800957c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009568:	6801      	ldr	r1, [r0, #0]
 800956a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800956c:	684a      	ldr	r2, [r1, #4]
 800956e:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8009572:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009574:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009578:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800957a:	d00b      	beq.n	8009594 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800957c:	061b      	lsls	r3, r3, #24
 800957e:	d506      	bpl.n	800958e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009580:	6802      	ldr	r2, [r0, #0]
 8009582:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8009584:	6853      	ldr	r3, [r2, #4]
 8009586:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800958a:	430b      	orrs	r3, r1
 800958c:	6053      	str	r3, [r2, #4]
}
 800958e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009592:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009594:	684a      	ldr	r2, [r1, #4]
 8009596:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8009598:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800959c:	4322      	orrs	r2, r4
 800959e:	604a      	str	r2, [r1, #4]
 80095a0:	e7ec      	b.n	800957c <UART_AdvFeatureConfig+0x88>
 80095a2:	bf00      	nop

080095a4 <UART_CheckIdleState>:
{
 80095a4:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095a6:	2300      	movs	r3, #0
{
 80095a8:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80095aa:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 80095ae:	f7fc fbdf 	bl	8005d70 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095b2:	6822      	ldr	r2, [r4, #0]
 80095b4:	6813      	ldr	r3, [r2, #0]
 80095b6:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 80095b8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80095ba:	d40f      	bmi.n	80095dc <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80095bc:	6813      	ldr	r3, [r2, #0]
 80095be:	0759      	lsls	r1, r3, #29
 80095c0:	d431      	bmi.n	8009626 <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095c2:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80095c4:	2220      	movs	r2, #32
 80095c6:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 80095ca:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 80095cc:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80095d0:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80095d2:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 80095d4:	2300      	movs	r3, #0
 80095d6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 80095da:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095dc:	69d3      	ldr	r3, [r2, #28]
 80095de:	0298      	lsls	r0, r3, #10
 80095e0:	d4ec      	bmi.n	80095bc <UART_CheckIdleState+0x18>
 80095e2:	e00c      	b.n	80095fe <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80095e4:	6819      	ldr	r1, [r3, #0]
 80095e6:	0749      	lsls	r1, r1, #29
 80095e8:	461a      	mov	r2, r3
 80095ea:	d505      	bpl.n	80095f8 <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80095ec:	69d9      	ldr	r1, [r3, #28]
 80095ee:	0708      	lsls	r0, r1, #28
 80095f0:	d44a      	bmi.n	8009688 <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80095f2:	69d9      	ldr	r1, [r3, #28]
 80095f4:	0509      	lsls	r1, r1, #20
 80095f6:	d475      	bmi.n	80096e4 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095f8:	69db      	ldr	r3, [r3, #28]
 80095fa:	0298      	lsls	r0, r3, #10
 80095fc:	d4de      	bmi.n	80095bc <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80095fe:	f7fc fbb7 	bl	8005d70 <HAL_GetTick>
 8009602:	1b43      	subs	r3, r0, r5
 8009604:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009608:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800960a:	d3eb      	bcc.n	80095e4 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800960c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009610:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009614:	e843 2100 	strex	r1, r2, [r3]
 8009618:	2900      	cmp	r1, #0
 800961a:	d1f7      	bne.n	800960c <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 800961c:	2320      	movs	r3, #32
 800961e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8009622:	2003      	movs	r0, #3
 8009624:	e7d6      	b.n	80095d4 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009626:	69d3      	ldr	r3, [r2, #28]
 8009628:	025b      	lsls	r3, r3, #9
 800962a:	d4ca      	bmi.n	80095c2 <UART_CheckIdleState+0x1e>
 800962c:	e00d      	b.n	800964a <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800962e:	681a      	ldr	r2, [r3, #0]
 8009630:	0750      	lsls	r0, r2, #29
 8009632:	d507      	bpl.n	8009644 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009634:	69da      	ldr	r2, [r3, #28]
 8009636:	0711      	lsls	r1, r2, #28
 8009638:	f100 8082 	bmi.w	8009740 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800963c:	69da      	ldr	r2, [r3, #28]
 800963e:	0512      	lsls	r2, r2, #20
 8009640:	f100 80ac 	bmi.w	800979c <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009644:	69db      	ldr	r3, [r3, #28]
 8009646:	025b      	lsls	r3, r3, #9
 8009648:	d4bb      	bmi.n	80095c2 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800964a:	f7fc fb91 	bl	8005d70 <HAL_GetTick>
 800964e:	1b43      	subs	r3, r0, r5
 8009650:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009654:	6823      	ldr	r3, [r4, #0]
 8009656:	d3ea      	bcc.n	800962e <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009658:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800965c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009660:	e843 2100 	strex	r1, r2, [r3]
 8009664:	2900      	cmp	r1, #0
 8009666:	d1f7      	bne.n	8009658 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009668:	f103 0208 	add.w	r2, r3, #8
 800966c:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009670:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009674:	f103 0008 	add.w	r0, r3, #8
 8009678:	e840 2100 	strex	r1, r2, [r0]
 800967c:	2900      	cmp	r1, #0
 800967e:	d1f3      	bne.n	8009668 <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8009680:	2320      	movs	r3, #32
 8009682:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8009686:	e7cc      	b.n	8009622 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009688:	2208      	movs	r2, #8
 800968a:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800968c:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009690:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009694:	e843 2100 	strex	r1, r2, [r3]
 8009698:	2900      	cmp	r1, #0
 800969a:	d1f7      	bne.n	800968c <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800969c:	4856      	ldr	r0, [pc, #344]	@ (80097f8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800969e:	f103 0208 	add.w	r2, r3, #8
 80096a2:	e852 2f00 	ldrex	r2, [r2]
 80096a6:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a8:	f103 0508 	add.w	r5, r3, #8
 80096ac:	e845 2100 	strex	r1, r2, [r5]
 80096b0:	2900      	cmp	r1, #0
 80096b2:	d1f4      	bne.n	800969e <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096b4:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80096b6:	2a01      	cmp	r2, #1
 80096b8:	d00b      	beq.n	80096d2 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096ba:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80096bc:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096be:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 80096c0:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80096c4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80096c8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80096cc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 80096d0:	e79c      	b.n	800960c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d2:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096da:	e843 2100 	strex	r1, r2, [r3]
 80096de:	2900      	cmp	r1, #0
 80096e0:	d1f7      	bne.n	80096d2 <UART_CheckIdleState+0x12e>
 80096e2:	e7ea      	b.n	80096ba <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80096e8:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096ea:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80096ee:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	e843 2100 	strex	r1, r2, [r3]
 80096f6:	2900      	cmp	r1, #0
 80096f8:	d1f7      	bne.n	80096ea <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096fa:	483f      	ldr	r0, [pc, #252]	@ (80097f8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	f103 0208 	add.w	r2, r3, #8
 8009700:	e852 2f00 	ldrex	r2, [r2]
 8009704:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009706:	f103 0508 	add.w	r5, r3, #8
 800970a:	e845 2100 	strex	r1, r2, [r5]
 800970e:	2900      	cmp	r1, #0
 8009710:	d1f4      	bne.n	80096fc <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009712:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8009714:	2a01      	cmp	r2, #1
 8009716:	d00a      	beq.n	800972e <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800971a:	2120      	movs	r1, #32
 800971c:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8009720:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009722:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009724:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009728:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 800972c:	e76e      	b.n	800960c <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800972e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009732:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	e843 2100 	strex	r1, r2, [r3]
 800973a:	2900      	cmp	r1, #0
 800973c:	d1f7      	bne.n	800972e <UART_CheckIdleState+0x18a>
 800973e:	e7eb      	b.n	8009718 <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009740:	2208      	movs	r2, #8
 8009742:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009744:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009748:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	e843 2100 	strex	r1, r2, [r3]
 8009750:	2900      	cmp	r1, #0
 8009752:	d1f7      	bne.n	8009744 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009754:	4828      	ldr	r0, [pc, #160]	@ (80097f8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009756:	f103 0208 	add.w	r2, r3, #8
 800975a:	e852 2f00 	ldrex	r2, [r2]
 800975e:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009760:	f103 0508 	add.w	r5, r3, #8
 8009764:	e845 2100 	strex	r1, r2, [r5]
 8009768:	2900      	cmp	r1, #0
 800976a:	d1f4      	bne.n	8009756 <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800976c:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 800976e:	2a01      	cmp	r2, #1
 8009770:	d00b      	beq.n	800978a <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009772:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8009774:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009776:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8009778:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 800977c:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800977e:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8009780:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009784:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8009788:	e766      	b.n	8009658 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800978e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009792:	e843 2100 	strex	r1, r2, [r3]
 8009796:	2900      	cmp	r1, #0
 8009798:	d1f7      	bne.n	800978a <UART_CheckIdleState+0x1e6>
 800979a:	e7ea      	b.n	8009772 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800979c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097a0:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a2:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80097a6:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097aa:	e843 2100 	strex	r1, r2, [r3]
 80097ae:	2900      	cmp	r1, #0
 80097b0:	d1f7      	bne.n	80097a2 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80097b2:	4811      	ldr	r0, [pc, #68]	@ (80097f8 <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b4:	f103 0208 	add.w	r2, r3, #8
 80097b8:	e852 2f00 	ldrex	r2, [r2]
 80097bc:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097be:	f103 0508 	add.w	r5, r3, #8
 80097c2:	e845 2100 	strex	r1, r2, [r5]
 80097c6:	2900      	cmp	r1, #0
 80097c8:	d1f4      	bne.n	80097b4 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ca:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 80097cc:	2a01      	cmp	r2, #1
 80097ce:	d00a      	beq.n	80097e6 <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097d0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80097d2:	2120      	movs	r1, #32
 80097d4:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 80097d8:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097da:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 80097dc:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80097e0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 80097e4:	e738      	b.n	8009658 <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097ea:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ee:	e843 2100 	strex	r1, r2, [r3]
 80097f2:	2900      	cmp	r1, #0
 80097f4:	d1f7      	bne.n	80097e6 <UART_CheckIdleState+0x242>
 80097f6:	e7eb      	b.n	80097d0 <UART_CheckIdleState+0x22c>
 80097f8:	effffffe 	.word	0xeffffffe

080097fc <HAL_UART_Init>:
  if (huart == NULL)
 80097fc:	b380      	cbz	r0, 8009860 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 80097fe:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8009802:	b510      	push	{r4, lr}
 8009804:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8009806:	b333      	cbz	r3, 8009856 <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8009808:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800980a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 800980c:	2324      	movs	r3, #36	@ 0x24
 800980e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	f023 0301 	bic.w	r3, r3, #1
 8009818:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800981a:	b9c1      	cbnz	r1, 800984e <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800981c:	4620      	mov	r0, r4
 800981e:	f7ff fd2d 	bl	800927c <UART_SetConfig>
 8009822:	2801      	cmp	r0, #1
 8009824:	d011      	beq.n	800984a <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009826:	6823      	ldr	r3, [r4, #0]
 8009828:	685a      	ldr	r2, [r3, #4]
 800982a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800982e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009836:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800983e:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8009840:	601a      	str	r2, [r3, #0]
}
 8009842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8009846:	f7ff bead 	b.w	80095a4 <UART_CheckIdleState>
}
 800984a:	2001      	movs	r0, #1
 800984c:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 800984e:	4620      	mov	r0, r4
 8009850:	f7ff fe50 	bl	80094f4 <UART_AdvFeatureConfig>
 8009854:	e7e2      	b.n	800981c <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8009856:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800985a:	f7fc f859 	bl	8005910 <HAL_UART_MspInit>
 800985e:	e7d3      	b.n	8009808 <HAL_UART_Init+0xc>
}
 8009860:	2001      	movs	r0, #1
 8009862:	4770      	bx	lr

08009864 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009864:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8009868:	2b01      	cmp	r3, #1
 800986a:	d017      	beq.n	800989c <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800986c:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800986e:	2324      	movs	r3, #36	@ 0x24
{
 8009870:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8009872:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009876:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009878:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800987a:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 800987c:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009880:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8009884:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009886:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009888:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800988a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800988e:	2220      	movs	r2, #32
 8009890:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8009894:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8009898:	4618      	mov	r0, r3
}
 800989a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800989c:	2002      	movs	r0, #2
}
 800989e:	4770      	bx	lr

080098a0 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80098a0:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 80098a4:	2a01      	cmp	r2, #1
 80098a6:	d037      	beq.n	8009918 <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 80098a8:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098aa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80098ac:	2024      	movs	r0, #36	@ 0x24
{
 80098ae:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 80098b0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098b4:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098b6:	6810      	ldr	r0, [r2, #0]
 80098b8:	f020 0001 	bic.w	r0, r0, #1
 80098bc:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098be:	6890      	ldr	r0, [r2, #8]
 80098c0:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 80098c4:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098c6:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80098c8:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098ca:	b310      	cbz	r0, 8009912 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098cc:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098ce:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 80098d0:	4d12      	ldr	r5, [pc, #72]	@ (800991c <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098d2:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80098d6:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098da:	4911      	ldr	r1, [pc, #68]	@ (8009920 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 80098dc:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098e0:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 80098e4:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 80098e8:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098ec:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098ee:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80098f0:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80098f4:	fbb1 f1f5 	udiv	r1, r1, r5
 80098f8:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 80098fc:	2100      	movs	r1, #0
 80098fe:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009902:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009904:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8009906:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800990a:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 800990c:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8009910:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009912:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009914:	4608      	mov	r0, r1
 8009916:	e7ef      	b.n	80098f8 <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8009918:	2002      	movs	r0, #2
}
 800991a:	4770      	bx	lr
 800991c:	0800ce64 	.word	0x0800ce64
 8009920:	0800ce6c 	.word	0x0800ce6c

08009924 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8009924:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8009928:	2a01      	cmp	r2, #1
 800992a:	d037      	beq.n	800999c <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 800992c:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800992e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8009930:	2024      	movs	r0, #36	@ 0x24
{
 8009932:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8009934:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009938:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800993a:	6810      	ldr	r0, [r2, #0]
 800993c:	f020 0001 	bic.w	r0, r0, #1
 8009940:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009942:	6890      	ldr	r0, [r2, #8]
 8009944:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8009948:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800994a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800994c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800994e:	b310      	cbz	r0, 8009996 <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009950:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009952:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009954:	4d12      	ldr	r5, [pc, #72]	@ (80099a0 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009956:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800995a:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800995e:	4911      	ldr	r1, [pc, #68]	@ (80099a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8009960:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009964:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8009968:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 800996c:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009970:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009972:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009974:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009978:	fbb1 f1f5 	udiv	r1, r1, r5
 800997c:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8009980:	2100      	movs	r1, #0
 8009982:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8009986:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009988:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 800998a:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 800998e:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8009990:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8009994:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8009996:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8009998:	4608      	mov	r0, r1
 800999a:	e7ef      	b.n	800997c <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 800999c:	2002      	movs	r0, #2
}
 800999e:	4770      	bx	lr
 80099a0:	0800ce64 	.word	0x0800ce64
 80099a4:	0800ce6c 	.word	0x0800ce6c

080099a8 <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 80099a8:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 80099aa:	8840      	ldrh	r0, [r0, #2]
 80099ac:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80099b0:	0c00      	lsrs	r0, r0, #16
 80099b2:	4770      	bx	lr

080099b4 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80099b4:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80099b6:	8803      	ldrh	r3, [r0, #0]
 80099b8:	140d      	asrs	r5, r1, #16
 80099ba:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80099bc:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 80099c0:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 80099c4:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 80099c8:	428b      	cmp	r3, r1
{
 80099ca:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 80099cc:	da0f      	bge.n	80099ee <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80099ce:	8846      	ldrh	r6, [r0, #2]
 80099d0:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80099d4:	4282      	cmp	r2, r0
 80099d6:	dd13      	ble.n	8009a00 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80099d8:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80099da:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80099de:	bfb8      	it	lt
 80099e0:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80099e2:	f7f9 f861 	bl	8002aa8 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80099e6:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 80099e8:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 80099ea:	db0e      	blt.n	8009a0a <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 80099ec:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 80099ee:	b2a4      	uxth	r4, r4
 80099f0:	2000      	movs	r0, #0
 80099f2:	f364 000f 	bfi	r0, r4, #0, #16
 80099f6:	b2ad      	uxth	r5, r5
 80099f8:	f365 401f 	bfi	r0, r5, #16, #16
}
 80099fc:	b004      	add	sp, #16
 80099fe:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8009a00:	1a98      	subs	r0, r3, r2
 8009a02:	f7f9 f851 	bl	8002aa8 <MCM_Sqrt>
        if (Vqd.q < 0)
 8009a06:	2c00      	cmp	r4, #0
 8009a08:	daf0      	bge.n	80099ec <Circle_Limitation+0x38>
          new_q = - new_q;
 8009a0a:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8009a0c:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8009a0e:	e7ee      	b.n	80099ee <Circle_Limitation+0x3a>

08009a10 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8009a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009a12:	7fc3      	ldrb	r3, [r0, #31]
 8009a14:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8009a18:	429a      	cmp	r2, r3
{
 8009a1a:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8009a1c:	d002      	beq.n	8009a24 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8009a1e:	3301      	adds	r3, #1
 8009a20:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8009a24:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8009a26:	2300      	movs	r3, #0
 8009a28:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8009a2a:	2d00      	cmp	r5, #0
 8009a2c:	d02f      	beq.n	8009a8e <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009a2e:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009a30:	8ba2      	ldrh	r2, [r4, #28]
 8009a32:	42aa      	cmp	r2, r5
 8009a34:	d31a      	bcc.n	8009a6c <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009a36:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009a3a:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009a3c:	2e00      	cmp	r6, #0
 8009a3e:	d07a      	beq.n	8009b36 <MCPA_dataLog+0x126>
 8009a40:	68a2      	ldr	r2, [r4, #8]
 8009a42:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8009a46:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 8009a48:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009a4c:	8800      	ldrh	r0, [r0, #0]
 8009a4e:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009a52:	8b25      	ldrh	r5, [r4, #24]
 8009a54:	3502      	adds	r5, #2
 8009a56:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009a58:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009a5a:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009a5c:	d1f4      	bne.n	8009a48 <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 8009a5e:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009a62:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8009a64:	2bfd      	cmp	r3, #253	@ 0xfd
 8009a66:	d96b      	bls.n	8009b40 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009a68:	4295      	cmp	r5, r2
 8009a6a:	d9da      	bls.n	8009a22 <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8009a6c:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009a70:	2bfe      	cmp	r3, #254	@ 0xfe
 8009a72:	d04a      	beq.n	8009b0a <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009a74:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8009a78:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 8009a7a:	8b22      	ldrh	r2, [r4, #24]
 8009a7c:	6820      	ldr	r0, [r4, #0]
 8009a7e:	3202      	adds	r2, #2
 8009a80:	2309      	movs	r3, #9
 8009a82:	6845      	ldr	r5, [r0, #4]
 8009a84:	b292      	uxth	r2, r2
 8009a86:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8009a88:	2300      	movs	r3, #0
 8009a8a:	8323      	strh	r3, [r4, #24]
}
 8009a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009a8e:	4601      	mov	r1, r0
 8009a90:	2209      	movs	r2, #9
 8009a92:	f851 0b14 	ldr.w	r0, [r1], #20
 8009a96:	6803      	ldr	r3, [r0, #0]
 8009a98:	4798      	blx	r3
 8009a9a:	b390      	cbz	r0, 8009b02 <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8009b88 <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8009a9e:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009aa4:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 8009aa8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8009aac:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8009ab0:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8009ab2:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8009ab4:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009ab6:	d101      	bne.n	8009abc <MCPA_dataLog+0xac>
 8009ab8:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009aba:	e7b9      	b.n	8009a30 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009abc:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009ac0:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009ac4:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009ac8:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009acc:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009ad0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 8009ad4:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009ad6:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 8009ad8:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009adc:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8009ae0:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009ae2:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8009ae6:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 8009ae8:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 8009aec:	f002 f844 	bl	800bb78 <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 8009af0:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 8009af4:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 8009af8:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8009afc:	441a      	add	r2, r3
 8009afe:	f002 f83b 	bl	800bb78 <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009b02:	8b25      	ldrh	r5, [r4, #24]
 8009b04:	2d00      	cmp	r5, #0
 8009b06:	d192      	bne.n	8009a2e <MCPA_dataLog+0x1e>
}
 8009b08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b0a:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8009b0e:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 8009b12:	4418      	add	r0, r3
 8009b14:	4283      	cmp	r3, r0
 8009b16:	daad      	bge.n	8009a74 <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009b18:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009b1a:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009b1c:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8009b20:	6812      	ldr	r2, [r2, #0]
 8009b22:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b24:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009b26:	5cf3      	ldrb	r3, [r6, r3]
 8009b28:	442b      	add	r3, r5
 8009b2a:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b2c:	b2d3      	uxtb	r3, r2
 8009b2e:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009b30:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b32:	dbf3      	blt.n	8009b1c <MCPA_dataLog+0x10c>
 8009b34:	e79e      	b.n	8009a74 <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 8009b36:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009b3a:	2bfd      	cmp	r3, #253	@ 0xfd
 8009b3c:	f63f af71 	bhi.w	8009a22 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009b40:	f894 0020 	ldrb.w	r0, [r4, #32]
 8009b44:	4298      	cmp	r0, r3
 8009b46:	d005      	beq.n	8009b54 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009b4e:	42aa      	cmp	r2, r5
 8009b50:	d390      	bcc.n	8009a74 <MCPA_dataLog+0x64>
}
 8009b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b54:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 8009b58:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8009b5a:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b5c:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 8009b5e:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b62:	daf4      	bge.n	8009b4e <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009b64:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009b68:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009b6c:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009b74:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b78:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009b7a:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b7c:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009b7e:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b80:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009b82:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009b84:	dbf2      	blt.n	8009b6c <MCPA_dataLog+0x15c>
 8009b86:	e76f      	b.n	8009a68 <MCPA_dataLog+0x58>
 8009b88:	20001c20 	.word	0x20001c20

08009b8c <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8009b8c:	8b03      	ldrh	r3, [r0, #24]
 8009b8e:	b19b      	cbz	r3, 8009bb8 <MCPA_flushDataLog+0x2c>
{
 8009b90:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8009b92:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009b96:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8009b98:	2afe      	cmp	r2, #254	@ 0xfe
 8009b9a:	4604      	mov	r4, r0
 8009b9c:	d00d      	beq.n	8009bba <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009b9e:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009ba2:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009ba4:	8b22      	ldrh	r2, [r4, #24]
 8009ba6:	6820      	ldr	r0, [r4, #0]
 8009ba8:	3202      	adds	r2, #2
 8009baa:	2309      	movs	r3, #9
 8009bac:	6845      	ldr	r5, [r0, #4]
 8009bae:	b292      	uxth	r2, r2
 8009bb0:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8009bb2:	2300      	movs	r3, #0
 8009bb4:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8009bb6:	bd70      	pop	{r4, r5, r6, pc}
 8009bb8:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009bba:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8009bbe:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8009bc2:	4494      	add	ip, r2
 8009bc4:	4562      	cmp	r2, ip
 8009bc6:	daea      	bge.n	8009b9e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009bc8:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009bca:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009bcc:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8009bd0:	6800      	ldr	r0, [r0, #0]
 8009bd2:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009bd4:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009bd6:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009bd8:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009bda:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009bdc:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009bde:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009be0:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009be2:	dbf3      	blt.n	8009bcc <MCPA_flushDataLog+0x40>
 8009be4:	e7db      	b.n	8009b9e <MCPA_flushDataLog+0x12>
 8009be6:	bf00      	nop

08009be8 <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8009be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009bec:	880f      	ldrh	r7, [r1, #0]
{
 8009bee:	4604      	mov	r4, r0

    if (buffSize == 0U)
 8009bf0:	2f00      	cmp	r7, #0
 8009bf2:	d046      	beq.n	8009c82 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 8009bf4:	6803      	ldr	r3, [r0, #0]
 8009bf6:	89db      	ldrh	r3, [r3, #14]
 8009bf8:	42bb      	cmp	r3, r7
 8009bfa:	d33f      	bcc.n	8009c7c <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8009bfc:	788b      	ldrb	r3, [r1, #2]
 8009bfe:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8009c02:	f891 8003 	ldrb.w	r8, [r1, #3]
 8009c06:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8009c0a:	790b      	ldrb	r3, [r1, #4]
 8009c0c:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009c10:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009c12:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 8009c14:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 8009c18:	4443      	add	r3, r8
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	dc57      	bgt.n	8009cce <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 8009c1e:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d057      	beq.n	8009cd4 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009c24:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009c28:	4645      	mov	r5, r8
 8009c2a:	e011      	b.n	8009c50 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009c2c:	68e3      	ldr	r3, [r4, #12]
 8009c2e:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009c30:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009c32:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009c36:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 8009c3a:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009c3c:	f105 0c01 	add.w	ip, r5, #1
 8009c40:	fa5f f58c 	uxtb.w	r5, ip
 8009c44:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 8009c46:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009c48:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 8009c4a:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009c4e:	da11      	bge.n	8009c74 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009c50:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8009c54:	6861      	ldr	r1, [r4, #4]
 8009c56:	4648      	mov	r0, r9
 8009c58:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009c5c:	f7fa ffb4 	bl	8004bc8 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009c60:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009c64:	42ab      	cmp	r3, r5
 8009c66:	f04f 0002 	mov.w	r0, #2
 8009c6a:	d8df      	bhi.n	8009c2c <MCPA_cfgLog+0x44>
 8009c6c:	4648      	mov	r0, r9
 8009c6e:	f7fa ff9f 	bl	8004bb0 <RI_GetIDSize>
 8009c72:	e7db      	b.n	8009c2c <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8009c74:	f108 0206 	add.w	r2, r8, #6
 8009c78:	4297      	cmp	r7, r2
 8009c7a:	d210      	bcs.n	8009c9e <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8009c7c:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8009c7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8009c82:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8009c84:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 8009c88:	b9ab      	cbnz	r3, 8009cb6 <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8009c8e:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8009c92:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8009c94:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 8009c98:	2000      	movs	r0, #0
}
 8009c9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8009c9e:	3f02      	subs	r7, #2
 8009ca0:	eba7 0708 	sub.w	r7, r7, r8
 8009ca4:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 8009ca6:	7833      	ldrb	r3, [r6, #0]
 8009ca8:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d1f3      	bne.n	8009c98 <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009cb0:	8b23      	ldrh	r3, [r4, #24]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d0e9      	beq.n	8009c8a <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009cb6:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009cb8:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009cbc:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009cbe:	8b22      	ldrh	r2, [r4, #24]
 8009cc0:	6820      	ldr	r0, [r4, #0]
 8009cc2:	3202      	adds	r2, #2
 8009cc4:	6845      	ldr	r5, [r0, #4]
 8009cc6:	b292      	uxth	r2, r2
 8009cc8:	2309      	movs	r3, #9
 8009cca:	47a8      	blx	r5
 8009ccc:	e7dd      	b.n	8009c8a <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 8009cce:	200a      	movs	r0, #10
}
 8009cd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009cd4:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 8009cd6:	4698      	mov	r8, r3
 8009cd8:	e7ce      	b.n	8009c78 <MCPA_cfgLog+0x90>
 8009cda:	bf00      	nop

08009cdc <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 8009cdc:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009ce0:	8843      	ldrh	r3, [r0, #2]
 8009ce2:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 8009ce4:	2900      	cmp	r1, #0
 8009ce6:	dd08      	ble.n	8009cfa <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d804      	bhi.n	8009cf6 <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8009cec:	89c2      	ldrh	r2, [r0, #14]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d908      	bls.n	8009d04 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 8009cf2:	2000      	movs	r0, #0
 8009cf4:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 8009cf6:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 8009cf8:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d3fb      	bcc.n	8009cf6 <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 8009cfe:	89c2      	ldrh	r2, [r0, #14]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d3f6      	bcc.n	8009cf2 <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 8009d04:	8900      	ldrh	r0, [r0, #8]
 8009d06:	4770      	bx	lr

08009d08 <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009d08:	7803      	ldrb	r3, [r0, #0]
 8009d0a:	b94b      	cbnz	r3, 8009d20 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 8009d0c:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfcc      	ite	gt
 8009d14:	2300      	movgt	r3, #0
 8009d16:	2301      	movle	r3, #1
 8009d18:	425b      	negs	r3, r3
 8009d1a:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 8009d1c:	8043      	strh	r3, [r0, #2]
}
 8009d1e:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8009d20:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 8009d22:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 8009d24:	2200      	movs	r2, #0
 8009d26:	8102      	strh	r2, [r0, #8]
}
 8009d28:	4770      	bx	lr
 8009d2a:	bf00      	nop

08009d2c <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8009d2c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009d2e:	7803      	ldrb	r3, [r0, #0]
{
 8009d30:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8009d32:	b983      	cbnz	r3, 8009d56 <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8009d34:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	d007      	beq.n	8009d4c <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009d3c:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8009d3e:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009d40:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8009d42:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8009d46:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8009d4a:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f7ff ffc5 	bl	8009cdc <NTC_SetFaultState>
 8009d52:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009d54:	bd10      	pop	{r4, pc}
 8009d56:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009d58:	8120      	strh	r0, [r4, #8]
}
 8009d5a:	bd10      	pop	{r4, pc}

08009d5c <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8009d5c:	7803      	ldrb	r3, [r0, #0]
 8009d5e:	b95b      	cbnz	r3, 8009d78 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8009d60:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8009d62:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8009d64:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009d68:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 8009d6a:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8009d6c:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009d70:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009d74:	b200      	sxth	r0, r0
 8009d76:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8009d78:	88c0      	ldrh	r0, [r0, #6]
}
 8009d7a:	b200      	sxth	r0, r0
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop

08009d80 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8009d80:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009d82:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009d84:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009d86:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009d88:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 8009d8a:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8009d8c:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009d8e:	4770      	bx	lr

08009d90 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8009d90:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009d92:	4770      	bx	lr

08009d94 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8009d94:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009d96:	4770      	bx	lr

08009d98 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8009d98:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop

08009da0 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8009da0:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009da4:	4770      	bx	lr
 8009da6:	bf00      	nop

08009da8 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8009da8:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8009daa:	4770      	bx	lr

08009dac <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8009dac:	8b80      	ldrh	r0, [r0, #28]
 8009dae:	4770      	bx	lr

08009db0 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009db0:	2301      	movs	r3, #1
 8009db2:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009db4:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009db6:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009db8:	4770      	bx	lr
 8009dba:	bf00      	nop

08009dbc <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8009dbc:	8b40      	ldrh	r0, [r0, #26]
 8009dbe:	4770      	bx	lr

08009dc0 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8009dc0:	8bc0      	ldrh	r0, [r0, #30]
 8009dc2:	4770      	bx	lr

08009dc4 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8009dc4:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009dc6:	4770      	bx	lr

08009dc8 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8009dc8:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009dca:	4770      	bx	lr

08009dcc <PID_SetKIDivisorPOW2>:
{
 8009dcc:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009dce:	2301      	movs	r3, #1
{
 8009dd0:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8009dd2:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009dd4:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8009dd8:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8009dda:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009ddc:	40a1      	lsls	r1, r4
{
 8009dde:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8009de0:	f7ff fff2 	bl	8009dc8 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8009de4:	4902      	ldr	r1, [pc, #8]	@ (8009df0 <PID_SetKIDivisorPOW2+0x24>)
 8009de6:	4628      	mov	r0, r5
 8009de8:	40a1      	lsls	r1, r4
 8009dea:	f7ff ffeb 	bl	8009dc4 <PID_SetLowerIntegralTermLimit>
}
 8009dee:	bd38      	pop	{r3, r4, r5, pc}
 8009df0:	ffff8001 	.word	0xffff8001

08009df4 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8009df4:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009df6:	4770      	bx	lr

08009df8 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8009df8:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 8009dfc:	4770      	bx	lr
 8009dfe:	bf00      	nop

08009e00 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8009e00:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 8009e02:	4770      	bx	lr

08009e04 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009e04:	2301      	movs	r3, #1
 8009e06:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8009e08:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8009e0a:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009e0c:	4770      	bx	lr
 8009e0e:	bf00      	nop

08009e10 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009e10:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 8009e14:	4603      	mov	r3, r0
 8009e16:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8009e18:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8009e1c:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8009e20:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8009e24:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 8009e28:	b17c      	cbz	r4, 8009e4a <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8009e2a:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009e2e:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8009e32:	eb15 0e01 	adds.w	lr, r5, r1
 8009e36:	d41d      	bmi.n	8009e74 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 8009e38:	420d      	tst	r5, r1
 8009e3a:	4914      	ldr	r1, [pc, #80]	@ (8009e8c <PI_Controller+0x7c>)
 8009e3c:	bf48      	it	mi
 8009e3e:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009e40:	45a6      	cmp	lr, r4
 8009e42:	dc02      	bgt.n	8009e4a <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009e44:	691c      	ldr	r4, [r3, #16]
 8009e46:	4574      	cmp	r4, lr
 8009e48:	dd1d      	ble.n	8009e86 <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8009e4a:	8b99      	ldrh	r1, [r3, #28]
 8009e4c:	410a      	asrs	r2, r1
 8009e4e:	8bd9      	ldrh	r1, [r3, #30]
 8009e50:	fa44 f101 	asr.w	r1, r4, r1
 8009e54:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8009e56:	4290      	cmp	r0, r2
 8009e58:	da03      	bge.n	8009e62 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8009e5a:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8009e5c:	4414      	add	r4, r2
 8009e5e:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009e60:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8009e62:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8009e64:	bfc5      	ittet	gt
 8009e66:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 8009e6a:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8009e6c:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8009e6e:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8009e70:	609c      	str	r4, [r3, #8]
}
 8009e72:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8009e74:	2d00      	cmp	r5, #0
 8009e76:	dde3      	ble.n	8009e40 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 8009e78:	2900      	cmp	r1, #0
 8009e7a:	dde1      	ble.n	8009e40 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009e7c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009e80:	428c      	cmp	r4, r1
 8009e82:	d1e2      	bne.n	8009e4a <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8009e84:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 8009e86:	4674      	mov	r4, lr
 8009e88:	e7df      	b.n	8009e4a <PI_Controller+0x3a>
 8009e8a:	bf00      	nop
 8009e8c:	80000001 	.word	0x80000001

08009e90 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009e90:	6882      	ldr	r2, [r0, #8]
{
 8009e92:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009e94:	89d1      	ldrh	r1, [r2, #14]
 8009e96:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8009e9a:	8993      	ldrh	r3, [r2, #12]
 8009e9c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009ea0:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8009ea4:	fb13 230c 	smlabb	r3, r3, ip, r2
 8009ea8:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009eaa:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8009eae:	bfbc      	itt	lt
 8009eb0:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009eb4:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 8009eb6:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 8009eba:	bf48      	it	mi
 8009ebc:	330f      	addmi	r3, #15
 8009ebe:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8009ec2:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8009ec4:	f85d fb04 	ldr.w	pc, [sp], #4

08009ec8 <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 8009ec8:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009eca:	f9b0 3000 	ldrsh.w	r3, [r0]
 8009ece:	ee07 3a90 	vmov	s15, r3
{
 8009ed2:	ed2d 8b02 	vpush	{d8}
 8009ed6:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009ed8:	68c0      	ldr	r0, [r0, #12]
 8009eda:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8009ede:	f7ff fd63 	bl	80099a8 <VBS_GetAvBusVoltage_V>
 8009ee2:	edd4 7a01 	vldr	s15, [r4, #4]
 8009ee6:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 8009eea:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 8009eee:	ee00 0a10 	vmov	s0, r0
 8009ef2:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8009ef6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009efa:	bd10      	pop	{r4, pc}

08009efc <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009efc:	6883      	ldr	r3, [r0, #8]
 8009efe:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8009f02:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 8009f06:	b082      	sub	sp, #8
 8009f08:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8009f0a:	6883      	ldr	r3, [r0, #8]
 8009f0c:	00d9      	lsls	r1, r3, #3
 8009f0e:	d418      	bmi.n	8009f42 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 8009f10:	4b26      	ldr	r3, [pc, #152]	@ (8009fac <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 8009f12:	6882      	ldr	r2, [r0, #8]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4926      	ldr	r1, [pc, #152]	@ (8009fb0 <R3_2_ADCxInit+0xb4>)
 8009f18:	099b      	lsrs	r3, r3, #6
 8009f1a:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 8009f1e:	fba1 1303 	umull	r1, r3, r1, r3
 8009f22:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8009f26:	099b      	lsrs	r3, r3, #6
 8009f28:	005b      	lsls	r3, r3, #1
 8009f2a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009f2e:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8009f30:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009f32:	9b01      	ldr	r3, [sp, #4]
 8009f34:	b12b      	cbz	r3, 8009f42 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 8009f36:	9b01      	ldr	r3, [sp, #4]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009f3c:	9b01      	ldr	r3, [sp, #4]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1f9      	bne.n	8009f36 <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8009f42:	6883      	ldr	r3, [r0, #8]
 8009f44:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009f48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009f4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009f50:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009f52:	6883      	ldr	r3, [r0, #8]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	dbfc      	blt.n	8009f52 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009f58:	6803      	ldr	r3, [r0, #0]
 8009f5a:	07da      	lsls	r2, r3, #31
 8009f5c:	d408      	bmi.n	8009f70 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8009f5e:	4a15      	ldr	r2, [pc, #84]	@ (8009fb4 <R3_2_ADCxInit+0xb8>)
 8009f60:	6883      	ldr	r3, [r0, #8]
 8009f62:	4013      	ands	r3, r2
 8009f64:	f043 0301 	orr.w	r3, r3, #1
 8009f68:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8009f6a:	6803      	ldr	r3, [r0, #0]
 8009f6c:	07db      	lsls	r3, r3, #31
 8009f6e:	d5f7      	bpl.n	8009f60 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8009f70:	6883      	ldr	r3, [r0, #8]
 8009f72:	4a10      	ldr	r2, [pc, #64]	@ (8009fb4 <R3_2_ADCxInit+0xb8>)
 8009f74:	4013      	ands	r3, r2
 8009f76:	f043 0308 	orr.w	r3, r3, #8
 8009f7a:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8009f7c:	6883      	ldr	r3, [r0, #8]
 8009f7e:	4013      	ands	r3, r2
 8009f80:	f043 0320 	orr.w	r3, r3, #32
 8009f84:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 8009f86:	68c3      	ldr	r3, [r0, #12]
 8009f88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009f8c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009f90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009f94:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8009f96:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8009f98:	f023 030f 	bic.w	r3, r3, #15
 8009f9c:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 8009f9e:	6883      	ldr	r3, [r0, #8]
 8009fa0:	4013      	ands	r3, r2
 8009fa2:	f043 0304 	orr.w	r3, r3, #4
 8009fa6:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 8009fa8:	b002      	add	sp, #8
 8009faa:	4770      	bx	lr
 8009fac:	200004f0 	.word	0x200004f0
 8009fb0:	053e2d63 	.word	0x053e2d63
 8009fb4:	7fffffc0 	.word	0x7fffffc0

08009fb8 <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009fb8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8009fbc:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 8009fc0:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009fc2:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009fc4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8009fc8:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8009fca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009fcc:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 8009fd0:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009fd4:	6863      	ldr	r3, [r4, #4]
 8009fd6:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009fda:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009fde:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 8009fe0:	2a05      	cmp	r2, #5
 8009fe2:	f200 809d 	bhi.w	800a120 <R3_2_GetPhaseCurrents+0x168>
 8009fe6:	e8df f002 	tbb	[pc, r2]
 8009fea:	1d37      	.short	0x1d37
 8009fec:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009ff0:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 8009ff4:	4a4e      	ldr	r2, [pc, #312]	@ (800a130 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 8009ff6:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 8009ff8:	4293      	cmp	r3, r2
 8009ffa:	db58      	blt.n	800a0ae <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 8009ffc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a000:	f280 8087 	bge.w	800a112 <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 800a004:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a008:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 800a00c:	4d48      	ldr	r5, [pc, #288]	@ (800a130 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 800a00e:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 800a012:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 800a014:	42aa      	cmp	r2, r5
 800a016:	da5b      	bge.n	800a0d0 <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 800a018:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a01a:	fa1f f38c 	uxth.w	r3, ip
 800a01e:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a022:	e030      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a024:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 800a028:	4b41      	ldr	r3, [pc, #260]	@ (800a130 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 800a02a:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a02c:	429c      	cmp	r4, r3
 800a02e:	db39      	blt.n	800a0a4 <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 800a030:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a034:	da62      	bge.n	800a0fc <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 800a036:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a03a:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a03c:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 800a040:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a044:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800a046:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800a048:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a04c:	db39      	blt.n	800a0c2 <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 800a04e:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a052:	804a      	strh	r2, [r1, #2]
 800a054:	4615      	mov	r5, r2
 800a056:	e016      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a058:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 800a05c:	4b34      	ldr	r3, [pc, #208]	@ (800a130 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800a05e:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 800a060:	429c      	cmp	r4, r3
 800a062:	db1a      	blt.n	800a09a <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 800a064:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800a068:	da3d      	bge.n	800a0e6 <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 800a06a:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a06c:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a06e:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 800a072:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 800a074:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 800a076:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 800a078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a07c:	db19      	blt.n	800a0b2 <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 800a07e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a082:	800b      	strh	r3, [r1, #0]
 800a084:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a086:	4413      	add	r3, r2
 800a088:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800a08a:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 800a08e:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a092:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a094:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 800a098:	4770      	bx	lr
 800a09a:	461c      	mov	r4, r3
 800a09c:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a0a0:	461d      	mov	r5, r3
 800a0a2:	e7e4      	b.n	800a06e <R3_2_GetPhaseCurrents+0xb6>
 800a0a4:	461c      	mov	r4, r3
 800a0a6:	46a4      	mov	ip, r4
 800a0a8:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a0ac:	e7c6      	b.n	800a03c <R3_2_GetPhaseCurrents+0x84>
 800a0ae:	4694      	mov	ip, r2
 800a0b0:	e7aa      	b.n	800a008 <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 800a0b2:	4c1f      	ldr	r4, [pc, #124]	@ (800a130 <R3_2_GetPhaseCurrents+0x178>)
 800a0b4:	42a3      	cmp	r3, r4
 800a0b6:	da26      	bge.n	800a106 <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 800a0b8:	800c      	strh	r4, [r1, #0]
 800a0ba:	f248 0301 	movw	r3, #32769	@ 0x8001
 800a0be:	46a4      	mov	ip, r4
 800a0c0:	e7e1      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 800a0c2:	4d1b      	ldr	r5, [pc, #108]	@ (800a130 <R3_2_GetPhaseCurrents+0x178>)
 800a0c4:	42aa      	cmp	r2, r5
 800a0c6:	da27      	bge.n	800a118 <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 800a0c8:	804d      	strh	r5, [r1, #2]
 800a0ca:	f248 0201 	movw	r2, #32769	@ 0x8001
 800a0ce:	e7da      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 800a0d0:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800a0d4:	db0c      	blt.n	800a0f0 <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 800a0d6:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a0da:	461a      	mov	r2, r3
 800a0dc:	804b      	strh	r3, [r1, #2]
 800a0de:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a0e0:	fa1f f38c 	uxth.w	r3, ip
 800a0e4:	e7cf      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
 800a0e6:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 800a0ea:	4614      	mov	r4, r2
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	e7be      	b.n	800a06e <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 800a0f0:	b215      	sxth	r5, r2
 800a0f2:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a0f4:	fa1f f38c 	uxth.w	r3, ip
 800a0f8:	b292      	uxth	r2, r2
 800a0fa:	e7c4      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
 800a0fc:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 800a100:	461c      	mov	r4, r3
 800a102:	469c      	mov	ip, r3
 800a104:	e79a      	b.n	800a03c <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 800a106:	fa0f fc83 	sxth.w	ip, r3
 800a10a:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a10e:	b29b      	uxth	r3, r3
 800a110:	e7b9      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
 800a112:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 800a116:	e777      	b.n	800a008 <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 800a118:	b215      	sxth	r5, r2
 800a11a:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a11c:	b292      	uxth	r2, r2
 800a11e:	e7b2      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 800a120:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 800a124:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800a128:	880b      	ldrh	r3, [r1, #0]
 800a12a:	884a      	ldrh	r2, [r1, #2]
 800a12c:	e7ab      	b.n	800a086 <R3_2_GetPhaseCurrents+0xce>
 800a12e:	bf00      	nop
 800a130:	ffff8001 	.word	0xffff8001

0800a134 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 800a134:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a136:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800a13a:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a13e:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a142:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a146:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a148:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a14c:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a14e:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a150:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a154:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a158:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800a15a:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a15c:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a15e:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a160:	4904      	ldr	r1, [pc, #16]	@ (800a174 <R3_2_SetADCSampPointPolarization+0x40>)
 800a162:	685b      	ldr	r3, [r3, #4]
}
 800a164:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a168:	420b      	tst	r3, r1
}
 800a16a:	bf14      	ite	ne
 800a16c:	2001      	movne	r0, #1
 800a16e:	2000      	moveq	r0, #0
 800a170:	4770      	bx	lr
 800a172:	bf00      	nop
 800a174:	02000070 	.word	0x02000070

0800a178 <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 800a178:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a17a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a17e:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 800a182:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a184:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800a188:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a18a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 800a18c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a190:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a194:	6853      	ldr	r3, [r2, #4]
 800a196:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a19a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a19e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a1a0:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a1a4:	2b0f      	cmp	r3, #15
 800a1a6:	d80d      	bhi.n	800a1c4 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a1a8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a1ac:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 800a1b0:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 800a1b2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a1b6:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800a1b8:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800a1ba:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 800a1be:	b2db      	uxtb	r3, r3
 800a1c0:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a1c4:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a1c6:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800a1c8:	600b      	str	r3, [r1, #0]
}
 800a1ca:	4770      	bx	lr

0800a1cc <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a1cc:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 800a1d0:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a1d2:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a1d4:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a1d8:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800a1da:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a1de:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 800a1e2:	6853      	ldr	r3, [r2, #4]
 800a1e4:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a1e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a1ec:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 800a1ee:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 800a1f2:	2b0f      	cmp	r3, #15
 800a1f4:	d80a      	bhi.n	800a20c <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 800a1f6:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a1fa:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a1fe:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a200:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 800a202:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 800a204:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 800a208:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 800a20c:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a20e:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 800a212:	600b      	str	r3, [r1, #0]
}
 800a214:	4770      	bx	lr
 800a216:	bf00      	nop

0800a218 <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a218:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a21c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a220:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a222:	f04f 0c01 	mov.w	ip, #1
{
 800a226:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 800a228:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a22c:	f04f 0e00 	mov.w	lr, #0
 800a230:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 800a234:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800a238:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a23a:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a23c:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a23e:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a240:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a244:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a246:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a248:	691a      	ldr	r2, [r3, #16]
 800a24a:	07d2      	lsls	r2, r2, #31
 800a24c:	d5fc      	bpl.n	800a248 <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a24e:	f06f 0201 	mvn.w	r2, #1
 800a252:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800a254:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a256:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a25a:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a25c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a25e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a262:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a264:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a268:	2a02      	cmp	r2, #2
 800a26a:	d007      	beq.n	800a27c <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a26c:	f06f 0201 	mvn.w	r2, #1
 800a270:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a272:	68da      	ldr	r2, [r3, #12]
 800a274:	f042 0201 	orr.w	r2, r2, #1
 800a278:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800a27a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a27c:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a27e:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 800a280:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a284:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800a286:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a28a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800a28c:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 800a290:	f240 5255 	movw	r2, #1365	@ 0x555
 800a294:	4211      	tst	r1, r2
 800a296:	d004      	beq.n	800a2a2 <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a298:	f8c7 c018 	str.w	ip, [r7, #24]
 800a29c:	61ae      	str	r6, [r5, #24]
 800a29e:	61a0      	str	r0, [r4, #24]
}
 800a2a0:	e7e4      	b.n	800a26c <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 800a2a2:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 800a2a6:	62ae      	str	r6, [r5, #40]	@ 0x28
 800a2a8:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800a2aa:	e7df      	b.n	800a26c <R3_2_SwitchOnPWM+0x54>

0800a2ac <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2ac:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 800a2b0:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2b4:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a2b6:	68da      	ldr	r2, [r3, #12]
 800a2b8:	f022 0201 	bic.w	r2, r2, #1
 800a2bc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a2be:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 800a2c0:	f04f 0c00 	mov.w	ip, #0
 800a2c4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a2c8:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800a2cc:	645a      	str	r2, [r3, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 800a2ce:	b919      	cbnz	r1, 800a2d8 <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a2d0:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a2d4:	2a02      	cmp	r2, #2
 800a2d6:	d00c      	beq.n	800a2f2 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a2d8:	f06f 0201 	mvn.w	r2, #1
 800a2dc:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a2de:	691a      	ldr	r2, [r3, #16]
 800a2e0:	07d2      	lsls	r2, r2, #31
 800a2e2:	d5fc      	bpl.n	800a2de <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a2e4:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	6119      	str	r1, [r3, #16]
 800a2ec:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
 800a2f0:	4770      	bx	lr
{
 800a2f2:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a2f4:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a2f8:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a2fc:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 800a2fe:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a300:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800a304:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a306:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800a30a:	6291      	str	r1, [r2, #40]	@ 0x28
 800a30c:	f06f 0201 	mvn.w	r2, #1
 800a310:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a312:	691a      	ldr	r2, [r3, #16]
 800a314:	07d1      	lsls	r1, r2, #31
 800a316:	d5fc      	bpl.n	800a312 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a318:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 800a31c:	2200      	movs	r2, #0
 800a31e:	6119      	str	r1, [r3, #16]
}
 800a320:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 800a322:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
}
 800a326:	4770      	bx	lr

0800a328 <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 800a328:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a32a:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 800a32e:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a330:	6853      	ldr	r3, [r2, #4]
 800a332:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a33a:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a33c:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a340:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 800a344:	480c      	ldr	r0, [pc, #48]	@ (800a378 <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800a346:	3214      	adds	r2, #20
 800a348:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 800a34c:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 800a350:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 800a354:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 800a356:	4293      	cmp	r3, r2
 800a358:	bfa8      	it	ge
 800a35a:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 800a35c:	4283      	cmp	r3, r0
 800a35e:	bfb8      	it	lt
 800a360:	4603      	movlt	r3, r0
 800a362:	b21b      	sxth	r3, r3
 800a364:	2200      	movs	r2, #0
 800a366:	f363 020f 	bfi	r2, r3, #0, #16
 800a36a:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a36e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 800a372:	600a      	str	r2, [r1, #0]
}
 800a374:	4770      	bx	lr
 800a376:	bf00      	nop
 800a378:	ffff8001 	.word	0xffff8001

0800a37c <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a37c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 800a380:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a384:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a386:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a388:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 800a38a:	2201      	movs	r2, #1
 800a38c:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a390:	f06f 0201 	mvn.w	r2, #1
 800a394:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a396:	691a      	ldr	r2, [r3, #16]
 800a398:	07d5      	lsls	r5, r2, #31
 800a39a:	d5fc      	bpl.n	800a396 <R3_2_RLSwitchOnPWM+0x1a>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a39c:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3a0:	f06f 0601 	mvn.w	r6, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a3a4:	2501      	movs	r5, #1
 800a3a6:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a3a8:	611e      	str	r6, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a3aa:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a3ac:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a3ae:	691a      	ldr	r2, [r3, #16]
 800a3b0:	07d2      	lsls	r2, r2, #31
 800a3b2:	d5fc      	bpl.n	800a3ae <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a3b4:	68da      	ldr	r2, [r3, #12]
 800a3b6:	f042 0201 	orr.w	r2, r2, #1
 800a3ba:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a3bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3be:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a3c2:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a3c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a3ca:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a3cc:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a3d0:	2a02      	cmp	r2, #2
 800a3d2:	d00f      	beq.n	800a3f4 <R3_2_RLSwitchOnPWM+0x78>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 800a3d4:	2303      	movs	r3, #3
 800a3d6:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 800a3da:	68a3      	ldr	r3, [r4, #8]
 800a3dc:	4a12      	ldr	r2, [pc, #72]	@ (800a428 <R3_2_RLSwitchOnPWM+0xac>)
 800a3de:	4013      	ands	r3, r2
 800a3e0:	f043 0308 	orr.w	r3, r3, #8
 800a3e4:	60a3      	str	r3, [r4, #8]
 800a3e6:	688b      	ldr	r3, [r1, #8]
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	f043 0308 	orr.w	r3, r3, #8
 800a3ee:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a3f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a3f4:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a3f6:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a3fa:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a3fc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a3fe:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a402:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a406:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 800a40a:	f240 5355 	movw	r3, #1365	@ 0x555
 800a40e:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a410:	bf15      	itete	ne
 800a412:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a416:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a41a:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 800a41e:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 800a422:	62ae      	str	r6, [r5, #40]	@ 0x28
}
 800a424:	e7d6      	b.n	800a3d4 <R3_2_RLSwitchOnPWM+0x58>
 800a426:	bf00      	nop
 800a428:	7fffffc0 	.word	0x7fffffc0

0800a42c <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a42c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a430:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800a432:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a436:	f06f 0201 	mvn.w	r2, #1
 800a43a:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 800a43e:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a440:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a442:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a444:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a446:	691a      	ldr	r2, [r3, #16]
 800a448:	07d2      	lsls	r2, r2, #31
 800a44a:	d5fc      	bpl.n	800a446 <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a44c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a44e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a452:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 800a454:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a458:	2b02      	cmp	r3, #2
 800a45a:	d000      	beq.n	800a45e <R3_2_TurnOnLowSides+0x32>
 800a45c:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a45e:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a462:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a464:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a466:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a46a:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a46c:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a470:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 800a474:	618c      	str	r4, [r1, #24]
}
 800a476:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a47a:	619a      	str	r2, [r3, #24]
 800a47c:	4770      	bx	lr
 800a47e:	bf00      	nop

0800a480 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 800a480:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 800a484:	b510      	push	{r4, lr}
 800a486:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 800a48a:	f101 0e08 	add.w	lr, r1, #8
 800a48e:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 800a490:	f85e 300c 	ldr.w	r3, [lr, ip]
 800a494:	f36f 130f 	bfc	r3, #4, #12
 800a498:	4313      	orrs	r3, r2
 800a49a:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 800a49e:	684a      	ldr	r2, [r1, #4]
 800a4a0:	f000 0303 	and.w	r3, r0, #3
 800a4a4:	4313      	orrs	r3, r2
 800a4a6:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 800a4a8:	680a      	ldr	r2, [r1, #0]
 800a4aa:	f000 0010 	and.w	r0, r0, #16
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 800a4b2:	ea33 0202 	bics.w	r2, r3, r2
 800a4b6:	d014      	beq.n	800a4e2 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 800a4b8:	4a14      	ldr	r2, [pc, #80]	@ (800a50c <R3_2_SetAOReferenceVoltage+0x8c>)
 800a4ba:	4815      	ldr	r0, [pc, #84]	@ (800a510 <R3_2_SetAOReferenceVoltage+0x90>)
 800a4bc:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 800a4be:	680c      	ldr	r4, [r1, #0]
 800a4c0:	fba0 0202 	umull	r0, r2, r0, r2
 800a4c4:	0cd2      	lsrs	r2, r2, #19
 800a4c6:	4323      	orrs	r3, r4
 800a4c8:	00d2      	lsls	r2, r2, #3
 800a4ca:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 800a4cc:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	b12b      	cbz	r3, 800a4de <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a4d2:	9b00      	ldr	r3, [sp, #0]
 800a4d4:	3b01      	subs	r3, #1
 800a4d6:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 800a4d8:	9b00      	ldr	r3, [sp, #0]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d1f9      	bne.n	800a4d2 <R3_2_SetAOReferenceVoltage+0x52>
}
 800a4de:	b002      	add	sp, #8
 800a4e0:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 800a4e2:	4b0a      	ldr	r3, [pc, #40]	@ (800a50c <R3_2_SetAOReferenceVoltage+0x8c>)
 800a4e4:	4a0a      	ldr	r2, [pc, #40]	@ (800a510 <R3_2_SetAOReferenceVoltage+0x90>)
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	0cdb      	lsrs	r3, r3, #19
 800a4ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800a4f2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a4f4:	9b01      	ldr	r3, [sp, #4]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d0f1      	beq.n	800a4de <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 800a4fa:	9b01      	ldr	r3, [sp, #4]
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800a500:	9b01      	ldr	r3, [sp, #4]
 800a502:	2b00      	cmp	r3, #0
 800a504:	d1f9      	bne.n	800a4fa <R3_2_SetAOReferenceVoltage+0x7a>
}
 800a506:	b002      	add	sp, #8
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	bf00      	nop
 800a50c:	200004f0 	.word	0x200004f0
 800a510:	431bde83 	.word	0x431bde83

0800a514 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a514:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a518:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 800a51a:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a51e:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a520:	f06f 0201 	mvn.w	r2, #1
 800a524:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a528:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a52a:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a52c:	691a      	ldr	r2, [r3, #16]
 800a52e:	07d2      	lsls	r2, r2, #31
 800a530:	d5fc      	bpl.n	800a52c <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a532:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a534:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a538:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a53a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800a53e:	2b02      	cmp	r3, #2
 800a540:	d000      	beq.n	800a544 <R3_2_RLTurnOnLowSides+0x30>
 800a542:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a544:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 800a548:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a54a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a54c:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 800a550:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a552:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a556:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 800a55a:	628c      	str	r4, [r1, #40]	@ 0x28
}
 800a55c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a560:	629a      	str	r2, [r3, #40]	@ 0x28
 800a562:	4770      	bx	lr

0800a564 <R3_2_Init>:
{
 800a564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a568:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a56c:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a56e:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a570:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a572:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 800a574:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 800a578:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a57a:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 800a57e:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a580:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a584:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 800a588:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 800a58a:	6a20      	ldr	r0, [r4, #32]
 800a58c:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800a58e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 800a592:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800a594:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800a596:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 800a59a:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a59c:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a5a0:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a5a2:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a5a4:	f022 0220 	bic.w	r2, r2, #32
 800a5a8:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a5aa:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800a5ac:	6872      	ldr	r2, [r6, #4]
 800a5ae:	f022 0204 	bic.w	r2, r2, #4
 800a5b2:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800a5b4:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800a5b8:	6872      	ldr	r2, [r6, #4]
 800a5ba:	f022 0220 	bic.w	r2, r2, #32
 800a5be:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800a5c0:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 800a5c2:	4a85      	ldr	r2, [pc, #532]	@ (800a7d8 <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 800a5c4:	4885      	ldr	r0, [pc, #532]	@ (800a7dc <R3_2_Init+0x278>)
 800a5c6:	4295      	cmp	r5, r2
 800a5c8:	6902      	ldr	r2, [r0, #16]
 800a5ca:	bf0c      	ite	eq
 800a5cc:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 800a5d0:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 800a5d4:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 800a5d6:	b181      	cbz	r1, 800a5fa <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 800a5d8:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 800a5dc:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 800a5e0:	6989      	ldr	r1, [r1, #24]
 800a5e2:	f04e 0e01 	orr.w	lr, lr, #1
 800a5e6:	f8c2 e000 	str.w	lr, [r2]
 800a5ea:	6802      	ldr	r2, [r0, #0]
 800a5ec:	f042 0201 	orr.w	r2, r2, #1
 800a5f0:	6002      	str	r2, [r0, #0]
 800a5f2:	680a      	ldr	r2, [r1, #0]
 800a5f4:	f042 0201 	orr.w	r2, r2, #1
 800a5f8:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 800a5fa:	b1b3      	cbz	r3, 800a62a <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 800a5fc:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 800a600:	2a01      	cmp	r2, #1
 800a602:	d00a      	beq.n	800a61a <R3_2_Init+0xb6>
 800a604:	f1bc 0f00 	cmp.w	ip, #0
 800a608:	d007      	beq.n	800a61a <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 800a60a:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a60e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a610:	9303      	str	r3, [sp, #12]
 800a612:	4661      	mov	r1, ip
 800a614:	f7ff ff34 	bl	800a480 <R3_2_SetAOReferenceVoltage>
 800a618:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a61a:	681a      	ldr	r2, [r3, #0]
 800a61c:	f042 0201 	orr.w	r2, r2, #1
 800a620:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a628:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 800a62a:	f1bb 0f00 	cmp.w	fp, #0
 800a62e:	d017      	beq.n	800a660 <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 800a630:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 800a634:	2b01      	cmp	r3, #1
 800a636:	d007      	beq.n	800a648 <R3_2_Init+0xe4>
 800a638:	9b00      	ldr	r3, [sp, #0]
 800a63a:	b12b      	cbz	r3, 800a648 <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 800a63c:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a640:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 800a642:	4619      	mov	r1, r3
 800a644:	f7ff ff1c 	bl	800a480 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a648:	f8db 3000 	ldr.w	r3, [fp]
 800a64c:	f043 0301 	orr.w	r3, r3, #1
 800a650:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a654:	f8db 3000 	ldr.w	r3, [fp]
 800a658:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a65c:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 800a660:	f1ba 0f00 	cmp.w	sl, #0
 800a664:	d017      	beq.n	800a696 <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 800a666:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800a66a:	2b01      	cmp	r3, #1
 800a66c:	d007      	beq.n	800a67e <R3_2_Init+0x11a>
 800a66e:	9b01      	ldr	r3, [sp, #4]
 800a670:	b12b      	cbz	r3, 800a67e <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 800a672:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 800a676:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800a678:	4619      	mov	r1, r3
 800a67a:	f7ff ff01 	bl	800a480 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a67e:	f8da 3000 	ldr.w	r3, [sl]
 800a682:	f043 0301 	orr.w	r3, r3, #1
 800a686:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a68a:	f8da 3000 	ldr.w	r3, [sl]
 800a68e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a692:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 800a696:	f1b9 0f00 	cmp.w	r9, #0
 800a69a:	d017      	beq.n	800a6cc <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 800a69c:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d007      	beq.n	800a6b4 <R3_2_Init+0x150>
 800a6a4:	9b02      	ldr	r3, [sp, #8]
 800a6a6:	b12b      	cbz	r3, 800a6b4 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 800a6a8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 800a6ac:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	f7ff fee6 	bl	800a480 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 800a6b4:	f8d9 3000 	ldr.w	r3, [r9]
 800a6b8:	f043 0301 	orr.w	r3, r3, #1
 800a6bc:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 800a6c0:	f8d9 3000 	ldr.w	r3, [r9]
 800a6c4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6c8:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	07da      	lsls	r2, r3, #31
 800a6d0:	d553      	bpl.n	800a77a <R3_2_Init+0x216>
 800a6d2:	68b3      	ldr	r3, [r6, #8]
 800a6d4:	07db      	lsls	r3, r3, #31
 800a6d6:	d54c      	bpl.n	800a772 <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 800a6d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800a6dc:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800a6de:	682b      	ldr	r3, [r5, #0]
 800a6e0:	f023 0301 	bic.w	r3, r3, #1
 800a6e4:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a6e6:	686b      	ldr	r3, [r5, #4]
 800a6e8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a6ec:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a6f0:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800a6f2:	69ab      	ldr	r3, [r5, #24]
 800a6f4:	f043 0308 	orr.w	r3, r3, #8
 800a6f8:	61ab      	str	r3, [r5, #24]
 800a6fa:	69ab      	ldr	r3, [r5, #24]
 800a6fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a700:	61ab      	str	r3, [r5, #24]
 800a702:	69eb      	ldr	r3, [r5, #28]
 800a704:	f043 0308 	orr.w	r3, r3, #8
 800a708:	61eb      	str	r3, [r5, #28]
 800a70a:	69eb      	ldr	r3, [r5, #28]
 800a70c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a710:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a712:	696b      	ldr	r3, [r5, #20]
 800a714:	f043 0301 	orr.w	r3, r3, #1
 800a718:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 800a71a:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 800a71e:	2b02      	cmp	r3, #2
 800a720:	d046      	beq.n	800a7b0 <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 800a722:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 800a726:	2b00      	cmp	r3, #0
 800a728:	d034      	beq.n	800a794 <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800a72a:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 800a72e:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a730:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a732:	9a05      	ldr	r2, [sp, #20]
 800a734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a738:	b172      	cbz	r2, 800a758 <R3_2_Init+0x1f4>
 800a73a:	b16b      	cbz	r3, 800a758 <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800a73c:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 800a740:	e000      	b.n	800a744 <R3_2_Init+0x1e0>
 800a742:	b14b      	cbz	r3, 800a758 <R3_2_Init+0x1f4>
 800a744:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 800a746:	9b05      	ldr	r3, [sp, #20]
 800a748:	3b01      	subs	r3, #1
 800a74a:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800a74c:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 800a74e:	9a05      	ldr	r2, [sp, #20]
 800a750:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a754:	2a00      	cmp	r2, #0
 800a756:	d1f4      	bne.n	800a742 <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 800a758:	68eb      	ldr	r3, [r5, #12]
 800a75a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a75e:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 800a760:	6a2b      	ldr	r3, [r5, #32]
 800a762:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a766:	f043 0305 	orr.w	r3, r3, #5
 800a76a:	622b      	str	r3, [r5, #32]
}
 800a76c:	b007      	add	sp, #28
 800a76e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 800a772:	4630      	mov	r0, r6
 800a774:	f7ff fbc2 	bl	8009efc <R3_2_ADCxInit>
 800a778:	e7ae      	b.n	800a6d8 <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 800a77a:	4638      	mov	r0, r7
 800a77c:	f7ff fbbe 	bl	8009efc <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800a780:	2340      	movs	r3, #64	@ 0x40
 800a782:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a78a:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a78c:	68b3      	ldr	r3, [r6, #8]
 800a78e:	07db      	lsls	r3, r3, #31
 800a790:	d4a2      	bmi.n	800a6d8 <R3_2_Init+0x174>
 800a792:	e7ee      	b.n	800a772 <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 800a794:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 800a798:	2b01      	cmp	r3, #1
 800a79a:	d00d      	beq.n	800a7b8 <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 800a79c:	2b03      	cmp	r3, #3
 800a79e:	d1c4      	bne.n	800a72a <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a7a0:	2201      	movs	r2, #1
 800a7a2:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a7a4:	696a      	ldr	r2, [r5, #20]
 800a7a6:	f042 0201 	orr.w	r2, r2, #1
 800a7aa:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a7ac:	632b      	str	r3, [r5, #48]	@ 0x30
}
 800a7ae:	e7bc      	b.n	800a72a <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 800a7b0:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d004      	beq.n	800a7c2 <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 800a7b8:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 800a7bc:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 800a7be:	626b      	str	r3, [r5, #36]	@ 0x24
}
 800a7c0:	e7b3      	b.n	800a72a <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 800a7c2:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 800a7c6:	2a03      	cmp	r2, #3
 800a7c8:	d1f6      	bne.n	800a7b8 <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a7ca:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800a7cc:	696b      	ldr	r3, [r5, #20]
 800a7ce:	f043 0301 	orr.w	r3, r3, #1
 800a7d2:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 800a7d4:	632a      	str	r2, [r5, #48]	@ 0x30
}
 800a7d6:	e7ef      	b.n	800a7b8 <R3_2_Init+0x254>
 800a7d8:	40012c00 	.word	0x40012c00
 800a7dc:	e0042000 	.word	0xe0042000

0800a7e0 <R3_2_SetOffsetCalib>:
{
 800a7e0:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a7e2:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800a7e6:	680b      	ldr	r3, [r1, #0]
 800a7e8:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 800a7ec:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 800a7ee:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 800a7f2:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 800a7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 800a7fc:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 800a800:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800a804:	608b      	str	r3, [r1, #8]
 800a806:	e9c1 0200 	strd	r0, r2, [r1]
}
 800a80a:	4770      	bx	lr

0800a80c <R3_2_CurrentReadingPolarization>:
{
 800a80c:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a80e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a812:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800a814:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800a816:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 800a818:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 800a81c:	b083      	sub	sp, #12
 800a81e:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 800a820:	b1ab      	cbz	r3, 800a84e <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 800a822:	68bb      	ldr	r3, [r7, #8]
 800a824:	4a46      	ldr	r2, [pc, #280]	@ (800a940 <R3_2_CurrentReadingPolarization+0x134>)
 800a826:	4013      	ands	r3, r2
 800a828:	f043 0308 	orr.w	r3, r3, #8
 800a82c:	60bb      	str	r3, [r7, #8]
 800a82e:	68b3      	ldr	r3, [r6, #8]
 800a830:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a832:	2180      	movs	r1, #128	@ 0x80
 800a834:	f043 0308 	orr.w	r3, r3, #8
 800a838:	60b3      	str	r3, [r6, #8]
 800a83a:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 800a83e:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 800a840:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 800a842:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 800a846:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 800a84a:	b003      	add	sp, #12
 800a84c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800a84e:	6802      	ldr	r2, [r0, #0]
 800a850:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 800a852:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800a856:	6942      	ldr	r2, [r0, #20]
 800a858:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 800a85a:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 800a85e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 800a862:	6a2b      	ldr	r3, [r5, #32]
 800a864:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 800a868:	f023 0305 	bic.w	r3, r3, #5
 800a86c:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 800a86e:	2304      	movs	r3, #4
 800a870:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 800a874:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 800a878:	4b32      	ldr	r3, [pc, #200]	@ (800a944 <R3_2_CurrentReadingPolarization+0x138>)
 800a87a:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 800a87c:	4b32      	ldr	r3, [pc, #200]	@ (800a948 <R3_2_CurrentReadingPolarization+0x13c>)
 800a87e:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a880:	2380      	movs	r3, #128	@ 0x80
 800a882:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a886:	f7ff fcc7 	bl	800a218 <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 800a88a:	4a30      	ldr	r2, [pc, #192]	@ (800a94c <R3_2_CurrentReadingPolarization+0x140>)
 800a88c:	686b      	ldr	r3, [r5, #4]
 800a88e:	4013      	ands	r3, r2
 800a890:	2b70      	cmp	r3, #112	@ 0x70
 800a892:	d1fb      	bne.n	800a88c <R3_2_CurrentReadingPolarization+0x80>
 800a894:	68bb      	ldr	r3, [r7, #8]
 800a896:	4a2a      	ldr	r2, [pc, #168]	@ (800a940 <R3_2_CurrentReadingPolarization+0x134>)
 800a898:	4013      	ands	r3, r2
 800a89a:	f043 0308 	orr.w	r3, r3, #8
 800a89e:	60bb      	str	r3, [r7, #8]
 800a8a0:	68b3      	ldr	r3, [r6, #8]
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 800a8a8:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 800a8ac:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 800a8ae:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 800a8b2:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 800a8b6:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a8ba:	4631      	mov	r1, r6
 800a8bc:	463b      	mov	r3, r7
 800a8be:	4628      	mov	r0, r5
 800a8c0:	f7f8 ffc8 	bl	8003854 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f7ff fcf1 	bl	800a2ac <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 800a8d0:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 800a8d4:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 800a8d8:	4b1d      	ldr	r3, [pc, #116]	@ (800a950 <R3_2_CurrentReadingPolarization+0x144>)
 800a8da:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f7ff fc9b 	bl	800a218 <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 800a8e2:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 800a8e6:	463b      	mov	r3, r7
 800a8e8:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 800a8ec:	4631      	mov	r1, r6
 800a8ee:	4628      	mov	r0, r5
 800a8f0:	f7f8 ffb0 	bl	8003854 <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 800a8f4:	4620      	mov	r0, r4
 800a8f6:	f7ff fcd9 	bl	800a2ac <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a8fa:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 800a8fe:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 800a900:	091b      	lsrs	r3, r3, #4
 800a902:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a906:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a90a:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 800a90e:	9800      	ldr	r0, [sp, #0]
 800a910:	6020      	str	r0, [r4, #0]
    pHandle->_Super.offsetCalibStatus = true;
 800a912:	2101      	movs	r1, #1
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 800a914:	0912      	lsrs	r2, r2, #4
 800a916:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 800a91a:	40cb      	lsrs	r3, r1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a91c:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.offsetCalibStatus = true;
 800a91e:	f884 107f 	strb.w	r1, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 800a922:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a924:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a926:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a928:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 800a92a:	696b      	ldr	r3, [r5, #20]
 800a92c:	f043 0320 	orr.w	r3, r3, #32
 800a930:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 800a932:	6a2b      	ldr	r3, [r5, #32]
 800a934:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 800a938:	f043 0305 	orr.w	r3, r3, #5
 800a93c:	622b      	str	r3, [r5, #32]
}
 800a93e:	e77e      	b.n	800a83e <R3_2_CurrentReadingPolarization+0x32>
 800a940:	7fffffc0 	.word	0x7fffffc0
 800a944:	0800a179 	.word	0x0800a179
 800a948:	0800a135 	.word	0x0800a135
 800a94c:	02000070 	.word	0x02000070
 800a950:	0800a1cd 	.word	0x0800a1cd

0800a954 <R3_2_SetADCSampPointSectX>:
{
 800a954:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 800a956:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 800a95a:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 800a95e:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 800a962:	ebae 0203 	sub.w	r2, lr, r3
 800a966:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 800a96a:	b292      	uxth	r2, r2
 800a96c:	42a2      	cmp	r2, r4
 800a96e:	d917      	bls.n	800a9a0 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 800a970:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800a972:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 800a976:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 800a97a:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a97c:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800a97e:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 800a982:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 800a986:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a98a:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a98c:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a98e:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a990:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a992:	6852      	ldr	r2, [r2, #4]
 800a994:	4b10      	ldr	r3, [pc, #64]	@ (800a9d8 <R3_2_SetADCSampPointSectX+0x84>)
 800a996:	421a      	tst	r2, r3
}
 800a998:	bf14      	ite	ne
 800a99a:	2001      	movne	r0, #1
 800a99c:	2000      	moveq	r0, #0
 800a99e:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 800a9a0:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 800a9a4:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 800a9a8:	fa1f fc8c 	uxth.w	ip, ip
 800a9ac:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 800a9b0:	d904      	bls.n	800a9bc <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 800a9b2:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 800a9b6:	1a9b      	subs	r3, r3, r2
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	e7df      	b.n	800a97c <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 800a9bc:	4423      	add	r3, r4
 800a9be:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 800a9c0:	459e      	cmp	lr, r3
 800a9c2:	d8db      	bhi.n	800a97c <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a9c4:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800a9c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a9ca:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 800a9ce:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 800a9d2:	b29b      	uxth	r3, r3
 800a9d4:	e7d2      	b.n	800a97c <R3_2_SetADCSampPointSectX+0x28>
 800a9d6:	bf00      	nop
 800a9d8:	02000070 	.word	0x02000070

0800a9dc <R3_2_TIMx_UP_IRQHandler>:
{
 800a9dc:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a9de:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a9e2:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 800a9e6:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a9e8:	681d      	ldr	r5, [r3, #0]
{
 800a9ea:	4601      	mov	r1, r0
 800a9ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a9f0:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 800a9f2:	b1d6      	cbz	r6, 800aa2a <R3_2_TIMx_UP_IRQHandler+0x4e>
 800a9f4:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 800a9f8:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1fc      	bne.n	800a9f8 <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 800a9fe:	eb06 030c 	add.w	r3, r6, ip
 800aa02:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 800aa04:	f1b7 3fff 	cmp.w	r7, #4294967295
 800aa08:	d006      	beq.n	800aa18 <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 800aa0a:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800aa0e:	6834      	ldr	r4, [r6, #0]
 800aa10:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 800aa14:	433c      	orrs	r4, r7
 800aa16:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 800aa18:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 800aa1a:	1c66      	adds	r6, r4, #1
 800aa1c:	d005      	beq.n	800aa2a <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 800aa1e:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 800aa20:	6833      	ldr	r3, [r6, #0]
 800aa22:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 800aa26:	4323      	orrs	r3, r4
 800aa28:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800aa2a:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 800aa2e:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800aa30:	431c      	orrs	r4, r3
 800aa32:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800aa34:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800aa36:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800aa3a:	4303      	orrs	r3, r0
 800aa3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800aa3e:	686b      	ldr	r3, [r5, #4]
 800aa40:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800aa44:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800aa48:	2280      	movs	r2, #128	@ 0x80
 800aa4a:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800aa4e:	606b      	str	r3, [r5, #4]
}
 800aa50:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 800aa54:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800aa56:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 800aa5a:	4770      	bx	lr

0800aa5c <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800aa5c:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800aa60:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800aa62:	2900      	cmp	r1, #0
 800aa64:	d13d      	bne.n	800aae2 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800aa66:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800aa6a:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aa6c:	699a      	ldr	r2, [r3, #24]
 800aa6e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aa72:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800aa76:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800aa7a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800aa7c:	6a1a      	ldr	r2, [r3, #32]
 800aa7e:	f042 0201 	orr.w	r2, r2, #1
 800aa82:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800aa84:	6a1a      	ldr	r2, [r3, #32]
 800aa86:	f022 0204 	bic.w	r2, r2, #4
 800aa8a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800aa8c:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800aa8e:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800aa92:	2a01      	cmp	r2, #1
 800aa94:	d033      	beq.n	800aafe <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800aa96:	2a02      	cmp	r2, #2
 800aa98:	d10f      	bne.n	800aaba <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aa9a:	699a      	ldr	r2, [r3, #24]
 800aa9c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800aaa0:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800aaa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800aaa8:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800aaaa:	6a1a      	ldr	r2, [r3, #32]
 800aaac:	f042 0210 	orr.w	r2, r2, #16
 800aab0:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800aab2:	6a1a      	ldr	r2, [r3, #32]
 800aab4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800aab8:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aaba:	69da      	ldr	r2, [r3, #28]
 800aabc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800aac0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800aac4:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800aac8:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 800aaca:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800aacc:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800aad0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800aad4:	621a      	str	r2, [r3, #32]
 800aad6:	6a1a      	ldr	r2, [r3, #32]
 800aad8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800aadc:	621a      	str	r2, [r3, #32]
 800aade:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800aae2:	4b0f      	ldr	r3, [pc, #60]	@ (800ab20 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800aae4:	490f      	ldr	r1, [pc, #60]	@ (800ab24 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aae6:	4a10      	ldr	r2, [pc, #64]	@ (800ab28 <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800aae8:	4c10      	ldr	r4, [pc, #64]	@ (800ab2c <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800aaea:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800aaec:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800aaee:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aaf0:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800aaf4:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800aaf8:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800aafc:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800aafe:	699a      	ldr	r2, [r3, #24]
 800ab00:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ab04:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ab08:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ab0c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ab0e:	6a1a      	ldr	r2, [r3, #32]
 800ab10:	f022 0210 	bic.w	r2, r2, #16
 800ab14:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800ab16:	6a1a      	ldr	r2, [r3, #32]
 800ab18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ab1c:	621a      	str	r2, [r3, #32]
}
 800ab1e:	e7cc      	b.n	800aaba <R3_2_RLDetectionModeEnable+0x5e>
 800ab20:	0800a515 	.word	0x0800a515
 800ab24:	0800a37d 	.word	0x0800a37d
 800ab28:	0800a2ad 	.word	0x0800a2ad
 800ab2c:	0800a329 	.word	0x0800a329

0800ab30 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800ab30:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d03d      	beq.n	800abb4 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab38:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800ab3c:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ab40:	681b      	ldr	r3, [r3, #0]
{
 800ab42:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ab44:	699a      	ldr	r2, [r3, #24]
 800ab46:	4c40      	ldr	r4, [pc, #256]	@ (800ac48 <R3_2_RLDetectionModeDisable+0x118>)
 800ab48:	4022      	ands	r2, r4
 800ab4a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ab4e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ab50:	6a1a      	ldr	r2, [r3, #32]
 800ab52:	f042 0201 	orr.w	r2, r2, #1
 800ab56:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800ab58:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ab5c:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800ab5e:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800ab62:	d028      	beq.n	800abb6 <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800ab64:	2a02      	cmp	r2, #2
 800ab66:	d04a      	beq.n	800abfe <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ab68:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ab6a:	699a      	ldr	r2, [r3, #24]
 800ab6c:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ab70:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ab74:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800ab78:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ab7a:	6a1a      	ldr	r2, [r3, #32]
 800ab7c:	f042 0210 	orr.w	r2, r2, #16
 800ab80:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ab82:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ab84:	69da      	ldr	r2, [r3, #28]
 800ab86:	4022      	ands	r2, r4
 800ab88:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ab8c:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ab94:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ab96:	4a2d      	ldr	r2, [pc, #180]	@ (800ac4c <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ab98:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800ab9a:	492d      	ldr	r1, [pc, #180]	@ (800ac50 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800ab9c:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800ab9e:	4a2d      	ldr	r2, [pc, #180]	@ (800ac54 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800aba0:	4c2d      	ldr	r4, [pc, #180]	@ (800ac58 <R3_2_RLDetectionModeDisable+0x128>)
 800aba2:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800aba4:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800aba6:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800abaa:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800abae:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800abb2:	4770      	bx	lr
 800abb4:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800abb6:	6a1a      	ldr	r2, [r3, #32]
 800abb8:	f042 0204 	orr.w	r2, r2, #4
 800abbc:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800abbe:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800abc0:	699a      	ldr	r2, [r3, #24]
 800abc2:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800abc6:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800abca:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800abce:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800abd0:	6a1a      	ldr	r2, [r3, #32]
 800abd2:	f042 0210 	orr.w	r2, r2, #16
 800abd6:	621a      	str	r2, [r3, #32]
 800abd8:	6a1a      	ldr	r2, [r3, #32]
 800abda:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800abde:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800abe0:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800abe2:	69da      	ldr	r2, [r3, #28]
 800abe4:	4022      	ands	r2, r4
 800abe6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800abea:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800abec:	6a1a      	ldr	r2, [r3, #32]
 800abee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abf2:	621a      	str	r2, [r3, #32]
 800abf4:	6a1a      	ldr	r2, [r3, #32]
 800abf6:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800abfa:	621a      	str	r2, [r3, #32]
}
 800abfc:	e7cb      	b.n	800ab96 <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800abfe:	6a1a      	ldr	r2, [r3, #32]
 800ac00:	f022 0204 	bic.w	r2, r2, #4
 800ac04:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ac06:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac08:	699a      	ldr	r2, [r3, #24]
 800ac0a:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ac0e:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800ac12:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800ac16:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800ac18:	6a1a      	ldr	r2, [r3, #32]
 800ac1a:	f042 0210 	orr.w	r2, r2, #16
 800ac1e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ac20:	6a1a      	ldr	r2, [r3, #32]
 800ac22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800ac26:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ac28:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac2a:	69da      	ldr	r2, [r3, #28]
 800ac2c:	4022      	ands	r2, r4
 800ac2e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ac32:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800ac34:	6a1a      	ldr	r2, [r3, #32]
 800ac36:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ac3a:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800ac3c:	6a1a      	ldr	r2, [r3, #32]
 800ac3e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ac42:	621a      	str	r2, [r3, #32]
}
 800ac44:	e7a7      	b.n	800ab96 <R3_2_RLDetectionModeDisable+0x66>
 800ac46:	bf00      	nop
 800ac48:	fffeff8c 	.word	0xfffeff8c
 800ac4c:	08009fb9 	.word	0x08009fb9
 800ac50:	0800a219 	.word	0x0800a219
 800ac54:	0800a2ad 	.word	0x0800a2ad
 800ac58:	0800a42d 	.word	0x0800a42d

0800ac5c <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ac5c:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800ac60:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ac64:	6812      	ldr	r2, [r2, #0]
{
 800ac66:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800ac68:	69d0      	ldr	r0, [r2, #28]
 800ac6a:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800ac6e:	fb0c f101 	mul.w	r1, ip, r1
 800ac72:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 800ac76:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800ac78:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800ac7a:	2401      	movs	r4, #1
 800ac7c:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800ac80:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800ac84:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800ac88:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800ac8a:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800ac8e:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800ac92:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ac96:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ac98:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ac9a:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800ac9c:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800ac9e:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800aca2:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800aca6:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800acaa:	f04f 0c03 	mov.w	ip, #3
 800acae:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800acb2:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800acb4:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800acb6:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800acba:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800acbc:	d007      	beq.n	800acce <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800acbe:	4b07      	ldr	r3, [pc, #28]	@ (800acdc <R3_2_RLDetectionModeSetDuty+0x80>)
}
 800acc0:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800acc4:	421a      	tst	r2, r3
 800acc6:	bf14      	ite	ne
 800acc8:	2001      	movne	r0, #1
 800acca:	2000      	moveq	r0, #0
}
 800accc:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800acce:	2200      	movs	r2, #0
}
 800acd0:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800acd4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800acd8:	4770      	bx	lr
 800acda:	bf00      	nop
 800acdc:	02000070 	.word	0x02000070

0800ace0 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800ace0:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800ace4:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 800ace6:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ace8:	f06f 0201 	mvn.w	r2, #1
{
 800acec:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800acee:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800acf2:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800acf4:	691a      	ldr	r2, [r3, #16]
 800acf6:	07d1      	lsls	r1, r2, #31
 800acf8:	d5fc      	bpl.n	800acf4 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800acfa:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800acfe:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800ad00:	f06f 0401 	mvn.w	r4, #1
 800ad04:	3a05      	subs	r2, #5
 800ad06:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800ad08:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800ad0a:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800ad0c:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800ad0e:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800ad10:	691a      	ldr	r2, [r3, #16]
 800ad12:	07d2      	lsls	r2, r2, #31
 800ad14:	d5fc      	bpl.n	800ad10 <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800ad16:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ad1c:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800ad1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ad20:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad24:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800ad26:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800ad2a:	2a02      	cmp	r2, #2
 800ad2c:	d00c      	beq.n	800ad48 <R3_2_RLTurnOnLowSidesAndStart+0x68>
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800ad2e:	2203      	movs	r2, #3
 800ad30:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800ad34:	6a1a      	ldr	r2, [r3, #32]
 800ad36:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800ad3a:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800ad3c:	68da      	ldr	r2, [r3, #12]
 800ad3e:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800ad42:	bc30      	pop	{r4, r5}
 800ad44:	60da      	str	r2, [r3, #12]
 800ad46:	4770      	bx	lr
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ad48:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800ad4c:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ad50:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800ad52:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800ad54:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800ad58:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800ad5a:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800ad5e:	6191      	str	r1, [r2, #24]
}
 800ad60:	e7e5      	b.n	800ad2e <R3_2_RLTurnOnLowSidesAndStart+0x4e>
 800ad62:	bf00      	nop

0800ad64 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800ad64:	b510      	push	{r4, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800ad66:	8a42      	ldrh	r2, [r0, #18]
 800ad68:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ad6c:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800ad6e:	4496      	add	lr, r2
 800ad70:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800ad74:	2400      	movs	r4, #0
 800ad76:	f36e 040f 	bfi	r4, lr, #0, #16
 800ad7a:	f36e 441f 	bfi	r4, lr, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ad7e:	b153      	cbz	r3, 800ad96 <RVBS_Clear+0x32>
 800ad80:	6942      	ldr	r2, [r0, #20]
    {
      pHandle->aBuffer[index] = aux;
 800ad82:	2300      	movs	r3, #0
 800ad84:	3a02      	subs	r2, #2
 800ad86:	f822 ef02 	strh.w	lr, [r2, #2]!
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800ad8a:	3301      	adds	r3, #1
 800ad8c:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800ad90:	b299      	uxth	r1, r3
 800ad92:	458c      	cmp	ip, r1
 800ad94:	d8f7      	bhi.n	800ad86 <RVBS_Clear+0x22>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800ad96:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800ad98:	6044      	str	r4, [r0, #4]
    pHandle->index = 0U;
 800ad9a:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800ad9c:	bd10      	pop	{r4, pc}
 800ad9e:	bf00      	nop

0800ada0 <RVBS_Init>:
{
 800ada0:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800ada2:	f7ff ffdf 	bl	800ad64 <RVBS_Clear>
}
 800ada6:	bd08      	pop	{r3, pc}

0800ada8 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800ada8:	8982      	ldrh	r2, [r0, #12]
 800adaa:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800adac:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800adae:	428a      	cmp	r2, r1
 800adb0:	d010      	beq.n	800add4 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800adb2:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800adb6:	459c      	cmp	ip, r3
 800adb8:	d80a      	bhi.n	800add0 <RVBS_CheckFaultState+0x28>
{
 800adba:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800adbc:	7c04      	ldrb	r4, [r0, #16]
 800adbe:	b994      	cbnz	r4, 800ade6 <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800adc0:	4299      	cmp	r1, r3
 800adc2:	d914      	bls.n	800adee <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800adc4:	2301      	movs	r3, #1
 800adc6:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800adc8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800adca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adce:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800add0:	2004      	movs	r0, #4
 800add2:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800add4:	429a      	cmp	r2, r3
 800add6:	d30c      	bcc.n	800adf2 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800add8:	8a40      	ldrh	r0, [r0, #18]
 800adda:	4298      	cmp	r0, r3
 800addc:	bf94      	ite	ls
 800adde:	2000      	movls	r0, #0
 800ade0:	2001      	movhi	r0, #1
 800ade2:	0080      	lsls	r0, r0, #2
 800ade4:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800ade6:	429a      	cmp	r2, r3
 800ade8:	d2ee      	bcs.n	800adc8 <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800adea:	2300      	movs	r3, #0
 800adec:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800adee:	2002      	movs	r0, #2
 800adf0:	e7eb      	b.n	800adca <RVBS_CheckFaultState+0x22>
 800adf2:	2002      	movs	r0, #2
}
 800adf4:	4770      	bx	lr
 800adf6:	bf00      	nop

0800adf8 <RVBS_CalcAvVbus>:
{
 800adf8:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800adfa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800adfe:	4299      	cmp	r1, r3
{
 800ae00:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800ae02:	d021      	beq.n	800ae48 <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800ae04:	6943      	ldr	r3, [r0, #20]
 800ae06:	7e45      	ldrb	r5, [r0, #25]
 800ae08:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800ae0c:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800ae10:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800ae14:	d00d      	beq.n	800ae32 <RVBS_CalcAvVbus+0x3a>
 800ae16:	3a01      	subs	r2, #1
 800ae18:	b2d2      	uxtb	r2, r2
 800ae1a:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800ae1e:	3b02      	subs	r3, #2
      wtemp = 0u;
 800ae20:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800ae22:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800ae26:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800ae28:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800ae2a:	d1fa      	bne.n	800ae22 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800ae2c:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800ae30:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800ae32:	f10e 3eff 	add.w	lr, lr, #4294967295
 800ae36:	4575      	cmp	r5, lr
        pHandle->index++;
 800ae38:	bf34      	ite	cc
 800ae3a:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800ae3c:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800ae3e:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800ae40:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800ae42:	bf34      	ite	cc
 800ae44:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800ae46:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800ae48:	4620      	mov	r0, r4
 800ae4a:	f7ff ffad 	bl	800ada8 <RVBS_CheckFaultState>
 800ae4e:	8120      	strh	r0, [r4, #8]
}
 800ae50:	bd38      	pop	{r3, r4, r5, pc}
 800ae52:	bf00      	nop

0800ae54 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800ae54:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800ae56:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800ae58:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800ae5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800ae60:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800ae62:	4770      	bx	lr

0800ae64 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800ae64:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800ae68:	2901      	cmp	r1, #1
{
 800ae6a:	b410      	push	{r4}
 800ae6c:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ae6e:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 800ae70:	d909      	bls.n	800ae86 <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800ae72:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800ae74:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800ae76:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 800ae78:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ae7a:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 800ae7e:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800ae80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ae84:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800ae86:	d005      	beq.n	800ae94 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800ae88:	fb92 f0f4 	sdiv	r0, r2, r4
}
 800ae8c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 800ae90:	609a      	str	r2, [r3, #8]
}
 800ae92:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800ae94:	6840      	ldr	r0, [r0, #4]
 800ae96:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 800ae9a:	2100      	movs	r1, #0
}
 800ae9c:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 800aea0:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 800aea2:	609a      	str	r2, [r3, #8]
}
 800aea4:	4770      	bx	lr
 800aea6:	bf00      	nop

0800aea8 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800aea8:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800aeaa:	fab0 f080 	clz	r0, r0
 800aeae:	0940      	lsrs	r0, r0, #5
 800aeb0:	4770      	bx	lr
 800aeb2:	bf00      	nop

0800aeb4 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	bfb8      	it	lt
 800aeb8:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 800aeba:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800aebe:	d213      	bcs.n	800aee8 <getScalingFactor+0x34>
 800aec0:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800aec2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800aec6:	e001      	b.n	800aecc <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d00a      	beq.n	800aee2 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800aecc:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 800aed0:	4290      	cmp	r0, r2
 800aed2:	4619      	mov	r1, r3
 800aed4:	f103 0301 	add.w	r3, r3, #1
 800aed8:	d3f6      	bcc.n	800aec8 <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800aeda:	3901      	subs	r1, #1
 800aedc:	2001      	movs	r0, #1
 800aede:	4088      	lsls	r0, r1
 800aee0:	4770      	bx	lr
 800aee2:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800aee6:	4770      	bx	lr
    if (TargetAbs >= limit)
 800aee8:	2001      	movs	r0, #1
}
 800aeea:	4770      	bx	lr

0800aeec <REMNG_ExecRamp>:
{
 800aeec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aef0:	4604      	mov	r4, r0
 800aef2:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800aef4:	6880      	ldr	r0, [r0, #8]
 800aef6:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 800aef8:	4615      	mov	r5, r2
 800aefa:	b962      	cbnz	r2, 800af16 <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800aefc:	4608      	mov	r0, r1
 800aefe:	f7ff ffd9 	bl	800aeb4 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800af02:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800af06:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800af08:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800af0a:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800af0e:	60a6      	str	r6, [r4, #8]
}
 800af10:	2001      	movs	r0, #1
 800af12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800af16:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800af1a:	eba1 0708 	sub.w	r7, r1, r8
 800af1e:	4638      	mov	r0, r7
 800af20:	f7ff ffc8 	bl	800aeb4 <getScalingFactor>
 800af24:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800af26:	4640      	mov	r0, r8
 800af28:	f7ff ffc4 	bl	800aeb4 <getScalingFactor>
 800af2c:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800af2e:	4630      	mov	r0, r6
 800af30:	f7ff ffc0 	bl	800aeb4 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800af34:	45ca      	cmp	sl, r9
 800af36:	d318      	bcc.n	800af6a <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 800af38:	4548      	cmp	r0, r9
 800af3a:	bf28      	it	cs
 800af3c:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800af3e:	fb08 f300 	mul.w	r3, r8, r0
 800af42:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800af44:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800af46:	4a0b      	ldr	r2, [pc, #44]	@ (800af74 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 800af48:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800af4a:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 800af4e:	fba2 2303 	umull	r2, r3, r2, r3
 800af52:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800af54:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800af56:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 800af5a:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800af5c:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800af60:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800af64:	2001      	movs	r0, #1
 800af66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 800af6a:	4550      	cmp	r0, sl
 800af6c:	bf28      	it	cs
 800af6e:	4650      	movcs	r0, sl
 800af70:	e7e5      	b.n	800af3e <REMNG_ExecRamp+0x52>
 800af72:	bf00      	nop
 800af74:	10624dd3 	.word	0x10624dd3

0800af78 <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 800af78:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800af7a:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800af7c:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800af7e:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 800af82:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800af86:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 800af88:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 800af8c:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800af8e:	b1f9      	cbz	r1, 800afd0 <RUC_Init+0x58>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800af90:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800af92:	b313      	cbz	r3, 800afda <RUC_Init+0x62>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800af94:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800af96:	b31b      	cbz	r3, 800afe0 <RUC_Init+0x68>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800af98:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800af9a:	b323      	cbz	r3, 800afe6 <RUC_Init+0x6e>
 800af9c:	689b      	ldr	r3, [r3, #8]
 800af9e:	f04f 0c05 	mov.w	ip, #5
 800afa2:	2204      	movs	r2, #4
 800afa4:	b1b3      	cbz	r3, 800afd4 <RUC_Init+0x5c>
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800afa6:	8803      	ldrh	r3, [r0, #0]
 800afa8:	4910      	ldr	r1, [pc, #64]	@ (800afec <RUC_Init+0x74>)
 800afaa:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800afae:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800afb2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800afb6:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800afba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800afbe:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800afc0:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800afc2:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 800afc4:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800afc8:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800afcc:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800afd0:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800afd4:	f10c 32ff 	add.w	r2, ip, #4294967295
 800afd8:	e7e5      	b.n	800afa6 <RUC_Init+0x2e>
      bPhase++;
 800afda:	f04f 0c02 	mov.w	ip, #2
 800afde:	e7f9      	b.n	800afd4 <RUC_Init+0x5c>
 800afe0:	f04f 0c03 	mov.w	ip, #3
 800afe4:	e7f6      	b.n	800afd4 <RUC_Init+0x5c>
 800afe6:	f04f 0c04 	mov.w	ip, #4
 800afea:	e7f3      	b.n	800afd4 <RUC_Init+0x5c>
 800afec:	10624dd3 	.word	0x10624dd3

0800aff0 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800aff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aff4:	4604      	mov	r4, r0

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800aff6:	2600      	movs	r6, #0
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800aff8:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    pHandle->bStageCnt = 0U;
 800affc:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 800b000:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800b004:	6ea7      	ldr	r7, [r4, #104]	@ 0x68
    pHandle->hDirection = hMotorDirection;
 800b006:	80c1      	strh	r1, [r0, #6]
    pHandle->OTFSCLowside = false;
 800b008:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 800b00c:	4640      	mov	r0, r8
{
 800b00e:	460d      	mov	r5, r1
    VSS_Clear(pVSS);
 800b010:	f000 fc3e 	bl	800b890 <VSS_Clear>

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800b014:	2104      	movs	r1, #4
 800b016:	4638      	mov	r0, r7
 800b018:	f000 f8e0 	bl	800b1dc <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800b01c:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b01e:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b022:	b2ad      	uxth	r5, r5
 800b024:	fb13 f305 	smulbb	r3, r3, r5
 800b028:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 800b02a:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 800b02e:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800b032:	4631      	mov	r1, r6
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b034:	fb93 f3f2 	sdiv	r3, r3, r2
 800b038:	4638      	mov	r0, r7
 800b03a:	f8a8 3006 	strh.w	r3, [r8, #6]
 800b03e:	4632      	mov	r2, r6
 800b040:	f000 f8d0 	bl	800b1e4 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800b044:	8a21      	ldrh	r1, [r4, #16]
 800b046:	89a2      	ldrh	r2, [r4, #12]
 800b048:	fb11 f105 	smulbb	r1, r1, r5
 800b04c:	b209      	sxth	r1, r1
 800b04e:	4638      	mov	r0, r7
 800b050:	f000 f8c8 	bl	800b1e4 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800b054:	89e1      	ldrh	r1, [r4, #14]
 800b056:	89a2      	ldrh	r2, [r4, #12]
 800b058:	fb11 f105 	smulbb	r1, r1, r5
 800b05c:	b209      	sxth	r1, r1
 800b05e:	4640      	mov	r0, r8
 800b060:	f000 fccc 	bl	800b9fc <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800b064:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800b066:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800b068:	4a06      	ldr	r2, [pc, #24]	@ (800b084 <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 800b06a:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800b06e:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800b078:	6962      	ldr	r2, [r4, #20]
 800b07a:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 800b07c:	3301      	adds	r3, #1
 800b07e:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800b080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b084:	10624dd3 	.word	0x10624dd3

0800b088 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800b088:	8883      	ldrh	r3, [r0, #4]
{
 800b08a:	b510      	push	{r4, lr}
 800b08c:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800b08e:	bb4b      	cbnz	r3, 800b0e4 <RUC_Exec+0x5c>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800b090:	68a0      	ldr	r0, [r4, #8]
 800b092:	b330      	cbz	r0, 800b0e2 <RUC_Exec+0x5a>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800b094:	8881      	ldrh	r1, [r0, #4]
 800b096:	88e3      	ldrh	r3, [r4, #6]
 800b098:	8802      	ldrh	r2, [r0, #0]
 800b09a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800b09c:	fb11 f103 	smulbb	r1, r1, r3
 800b0a0:	b209      	sxth	r1, r1
 800b0a2:	f000 f89f 	bl	800b1e4 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800b0a6:	68a3      	ldr	r3, [r4, #8]
 800b0a8:	88e0      	ldrh	r0, [r4, #6]
 800b0aa:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800b0ac:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800b0ae:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800b0b2:	b209      	sxth	r1, r1
 800b0b4:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800b0b6:	f000 fca1 	bl	800b9fc <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800b0ba:	68a2      	ldr	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b0bc:	f8b4 c000 	ldrh.w	ip, [r4]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800b0c0:	8813      	ldrh	r3, [r2, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b0c2:	490c      	ldr	r1, [pc, #48]	@ (800b0f4 <RUC_Exec+0x6c>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800b0c4:	6890      	ldr	r0, [r2, #8]

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800b0c6:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800b0ca:	60a0      	str	r0, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800b0cc:	fb0c f303 	mul.w	r3, ip, r3
 800b0d0:	fba1 1303 	umull	r1, r3, r1, r3
 800b0d4:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800b0d6:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800b0d8:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800b0da:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800b0dc:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800b0e0:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800b0e2:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d0d0      	beq.n	800b090 <RUC_Exec+0x8>
  bool retVal = true;
 800b0ee:	2001      	movs	r0, #1
}
 800b0f0:	bd10      	pop	{r4, pc}
 800b0f2:	bf00      	nop
 800b0f4:	10624dd3 	.word	0x10624dd3

0800b0f8 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800b0f8:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800b0fc:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800b100:	4282      	cmp	r2, r0
 800b102:	bf34      	ite	cc
 800b104:	2000      	movcc	r0, #0
 800b106:	2001      	movcs	r0, #1
 800b108:	4770      	bx	lr
 800b10a:	bf00      	nop

0800b10c <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800b10c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800b110:	4770      	bx	lr
 800b112:	bf00      	nop

0800b114 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800b114:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800b118:	4603      	mov	r3, r0
 800b11a:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800b11c:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800b120:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800b124:	bfb8      	it	lt
 800b126:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800b128:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800b12c:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800b12e:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800b130:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 800b132:	bfb8      	it	lt
 800b134:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800b136:	458c      	cmp	ip, r1
 800b138:	d818      	bhi.n	800b16c <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800b13a:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800b13e:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 800b142:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800b146:	bfb8      	it	lt
 800b148:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800b14c:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800b150:	bfb8      	it	lt
 800b152:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800b156:	45e6      	cmp	lr, ip
 800b158:	d308      	bcc.n	800b16c <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800b15a:	428c      	cmp	r4, r1
 800b15c:	d306      	bcc.n	800b16c <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b15e:	4290      	cmp	r0, r2
 800b160:	d809      	bhi.n	800b176 <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800b162:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b164:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800b166:	bf18      	it	ne
 800b168:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800b16a:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800b16c:	4290      	cmp	r0, r2
 800b16e:	d9f8      	bls.n	800b162 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800b170:	3201      	adds	r2, #1
 800b172:	b2d2      	uxtb	r2, r2
 800b174:	e7f5      	b.n	800b162 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800b176:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800b178:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800b17a:	2001      	movs	r0, #1
}
 800b17c:	bd10      	pop	{r4, pc}
 800b17e:	bf00      	nop

0800b180 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800b180:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b184:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800b188:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800b18c:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800b190:	b200      	sxth	r0, r0
 800b192:	4770      	bx	lr

0800b194 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800b194:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b196:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800b19a:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800b19c:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->Mode = pHandle->ModeDefault;
 800b1a0:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800b1a4:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800b1a6:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800b1a8:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800b1ac:	0409      	lsls	r1, r1, #16
 800b1ae:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 800b1b2:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b1b4:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 800b1b8:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800b1ba:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800b1bc:	6183      	str	r3, [r0, #24]
}
 800b1be:	4770      	bx	lr

0800b1c0 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800b1c0:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b1c2:	4770      	bx	lr

0800b1c4 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b1c4:	7803      	ldrb	r3, [r0, #0]
 800b1c6:	2b03      	cmp	r3, #3
 800b1c8:	d000      	beq.n	800b1cc <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b1ca:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800b1cc:	6900      	ldr	r0, [r0, #16]
 800b1ce:	2100      	movs	r1, #0
 800b1d0:	f7fe bdea 	b.w	8009da8 <PID_SetIntegralTerm>

0800b1d4 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800b1d4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800b1d8:	4770      	bx	lr
 800b1da:	bf00      	nop

0800b1dc <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800b1dc:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800b1de:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800b1e0:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b1e2:	4770      	bx	lr

0800b1e4 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800b1e4:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b1e6:	7803      	ldrb	r3, [r0, #0]
 800b1e8:	2b04      	cmp	r3, #4
 800b1ea:	d019      	beq.n	800b220 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800b1ec:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 800b1f0:	458c      	cmp	ip, r1
 800b1f2:	da03      	bge.n	800b1fc <STC_ExecRamp+0x18>
 800b1f4:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800b1f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b1fa:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800b1fc:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 800b200:	428c      	cmp	r4, r1
 800b202:	dcf7      	bgt.n	800b1f4 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800b204:	8c04      	ldrh	r4, [r0, #32]
 800b206:	428c      	cmp	r4, r1
 800b208:	dd03      	ble.n	800b212 <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800b20a:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800b20e:	428c      	cmp	r4, r1
 800b210:	dbf0      	blt.n	800b1f4 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800b212:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800b214:	b9aa      	cbnz	r2, 800b242 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800b216:	2b03      	cmp	r3, #3
 800b218:	d10a      	bne.n	800b230 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800b21a:	0409      	lsls	r1, r1, #16
 800b21c:	6041      	str	r1, [r0, #4]
 800b21e:	e009      	b.n	800b234 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800b220:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800b222:	428b      	cmp	r3, r1
 800b224:	dbe6      	blt.n	800b1f4 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800b226:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800b22a:	428b      	cmp	r3, r1
 800b22c:	dce2      	bgt.n	800b1f4 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800b22e:	b9e2      	cbnz	r2, 800b26a <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800b230:	0409      	lsls	r1, r1, #16
 800b232:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 800b234:	2300      	movs	r3, #0
 800b236:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 800b238:	6183      	str	r3, [r0, #24]
{
 800b23a:	2001      	movs	r0, #1
}
 800b23c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b240:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800b242:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b246:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 800b248:	4c09      	ldr	r4, [pc, #36]	@ (800b270 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800b24a:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800b24c:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 800b250:	fba4 4303 	umull	r4, r3, r4, r3
 800b254:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800b256:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800b258:	eba1 0c0c 	sub.w	ip, r1, ip
 800b25c:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 800b260:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800b262:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 800b266:	6182      	str	r2, [r0, #24]
 800b268:	e7e7      	b.n	800b23a <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800b26a:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800b26e:	e7ea      	b.n	800b246 <STC_ExecRamp+0x62>
 800b270:	10624dd3 	.word	0x10624dd3

0800b274 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b274:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b276:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800b278:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b27a:	2a04      	cmp	r2, #4
{
 800b27c:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800b27e:	d012      	beq.n	800b2a6 <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800b280:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800b282:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800b284:	d908      	bls.n	800b298 <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800b286:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800b288:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800b28a:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800b28c:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800b28e:	2a03      	cmp	r2, #3
 800b290:	d011      	beq.n	800b2b6 <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800b292:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b294:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800b296:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800b298:	d1f9      	bne.n	800b28e <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b29a:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800b29e:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b2a0:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800b2a2:	60c3      	str	r3, [r0, #12]
 800b2a4:	e7f3      	b.n	800b28e <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800b2a6:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800b2a8:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800b2aa:	d911      	bls.n	800b2d0 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800b2ac:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800b2ae:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800b2b0:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800b2b2:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b2b4:	e7ed      	b.n	800b292 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800b2b6:	6960      	ldr	r0, [r4, #20]
 800b2b8:	f7ff ff28 	bl	800b10c <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800b2bc:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800b2c0:	b209      	sxth	r1, r1
 800b2c2:	6920      	ldr	r0, [r4, #16]
 800b2c4:	f7fe fda4 	bl	8009e10 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800b2c8:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800b2ca:	0405      	lsls	r5, r0, #16
 800b2cc:	60a5      	str	r5, [r4, #8]
}
 800b2ce:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800b2d0:	d1df      	bne.n	800b292 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b2d2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800b2d6:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800b2d8:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800b2da:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800b2dc:	e7d9      	b.n	800b292 <STC_CalcTorqueReference+0x1e>
 800b2de:	bf00      	nop

0800b2e0 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800b2e0:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800b2e4:	4770      	bx	lr
 800b2e6:	bf00      	nop

0800b2e8 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 800b2e8:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 800b2ec:	b082      	sub	sp, #8
}
 800b2ee:	b002      	add	sp, #8
 800b2f0:	4770      	bx	lr
 800b2f2:	bf00      	nop

0800b2f4 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800b2f4:	b510      	push	{r4, lr}
 800b2f6:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800b2f8:	6940      	ldr	r0, [r0, #20]
 800b2fa:	f7ff ff07 	bl	800b10c <SPD_GetAvrgMecSpeedUnit>
 800b2fe:	0400      	lsls	r0, r0, #16
 800b300:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800b302:	bd10      	pop	{r4, pc}

0800b304 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800b304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800b308:	4604      	mov	r4, r0
{
 800b30a:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800b30c:	2800      	cmp	r0, #0
 800b30e:	f000 80cf 	beq.w	800b4b0 <STO_PLL_CalcElAngle+0x1ac>
 800b312:	2900      	cmp	r1, #0
 800b314:	f000 80cf 	beq.w	800b4b6 <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800b318:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800b31c:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800b31e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800b322:	429f      	cmp	r7, r3
 800b324:	f340 80d1 	ble.w	800b4ca <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800b328:	6683      	str	r3, [r0, #104]	@ 0x68
 800b32a:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b32c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b330:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b332:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b336:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800b338:	9201      	str	r2, [sp, #4]
 800b33a:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800b33e:	f2c0 80c1 	blt.w	800b4c4 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b342:	425b      	negs	r3, r3
 800b344:	429e      	cmp	r6, r3
 800b346:	f340 80bd 	ble.w	800b4c4 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b34a:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800b34e:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800b352:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800b356:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b35a:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800b35c:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b360:	f340 80b9 	ble.w	800b4d6 <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800b364:	6623      	str	r3, [r4, #96]	@ 0x60
 800b366:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800b368:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800b36c:	4543      	cmp	r3, r8
 800b36e:	f2c0 80a6 	blt.w	800b4be <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b372:	425b      	negs	r3, r3
 800b374:	4598      	cmp	r8, r3
 800b376:	f340 80a2 	ble.w	800b4be <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b37a:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b37c:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b380:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b382:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800b386:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b38a:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b38e:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b392:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b396:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b39a:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800b39c:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800b3a0:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800b3a4:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b3a8:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b3aa:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b3ac:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b3ae:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b3b0:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b3b2:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800b3b6:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b3ba:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b3be:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800b3c2:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b3c6:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800b3c8:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800b3cc:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800b3ce:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800b3d2:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800b3d6:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800b3da:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800b3dc:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800b3e0:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800b3e4:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800b3e8:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800b3ec:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800b3ee:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800b3f2:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800b3f6:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b3fa:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800b3fc:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800b400:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800b404:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800b408:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800b40c:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800b410:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b414:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800b418:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800b41c:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800b420:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800b424:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800b428:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800b42c:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800b430:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800b434:	2b00      	cmp	r3, #0
 800b436:	d154      	bne.n	800b4e2 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800b438:	2a00      	cmp	r2, #0
 800b43a:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800b43e:	bfa8      	it	ge
 800b440:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800b444:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800b448:	f7f7 fabe 	bl	80029c8 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b44c:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800b44e:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b452:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800b456:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800b458:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800b45c:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800b460:	f340 31cf 	sbfx	r1, r0, #15, #16
 800b464:	f345 35cf 	sbfx	r5, r5, #15, #16
 800b468:	1a69      	subs	r1, r5, r1
 800b46a:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800b46e:	f7fe fccf 	bl	8009e10 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800b472:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800b476:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800b47a:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800b47c:	3301      	adds	r3, #1
 800b47e:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800b480:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800b482:	bf12      	itee	ne
 800b484:	461a      	movne	r2, r3
 800b486:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800b488:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800b48a:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800b48e:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800b492:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800b496:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800b49a:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b49e:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800b4a0:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b4a2:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800b4a4:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b4a8:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800b4aa:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800b4ae:	80a0      	strh	r0, [r4, #4]
}
 800b4b0:	b009      	add	sp, #36	@ 0x24
 800b4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800b4b6:	4608      	mov	r0, r1
}
 800b4b8:	b009      	add	sp, #36	@ 0x24
 800b4ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b4be:	6663      	str	r3, [r4, #100]	@ 0x64
 800b4c0:	4698      	mov	r8, r3
 800b4c2:	e75a      	b.n	800b37a <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800b4c4:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800b4c6:	461e      	mov	r6, r3
 800b4c8:	e73f      	b.n	800b34a <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800b4ca:	425a      	negs	r2, r3
 800b4cc:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800b4ce:	bfdc      	itt	le
 800b4d0:	6682      	strle	r2, [r0, #104]	@ 0x68
 800b4d2:	4617      	movle	r7, r2
 800b4d4:	e72a      	b.n	800b32c <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800b4d6:	425a      	negs	r2, r3
 800b4d8:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800b4da:	bfdc      	itt	le
 800b4dc:	6622      	strle	r2, [r4, #96]	@ 0x60
 800b4de:	4691      	movle	r9, r2
 800b4e0:	e742      	b.n	800b368 <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800b4e2:	fa1f fa83 	uxth.w	sl, r3
 800b4e6:	e7ad      	b.n	800b444 <STO_PLL_CalcElAngle+0x140>

0800b4e8 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800b4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800b4ea:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b4ee:	2d00      	cmp	r5, #0
 800b4f0:	f000 809b 	beq.w	800b62a <STO_PLL_CalcAvrgMecSpeedUnit+0x142>
 800b4f4:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800b4f8:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800b4fc:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800b4fe:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800b502:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b506:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800b508:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b50a:	d1fa      	bne.n	800b502 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800b50c:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800b510:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800b514:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800b518:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b51c:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800b51e:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b522:	d1f7      	bne.n	800b514 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800b524:	fb9c f2f5 	sdiv	r2, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800b528:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800b52c:	17de      	asrs	r6, r3, #31
 800b52e:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800b532:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800b534:	fbac 4303 	umull	r4, r3, ip, r3
 800b538:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800b53c:	09e4      	lsrs	r4, r4, #7
 800b53e:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800b542:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800b544:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800b548:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b54c:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800b54e:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b552:	bfd8      	it	le
 800b554:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800b558:	69c5      	ldr	r5, [r0, #28]
 800b55a:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b55e:	bfc8      	it	gt
 800b560:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b564:	7845      	ldrb	r5, [r0, #1]
 800b566:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800b56a:	b21d      	sxth	r5, r3
 800b56c:	800d      	strh	r5, [r1, #0]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800b56e:	2700      	movs	r7, #0
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800b570:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800b572:	f880 c0f5 	strb.w	ip, [r0, #245]	@ 0xf5
    if (false == pHandle->IsAlgorithmConverged)
 800b576:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800b57a:	b996      	cbnz	r6, 800b5a2 <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
    if (false == pHandle->IsAlgorithmConverged)
 800b57c:	2d00      	cmp	r5, #0
 800b57e:	d049      	beq.n	800b614 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800b580:	4294      	cmp	r4, r2
 800b582:	dc44      	bgt.n	800b60e <STO_PLL_CalcAvrgMecSpeedUnit+0x126>
        pHandle->ReliabilityCounter++;
 800b584:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800b588:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 800b58a:	3301      	adds	r3, #1
 800b58c:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800b58e:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 800b590:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800b594:	d33e      	bcc.n	800b614 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
          pHandle->ReliabilityCounter = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b59c:	7002      	strb	r2, [r0, #0]
}
 800b59e:	4618      	mov	r0, r3
 800b5a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800b5a2:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800b5a4:	f8b0 611a 	ldrh.w	r6, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800b5a8:	bfb8      	it	lt
 800b5aa:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800b5ac:	429e      	cmp	r6, r3
 800b5ae:	dd35      	ble.n	800b61c <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800b5b0:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800b5b4:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800b5b8:	fb06 fc06 	mul.w	ip, r6, r6
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800b5bc:	f890 6118 	ldrb.w	r6, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 800b5c0:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800b5c4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800b5c8:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800b5cc:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800b5d0:	fb03 f606 	mul.w	r6, r3, r6
 800b5d4:	2e00      	cmp	r6, #0
 800b5d6:	bfb8      	it	lt
 800b5d8:	363f      	addlt	r6, #63	@ 0x3f
 800b5da:	11b6      	asrs	r6, r6, #6
        wEstBemfSq *= wEstBemf;
 800b5dc:	fb06 f303 	mul.w	r3, r6, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	461e      	mov	r6, r3
 800b5e4:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 800b5e8:	bfb8      	it	lt
 800b5ea:	f103 063f 	addlt.w	r6, r3, #63	@ 0x3f
 800b5ee:	11b6      	asrs	r6, r6, #6
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800b5f0:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800b5f4:	fb0c 3316 	mls	r3, ip, r6, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800b5f8:	429f      	cmp	r7, r3
 800b5fa:	bfd4      	ite	le
 800b5fc:	2600      	movle	r6, #0
 800b5fe:	2601      	movgt	r6, #1
 800b600:	f880 60f9 	strb.w	r6, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800b604:	b135      	cbz	r5, 800b614 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800b606:	4294      	cmp	r4, r2
 800b608:	ddbc      	ble.n	800b584 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800b60a:	429f      	cmp	r7, r3
 800b60c:	ddba      	ble.n	800b584 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 800b60e:	2300      	movs	r3, #0
 800b610:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800b614:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800b618:	f7ff bd7c 	b.w	800b114 <SPD_IsMecSpeedReliable>
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800b61c:	e9c0 773f 	strd	r7, r7, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800b620:	f880 70f9 	strb.w	r7, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800b624:	2d00      	cmp	r5, #0
 800b626:	d1ad      	bne.n	800b584 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800b628:	e7f4      	b.n	800b614 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800b62a:	462a      	mov	r2, r5
 800b62c:	462b      	mov	r3, r5
 800b62e:	462e      	mov	r6, r5
 800b630:	46ae      	mov	lr, r5
 800b632:	e77c      	b.n	800b52e <STO_PLL_CalcAvrgMecSpeedUnit+0x46>

0800b634 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800b634:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800b638:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800b63c:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b640:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800b644:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b646:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800b64a:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800b64e:	ebac 0101 	sub.w	r1, ip, r1
 800b652:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b654:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800b656:	b959      	cbnz	r1, 800b670 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800b658:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800b65c:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800b65e:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800b662:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800b666:	4113      	asrs	r3, r2
}
 800b668:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800b66c:	81c3      	strh	r3, [r0, #14]
}
 800b66e:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800b670:	440a      	add	r2, r1
 800b672:	b291      	uxth	r1, r2
 800b674:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800b676:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800b678:	bfdc      	itt	le
 800b67a:	eba1 010c 	suble.w	r1, r1, ip
 800b67e:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800b680:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800b684:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800b688:	1a9b      	subs	r3, r3, r2
 800b68a:	e7e8      	b.n	800b65e <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800b68c <STO_PLL_Clear>:
{
 800b68c:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800b68e:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800b692:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800b694:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800b698:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800b69c:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800b6a0:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800b6a2:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800b6a4:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800b6a6:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800b6aa:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800b6ae:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800b6b2:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800b6b6:	b11a      	cbz	r2, 800b6c0 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800b6b8:	0052      	lsls	r2, r2, #1
 800b6ba:	3074      	adds	r0, #116	@ 0x74
 800b6bc:	f000 fa28 	bl	800bb10 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800b6c0:	2100      	movs	r1, #0
 800b6c2:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800b6c6:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800b6ca:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800b6ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800b6d2:	f7fe bb69 	b.w	8009da8 <PID_SetIntegralTerm>
 800b6d6:	bf00      	nop

0800b6d8 <STO_PLL_Init>:
{
 800b6d8:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800b6da:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800b6de:	4b19      	ldr	r3, [pc, #100]	@ (800b744 <STO_PLL_Init+0x6c>)
 800b6e0:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800b6e4:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800b6e8:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800b6ea:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800b6ec:	fb93 f3fe 	sdiv	r3, r3, lr
 800b6f0:	b21b      	sxth	r3, r3
{
 800b6f2:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800b6f4:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800b6f8:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800b6fa:	b30b      	cbz	r3, 800b740 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800b6fc:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800b6fe:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800b702:	f102 0c01 	add.w	ip, r2, #1
 800b706:	105b      	asrs	r3, r3, #1
 800b708:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800b70a:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800b70e:	fa1f f28c 	uxth.w	r2, ip
 800b712:	d1f4      	bne.n	800b6fe <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800b714:	b20a      	sxth	r2, r1
 800b716:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800b718:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800b71c:	480a      	ldr	r0, [pc, #40]	@ (800b748 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800b71e:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800b720:	17cb      	asrs	r3, r1, #31
 800b722:	fb80 0101 	smull	r0, r1, r0, r1
 800b726:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800b72a:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800b72c:	4620      	mov	r0, r4
 800b72e:	f7ff ffad 	bl	800b68c <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800b732:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800b736:	f7fe fb23 	bl	8009d80 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800b73a:	2300      	movs	r3, #0
 800b73c:	8263      	strh	r3, [r4, #18]
}
 800b73e:	bd10      	pop	{r4, pc}
 800b740:	4671      	mov	r1, lr
 800b742:	e7eb      	b.n	800b71c <STO_PLL_Init+0x44>
 800b744:	000fea5e 	.word	0x000fea5e
 800b748:	06488dc5 	.word	0x06488dc5

0800b74c <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 800b74c:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800b750:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800b752:	b112      	cbz	r2, 800b75a <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b754:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800b758:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800b75a:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800b75e:	b128      	cbz	r0, 800b76c <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800b760:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b762:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800b764:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b768:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800b76a:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800b76c:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b770:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800b774:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800b776:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800b77a:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800b77e:	4614      	mov	r4, r2
      if (wtemp > 0)
 800b780:	dd38      	ble.n	800b7f4 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800b782:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800b786:	bfbc      	itt	lt
 800b788:	f1cc 0c00 	rsblt	ip, ip, #0
 800b78c:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800b790:	2a00      	cmp	r2, #0
 800b792:	db34      	blt.n	800b7fe <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800b794:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800b798:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800b79c:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800b7a0:	b349      	cbz	r1, 800b7f6 <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800b7a2:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800b7a6:	fa1f f18c 	uxth.w	r1, ip
 800b7aa:	428d      	cmp	r5, r1
 800b7ac:	d223      	bcs.n	800b7f6 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800b7ae:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800b7b2:	2a00      	cmp	r2, #0
 800b7b4:	bfb8      	it	lt
 800b7b6:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800b7b8:	f342 120f 	sbfx	r2, r2, #4, #16
 800b7bc:	4594      	cmp	ip, r2
 800b7be:	db1a      	blt.n	800b7f6 <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800b7c0:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800b7c4:	f1be 0f00 	cmp.w	lr, #0
 800b7c8:	bfb8      	it	lt
 800b7ca:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800b7ce:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800b7d2:	45f4      	cmp	ip, lr
 800b7d4:	dc0f      	bgt.n	800b7f6 <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800b7d6:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800b7da:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800b7de:	3201      	adds	r2, #1
 800b7e0:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800b7e2:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800b7e4:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800b7e8:	d804      	bhi.n	800b7f4 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800b7ea:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b7ec:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800b7ee:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800b7f2:	701a      	strb	r2, [r3, #0]
}
 800b7f4:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800b7f6:	2200      	movs	r2, #0
 800b7f8:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 800b7fc:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800b7fe:	4252      	negs	r2, r2
 800b800:	b212      	sxth	r2, r2
 800b802:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800b804:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800b808:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 800b80c:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800b80e:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800b812:	2900      	cmp	r1, #0
 800b814:	d0ef      	beq.n	800b7f6 <STO_PLL_IsObserverConverged+0xaa>
 800b816:	e7c4      	b.n	800b7a2 <STO_PLL_IsObserverConverged+0x56>

0800b818 <STO_PLL_GetEstimatedBemf>:
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
}
 800b818:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 800b81a:	b082      	sub	sp, #8
}
 800b81c:	b002      	add	sp, #8
 800b81e:	4770      	bx	lr

0800b820 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800b820:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800b822:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b824:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800b828:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800b82c:	410a      	asrs	r2, r1
  return (iaux);
 800b82e:	410b      	asrs	r3, r1
 800b830:	b292      	uxth	r2, r2
 800b832:	f362 000f 	bfi	r0, r2, #0, #16
 800b836:	b29b      	uxth	r3, r3
{
 800b838:	b082      	sub	sp, #8
  return (iaux);
 800b83a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800b83e:	b002      	add	sp, #8
 800b840:	4770      	bx	lr
 800b842:	bf00      	nop

0800b844 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800b844:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800b848:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800b84a:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800b84e:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b850:	4770      	bx	lr
 800b852:	bf00      	nop

0800b854 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800b854:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800b856:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b858:	4770      	bx	lr
 800b85a:	bf00      	nop

0800b85c <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800b85c:	6800      	ldr	r0, [r0, #0]
 800b85e:	2100      	movs	r1, #0
 800b860:	3034      	adds	r0, #52	@ 0x34
 800b862:	f7fe baa1 	b.w	8009da8 <PID_SetIntegralTerm>
 800b866:	bf00      	nop

0800b868 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800b868:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800b86a:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800b86e:	4770      	bx	lr

0800b870 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800b870:	6803      	ldr	r3, [r0, #0]
 800b872:	2201      	movs	r2, #1
 800b874:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop

0800b87c <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800b87c:	6803      	ldr	r3, [r0, #0]
 800b87e:	2201      	movs	r2, #1
 800b880:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b884:	4770      	bx	lr
 800b886:	bf00      	nop

0800b888 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800b888:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800b88c:	4770      	bx	lr
 800b88e:	bf00      	nop

0800b890 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b890:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b892:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800b894:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800b896:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800b89a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800b89c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800b89e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800b8a0:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800b8a2:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800b8a4:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800b8a6:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800b8a8:	4770      	bx	lr
 800b8aa:	bf00      	nop

0800b8ac <VSS_Init>:
{
 800b8ac:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800b8ae:	f7ff ffef 	bl	800b890 <VSS_Clear>
}
 800b8b2:	bd08      	pop	{r3, pc}

0800b8b4 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800b8b4:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800b8b8:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800b8ba:	b11a      	cbz	r2, 800b8c4 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800b8bc:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800b8c0:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800b8c2:	4770      	bx	lr
{
 800b8c4:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b8c6:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800b8ca:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b8cc:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800b8ce:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b8d2:	785a      	ldrb	r2, [r3, #1]
 800b8d4:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b8d8:	4460      	add	r0, ip
 800b8da:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b8de:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800b8e0:	b200      	sxth	r0, r0
 800b8e2:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800b8e4:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800b8e6:	b1fc      	cbz	r4, 800b928 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800b8e8:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800b8ec:	b1f2      	cbz	r2, 800b92c <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800b8ee:	3a01      	subs	r2, #1
 800b8f0:	b212      	sxth	r2, r2
 800b8f2:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800b8f4:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800b8f8:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800b8fa:	db26      	blt.n	800b94a <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800b8fc:	eba1 0e0e 	sub.w	lr, r1, lr
 800b900:	fa0f fe8e 	sxth.w	lr, lr
 800b904:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800b906:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800b90a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800b90e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800b912:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800b916:	fb12 f205 	smulbb	r2, r2, r5
 800b91a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800b91c:	db0e      	blt.n	800b93c <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800b91e:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800b920:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800b922:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800b926:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800b928:	8098      	strh	r0, [r3, #4]
}
 800b92a:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800b92c:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800b930:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800b932:	2401      	movs	r4, #1
 800b934:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800b938:	8098      	strh	r0, [r3, #4]
}
 800b93a:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800b93c:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800b940:	2c00      	cmp	r4, #0
 800b942:	d0f1      	beq.n	800b928 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800b944:	440a      	add	r2, r1
 800b946:	b210      	sxth	r0, r2
 800b948:	e7ee      	b.n	800b928 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800b94a:	ebae 0e01 	sub.w	lr, lr, r1
 800b94e:	fa0f fe8e 	sxth.w	lr, lr
 800b952:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800b956:	e7d6      	b.n	800b906 <VSS_CalcElAngle+0x52>

0800b958 <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800b958:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800b95a:	2a01      	cmp	r2, #1
{
 800b95c:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800b95e:	d922      	bls.n	800b9a6 <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800b960:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b962:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800b964:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b966:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b968:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800b96a:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b96e:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800b970:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b972:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b976:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800b978:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b97c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b980:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800b984:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800b986:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800b98a:	b212      	sxth	r2, r2
 800b98c:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800b98e:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800b990:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800b992:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800b994:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800b998:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800b99a:	b970      	cbnz	r0, 800b9ba <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b99c:	78da      	ldrb	r2, [r3, #3]
 800b99e:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800b9a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b9a4:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800b9a6:	d00d      	beq.n	800b9c4 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b9a8:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800b9ac:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800b9b0:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800b9b2:	bb00      	cbnz	r0, 800b9f6 <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800b9b4:	78da      	ldrb	r2, [r3, #3]
 800b9b6:	701a      	strb	r2, [r3, #0]
}
 800b9b8:	4770      	bx	lr
 800b9ba:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff bba8 	b.w	800b114 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800b9c4:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800b9c8:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b9cc:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b9ce:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800b9d0:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b9d4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800b9d8:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800b9da:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800b9de:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b9e2:	785a      	ldrb	r2, [r3, #1]
 800b9e4:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800b9e8:	2000      	movs	r0, #0
 800b9ea:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800b9ec:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800b9f0:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d0de      	beq.n	800b9b4 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff bb8c 	b.w	800b114 <SPD_IsMecSpeedReliable>

0800b9fc <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800b9fc:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800ba00:	b9a3      	cbnz	r3, 800ba2c <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800ba02:	8b43      	ldrh	r3, [r0, #26]
{
 800ba04:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800ba06:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800ba08:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800ba0c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800ba10:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800ba14:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800ba16:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800ba1a:	b942      	cbnz	r2, 800ba2e <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800ba1c:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800ba20:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800ba22:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800ba26:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ba28:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800ba2a:	bd10      	pop	{r4, pc}
 800ba2c:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800ba2e:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800ba30:	fb02 f303 	mul.w	r3, r2, r3
 800ba34:	4a0e      	ldr	r2, [pc, #56]	@ (800ba70 <VSS_SetMecAcceleration+0x74>)
 800ba36:	fba2 2303 	umull	r2, r3, r2, r3
 800ba3a:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800ba3e:	3301      	adds	r3, #1
 800ba40:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800ba42:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800ba46:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800ba48:	b91b      	cbnz	r3, 800ba52 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800ba4a:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ba4c:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800ba4e:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800ba50:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800ba52:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800ba56:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800ba5a:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800ba5e:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800ba60:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800ba64:	fb0e f303 	mul.w	r3, lr, r3
 800ba68:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800ba6a:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800ba6c:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800ba6e:	e7ef      	b.n	800ba50 <VSS_SetMecAcceleration+0x54>
 800ba70:	10624dd3 	.word	0x10624dd3

0800ba74 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800ba74:	b151      	cbz	r1, 800ba8c <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800ba76:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800ba7a:	2201      	movs	r2, #1
 800ba7c:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800ba80:	b923      	cbnz	r3, 800ba8c <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800ba82:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800ba86:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800ba88:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800ba8a:	4770      	bx	lr
  bool bAux = true;
 800ba8c:	2001      	movs	r0, #1
 800ba8e:	4770      	bx	lr

0800ba90 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800ba90:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop

0800ba98 <_vsniprintf_r>:
 800ba98:	b530      	push	{r4, r5, lr}
 800ba9a:	4614      	mov	r4, r2
 800ba9c:	2c00      	cmp	r4, #0
 800ba9e:	b09b      	sub	sp, #108	@ 0x6c
 800baa0:	4605      	mov	r5, r0
 800baa2:	461a      	mov	r2, r3
 800baa4:	da05      	bge.n	800bab2 <_vsniprintf_r+0x1a>
 800baa6:	238b      	movs	r3, #139	@ 0x8b
 800baa8:	6003      	str	r3, [r0, #0]
 800baaa:	f04f 30ff 	mov.w	r0, #4294967295
 800baae:	b01b      	add	sp, #108	@ 0x6c
 800bab0:	bd30      	pop	{r4, r5, pc}
 800bab2:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bab6:	f8ad 300c 	strh.w	r3, [sp, #12]
 800baba:	f04f 0300 	mov.w	r3, #0
 800babe:	9319      	str	r3, [sp, #100]	@ 0x64
 800bac0:	bf14      	ite	ne
 800bac2:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bac6:	4623      	moveq	r3, r4
 800bac8:	9302      	str	r3, [sp, #8]
 800baca:	9305      	str	r3, [sp, #20]
 800bacc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800bad0:	9100      	str	r1, [sp, #0]
 800bad2:	9104      	str	r1, [sp, #16]
 800bad4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800bad8:	4669      	mov	r1, sp
 800bada:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800badc:	f000 f9ae 	bl	800be3c <_svfiprintf_r>
 800bae0:	1c43      	adds	r3, r0, #1
 800bae2:	bfbc      	itt	lt
 800bae4:	238b      	movlt	r3, #139	@ 0x8b
 800bae6:	602b      	strlt	r3, [r5, #0]
 800bae8:	2c00      	cmp	r4, #0
 800baea:	d0e0      	beq.n	800baae <_vsniprintf_r+0x16>
 800baec:	9b00      	ldr	r3, [sp, #0]
 800baee:	2200      	movs	r2, #0
 800baf0:	701a      	strb	r2, [r3, #0]
 800baf2:	e7dc      	b.n	800baae <_vsniprintf_r+0x16>

0800baf4 <vsniprintf>:
 800baf4:	b507      	push	{r0, r1, r2, lr}
 800baf6:	9300      	str	r3, [sp, #0]
 800baf8:	4613      	mov	r3, r2
 800bafa:	460a      	mov	r2, r1
 800bafc:	4601      	mov	r1, r0
 800bafe:	4803      	ldr	r0, [pc, #12]	@ (800bb0c <vsniprintf+0x18>)
 800bb00:	6800      	ldr	r0, [r0, #0]
 800bb02:	f7ff ffc9 	bl	800ba98 <_vsniprintf_r>
 800bb06:	b003      	add	sp, #12
 800bb08:	f85d fb04 	ldr.w	pc, [sp], #4
 800bb0c:	200004fc 	.word	0x200004fc

0800bb10 <memset>:
 800bb10:	4402      	add	r2, r0
 800bb12:	4603      	mov	r3, r0
 800bb14:	4293      	cmp	r3, r2
 800bb16:	d100      	bne.n	800bb1a <memset+0xa>
 800bb18:	4770      	bx	lr
 800bb1a:	f803 1b01 	strb.w	r1, [r3], #1
 800bb1e:	e7f9      	b.n	800bb14 <memset+0x4>

0800bb20 <__errno>:
 800bb20:	4b01      	ldr	r3, [pc, #4]	@ (800bb28 <__errno+0x8>)
 800bb22:	6818      	ldr	r0, [r3, #0]
 800bb24:	4770      	bx	lr
 800bb26:	bf00      	nop
 800bb28:	200004fc 	.word	0x200004fc

0800bb2c <__libc_init_array>:
 800bb2c:	b570      	push	{r4, r5, r6, lr}
 800bb2e:	4d0d      	ldr	r5, [pc, #52]	@ (800bb64 <__libc_init_array+0x38>)
 800bb30:	4c0d      	ldr	r4, [pc, #52]	@ (800bb68 <__libc_init_array+0x3c>)
 800bb32:	1b64      	subs	r4, r4, r5
 800bb34:	10a4      	asrs	r4, r4, #2
 800bb36:	2600      	movs	r6, #0
 800bb38:	42a6      	cmp	r6, r4
 800bb3a:	d109      	bne.n	800bb50 <__libc_init_array+0x24>
 800bb3c:	4d0b      	ldr	r5, [pc, #44]	@ (800bb6c <__libc_init_array+0x40>)
 800bb3e:	4c0c      	ldr	r4, [pc, #48]	@ (800bb70 <__libc_init_array+0x44>)
 800bb40:	f000 fc64 	bl	800c40c <_init>
 800bb44:	1b64      	subs	r4, r4, r5
 800bb46:	10a4      	asrs	r4, r4, #2
 800bb48:	2600      	movs	r6, #0
 800bb4a:	42a6      	cmp	r6, r4
 800bb4c:	d105      	bne.n	800bb5a <__libc_init_array+0x2e>
 800bb4e:	bd70      	pop	{r4, r5, r6, pc}
 800bb50:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb54:	4798      	blx	r3
 800bb56:	3601      	adds	r6, #1
 800bb58:	e7ee      	b.n	800bb38 <__libc_init_array+0xc>
 800bb5a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bb5e:	4798      	blx	r3
 800bb60:	3601      	adds	r6, #1
 800bb62:	e7f2      	b.n	800bb4a <__libc_init_array+0x1e>
 800bb64:	0800ceb0 	.word	0x0800ceb0
 800bb68:	0800ceb0 	.word	0x0800ceb0
 800bb6c:	0800ceb0 	.word	0x0800ceb0
 800bb70:	0800ceb4 	.word	0x0800ceb4

0800bb74 <__retarget_lock_acquire_recursive>:
 800bb74:	4770      	bx	lr

0800bb76 <__retarget_lock_release_recursive>:
 800bb76:	4770      	bx	lr

0800bb78 <memcpy>:
 800bb78:	440a      	add	r2, r1
 800bb7a:	4291      	cmp	r1, r2
 800bb7c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bb80:	d100      	bne.n	800bb84 <memcpy+0xc>
 800bb82:	4770      	bx	lr
 800bb84:	b510      	push	{r4, lr}
 800bb86:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bb8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bb8e:	4291      	cmp	r1, r2
 800bb90:	d1f9      	bne.n	800bb86 <memcpy+0xe>
 800bb92:	bd10      	pop	{r4, pc}

0800bb94 <_free_r>:
 800bb94:	b538      	push	{r3, r4, r5, lr}
 800bb96:	4605      	mov	r5, r0
 800bb98:	2900      	cmp	r1, #0
 800bb9a:	d041      	beq.n	800bc20 <_free_r+0x8c>
 800bb9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bba0:	1f0c      	subs	r4, r1, #4
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	bfb8      	it	lt
 800bba6:	18e4      	addlt	r4, r4, r3
 800bba8:	f000 f8e0 	bl	800bd6c <__malloc_lock>
 800bbac:	4a1d      	ldr	r2, [pc, #116]	@ (800bc24 <_free_r+0x90>)
 800bbae:	6813      	ldr	r3, [r2, #0]
 800bbb0:	b933      	cbnz	r3, 800bbc0 <_free_r+0x2c>
 800bbb2:	6063      	str	r3, [r4, #4]
 800bbb4:	6014      	str	r4, [r2, #0]
 800bbb6:	4628      	mov	r0, r5
 800bbb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bbbc:	f000 b8dc 	b.w	800bd78 <__malloc_unlock>
 800bbc0:	42a3      	cmp	r3, r4
 800bbc2:	d908      	bls.n	800bbd6 <_free_r+0x42>
 800bbc4:	6820      	ldr	r0, [r4, #0]
 800bbc6:	1821      	adds	r1, r4, r0
 800bbc8:	428b      	cmp	r3, r1
 800bbca:	bf01      	itttt	eq
 800bbcc:	6819      	ldreq	r1, [r3, #0]
 800bbce:	685b      	ldreq	r3, [r3, #4]
 800bbd0:	1809      	addeq	r1, r1, r0
 800bbd2:	6021      	streq	r1, [r4, #0]
 800bbd4:	e7ed      	b.n	800bbb2 <_free_r+0x1e>
 800bbd6:	461a      	mov	r2, r3
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	b10b      	cbz	r3, 800bbe0 <_free_r+0x4c>
 800bbdc:	42a3      	cmp	r3, r4
 800bbde:	d9fa      	bls.n	800bbd6 <_free_r+0x42>
 800bbe0:	6811      	ldr	r1, [r2, #0]
 800bbe2:	1850      	adds	r0, r2, r1
 800bbe4:	42a0      	cmp	r0, r4
 800bbe6:	d10b      	bne.n	800bc00 <_free_r+0x6c>
 800bbe8:	6820      	ldr	r0, [r4, #0]
 800bbea:	4401      	add	r1, r0
 800bbec:	1850      	adds	r0, r2, r1
 800bbee:	4283      	cmp	r3, r0
 800bbf0:	6011      	str	r1, [r2, #0]
 800bbf2:	d1e0      	bne.n	800bbb6 <_free_r+0x22>
 800bbf4:	6818      	ldr	r0, [r3, #0]
 800bbf6:	685b      	ldr	r3, [r3, #4]
 800bbf8:	6053      	str	r3, [r2, #4]
 800bbfa:	4408      	add	r0, r1
 800bbfc:	6010      	str	r0, [r2, #0]
 800bbfe:	e7da      	b.n	800bbb6 <_free_r+0x22>
 800bc00:	d902      	bls.n	800bc08 <_free_r+0x74>
 800bc02:	230c      	movs	r3, #12
 800bc04:	602b      	str	r3, [r5, #0]
 800bc06:	e7d6      	b.n	800bbb6 <_free_r+0x22>
 800bc08:	6820      	ldr	r0, [r4, #0]
 800bc0a:	1821      	adds	r1, r4, r0
 800bc0c:	428b      	cmp	r3, r1
 800bc0e:	bf04      	itt	eq
 800bc10:	6819      	ldreq	r1, [r3, #0]
 800bc12:	685b      	ldreq	r3, [r3, #4]
 800bc14:	6063      	str	r3, [r4, #4]
 800bc16:	bf04      	itt	eq
 800bc18:	1809      	addeq	r1, r1, r0
 800bc1a:	6021      	streq	r1, [r4, #0]
 800bc1c:	6054      	str	r4, [r2, #4]
 800bc1e:	e7ca      	b.n	800bbb6 <_free_r+0x22>
 800bc20:	bd38      	pop	{r3, r4, r5, pc}
 800bc22:	bf00      	nop
 800bc24:	20001d68 	.word	0x20001d68

0800bc28 <sbrk_aligned>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	4e0f      	ldr	r6, [pc, #60]	@ (800bc68 <sbrk_aligned+0x40>)
 800bc2c:	460c      	mov	r4, r1
 800bc2e:	6831      	ldr	r1, [r6, #0]
 800bc30:	4605      	mov	r5, r0
 800bc32:	b911      	cbnz	r1, 800bc3a <sbrk_aligned+0x12>
 800bc34:	f000 fba4 	bl	800c380 <_sbrk_r>
 800bc38:	6030      	str	r0, [r6, #0]
 800bc3a:	4621      	mov	r1, r4
 800bc3c:	4628      	mov	r0, r5
 800bc3e:	f000 fb9f 	bl	800c380 <_sbrk_r>
 800bc42:	1c43      	adds	r3, r0, #1
 800bc44:	d103      	bne.n	800bc4e <sbrk_aligned+0x26>
 800bc46:	f04f 34ff 	mov.w	r4, #4294967295
 800bc4a:	4620      	mov	r0, r4
 800bc4c:	bd70      	pop	{r4, r5, r6, pc}
 800bc4e:	1cc4      	adds	r4, r0, #3
 800bc50:	f024 0403 	bic.w	r4, r4, #3
 800bc54:	42a0      	cmp	r0, r4
 800bc56:	d0f8      	beq.n	800bc4a <sbrk_aligned+0x22>
 800bc58:	1a21      	subs	r1, r4, r0
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f000 fb90 	bl	800c380 <_sbrk_r>
 800bc60:	3001      	adds	r0, #1
 800bc62:	d1f2      	bne.n	800bc4a <sbrk_aligned+0x22>
 800bc64:	e7ef      	b.n	800bc46 <sbrk_aligned+0x1e>
 800bc66:	bf00      	nop
 800bc68:	20001d64 	.word	0x20001d64

0800bc6c <_malloc_r>:
 800bc6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc70:	1ccd      	adds	r5, r1, #3
 800bc72:	f025 0503 	bic.w	r5, r5, #3
 800bc76:	3508      	adds	r5, #8
 800bc78:	2d0c      	cmp	r5, #12
 800bc7a:	bf38      	it	cc
 800bc7c:	250c      	movcc	r5, #12
 800bc7e:	2d00      	cmp	r5, #0
 800bc80:	4606      	mov	r6, r0
 800bc82:	db01      	blt.n	800bc88 <_malloc_r+0x1c>
 800bc84:	42a9      	cmp	r1, r5
 800bc86:	d904      	bls.n	800bc92 <_malloc_r+0x26>
 800bc88:	230c      	movs	r3, #12
 800bc8a:	6033      	str	r3, [r6, #0]
 800bc8c:	2000      	movs	r0, #0
 800bc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc92:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bd68 <_malloc_r+0xfc>
 800bc96:	f000 f869 	bl	800bd6c <__malloc_lock>
 800bc9a:	f8d8 3000 	ldr.w	r3, [r8]
 800bc9e:	461c      	mov	r4, r3
 800bca0:	bb44      	cbnz	r4, 800bcf4 <_malloc_r+0x88>
 800bca2:	4629      	mov	r1, r5
 800bca4:	4630      	mov	r0, r6
 800bca6:	f7ff ffbf 	bl	800bc28 <sbrk_aligned>
 800bcaa:	1c43      	adds	r3, r0, #1
 800bcac:	4604      	mov	r4, r0
 800bcae:	d158      	bne.n	800bd62 <_malloc_r+0xf6>
 800bcb0:	f8d8 4000 	ldr.w	r4, [r8]
 800bcb4:	4627      	mov	r7, r4
 800bcb6:	2f00      	cmp	r7, #0
 800bcb8:	d143      	bne.n	800bd42 <_malloc_r+0xd6>
 800bcba:	2c00      	cmp	r4, #0
 800bcbc:	d04b      	beq.n	800bd56 <_malloc_r+0xea>
 800bcbe:	6823      	ldr	r3, [r4, #0]
 800bcc0:	4639      	mov	r1, r7
 800bcc2:	4630      	mov	r0, r6
 800bcc4:	eb04 0903 	add.w	r9, r4, r3
 800bcc8:	f000 fb5a 	bl	800c380 <_sbrk_r>
 800bccc:	4581      	cmp	r9, r0
 800bcce:	d142      	bne.n	800bd56 <_malloc_r+0xea>
 800bcd0:	6821      	ldr	r1, [r4, #0]
 800bcd2:	1a6d      	subs	r5, r5, r1
 800bcd4:	4629      	mov	r1, r5
 800bcd6:	4630      	mov	r0, r6
 800bcd8:	f7ff ffa6 	bl	800bc28 <sbrk_aligned>
 800bcdc:	3001      	adds	r0, #1
 800bcde:	d03a      	beq.n	800bd56 <_malloc_r+0xea>
 800bce0:	6823      	ldr	r3, [r4, #0]
 800bce2:	442b      	add	r3, r5
 800bce4:	6023      	str	r3, [r4, #0]
 800bce6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcea:	685a      	ldr	r2, [r3, #4]
 800bcec:	bb62      	cbnz	r2, 800bd48 <_malloc_r+0xdc>
 800bcee:	f8c8 7000 	str.w	r7, [r8]
 800bcf2:	e00f      	b.n	800bd14 <_malloc_r+0xa8>
 800bcf4:	6822      	ldr	r2, [r4, #0]
 800bcf6:	1b52      	subs	r2, r2, r5
 800bcf8:	d420      	bmi.n	800bd3c <_malloc_r+0xd0>
 800bcfa:	2a0b      	cmp	r2, #11
 800bcfc:	d917      	bls.n	800bd2e <_malloc_r+0xc2>
 800bcfe:	1961      	adds	r1, r4, r5
 800bd00:	42a3      	cmp	r3, r4
 800bd02:	6025      	str	r5, [r4, #0]
 800bd04:	bf18      	it	ne
 800bd06:	6059      	strne	r1, [r3, #4]
 800bd08:	6863      	ldr	r3, [r4, #4]
 800bd0a:	bf08      	it	eq
 800bd0c:	f8c8 1000 	streq.w	r1, [r8]
 800bd10:	5162      	str	r2, [r4, r5]
 800bd12:	604b      	str	r3, [r1, #4]
 800bd14:	4630      	mov	r0, r6
 800bd16:	f000 f82f 	bl	800bd78 <__malloc_unlock>
 800bd1a:	f104 000b 	add.w	r0, r4, #11
 800bd1e:	1d23      	adds	r3, r4, #4
 800bd20:	f020 0007 	bic.w	r0, r0, #7
 800bd24:	1ac2      	subs	r2, r0, r3
 800bd26:	bf1c      	itt	ne
 800bd28:	1a1b      	subne	r3, r3, r0
 800bd2a:	50a3      	strne	r3, [r4, r2]
 800bd2c:	e7af      	b.n	800bc8e <_malloc_r+0x22>
 800bd2e:	6862      	ldr	r2, [r4, #4]
 800bd30:	42a3      	cmp	r3, r4
 800bd32:	bf0c      	ite	eq
 800bd34:	f8c8 2000 	streq.w	r2, [r8]
 800bd38:	605a      	strne	r2, [r3, #4]
 800bd3a:	e7eb      	b.n	800bd14 <_malloc_r+0xa8>
 800bd3c:	4623      	mov	r3, r4
 800bd3e:	6864      	ldr	r4, [r4, #4]
 800bd40:	e7ae      	b.n	800bca0 <_malloc_r+0x34>
 800bd42:	463c      	mov	r4, r7
 800bd44:	687f      	ldr	r7, [r7, #4]
 800bd46:	e7b6      	b.n	800bcb6 <_malloc_r+0x4a>
 800bd48:	461a      	mov	r2, r3
 800bd4a:	685b      	ldr	r3, [r3, #4]
 800bd4c:	42a3      	cmp	r3, r4
 800bd4e:	d1fb      	bne.n	800bd48 <_malloc_r+0xdc>
 800bd50:	2300      	movs	r3, #0
 800bd52:	6053      	str	r3, [r2, #4]
 800bd54:	e7de      	b.n	800bd14 <_malloc_r+0xa8>
 800bd56:	230c      	movs	r3, #12
 800bd58:	6033      	str	r3, [r6, #0]
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f000 f80c 	bl	800bd78 <__malloc_unlock>
 800bd60:	e794      	b.n	800bc8c <_malloc_r+0x20>
 800bd62:	6005      	str	r5, [r0, #0]
 800bd64:	e7d6      	b.n	800bd14 <_malloc_r+0xa8>
 800bd66:	bf00      	nop
 800bd68:	20001d68 	.word	0x20001d68

0800bd6c <__malloc_lock>:
 800bd6c:	4801      	ldr	r0, [pc, #4]	@ (800bd74 <__malloc_lock+0x8>)
 800bd6e:	f7ff bf01 	b.w	800bb74 <__retarget_lock_acquire_recursive>
 800bd72:	bf00      	nop
 800bd74:	20001d60 	.word	0x20001d60

0800bd78 <__malloc_unlock>:
 800bd78:	4801      	ldr	r0, [pc, #4]	@ (800bd80 <__malloc_unlock+0x8>)
 800bd7a:	f7ff befc 	b.w	800bb76 <__retarget_lock_release_recursive>
 800bd7e:	bf00      	nop
 800bd80:	20001d60 	.word	0x20001d60

0800bd84 <__ssputs_r>:
 800bd84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd88:	688e      	ldr	r6, [r1, #8]
 800bd8a:	461f      	mov	r7, r3
 800bd8c:	42be      	cmp	r6, r7
 800bd8e:	680b      	ldr	r3, [r1, #0]
 800bd90:	4682      	mov	sl, r0
 800bd92:	460c      	mov	r4, r1
 800bd94:	4690      	mov	r8, r2
 800bd96:	d82d      	bhi.n	800bdf4 <__ssputs_r+0x70>
 800bd98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bd9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bda0:	d026      	beq.n	800bdf0 <__ssputs_r+0x6c>
 800bda2:	6965      	ldr	r5, [r4, #20]
 800bda4:	6909      	ldr	r1, [r1, #16]
 800bda6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bdaa:	eba3 0901 	sub.w	r9, r3, r1
 800bdae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bdb2:	1c7b      	adds	r3, r7, #1
 800bdb4:	444b      	add	r3, r9
 800bdb6:	106d      	asrs	r5, r5, #1
 800bdb8:	429d      	cmp	r5, r3
 800bdba:	bf38      	it	cc
 800bdbc:	461d      	movcc	r5, r3
 800bdbe:	0553      	lsls	r3, r2, #21
 800bdc0:	d527      	bpl.n	800be12 <__ssputs_r+0x8e>
 800bdc2:	4629      	mov	r1, r5
 800bdc4:	f7ff ff52 	bl	800bc6c <_malloc_r>
 800bdc8:	4606      	mov	r6, r0
 800bdca:	b360      	cbz	r0, 800be26 <__ssputs_r+0xa2>
 800bdcc:	6921      	ldr	r1, [r4, #16]
 800bdce:	464a      	mov	r2, r9
 800bdd0:	f7ff fed2 	bl	800bb78 <memcpy>
 800bdd4:	89a3      	ldrh	r3, [r4, #12]
 800bdd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bdda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bdde:	81a3      	strh	r3, [r4, #12]
 800bde0:	6126      	str	r6, [r4, #16]
 800bde2:	6165      	str	r5, [r4, #20]
 800bde4:	444e      	add	r6, r9
 800bde6:	eba5 0509 	sub.w	r5, r5, r9
 800bdea:	6026      	str	r6, [r4, #0]
 800bdec:	60a5      	str	r5, [r4, #8]
 800bdee:	463e      	mov	r6, r7
 800bdf0:	42be      	cmp	r6, r7
 800bdf2:	d900      	bls.n	800bdf6 <__ssputs_r+0x72>
 800bdf4:	463e      	mov	r6, r7
 800bdf6:	6820      	ldr	r0, [r4, #0]
 800bdf8:	4632      	mov	r2, r6
 800bdfa:	4641      	mov	r1, r8
 800bdfc:	f000 faa6 	bl	800c34c <memmove>
 800be00:	68a3      	ldr	r3, [r4, #8]
 800be02:	1b9b      	subs	r3, r3, r6
 800be04:	60a3      	str	r3, [r4, #8]
 800be06:	6823      	ldr	r3, [r4, #0]
 800be08:	4433      	add	r3, r6
 800be0a:	6023      	str	r3, [r4, #0]
 800be0c:	2000      	movs	r0, #0
 800be0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be12:	462a      	mov	r2, r5
 800be14:	f000 fac4 	bl	800c3a0 <_realloc_r>
 800be18:	4606      	mov	r6, r0
 800be1a:	2800      	cmp	r0, #0
 800be1c:	d1e0      	bne.n	800bde0 <__ssputs_r+0x5c>
 800be1e:	6921      	ldr	r1, [r4, #16]
 800be20:	4650      	mov	r0, sl
 800be22:	f7ff feb7 	bl	800bb94 <_free_r>
 800be26:	230c      	movs	r3, #12
 800be28:	f8ca 3000 	str.w	r3, [sl]
 800be2c:	89a3      	ldrh	r3, [r4, #12]
 800be2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800be32:	81a3      	strh	r3, [r4, #12]
 800be34:	f04f 30ff 	mov.w	r0, #4294967295
 800be38:	e7e9      	b.n	800be0e <__ssputs_r+0x8a>
	...

0800be3c <_svfiprintf_r>:
 800be3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be40:	4698      	mov	r8, r3
 800be42:	898b      	ldrh	r3, [r1, #12]
 800be44:	061b      	lsls	r3, r3, #24
 800be46:	b09d      	sub	sp, #116	@ 0x74
 800be48:	4607      	mov	r7, r0
 800be4a:	460d      	mov	r5, r1
 800be4c:	4614      	mov	r4, r2
 800be4e:	d510      	bpl.n	800be72 <_svfiprintf_r+0x36>
 800be50:	690b      	ldr	r3, [r1, #16]
 800be52:	b973      	cbnz	r3, 800be72 <_svfiprintf_r+0x36>
 800be54:	2140      	movs	r1, #64	@ 0x40
 800be56:	f7ff ff09 	bl	800bc6c <_malloc_r>
 800be5a:	6028      	str	r0, [r5, #0]
 800be5c:	6128      	str	r0, [r5, #16]
 800be5e:	b930      	cbnz	r0, 800be6e <_svfiprintf_r+0x32>
 800be60:	230c      	movs	r3, #12
 800be62:	603b      	str	r3, [r7, #0]
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	b01d      	add	sp, #116	@ 0x74
 800be6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be6e:	2340      	movs	r3, #64	@ 0x40
 800be70:	616b      	str	r3, [r5, #20]
 800be72:	2300      	movs	r3, #0
 800be74:	9309      	str	r3, [sp, #36]	@ 0x24
 800be76:	2320      	movs	r3, #32
 800be78:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800be7c:	f8cd 800c 	str.w	r8, [sp, #12]
 800be80:	2330      	movs	r3, #48	@ 0x30
 800be82:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800c020 <_svfiprintf_r+0x1e4>
 800be86:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800be8a:	f04f 0901 	mov.w	r9, #1
 800be8e:	4623      	mov	r3, r4
 800be90:	469a      	mov	sl, r3
 800be92:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be96:	b10a      	cbz	r2, 800be9c <_svfiprintf_r+0x60>
 800be98:	2a25      	cmp	r2, #37	@ 0x25
 800be9a:	d1f9      	bne.n	800be90 <_svfiprintf_r+0x54>
 800be9c:	ebba 0b04 	subs.w	fp, sl, r4
 800bea0:	d00b      	beq.n	800beba <_svfiprintf_r+0x7e>
 800bea2:	465b      	mov	r3, fp
 800bea4:	4622      	mov	r2, r4
 800bea6:	4629      	mov	r1, r5
 800bea8:	4638      	mov	r0, r7
 800beaa:	f7ff ff6b 	bl	800bd84 <__ssputs_r>
 800beae:	3001      	adds	r0, #1
 800beb0:	f000 80a7 	beq.w	800c002 <_svfiprintf_r+0x1c6>
 800beb4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800beb6:	445a      	add	r2, fp
 800beb8:	9209      	str	r2, [sp, #36]	@ 0x24
 800beba:	f89a 3000 	ldrb.w	r3, [sl]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	f000 809f 	beq.w	800c002 <_svfiprintf_r+0x1c6>
 800bec4:	2300      	movs	r3, #0
 800bec6:	f04f 32ff 	mov.w	r2, #4294967295
 800beca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bece:	f10a 0a01 	add.w	sl, sl, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	9307      	str	r3, [sp, #28]
 800bed6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800beda:	931a      	str	r3, [sp, #104]	@ 0x68
 800bedc:	4654      	mov	r4, sl
 800bede:	2205      	movs	r2, #5
 800bee0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bee4:	484e      	ldr	r0, [pc, #312]	@ (800c020 <_svfiprintf_r+0x1e4>)
 800bee6:	f7f4 f99b 	bl	8000220 <memchr>
 800beea:	9a04      	ldr	r2, [sp, #16]
 800beec:	b9d8      	cbnz	r0, 800bf26 <_svfiprintf_r+0xea>
 800beee:	06d0      	lsls	r0, r2, #27
 800bef0:	bf44      	itt	mi
 800bef2:	2320      	movmi	r3, #32
 800bef4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bef8:	0711      	lsls	r1, r2, #28
 800befa:	bf44      	itt	mi
 800befc:	232b      	movmi	r3, #43	@ 0x2b
 800befe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bf02:	f89a 3000 	ldrb.w	r3, [sl]
 800bf06:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf08:	d015      	beq.n	800bf36 <_svfiprintf_r+0xfa>
 800bf0a:	9a07      	ldr	r2, [sp, #28]
 800bf0c:	4654      	mov	r4, sl
 800bf0e:	2000      	movs	r0, #0
 800bf10:	f04f 0c0a 	mov.w	ip, #10
 800bf14:	4621      	mov	r1, r4
 800bf16:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bf1a:	3b30      	subs	r3, #48	@ 0x30
 800bf1c:	2b09      	cmp	r3, #9
 800bf1e:	d94b      	bls.n	800bfb8 <_svfiprintf_r+0x17c>
 800bf20:	b1b0      	cbz	r0, 800bf50 <_svfiprintf_r+0x114>
 800bf22:	9207      	str	r2, [sp, #28]
 800bf24:	e014      	b.n	800bf50 <_svfiprintf_r+0x114>
 800bf26:	eba0 0308 	sub.w	r3, r0, r8
 800bf2a:	fa09 f303 	lsl.w	r3, r9, r3
 800bf2e:	4313      	orrs	r3, r2
 800bf30:	9304      	str	r3, [sp, #16]
 800bf32:	46a2      	mov	sl, r4
 800bf34:	e7d2      	b.n	800bedc <_svfiprintf_r+0xa0>
 800bf36:	9b03      	ldr	r3, [sp, #12]
 800bf38:	1d19      	adds	r1, r3, #4
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	9103      	str	r1, [sp, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	bfbb      	ittet	lt
 800bf42:	425b      	neglt	r3, r3
 800bf44:	f042 0202 	orrlt.w	r2, r2, #2
 800bf48:	9307      	strge	r3, [sp, #28]
 800bf4a:	9307      	strlt	r3, [sp, #28]
 800bf4c:	bfb8      	it	lt
 800bf4e:	9204      	strlt	r2, [sp, #16]
 800bf50:	7823      	ldrb	r3, [r4, #0]
 800bf52:	2b2e      	cmp	r3, #46	@ 0x2e
 800bf54:	d10a      	bne.n	800bf6c <_svfiprintf_r+0x130>
 800bf56:	7863      	ldrb	r3, [r4, #1]
 800bf58:	2b2a      	cmp	r3, #42	@ 0x2a
 800bf5a:	d132      	bne.n	800bfc2 <_svfiprintf_r+0x186>
 800bf5c:	9b03      	ldr	r3, [sp, #12]
 800bf5e:	1d1a      	adds	r2, r3, #4
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	9203      	str	r2, [sp, #12]
 800bf64:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bf68:	3402      	adds	r4, #2
 800bf6a:	9305      	str	r3, [sp, #20]
 800bf6c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800c030 <_svfiprintf_r+0x1f4>
 800bf70:	7821      	ldrb	r1, [r4, #0]
 800bf72:	2203      	movs	r2, #3
 800bf74:	4650      	mov	r0, sl
 800bf76:	f7f4 f953 	bl	8000220 <memchr>
 800bf7a:	b138      	cbz	r0, 800bf8c <_svfiprintf_r+0x150>
 800bf7c:	9b04      	ldr	r3, [sp, #16]
 800bf7e:	eba0 000a 	sub.w	r0, r0, sl
 800bf82:	2240      	movs	r2, #64	@ 0x40
 800bf84:	4082      	lsls	r2, r0
 800bf86:	4313      	orrs	r3, r2
 800bf88:	3401      	adds	r4, #1
 800bf8a:	9304      	str	r3, [sp, #16]
 800bf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf90:	4824      	ldr	r0, [pc, #144]	@ (800c024 <_svfiprintf_r+0x1e8>)
 800bf92:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bf96:	2206      	movs	r2, #6
 800bf98:	f7f4 f942 	bl	8000220 <memchr>
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d036      	beq.n	800c00e <_svfiprintf_r+0x1d2>
 800bfa0:	4b21      	ldr	r3, [pc, #132]	@ (800c028 <_svfiprintf_r+0x1ec>)
 800bfa2:	bb1b      	cbnz	r3, 800bfec <_svfiprintf_r+0x1b0>
 800bfa4:	9b03      	ldr	r3, [sp, #12]
 800bfa6:	3307      	adds	r3, #7
 800bfa8:	f023 0307 	bic.w	r3, r3, #7
 800bfac:	3308      	adds	r3, #8
 800bfae:	9303      	str	r3, [sp, #12]
 800bfb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bfb2:	4433      	add	r3, r6
 800bfb4:	9309      	str	r3, [sp, #36]	@ 0x24
 800bfb6:	e76a      	b.n	800be8e <_svfiprintf_r+0x52>
 800bfb8:	fb0c 3202 	mla	r2, ip, r2, r3
 800bfbc:	460c      	mov	r4, r1
 800bfbe:	2001      	movs	r0, #1
 800bfc0:	e7a8      	b.n	800bf14 <_svfiprintf_r+0xd8>
 800bfc2:	2300      	movs	r3, #0
 800bfc4:	3401      	adds	r4, #1
 800bfc6:	9305      	str	r3, [sp, #20]
 800bfc8:	4619      	mov	r1, r3
 800bfca:	f04f 0c0a 	mov.w	ip, #10
 800bfce:	4620      	mov	r0, r4
 800bfd0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bfd4:	3a30      	subs	r2, #48	@ 0x30
 800bfd6:	2a09      	cmp	r2, #9
 800bfd8:	d903      	bls.n	800bfe2 <_svfiprintf_r+0x1a6>
 800bfda:	2b00      	cmp	r3, #0
 800bfdc:	d0c6      	beq.n	800bf6c <_svfiprintf_r+0x130>
 800bfde:	9105      	str	r1, [sp, #20]
 800bfe0:	e7c4      	b.n	800bf6c <_svfiprintf_r+0x130>
 800bfe2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bfe6:	4604      	mov	r4, r0
 800bfe8:	2301      	movs	r3, #1
 800bfea:	e7f0      	b.n	800bfce <_svfiprintf_r+0x192>
 800bfec:	ab03      	add	r3, sp, #12
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	462a      	mov	r2, r5
 800bff2:	4b0e      	ldr	r3, [pc, #56]	@ (800c02c <_svfiprintf_r+0x1f0>)
 800bff4:	a904      	add	r1, sp, #16
 800bff6:	4638      	mov	r0, r7
 800bff8:	f3af 8000 	nop.w
 800bffc:	1c42      	adds	r2, r0, #1
 800bffe:	4606      	mov	r6, r0
 800c000:	d1d6      	bne.n	800bfb0 <_svfiprintf_r+0x174>
 800c002:	89ab      	ldrh	r3, [r5, #12]
 800c004:	065b      	lsls	r3, r3, #25
 800c006:	f53f af2d 	bmi.w	800be64 <_svfiprintf_r+0x28>
 800c00a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c00c:	e72c      	b.n	800be68 <_svfiprintf_r+0x2c>
 800c00e:	ab03      	add	r3, sp, #12
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	462a      	mov	r2, r5
 800c014:	4b05      	ldr	r3, [pc, #20]	@ (800c02c <_svfiprintf_r+0x1f0>)
 800c016:	a904      	add	r1, sp, #16
 800c018:	4638      	mov	r0, r7
 800c01a:	f000 f879 	bl	800c110 <_printf_i>
 800c01e:	e7ed      	b.n	800bffc <_svfiprintf_r+0x1c0>
 800c020:	0800ce74 	.word	0x0800ce74
 800c024:	0800ce7e 	.word	0x0800ce7e
 800c028:	00000000 	.word	0x00000000
 800c02c:	0800bd85 	.word	0x0800bd85
 800c030:	0800ce7a 	.word	0x0800ce7a

0800c034 <_printf_common>:
 800c034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c038:	4616      	mov	r6, r2
 800c03a:	4698      	mov	r8, r3
 800c03c:	688a      	ldr	r2, [r1, #8]
 800c03e:	690b      	ldr	r3, [r1, #16]
 800c040:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c044:	4293      	cmp	r3, r2
 800c046:	bfb8      	it	lt
 800c048:	4613      	movlt	r3, r2
 800c04a:	6033      	str	r3, [r6, #0]
 800c04c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c050:	4607      	mov	r7, r0
 800c052:	460c      	mov	r4, r1
 800c054:	b10a      	cbz	r2, 800c05a <_printf_common+0x26>
 800c056:	3301      	adds	r3, #1
 800c058:	6033      	str	r3, [r6, #0]
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	0699      	lsls	r1, r3, #26
 800c05e:	bf42      	ittt	mi
 800c060:	6833      	ldrmi	r3, [r6, #0]
 800c062:	3302      	addmi	r3, #2
 800c064:	6033      	strmi	r3, [r6, #0]
 800c066:	6825      	ldr	r5, [r4, #0]
 800c068:	f015 0506 	ands.w	r5, r5, #6
 800c06c:	d106      	bne.n	800c07c <_printf_common+0x48>
 800c06e:	f104 0a19 	add.w	sl, r4, #25
 800c072:	68e3      	ldr	r3, [r4, #12]
 800c074:	6832      	ldr	r2, [r6, #0]
 800c076:	1a9b      	subs	r3, r3, r2
 800c078:	42ab      	cmp	r3, r5
 800c07a:	dc26      	bgt.n	800c0ca <_printf_common+0x96>
 800c07c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c080:	6822      	ldr	r2, [r4, #0]
 800c082:	3b00      	subs	r3, #0
 800c084:	bf18      	it	ne
 800c086:	2301      	movne	r3, #1
 800c088:	0692      	lsls	r2, r2, #26
 800c08a:	d42b      	bmi.n	800c0e4 <_printf_common+0xb0>
 800c08c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c090:	4641      	mov	r1, r8
 800c092:	4638      	mov	r0, r7
 800c094:	47c8      	blx	r9
 800c096:	3001      	adds	r0, #1
 800c098:	d01e      	beq.n	800c0d8 <_printf_common+0xa4>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	6922      	ldr	r2, [r4, #16]
 800c09e:	f003 0306 	and.w	r3, r3, #6
 800c0a2:	2b04      	cmp	r3, #4
 800c0a4:	bf02      	ittt	eq
 800c0a6:	68e5      	ldreq	r5, [r4, #12]
 800c0a8:	6833      	ldreq	r3, [r6, #0]
 800c0aa:	1aed      	subeq	r5, r5, r3
 800c0ac:	68a3      	ldr	r3, [r4, #8]
 800c0ae:	bf0c      	ite	eq
 800c0b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c0b4:	2500      	movne	r5, #0
 800c0b6:	4293      	cmp	r3, r2
 800c0b8:	bfc4      	itt	gt
 800c0ba:	1a9b      	subgt	r3, r3, r2
 800c0bc:	18ed      	addgt	r5, r5, r3
 800c0be:	2600      	movs	r6, #0
 800c0c0:	341a      	adds	r4, #26
 800c0c2:	42b5      	cmp	r5, r6
 800c0c4:	d11a      	bne.n	800c0fc <_printf_common+0xc8>
 800c0c6:	2000      	movs	r0, #0
 800c0c8:	e008      	b.n	800c0dc <_printf_common+0xa8>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	4652      	mov	r2, sl
 800c0ce:	4641      	mov	r1, r8
 800c0d0:	4638      	mov	r0, r7
 800c0d2:	47c8      	blx	r9
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	d103      	bne.n	800c0e0 <_printf_common+0xac>
 800c0d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0e0:	3501      	adds	r5, #1
 800c0e2:	e7c6      	b.n	800c072 <_printf_common+0x3e>
 800c0e4:	18e1      	adds	r1, r4, r3
 800c0e6:	1c5a      	adds	r2, r3, #1
 800c0e8:	2030      	movs	r0, #48	@ 0x30
 800c0ea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c0ee:	4422      	add	r2, r4
 800c0f0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c0f4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c0f8:	3302      	adds	r3, #2
 800c0fa:	e7c7      	b.n	800c08c <_printf_common+0x58>
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	4622      	mov	r2, r4
 800c100:	4641      	mov	r1, r8
 800c102:	4638      	mov	r0, r7
 800c104:	47c8      	blx	r9
 800c106:	3001      	adds	r0, #1
 800c108:	d0e6      	beq.n	800c0d8 <_printf_common+0xa4>
 800c10a:	3601      	adds	r6, #1
 800c10c:	e7d9      	b.n	800c0c2 <_printf_common+0x8e>
	...

0800c110 <_printf_i>:
 800c110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c114:	7e0f      	ldrb	r7, [r1, #24]
 800c116:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c118:	2f78      	cmp	r7, #120	@ 0x78
 800c11a:	4691      	mov	r9, r2
 800c11c:	4680      	mov	r8, r0
 800c11e:	460c      	mov	r4, r1
 800c120:	469a      	mov	sl, r3
 800c122:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c126:	d807      	bhi.n	800c138 <_printf_i+0x28>
 800c128:	2f62      	cmp	r7, #98	@ 0x62
 800c12a:	d80a      	bhi.n	800c142 <_printf_i+0x32>
 800c12c:	2f00      	cmp	r7, #0
 800c12e:	f000 80d1 	beq.w	800c2d4 <_printf_i+0x1c4>
 800c132:	2f58      	cmp	r7, #88	@ 0x58
 800c134:	f000 80b8 	beq.w	800c2a8 <_printf_i+0x198>
 800c138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c13c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c140:	e03a      	b.n	800c1b8 <_printf_i+0xa8>
 800c142:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c146:	2b15      	cmp	r3, #21
 800c148:	d8f6      	bhi.n	800c138 <_printf_i+0x28>
 800c14a:	a101      	add	r1, pc, #4	@ (adr r1, 800c150 <_printf_i+0x40>)
 800c14c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c150:	0800c1a9 	.word	0x0800c1a9
 800c154:	0800c1bd 	.word	0x0800c1bd
 800c158:	0800c139 	.word	0x0800c139
 800c15c:	0800c139 	.word	0x0800c139
 800c160:	0800c139 	.word	0x0800c139
 800c164:	0800c139 	.word	0x0800c139
 800c168:	0800c1bd 	.word	0x0800c1bd
 800c16c:	0800c139 	.word	0x0800c139
 800c170:	0800c139 	.word	0x0800c139
 800c174:	0800c139 	.word	0x0800c139
 800c178:	0800c139 	.word	0x0800c139
 800c17c:	0800c2bb 	.word	0x0800c2bb
 800c180:	0800c1e7 	.word	0x0800c1e7
 800c184:	0800c275 	.word	0x0800c275
 800c188:	0800c139 	.word	0x0800c139
 800c18c:	0800c139 	.word	0x0800c139
 800c190:	0800c2dd 	.word	0x0800c2dd
 800c194:	0800c139 	.word	0x0800c139
 800c198:	0800c1e7 	.word	0x0800c1e7
 800c19c:	0800c139 	.word	0x0800c139
 800c1a0:	0800c139 	.word	0x0800c139
 800c1a4:	0800c27d 	.word	0x0800c27d
 800c1a8:	6833      	ldr	r3, [r6, #0]
 800c1aa:	1d1a      	adds	r2, r3, #4
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6032      	str	r2, [r6, #0]
 800c1b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c1b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	e09c      	b.n	800c2f6 <_printf_i+0x1e6>
 800c1bc:	6833      	ldr	r3, [r6, #0]
 800c1be:	6820      	ldr	r0, [r4, #0]
 800c1c0:	1d19      	adds	r1, r3, #4
 800c1c2:	6031      	str	r1, [r6, #0]
 800c1c4:	0606      	lsls	r6, r0, #24
 800c1c6:	d501      	bpl.n	800c1cc <_printf_i+0xbc>
 800c1c8:	681d      	ldr	r5, [r3, #0]
 800c1ca:	e003      	b.n	800c1d4 <_printf_i+0xc4>
 800c1cc:	0645      	lsls	r5, r0, #25
 800c1ce:	d5fb      	bpl.n	800c1c8 <_printf_i+0xb8>
 800c1d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c1d4:	2d00      	cmp	r5, #0
 800c1d6:	da03      	bge.n	800c1e0 <_printf_i+0xd0>
 800c1d8:	232d      	movs	r3, #45	@ 0x2d
 800c1da:	426d      	negs	r5, r5
 800c1dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c1e0:	4858      	ldr	r0, [pc, #352]	@ (800c344 <_printf_i+0x234>)
 800c1e2:	230a      	movs	r3, #10
 800c1e4:	e011      	b.n	800c20a <_printf_i+0xfa>
 800c1e6:	6821      	ldr	r1, [r4, #0]
 800c1e8:	6833      	ldr	r3, [r6, #0]
 800c1ea:	0608      	lsls	r0, r1, #24
 800c1ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800c1f0:	d402      	bmi.n	800c1f8 <_printf_i+0xe8>
 800c1f2:	0649      	lsls	r1, r1, #25
 800c1f4:	bf48      	it	mi
 800c1f6:	b2ad      	uxthmi	r5, r5
 800c1f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c1fa:	4852      	ldr	r0, [pc, #328]	@ (800c344 <_printf_i+0x234>)
 800c1fc:	6033      	str	r3, [r6, #0]
 800c1fe:	bf14      	ite	ne
 800c200:	230a      	movne	r3, #10
 800c202:	2308      	moveq	r3, #8
 800c204:	2100      	movs	r1, #0
 800c206:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c20a:	6866      	ldr	r6, [r4, #4]
 800c20c:	60a6      	str	r6, [r4, #8]
 800c20e:	2e00      	cmp	r6, #0
 800c210:	db05      	blt.n	800c21e <_printf_i+0x10e>
 800c212:	6821      	ldr	r1, [r4, #0]
 800c214:	432e      	orrs	r6, r5
 800c216:	f021 0104 	bic.w	r1, r1, #4
 800c21a:	6021      	str	r1, [r4, #0]
 800c21c:	d04b      	beq.n	800c2b6 <_printf_i+0x1a6>
 800c21e:	4616      	mov	r6, r2
 800c220:	fbb5 f1f3 	udiv	r1, r5, r3
 800c224:	fb03 5711 	mls	r7, r3, r1, r5
 800c228:	5dc7      	ldrb	r7, [r0, r7]
 800c22a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c22e:	462f      	mov	r7, r5
 800c230:	42bb      	cmp	r3, r7
 800c232:	460d      	mov	r5, r1
 800c234:	d9f4      	bls.n	800c220 <_printf_i+0x110>
 800c236:	2b08      	cmp	r3, #8
 800c238:	d10b      	bne.n	800c252 <_printf_i+0x142>
 800c23a:	6823      	ldr	r3, [r4, #0]
 800c23c:	07df      	lsls	r7, r3, #31
 800c23e:	d508      	bpl.n	800c252 <_printf_i+0x142>
 800c240:	6923      	ldr	r3, [r4, #16]
 800c242:	6861      	ldr	r1, [r4, #4]
 800c244:	4299      	cmp	r1, r3
 800c246:	bfde      	ittt	le
 800c248:	2330      	movle	r3, #48	@ 0x30
 800c24a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c24e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c252:	1b92      	subs	r2, r2, r6
 800c254:	6122      	str	r2, [r4, #16]
 800c256:	f8cd a000 	str.w	sl, [sp]
 800c25a:	464b      	mov	r3, r9
 800c25c:	aa03      	add	r2, sp, #12
 800c25e:	4621      	mov	r1, r4
 800c260:	4640      	mov	r0, r8
 800c262:	f7ff fee7 	bl	800c034 <_printf_common>
 800c266:	3001      	adds	r0, #1
 800c268:	d14a      	bne.n	800c300 <_printf_i+0x1f0>
 800c26a:	f04f 30ff 	mov.w	r0, #4294967295
 800c26e:	b004      	add	sp, #16
 800c270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c274:	6823      	ldr	r3, [r4, #0]
 800c276:	f043 0320 	orr.w	r3, r3, #32
 800c27a:	6023      	str	r3, [r4, #0]
 800c27c:	4832      	ldr	r0, [pc, #200]	@ (800c348 <_printf_i+0x238>)
 800c27e:	2778      	movs	r7, #120	@ 0x78
 800c280:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c284:	6823      	ldr	r3, [r4, #0]
 800c286:	6831      	ldr	r1, [r6, #0]
 800c288:	061f      	lsls	r7, r3, #24
 800c28a:	f851 5b04 	ldr.w	r5, [r1], #4
 800c28e:	d402      	bmi.n	800c296 <_printf_i+0x186>
 800c290:	065f      	lsls	r7, r3, #25
 800c292:	bf48      	it	mi
 800c294:	b2ad      	uxthmi	r5, r5
 800c296:	6031      	str	r1, [r6, #0]
 800c298:	07d9      	lsls	r1, r3, #31
 800c29a:	bf44      	itt	mi
 800c29c:	f043 0320 	orrmi.w	r3, r3, #32
 800c2a0:	6023      	strmi	r3, [r4, #0]
 800c2a2:	b11d      	cbz	r5, 800c2ac <_printf_i+0x19c>
 800c2a4:	2310      	movs	r3, #16
 800c2a6:	e7ad      	b.n	800c204 <_printf_i+0xf4>
 800c2a8:	4826      	ldr	r0, [pc, #152]	@ (800c344 <_printf_i+0x234>)
 800c2aa:	e7e9      	b.n	800c280 <_printf_i+0x170>
 800c2ac:	6823      	ldr	r3, [r4, #0]
 800c2ae:	f023 0320 	bic.w	r3, r3, #32
 800c2b2:	6023      	str	r3, [r4, #0]
 800c2b4:	e7f6      	b.n	800c2a4 <_printf_i+0x194>
 800c2b6:	4616      	mov	r6, r2
 800c2b8:	e7bd      	b.n	800c236 <_printf_i+0x126>
 800c2ba:	6833      	ldr	r3, [r6, #0]
 800c2bc:	6825      	ldr	r5, [r4, #0]
 800c2be:	6961      	ldr	r1, [r4, #20]
 800c2c0:	1d18      	adds	r0, r3, #4
 800c2c2:	6030      	str	r0, [r6, #0]
 800c2c4:	062e      	lsls	r6, r5, #24
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	d501      	bpl.n	800c2ce <_printf_i+0x1be>
 800c2ca:	6019      	str	r1, [r3, #0]
 800c2cc:	e002      	b.n	800c2d4 <_printf_i+0x1c4>
 800c2ce:	0668      	lsls	r0, r5, #25
 800c2d0:	d5fb      	bpl.n	800c2ca <_printf_i+0x1ba>
 800c2d2:	8019      	strh	r1, [r3, #0]
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	6123      	str	r3, [r4, #16]
 800c2d8:	4616      	mov	r6, r2
 800c2da:	e7bc      	b.n	800c256 <_printf_i+0x146>
 800c2dc:	6833      	ldr	r3, [r6, #0]
 800c2de:	1d1a      	adds	r2, r3, #4
 800c2e0:	6032      	str	r2, [r6, #0]
 800c2e2:	681e      	ldr	r6, [r3, #0]
 800c2e4:	6862      	ldr	r2, [r4, #4]
 800c2e6:	2100      	movs	r1, #0
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	f7f3 ff99 	bl	8000220 <memchr>
 800c2ee:	b108      	cbz	r0, 800c2f4 <_printf_i+0x1e4>
 800c2f0:	1b80      	subs	r0, r0, r6
 800c2f2:	6060      	str	r0, [r4, #4]
 800c2f4:	6863      	ldr	r3, [r4, #4]
 800c2f6:	6123      	str	r3, [r4, #16]
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c2fe:	e7aa      	b.n	800c256 <_printf_i+0x146>
 800c300:	6923      	ldr	r3, [r4, #16]
 800c302:	4632      	mov	r2, r6
 800c304:	4649      	mov	r1, r9
 800c306:	4640      	mov	r0, r8
 800c308:	47d0      	blx	sl
 800c30a:	3001      	adds	r0, #1
 800c30c:	d0ad      	beq.n	800c26a <_printf_i+0x15a>
 800c30e:	6823      	ldr	r3, [r4, #0]
 800c310:	079b      	lsls	r3, r3, #30
 800c312:	d413      	bmi.n	800c33c <_printf_i+0x22c>
 800c314:	68e0      	ldr	r0, [r4, #12]
 800c316:	9b03      	ldr	r3, [sp, #12]
 800c318:	4298      	cmp	r0, r3
 800c31a:	bfb8      	it	lt
 800c31c:	4618      	movlt	r0, r3
 800c31e:	e7a6      	b.n	800c26e <_printf_i+0x15e>
 800c320:	2301      	movs	r3, #1
 800c322:	4632      	mov	r2, r6
 800c324:	4649      	mov	r1, r9
 800c326:	4640      	mov	r0, r8
 800c328:	47d0      	blx	sl
 800c32a:	3001      	adds	r0, #1
 800c32c:	d09d      	beq.n	800c26a <_printf_i+0x15a>
 800c32e:	3501      	adds	r5, #1
 800c330:	68e3      	ldr	r3, [r4, #12]
 800c332:	9903      	ldr	r1, [sp, #12]
 800c334:	1a5b      	subs	r3, r3, r1
 800c336:	42ab      	cmp	r3, r5
 800c338:	dcf2      	bgt.n	800c320 <_printf_i+0x210>
 800c33a:	e7eb      	b.n	800c314 <_printf_i+0x204>
 800c33c:	2500      	movs	r5, #0
 800c33e:	f104 0619 	add.w	r6, r4, #25
 800c342:	e7f5      	b.n	800c330 <_printf_i+0x220>
 800c344:	0800ce85 	.word	0x0800ce85
 800c348:	0800ce96 	.word	0x0800ce96

0800c34c <memmove>:
 800c34c:	4288      	cmp	r0, r1
 800c34e:	b510      	push	{r4, lr}
 800c350:	eb01 0402 	add.w	r4, r1, r2
 800c354:	d902      	bls.n	800c35c <memmove+0x10>
 800c356:	4284      	cmp	r4, r0
 800c358:	4623      	mov	r3, r4
 800c35a:	d807      	bhi.n	800c36c <memmove+0x20>
 800c35c:	1e43      	subs	r3, r0, #1
 800c35e:	42a1      	cmp	r1, r4
 800c360:	d008      	beq.n	800c374 <memmove+0x28>
 800c362:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c36a:	e7f8      	b.n	800c35e <memmove+0x12>
 800c36c:	4402      	add	r2, r0
 800c36e:	4601      	mov	r1, r0
 800c370:	428a      	cmp	r2, r1
 800c372:	d100      	bne.n	800c376 <memmove+0x2a>
 800c374:	bd10      	pop	{r4, pc}
 800c376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c37a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c37e:	e7f7      	b.n	800c370 <memmove+0x24>

0800c380 <_sbrk_r>:
 800c380:	b538      	push	{r3, r4, r5, lr}
 800c382:	4d06      	ldr	r5, [pc, #24]	@ (800c39c <_sbrk_r+0x1c>)
 800c384:	2300      	movs	r3, #0
 800c386:	4604      	mov	r4, r0
 800c388:	4608      	mov	r0, r1
 800c38a:	602b      	str	r3, [r5, #0]
 800c38c:	f7f9 fba6 	bl	8005adc <_sbrk>
 800c390:	1c43      	adds	r3, r0, #1
 800c392:	d102      	bne.n	800c39a <_sbrk_r+0x1a>
 800c394:	682b      	ldr	r3, [r5, #0]
 800c396:	b103      	cbz	r3, 800c39a <_sbrk_r+0x1a>
 800c398:	6023      	str	r3, [r4, #0]
 800c39a:	bd38      	pop	{r3, r4, r5, pc}
 800c39c:	20001d5c 	.word	0x20001d5c

0800c3a0 <_realloc_r>:
 800c3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3a4:	4607      	mov	r7, r0
 800c3a6:	4614      	mov	r4, r2
 800c3a8:	460d      	mov	r5, r1
 800c3aa:	b921      	cbnz	r1, 800c3b6 <_realloc_r+0x16>
 800c3ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b0:	4611      	mov	r1, r2
 800c3b2:	f7ff bc5b 	b.w	800bc6c <_malloc_r>
 800c3b6:	b92a      	cbnz	r2, 800c3c4 <_realloc_r+0x24>
 800c3b8:	f7ff fbec 	bl	800bb94 <_free_r>
 800c3bc:	4625      	mov	r5, r4
 800c3be:	4628      	mov	r0, r5
 800c3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c3c4:	f000 f81a 	bl	800c3fc <_malloc_usable_size_r>
 800c3c8:	4284      	cmp	r4, r0
 800c3ca:	4606      	mov	r6, r0
 800c3cc:	d802      	bhi.n	800c3d4 <_realloc_r+0x34>
 800c3ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c3d2:	d8f4      	bhi.n	800c3be <_realloc_r+0x1e>
 800c3d4:	4621      	mov	r1, r4
 800c3d6:	4638      	mov	r0, r7
 800c3d8:	f7ff fc48 	bl	800bc6c <_malloc_r>
 800c3dc:	4680      	mov	r8, r0
 800c3de:	b908      	cbnz	r0, 800c3e4 <_realloc_r+0x44>
 800c3e0:	4645      	mov	r5, r8
 800c3e2:	e7ec      	b.n	800c3be <_realloc_r+0x1e>
 800c3e4:	42b4      	cmp	r4, r6
 800c3e6:	4622      	mov	r2, r4
 800c3e8:	4629      	mov	r1, r5
 800c3ea:	bf28      	it	cs
 800c3ec:	4632      	movcs	r2, r6
 800c3ee:	f7ff fbc3 	bl	800bb78 <memcpy>
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff fbcd 	bl	800bb94 <_free_r>
 800c3fa:	e7f1      	b.n	800c3e0 <_realloc_r+0x40>

0800c3fc <_malloc_usable_size_r>:
 800c3fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c400:	1f18      	subs	r0, r3, #4
 800c402:	2b00      	cmp	r3, #0
 800c404:	bfbc      	itt	lt
 800c406:	580b      	ldrlt	r3, [r1, r0]
 800c408:	18c0      	addlt	r0, r0, r3
 800c40a:	4770      	bx	lr

0800c40c <_init>:
 800c40c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c40e:	bf00      	nop
 800c410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c412:	bc08      	pop	{r3}
 800c414:	469e      	mov	lr, r3
 800c416:	4770      	bx	lr

0800c418 <_fini>:
 800c418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c41a:	bf00      	nop
 800c41c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c41e:	bc08      	pop	{r3}
 800c420:	469e      	mov	lr, r3
 800c422:	4770      	bx	lr

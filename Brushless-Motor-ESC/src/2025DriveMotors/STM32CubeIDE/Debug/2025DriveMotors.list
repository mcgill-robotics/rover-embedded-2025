
2025DriveMotors.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b818  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000830  0800b9f8  0800b9f8  0000c9f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c228  0800c228  0000e548  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c228  0800c228  0000d228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c230  0800c230  0000e548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c230  0800c230  0000d230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c234  0800c234  0000d234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000548  20000000  0800c238  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001814  20000548  0800c780  0000e548  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001d5c  0800c780  0000ed5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e548  2**0
                  CONTENTS, READONLY
 12 .debug_line   00052a3a  00000000  00000000  0000e578  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line_str 00000096  00000000  00000000  00060fb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00051cfc  00000000  00000000  00061048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000a14e  00000000  00000000  000b2d44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002458  00000000  00000000  000bce98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00110cae  00000000  00000000  000bf2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00003c2f  00000000  00000000  001cff9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_loclists 000223a6  00000000  00000000  001d3bcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_macro  00030aed  00000000  00000000  001f5f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00226a60  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000646c  00000000  00000000  00226aa4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000548 	.word	0x20000548
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b9e0 	.word	0x0800b9e0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000054c 	.word	0x2000054c
 800021c:	0800b9e0 	.word	0x0800b9e0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b988 	b.w	80005e8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	468e      	mov	lr, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	4688      	mov	r8, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d962      	bls.n	80003cc <__udivmoddi4+0xdc>
 8000306:	fab2 f682 	clz	r6, r2
 800030a:	b14e      	cbz	r6, 8000320 <__udivmoddi4+0x30>
 800030c:	f1c6 0320 	rsb	r3, r6, #32
 8000310:	fa01 f806 	lsl.w	r8, r1, r6
 8000314:	fa20 f303 	lsr.w	r3, r0, r3
 8000318:	40b7      	lsls	r7, r6
 800031a:	ea43 0808 	orr.w	r8, r3, r8
 800031e:	40b4      	lsls	r4, r6
 8000320:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000324:	fa1f fc87 	uxth.w	ip, r7
 8000328:	fbb8 f1fe 	udiv	r1, r8, lr
 800032c:	0c23      	lsrs	r3, r4, #16
 800032e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000332:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000336:	fb01 f20c 	mul.w	r2, r1, ip
 800033a:	429a      	cmp	r2, r3
 800033c:	d909      	bls.n	8000352 <__udivmoddi4+0x62>
 800033e:	18fb      	adds	r3, r7, r3
 8000340:	f101 30ff 	add.w	r0, r1, #4294967295
 8000344:	f080 80ea 	bcs.w	800051c <__udivmoddi4+0x22c>
 8000348:	429a      	cmp	r2, r3
 800034a:	f240 80e7 	bls.w	800051c <__udivmoddi4+0x22c>
 800034e:	3902      	subs	r1, #2
 8000350:	443b      	add	r3, r7
 8000352:	1a9a      	subs	r2, r3, r2
 8000354:	b2a3      	uxth	r3, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000362:	fb00 fc0c 	mul.w	ip, r0, ip
 8000366:	459c      	cmp	ip, r3
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0x8e>
 800036a:	18fb      	adds	r3, r7, r3
 800036c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000370:	f080 80d6 	bcs.w	8000520 <__udivmoddi4+0x230>
 8000374:	459c      	cmp	ip, r3
 8000376:	f240 80d3 	bls.w	8000520 <__udivmoddi4+0x230>
 800037a:	443b      	add	r3, r7
 800037c:	3802      	subs	r0, #2
 800037e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000382:	eba3 030c 	sub.w	r3, r3, ip
 8000386:	2100      	movs	r1, #0
 8000388:	b11d      	cbz	r5, 8000392 <__udivmoddi4+0xa2>
 800038a:	40f3      	lsrs	r3, r6
 800038c:	2200      	movs	r2, #0
 800038e:	e9c5 3200 	strd	r3, r2, [r5]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d905      	bls.n	80003a6 <__udivmoddi4+0xb6>
 800039a:	b10d      	cbz	r5, 80003a0 <__udivmoddi4+0xb0>
 800039c:	e9c5 0100 	strd	r0, r1, [r5]
 80003a0:	2100      	movs	r1, #0
 80003a2:	4608      	mov	r0, r1
 80003a4:	e7f5      	b.n	8000392 <__udivmoddi4+0xa2>
 80003a6:	fab3 f183 	clz	r1, r3
 80003aa:	2900      	cmp	r1, #0
 80003ac:	d146      	bne.n	800043c <__udivmoddi4+0x14c>
 80003ae:	4573      	cmp	r3, lr
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0xc8>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 8105 	bhi.w	80005c2 <__udivmoddi4+0x2d2>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	4690      	mov	r8, r2
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0e5      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003c6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ca:	e7e2      	b.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f000 8090 	beq.w	80004f2 <__udivmoddi4+0x202>
 80003d2:	fab2 f682 	clz	r6, r2
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	f040 80a4 	bne.w	8000524 <__udivmoddi4+0x234>
 80003dc:	1a8a      	subs	r2, r1, r2
 80003de:	0c03      	lsrs	r3, r0, #16
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	b280      	uxth	r0, r0
 80003e6:	b2bc      	uxth	r4, r7
 80003e8:	2101      	movs	r1, #1
 80003ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80003f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003f6:	fb04 f20c 	mul.w	r2, r4, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d907      	bls.n	800040e <__udivmoddi4+0x11e>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x11c>
 8000406:	429a      	cmp	r2, r3
 8000408:	f200 80e0 	bhi.w	80005cc <__udivmoddi4+0x2dc>
 800040c:	46c4      	mov	ip, r8
 800040e:	1a9b      	subs	r3, r3, r2
 8000410:	fbb3 f2fe 	udiv	r2, r3, lr
 8000414:	fb0e 3312 	mls	r3, lr, r2, r3
 8000418:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800041c:	fb02 f404 	mul.w	r4, r2, r4
 8000420:	429c      	cmp	r4, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x144>
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	f102 30ff 	add.w	r0, r2, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x142>
 800042c:	429c      	cmp	r4, r3
 800042e:	f200 80ca 	bhi.w	80005c6 <__udivmoddi4+0x2d6>
 8000432:	4602      	mov	r2, r0
 8000434:	1b1b      	subs	r3, r3, r4
 8000436:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800043a:	e7a5      	b.n	8000388 <__udivmoddi4+0x98>
 800043c:	f1c1 0620 	rsb	r6, r1, #32
 8000440:	408b      	lsls	r3, r1
 8000442:	fa22 f706 	lsr.w	r7, r2, r6
 8000446:	431f      	orrs	r7, r3
 8000448:	fa0e f401 	lsl.w	r4, lr, r1
 800044c:	fa20 f306 	lsr.w	r3, r0, r6
 8000450:	fa2e fe06 	lsr.w	lr, lr, r6
 8000454:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000458:	4323      	orrs	r3, r4
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	fa1f fc87 	uxth.w	ip, r7
 8000462:	fbbe f0f9 	udiv	r0, lr, r9
 8000466:	0c1c      	lsrs	r4, r3, #16
 8000468:	fb09 ee10 	mls	lr, r9, r0, lr
 800046c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000470:	fb00 fe0c 	mul.w	lr, r0, ip
 8000474:	45a6      	cmp	lr, r4
 8000476:	fa02 f201 	lsl.w	r2, r2, r1
 800047a:	d909      	bls.n	8000490 <__udivmoddi4+0x1a0>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000482:	f080 809c 	bcs.w	80005be <__udivmoddi4+0x2ce>
 8000486:	45a6      	cmp	lr, r4
 8000488:	f240 8099 	bls.w	80005be <__udivmoddi4+0x2ce>
 800048c:	3802      	subs	r0, #2
 800048e:	443c      	add	r4, r7
 8000490:	eba4 040e 	sub.w	r4, r4, lr
 8000494:	fa1f fe83 	uxth.w	lr, r3
 8000498:	fbb4 f3f9 	udiv	r3, r4, r9
 800049c:	fb09 4413 	mls	r4, r9, r3, r4
 80004a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a8:	45a4      	cmp	ip, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x1ce>
 80004ac:	193c      	adds	r4, r7, r4
 80004ae:	f103 3eff 	add.w	lr, r3, #4294967295
 80004b2:	f080 8082 	bcs.w	80005ba <__udivmoddi4+0x2ca>
 80004b6:	45a4      	cmp	ip, r4
 80004b8:	d97f      	bls.n	80005ba <__udivmoddi4+0x2ca>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	443c      	add	r4, r7
 80004be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004c2:	eba4 040c 	sub.w	r4, r4, ip
 80004c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ca:	4564      	cmp	r4, ip
 80004cc:	4673      	mov	r3, lr
 80004ce:	46e1      	mov	r9, ip
 80004d0:	d362      	bcc.n	8000598 <__udivmoddi4+0x2a8>
 80004d2:	d05f      	beq.n	8000594 <__udivmoddi4+0x2a4>
 80004d4:	b15d      	cbz	r5, 80004ee <__udivmoddi4+0x1fe>
 80004d6:	ebb8 0203 	subs.w	r2, r8, r3
 80004da:	eb64 0409 	sbc.w	r4, r4, r9
 80004de:	fa04 f606 	lsl.w	r6, r4, r6
 80004e2:	fa22 f301 	lsr.w	r3, r2, r1
 80004e6:	431e      	orrs	r6, r3
 80004e8:	40cc      	lsrs	r4, r1
 80004ea:	e9c5 6400 	strd	r6, r4, [r5]
 80004ee:	2100      	movs	r1, #0
 80004f0:	e74f      	b.n	8000392 <__udivmoddi4+0xa2>
 80004f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004f6:	0c01      	lsrs	r1, r0, #16
 80004f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004fc:	b280      	uxth	r0, r0
 80004fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000502:	463b      	mov	r3, r7
 8000504:	4638      	mov	r0, r7
 8000506:	463c      	mov	r4, r7
 8000508:	46b8      	mov	r8, r7
 800050a:	46be      	mov	lr, r7
 800050c:	2620      	movs	r6, #32
 800050e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000512:	eba2 0208 	sub.w	r2, r2, r8
 8000516:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800051a:	e766      	b.n	80003ea <__udivmoddi4+0xfa>
 800051c:	4601      	mov	r1, r0
 800051e:	e718      	b.n	8000352 <__udivmoddi4+0x62>
 8000520:	4610      	mov	r0, r2
 8000522:	e72c      	b.n	800037e <__udivmoddi4+0x8e>
 8000524:	f1c6 0220 	rsb	r2, r6, #32
 8000528:	fa2e f302 	lsr.w	r3, lr, r2
 800052c:	40b7      	lsls	r7, r6
 800052e:	40b1      	lsls	r1, r6
 8000530:	fa20 f202 	lsr.w	r2, r0, r2
 8000534:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000538:	430a      	orrs	r2, r1
 800053a:	fbb3 f8fe 	udiv	r8, r3, lr
 800053e:	b2bc      	uxth	r4, r7
 8000540:	fb0e 3318 	mls	r3, lr, r8, r3
 8000544:	0c11      	lsrs	r1, r2, #16
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb08 f904 	mul.w	r9, r8, r4
 800054e:	40b0      	lsls	r0, r6
 8000550:	4589      	cmp	r9, r1
 8000552:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000556:	b280      	uxth	r0, r0
 8000558:	d93e      	bls.n	80005d8 <__udivmoddi4+0x2e8>
 800055a:	1879      	adds	r1, r7, r1
 800055c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000560:	d201      	bcs.n	8000566 <__udivmoddi4+0x276>
 8000562:	4589      	cmp	r9, r1
 8000564:	d81f      	bhi.n	80005a6 <__udivmoddi4+0x2b6>
 8000566:	eba1 0109 	sub.w	r1, r1, r9
 800056a:	fbb1 f9fe 	udiv	r9, r1, lr
 800056e:	fb09 f804 	mul.w	r8, r9, r4
 8000572:	fb0e 1119 	mls	r1, lr, r9, r1
 8000576:	b292      	uxth	r2, r2
 8000578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800057c:	4542      	cmp	r2, r8
 800057e:	d229      	bcs.n	80005d4 <__udivmoddi4+0x2e4>
 8000580:	18ba      	adds	r2, r7, r2
 8000582:	f109 31ff 	add.w	r1, r9, #4294967295
 8000586:	d2c4      	bcs.n	8000512 <__udivmoddi4+0x222>
 8000588:	4542      	cmp	r2, r8
 800058a:	d2c2      	bcs.n	8000512 <__udivmoddi4+0x222>
 800058c:	f1a9 0102 	sub.w	r1, r9, #2
 8000590:	443a      	add	r2, r7
 8000592:	e7be      	b.n	8000512 <__udivmoddi4+0x222>
 8000594:	45f0      	cmp	r8, lr
 8000596:	d29d      	bcs.n	80004d4 <__udivmoddi4+0x1e4>
 8000598:	ebbe 0302 	subs.w	r3, lr, r2
 800059c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005a0:	3801      	subs	r0, #1
 80005a2:	46e1      	mov	r9, ip
 80005a4:	e796      	b.n	80004d4 <__udivmoddi4+0x1e4>
 80005a6:	eba7 0909 	sub.w	r9, r7, r9
 80005aa:	4449      	add	r1, r9
 80005ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80005b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b4:	fb09 f804 	mul.w	r8, r9, r4
 80005b8:	e7db      	b.n	8000572 <__udivmoddi4+0x282>
 80005ba:	4673      	mov	r3, lr
 80005bc:	e77f      	b.n	80004be <__udivmoddi4+0x1ce>
 80005be:	4650      	mov	r0, sl
 80005c0:	e766      	b.n	8000490 <__udivmoddi4+0x1a0>
 80005c2:	4608      	mov	r0, r1
 80005c4:	e6fd      	b.n	80003c2 <__udivmoddi4+0xd2>
 80005c6:	443b      	add	r3, r7
 80005c8:	3a02      	subs	r2, #2
 80005ca:	e733      	b.n	8000434 <__udivmoddi4+0x144>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	443b      	add	r3, r7
 80005d2:	e71c      	b.n	800040e <__udivmoddi4+0x11e>
 80005d4:	4649      	mov	r1, r9
 80005d6:	e79c      	b.n	8000512 <__udivmoddi4+0x222>
 80005d8:	eba1 0109 	sub.w	r1, r1, r9
 80005dc:	46c4      	mov	ip, r8
 80005de:	fbb1 f9fe 	udiv	r9, r1, lr
 80005e2:	fb09 f804 	mul.w	r8, r9, r4
 80005e6:	e7c4      	b.n	8000572 <__udivmoddi4+0x282>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005ec:	480d      	ldr	r0, [pc, #52]	@ (8000624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005ee:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005f0:	f004 fe5e 	bl	80052b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005f4:	480c      	ldr	r0, [pc, #48]	@ (8000628 <LoopForever+0x6>)
  ldr r1, =_edata
 80005f6:	490d      	ldr	r1, [pc, #52]	@ (800062c <LoopForever+0xa>)
  ldr r2, =_sidata
 80005f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000630 <LoopForever+0xe>)
  movs r3, #0
 80005fa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80005fc:	e002      	b.n	8000604 <LoopCopyDataInit>

080005fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000600:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000602:	3304      	adds	r3, #4

08000604 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000604:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000606:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000608:	d3f9      	bcc.n	80005fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800060a:	4a0a      	ldr	r2, [pc, #40]	@ (8000634 <LoopForever+0x12>)
  ldr r4, =_ebss
 800060c:	4c0a      	ldr	r4, [pc, #40]	@ (8000638 <LoopForever+0x16>)
  movs r3, #0
 800060e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000610:	e001      	b.n	8000616 <LoopFillZerobss>

08000612 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000612:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000614:	3204      	adds	r2, #4

08000616 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000616:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000618:	d3fb      	bcc.n	8000612 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800061a:	f00a fd71 	bl	800b100 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800061e:	f000 ff61 	bl	80014e4 <main>

08000622 <LoopForever>:

LoopForever:
    b LoopForever
 8000622:	e7fe      	b.n	8000622 <LoopForever>
  ldr   r0, =_estack
 8000624:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800062c:	20000548 	.word	0x20000548
  ldr r2, =_sidata
 8000630:	0800c238 	.word	0x0800c238
  ldr r2, =_sbss
 8000634:	20000548 	.word	0x20000548
  ldr r4, =_ebss
 8000638:	20001d5c 	.word	0x20001d5c

0800063c <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800063c:	e7fe      	b.n	800063c <BusFault_Handler>
	...

08000640 <safeStopMotor>:
    }
    return targetSpeed;
}


void safeStopMotor(float currentSpeedRpm){
 8000640:	b510      	push	{r4, lr}

	//First check to see if the motor was moving a significant amount before this function was being called
	if (fabsf(currentSpeedRpm) > 100){
 8000642:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8000724 <safeStopMotor+0xe4>
 8000646:	eef0 7ac0 	vabs.f32	s15, s0
 800064a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800064e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void safeStopMotor(float currentSpeedRpm){
 8000652:	ed2d 8b02 	vpush	{d8}
	if (fabsf(currentSpeedRpm) > 100){
 8000656:	dd50      	ble.n	80006fa <safeStopMotor+0xba>


uint16_t computeRampTimeMs(float currentSpeedRpm, float targetSpeedRpm){

    // Convert from RPM to rad/s
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000658:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 8000728 <safeStopMotor+0xe8>
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 800065c:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800072c <safeStopMotor+0xec>
 8000660:	eddf 7a33 	vldr	s15, [pc, #204]	@ 8000730 <safeStopMotor+0xf0>
 8000664:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 800066c:	ee20 0a06 	vmul.f32	s0, s0, s12
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 8000670:	bfd8      	it	le
 8000672:	eef0 7a66 	vmovle.f32	s15, s13

    // Max acceleration alpha = T_max / J
    float alpha = g_maxTorque / g_inertia; // [rad/s^2]

    // Time (seconds) = delta_omega / alpha
    float deltaW = fabsf(w2 - w1);
 8000676:	ee77 7ac0 	vsub.f32	s15, s15, s0

    // Convert to milliseconds
    float timeMs = timeSec * 1000.0f;

    // For safety, clamp time to at least 200 ms or so
    if (timeMs < 200.0f) {
 800067a:	eddf 6a2e 	vldr	s13, [pc, #184]	@ 8000734 <safeStopMotor+0xf4>
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 800067e:	ed9f 6a2e 	vldr	s12, [pc, #184]	@ 8000738 <safeStopMotor+0xf8>
    float deltaW = fabsf(w2 - w1);
 8000682:	eef0 7ae7 	vabs.f32	s15, s15
    if (timeMs < 200.0f) {
 8000686:	eef4 7ae6 	vcmpe.f32	s15, s13
		float rampTarget = (currentSpeedRpm > 0) ? 100.0f : -100.0f;
 800068a:	bfd4      	ite	le
 800068c:	eeb0 0a46 	vmovle.f32	s0, s12
 8000690:	eeb0 0a47 	vmovgt.f32	s0, s14
    if (timeMs < 200.0f) {
 8000694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000698:	d525      	bpl.n	80006e6 <safeStopMotor+0xa6>
 800069a:	20c8      	movs	r0, #200	@ 0xc8
		MC_ProgramSpeedRampMotor1_F(rampTarget, rampTime);
 800069c:	f001 fa90 	bl	8001bc0 <MC_ProgramSpeedRampMotor1_F>
		uint32_t tStart = HAL_GetTick();
 80006a0:	f004 fe5a 	bl	8005358 <HAL_GetTick>
		while (fabsf(MC_GetAverageMecSpeedMotor1_F()) > 120.0f) {
 80006a4:	ed9f 8a25 	vldr	s16, [pc, #148]	@ 800073c <safeStopMotor+0xfc>
		uint32_t tStart = HAL_GetTick();
 80006a8:	4604      	mov	r4, r0
		while (fabsf(MC_GetAverageMecSpeedMotor1_F()) > 120.0f) {
 80006aa:	e00a      	b.n	80006c2 <safeStopMotor+0x82>
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 80006ac:	f004 fe54 	bl	8005358 <HAL_GetTick>
 80006b0:	4603      	mov	r3, r0
 80006b2:	1b1b      	subs	r3, r3, r4
 80006b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
			HAL_Delay(10);
 80006b8:	f04f 000a 	mov.w	r0, #10
			if (HAL_GetTick() - tStart > 1000) break; // Timeout safety
 80006bc:	d80a      	bhi.n	80006d4 <safeStopMotor+0x94>
			HAL_Delay(10);
 80006be:	f004 fe51 	bl	8005364 <HAL_Delay>
		while (fabsf(MC_GetAverageMecSpeedMotor1_F()) > 120.0f) {
 80006c2:	f001 fa8b 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
 80006c6:	eeb0 0ac0 	vabs.f32	s0, s0
 80006ca:	eeb4 0ac8 	vcmpe.f32	s0, s16
 80006ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d2:	dceb      	bgt.n	80006ac <safeStopMotor+0x6c>
	    MC_StopMotor1();
 80006d4:	f001 fa6e 	bl	8001bb4 <MC_StopMotor1>
}
 80006d8:	ecbd 8b02 	vpop	{d8}
		 uart_debug_print("Motor is now stopped\r\n");
 80006dc:	4818      	ldr	r0, [pc, #96]	@ (8000740 <safeStopMotor+0x100>)
}
 80006de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		 uart_debug_print("Motor is now stopped\r\n");
 80006e2:	f004 bd11 	b.w	8005108 <uart_debug_print>
        timeMs = 200.0f;
    }
    // Also clamp to an upper limit if you do not want extremely large times
    if (timeMs > 2000.0f) {
 80006e6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000744 <safeStopMotor+0x104>
 80006ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f2:	dd0d      	ble.n	8000710 <safeStopMotor+0xd0>
 80006f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006f8:	e7d0      	b.n	800069c <safeStopMotor+0x5c>
	    MC_StopMotor1();
 80006fa:	f001 fa5b 	bl	8001bb4 <MC_StopMotor1>
		 uart_debug_print("Motor is now stopped\r\n");
 80006fe:	4810      	ldr	r0, [pc, #64]	@ (8000740 <safeStopMotor+0x100>)
 8000700:	f004 fd02 	bl	8005108 <uart_debug_print>
}
 8000704:	ecbd 8b02 	vpop	{d8}
	    s_previousDirection = 0;
 8000708:	4b0f      	ldr	r3, [pc, #60]	@ (8000748 <safeStopMotor+0x108>)
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
}
 800070e:	bd10      	pop	{r4, pc}
    float timeMs = timeSec * 1000.0f;
 8000710:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800074c <safeStopMotor+0x10c>
 8000714:	ee67 7a87 	vmul.f32	s15, s15, s14
        timeMs = 2000.0f; // 20 sec max
    }

    return (uint16_t)(timeMs);
 8000718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800071c:	ee17 3a90 	vmov	r3, s15
 8000720:	b298      	uxth	r0, r3
 8000722:	e7bb      	b.n	800069c <safeStopMotor+0x5c>
 8000724:	42c80000 	.word	0x42c80000
 8000728:	3dd67751 	.word	0x3dd67751
 800072c:	c1278d37 	.word	0xc1278d37
 8000730:	41278d37 	.word	0x41278d37
 8000734:	45c949cb 	.word	0x45c949cb
 8000738:	c2c80000 	.word	0xc2c80000
 800073c:	42f00000 	.word	0x42f00000
 8000740:	0800b9f8 	.word	0x0800b9f8
 8000744:	477b9c3d 	.word	0x477b9c3d
 8000748:	20000564 	.word	0x20000564
 800074c:	3cfe5c92 	.word	0x3cfe5c92

08000750 <checkReversing>:
void checkReversing(float speedCmd){
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (s_previousDirection > 0 && speedCmd < 0) {
 8000752:	4b1f      	ldr	r3, [pc, #124]	@ (80007d0 <checkReversing+0x80>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd05      	ble.n	8000766 <checkReversing+0x16>
 800075a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800075e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000762:	d406      	bmi.n	8000772 <checkReversing+0x22>
}
 8000764:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if (s_previousDirection < 0 && speedCmd > 0) {
 8000766:	d0fd      	beq.n	8000764 <checkReversing+0x14>
 8000768:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800076c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000770:	ddf8      	ble.n	8000764 <checkReversing+0x14>
		 uart_debug_print("REVERSING DETECTED!\r\n");
 8000772:	4818      	ldr	r0, [pc, #96]	@ (80007d4 <checkReversing+0x84>)
			 uart_debug_print("current state is %d\r\n", currState);
 8000774:	4f18      	ldr	r7, [pc, #96]	@ (80007d8 <checkReversing+0x88>)
			 uart_debug_print("current fault is %d\r\n", currentFaults);
 8000776:	4e19      	ldr	r6, [pc, #100]	@ (80007dc <checkReversing+0x8c>)
		 uart_debug_print("REVERSING DETECTED!\r\n");
 8000778:	f004 fcc6 	bl	8005108 <uart_debug_print>
		 safeStopMotor(MC_GetAverageMecSpeedMotor1_F());
 800077c:	f001 fa2e 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
 8000780:	f7ff ff5e 	bl	8000640 <safeStopMotor>
		 uart_debug_print("hit1\r\n");
 8000784:	4816      	ldr	r0, [pc, #88]	@ (80007e0 <checkReversing+0x90>)
 8000786:	f004 fcbf 	bl	8005108 <uart_debug_print>
			HAL_Delay(5); // poll the state until it IDLE
 800078a:	2005      	movs	r0, #5
 800078c:	f004 fdea 	bl	8005364 <HAL_Delay>
			MCI_State_t currState = MC_GetSTMStateMotor1();
 8000790:	f001 fa42 	bl	8001c18 <MC_GetSTMStateMotor1>
 8000794:	4604      	mov	r4, r0
			int currentFaults = MC_GetOccurredFaultsMotor1();
 8000796:	f001 fa39 	bl	8001c0c <MC_GetOccurredFaultsMotor1>
			 uart_debug_print("current state is %d\r\n", currState);
 800079a:	4621      	mov	r1, r4
			int currentFaults = MC_GetOccurredFaultsMotor1();
 800079c:	4605      	mov	r5, r0
			 uart_debug_print("current state is %d\r\n", currState);
 800079e:	4638      	mov	r0, r7
 80007a0:	f004 fcb2 	bl	8005108 <uart_debug_print>
			 uart_debug_print("current fault is %d\r\n", currentFaults);
 80007a4:	4629      	mov	r1, r5
 80007a6:	4630      	mov	r0, r6
 80007a8:	f004 fcae 	bl	8005108 <uart_debug_print>
			if (currState == IDLE && MC_GetAverageMecSpeedMotor1_F() == 0) {
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d1ec      	bne.n	800078a <checkReversing+0x3a>
 80007b0:	f001 fa14 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
 80007b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80007b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007bc:	d1e5      	bne.n	800078a <checkReversing+0x3a>
				HAL_Delay(500); // Tune this value for seemless transition, but
 80007be:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80007c2:	f004 fdcf 	bl	8005364 <HAL_Delay>
}
 80007c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				 uart_debug_print("Motor is now stopped after direction Change\r\n");
 80007ca:	4806      	ldr	r0, [pc, #24]	@ (80007e4 <checkReversing+0x94>)
 80007cc:	f004 bc9c 	b.w	8005108 <uart_debug_print>
 80007d0:	20000564 	.word	0x20000564
 80007d4:	0800ba10 	.word	0x0800ba10
 80007d8:	0800ba30 	.word	0x0800ba30
 80007dc:	0800ba48 	.word	0x0800ba48
 80007e0:	0800ba28 	.word	0x0800ba28
 80007e4:	0800ba60 	.word	0x0800ba60

080007e8 <runSingleMotor>:
void runSingleMotor(float newSpeed) {
 80007e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 80007ea:	ed9f 7a9c 	vldr	s14, [pc, #624]	@ 8000a5c <runSingleMotor+0x274>
 80007ee:	eef0 7ac0 	vabs.f32	s15, s0
 80007f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
void runSingleMotor(float newSpeed) {
 80007fa:	ed2d 8b02 	vpush	{d8}
    if (fabsf(targetSpeed) < SPEED_ZERO_THR) {
 80007fe:	d413      	bmi.n	8000828 <runSingleMotor+0x40>
    if (fabsf(targetSpeed) > MAX_SPEED_THR) {
 8000800:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8000a60 <runSingleMotor+0x278>
 8000804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800080c:	eeb0 8a40 	vmov.f32	s16, s0
 8000810:	dd67      	ble.n	80008e2 <runSingleMotor+0xfa>
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000812:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000816:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800081a:	f340 810c 	ble.w	8000a36 <runSingleMotor+0x24e>
 800081e:	eeb0 8a47 	vmov.f32	s16, s14
 8000822:	f44f 6648 	mov.w	r6, #3200	@ 0xc80
 8000826:	e002      	b.n	800082e <runSingleMotor+0x46>
    	targetSpeed = 0.0f;
 8000828:	ed9f 8a8e 	vldr	s16, [pc, #568]	@ 8000a64 <runSingleMotor+0x27c>
 800082c:	2600      	movs	r6, #0
	 uart_debug_print("Running Single Motor...\r\n");
 800082e:	488e      	ldr	r0, [pc, #568]	@ (8000a68 <runSingleMotor+0x280>)
	 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 8000830:	4d8e      	ldr	r5, [pc, #568]	@ (8000a6c <runSingleMotor+0x284>)
	 uart_debug_print("Running Single Motor...\r\n");
 8000832:	f004 fc69 	bl	8005108 <uart_debug_print>
	 uart_debug_print("Setpoint %d RPM\r\n", (int)speedCmd);
 8000836:	488e      	ldr	r0, [pc, #568]	@ (8000a70 <runSingleMotor+0x288>)
 8000838:	4631      	mov	r1, r6
 800083a:	f004 fc65 	bl	8005108 <uart_debug_print>
	 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 800083e:	488d      	ldr	r0, [pc, #564]	@ (8000a74 <runSingleMotor+0x28c>)
 8000840:	6829      	ldr	r1, [r5, #0]
 8000842:	f004 fc61 	bl	8005108 <uart_debug_print>
    MCI_State_t motorState = MC_GetSTMStateMotor1();
 8000846:	f001 f9e7 	bl	8001c18 <MC_GetSTMStateMotor1>
    if (motorState != IDLE)
 800084a:	2800      	cmp	r0, #0
 800084c:	f040 8083 	bne.w	8000956 <runSingleMotor+0x16e>
    motorState = MC_GetSTMStateMotor1();
 8000850:	f001 f9e2 	bl	8001c18 <MC_GetSTMStateMotor1>
    if (motorState != RUN) // This means it is in IDLE state
 8000854:	2806      	cmp	r0, #6
 8000856:	d149      	bne.n	80008ec <runSingleMotor+0x104>
    	if (speedCmd == 0){
 8000858:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800085c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000860:	f000 80a5 	beq.w	80009ae <runSingleMotor+0x1c6>
			s_previousDirection = (speedCmd > 0) ? 1 : -1;
 8000864:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000868:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086c:	bfcc      	ite	gt
 800086e:	2301      	movgt	r3, #1
 8000870:	f04f 33ff 	movle.w	r3, #4294967295
 8000874:	602b      	str	r3, [r5, #0]
			uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), speedCmd);
 8000876:	f001 f9b1 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 800087a:	eddf 7a78 	vldr	s15, [pc, #480]	@ 8000a5c <runSingleMotor+0x274>
 800087e:	eeb0 7ac0 	vabs.f32	s14, s0
 8000882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800088a:	d476      	bmi.n	800097a <runSingleMotor+0x192>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 800088c:	eddf 6a7a 	vldr	s13, [pc, #488]	@ 8000a78 <runSingleMotor+0x290>
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8000890:	eeb0 7ac8 	vabs.f32	s14, s16
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 8000894:	ee20 0a26 	vmul.f32	s0, s0, s13
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 8000898:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800089c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float deltaW = fabsf(w2 - w1);
 80008a0:	bf54      	ite	pl
 80008a2:	ee98 0a26 	vfnmspl.f32	s0, s16, s13
        w2 = 0.0f;
 80008a6:	eeb1 0a40 	vnegmi.f32	s0, s0
    if (timeMs < 200.0f) {
 80008aa:	eddf 7a74 	vldr	s15, [pc, #464]	@ 8000a7c <runSingleMotor+0x294>
    float deltaW = fabsf(w2 - w1);
 80008ae:	eeb0 0ac0 	vabs.f32	s0, s0
    if (timeMs < 200.0f) {
 80008b2:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80008b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008ba:	d45e      	bmi.n	800097a <runSingleMotor+0x192>
    if (timeMs > 2000.0f) {
 80008bc:	eddf 7a70 	vldr	s15, [pc, #448]	@ 8000a80 <runSingleMotor+0x298>
 80008c0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 80008c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c8:	f300 80b9 	bgt.w	8000a3e <runSingleMotor+0x256>
    float timeMs = timeSec * 1000.0f;
 80008cc:	eddf 7a6d 	vldr	s15, [pc, #436]	@ 8000a84 <runSingleMotor+0x29c>
 80008d0:	ee20 0a27 	vmul.f32	s0, s0, s15
    return (uint16_t)(timeMs);
 80008d4:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 80008d8:	ee10 3a10 	vmov	r3, s0
 80008dc:	b29c      	uxth	r4, r3
			 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 80008de:	4627      	mov	r7, r4
 80008e0:	e04d      	b.n	800097e <runSingleMotor+0x196>
	 uart_debug_print("Setpoint %d RPM\r\n", (int)speedCmd);
 80008e2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80008e6:	ee17 6a90 	vmov	r6, s15
 80008ea:	e7a0      	b.n	800082e <runSingleMotor+0x46>
    	checkReversing(speedCmd);
 80008ec:	eeb0 0a48 	vmov.f32	s0, s16
 80008f0:	f7ff ff2e 	bl	8000750 <checkReversing>
        if (speedCmd != 0.0f)
 80008f4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80008f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008fc:	d030      	beq.n	8000960 <runSingleMotor+0x178>
            uint16_t myRampTime = (uint16_t)computeRampTimeMs(MC_GetAverageMecSpeedMotor1_F(), speedCmd); // TODO Chrck why its 0.0f
 80008fe:	f001 f96d 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
    if (fabsf(currentSpeedRpm) < g_speedThresh) {
 8000902:	eddf 7a56 	vldr	s15, [pc, #344]	@ 8000a5c <runSingleMotor+0x274>
 8000906:	eeb0 7ac0 	vabs.f32	s14, s0
 800090a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800090e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000912:	d567      	bpl.n	80009e4 <runSingleMotor+0x1fc>
 8000914:	27c8      	movs	r7, #200	@ 0xc8
 8000916:	463c      	mov	r4, r7
        	 uart_debug_print("Motor was not moving previously\r\n");
 8000918:	485b      	ldr	r0, [pc, #364]	@ (8000a88 <runSingleMotor+0x2a0>)
 800091a:	f004 fbf5 	bl	8005108 <uart_debug_print>
        	 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 800091e:	485b      	ldr	r0, [pc, #364]	@ (8000a8c <runSingleMotor+0x2a4>)
 8000920:	4631      	mov	r1, r6
 8000922:	f004 fbf1 	bl	8005108 <uart_debug_print>
        	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000926:	485a      	ldr	r0, [pc, #360]	@ (8000a90 <runSingleMotor+0x2a8>)
 8000928:	4639      	mov	r1, r7
 800092a:	f004 fbed 	bl	8005108 <uart_debug_print>
            MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 800092e:	4620      	mov	r0, r4
 8000930:	eeb0 0a48 	vmov.f32	s0, s16
 8000934:	f001 f944 	bl	8001bc0 <MC_ProgramSpeedRampMotor1_F>
            s_previousDirection = (speedCmd > 0) ? 1 : -1; //update the previous direction global var
 8000938:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800093c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000940:	bfcc      	ite	gt
 8000942:	2301      	movgt	r3, #1
 8000944:	f04f 33ff 	movle.w	r3, #4294967295
 8000948:	602b      	str	r3, [r5, #0]
            if (!MC_StartMotor1()) {
 800094a:	f001 f92d 	bl	8001ba8 <MC_StartMotor1>
 800094e:	2800      	cmp	r0, #0
 8000950:	d079      	beq.n	8000a46 <runSingleMotor+0x25e>
        	 uart_debug_print("Motor has been started\r\n");
 8000952:	4850      	ldr	r0, [pc, #320]	@ (8000a94 <runSingleMotor+0x2ac>)
 8000954:	e007      	b.n	8000966 <runSingleMotor+0x17e>
       checkReversing(speedCmd);
 8000956:	eeb0 0a48 	vmov.f32	s0, s16
 800095a:	f7ff fef9 	bl	8000750 <checkReversing>
 800095e:	e777      	b.n	8000850 <runSingleMotor+0x68>
            s_previousDirection = 0;
 8000960:	2300      	movs	r3, #0
        	 uart_debug_print("Speed Command was considered to be or is 0\r\n");
 8000962:	484d      	ldr	r0, [pc, #308]	@ (8000a98 <runSingleMotor+0x2b0>)
            s_previousDirection = 0;
 8000964:	602b      	str	r3, [r5, #0]
        	 uart_debug_print("Speed Command was considered to be or is 0\r\n");
 8000966:	f004 fbcf 	bl	8005108 <uart_debug_print>
}
 800096a:	ecbd 8b02 	vpop	{d8}
        	 uart_debug_print("Direction has been updated to: %d\r\n", (int)s_previousDirection);
 800096e:	6829      	ldr	r1, [r5, #0]
 8000970:	484a      	ldr	r0, [pc, #296]	@ (8000a9c <runSingleMotor+0x2b4>)
}
 8000972:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        	 uart_debug_print("Direction has been updated to: %d\r\n", (int)s_previousDirection);
 8000976:	f004 bbc7 	b.w	8005108 <uart_debug_print>
 800097a:	27c8      	movs	r7, #200	@ 0xc8
 800097c:	463c      	mov	r4, r7
			 uart_debug_print("Motor is already moving, change setpoint in same direction\r\n");
 800097e:	4848      	ldr	r0, [pc, #288]	@ (8000aa0 <runSingleMotor+0x2b8>)
 8000980:	f004 fbc2 	bl	8005108 <uart_debug_print>
			 uart_debug_print("New Ramp Setpoint %d RPM\r\n", (int)speedCmd);
 8000984:	4631      	mov	r1, r6
 8000986:	4841      	ldr	r0, [pc, #260]	@ (8000a8c <runSingleMotor+0x2a4>)
 8000988:	f004 fbbe 	bl	8005108 <uart_debug_print>
			 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 800098c:	4639      	mov	r1, r7
 800098e:	4840      	ldr	r0, [pc, #256]	@ (8000a90 <runSingleMotor+0x2a8>)
 8000990:	f004 fbba 	bl	8005108 <uart_debug_print>
			 uart_debug_print("Direction is %d ms\r\n", s_previousDirection);
 8000994:	4843      	ldr	r0, [pc, #268]	@ (8000aa4 <runSingleMotor+0x2bc>)
 8000996:	6829      	ldr	r1, [r5, #0]
 8000998:	f004 fbb6 	bl	8005108 <uart_debug_print>
			MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 800099c:	eeb0 0a48 	vmov.f32	s0, s16
}
 80009a0:	ecbd 8b02 	vpop	{d8}
			MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 80009a4:	4620      	mov	r0, r4
}
 80009a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			MC_ProgramSpeedRampMotor1_F(speedCmd, myRampTime);
 80009aa:	f001 b909 	b.w	8001bc0 <MC_ProgramSpeedRampMotor1_F>
    		safeStopMotor(MC_GetAverageMecSpeedMotor1_F());
 80009ae:	f001 f915 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
 80009b2:	f7ff fe45 	bl	8000640 <safeStopMotor>
 80009b6:	e003      	b.n	80009c0 <runSingleMotor+0x1d8>
				HAL_Delay(350); // Tune this value for seemless transition, but
 80009b8:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 80009bc:	f004 fcd2 	bl	8005364 <HAL_Delay>
				HAL_Delay(5); // poll the state until it IDLE
 80009c0:	2005      	movs	r0, #5
 80009c2:	f004 fccf 	bl	8005364 <HAL_Delay>
				MCI_State_t currState = MC_GetSTMStateMotor1();
 80009c6:	f001 f927 	bl	8001c18 <MC_GetSTMStateMotor1>
				if (currState == IDLE && MC_GetAverageMecSpeedMotor1_F() == 0) {
 80009ca:	4604      	mov	r4, r0
 80009cc:	2800      	cmp	r0, #0
 80009ce:	d1f3      	bne.n	80009b8 <runSingleMotor+0x1d0>
 80009d0:	f001 f904 	bl	8001bdc <MC_GetAverageMecSpeedMotor1_F>
 80009d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80009d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009dc:	d1ec      	bne.n	80009b8 <runSingleMotor+0x1d0>
					 uart_debug_print("Motor is now stopped after receiving 0 setpoint\r\n");
 80009de:	4832      	ldr	r0, [pc, #200]	@ (8000aa8 <runSingleMotor+0x2c0>)
					s_previousDirection =0;
 80009e0:	602c      	str	r4, [r5, #0]
					 uart_debug_print("Motor is now stopped after receiving 0 setpoint\r\n");
 80009e2:	e7c0      	b.n	8000966 <runSingleMotor+0x17e>
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80009e4:	eddf 6a24 	vldr	s13, [pc, #144]	@ 8000a78 <runSingleMotor+0x290>
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 80009e8:	eeb0 7ac8 	vabs.f32	s14, s16
 80009ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
    float w1 = currentSpeedRpm * 2.0f * (float)M_PI / 60.0f;
 80009f0:	ee20 0a26 	vmul.f32	s0, s0, s13
    if (fabsf(targetSpeedRpm) < g_speedThresh) {
 80009f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float deltaW = fabsf(w2 - w1);
 80009f8:	bf58      	it	pl
 80009fa:	ee98 0a26 	vfnmspl.f32	s0, s16, s13
    if (timeMs < 200.0f) {
 80009fe:	ed9f 7a1f 	vldr	s14, [pc, #124]	@ 8000a7c <runSingleMotor+0x294>
    float timeMs = timeSec * 1000.0f;
 8000a02:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8000a84 <runSingleMotor+0x29c>
    float deltaW = fabsf(w2 - w1);
 8000a06:	eeb0 0ac0 	vabs.f32	s0, s0
    if (timeMs < 200.0f) {
 8000a0a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8000a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    float timeMs = timeSec * 1000.0f;
 8000a12:	ee60 7a27 	vmul.f32	s15, s0, s15
    if (timeMs < 200.0f) {
 8000a16:	f53f af7d 	bmi.w	8000914 <runSingleMotor+0x12c>
    if (timeMs > 2000.0f) {
 8000a1a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000a80 <runSingleMotor+0x298>
 8000a1e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8000a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a26:	dc15      	bgt.n	8000a54 <runSingleMotor+0x26c>
    return (uint16_t)(timeMs);
 8000a28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a2c:	ee17 3a90 	vmov	r3, s15
 8000a30:	b29c      	uxth	r4, r3
        	 uart_debug_print("New Ramp time allocated %d ms\r\n", (int)myRampTime);
 8000a32:	4627      	mov	r7, r4
 8000a34:	e770      	b.n	8000918 <runSingleMotor+0x130>
 8000a36:	4e1d      	ldr	r6, [pc, #116]	@ (8000aac <runSingleMotor+0x2c4>)
    	targetSpeed = (targetSpeed > 0) ? MAX_SPEED_THR : -MAX_SPEED_THR;
 8000a38:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8000ab0 <runSingleMotor+0x2c8>
 8000a3c:	e6f7      	b.n	800082e <runSingleMotor+0x46>
 8000a3e:	f44f 67fa 	mov.w	r7, #2000	@ 0x7d0
 8000a42:	463c      	mov	r4, r7
 8000a44:	e79b      	b.n	800097e <runSingleMotor+0x196>
}
 8000a46:	ecbd 8b02 	vpop	{d8}
            	 uart_debug_print("Start Failed");
 8000a4a:	481a      	ldr	r0, [pc, #104]	@ (8000ab4 <runSingleMotor+0x2cc>)
}
 8000a4c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            	 uart_debug_print("Start Failed");
 8000a50:	f004 bb5a 	b.w	8005108 <uart_debug_print>
 8000a54:	f44f 67fa 	mov.w	r7, #2000	@ 0x7d0
 8000a58:	463c      	mov	r4, r7
 8000a5a:	e75d      	b.n	8000918 <runSingleMotor+0x130>
 8000a5c:	42480000 	.word	0x42480000
 8000a60:	45480000 	.word	0x45480000
 8000a64:	00000000 	.word	0x00000000
 8000a68:	0800ba90 	.word	0x0800ba90
 8000a6c:	20000564 	.word	0x20000564
 8000a70:	0800baac 	.word	0x0800baac
 8000a74:	0800bac0 	.word	0x0800bac0
 8000a78:	3dd67751 	.word	0x3dd67751
 8000a7c:	45c949cb 	.word	0x45c949cb
 8000a80:	477b9c3d 	.word	0x477b9c3d
 8000a84:	3cfe5c92 	.word	0x3cfe5c92
 8000a88:	0800bad8 	.word	0x0800bad8
 8000a8c:	0800bafc 	.word	0x0800bafc
 8000a90:	0800bb18 	.word	0x0800bb18
 8000a94:	0800bb48 	.word	0x0800bb48
 8000a98:	0800bb88 	.word	0x0800bb88
 8000a9c:	0800bb64 	.word	0x0800bb64
 8000aa0:	0800bbec 	.word	0x0800bbec
 8000aa4:	0800bc2c 	.word	0x0800bc2c
 8000aa8:	0800bbb8 	.word	0x0800bbb8
 8000aac:	fffff380 	.word	0xfffff380
 8000ab0:	c5480000 	.word	0xc5480000
 8000ab4:	0800bb38 	.word	0x0800bb38

08000ab8 <sendCANResponse>:
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8000ab8:	b530      	push	{r4, r5, lr}
    txID |= (CANMessageID->motorType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8000aba:	7843      	ldrb	r3, [r0, #1]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8000abc:	f890 c004 	ldrb.w	ip, [r0, #4]
    txID |= (CANMessageID->motorID & 0x0f);
 8000ac0:	7984      	ldrb	r4, [r0, #6]
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8000ac2:	7881      	ldrb	r1, [r0, #2]
    txID |= (CANMessageID->commandType & 0x01) << NDRIVE_STEERING_SHIFT;
 8000ac4:	78c2      	ldrb	r2, [r0, #3]
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8000ac6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
    txID |= (CANMessageID->motorType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8000aca:	025b      	lsls	r3, r3, #9
    txID |= (CANMessageID->readSpec & 0x07) << MSG_SPECIFICATION_SHIFT;
 8000acc:	f00c 0070 	and.w	r0, ip, #112	@ 0x70
    txID |= (CANMessageID->motorType & 0x01) << NACTION_READ_ID_DEVICE_SHIFT;
 8000ad0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
    txID |= (CANMessageID->motorID & 0x0f);
 8000ad4:	4303      	orrs	r3, r0
 8000ad6:	f004 040f 	and.w	r4, r4, #15
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8000ada:	0209      	lsls	r1, r1, #8
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8000adc:	b08f      	sub	sp, #60	@ 0x3c
    txID |= (CANMessageID->motorConfig & 0x01) << NMULTI_SINGLE_SHIFT;
 8000ade:	f401 7180 	and.w	r1, r1, #256	@ 0x100
    txID |= (CANMessageID->motorID & 0x0f);
 8000ae2:	431c      	orrs	r4, r3
    txID |= (CANMessageID->commandType & 0x01) << NDRIVE_STEERING_SHIFT;
 8000ae4:	01d3      	lsls	r3, r2, #7
    txID |= (CANMessageID->motorID & 0x0f);
 8000ae6:	430c      	orrs	r4, r1
void sendCANResponse(ParsedCANID *CANMessageID, float information){
 8000ae8:	ed8d 0a01 	vstr	s0, [sp, #4]
    txID |= (CANMessageID->commandType & 0x01) << NDRIVE_STEERING_SHIFT;
 8000aec:	b2db      	uxtb	r3, r3
	 uart_debug_print("CAN Command Sent back!\r\n");
 8000aee:	480f      	ldr	r0, [pc, #60]	@ (8000b2c <sendCANResponse+0x74>)
    txID |= (CANMessageID->motorID & 0x0f);
 8000af0:	431c      	orrs	r4, r3
    memcpy(txData, &information, sizeof(float)); // data[0] --> data[3] now stores float
 8000af2:	9b01      	ldr	r3, [sp, #4]
 8000af4:	9303      	str	r3, [sp, #12]
    txID |= (CANMessageID->motorID & 0x0f);
 8000af6:	f444 6480 	orr.w	r4, r4, #1024	@ 0x400
	 uart_debug_print("CAN Command Sent back!\r\n");
 8000afa:	f004 fb05 	bl	8005108 <uart_debug_print>
    txHeader.DataLength          = FDCAN_DLC_BYTES_8;
 8000afe:	2508      	movs	r5, #8
    txHeader.IdType              = FDCAN_STANDARD_ID;
 8000b00:	2300      	movs	r3, #0
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8000b02:	480b      	ldr	r0, [pc, #44]	@ (8000b30 <sendCANResponse+0x78>)
    txHeader.Identifier          = txID;
 8000b04:	9405      	str	r4, [sp, #20]
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8000b06:	aa03      	add	r2, sp, #12
 8000b08:	a905      	add	r1, sp, #20
    txHeader.TxFrameType         = FDCAN_DATA_FRAME;
 8000b0a:	e9cd 3306 	strd	r3, r3, [sp, #24]
    txHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000b0e:	e9cd 5308 	strd	r5, r3, [sp, #32]
    txHeader.FDFormat            = FDCAN_CLASSIC_CAN;
 8000b12:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
    txHeader.MessageMarker       = 0;
 8000b16:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
    if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &txHeader, txData) != HAL_OK) {
 8000b1a:	f005 ff81 	bl	8006a20 <HAL_FDCAN_AddMessageToTxFifoQ>
 8000b1e:	b908      	cbnz	r0, 8000b24 <sendCANResponse+0x6c>
}
 8000b20:	b00f      	add	sp, #60	@ 0x3c
 8000b22:	bd30      	pop	{r4, r5, pc}
        Error_Handler();
 8000b24:	f001 f83e 	bl	8001ba4 <Error_Handler>
}
 8000b28:	b00f      	add	sp, #60	@ 0x3c
 8000b2a:	bd30      	pop	{r4, r5, pc}
 8000b2c:	0800bc70 	.word	0x0800bc70
 8000b30:	200007f4 	.word	0x200007f4

08000b34 <Process_Single_ESC_Command>:
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8000b34:	b538      	push	{r3, r4, r5, lr}
	if (CANMessageID->commandType == ACTION_RUN){
 8000b36:	78c3      	ldrb	r3, [r0, #3]
float SingleExtractFloatFromCAN(uint8_t *data) {
    float value;
    uint8_t reorderedData[4];

    // The data is already big-endian, so we copy directly:
    reorderedData[0] = data[0];
 8000b38:	680d      	ldr	r5, [r1, #0]
void Process_Single_ESC_Command (ParsedCANID *CANMessageID, uint8_t *rxData){
 8000b3a:	4604      	mov	r4, r0
	if (CANMessageID->commandType == ACTION_RUN){
 8000b3c:	b933      	cbnz	r3, 8000b4c <Process_Single_ESC_Command+0x18>
		switch(CANMessageID->runSpec){
 8000b3e:	7943      	ldrb	r3, [r0, #5]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d020      	beq.n	8000b86 <Process_Single_ESC_Command+0x52>
 8000b44:	2b02      	cmp	r3, #2
 8000b46:	d04b      	beq.n	8000be0 <Process_Single_ESC_Command+0xac>
 8000b48:	b1b3      	cbz	r3, 8000b78 <Process_Single_ESC_Command+0x44>
}
 8000b4a:	bd38      	pop	{r3, r4, r5, pc}
		switch(CANMessageID->readSpec){
 8000b4c:	7903      	ldrb	r3, [r0, #4]
 8000b4e:	2b07      	cmp	r3, #7
 8000b50:	d8fb      	bhi.n	8000b4a <Process_Single_ESC_Command+0x16>
 8000b52:	a201      	add	r2, pc, #4	@ (adr r2, 8000b58 <Process_Single_ESC_Command+0x24>)
 8000b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b58:	08000bb1 	.word	0x08000bb1
 8000b5c:	08000b4b 	.word	0x08000b4b
 8000b60:	08000b8f 	.word	0x08000b8f
 8000b64:	08000bbf 	.word	0x08000bbf
 8000b68:	08000bc5 	.word	0x08000bc5
 8000b6c:	08000bdb 	.word	0x08000bdb
 8000b70:	08000b4b 	.word	0x08000b4b
 8000b74:	08000ba5 	.word	0x08000ba5
				uart_debug_print("Motor Stopped \r\n");
 8000b78:	481e      	ldr	r0, [pc, #120]	@ (8000bf4 <Process_Single_ESC_Command+0xc0>)
 8000b7a:	f004 fac5 	bl	8005108 <uart_debug_print>
}
 8000b7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				MC_StopMotor1();
 8000b82:	f001 b817 	b.w	8001bb4 <MC_StopMotor1>
}
 8000b86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				MC_AcknowledgeFaultMotor1();
 8000b8a:	f001 b839 	b.w	8001c00 <MC_AcknowledgeFaultMotor1>
				float phaseVoltage = MC_GetPhaseVoltageAmplitudeMotor1();
 8000b8e:	f001 f831 	bl	8001bf4 <MC_GetPhaseVoltageAmplitudeMotor1>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 8000b92:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, phaseCurrent);
 8000b96:	4620      	mov	r0, r4
 8000b98:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
}
 8000b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				sendCANResponse(CANMessageID, phaseCurrent);
 8000ba0:	f7ff bf8a 	b.w	8000ab8 <sendCANResponse>
}
 8000ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				sendCANResponse(CANMessageID, feedback);
 8000ba8:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000bf8 <Process_Single_ESC_Command+0xc4>
 8000bac:	f7ff bf84 	b.w	8000ab8 <sendCANResponse>
				float currentSpeed = MC_GetMecSpeedReferenceMotor1_F();
 8000bb0:	f001 f80e 	bl	8001bd0 <MC_GetMecSpeedReferenceMotor1_F>
				sendCANResponse(CANMessageID, currentSpeed);
 8000bb4:	4620      	mov	r0, r4
}
 8000bb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				sendCANResponse(CANMessageID, currentSpeed);
 8000bba:	f7ff bf7d 	b.w	8000ab8 <sendCANResponse>
				float phaseCurrent = MC_GetPhaseCurrentAmplitudeMotor1();
 8000bbe:	f001 f813 	bl	8001be8 <MC_GetPhaseCurrentAmplitudeMotor1>
 8000bc2:	e7e6      	b.n	8000b92 <Process_Single_ESC_Command+0x5e>
				float currentFaults = MC_GetOccurredFaultsMotor1();
 8000bc4:	f001 f822 	bl	8001c0c <MC_GetOccurredFaultsMotor1>
				float currentState = MC_GetSTMStateMotor1();
 8000bc8:	ee00 0a10 	vmov	s0, r0
				sendCANResponse(CANMessageID, currentState);
 8000bcc:	4620      	mov	r0, r4
 8000bce:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 8000bd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				sendCANResponse(CANMessageID, currentState);
 8000bd6:	f7ff bf6f 	b.w	8000ab8 <sendCANResponse>
				float currentState = MC_GetSTMStateMotor1();
 8000bda:	f001 f81d 	bl	8001c18 <MC_GetSTMStateMotor1>
 8000bde:	e7f3      	b.n	8000bc8 <Process_Single_ESC_Command+0x94>
				uart_debug_print("In case RUN_SPEED\r\n");
 8000be0:	4806      	ldr	r0, [pc, #24]	@ (8000bfc <Process_Single_ESC_Command+0xc8>)
 8000be2:	f004 fa91 	bl	8005108 <uart_debug_print>
				runSingleMotor(information);
 8000be6:	ee00 5a10 	vmov	s0, r5
}
 8000bea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
				runSingleMotor(information);
 8000bee:	f7ff bdfb 	b.w	80007e8 <runSingleMotor>
 8000bf2:	bf00      	nop
 8000bf4:	0800bc8c 	.word	0x0800bc8c
 8000bf8:	428a0000 	.word	0x428a0000
 8000bfc:	0800bca0 	.word	0x0800bca0

08000c00 <CAN_Parse_MSG>:
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 8000c00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000c02:	4604      	mov	r4, r0
 8000c04:	b083      	sub	sp, #12
	uart_debug_print("Parsing the ID...\r\n");
 8000c06:	4839      	ldr	r0, [pc, #228]	@ (8000cec <CAN_Parse_MSG+0xec>)
void CAN_Parse_MSG (FDCAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData){
 8000c08:	460e      	mov	r6, r1
	uart_debug_print("Parsing the ID...\r\n");
 8000c0a:	f004 fa7d 	bl	8005108 <uart_debug_print>
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8000c0e:	8825      	ldrh	r5, [r4, #0]
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 8000c10:	f3c5 2380 	ubfx	r3, r5, #10, #1
	uint16_t msg_ID = rxHeader->Identifier & 0x07ff ; // We only care about the first 11 bits here
 8000c14:	f3c5 040a 	ubfx	r4, r5, #0, #11
	return (CAN_ID & SENDER_DEVICE_MASK) >> SENDER_DEVICE_SHIFT;
 8000c18:	f88d 3000 	strb.w	r3, [sp]
	if (CANMessage.messageSender == SLAVE){
 8000c1c:	bb1b      	cbnz	r3, 8000c66 <CAN_Parse_MSG+0x66>
	return (CAN_ID & NDRIVE_STEETING_DEVICE_MASK) >> NDRIVE_STEERING_SHIFT;
 8000c1e:	f3c4 13c0 	ubfx	r3, r4, #7, #1
	CANMessage.motorType = (MotorType) get_CAN_motor_type(msg_ID);
 8000c22:	f88d 3001 	strb.w	r3, [sp, #1]
	if (CANMessage.motorType == STEERING_MOTOR){
 8000c26:	b9f3      	cbnz	r3, 8000c66 <CAN_Parse_MSG+0x66>
	return (CAN_ID & NACTION_READ_DEVICE_MASK) >> NACTION_READ_ID_DEVICE_SHIFT;
 8000c28:	0a63      	lsrs	r3, r4, #9
 8000c2a:	f88d 3003 	strb.w	r3, [sp, #3]
	return (CAN_ID & MSG_SPECIFICATION_DEVICE_MASK) >> MSG_SPECIFICATION_SHIFT;
 8000c2e:	f3c4 1702 	ubfx	r7, r4, #4, #3
	if (CANMessage.commandType == ACTION_RUN){
 8000c32:	b1d3      	cbz	r3, 8000c6a <CAN_Parse_MSG+0x6a>
		uart_debug_print("Read Command Detected\r\n");
 8000c34:	482e      	ldr	r0, [pc, #184]	@ (8000cf0 <CAN_Parse_MSG+0xf0>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8000c36:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Read Command Detected\r\n");
 8000c3a:	f004 fa65 	bl	8005108 <uart_debug_print>
		CANMessage.readSpec = (ReadSpec) get_CAN_SPEC(msg_ID);
 8000c3e:	f88d 7004 	strb.w	r7, [sp, #4]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8000c42:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8000c46:	b1dc      	cbz	r4, 8000c80 <CAN_Parse_MSG+0x80>
		if (CANMessage.motorID == ESC_ID){
 8000c48:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf4 <CAN_Parse_MSG+0xf4>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	f005 050f 	and.w	r5, r5, #15
 8000c50:	429d      	cmp	r5, r3
		CANMessage.motorID = (MotorID) get_CAN_device_ID(msg_ID);
 8000c52:	f88d 5006 	strb.w	r5, [sp, #6]
		if (CANMessage.motorID == ESC_ID){
 8000c56:	d13a      	bne.n	8000cce <CAN_Parse_MSG+0xce>
			uart_debug_print("Processing Single Command\r\n");
 8000c58:	4827      	ldr	r0, [pc, #156]	@ (8000cf8 <CAN_Parse_MSG+0xf8>)
 8000c5a:	f004 fa55 	bl	8005108 <uart_debug_print>
			Process_Single_ESC_Command(&CANMessage, rxData);
 8000c5e:	4631      	mov	r1, r6
 8000c60:	4668      	mov	r0, sp
 8000c62:	f7ff ff67 	bl	8000b34 <Process_Single_ESC_Command>
}
 8000c66:	b003      	add	sp, #12
 8000c68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uart_debug_print("Run Command Detected\r\n");
 8000c6a:	4824      	ldr	r0, [pc, #144]	@ (8000cfc <CAN_Parse_MSG+0xfc>)
	return (CAN_ID & NMULTI_SINGLE_DEVICE_MASK) >> NMULTI_SINGLE_SHIFT;
 8000c6c:	f3c4 2400 	ubfx	r4, r4, #8, #1
		uart_debug_print("Run Command Detected\r\n");
 8000c70:	f004 fa4a 	bl	8005108 <uart_debug_print>
			CANMessage.runSpec = (RunSpec) get_CAN_SPEC(msg_ID);
 8000c74:	f88d 7005 	strb.w	r7, [sp, #5]
	CANMessage.motorConfig = (MotorConfig) get_CAN_motor_mov_type(msg_ID);
 8000c78:	f88d 4002 	strb.w	r4, [sp, #2]
	if (CANMessage.motorConfig == SINGLE_MOTOR){
 8000c7c:	2c00      	cmp	r4, #0
 8000c7e:	d1e3      	bne.n	8000c48 <CAN_Parse_MSG+0x48>
		uart_debug_print("Processing Multiple Commands\r\n");
 8000c80:	481f      	ldr	r0, [pc, #124]	@ (8000d00 <CAN_Parse_MSG+0x100>)
 8000c82:	f004 fa41 	bl	8005108 <uart_debug_print>
	switch(CANMessageID->runSpec){
 8000c86:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8000c8a:	b333      	cbz	r3, 8000cda <CAN_Parse_MSG+0xda>
 8000c8c:	2b02      	cmp	r3, #2
 8000c8e:	d1ea      	bne.n	8000c66 <CAN_Parse_MSG+0x66>
    uint16_t offset = ESC_ID * 2;
 8000c90:	4b18      	ldr	r3, [pc, #96]	@ (8000cf4 <CAN_Parse_MSG+0xf4>)
			 uart_debug_print("Running This Motor\r\n");
 8000c92:	481c      	ldr	r0, [pc, #112]	@ (8000d04 <CAN_Parse_MSG+0x104>)
    uint16_t offset = ESC_ID * 2;
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	005b      	lsls	r3, r3, #1
    int16_t value = (int16_t)((rxData[offset + 1] << 8) | rxData[offset]);
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	18f2      	adds	r2, r6, r3
 8000c9c:	5cf4      	ldrb	r4, [r6, r3]
 8000c9e:	7853      	ldrb	r3, [r2, #1]
 8000ca0:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8000ca4:	b224      	sxth	r4, r4
			 uart_debug_print("Running This Motor\r\n");
 8000ca6:	f004 fa2f 	bl	8005108 <uart_debug_print>
			 uart_debug_print("Setpoint %d RPM\r\n", (int)curESCSpeed);
 8000caa:	4621      	mov	r1, r4
 8000cac:	4816      	ldr	r0, [pc, #88]	@ (8000d08 <CAN_Parse_MSG+0x108>)
 8000cae:	f004 fa2b 	bl	8005108 <uart_debug_print>
			 uart_debug_print("Previous Direction %d\r\n", (int)s_previousDirection);
 8000cb2:	4b16      	ldr	r3, [pc, #88]	@ (8000d0c <CAN_Parse_MSG+0x10c>)
 8000cb4:	4816      	ldr	r0, [pc, #88]	@ (8000d10 <CAN_Parse_MSG+0x110>)
 8000cb6:	6819      	ldr	r1, [r3, #0]
 8000cb8:	f004 fa26 	bl	8005108 <uart_debug_print>
			runSingleMotor(curESCSpeed);
 8000cbc:	ee07 4a90 	vmov	s15, r4
 8000cc0:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
}
 8000cc4:	b003      	add	sp, #12
 8000cc6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			runSingleMotor(curESCSpeed);
 8000cca:	f7ff bd8d 	b.w	80007e8 <runSingleMotor>
			 uart_debug_print("Not My IDr\n");
 8000cce:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <CAN_Parse_MSG+0x114>)
}
 8000cd0:	b003      	add	sp, #12
 8000cd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			 uart_debug_print("Not My IDr\n");
 8000cd6:	f004 ba17 	b.w	8005108 <uart_debug_print>
			 uart_debug_print("Stop this motor\r\n");
 8000cda:	480f      	ldr	r0, [pc, #60]	@ (8000d18 <CAN_Parse_MSG+0x118>)
 8000cdc:	f004 fa14 	bl	8005108 <uart_debug_print>
}
 8000ce0:	b003      	add	sp, #12
 8000ce2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			MC_StopMotor1();
 8000ce6:	f000 bf65 	b.w	8001bb4 <MC_StopMotor1>
 8000cea:	bf00      	nop
 8000cec:	0800bcb4 	.word	0x0800bcb4
 8000cf0:	0800bce0 	.word	0x0800bce0
 8000cf4:	2000059c 	.word	0x2000059c
 8000cf8:	0800bcf8 	.word	0x0800bcf8
 8000cfc:	0800bcc8 	.word	0x0800bcc8
 8000d00:	0800bd20 	.word	0x0800bd20
 8000d04:	0800bc44 	.word	0x0800bc44
 8000d08:	0800baac 	.word	0x0800baac
 8000d0c:	20000564 	.word	0x20000564
 8000d10:	0800bac0 	.word	0x0800bac0
 8000d14:	0800bd14 	.word	0x0800bd14
 8000d18:	0800bc5c 	.word	0x0800bc5c

08000d1c <ASPEP_start>:
  * @brief  Starts ASPEP communication by configuring UART.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000d1c:	b570      	push	{r4, r5, r6, lr}
 8000d1e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->ASPEPIp);
 8000d20:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8000d22:	6940      	ldr	r0, [r0, #20]
 8000d24:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000d26:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
    /* Configure UART to receive first packet*/
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000d28:	6d65      	ldr	r5, [r4, #84]	@ 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000d2a:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000d2e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000d32:	6960      	ldr	r0, [r4, #20]
 8000d34:	f104 011c 	add.w	r1, r4, #28
 8000d38:	462b      	mov	r3, r5
 8000d3a:	2204      	movs	r2, #4
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8000d3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000d40:	4718      	bx	r3
 8000d42:	bf00      	nop

08000d44 <ASPEP_sendBeacon>:
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  * @param  *capabilities Matched capabilities between controller and performer
  */
void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000d44:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
             | (((uint32_t)capabilities->version) << 4U)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000d46:	780b      	ldrb	r3, [r1, #0]
             | (((uint32_t)capabilities->version) << 4U)
 8000d48:	790a      	ldrb	r2, [r1, #4]
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000d4a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d4e:	4c1e      	ldr	r4, [pc, #120]	@ (8000dc8 <ASPEP_sendBeacon+0x84>)
             | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000d50:	01db      	lsls	r3, r3, #7
 8000d52:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
             | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000d56:	784a      	ldrb	r2, [r1, #1]
 8000d58:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000d5c:	78ca      	ldrb	r2, [r1, #3]
             | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000d5e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
             | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000d62:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d66:	b2da      	uxtb	r2, r3
 8000d68:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000d6c:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d70:	5ca2      	ldrb	r2, [r4, r2]
 8000d72:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000d76:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d78:	5ca2      	ldrb	r2, [r4, r2]
 8000d7a:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000d7e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d80:	5ca2      	ldrb	r2, [r4, r2]
 8000d82:	4c12      	ldr	r4, [pc, #72]	@ (8000dcc <ASPEP_sendBeacon+0x88>)
 8000d84:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000d88:	5ca2      	ldrb	r2, [r4, r2]
 8000d8a:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000d8e:	f043 0305 	orr.w	r3, r3, #5
 8000d92:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000d96:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000d98:	b14b      	cbz	r3, 8000dae <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d9a:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000d9c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000da0:	b913      	cbnz	r3, 8000da8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000da2:	2302      	movs	r3, #2
 8000da4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dac:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000dae:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000db2:	2303      	movs	r3, #3
 8000db4:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000db8:	6481      	str	r1, [r0, #72]	@ 0x48
 8000dba:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000dbc:	2204      	movs	r2, #4
 8000dbe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
}
 8000dc0:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000dc4:	6940      	ldr	r0, [r0, #20]
 8000dc6:	4718      	bx	r3
 8000dc8:	0800bddc 	.word	0x0800bddc
 8000dcc:	0800bdcc 	.word	0x0800bdcc

08000dd0 <ASPEP_sendPing>:
{
 8000dd0:	b430      	push	{r4, r5}
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000dd2:	014b      	lsls	r3, r1, #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000dd4:	f890 c060 	ldrb.w	ip, [r0, #96]	@ 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000dd8:	f890 4063 	ldrb.w	r4, [r0, #99]	@ 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000ddc:	4d1d      	ldr	r5, [pc, #116]	@ (8000e54 <ASPEP_sendPing+0x84>)
                   | (uint32_t)((uint32_t)cBit << 5U)
 8000dde:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000de2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
                   | (uint32_t)((uint32_t)Nbit << 6U)
 8000de6:	f00c 0101 	and.w	r1, ip, #1
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000dea:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8000dee:	ea43 13c1 	orr.w	r3, r3, r1, lsl #7
                   | (uint32_t)((uint32_t)ipID << 8U)
 8000df2:	f004 040f 	and.w	r4, r4, #15
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000df6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	4c16      	ldr	r4, [pc, #88]	@ (8000e58 <ASPEP_sendPing+0x88>)
 8000dfe:	f042 0206 	orr.w	r2, r2, #6
                   | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000e02:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000e06:	5ca2      	ldrb	r2, [r4, r2]
 8000e08:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000e0c:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000e0e:	5ca2      	ldrb	r2, [r4, r2]
 8000e10:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000e14:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000e16:	5ca2      	ldrb	r2, [r4, r2]
 8000e18:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000e1c:	5ceb      	ldrb	r3, [r5, r3]
 8000e1e:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000e22:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000e26:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8000e28:	b143      	cbz	r3, 8000e3c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000e2a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000e2c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000e30:	b913      	cbnz	r3, 8000e38 <ASPEP_sendPing+0x68>
          pHandle->ctrlBuffer.state = pending;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
}
 8000e38:	bc30      	pop	{r4, r5}
 8000e3a:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000e3c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000e46:	6481      	str	r1, [r0, #72]	@ 0x48
 8000e48:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000e4a:	2204      	movs	r2, #4
 8000e4c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8000e4e:	6940      	ldr	r0, [r0, #20]
}
 8000e50:	bc30      	pop	{r4, r5}
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000e52:	4718      	bx	r3
 8000e54:	0800bdcc 	.word	0x0800bdcc
 8000e58:	0800bddc 	.word	0x0800bddc

08000e5c <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000e5c:	2a0a      	cmp	r2, #10
 8000e5e:	d009      	beq.n	8000e74 <ASPEP_getBuffer+0x18>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000e60:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d91d      	bls.n	8000ea4 <ASPEP_getBuffer+0x48>
 8000e68:	f890 303e 	ldrb.w	r3, [r0, #62]	@ 0x3e
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d90d      	bls.n	8000e8c <ASPEP_getBuffer+0x30>
        result = false;
 8000e70:	2000      	movs	r0, #0
}
 8000e72:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000e74:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d8f9      	bhi.n	8000e70 <ASPEP_getBuffer+0x14>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000e7c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
        pHandle->syncBuffer.state = writeLock;
 8000e7e:	2201      	movs	r2, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000e80:	3304      	adds	r3, #4
 8000e82:	600b      	str	r3, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000e84:	f880 202e 	strb.w	r2, [r0, #46]	@ 0x2e
  bool result = true;
 8000e88:	2001      	movs	r0, #1
 8000e8a:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000e8c:	6b83      	ldr	r3, [r0, #56]	@ 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000e8e:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000e92:	f100 0238 	add.w	r2, r0, #56	@ 0x38
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000e96:	3304      	adds	r3, #4
          pHandle->asyncBufferB.state = writeLock;
 8000e98:	f880 c03e 	strb.w	ip, [r0, #62]	@ 0x3e
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000e9c:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000e9e:	600b      	str	r3, [r1, #0]
  bool result = true;
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000ea4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000ea6:	f04f 0c01 	mov.w	ip, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000eaa:	f100 0230 	add.w	r2, r0, #48	@ 0x30
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000eae:	3304      	adds	r3, #4
          pHandle->asyncBufferA.state = writeLock;
 8000eb0:	f880 c036 	strb.w	ip, [r0, #54]	@ 0x36
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000eb4:	6402      	str	r2, [r0, #64]	@ 0x40
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000eb6:	600b      	str	r3, [r1, #0]
 8000eb8:	e7f2      	b.n	8000ea0 <ASPEP_getBuffer+0x44>
 8000eba:	bf00      	nop

08000ebc <ASPEP_sendPacket>:
{
 8000ebc:	4684      	mov	ip, r0
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000ebe:	f890 0064 	ldrb.w	r0, [r0, #100]	@ 0x64
 8000ec2:	2802      	cmp	r0, #2
 8000ec4:	d001      	beq.n	8000eca <ASPEP_sendPacket+0xe>
      result = ASPEP_NOT_CONNECTED;
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	4770      	bx	lr
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000eca:	ea43 1002 	orr.w	r0, r3, r2, lsl #4
      *header = tmpHeader;
 8000ece:	f841 0c04 	str.w	r0, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000ed2:	f89c 006c 	ldrb.w	r0, [ip, #108]	@ 0x6c
 8000ed6:	2801      	cmp	r0, #1
 8000ed8:	d104      	bne.n	8000ee4 <ASPEP_sendPacket+0x28>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000eda:	f64f 60ca 	movw	r0, #65226	@ 0xfeca
 8000ede:	5288      	strh	r0, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000ee0:	3202      	adds	r2, #2
 8000ee2:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000ee4:	2b0a      	cmp	r3, #10
 8000ee6:	d105      	bne.n	8000ef4 <ASPEP_sendPacket+0x38>
        if (pSupHandle->MCP_PacketAvailable)
 8000ee8:	f89c 0010 	ldrb.w	r0, [ip, #16]
 8000eec:	b348      	cbz	r0, 8000f42 <ASPEP_sendPacket+0x86>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from controller is processed*/
 8000eee:	2000      	movs	r0, #0
 8000ef0:	f88c 0010 	strb.w	r0, [ip, #16]
  uint32_t header = *headerPtr;
 8000ef4:	f851 0c04 	ldr.w	r0, [r1, #-4]
{
 8000ef8:	b570      	push	{r4, r5, r6, lr}
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000efa:	4d34      	ldr	r5, [pc, #208]	@ (8000fcc <ASPEP_sendPacket+0x110>)
 8000efc:	b2c4      	uxtb	r4, r0
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000efe:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000f00:	5d2e      	ldrb	r6, [r5, r4]
 8000f02:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8000f06:	4074      	eors	r4, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000f08:	f1a1 0e04 	sub.w	lr, r1, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000f0c:	5d2e      	ldrb	r6, [r5, r4]
 8000f0e:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8000f12:	4074      	eors	r4, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000f14:	b292      	uxth	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f16:	5d2c      	ldrb	r4, [r5, r4]
 8000f18:	f3c0 6503 	ubfx	r5, r0, #24, #4
 8000f1c:	406c      	eors	r4, r5
 8000f1e:	4d2c      	ldr	r5, [pc, #176]	@ (8000fd0 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000f20:	5d2c      	ldrb	r4, [r5, r4]
 8000f22:	ea40 7004 	orr.w	r0, r0, r4, lsl #28
 8000f26:	f841 0c04 	str.w	r0, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f2a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000f2c:	f8dc 1048 	ldr.w	r1, [ip, #72]	@ 0x48
 8000f30:	b1b9      	cbz	r1, 8000f62 <ASPEP_sendPacket+0xa6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f32:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	d006      	beq.n	8000f46 <ASPEP_sendPacket+0x8a>
      else if (MCTL_SYNC == dataType)
 8000f38:	2b0a      	cmp	r3, #10
 8000f3a:	d02a      	beq.n	8000f92 <ASPEP_sendPacket+0xd6>
      else if(ASPEP_CTRL == dataType)
 8000f3c:	b37b      	cbz	r3, 8000f9e <ASPEP_sendPacket+0xe2>
  uint8_t result = ASPEP_OK;
 8000f3e:	2000      	movs	r0, #0
}
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
          result = MCTL_SYNC_NOT_EXPECTED;
 8000f42:	2001      	movs	r0, #1
}
 8000f44:	4770      	bx	lr
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000f46:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000f4a:	6819      	ldr	r1, [r3, #0]
  uint8_t result = ASPEP_OK;
 8000f4c:	458e      	cmp	lr, r1
 8000f4e:	bf14      	ite	ne
 8000f50:	2003      	movne	r0, #3
 8000f52:	2000      	moveq	r0, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000f54:	f8dc 1044 	ldr.w	r1, [ip, #68]	@ 0x44
 8000f58:	b3a1      	cbz	r1, 8000fc4 <ASPEP_sendPacket+0x108>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000f5a:	2102      	movs	r1, #2
 8000f5c:	7199      	strb	r1, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000f5e:	809a      	strh	r2, [r3, #4]
}
 8000f60:	bd70      	pop	{r4, r5, r6, pc}
      if (MCTL_ASYNC == dataType)
 8000f62:	2b09      	cmp	r3, #9
 8000f64:	d029      	beq.n	8000fba <ASPEP_sendPacket+0xfe>
      else if (MCTL_SYNC == dataType)
 8000f66:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000f68:	f04f 0303 	mov.w	r3, #3
 8000f6c:	bf0b      	itete	eq
 8000f6e:	f88c 302e 	strbeq.w	r3, [ip, #46]	@ 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000f72:	f88c 3024 	strbne.w	r3, [ip, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000f76:	f10c 0328 	addeq.w	r3, ip, #40	@ 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000f7a:	f10c 0320 	addne.w	r3, ip, #32
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000f7e:	f8cc 3048 	str.w	r3, [ip, #72]	@ 0x48
 8000f82:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8000f84:	f8dc 3058 	ldr.w	r3, [ip, #88]	@ 0x58
 8000f88:	f8dc 0014 	ldr.w	r0, [ip, #20]
 8000f8c:	4671      	mov	r1, lr
 8000f8e:	4798      	blx	r3
 8000f90:	e7d5      	b.n	8000f3e <ASPEP_sendPacket+0x82>
        if (pHandle -> syncBuffer.state != writeLock)
 8000f92:	f89c 302e 	ldrb.w	r3, [ip, #46]	@ 0x2e
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d009      	beq.n	8000fae <ASPEP_sendPacket+0xf2>
          result = ASPEP_BUFFER_ERROR;
 8000f9a:	2003      	movs	r0, #3
}
 8000f9c:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle->ctrlBuffer.state != available)
 8000f9e:	f89c 3024 	ldrb.w	r3, [ip, #36]	@ 0x24
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d1f9      	bne.n	8000f9a <ASPEP_sendPacket+0xde>
          pHandle->ctrlBuffer.state = pending;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	f88c 3024 	strb.w	r3, [ip, #36]	@ 0x24
 8000fac:	e7c7      	b.n	8000f3e <ASPEP_sendPacket+0x82>
          pHandle->syncBuffer.state = pending;
 8000fae:	2302      	movs	r3, #2
 8000fb0:	f88c 302e 	strb.w	r3, [ip, #46]	@ 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000fb4:	f8ac 202c 	strh.w	r2, [ip, #44]	@ 0x2c
 8000fb8:	e7c1      	b.n	8000f3e <ASPEP_sendPacket+0x82>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000fba:	f8dc 3040 	ldr.w	r3, [ip, #64]	@ 0x40
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000fc2:	e7dc      	b.n	8000f7e <ASPEP_sendPacket+0xc2>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000fc4:	f8cc 3044 	str.w	r3, [ip, #68]	@ 0x44
 8000fc8:	e7c7      	b.n	8000f5a <ASPEP_sendPacket+0x9e>
 8000fca:	bf00      	nop
 8000fcc:	0800bddc 	.word	0x0800bddc
 8000fd0:	0800bdcc 	.word	0x0800bdcc

08000fd4 <ASPEP_HWDataTransmittedIT>:
  * Therefore, there is no need to protect this ISR against another higher priority ISR (HF Task).
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000fd4:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000fd6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8000fda:	2b03      	cmp	r3, #3
{
 8000fdc:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000fde:	d013      	beq.n	8001008 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000fe0:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000fe6:	f890 202e 	ldrb.w	r2, [r0, #46]	@ 0x2e
 8000fea:	2a02      	cmp	r2, #2
 8000fec:	d013      	beq.n	8001016 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d11d      	bne.n	800102e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000ff2:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ff6:	6d83      	ldr	r3, [r0, #88]	@ 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000ff8:	6481      	str	r1, [r0, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	6940      	ldr	r0, [r0, #20]
 8000ffe:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8001000:	2303      	movs	r3, #3
 8001002:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 8001006:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8001008:	f890 302e 	ldrb.w	r3, [r0, #46]	@ 0x2e
      pHandle->ctrlBuffer.state = available;
 800100c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 800100e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8001010:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
    if (pHandle->syncBuffer.state == pending)
 8001014:	d10b      	bne.n	800102e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8001016:	f104 0028 	add.w	r0, r4, #40	@ 0x28
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800101a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800101c:	64a0      	str	r0, [r4, #72]	@ 0x48
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800101e:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8001020:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001022:	6960      	ldr	r0, [r4, #20]
 8001024:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8001026:	2303      	movs	r3, #3
 8001028:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
}
 800102c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 800102e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8001030:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8001032:	b1cb      	cbz	r3, 8001068 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8001034:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8001036:	64a3      	str	r3, [r4, #72]	@ 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8001038:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800103a:	6819      	ldr	r1, [r3, #0]
 800103c:	889a      	ldrh	r2, [r3, #4]
 800103e:	6960      	ldr	r0, [r4, #20]
 8001040:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001042:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8001044:	f894 3036 	ldrb.w	r3, [r4, #54]	@ 0x36
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <ASPEP_HWDataTransmittedIT+0x88>
 800104c:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8001050:	2b02      	cmp	r3, #2
 8001052:	d003      	beq.n	800105c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8001054:	2300      	movs	r3, #0
 8001056:	6463      	str	r3, [r4, #68]	@ 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8001058:	b662      	cpsie	i
}
 800105a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 800105c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800105e:	0063      	lsls	r3, r4, #1
 8001060:	3368      	adds	r3, #104	@ 0x68
 8001062:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8001064:	6463      	str	r3, [r4, #68]	@ 0x44
        {
 8001066:	e7f7      	b.n	8001058 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8001068:	64a3      	str	r3, [r4, #72]	@ 0x48
 800106a:	e7f5      	b.n	8001058 <ASPEP_HWDataTransmittedIT+0x84>

0800106c <ASPEP_RXframeProcess>:
  * @param  *packetLength Length of the packet to be processed
  *
  * @return Returns the buffer of data transmitted by the MCP controller device
  */
uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 800106c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint16_t packetNumber;
#if VALID_CRC_DATA
    bool validCRCData = true;
#endif
    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8001070:	f890 5061 	ldrb.w	r5, [r0, #97]	@ 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8001074:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8001076:	2300      	movs	r3, #0
{
 8001078:	4604      	mov	r4, r0
    *packetLength = 0;
 800107a:	800b      	strh	r3, [r1, #0]
    if (pHandle->NewPacketAvailable)
 800107c:	b19d      	cbz	r5, 80010a6 <ASPEP_RXframeProcess+0x3a>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 800107e:	f890 5064 	ldrb.w	r5, [r0, #100]	@ 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8001082:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      switch (pHandle->ASPEP_State)
 8001086:	2d01      	cmp	r5, #1
 8001088:	d04e      	beq.n	8001128 <ASPEP_RXframeProcess+0xbc>
 800108a:	2d02      	cmp	r5, #2
 800108c:	d012      	beq.n	80010b4 <ASPEP_RXframeProcess+0x48>
 800108e:	b9d5      	cbnz	r5, 80010c6 <ASPEP_RXframeProcess+0x5a>
      {
        case ASPEP_IDLE:
        {
          if (BEACON == pHandle->rxPacketType)
 8001090:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8001092:	2b05      	cmp	r3, #5
 8001094:	d062      	beq.n	800115c <ASPEP_RXframeProcess+0xf0>
              /* Nothing to do, controller has to send back new beacon with matching capabilities */
            }
            /* Beacon Packet must be answered*/
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
          }
          else if (PING == pHandle->rxPacketType)
 8001096:	2b06      	cmp	r3, #6
 8001098:	d115      	bne.n	80010c6 <ASPEP_RXframeProcess+0x5a>
          {
            /* In Listening for controller performer, */
            packetNumber = (uint16_t)((packetHeader & 0x0FFFF000U) >> (uint16_t)12U);
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 800109a:	f3c2 320f 	ubfx	r2, r2, #12, #16
 800109e:	4629      	mov	r1, r5
 80010a0:	f7ff fe96 	bl	8000dd0 <ASPEP_sendPing>
 80010a4:	e00f      	b.n	80010c6 <ASPEP_RXframeProcess+0x5a>
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
    }
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80010a6:	f890 3062 	ldrb.w	r3, [r0, #98]	@ 0x62
 80010aa:	b9b3      	cbnz	r3, 80010da <ASPEP_RXframeProcess+0x6e>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80010ac:	2500      	movs	r5, #0
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
  return (result);
}
 80010ae:	4628      	mov	r0, r5
 80010b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
          if (BEACON == pHandle->rxPacketType)
 80010b4:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 80010b6:	2d05      	cmp	r5, #5
 80010b8:	f000 80d9 	beq.w	800126e <ASPEP_RXframeProcess+0x202>
          else if (PING == pHandle->rxPacketType)
 80010bc:	2d06      	cmp	r5, #6
 80010be:	f000 8125 	beq.w	800130c <ASPEP_RXframeProcess+0x2a0>
          else if (DATA_PACKET == pHandle->rxPacketType)
 80010c2:	2d09      	cmp	r5, #9
 80010c4:	d03e      	beq.n	8001144 <ASPEP_RXframeProcess+0xd8>
  uint8_t *result = NULL; //cstat !MISRAC2012-Rule-8.13
 80010c6:	2500      	movs	r5, #0
      pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80010c8:	6960      	ldr	r0, [r4, #20]
 80010ca:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80010cc:	2204      	movs	r2, #4
 80010ce:	f104 011c 	add.w	r1, r4, #28
 80010d2:	4798      	blx	r3
}
 80010d4:	4628      	mov	r0, r5
 80010d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80010da:	eb03 2303 	add.w	r3, r3, r3, lsl #8
 80010de:	021b      	lsls	r3, r3, #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80010e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80010e4:	488c      	ldr	r0, [pc, #560]	@ (8001318 <ASPEP_RXframeProcess+0x2ac>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80010e6:	4d8d      	ldr	r5, [pc, #564]	@ (800131c <ASPEP_RXframeProcess+0x2b0>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80010e8:	f082 0209 	eor.w	r2, r2, #9
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80010ec:	f043 010f 	orr.w	r1, r3, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80010f0:	5c82      	ldrb	r2, [r0, r2]
 80010f2:	ea82 4313 	eor.w	r3, r2, r3, lsr #16
 80010f6:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80010f8:	5cc3      	ldrb	r3, [r0, r3]
  *headerPtr |= (uint32_t)crc << 28;
 80010fa:	5ceb      	ldrb	r3, [r5, r3]
 80010fc:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8001100:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8001102:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8001104:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8001106:	2b00      	cmp	r3, #0
 8001108:	f000 80f4 	beq.w	80012f4 <ASPEP_RXframeProcess+0x288>
  __ASM volatile ("cpsie i" : : : "memory");
 800110c:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 800110e:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001112:	b913      	cbnz	r3, 800111a <ASPEP_RXframeProcess+0xae>
          pHandle->ctrlBuffer.state = pending;
 8001114:	2302      	movs	r3, #2
 8001116:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800111a:	2200      	movs	r2, #0
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 800111c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800111e:	6960      	ldr	r0, [r4, #20]
      pHandle->badPacketFlag = ASPEP_OK;
 8001120:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
      pHandle->fASPEP_HWSync(pHandle->ASPEPIp);
 8001124:	4798      	blx	r3
 8001126:	e7c1      	b.n	80010ac <ASPEP_RXframeProcess+0x40>
          if (BEACON == pHandle->rxPacketType)
 8001128:	6e81      	ldr	r1, [r0, #104]	@ 0x68
 800112a:	2905      	cmp	r1, #5
 800112c:	d064      	beq.n	80011f8 <ASPEP_RXframeProcess+0x18c>
          else if (PING == pHandle->rxPacketType)
 800112e:	2906      	cmp	r1, #6
 8001130:	d1c9      	bne.n	80010c6 <ASPEP_RXframeProcess+0x5a>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001132:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001136:	4629      	mov	r1, r5
 8001138:	f7ff fe4a 	bl	8000dd0 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800113c:	2302      	movs	r3, #2
 800113e:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 8001142:	e7c0      	b.n	80010c6 <ASPEP_RXframeProcess+0x5a>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001144:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
              *packetLength = pHandle->rxLengthASPEP;
 8001148:	f8b0 205c 	ldrh.w	r2, [r0, #92]	@ 0x5c
              result = pHandle->rxBuffer;
 800114c:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 800114e:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001150:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from controller */
 8001152:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8001156:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLengthASPEP;
 8001158:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 800115a:	e7b5      	b.n	80010c8 <ASPEP_RXframeProcess+0x5c>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800115c:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001160:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001164:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001166:	f894 606c 	ldrb.w	r6, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800116a:	f894 706e 	ldrb.w	r7, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800116e:	f894 906f 	ldrb.w	r9, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001172:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001176:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001178:	4563      	cmp	r3, ip
 800117a:	bf28      	it	cs
 800117c:	4663      	movcs	r3, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800117e:	42b0      	cmp	r0, r6
 8001180:	4601      	mov	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001182:	f3c2 3886 	ubfx	r8, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001186:	bf28      	it	cs
 8001188:	4631      	movcs	r1, r6
 800118a:	f361 0507 	bfi	r5, r1, #0, #8
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 800118e:	f3c2 5a46 	ubfx	sl, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001192:	45b8      	cmp	r8, r7
 8001194:	4641      	mov	r1, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001196:	f363 250f 	bfi	r5, r3, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800119a:	bf28      	it	cs
 800119c:	4639      	movcs	r1, r7
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800119e:	45ca      	cmp	sl, r9
 80011a0:	46d6      	mov	lr, sl
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011a2:	f361 4517 	bfi	r5, r1, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80011a6:	bf28      	it	cs
 80011a8:	46ce      	movcs	lr, r9
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011aa:	f36e 651f 	bfi	r5, lr, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80011ae:	42b0      	cmp	r0, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011b0:	66e5      	str	r5, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80011b2:	d81b      	bhi.n	80011ec <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80011b4:	459c      	cmp	ip, r3
 80011b6:	d819      	bhi.n	80011ec <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80011b8:	45b8      	cmp	r8, r7
 80011ba:	d817      	bhi.n	80011ec <ASPEP_RXframeProcess+0x180>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80011bc:	45ca      	cmp	sl, r9
 80011be:	d815      	bhi.n	80011ec <ASPEP_RXframeProcess+0x180>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80011c0:	f894 0070 	ldrb.w	r0, [r4, #112]	@ 0x70
 80011c4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80011c8:	4290      	cmp	r0, r2
 80011ca:	d10f      	bne.n	80011ec <ASPEP_RXframeProcess+0x180>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011cc:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011ce:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011d0:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011d2:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011d4:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80011d6:	ea4f 1e8e 	mov.w	lr, lr, lsl #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011da:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80011dc:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011de:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80011e0:	f8a4 e00e 	strh.w	lr, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80011e4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80011e8:	f884 1064 	strb.w	r1, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80011ec:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80011f0:	4620      	mov	r0, r4
 80011f2:	f7ff fda7 	bl	8000d44 <ASPEP_sendBeacon>
 80011f6:	e766      	b.n	80010c6 <ASPEP_RXframeProcess+0x5a>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 80011f8:	7f45      	ldrb	r5, [r0, #29]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80011fa:	f890 c06c 	ldrb.w	ip, [r0, #108]	@ 0x6c
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 80011fe:	7f01      	ldrb	r1, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001200:	f890 006d 	ldrb.w	r0, [r0, #109]	@ 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001204:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001208:	f894 e06f 	ldrb.w	lr, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800120c:	f005 053f 	and.w	r5, r5, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001210:	09c9      	lsrs	r1, r1, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001212:	42a8      	cmp	r0, r5
 8001214:	bf28      	it	cs
 8001216:	4628      	movcs	r0, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001218:	4561      	cmp	r1, ip
 800121a:	460f      	mov	r7, r1
 800121c:	bf28      	it	cs
 800121e:	4667      	movcs	r7, ip
 8001220:	f367 0307 	bfi	r3, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001224:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 8001228:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800122c:	42b7      	cmp	r7, r6
 800122e:	46b9      	mov	r9, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001230:	f360 230f 	bfi	r3, r0, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001234:	bf28      	it	cs
 8001236:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001238:	45f0      	cmp	r8, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800123a:	f369 4317 	bfi	r3, r9, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800123e:	46c1      	mov	r9, r8
 8001240:	bf28      	it	cs
 8001242:	46f1      	movcs	r9, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001244:	f369 631f 	bfi	r3, r9, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001248:	4561      	cmp	r1, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800124a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800124c:	d80b      	bhi.n	8001266 <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800124e:	4285      	cmp	r5, r0
 8001250:	d809      	bhi.n	8001266 <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001252:	42b7      	cmp	r7, r6
 8001254:	d807      	bhi.n	8001266 <ASPEP_RXframeProcess+0x1fa>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001256:	45f0      	cmp	r8, lr
 8001258:	d805      	bhi.n	8001266 <ASPEP_RXframeProcess+0x1fa>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800125a:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800125e:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001262:	4293      	cmp	r3, r2
 8001264:	d0c2      	beq.n	80011ec <ASPEP_RXframeProcess+0x180>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001266:	2300      	movs	r3, #0
 8001268:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
 800126c:	e7be      	b.n	80011ec <ASPEP_RXframeProcess+0x180>
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 800126e:	f894 c01d 	ldrb.w	ip, [r4, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001272:	f894 506d 	ldrb.w	r5, [r4, #109]	@ 0x6d
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001276:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001278:	f894 e06c 	ldrb.w	lr, [r4, #108]	@ 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800127c:	f894 606e 	ldrb.w	r6, [r4, #110]	@ 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001280:	f894 806f 	ldrb.w	r8, [r4, #111]	@ 0x6f
  MasterCapabilities.RX_maxSize = pHandle->rxHeader[1] &0x3FU;                  /*Bits 8 to  13*/
 8001284:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;                     /*Bit 7 */
 8001288:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800128a:	4565      	cmp	r5, ip
 800128c:	bf28      	it	cs
 800128e:	4665      	movcs	r5, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001290:	4570      	cmp	r0, lr
 8001292:	4607      	mov	r7, r0
 8001294:	4619      	mov	r1, r3
 8001296:	bf28      	it	cs
 8001298:	4677      	movcs	r7, lr
 800129a:	f367 0107 	bfi	r1, r7, #0, #8
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 800129e:	f3c2 3786 	ubfx	r7, r2, #14, #7
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21);  /*Bits 21 to 27  */
 80012a2:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80012a6:	42b7      	cmp	r7, r6
 80012a8:	46ba      	mov	sl, r7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80012aa:	f365 210f 	bfi	r1, r5, #8, #8
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80012ae:	bf28      	it	cs
 80012b0:	46b2      	movcs	sl, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80012b2:	45c1      	cmp	r9, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80012b4:	f36a 4117 	bfi	r1, sl, #16, #8
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80012b8:	46ca      	mov	sl, r9
 80012ba:	bf28      	it	cs
 80012bc:	46c2      	movcs	sl, r8
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80012be:	f36a 611f 	bfi	r1, sl, #24, #8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80012c2:	4570      	cmp	r0, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80012c4:	66e1      	str	r1, [r4, #108]	@ 0x6c
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80012c6:	f104 016c 	add.w	r1, r4, #108	@ 0x6c
 80012ca:	d80d      	bhi.n	80012e8 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80012cc:	45ac      	cmp	ip, r5
 80012ce:	d80b      	bhi.n	80012e8 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80012d0:	42b7      	cmp	r7, r6
 80012d2:	d809      	bhi.n	80012e8 <ASPEP_RXframeProcess+0x27c>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80012d4:	45c1      	cmp	r9, r8
 80012d6:	d807      	bhi.n	80012e8 <ASPEP_RXframeProcess+0x27c>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80012d8:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80012dc:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80012e0:	1a9b      	subs	r3, r3, r2
 80012e2:	fab3 f383 	clz	r3, r3
 80012e6:	095b      	lsrs	r3, r3, #5
 80012e8:	f884 3064 	strb.w	r3, [r4, #100]	@ 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80012ec:	4620      	mov	r0, r4
 80012ee:	f7ff fd29 	bl	8000d44 <ASPEP_sendBeacon>
 80012f2:	e6e8      	b.n	80010c6 <ASPEP_RXframeProcess+0x5a>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80012f4:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 80012f8:	2303      	movs	r3, #3
 80012fa:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80012fe:	64a1      	str	r1, [r4, #72]	@ 0x48
 8001300:	b662      	cpsie	i
      pHandle->fASPEP_cfg_trans(pHandle->ASPEPIp, txBuffer, bufferLength);
 8001302:	2204      	movs	r2, #4
 8001304:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001306:	6960      	ldr	r0, [r4, #20]
 8001308:	4798      	blx	r3
 800130a:	e706      	b.n	800111a <ASPEP_RXframeProcess+0xae>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 800130c:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8001310:	2101      	movs	r1, #1
 8001312:	f7ff fd5d 	bl	8000dd0 <ASPEP_sendPing>
 8001316:	e6d6      	b.n	80010c6 <ASPEP_RXframeProcess+0x5a>
 8001318:	0800bddc 	.word	0x0800bddc
 800131c:	0800bdcc 	.word	0x0800bdcc

08001320 <ASPEP_HWDataReceivedIT>:
  * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be configured after.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001320:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->ASPEP_TL_State)
 8001322:	f890 3065 	ldrb.w	r3, [r0, #101]	@ 0x65
{
 8001326:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8001328:	b143      	cbz	r3, 800133c <ASPEP_HWDataReceivedIT+0x1c>
 800132a:	2b01      	cmp	r3, #1
 800132c:	d000      	beq.n	8001330 <ASPEP_HWDataReceivedIT+0x10>
        break;
    }
#ifdef NULL_PTR_CHECK_ASP
  }
#endif
}
 800132e:	bd10      	pop	{r4, pc}
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001330:	2200      	movs	r2, #0
 8001332:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
        pHandle->NewPacketAvailable = true;
 8001336:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
}
 800133a:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800133c:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800133e:	4a1f      	ldr	r2, [pc, #124]	@ (80013bc <ASPEP_HWDataReceivedIT+0x9c>)
 8001340:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001342:	5cd3      	ldrb	r3, [r2, r3]
 8001344:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8001348:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800134a:	5cd3      	ldrb	r3, [r2, r3]
 800134c:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001350:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001352:	5cd3      	ldrb	r3, [r2, r3]
 8001354:	ea83 6311 	eor.w	r3, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8001358:	5cd3      	ldrb	r3, [r2, r3]
 800135a:	b95b      	cbnz	r3, 8001374 <ASPEP_HWDataReceivedIT+0x54>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 800135c:	7f03      	ldrb	r3, [r0, #28]
 800135e:	f003 030f 	and.w	r3, r3, #15
          switch (pHandle->rxPacketType)
 8001362:	2b06      	cmp	r3, #6
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8001364:	6683      	str	r3, [r0, #104]	@ 0x68
          switch (pHandle->rxPacketType)
 8001366:	d809      	bhi.n	800137c <ASPEP_HWDataReceivedIT+0x5c>
 8001368:	2b04      	cmp	r3, #4
 800136a:	d91f      	bls.n	80013ac <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->NewPacketAvailable = true;
 800136c:	2301      	movs	r3, #1
 800136e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
}
 8001372:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8001374:	2304      	movs	r3, #4
 8001376:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 800137a:	bd10      	pop	{r4, pc}
          switch (pHandle->rxPacketType)
 800137c:	2b09      	cmp	r3, #9
 800137e:	d115      	bne.n	80013ac <ASPEP_HWDataReceivedIT+0x8c>
              pHandle->rxLengthASPEP = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8001380:	8b83      	ldrh	r3, [r0, #28]
 8001382:	091b      	lsrs	r3, r3, #4
 8001384:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
              if (0U == pHandle->rxLengthASPEP) /* data packet with length 0 is a valid packet */
 8001388:	2b00      	cmp	r3, #0
 800138a:	d0ef      	beq.n	800136c <ASPEP_HWDataReceivedIT+0x4c>
              else if (pHandle->rxLengthASPEP <= pHandle->maxRXPayload)
 800138c:	f8b0 205e 	ldrh.w	r2, [r0, #94]	@ 0x5e
 8001390:	429a      	cmp	r2, r3
 8001392:	d30f      	bcc.n	80013b4 <ASPEP_HWDataReceivedIT+0x94>
                pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8001394:	f890 206c 	ldrb.w	r2, [r0, #108]	@ 0x6c
 8001398:	6981      	ldr	r1, [r0, #24]
 800139a:	6940      	ldr	r0, [r0, #20]
 800139c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80013a0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80013a2:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80013a4:	2301      	movs	r3, #1
 80013a6:	f884 3065 	strb.w	r3, [r4, #101]	@ 0x65
}
 80013aa:	bd10      	pop	{r4, pc}
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 80013ac:	2301      	movs	r3, #1
 80013ae:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
}
 80013b2:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80013b4:	2302      	movs	r3, #2
 80013b6:	f880 3062 	strb.w	r3, [r0, #98]	@ 0x62
}
 80013ba:	bd10      	pop	{r4, pc}
 80013bc:	0800bddc 	.word	0x0800bddc

080013c0 <ASPEP_HWReset>:
  * @brief  Resets DMA after debugger has stopped the MCU.
  *
  * @param  *pHandle Handler of the current instance of the ASPEP component
  */
void ASPEP_HWReset(ASPEP_Handle_t *pHandle)
{
 80013c0:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 80013c2:	2200      	movs	r2, #0
 80013c4:	f880 2065 	strb.w	r2, [r0, #101]	@ 0x65
    pHandle->fASPEP_cfg_recept(pHandle->ASPEPIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80013c8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80013ca:	6940      	ldr	r0, [r0, #20]
 80013cc:	2204      	movs	r2, #4
 80013ce:	311c      	adds	r1, #28
 80013d0:	4718      	bx	r3
 80013d2:	bf00      	nop

080013d4 <HAL_FDCAN_RxFifo0Callback>:
  }
}


void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
    if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != 0) {
 80013d4:	07ca      	lsls	r2, r1, #31
 80013d6:	d400      	bmi.n	80013da <HAL_FDCAN_RxFifo0Callback+0x6>
 80013d8:	4770      	bx	lr
void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs) {
 80013da:	b508      	push	{r3, lr}
        if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &rxHeader, rxData) == HAL_OK) {
 80013dc:	4a04      	ldr	r2, [pc, #16]	@ (80013f0 <HAL_FDCAN_RxFifo0Callback+0x1c>)
 80013de:	4b05      	ldr	r3, [pc, #20]	@ (80013f4 <HAL_FDCAN_RxFifo0Callback+0x20>)
 80013e0:	2140      	movs	r1, #64	@ 0x40
 80013e2:	f005 fb7f 	bl	8006ae4 <HAL_FDCAN_GetRxMessage>
 80013e6:	b910      	cbnz	r0, 80013ee <HAL_FDCAN_RxFifo0Callback+0x1a>
        	received_CAN_command = true;
 80013e8:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <HAL_FDCAN_RxFifo0Callback+0x24>)
 80013ea:	2201      	movs	r2, #1
 80013ec:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80013ee:	bd08      	pop	{r3, pc}
 80013f0:	20000570 	.word	0x20000570
 80013f4:	20000568 	.word	0x20000568
 80013f8:	20000598 	.word	0x20000598
 80013fc:	00000000 	.word	0x00000000

08001400 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001400:	b510      	push	{r4, lr}
 8001402:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001404:	2238      	movs	r2, #56	@ 0x38
 8001406:	2100      	movs	r1, #0
 8001408:	a806      	add	r0, sp, #24
 800140a:	f009 fe6b 	bl	800b0e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800140e:	2000      	movs	r0, #0
 8001410:	e9cd 0001 	strd	r0, r0, [sp, #4]
 8001414:	e9cd 0003 	strd	r0, r0, [sp, #12]
 8001418:	9005      	str	r0, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800141a:	f006 f893 	bl	8007544 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800141e:	ed9f 7b14 	vldr	d7, [pc, #80]	@ 8001470 <SystemClock_Config+0x70>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001422:	2302      	movs	r3, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001424:	2255      	movs	r2, #85	@ 0x55
 8001426:	e9cd 320f 	strd	r3, r2, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800142a:	2403      	movs	r4, #3
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800142c:	2208      	movs	r2, #8
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800142e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001430:	ed8d 7b06 	vstr	d7, [sp, #24]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001434:	e9cd 340d 	strd	r3, r4, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 8001438:	e9cd 2311 	strd	r2, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800143c:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143e:	f006 f8fb 	bl	8007638 <HAL_RCC_OscConfig>
 8001442:	b108      	cbz	r0, 8001448 <SystemClock_Config+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001444:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001446:	e7fe      	b.n	8001446 <SystemClock_Config+0x46>
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001448:	2104      	movs	r1, #4
 800144a:	4603      	mov	r3, r0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144c:	220f      	movs	r2, #15
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144e:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	e9cd 2401 	strd	r2, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001456:	e9cd 3303 	strd	r3, r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800145a:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800145c:	f006 fb6a 	bl	8007b34 <HAL_RCC_ClockConfig>
 8001460:	b108      	cbz	r0, 8001466 <SystemClock_Config+0x66>
 8001462:	b672      	cpsid	i
  while (1)
 8001464:	e7fe      	b.n	8001464 <SystemClock_Config+0x64>
  HAL_RCC_EnableCSS();
 8001466:	f006 fc93 	bl	8007d90 <HAL_RCC_EnableCSS>
}
 800146a:	b014      	add	sp, #80	@ 0x50
 800146c:	bd10      	pop	{r4, pc}
 800146e:	bf00      	nop
 8001470:	00000001 	.word	0x00000001
 8001474:	00010000 	.word	0x00010000

08001478 <MX_USART2_UART_Init>:
{
 8001478:	b510      	push	{r4, lr}
__HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 800147a:	4a17      	ldr	r2, [pc, #92]	@ (80014d8 <MX_USART2_UART_Init+0x60>)
 800147c:	4c17      	ldr	r4, [pc, #92]	@ (80014dc <MX_USART2_UART_Init+0x64>)
  huart2.Instance = USART2;
 800147e:	4818      	ldr	r0, [pc, #96]	@ (80014e0 <MX_USART2_UART_Init+0x68>)
__HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 8001480:	67e2      	str	r2, [r4, #124]	@ 0x7c
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001482:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 115200;
 8001484:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
__HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 8001488:	6294      	str	r4, [r2, #40]	@ 0x28
  huart2.Instance = USART2;
 800148a:	6020      	str	r0, [r4, #0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800148c:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001490:	e9c4 1301 	strd	r1, r3, [r4, #4]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001494:	e9c4 3303 	strd	r3, r3, [r4, #12]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001498:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149c:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a0:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014a4:	f007 fc94 	bl	8008dd0 <HAL_UART_Init>
 80014a8:	b108      	cbz	r0, 80014ae <MX_USART2_UART_Init+0x36>
 80014aa:	b672      	cpsid	i
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MX_USART2_UART_Init+0x34>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014ae:	4601      	mov	r1, r0
 80014b0:	4620      	mov	r0, r4
 80014b2:	f007 fcdf 	bl	8008e74 <HAL_UARTEx_SetTxFifoThreshold>
 80014b6:	b108      	cbz	r0, 80014bc <MX_USART2_UART_Init+0x44>
 80014b8:	b672      	cpsid	i
  while (1)
 80014ba:	e7fe      	b.n	80014ba <MX_USART2_UART_Init+0x42>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014bc:	4601      	mov	r1, r0
 80014be:	4620      	mov	r0, r4
 80014c0:	f007 fd1a 	bl	8008ef8 <HAL_UARTEx_SetRxFifoThreshold>
 80014c4:	b108      	cbz	r0, 80014ca <MX_USART2_UART_Init+0x52>
 80014c6:	b672      	cpsid	i
  while (1)
 80014c8:	e7fe      	b.n	80014c8 <MX_USART2_UART_Init+0x50>
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80014ca:	4620      	mov	r0, r4
 80014cc:	f007 fcb4 	bl	8008e38 <HAL_UARTEx_DisableFifoMode>
 80014d0:	b108      	cbz	r0, 80014d6 <MX_USART2_UART_Init+0x5e>
 80014d2:	b672      	cpsid	i
  while (1)
 80014d4:	e7fe      	b.n	80014d4 <MX_USART2_UART_Init+0x5c>
}
 80014d6:	bd10      	pop	{r4, pc}
 80014d8:	200005a0 	.word	0x200005a0
 80014dc:	20000660 	.word	0x20000660
 80014e0:	40004400 	.word	0x40004400

080014e4 <main>:
{
 80014e4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e8:	2500      	movs	r5, #0
{
 80014ea:	b0a7      	sub	sp, #156	@ 0x9c
  HAL_Init();
 80014ec:	f003 ff10 	bl	8005310 <HAL_Init>
  SystemClock_Config();
 80014f0:	f7ff ff86 	bl	8001400 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	e9cd 5517 	strd	r5, r5, [sp, #92]	@ 0x5c
 80014f8:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fc:	4eab      	ldr	r6, [pc, #684]	@ (80017ac <main+0x2c8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	951b      	str	r5, [sp, #108]	@ 0x6c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001502:	48ab      	ldr	r0, [pc, #684]	@ (80017b0 <main+0x2cc>)
  hadc1.Instance = ADC1;
 8001504:	f8df 92dc 	ldr.w	r9, [pc, #732]	@ 80017e4 <main+0x300>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001508:	f043 0304 	orr.w	r3, r3, #4
 800150c:	64f3      	str	r3, [r6, #76]	@ 0x4c
 800150e:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001510:	f003 0304 	and.w	r3, r3, #4
 8001514:	9305      	str	r3, [sp, #20]
 8001516:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001518:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800151a:	f043 0320 	orr.w	r3, r3, #32
 800151e:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001520:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	9306      	str	r3, [sp, #24]
 8001528:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001532:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	9307      	str	r3, [sp, #28]
 800153a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153c:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 800153e:	f043 0302 	orr.w	r3, r3, #2
 8001542:	64f3      	str	r3, [r6, #76]	@ 0x4c
 8001544:	6cf3      	ldr	r3, [r6, #76]	@ 0x4c
 8001546:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800154a:	462a      	mov	r2, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800154c:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 800154e:	f244 0140 	movw	r1, #16448	@ 0x4040
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001552:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001554:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6, GPIO_PIN_RESET);
 8001556:	f005 ff6d 	bl	8007434 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	f244 0340 	movw	r3, #16448	@ 0x4040
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155e:	4894      	ldr	r0, [pc, #592]	@ (80017b0 <main+0x2cc>)
 8001560:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	e9cd 3417 	strd	r3, r4, [sp, #92]	@ 0x5c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001566:	e9cd 5519 	strd	r5, r5, [sp, #100]	@ 0x64
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800156a:	f44f 6880 	mov.w	r8, #1024	@ 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f005 fcad 	bl	8006ecc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001572:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001576:	488e      	ldr	r0, [pc, #568]	@ (80017b0 <main+0x2cc>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	9519      	str	r5, [sp, #100]	@ 0x64
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800157a:	a917      	add	r1, sp, #92	@ 0x5c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800157c:	e9cd 8317 	strd	r8, r3, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001580:	f005 fca4 	bl	8006ecc <HAL_GPIO_Init>
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001584:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	64b3      	str	r3, [r6, #72]	@ 0x48
 800158c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 800158e:	f003 0304 	and.w	r3, r3, #4
 8001592:	9303      	str	r3, [sp, #12]
 8001594:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001596:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
 8001598:	4323      	orrs	r3, r4
 800159a:	64b3      	str	r3, [r6, #72]	@ 0x48
 800159c:	6cb3      	ldr	r3, [r6, #72]	@ 0x48
  ADC_MultiModeTypeDef multimode = {0};
 800159e:	950c      	str	r5, [sp, #48]	@ 0x30
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a0:	4023      	ands	r3, r4
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015a2:	4629      	mov	r1, r5
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015a4:	9304      	str	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015a6:	223c      	movs	r2, #60	@ 0x3c
 80015a8:	a817      	add	r0, sp, #92	@ 0x5c
  ADC_MultiModeTypeDef multimode = {0};
 80015aa:	e9cd 550d 	strd	r5, r5, [sp, #52]	@ 0x34
  __HAL_RCC_DMA1_CLK_ENABLE();
 80015ae:	9b04      	ldr	r3, [sp, #16]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80015b0:	f009 fd98 	bl	800b0e4 <memset>
  ADC_ChannelConfTypeDef sConfig = {0};
 80015b4:	2220      	movs	r2, #32
 80015b6:	4629      	mov	r1, r5
 80015b8:	a80f      	add	r0, sp, #60	@ 0x3c
 80015ba:	f009 fd93 	bl	800b0e4 <memset>
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015be:	f44f 4700 	mov.w	r7, #32768	@ 0x8000
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80015c2:	e9c9 5501 	strd	r5, r5, [r9, #4]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80015c6:	e9c9 5404 	strd	r5, r4, [r9, #16]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80015ca:	e9c9 550b 	strd	r5, r5, [r9, #44]	@ 0x2c
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80015ce:	f8a9 501c 	strh.w	r5, [r9, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015d2:	f889 5024 	strb.w	r5, [r9, #36]	@ 0x24
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015d6:	f889 5038 	strb.w	r5, [r9, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015da:	f8c9 503c 	str.w	r5, [r9, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80015de:	f889 5040 	strb.w	r5, [r9, #64]	@ 0x40
  hadc1.Instance = ADC1;
 80015e2:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015e6:	2504      	movs	r5, #4
  hadc1.Init.NbrOfConversion = 2;
 80015e8:	2602      	movs	r6, #2
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015ea:	4648      	mov	r0, r9
  hadc1.Instance = ADC1;
 80015ec:	f8c9 2000 	str.w	r2, [r9]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80015f0:	f8c9 700c 	str.w	r7, [r9, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80015f4:	f8c9 5018 	str.w	r5, [r9, #24]
  hadc1.Init.NbrOfConversion = 2;
 80015f8:	f8c9 6020 	str.w	r6, [r9, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015fc:	f003 fec4 	bl	8005388 <HAL_ADC_Init>
 8001600:	b108      	cbz	r0, 8001606 <main+0x122>
 8001602:	b672      	cpsid	i
  while (1)
 8001604:	e7fe      	b.n	8001604 <main+0x120>
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001606:	900c      	str	r0, [sp, #48]	@ 0x30
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001608:	a90c      	add	r1, sp, #48	@ 0x30
 800160a:	4648      	mov	r0, r9
 800160c:	f004 fd1e 	bl	800604c <HAL_ADCEx_MultiModeConfigChannel>
 8001610:	b108      	cbz	r0, 8001616 <main+0x132>
 8001612:	b672      	cpsid	i
  while (1)
 8001614:	e7fe      	b.n	8001614 <main+0x130>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001616:	4b67      	ldr	r3, [pc, #412]	@ (80017b4 <main+0x2d0>)
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8001618:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 800161c:	f04f 0b09 	mov.w	fp, #9
  sConfigInjected.InjectedOffset = 0;
 8001620:	e9cd 501b 	strd	r5, r0, [sp, #108]	@ 0x6c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8001624:	e9cd 3b17 	strd	r3, fp, [sp, #92]	@ 0x5c
  sConfigInjected.QueueInjectedContext = DISABLE;
 8001628:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 800162c:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001630:	f04f 087f 	mov.w	r8, #127	@ 0x7f
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001634:	f04f 0a84 	mov.w	sl, #132	@ 0x84
 8001638:	2380      	movs	r3, #128	@ 0x80
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800163a:	a917      	add	r1, sp, #92	@ 0x5c
 800163c:	4648      	mov	r0, r9
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 800163e:	e9cd a321 	strd	sl, r3, [sp, #132]	@ 0x84
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001642:	9419      	str	r4, [sp, #100]	@ 0x64
  sConfigInjected.InjectedNbrOfConversion = 2;
 8001644:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8001646:	f8cd 8068 	str.w	r8, [sp, #104]	@ 0x68
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800164a:	f004 fa01 	bl	8005a50 <HAL_ADCEx_InjectedConfigChannel>
 800164e:	b108      	cbz	r0, 8001654 <main+0x170>
 8001650:	b672      	cpsid	i
  while (1)
 8001652:	e7fe      	b.n	8001652 <main+0x16e>
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001654:	4a58      	ldr	r2, [pc, #352]	@ (80017b8 <main+0x2d4>)
 8001656:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800165a:	a917      	add	r1, sp, #92	@ 0x5c
 800165c:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800165e:	e9cd 2317 	strd	r2, r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001662:	f004 f9f5 	bl	8005a50 <HAL_ADCEx_InjectedConfigChannel>
 8001666:	b108      	cbz	r0, 800166c <main+0x188>
 8001668:	b672      	cpsid	i
  while (1)
 800166a:	e7fe      	b.n	800166a <main+0x186>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800166c:	f8df e178 	ldr.w	lr, [pc, #376]	@ 80017e8 <main+0x304>
  sConfig.Offset = 0;
 8001670:	9014      	str	r0, [sp, #80]	@ 0x50
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001672:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001674:	a90f      	add	r1, sp, #60	@ 0x3c
 8001676:	4648      	mov	r0, r9
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001678:	e9cd 5811 	strd	r5, r8, [sp, #68]	@ 0x44
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800167c:	e9cd e20f 	strd	lr, r2, [sp, #60]	@ 0x3c
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001680:	9513      	str	r5, [sp, #76]	@ 0x4c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001682:	f003 ff75 	bl	8005570 <HAL_ADC_ConfigChannel>
 8001686:	b108      	cbz	r0, 800168c <main+0x1a8>
 8001688:	b672      	cpsid	i
  while (1)
 800168a:	e7fe      	b.n	800168a <main+0x1a6>
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800168c:	f8df c15c 	ldr.w	ip, [pc, #348]	@ 80017ec <main+0x308>
 8001690:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001692:	a90f      	add	r1, sp, #60	@ 0x3c
 8001694:	4648      	mov	r0, r9
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001696:	e9cd c30f 	strd	ip, r3, [sp, #60]	@ 0x3c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800169a:	f003 ff69 	bl	8005570 <HAL_ADC_ConfigChannel>
 800169e:	4601      	mov	r1, r0
 80016a0:	b108      	cbz	r0, 80016a6 <main+0x1c2>
 80016a2:	b672      	cpsid	i
  while (1)
 80016a4:	e7fe      	b.n	80016a4 <main+0x1c0>
  hadc2.Instance = ADC2;
 80016a6:	f8df 9148 	ldr.w	r9, [pc, #328]	@ 80017f0 <main+0x30c>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 80016aa:	9001      	str	r0, [sp, #4]
 80016ac:	223c      	movs	r2, #60	@ 0x3c
 80016ae:	a817      	add	r0, sp, #92	@ 0x5c
 80016b0:	f009 fd18 	bl	800b0e4 <memset>
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016b4:	9901      	ldr	r1, [sp, #4]
  hadc2.Instance = ADC2;
 80016b6:	4a41      	ldr	r2, [pc, #260]	@ (80017bc <main+0x2d8>)
  hadc2.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80016b8:	f8c9 700c 	str.w	r7, [r9, #12]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016bc:	4648      	mov	r0, r9
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80016be:	e9c9 1101 	strd	r1, r1, [r9, #4]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80016c2:	e9c9 1404 	strd	r1, r4, [r9, #16]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c6:	f8c9 5018 	str.w	r5, [r9, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80016ca:	f8a9 101c 	strh.w	r1, [r9, #28]
  hadc2.Init.NbrOfConversion = 1;
 80016ce:	f8c9 4020 	str.w	r4, [r9, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80016d2:	f889 1024 	strb.w	r1, [r9, #36]	@ 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80016d6:	f889 1038 	strb.w	r1, [r9, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016da:	f8c9 103c 	str.w	r1, [r9, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80016de:	f889 1040 	strb.w	r1, [r9, #64]	@ 0x40
  hadc2.Instance = ADC2;
 80016e2:	f8c9 2000 	str.w	r2, [r9]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80016e6:	f003 fe4f 	bl	8005388 <HAL_ADC_Init>
 80016ea:	b108      	cbz	r0, 80016f0 <main+0x20c>
 80016ec:	b672      	cpsid	i
  while (1)
 80016ee:	e7fe      	b.n	80016ee <main+0x20a>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 80016f0:	4a33      	ldr	r2, [pc, #204]	@ (80017c0 <main+0x2dc>)
  sConfigInjected.InjectedOffset = 0;
 80016f2:	901c      	str	r0, [sp, #112]	@ 0x70
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 80016f4:	2380      	movs	r3, #128	@ 0x80
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80016f6:	f8ad 0080 	strh.w	r0, [sp, #128]	@ 0x80
  sConfigInjected.QueueInjectedContext = DISABLE;
 80016fa:	f88d 0082 	strb.w	r0, [sp, #130]	@ 0x82
  sConfigInjected.InjecOversamplingMode = DISABLE;
 80016fe:	f88d 008c 	strb.w	r0, [sp, #140]	@ 0x8c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001702:	a917      	add	r1, sp, #92	@ 0x5c
 8001704:	4648      	mov	r0, r9
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_6CYCLES_5;
 8001706:	e9cd b418 	strd	fp, r4, [sp, #96]	@ 0x60
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 800170a:	e9cd 851a 	strd	r8, r5, [sp, #104]	@ 0x68
  sConfigInjected.InjectedNbrOfConversion = 2;
 800170e:	961f      	str	r6, [sp, #124]	@ 0x7c
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJEC_T1_CC4;
 8001710:	f8cd a084 	str.w	sl, [sp, #132]	@ 0x84
  sConfigInjected.ExternalTrigInjecConvEdge = ADC_EXTERNALTRIGINJECCONV_EDGE_RISING;
 8001714:	9322      	str	r3, [sp, #136]	@ 0x88
  sConfigInjected.InjectedChannel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001716:	9217      	str	r2, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001718:	f004 f99a 	bl	8005a50 <HAL_ADCEx_InjectedConfigChannel>
 800171c:	b108      	cbz	r0, 8001722 <main+0x23e>
 800171e:	b672      	cpsid	i
  while (1)
 8001720:	e7fe      	b.n	8001720 <main+0x23c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_3;
 8001722:	4b24      	ldr	r3, [pc, #144]	@ (80017b4 <main+0x2d0>)
 8001724:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001726:	4648      	mov	r0, r9
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 8001728:	f240 130f 	movw	r3, #271	@ 0x10f
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 800172c:	a917      	add	r1, sp, #92	@ 0x5c
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_2;
 800172e:	9318      	str	r3, [sp, #96]	@ 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc2, &sConfigInjected) != HAL_OK)
 8001730:	f004 f98e 	bl	8005a50 <HAL_ADCEx_InjectedConfigChannel>
 8001734:	4603      	mov	r3, r0
 8001736:	b108      	cbz	r0, 800173c <main+0x258>
 8001738:	b672      	cpsid	i
  while (1)
 800173a:	e7fe      	b.n	800173a <main+0x256>
  hcomp1.Instance = COMP1;
 800173c:	4821      	ldr	r0, [pc, #132]	@ (80017c4 <main+0x2e0>)
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 800173e:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001742:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001746:	6043      	str	r3, [r0, #4]
  hcomp1.Instance = COMP1;
 8001748:	4b1f      	ldr	r3, [pc, #124]	@ (80017c8 <main+0x2e4>)
 800174a:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH1;
 800174c:	2340      	movs	r3, #64	@ 0x40
 800174e:	6083      	str	r3, [r0, #8]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001750:	f004 fce0 	bl	8006114 <HAL_COMP_Init>
 8001754:	b108      	cbz	r0, 800175a <main+0x276>
 8001756:	b672      	cpsid	i
  while (1)
 8001758:	e7fe      	b.n	8001758 <main+0x274>
  hcomp2.Instance = COMP2;
 800175a:	481c      	ldr	r0, [pc, #112]	@ (80017cc <main+0x2e8>)
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 800175c:	4e1c      	ldr	r6, [pc, #112]	@ (80017d0 <main+0x2ec>)
 800175e:	2300      	movs	r3, #0
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 8001760:	2440      	movs	r4, #64	@ 0x40
  hcomp2.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8001762:	e9c0 6300 	strd	r6, r3, [r0]
  hcomp2.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001766:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800176a:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp2.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800176e:	6084      	str	r4, [r0, #8]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8001770:	f004 fcd0 	bl	8006114 <HAL_COMP_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	b108      	cbz	r0, 800177c <main+0x298>
 8001778:	b672      	cpsid	i
  while (1)
 800177a:	e7fe      	b.n	800177a <main+0x296>
  hcomp4.Instance = COMP4;
 800177c:	4815      	ldr	r0, [pc, #84]	@ (80017d4 <main+0x2f0>)
  hcomp4.Init.InputMinus = COMP_INPUT_MINUS_DAC3_CH2;
 800177e:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hcomp4.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001782:	e9c0 3303 	strd	r3, r3, [r0, #12]
  hcomp4.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8001786:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hcomp4.Instance = COMP4;
 800178a:	4b13      	ldr	r3, [pc, #76]	@ (80017d8 <main+0x2f4>)
 800178c:	6003      	str	r3, [r0, #0]
  if (HAL_COMP_Init(&hcomp4) != HAL_OK)
 800178e:	f004 fcc1 	bl	8006114 <HAL_COMP_Init>
 8001792:	b108      	cbz	r0, 8001798 <main+0x2b4>
 8001794:	b672      	cpsid	i
  while (1)
 8001796:	e7fe      	b.n	8001796 <main+0x2b2>
  hcordic.Instance = CORDIC;
 8001798:	4810      	ldr	r0, [pc, #64]	@ (80017dc <main+0x2f8>)
 800179a:	4b11      	ldr	r3, [pc, #68]	@ (80017e0 <main+0x2fc>)
 800179c:	6003      	str	r3, [r0, #0]
  if (HAL_CORDIC_Init(&hcordic) != HAL_OK)
 800179e:	f004 fd59 	bl	8006254 <HAL_CORDIC_Init>
 80017a2:	4601      	mov	r1, r0
 80017a4:	b330      	cbz	r0, 80017f4 <main+0x310>
 80017a6:	b672      	cpsid	i
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0x2c4>
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000800 	.word	0x48000800
 80017b4:	0c900008 	.word	0x0c900008
 80017b8:	32601000 	.word	0x32601000
 80017bc:	50000100 	.word	0x50000100
 80017c0:	cb8c0000 	.word	0xcb8c0000
 80017c4:	200008dc 	.word	0x200008dc
 80017c8:	40010200 	.word	0x40010200
 80017cc:	200008b8 	.word	0x200008b8
 80017d0:	40010204 	.word	0x40010204
 80017d4:	20000894 	.word	0x20000894
 80017d8:	4001020c 	.word	0x4001020c
 80017dc:	2000086c 	.word	0x2000086c
 80017e0:	40020c00 	.word	0x40020c00
 80017e4:	2000096c 	.word	0x2000096c
 80017e8:	04300002 	.word	0x04300002
 80017ec:	14f00020 	.word	0x14f00020
 80017f0:	20000900 	.word	0x20000900
  hdac3.Instance = DAC3;
 80017f4:	4d9f      	ldr	r5, [pc, #636]	@ (8001a74 <main+0x590>)
  DAC_ChannelConfTypeDef sConfig = {0};
 80017f6:	2230      	movs	r2, #48	@ 0x30
 80017f8:	a817      	add	r0, sp, #92	@ 0x5c
 80017fa:	f009 fc73 	bl	800b0e4 <memset>
  hdac3.Instance = DAC3;
 80017fe:	4b9e      	ldr	r3, [pc, #632]	@ (8001a78 <main+0x594>)
 8001800:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac3) != HAL_OK)
 8001802:	4628      	mov	r0, r5
 8001804:	f004 fdce 	bl	80063a4 <HAL_DAC_Init>
 8001808:	4602      	mov	r2, r0
 800180a:	b108      	cbz	r0, 8001810 <main+0x32c>
 800180c:	b672      	cpsid	i
  while (1)
 800180e:	e7fe      	b.n	800180e <main+0x32a>
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001810:	2302      	movs	r3, #2
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001812:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8001816:	f8ad 0060 	strh.w	r0, [sp, #96]	@ 0x60
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800181a:	901b      	str	r0, [sp, #108]	@ 0x6c
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800181c:	901e      	str	r0, [sp, #120]	@ 0x78
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800181e:	a917      	add	r1, sp, #92	@ 0x5c
 8001820:	4628      	mov	r0, r5
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_INTERNAL;
 8001822:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8001826:	9317      	str	r3, [sp, #92]	@ 0x5c
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001828:	f004 fdd2 	bl	80063d0 <HAL_DAC_ConfigChannel>
 800182c:	b108      	cbz	r0, 8001832 <main+0x34e>
 800182e:	b672      	cpsid	i
  while (1)
 8001830:	e7fe      	b.n	8001830 <main+0x34c>
  if (HAL_DAC_ConfigChannel(&hdac3, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001832:	4628      	mov	r0, r5
 8001834:	2210      	movs	r2, #16
 8001836:	a917      	add	r1, sp, #92	@ 0x5c
 8001838:	f004 fdca 	bl	80063d0 <HAL_DAC_ConfigChannel>
 800183c:	4603      	mov	r3, r0
 800183e:	b108      	cbz	r0, 8001844 <main+0x360>
 8001840:	b672      	cpsid	i
  while (1)
 8001842:	e7fe      	b.n	8001842 <main+0x35e>
  hopamp1.Instance = OPAMP1;
 8001844:	488d      	ldr	r0, [pc, #564]	@ (8001a7c <main+0x598>)
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001846:	f44f 3600 	mov.w	r6, #131072	@ 0x20000
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800184a:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800184e:	6103      	str	r3, [r0, #16]
  hopamp1.Init.InternalOutput = DISABLE;
 8001850:	7503      	strb	r3, [r0, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001852:	6183      	str	r3, [r0, #24]
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8001854:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001856:	f44f 4540 	mov.w	r5, #49152	@ 0xc000
  hopamp1.Instance = OPAMP1;
 800185a:	4b89      	ldr	r3, [pc, #548]	@ (8001a80 <main+0x59c>)
 800185c:	6003      	str	r3, [r0, #0]
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800185e:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8001862:	f005 fdf7 	bl	8007454 <HAL_OPAMP_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	b108      	cbz	r0, 800186e <main+0x38a>
 800186a:	b672      	cpsid	i
  while (1)
 800186c:	e7fe      	b.n	800186c <main+0x388>
  hopamp2.Instance = OPAMP2;
 800186e:	4885      	ldr	r0, [pc, #532]	@ (8001a84 <main+0x5a0>)
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8001870:	e9c0 3401 	strd	r3, r4, [r0, #4]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001874:	6103      	str	r3, [r0, #16]
  hopamp2.Init.InternalOutput = DISABLE;
 8001876:	7503      	strb	r3, [r0, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8001878:	6183      	str	r3, [r0, #24]
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800187a:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp2.Instance = OPAMP2;
 800187c:	4b82      	ldr	r3, [pc, #520]	@ (8001a88 <main+0x5a4>)
 800187e:	6003      	str	r3, [r0, #0]
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001880:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8001884:	f005 fde6 	bl	8007454 <HAL_OPAMP_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	b108      	cbz	r0, 8001890 <main+0x3ac>
 800188c:	b672      	cpsid	i
  while (1)
 800188e:	e7fe      	b.n	800188e <main+0x3aa>
  hopamp3.Instance = OPAMP3;
 8001890:	487e      	ldr	r0, [pc, #504]	@ (8001a8c <main+0x5a8>)
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8001892:	e9c0 6509 	strd	r6, r5, [r0, #36]	@ 0x24
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_NORMALSPEED;
 8001896:	6043      	str	r3, [r0, #4]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8001898:	6103      	str	r3, [r0, #16]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800189a:	6183      	str	r3, [r0, #24]
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 800189c:	62c3      	str	r3, [r0, #44]	@ 0x2c
  hopamp3.Init.InternalOutput = ENABLE;
 800189e:	2501      	movs	r5, #1
  hopamp3.Instance = OPAMP3;
 80018a0:	4b7b      	ldr	r3, [pc, #492]	@ (8001a90 <main+0x5ac>)
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80018a2:	6084      	str	r4, [r0, #8]
  hopamp3.Instance = OPAMP3;
 80018a4:	6003      	str	r3, [r0, #0]
  hopamp3.Init.InternalOutput = ENABLE;
 80018a6:	7505      	strb	r5, [r0, #20]
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80018a8:	f005 fdd4 	bl	8007454 <HAL_OPAMP_Init>
 80018ac:	4604      	mov	r4, r0
 80018ae:	b108      	cbz	r0, 80018b4 <main+0x3d0>
 80018b0:	b672      	cpsid	i
  while (1)
 80018b2:	e7fe      	b.n	80018b2 <main+0x3ce>
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80018b4:	e9cd 000c 	strd	r0, r0, [sp, #48]	@ 0x30
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018b8:	e9cd 000e 	strd	r0, r0, [sp, #56]	@ 0x38
 80018bc:	e9cd 0010 	strd	r0, r0, [sp, #64]	@ 0x40
 80018c0:	e9cd 0012 	strd	r0, r0, [sp, #72]	@ 0x48
 80018c4:	e9cd 0014 	strd	r0, r0, [sp, #80]	@ 0x50
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c8:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 80018cc:	9009      	str	r0, [sp, #36]	@ 0x24
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80018ce:	4601      	mov	r1, r0
 80018d0:	2234      	movs	r2, #52	@ 0x34
 80018d2:	a817      	add	r0, sp, #92	@ 0x5c
 80018d4:	f009 fc06 	bl	800b0e4 <memset>
  htim1.Instance = TIM1;
 80018d8:	486e      	ldr	r0, [pc, #440]	@ (8001a94 <main+0x5b0>)
 80018da:	4b6f      	ldr	r3, [pc, #444]	@ (8001a98 <main+0x5b4>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80018dc:	6145      	str	r5, [r0, #20]
  htim1.Instance = TIM1;
 80018de:	6003      	str	r3, [r0, #0]
  htim1.Init.Period = ((PWM_PERIOD_CYCLES) / 2);
 80018e0:	2520      	movs	r5, #32
 80018e2:	f44f 53a6 	mov.w	r3, #5312	@ 0x14c0
 80018e6:	e9c0 5302 	strd	r5, r3, [r0, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80018ea:	f44f 7380 	mov.w	r3, #256	@ 0x100
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80018ee:	6044      	str	r4, [r0, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018f0:	6184      	str	r4, [r0, #24]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80018f2:	6103      	str	r3, [r0, #16]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80018f4:	f006 fc60 	bl	80081b8 <HAL_TIM_PWM_Init>
 80018f8:	b108      	cbz	r0, 80018fe <main+0x41a>
 80018fa:	b672      	cpsid	i
  while (1)
 80018fc:	e7fe      	b.n	80018fc <main+0x418>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 80018fe:	2470      	movs	r4, #112	@ 0x70
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001900:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001902:	4864      	ldr	r0, [pc, #400]	@ (8001a94 <main+0x5b0>)
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8001904:	9409      	str	r4, [sp, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001906:	a909      	add	r1, sp, #36	@ 0x24
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001908:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800190c:	f006 fdfa 	bl	8008504 <HAL_TIMEx_MasterConfigSynchronization>
 8001910:	b108      	cbz	r0, 8001916 <main+0x432>
 8001912:	b672      	cpsid	i
  while (1)
 8001914:	e7fe      	b.n	8001914 <main+0x430>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001916:	2501      	movs	r5, #1
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_HIGH;
 8001918:	900e      	str	r0, [sp, #56]	@ 0x38
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 800191a:	2602      	movs	r6, #2
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800191c:	485d      	ldr	r0, [pc, #372]	@ (8001a94 <main+0x5b0>)
 800191e:	aa0c      	add	r2, sp, #48	@ 0x30
 8001920:	4629      	mov	r1, r5
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP1;
 8001922:	e9cd 650c 	strd	r6, r5, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001926:	f006 fe8d 	bl	8008644 <HAL_TIMEx_ConfigBreakInput>
 800192a:	b108      	cbz	r0, 8001930 <main+0x44c>
 800192c:	b672      	cpsid	i
  while (1)
 800192e:	e7fe      	b.n	800192e <main+0x44a>
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001930:	2704      	movs	r7, #4
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001932:	4858      	ldr	r0, [pc, #352]	@ (8001a94 <main+0x5b0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP2;
 8001934:	970c      	str	r7, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001936:	aa0c      	add	r2, sp, #48	@ 0x30
 8001938:	4629      	mov	r1, r5
 800193a:	f006 fe83 	bl	8008644 <HAL_TIMEx_ConfigBreakInput>
 800193e:	b108      	cbz	r0, 8001944 <main+0x460>
 8001940:	b672      	cpsid	i
  while (1)
 8001942:	e7fe      	b.n	8001942 <main+0x45e>
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001944:	aa0c      	add	r2, sp, #48	@ 0x30
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 8001946:	2310      	movs	r3, #16
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8001948:	4852      	ldr	r0, [pc, #328]	@ (8001a94 <main+0x5b0>)
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_COMP4;
 800194a:	930c      	str	r3, [sp, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakInput(&htim1, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 800194c:	4629      	mov	r1, r5
 800194e:	f006 fe79 	bl	8008644 <HAL_TIMEx_ConfigBreakInput>
 8001952:	4602      	mov	r2, r0
 8001954:	b108      	cbz	r0, 800195a <main+0x476>
 8001956:	b672      	cpsid	i
  while (1)
 8001958:	e7fe      	b.n	8001958 <main+0x474>
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800195a:	e9cd 0011 	strd	r0, r0, [sp, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800195e:	e9cd 0013 	strd	r0, r0, [sp, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001962:	9015      	str	r0, [sp, #84]	@ 0x54
  sConfigOC.Pulse = ((PWM_PERIOD_CYCLES) / 4);
 8001964:	f44f 6326 	mov.w	r3, #2656	@ 0xa60
 8001968:	2060      	movs	r0, #96	@ 0x60
 800196a:	e9cd 030f 	strd	r0, r3, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196e:	a90f      	add	r1, sp, #60	@ 0x3c
 8001970:	4848      	ldr	r0, [pc, #288]	@ (8001a94 <main+0x5b0>)
 8001972:	f006 fce1 	bl	8008338 <HAL_TIM_PWM_ConfigChannel>
 8001976:	b108      	cbz	r0, 800197c <main+0x498>
 8001978:	b672      	cpsid	i
  while (1)
 800197a:	e7fe      	b.n	800197a <main+0x496>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800197c:	4845      	ldr	r0, [pc, #276]	@ (8001a94 <main+0x5b0>)
 800197e:	463a      	mov	r2, r7
 8001980:	a90f      	add	r1, sp, #60	@ 0x3c
 8001982:	f006 fcd9 	bl	8008338 <HAL_TIM_PWM_ConfigChannel>
 8001986:	b108      	cbz	r0, 800198c <main+0x4a8>
 8001988:	b672      	cpsid	i
  while (1)
 800198a:	e7fe      	b.n	800198a <main+0x4a6>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800198c:	4841      	ldr	r0, [pc, #260]	@ (8001a94 <main+0x5b0>)
 800198e:	2208      	movs	r2, #8
 8001990:	a90f      	add	r1, sp, #60	@ 0x3c
 8001992:	f006 fcd1 	bl	8008338 <HAL_TIM_PWM_ConfigChannel>
 8001996:	b108      	cbz	r0, 800199c <main+0x4b8>
 8001998:	b672      	cpsid	i
  while (1)
 800199a:	e7fe      	b.n	800199a <main+0x4b6>
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 800199c:	f241 43bf 	movw	r3, #5311	@ 0x14bf
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a0:	483c      	ldr	r0, [pc, #240]	@ (8001a94 <main+0x5b0>)
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80019a2:	940f      	str	r4, [sp, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80019a6:	220c      	movs	r2, #12
  sConfigOC.Pulse = (((PWM_PERIOD_CYCLES) / 2) - (HTMIN));
 80019a8:	9310      	str	r3, [sp, #64]	@ 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019aa:	f006 fcc5 	bl	8008338 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	b108      	cbz	r0, 80019b4 <main+0x4d0>
 80019b0:	b672      	cpsid	i
  while (1)
 80019b2:	e7fe      	b.n	80019b2 <main+0x4ce>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80019b4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80019b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80019bc:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
  sBreakDeadTimeConfig.DeadTime = ((DEAD_TIME_COUNTS) / 2);
 80019c0:	223f      	movs	r2, #63	@ 0x3f
 80019c2:	e9cd 0219 	strd	r0, r2, [sp, #100]	@ 0x64
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80019ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019ce:	e9cd 121b 	strd	r1, r2, [sp, #108]	@ 0x6c
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80019d2:	e9cd 001e 	strd	r0, r0, [sp, #120]	@ 0x78
  sBreakDeadTimeConfig.BreakFilter = 3;
 80019d6:	2203      	movs	r2, #3
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019d8:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019dc:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e0:	482c      	ldr	r0, [pc, #176]	@ (8001a94 <main+0x5b0>)
  sBreakDeadTimeConfig.BreakFilter = 3;
 80019e2:	921d      	str	r2, [sp, #116]	@ 0x74
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019e4:	a917      	add	r1, sp, #92	@ 0x5c
  sBreakDeadTimeConfig.Break2Filter = 3;
 80019e6:	9221      	str	r2, [sp, #132]	@ 0x84
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80019e8:	9320      	str	r3, [sp, #128]	@ 0x80
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80019ea:	f006 fddd 	bl	80085a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80019ee:	4604      	mov	r4, r0
 80019f0:	b108      	cbz	r0, 80019f6 <main+0x512>
 80019f2:	b672      	cpsid	i
  while (1)
 80019f4:	e7fe      	b.n	80019f4 <main+0x510>
  HAL_TIM_MspPostInit(&htim1);
 80019f6:	4827      	ldr	r0, [pc, #156]	@ (8001a94 <main+0x5b0>)
 80019f8:	f003 fa20 	bl	8004e3c <HAL_TIM_MspPostInit>
  MX_USART2_UART_Init();
 80019fc:	f7ff fd3c 	bl	8001478 <MX_USART2_UART_Init>
  MX_MotorControl_Init();
 8001a00:	f001 f9b0 	bl	8002d64 <MX_MotorControl_Init>
  hfdcan1.Instance = FDCAN1;
 8001a04:	4825      	ldr	r0, [pc, #148]	@ (8001a9c <main+0x5b8>)
 8001a06:	4a26      	ldr	r2, [pc, #152]	@ (8001aa0 <main+0x5bc>)
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001a08:	60c4      	str	r4, [r0, #12]
  hfdcan1.Init.NominalPrescaler = 68;
 8001a0a:	2344      	movs	r3, #68	@ 0x44
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001a0c:	e9c0 4401 	strd	r4, r4, [r0, #4]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8001a10:	e9c0 5606 	strd	r5, r6, [r0, #24]
  hfdcan1.Init.DataPrescaler = 1;
 8001a14:	e9c0 6508 	strd	r6, r5, [r0, #32]
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001a18:	e9c0 550a 	strd	r5, r5, [r0, #40]	@ 0x28
  hfdcan1.Init.StdFiltersNbr = 0;
 8001a1c:	e9c0 540c 	strd	r5, r4, [r0, #48]	@ 0x30
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001a20:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8001a24:	8204      	strh	r4, [r0, #16]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001a26:	7484      	strb	r4, [r0, #18]
  hfdcan1.Instance = FDCAN1;
 8001a28:	6002      	str	r2, [r0, #0]
  hfdcan1.Init.NominalPrescaler = 68;
 8001a2a:	6143      	str	r3, [r0, #20]
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001a2c:	f004 fec6 	bl	80067bc <HAL_FDCAN_Init>
 8001a30:	b108      	cbz	r0, 8001a36 <main+0x552>
 8001a32:	b672      	cpsid	i
  while (1)
 8001a34:	e7fe      	b.n	8001a34 <main+0x550>
  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8001a36:	2300      	movs	r3, #0
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8001a38:	2602      	movs	r6, #2
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a3a:	2501      	movs	r5, #1
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001a3c:	4817      	ldr	r0, [pc, #92]	@ (8001a9c <main+0x5b8>)
 8001a3e:	a917      	add	r1, sp, #92	@ 0x5c
  sFilterConfig.FilterIndex = 0;
 8001a40:	e9cd 3317 	strd	r3, r3, [sp, #92]	@ 0x5c
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8001a44:	e9cd 6519 	strd	r6, r5, [sp, #100]	@ 0x64
  sFilterConfig.FilterID2 = 0x000;
 8001a48:	e9cd 331b 	strd	r3, r3, [sp, #108]	@ 0x6c
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK) {
 8001a4c:	f004 ffa4 	bl	8006998 <HAL_FDCAN_ConfigFilter>
 8001a50:	b108      	cbz	r0, 8001a56 <main+0x572>
 8001a52:	b672      	cpsid	i
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <main+0x570>
  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 8001a56:	4811      	ldr	r0, [pc, #68]	@ (8001a9c <main+0x5b8>)
 8001a58:	f004 ffca 	bl	80069f0 <HAL_FDCAN_Start>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	b108      	cbz	r0, 8001a64 <main+0x580>
 8001a60:	b672      	cpsid	i
  while (1)
 8001a62:	e7fe      	b.n	8001a62 <main+0x57e>
  if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK) {
 8001a64:	480d      	ldr	r0, [pc, #52]	@ (8001a9c <main+0x5b8>)
 8001a66:	4629      	mov	r1, r5
 8001a68:	f005 f8dc 	bl	8006c24 <HAL_FDCAN_ActivateNotification>
 8001a6c:	4604      	mov	r4, r0
 8001a6e:	b1c8      	cbz	r0, 8001aa4 <main+0x5c0>
 8001a70:	b672      	cpsid	i
  while (1)
 8001a72:	e7fe      	b.n	8001a72 <main+0x58e>
 8001a74:	20000858 	.word	0x20000858
 8001a78:	50001000 	.word	0x50001000
 8001a7c:	200007b8 	.word	0x200007b8
 8001a80:	40010300 	.word	0x40010300
 8001a84:	2000077c 	.word	0x2000077c
 8001a88:	40010304 	.word	0x40010304
 8001a8c:	20000740 	.word	0x20000740
 8001a90:	40010308 	.word	0x40010308
 8001a94:	200006f4 	.word	0x200006f4
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	200007f4 	.word	0x200007f4
 8001aa0:	40006400 	.word	0x40006400
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8001aa4:	462a      	mov	r2, r5
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	2026      	movs	r0, #38	@ 0x26
 8001aaa:	f004 fbff 	bl	80062ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aae:	2026      	movs	r0, #38	@ 0x26
 8001ab0:	f004 fc38 	bl	8006324 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8001ab4:	4622      	mov	r2, r4
 8001ab6:	2103      	movs	r1, #3
 8001ab8:	200b      	movs	r0, #11
 8001aba:	f004 fbf7 	bl	80062ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001abe:	200b      	movs	r0, #11
 8001ac0:	f004 fc30 	bl	8006324 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8001ac4:	462a      	mov	r2, r5
 8001ac6:	2104      	movs	r1, #4
 8001ac8:	2018      	movs	r0, #24
 8001aca:	f004 fbef 	bl	80062ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8001ace:	2018      	movs	r0, #24
 8001ad0:	f004 fc28 	bl	8006324 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ad4:	4622      	mov	r2, r4
 8001ad6:	4621      	mov	r1, r4
 8001ad8:	2019      	movs	r0, #25
 8001ada:	f004 fbe7 	bl	80062ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f004 fc20 	bl	8006324 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_2_IRQn, 2, 0);
 8001ae4:	4631      	mov	r1, r6
 8001ae6:	4622      	mov	r2, r4
 8001ae8:	2012      	movs	r0, #18
 8001aea:	f004 fbdf 	bl	80062ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001aee:	2012      	movs	r0, #18
 8001af0:	f004 fc18 	bl	8006324 <HAL_NVIC_EnableIRQ>
	if (ESC_ID == RF_CAN_ID || ESC_ID == LB_CAN_ID){
 8001af4:	4e22      	ldr	r6, [pc, #136]	@ (8001b80 <main+0x69c>)
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001af6:	4622      	mov	r2, r4
 8001af8:	2103      	movs	r1, #3
 8001afa:	2028      	movs	r0, #40	@ 0x28
 8001afc:	f004 fbd6 	bl	80062ac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001b00:	2028      	movs	r0, #40	@ 0x28
 8001b02:	f004 fc0f 	bl	8006324 <HAL_NVIC_EnableIRQ>
	if (ESC_ID == RF_CAN_ID || ESC_ID == LB_CAN_ID){
 8001b06:	6833      	ldr	r3, [r6, #0]
 8001b08:	f033 0302 	bics.w	r3, r3, #2
 8001b0c:	d02e      	beq.n	8001b6c <main+0x688>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_RESET);
 8001b0e:	481d      	ldr	r0, [pc, #116]	@ (8001b84 <main+0x6a0>)
 8001b10:	4622      	mov	r2, r4
 8001b12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b16:	f005 fc8d 	bl	8007434 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2140      	movs	r1, #64	@ 0x40
 8001b1e:	4819      	ldr	r0, [pc, #100]	@ (8001b84 <main+0x6a0>)
 8001b20:	4d19      	ldr	r5, [pc, #100]	@ (8001b88 <main+0x6a4>)
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b22:	4c18      	ldr	r4, [pc, #96]	@ (8001b84 <main+0x6a0>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_RESET);  // Ensure LED is off at startup
 8001b24:	f005 fc86 	bl	8007434 <HAL_GPIO_WritePin>
     uart_debug_print("UART is initialized and ready to go\r\n");
 8001b28:	4818      	ldr	r0, [pc, #96]	@ (8001b8c <main+0x6a8>)
 8001b2a:	f003 faed 	bl	8005108 <uart_debug_print>
	 uart_debug_print("ESC ID is set to: %d\r\n", (int)ESC_ID);
 8001b2e:	4818      	ldr	r0, [pc, #96]	@ (8001b90 <main+0x6ac>)
 8001b30:	6831      	ldr	r1, [r6, #0]
 8001b32:	f003 fae9 	bl	8005108 <uart_debug_print>
	 if (received_CAN_command){
 8001b36:	782b      	ldrb	r3, [r5, #0]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d0fc      	beq.n	8001b36 <main+0x652>
	     received_CAN_command = false;
 8001b3c:	2300      	movs	r3, #0
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b3e:	2140      	movs	r1, #64	@ 0x40
 8001b40:	4620      	mov	r0, r4
	     received_CAN_command = false;
 8001b42:	702b      	strb	r3, [r5, #0]
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b44:	f005 fc7c 	bl	8007440 <HAL_GPIO_TogglePin>
	     HAL_Delay(25);
 8001b48:	2019      	movs	r0, #25
 8001b4a:	f003 fc0b 	bl	8005364 <HAL_Delay>
	     HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6);
 8001b4e:	2140      	movs	r1, #64	@ 0x40
 8001b50:	4620      	mov	r0, r4
 8001b52:	f005 fc75 	bl	8007440 <HAL_GPIO_TogglePin>
	     HAL_Delay(25);
 8001b56:	2019      	movs	r0, #25
 8001b58:	f003 fc04 	bl	8005364 <HAL_Delay>
	 	 uart_debug_print("---------->>>>>>Received CAN command<<<<<<-----------\r\n");
 8001b5c:	480d      	ldr	r0, [pc, #52]	@ (8001b94 <main+0x6b0>)
 8001b5e:	f003 fad3 	bl	8005108 <uart_debug_print>
	     CAN_Parse_MSG(&rxHeader, rxData);
 8001b62:	490d      	ldr	r1, [pc, #52]	@ (8001b98 <main+0x6b4>)
 8001b64:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <main+0x6b8>)
 8001b66:	f7ff f84b 	bl	8000c00 <CAN_Parse_MSG>
 8001b6a:	e7e4      	b.n	8001b36 <main+0x652>
	     uart_debug_print("EnableTermination\r\n");
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <main+0x6bc>)
 8001b6e:	f003 facb 	bl	8005108 <uart_debug_print>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14, GPIO_PIN_SET);
 8001b72:	4804      	ldr	r0, [pc, #16]	@ (8001b84 <main+0x6a0>)
 8001b74:	462a      	mov	r2, r5
 8001b76:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001b7a:	f005 fc5b 	bl	8007434 <HAL_GPIO_WritePin>
 8001b7e:	e7cc      	b.n	8001b1a <main+0x636>
 8001b80:	2000059c 	.word	0x2000059c
 8001b84:	48000800 	.word	0x48000800
 8001b88:	20000598 	.word	0x20000598
 8001b8c:	0800bd54 	.word	0x0800bd54
 8001b90:	0800bd7c 	.word	0x0800bd7c
 8001b94:	0800bd94 	.word	0x0800bd94
 8001b98:	20000568 	.word	0x20000568
 8001b9c:	20000570 	.word	0x20000570
 8001ba0:	0800bd40 	.word	0x0800bd40

08001ba4 <Error_Handler>:
 8001ba4:	b672      	cpsid	i
  while (1)
 8001ba6:	e7fe      	b.n	8001ba6 <Error_Handler+0x2>

08001ba8 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
  return (MCI_StartMotor(pMCI[M1]));
 8001ba8:	4b01      	ldr	r3, [pc, #4]	@ (8001bb0 <MC_StartMotor1+0x8>)
 8001baa:	6818      	ldr	r0, [r3, #0]
 8001bac:	f000 b8bc 	b.w	8001d28 <MCI_StartMotor>
 8001bb0:	20001ba8 	.word	0x20001ba8

08001bb4 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
  return (MCI_StopMotor(pMCI[M1]));
 8001bb4:	4b01      	ldr	r3, [pc, #4]	@ (8001bbc <MC_StopMotor1+0x8>)
 8001bb6:	6818      	ldr	r0, [r3, #0]
 8001bb8:	f000 b8cc 	b.w	8001d54 <MCI_StopMotor>
 8001bbc:	20001ba8 	.word	0x20001ba8

08001bc0 <MC_ProgramSpeedRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the speed
  *         value.
  */
__weak void MC_ProgramSpeedRampMotor1_F(float_t FinalSpeed, uint16_t hDurationms)
{
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8001bc0:	4b02      	ldr	r3, [pc, #8]	@ (8001bcc <MC_ProgramSpeedRampMotor1_F+0xc>)
{
 8001bc2:	4601      	mov	r1, r0
  MCI_ExecSpeedRamp_F(pMCI[M1], FinalSpeed, hDurationms);
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	f000 b83d 	b.w	8001c44 <MCI_ExecSpeedRamp_F>
 8001bca:	bf00      	nop
 8001bcc:	20001ba8 	.word	0x20001ba8

08001bd0 <MC_GetMecSpeedReferenceMotor1_F>:
/**
 *  @brief Returns the current mechanical rotor speed reference set for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetMecSpeedReferenceMotor1_F(void)
{
  return (MCI_GetMecSpeedRef_F(pMCI[M1]));
 8001bd0:	4b01      	ldr	r3, [pc, #4]	@ (8001bd8 <MC_GetMecSpeedReferenceMotor1_F+0x8>)
 8001bd2:	6818      	ldr	r0, [r3, #0]
 8001bd4:	f000 b93e 	b.w	8001e54 <MCI_GetMecSpeedRef_F>
 8001bd8:	20001ba8 	.word	0x20001ba8

08001bdc <MC_GetAverageMecSpeedMotor1_F>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in rpm.
 */
__weak float_t MC_GetAverageMecSpeedMotor1_F(void)
{
  return (MCI_GetAvrgMecSpeed_F(pMCI[M1]));
 8001bdc:	4b01      	ldr	r3, [pc, #4]	@ (8001be4 <MC_GetAverageMecSpeedMotor1_F+0x8>)
 8001bde:	6818      	ldr	r0, [r3, #0]
 8001be0:	f000 b926 	b.w	8001e30 <MCI_GetAvrgMecSpeed_F>
 8001be4:	20001ba8 	.word	0x20001ba8

08001be8 <MC_GetPhaseCurrentAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseCurrentAmplitudeMotor1(void)
{
  return (MCI_GetPhaseCurrentAmplitude(pMCI[M1]));
 8001be8:	4b01      	ldr	r3, [pc, #4]	@ (8001bf0 <MC_GetPhaseCurrentAmplitudeMotor1+0x8>)
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	f000 b980 	b.w	8001ef0 <MCI_GetPhaseCurrentAmplitude>
 8001bf0:	20001ba8 	.word	0x20001ba8

08001bf4 <MC_GetPhaseVoltageAmplitudeMotor1>:
 * @f]
 *
 */
__weak int16_t MC_GetPhaseVoltageAmplitudeMotor1(void)
{
  return (MCI_GetPhaseVoltageAmplitude(pMCI[M1]));
 8001bf4:	4b01      	ldr	r3, [pc, #4]	@ (8001bfc <MC_GetPhaseVoltageAmplitudeMotor1+0x8>)
 8001bf6:	6818      	ldr	r0, [r3, #0]
 8001bf8:	f000 b992 	b.w	8001f20 <MCI_GetPhaseVoltageAmplitude>
 8001bfc:	20001ba8 	.word	0x20001ba8

08001c00 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1(void)
{
  return (MCI_FaultAcknowledged(pMCI[M1]));
 8001c00:	4b01      	ldr	r3, [pc, #4]	@ (8001c08 <MC_AcknowledgeFaultMotor1+0x8>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f000 b8c2 	b.w	8001d8c <MCI_FaultAcknowledged>
 8001c08:	20001ba8 	.word	0x20001ba8

08001c0c <MC_GetOccurredFaultsMotor1>:
 * See @ref fault_codes "Motor Control Faults" for a list of
 * of all possible faults codes.
 */
__weak uint16_t MC_GetOccurredFaultsMotor1(void)
{
  return (MCI_GetOccurredFaults(pMCI[M1]));
 8001c0c:	4b01      	ldr	r3, [pc, #4]	@ (8001c14 <MC_GetOccurredFaultsMotor1+0x8>)
 8001c0e:	6818      	ldr	r0, [r3, #0]
 8001c10:	f000 b886 	b.w	8001d20 <MCI_GetOccurredFaults>
 8001c14:	20001ba8 	.word	0x20001ba8

08001c18 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t MC_GetSTMStateMotor1(void)
{
  return (MCI_GetSTMState(pMCI[M1]));
 8001c18:	4b01      	ldr	r3, [pc, #4]	@ (8001c20 <MC_GetSTMStateMotor1+0x8>)
 8001c1a:	6818      	ldr	r0, [r3, #0]
 8001c1c:	f000 b87e 	b.w	8001d1c <MCI_GetSTMState>
 8001c20:	20001ba8 	.word	0x20001ba8

08001c24 <MC_ProfilerCommand>:
 * @brief Not implemented MC_Profiler function.
 *  */ //cstat !MISRAC2012-Rule-2.7 !RED-unused-param  !MISRAC2012-Rule-2.7  !MISRAC2012-Rule-8.13
__weak uint8_t MC_ProfilerCommand(uint16_t rxLength, uint8_t *rxBuffer, int16_t txSyncFreeSpace, uint16_t *txLength, uint8_t *txBuffer)
{
  return (MCP_CMD_UNKNOWN);
}
 8001c24:	2002      	movs	r0, #2
 8001c26:	4770      	bx	lr

08001c28 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <MC_APP_PostMediumFrequencyHook_M1>:
 * @brief Hook function called right after the Medium Frequency Task for Motor 1.
 *
 *
 *
 */
__weak void MC_APP_PostMediumFrequencyHook_M1(void)
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop

08001c30 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001c30:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c34:	f240 3301 	movw	r3, #769	@ 0x301
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001c38:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 8001c3c:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 8001c3e:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c40:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_SPEED_MODE;

#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001c42:	4770      	bx	lr

08001c44 <MCI_ExecSpeedRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    float_t hFinalSpeed = ((FinalSpeed * (float_t)SPEED_UNIT) / (float_t)U_RPM);
 8001c44:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8001c60 <MCI_ExecSpeedRamp_F+0x1c>
 8001c48:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8001c4c:	b508      	push	{r3, lr}
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8001c4e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 8001c52:	460a      	mov	r2, r1
    MCI_ExecSpeedRamp(pHandle, (int16_t)hFinalSpeed, hDurationms);
 8001c54:	ee10 3a10 	vmov	r3, s0
 8001c58:	b219      	sxth	r1, r3
 8001c5a:	f7ff ffe9 	bl	8001c30 <MCI_ExecSpeedRamp>
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001c5e:	bd08      	pop	{r3, pc}
 8001c60:	3e2aaaab 	.word	0x3e2aaaab

08001c64 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001c64:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c68:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001c6c:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001c70:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001c72:	8382      	strh	r2, [r0, #28]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c74:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001c76:	4770      	bx	lr

08001c78 <MCI_SetCurrentReferences>:
  * function.

  @sa MCI_SetCurrentReferences_F
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001c78:	b082      	sub	sp, #8
  }
  else
  {
#endif

    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001c7a:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c7c:	f240 4301 	movw	r3, #1025	@ 0x401
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 8001c80:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 8001c82:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001c86:	8483      	strh	r3, [r0, #36]	@ 0x24
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001c88:	b002      	add	sp, #8
 8001c8a:	4770      	bx	lr

08001c8c <MCI_FaultProcessing>:
  }
  else
  {
#endif
    /* Set current errors */
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001c8c:	8c03      	ldrh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001c8e:	f8b0 c022 	ldrh.w	ip, [r0, #34]	@ 0x22
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001c92:	430b      	orrs	r3, r1
 8001c94:	ea23 0302 	bic.w	r3, r3, r2
    pHandle->PastFaults |= hSetErrors;
 8001c98:	ea41 010c 	orr.w	r1, r1, ip
    pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001c9c:	8403      	strh	r3, [r0, #32]
    pHandle->PastFaults |= hSetErrors;
 8001c9e:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop

08001ca4 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001ca4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d000      	beq.n	8001cae <MCI_ExecBufferedCommands+0xa>
 8001cac:	4770      	bx	lr
{
 8001cae:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001cb0:	7b02      	ldrb	r2, [r0, #12]
 8001cb2:	2a02      	cmp	r2, #2
 8001cb4:	4604      	mov	r4, r0
 8001cb6:	d021      	beq.n	8001cfc <MCI_ExecBufferedCommands+0x58>
 8001cb8:	2a03      	cmp	r2, #3
 8001cba:	d014      	beq.n	8001ce6 <MCI_ExecBufferedCommands+0x42>
 8001cbc:	2a01      	cmp	r2, #1
 8001cbe:	d119      	bne.n	8001cf4 <MCI_ExecBufferedCommands+0x50>
      {
        case MCI_CMD_EXECSPEEDRAMP:
        {
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001cc0:	6843      	ldr	r3, [r0, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 8001cc8:	6800      	ldr	r0, [r0, #0]
 8001cca:	2103      	movs	r1, #3
 8001ccc:	f008 fd70 	bl	800a7b0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001cd0:	8ba2      	ldrh	r2, [r4, #28]
 8001cd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001cd6:	6820      	ldr	r0, [r4, #0]
 8001cd8:	f008 fd6e 	bl	800a7b8 <STC_ExecRamp>

        default:
          break;
      }

      if (commandHasBeenExecuted)
 8001cdc:	b150      	cbz	r0, 8001cf4 <MCI_ExecBufferedCommands+0x50>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESSFULLY;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      }
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001ce4:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001ce6:	6842      	ldr	r2, [r0, #4]
 8001ce8:	f882 3024 	strb.w	r3, [r2, #36]	@ 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001cec:	f8d0 3012 	ldr.w	r3, [r0, #18]
 8001cf0:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001cf2:	e7f4      	b.n	8001cde <MCI_ExecBufferedCommands+0x3a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESSFULLY;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001cfa:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001cfc:	6843      	ldr	r3, [r0, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 8001d04:	6800      	ldr	r0, [r0, #0]
 8001d06:	2104      	movs	r1, #4
 8001d08:	f008 fd52 	bl	800a7b0 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 8001d0c:	8ba2      	ldrh	r2, [r4, #28]
 8001d0e:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001d12:	6820      	ldr	r0, [r4, #0]
 8001d14:	f008 fd50 	bl	800a7b8 <STC_ExecRamp>
          break;
 8001d18:	e7e0      	b.n	8001cdc <MCI_ExecBufferedCommands+0x38>
 8001d1a:	bf00      	nop

08001d1c <MCI_GetSTMState>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? FAULT_NOW : pHandle->State);
#else
  return (pHandle->State);
#endif
}
 8001d1c:	7fc0      	ldrb	r0, [r0, #31]
 8001d1e:	4770      	bx	lr

08001d20 <MCI_GetOccurredFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->PastFaults);
#else
  return ((uint16_t)pHandle->PastFaults);
#endif
}
 8001d20:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8001d22:	4770      	bx	lr

08001d24 <MCI_GetCurrentFaults>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MC_SW_ERROR : (uint16_t)pHandle->CurrentFaults);
#else
  return ((uint16_t)pHandle->CurrentFaults);
#endif
}
 8001d24:	8c00      	ldrh	r0, [r0, #32]
 8001d26:	4770      	bx	lr

08001d28 <MCI_StartMotor>:
{
 8001d28:	b510      	push	{r4, lr}
 8001d2a:	4604      	mov	r4, r0
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001d2c:	f7ff fff6 	bl	8001d1c <MCI_GetSTMState>
 8001d30:	b108      	cbz	r0, 8001d36 <MCI_StartMotor+0xe>
  bool retVal = false;
 8001d32:	2000      	movs	r0, #0
}
 8001d34:	bd10      	pop	{r4, pc}
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001d36:	4620      	mov	r0, r4
 8001d38:	f7ff fff2 	bl	8001d20 <MCI_GetOccurredFaults>
    if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001d3c:	2800      	cmp	r0, #0
 8001d3e:	d1f8      	bne.n	8001d32 <MCI_StartMotor+0xa>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001d40:	4620      	mov	r0, r4
 8001d42:	f7ff ffef 	bl	8001d24 <MCI_GetCurrentFaults>
        (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001d46:	2800      	cmp	r0, #0
 8001d48:	d1f3      	bne.n	8001d32 <MCI_StartMotor+0xa>
      pHandle->DirectCommand = MCI_START;
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	77a0      	strb	r0, [r4, #30]
      pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001d4e:	f884 0024 	strb.w	r0, [r4, #36]	@ 0x24
}
 8001d52:	bd10      	pop	{r4, pc}

08001d54 <MCI_StopMotor>:
{
 8001d54:	b538      	push	{r3, r4, r5, lr}
 8001d56:	4605      	mov	r5, r0
    State = MCI_GetSTMState(pHandle);
 8001d58:	f7ff ffe0 	bl	8001d1c <MCI_GetSTMState>
    if ((IDLE == State) || (ICLWAIT == State))
 8001d5c:	4604      	mov	r4, r0
 8001d5e:	b118      	cbz	r0, 8001d68 <MCI_StopMotor+0x14>
 8001d60:	f1b0 040c 	subs.w	r4, r0, #12
 8001d64:	bf18      	it	ne
 8001d66:	2401      	movne	r4, #1
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001d68:	4628      	mov	r0, r5
 8001d6a:	f7ff ffd9 	bl	8001d20 <MCI_GetOccurredFaults>
 8001d6e:	b110      	cbz	r0, 8001d76 <MCI_StopMotor+0x22>
  bool retVal = false;
 8001d70:	2400      	movs	r4, #0
}
 8001d72:	4620      	mov	r0, r4
 8001d74:	bd38      	pop	{r3, r4, r5, pc}
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001d76:	4628      	mov	r0, r5
 8001d78:	f7ff ffd4 	bl	8001d24 <MCI_GetCurrentFaults>
    if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001d7c:	2800      	cmp	r0, #0
 8001d7e:	d1f7      	bne.n	8001d70 <MCI_StopMotor+0x1c>
        (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	d0f5      	beq.n	8001d70 <MCI_StopMotor+0x1c>
      pHandle->DirectCommand = MCI_STOP;
 8001d84:	2305      	movs	r3, #5
 8001d86:	77ab      	strb	r3, [r5, #30]
      retVal = true;
 8001d88:	e7f3      	b.n	8001d72 <MCI_StopMotor+0x1e>
 8001d8a:	bf00      	nop

08001d8c <MCI_FaultAcknowledged>:
{
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4604      	mov	r4, r0
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001d90:	f7ff ffc4 	bl	8001d1c <MCI_GetSTMState>
 8001d94:	280b      	cmp	r0, #11
 8001d96:	d001      	beq.n	8001d9c <MCI_FaultAcknowledged+0x10>
  bool reVal = false;
 8001d98:	2000      	movs	r0, #0
}
 8001d9a:	bd10      	pop	{r4, pc}
    if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001d9c:	4620      	mov	r0, r4
 8001d9e:	f7ff ffc1 	bl	8001d24 <MCI_GetCurrentFaults>
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d1f8      	bne.n	8001d98 <MCI_FaultAcknowledged+0xc>
      pHandle->DirectCommand = MCI_ACK_FAULTS;
 8001da6:	2302      	movs	r3, #2
 8001da8:	77a3      	strb	r3, [r4, #30]
      pHandle->PastFaults = MC_NO_FAULTS;
 8001daa:	8460      	strh	r0, [r4, #34]	@ 0x22
      reVal = true;
 8001dac:	2001      	movs	r0, #1
}
 8001dae:	bd10      	pop	{r4, pc}

08001db0 <MCI_GetFaultState>:
    LocalFaultState = MC_SW_ERROR | (MC_SW_ERROR << 16);
  }
  else
  {
#endif
    LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001db0:	8c43      	ldrh	r3, [r0, #34]	@ 0x22
    LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 8001db2:	8c00      	ldrh	r0, [r0, #32]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (LocalFaultState);
}
 8001db4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop

08001dbc <MCI_GetControlMode>:
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001dbc:	f890 0025 	ldrb.w	r0, [r0, #37]	@ 0x25
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop

08001dc4 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001dc4:	7b03      	ldrb	r3, [r0, #12]
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d013      	beq.n	8001df2 <MCI_GetImposedMotorDirection+0x2e>
 8001dca:	2b03      	cmp	r3, #3
 8001dcc:	d009      	beq.n	8001de2 <MCI_GetImposedMotorDirection+0x1e>
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d117      	bne.n	8001e02 <MCI_GetImposedMotorDirection+0x3e>
    {
      case MCI_CMD_EXECSPEEDRAMP:
      {
        if (pHandle->hFinalSpeed < 0)
 8001dd2:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
  int16_t retVal = 1;
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	bfb4      	ite	lt
 8001dda:	f04f 30ff 	movlt.w	r0, #4294967295
 8001dde:	2001      	movge	r0, #1
 8001de0:	4770      	bx	lr
        break;
      }

      case MCI_CMD_SETCURRENTREFERENCES:
      {
        if (pHandle->Iqdref.q < 0)
 8001de2:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
  int16_t retVal = 1;
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	bfb4      	ite	lt
 8001dea:	f04f 30ff 	movlt.w	r0, #4294967295
 8001dee:	2001      	movge	r0, #1
 8001df0:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001df2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
  int16_t retVal = 1;
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	bfb4      	ite	lt
 8001dfa:	f04f 30ff 	movlt.w	r0, #4294967295
 8001dfe:	2001      	movge	r0, #1
 8001e00:	4770      	bx	lr
 8001e02:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (retVal);
}
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop

08001e08 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001e08:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop

08001e10 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001e10:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001e18:	8b80      	ldrh	r0, [r0, #28]
 8001e1a:	4770      	bx	lr

08001e1c <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001e1c:	6803      	ldr	r3, [r0, #0]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
    pHandle->IncDecAmount = 0;
 8001e22:	619a      	str	r2, [r3, #24]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop

08001e28 <MCI_GetAvrgMecSpeedUnit>:
static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
 8001e28:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001e2a:	6958      	ldr	r0, [r3, #20]
 8001e2c:	f008 bc58 	b.w	800a6e0 <SPD_GetAvrgMecSpeedUnit>

08001e30 <MCI_GetAvrgMecSpeed_F>:
  * @brief  Returns the last computed average mechanical speed, expressed in rpm
  *         and related to the sensor actually used by FOC algorithm.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak float_t MCI_GetAvrgMecSpeed_F(MCI_Handle_t *pHandle)
{
 8001e30:	b508      	push	{r3, lr}
 8001e32:	6803      	ldr	r3, [r0, #0]
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t *SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
    returnAvrgSpeed = (((float_t)SPD_GetAvrgMecSpeedUnit(SpeedSensor) * (float_t)U_RPM) / (float_t)SPEED_UNIT);
 8001e34:	6958      	ldr	r0, [r3, #20]
 8001e36:	f008 fc53 	bl	800a6e0 <SPD_GetAvrgMecSpeedUnit>
 8001e3a:	ee07 0a90 	vmov	s15, r0
 8001e3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e42:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (returnAvrgSpeed);
}
 8001e46:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e4a:	bd08      	pop	{r3, pc}

08001e4c <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001e4c:	6800      	ldr	r0, [r0, #0]
 8001e4e:	f008 bcab 	b.w	800a7a8 <STC_GetMecSpeedRefUnit>
 8001e52:	bf00      	nop

08001e54 <MCI_GetMecSpeedRef_F>:
  *
  * @param  pHandle Pointer on the component instance to work on.
  *
  */
__weak float_t MCI_GetMecSpeedRef_F(MCI_Handle_t *pHandle)
{
 8001e54:	b508      	push	{r3, lr}
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0.0f :
          (((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
#else
  return ((((float_t)STC_GetMecSpeedRefUnit(pHandle->pSTC) * (float_t)U_RPM) / (float_t)SPEED_UNIT));
 8001e56:	6800      	ldr	r0, [r0, #0]
 8001e58:	f008 fca6 	bl	800a7a8 <STC_GetMecSpeedRefUnit>
 8001e5c:	ee07 0a90 	vmov	s15, r0
 8001e60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e64:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
#endif
}
 8001e68:	ee27 0a80 	vmul.f32	s0, s15, s0
 8001e6c:	bd08      	pop	{r3, pc}
 8001e6e:	bf00      	nop

08001e70 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001e70:	6843      	ldr	r3, [r0, #4]
 8001e72:	6818      	ldr	r0, [r3, #0]
 8001e74:	b283      	uxth	r3, r0
 8001e76:	f36f 000f 	bfc	r0, #0, #16
{
 8001e7a:	b082      	sub	sp, #8
#endif
}
 8001e7c:	4318      	orrs	r0, r3
 8001e7e:	b002      	add	sp, #8
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop

08001e84 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001e84:	6843      	ldr	r3, [r0, #4]
 8001e86:	6858      	ldr	r0, [r3, #4]
 8001e88:	b283      	uxth	r3, r0
 8001e8a:	f36f 000f 	bfc	r0, #0, #16
{
 8001e8e:	b082      	sub	sp, #8
#endif
}
 8001e90:	4318      	orrs	r0, r3
 8001e92:	b002      	add	sp, #8
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop

08001e98 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001e98:	6843      	ldr	r3, [r0, #4]
 8001e9a:	68d8      	ldr	r0, [r3, #12]
 8001e9c:	b283      	uxth	r3, r0
 8001e9e:	f36f 000f 	bfc	r0, #0, #16
{
 8001ea2:	b082      	sub	sp, #8
#endif
}
 8001ea4:	4318      	orrs	r0, r3
 8001ea6:	b002      	add	sp, #8
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop

08001eac <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 8001eac:	6843      	ldr	r3, [r0, #4]
 8001eae:	6918      	ldr	r0, [r3, #16]
 8001eb0:	b283      	uxth	r3, r0
 8001eb2:	f36f 000f 	bfc	r0, #0, #16
{
 8001eb6:	b082      	sub	sp, #8
#endif
}
 8001eb8:	4318      	orrs	r0, r3
 8001eba:	b002      	add	sp, #8
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop

08001ec0 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 8001ec0:	6843      	ldr	r3, [r0, #4]
 8001ec2:	f8d3 0016 	ldr.w	r0, [r3, #22]
 8001ec6:	b283      	uxth	r3, r0
 8001ec8:	f36f 000f 	bfc	r0, #0, #16
{
 8001ecc:	b082      	sub	sp, #8
#endif
}
 8001ece:	4318      	orrs	r0, r3
 8001ed0:	b002      	add	sp, #8
 8001ed2:	4770      	bx	lr

08001ed4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001ed4:	6843      	ldr	r3, [r0, #4]
 8001ed6:	f8d3 001a 	ldr.w	r0, [r3, #26]
 8001eda:	b283      	uxth	r3, r0
 8001edc:	f36f 000f 	bfc	r0, #0, #16
{
 8001ee0:	b082      	sub	sp, #8
#endif
}
 8001ee2:	4318      	orrs	r0, r3
 8001ee4:	b002      	add	sp, #8
 8001ee6:	4770      	bx	lr

08001ee8 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_CHECK_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001ee8:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001eea:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001eee:	4770      	bx	lr

08001ef0 <MCI_GetPhaseCurrentAmplitude>:
    wAux = 0;
  }
  else
  {
#endif
  Local_Curr = pHandle->pFOCVars->Ialphabeta;
 8001ef0:	6842      	ldr	r2, [r0, #4]
 8001ef2:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 8001ef6:	f9b2 0006 	ldrsh.w	r0, [r2, #6]
 8001efa:	b672      	cpsid	i
static inline int16_t MCM_Modulus(int16_t alpha, int16_t beta)
{
  uint32_t temp_val;
  __disable_irq();
  /* Configure and call to CORDIC- */
  WRITE_REG(CORDIC->CSR,CORDIC_CONFIG_MODULUS);
 8001efc:	4a06      	ldr	r2, [pc, #24]	@ (8001f18 <MCI_GetPhaseCurrentAmplitude+0x28>)
 8001efe:	4907      	ldr	r1, [pc, #28]	@ (8001f1c <MCI_GetPhaseCurrentAmplitude+0x2c>)
 8001f00:	6011      	str	r1, [r2, #0]
  LL_CORDIC_WriteData(CORDIC, (((uint32_t)beta << 16U) | (uint32_t)alpha));
 8001f02:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  * @param  InData 0 .. 0xFFFFFFFF : 32-bit value to be provided as input data for CORDIC processing.
  * @retval None
  */
__STATIC_INLINE void LL_CORDIC_WriteData(CORDIC_TypeDef *CORDICx, uint32_t InData)
{
  WRITE_REG(CORDICx->WDATA, InData);
 8001f06:	6053      	str	r3, [r2, #4]
  return ((READ_BIT(CORDICx->CSR, CORDIC_CSR_RRDY) == (CORDIC_CSR_RRDY)) ? 1U : 0U);
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	dafc      	bge.n	8001f08 <MCI_GetPhaseCurrentAmplitude+0x18>
  * @param  CORDICx CORDIC Instance
  * @retval 32-bit output data of CORDIC processing.
  */
__STATIC_INLINE uint32_t LL_CORDIC_ReadData(const CORDIC_TypeDef *CORDICx)
{
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001f0e:	6890      	ldr	r0, [r2, #8]
  __ASM volatile ("cpsie i" : : : "memory");
 8001f10:	b662      	cpsie	i
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif

  return (wAux);
}
 8001f12:	b200      	sxth	r0, r0
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	40020c00 	.word	0x40020c00
 8001f1c:	00600063 	.word	0x00600063

08001f20 <MCI_GetPhaseVoltageAmplitude>:
#endif
    alphabeta_t Local_Voltage;
    int32_t wAux1;
    int32_t wAux2;

    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8001f20:	6842      	ldr	r2, [r0, #4]
{
 8001f22:	b508      	push	{r3, lr}
    Local_Voltage = pHandle->pFOCVars->Valphabeta;
 8001f24:	f9b2 301c 	ldrsh.w	r3, [r2, #28]
 8001f28:	f9b2 001a 	ldrsh.w	r0, [r2, #26]
    wAux1 = (int32_t)(Local_Voltage.alpha) * Local_Voltage.alpha;
    wAux2 = (int32_t)(Local_Voltage.beta) * Local_Voltage.beta;
 8001f2c:	fb03 f303 	mul.w	r3, r3, r3

    wAux1 += wAux2;
    wAux1 = MCM_Sqrt(wAux1);
 8001f30:	fb00 3000 	mla	r0, r0, r0, r3
 8001f34:	f000 f8ac 	bl	8002090 <MCM_Sqrt>

    if (wAux1 > INT16_MAX)
 8001f38:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8001f3c:	4298      	cmp	r0, r3
 8001f3e:	bfa8      	it	ge
 8001f40:	4618      	movge	r0, r3
    temp_wAux = (int16_t)wAux1;
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
  return (temp_wAux);
}
 8001f42:	b200      	sxth	r0, r0
 8001f44:	bd08      	pop	{r3, pc}
 8001f46:	bf00      	nop

08001f48 <MCI_Clear_Iqdref>:
/**
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001f48:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001f4a:	e9d0 0400 	ldrd	r0, r4, [r0]
 8001f4e:	f008 fcb5 	bl	800a8bc <STC_GetDefaultIqdref>
 8001f52:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001f56:	8220      	strh	r0, [r4, #16]
 8001f58:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_CHECK_MC_INT
  }
#endif
}
 8001f5a:	bd10      	pop	{r4, pc}

08001f5c <MCM_Clarke>:
  *                       beta = -(2*b+a)/sqrt(3)
  * @param  Input: stator values a and b in ab_t format.
  * @retval Stator values alpha and beta in alphabeta_t format.
  */
__weak alphabeta_t MCM_Clarke(ab_t Input)
{
 8001f5c:	f3c0 430f 	ubfx	r3, r0, #16, #16
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001f60:	f644 11e6 	movw	r1, #18918	@ 0x49e6
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001f64:	f24b 621a 	movw	r2, #46618	@ 0xb61a
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001f68:	fb13 f301 	smulbb	r3, r3, r1
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 8001f6c:	fb10 f202 	smulbb	r2, r0, r2
 8001f70:	eba2 0243 	sub.w	r2, r2, r3, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001f74:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
{
 8001f78:	b084      	sub	sp, #16
 8001f7a:	b203      	sxth	r3, r0
  if (wbeta_tmp > INT16_MAX)
 8001f7c:	da05      	bge.n	8001f8a <MCM_Clarke+0x2e>
 8001f7e:	13d1      	asrs	r1, r2, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 8001f80:	f511 4f00 	cmn.w	r1, #32768	@ 0x8000
 8001f84:	da0c      	bge.n	8001fa0 <MCM_Clarke+0x44>
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <MCM_Clarke+0x50>)
 8001f88:	e001      	b.n	8001f8e <MCM_Clarke+0x32>
 8001f8a:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  else
  {
    /* Nothing to do */
  }

  return (Output);
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	2000      	movs	r0, #0
 8001f92:	f363 000f 	bfi	r0, r3, #0, #16
 8001f96:	b293      	uxth	r3, r2
 8001f98:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001f9c:	b004      	add	sp, #16
 8001f9e:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 8001fa0:	4802      	ldr	r0, [pc, #8]	@ (8001fac <MCM_Clarke+0x50>)
 8001fa2:	b20a      	sxth	r2, r1
 8001fa4:	4282      	cmp	r2, r0
 8001fa6:	bfb8      	it	lt
 8001fa8:	4602      	movlt	r2, r0
 8001faa:	e7f0      	b.n	8001f8e <MCM_Clarke+0x32>
 8001fac:	ffff8001 	.word	0xffff8001

08001fb0 <MCM_Trig_Functions>:
  } CosSin;
  //cstat +MISRAC2012-Rule-19.2
  /* Configure CORDIC */
  /* Misra  violation Rule 11.4 A�Conversion�should�not�be�performed�between�a�
   * pointer�to�object and an integer type */
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001fb0:	4b06      	ldr	r3, [pc, #24]	@ (8001fcc <MCM_Trig_Functions+0x1c>)
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed�between�a
   * pointer�to�object and an integer type */
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001fb2:	f100 40ff 	add.w	r0, r0, #2139095040	@ 0x7f800000
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001fb6:	f04f 1260 	mov.w	r2, #6291552	@ 0x600060
  LL_CORDIC_WriteData(CORDIC, ((uint32_t)0x7FFF0000) + ((uint32_t)hAngle));
 8001fba:	f500 00fe 	add.w	r0, r0, #8323072	@ 0x7f0000
{
 8001fbe:	b082      	sub	sp, #8
  WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_COSINE);
 8001fc0:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 8001fc2:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 8001fc4:	6898      	ldr	r0, [r3, #8]
  /* Read angle */
  /* Misra  violation Rule�11.4 A�Conversion�should�not�be�performed between�a
   * pointer�to object and an integer type */
  CosSin.CordicRdata = LL_CORDIC_ReadData(CORDIC);
  return (CosSin.Components); //cstat !UNION-type-punning
}
 8001fc6:	b002      	add	sp, #8
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	40020c00 	.word	0x40020c00

08001fd0 <MCM_Park>:
{
 8001fd0:	b530      	push	{r4, r5, lr}
 8001fd2:	4605      	mov	r5, r0
 8001fd4:	4604      	mov	r4, r0
 8001fd6:	b085      	sub	sp, #20
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001fd8:	4608      	mov	r0, r1
 8001fda:	f7ff ffe9 	bl	8001fb0 <MCM_Trig_Functions>
 8001fde:	b22d      	sxth	r5, r5
 8001fe0:	b201      	sxth	r1, r0
 8001fe2:	1424      	asrs	r4, r4, #16
 8001fe4:	1400      	asrs	r0, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001fe6:	fb05 f301 	mul.w	r3, r5, r1
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001fea:	fb04 3310 	mls	r3, r4, r0, r3
  if (wqd_tmp > INT16_MAX)
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ff2:	da05      	bge.n	8002000 <MCM_Park+0x30>
 8001ff4:	13da      	asrs	r2, r3, #15
  else if (wqd_tmp < (-32768))
 8001ff6:	f512 4f00 	cmn.w	r2, #32768	@ 0x8000
 8001ffa:	da22      	bge.n	8002042 <MCM_Park+0x72>
 8001ffc:	4a14      	ldr	r2, [pc, #80]	@ (8002050 <MCM_Park+0x80>)
 8001ffe:	e001      	b.n	8002004 <MCM_Park+0x34>
 8002000:	f647 72ff 	movw	r2, #32767	@ 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8002004:	fb01 f404 	mul.w	r4, r1, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002008:	fb05 4400 	mla	r4, r5, r0, r4
  if (wqd_tmp > INT16_MAX)
 800200c:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8002010:	ea4f 33e4 	mov.w	r3, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8002014:	da04      	bge.n	8002020 <MCM_Park+0x50>
  else if (wqd_tmp < (-32768))
 8002016:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 800201a:	da0c      	bge.n	8002036 <MCM_Park+0x66>
 800201c:	4b0c      	ldr	r3, [pc, #48]	@ (8002050 <MCM_Park+0x80>)
 800201e:	e001      	b.n	8002024 <MCM_Park+0x54>
 8002020:	f647 73ff 	movw	r3, #32767	@ 0x7fff
  return (Output);
 8002024:	b292      	uxth	r2, r2
 8002026:	2000      	movs	r0, #0
 8002028:	f362 000f 	bfi	r0, r2, #0, #16
 800202c:	b29b      	uxth	r3, r3
 800202e:	f363 401f 	bfi	r0, r3, #16, #16
}
 8002032:	b005      	add	sp, #20
 8002034:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8002036:	4906      	ldr	r1, [pc, #24]	@ (8002050 <MCM_Park+0x80>)
 8002038:	b21b      	sxth	r3, r3
 800203a:	428b      	cmp	r3, r1
 800203c:	bfb8      	it	lt
 800203e:	460b      	movlt	r3, r1
 8002040:	e7f0      	b.n	8002024 <MCM_Park+0x54>
    hqd_tmp = ((int16_t)wqd_tmp);
 8002042:	4b03      	ldr	r3, [pc, #12]	@ (8002050 <MCM_Park+0x80>)
 8002044:	b212      	sxth	r2, r2
 8002046:	429a      	cmp	r2, r3
 8002048:	bfb8      	it	lt
 800204a:	461a      	movlt	r2, r3
 800204c:	e7da      	b.n	8002004 <MCM_Park+0x34>
 800204e:	bf00      	nop
 8002050:	ffff8001 	.word	0xffff8001

08002054 <MCM_Rev_Park>:
{
 8002054:	b530      	push	{r4, r5, lr}
 8002056:	4605      	mov	r5, r0
 8002058:	b085      	sub	sp, #20
 800205a:	4604      	mov	r4, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800205c:	4608      	mov	r0, r1
 800205e:	f7ff ffa7 	bl	8001fb0 <MCM_Trig_Functions>
 8002062:	1424      	asrs	r4, r4, #16
 8002064:	1402      	asrs	r2, r0, #16
 8002066:	b22d      	sxth	r5, r5
 8002068:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 800206a:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 800206e:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8002072:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8002076:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 800207a:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 800207e:	2000      	movs	r0, #0
 8002080:	f363 000f 	bfi	r0, r3, #0, #16
 8002084:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8002088:	f364 401f 	bfi	r0, r4, #16, #16
}
 800208c:	b005      	add	sp, #20
 800208e:	bd30      	pop	{r4, r5, pc}

08002090 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8002090:	2800      	cmp	r0, #0
 8002092:	dd09      	ble.n	80020a8 <MCM_Sqrt+0x18>
  __ASM volatile ("cpsid i" : : : "memory");
 8002094:	b672      	cpsid	i
  {
    uint32_t retVal;
    /* Disable Irq as sqrt is used in MF and HF task */
    __disable_irq();
    /* Configure CORDIC */
    WRITE_REG(CORDIC->CSR, CORDIC_CONFIG_SQRT);
 8002096:	4b05      	ldr	r3, [pc, #20]	@ (80020ac <MCM_Sqrt+0x1c>)
 8002098:	f240 1269 	movw	r2, #361	@ 0x169
 800209c:	601a      	str	r2, [r3, #0]
  WRITE_REG(CORDICx->WDATA, InData);
 800209e:	6058      	str	r0, [r3, #4]
  return (uint32_t)(READ_REG(CORDICx->RDATA));
 80020a0:	6898      	ldr	r0, [r3, #8]
    LL_CORDIC_WriteData(CORDIC, ((uint32_t)wInput));
    /* Read sqrt and return */
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
    retVal = (LL_CORDIC_ReadData(CORDIC)) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80020a2:	0bc0      	lsrs	r0, r0, #15
  __ASM volatile ("cpsie i" : : : "memory");
 80020a4:	b662      	cpsie	i
}
 80020a6:	4770      	bx	lr
    __enable_irq();

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80020a8:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80020aa:	4770      	bx	lr
 80020ac:	40020c00 	.word	0x40020c00

080020b0 <MCboot>:
{
  /* USER CODE BEGIN MCboot 0 */

  /* USER CODE END MCboot 0 */

  if (MC_NULL == pMCIList)
 80020b0:	b310      	cbz	r0, 80020f8 <MCboot+0x48>
{
 80020b2:	b538      	push	{r3, r4, r5, lr}
    /* Nothing to do */
  }
  else
  {

    bMCBootCompleted = (uint8_t )0;
 80020b4:	4d11      	ldr	r5, [pc, #68]	@ (80020fc <MCboot+0x4c>)
 80020b6:	2300      	movs	r3, #0
 80020b8:	702b      	strb	r3, [r5, #0]
 80020ba:	4604      	mov	r4, r0

    /*************************************************/
    /*    FOC initialization         */
    /*************************************************/
    FOC_Init();
 80020bc:	f000 fa12 	bl	80024e4 <FOC_Init>

    ASPEP_start(&aspepOverUartA);
 80020c0:	480f      	ldr	r0, [pc, #60]	@ (8002100 <MCboot+0x50>)
 80020c2:	f7fe fe2b 	bl	8000d1c <ASPEP_start>
    /* USER CODE END MCboot 1 */

    /******************************************************/
    /*   PID component initialization: speed regulation   */
    /******************************************************/
    PID_HandleInit(&PIDSpeedHandle_M1);
 80020c6:	480f      	ldr	r0, [pc, #60]	@ (8002104 <MCboot+0x54>)
 80020c8:	f007 f944 	bl	8009354 <PID_HandleInit>

    /****************************************************/
    /*   Virtual speed sensor component initialization  */
    /****************************************************/
    VSS_Init(&VirtualSpeedSensorM1);
 80020cc:	480e      	ldr	r0, [pc, #56]	@ (8002108 <MCboot+0x58>)
 80020ce:	f008 fed7 	bl	800ae80 <VSS_Init>

    /********************************************************/
    /*   Bus voltage sensor component initialization        */
    /********************************************************/
    (void)RCM_RegisterRegConv(&VbusRegConv_M1);
 80020d2:	480e      	ldr	r0, [pc, #56]	@ (800210c <MCboot+0x5c>)
 80020d4:	f002 f902 	bl	80042dc <RCM_RegisterRegConv>
    RVBS_Init(&BusVoltageSensor_M1);
 80020d8:	480d      	ldr	r0, [pc, #52]	@ (8002110 <MCboot+0x60>)
 80020da:	f008 f94b 	bl	800a374 <RVBS_Init>

    /*******************************************************/
    /*   Temperature measurement component initialization  */
    /*******************************************************/
    (void)RCM_RegisterRegConv(&TempRegConv_M1);
 80020de:	480d      	ldr	r0, [pc, #52]	@ (8002114 <MCboot+0x64>)
 80020e0:	f002 f8fc 	bl	80042dc <RCM_RegisterRegConv>
    NTC_Init(&TempSensor_M1);
 80020e4:	480c      	ldr	r0, [pc, #48]	@ (8002118 <MCboot+0x68>)
 80020e6:	f007 f8f9 	bl	80092dc <NTC_Init>

    pMCIList[M1] = &Mci[M1];
 80020ea:	4b0c      	ldr	r3, [pc, #48]	@ (800211c <MCboot+0x6c>)
 80020ec:	6023      	str	r3, [r4, #0]

    /* Applicative hook in MCBoot() */
    MC_APP_BootHook();
 80020ee:	f7ff fd9b 	bl	8001c28 <MC_APP_BootHook>

    /* USER CODE BEGIN MCboot 2 */

    /* USER CODE END MCboot 2 */

    bMCBootCompleted = 1U;
 80020f2:	2301      	movs	r3, #1
 80020f4:	702b      	strb	r3, [r5, #0]
  }
}
 80020f6:	bd38      	pop	{r3, r4, r5, pc}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000a14 	.word	0x20000a14
 8002100:	20000460 	.word	0x20000460
 8002104:	20000338 	.word	0x20000338
 8002108:	200003cc 	.word	0x200003cc
 800210c:	20000390 	.word	0x20000390
 8002110:	20000374 	.word	0x20000374
 8002114:	200003bc 	.word	0x200003bc
 8002118:	200003a0 	.word	0x200003a0
 800211c:	20000000 	.word	0x20000000

08002120 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8002120:	4b01      	ldr	r3, [pc, #4]	@ (8002128 <TSK_SetChargeBootCapDelayM1+0x8>)
 8002122:	8018      	strh	r0, [r3, #0]
}
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000a18 	.word	0x20000a18

0800212c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise.
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 800212c:	4b03      	ldr	r3, [pc, #12]	@ (800213c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800212e:	8818      	ldrh	r0, [r3, #0]
 8002130:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002132:	fab0 f080 	clz	r0, r0
 8002136:	0940      	lsrs	r0, r0, #5
 8002138:	4770      	bx	lr
 800213a:	bf00      	nop
 800213c:	20000a18 	.word	0x20000a18

08002140 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted.
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8002140:	4b01      	ldr	r3, [pc, #4]	@ (8002148 <TSK_SetStopPermanencyTimeM1+0x8>)
 8002142:	8018      	strh	r0, [r3, #0]
}
 8002144:	4770      	bx	lr
 8002146:	bf00      	nop
 8002148:	20000a16 	.word	0x20000a16

0800214c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise.
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800214c:	4b03      	ldr	r3, [pc, #12]	@ (800215c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800214e:	8818      	ldrh	r0, [r3, #0]
 8002150:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8002152:	fab0 f080 	clz	r0, r0
 8002156:	0940      	lsrs	r0, r0, #5
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000a16 	.word	0x20000a16

08002160 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002160:	b508      	push	{r3, lr}
  uint8_t bMotorNbr;
  bMotorNbr = 0;
  /* USER CODE BEGIN HighFrequencyTask 0 */

  /* USER CODE END HighFrequencyTask 0 */
  FOC_HighFrequencyTask(bMotorNbr);
 8002162:	2000      	movs	r0, #0
 8002164:	f000 fbd8 	bl	8002918 <FOC_HighFrequencyTask>

  /* USER CODE BEGIN HighFrequencyTask 1 */

  /* USER CODE END HighFrequencyTask 1 */

  GLOBAL_TIMESTAMP++;
 8002168:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <TSK_HighFrequencyTask+0x24>)
  if (0U == MCPA_UART_A.Mark)
 800216a:	4807      	ldr	r0, [pc, #28]	@ (8002188 <TSK_HighFrequencyTask+0x28>)
  GLOBAL_TIMESTAMP++;
 800216c:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800216e:	f890 1029 	ldrb.w	r1, [r0, #41]	@ 0x29
  GLOBAL_TIMESTAMP++;
 8002172:	3301      	adds	r3, #1
 8002174:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8002176:	b909      	cbnz	r1, 800217c <TSK_HighFrequencyTask+0x1c>
    MCPA_dataLog (&MCPA_UART_A);
  }

  return (bMotorNbr);

}
 8002178:	2000      	movs	r0, #0
 800217a:	bd08      	pop	{r3, pc}
    MCPA_dataLog (&MCPA_UART_A);
 800217c:	f006 ff32 	bl	8008fe4 <MCPA_dataLog>
}
 8002180:	2000      	movs	r0, #0
 8002182:	bd08      	pop	{r3, pc}
 8002184:	20001c10 	.word	0x20001c10
 8002188:	20000424 	.word	0x20000424

0800218c <TSK_SafetyTask_PWMOFF>:
  * @brief  Safety task implementation if  MC.M1_ON_OVER_VOLTAGE == TURN_OFF_PWM.
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink.
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 800218c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint8_t lbmotor = M1;
  const uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};
  /* Check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
  if (M1 == bMotor)
 800218e:	4604      	mov	r4, r0
 8002190:	b198      	cbz	r0, 80021ba <TSK_SafetyTask_PWMOFF+0x2e>
  {
    /* Nothing to do */
  }

/* Due to warning array subscript 1 is above array bounds of PWMC_Handle_t *[1] [-Warray-bounds] */
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 8002192:	4e21      	ldr	r6, [pc, #132]	@ (8002218 <TSK_SafetyTask_PWMOFF+0x8c>)
 8002194:	6830      	ldr	r0, [r6, #0]
 8002196:	f001 f803 	bl	80031a0 <PWMC_IsFaultOccurred>
 800219a:	4601      	mov	r1, r0
  }
  else
  {
    /* Nothing to do */
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* Process faults */
 800219c:	4d1f      	ldr	r5, [pc, #124]	@ (800221c <TSK_SafetyTask_PWMOFF+0x90>)
 800219e:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 80021a2:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80021a6:	43ca      	mvns	r2, r1
 80021a8:	4628      	mov	r0, r5
 80021aa:	b292      	uxth	r2, r2
 80021ac:	f7ff fd6e 	bl	8001c8c <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 80021b0:	4628      	mov	r0, r5
 80021b2:	f7ff fdfd 	bl	8001db0 <MCI_GetFaultState>
 80021b6:	b9d8      	cbnz	r0, 80021f0 <TSK_SafetyTask_PWMOFF+0x64>
    /* No errors */
  }
  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 80021b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 80021ba:	4819      	ldr	r0, [pc, #100]	@ (8002220 <TSK_SafetyTask_PWMOFF+0x94>)
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80021bc:	4e16      	ldr	r6, [pc, #88]	@ (8002218 <TSK_SafetyTask_PWMOFF+0x8c>)
    uint16_t rawValueM1 = RCM_ExecRegularConv(&TempRegConv_M1);
 80021be:	f002 f9af 	bl	8004520 <RCM_ExecRegularConv>
 80021c2:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(&TempSensor_M1, rawValueM1);
 80021c4:	4817      	ldr	r0, [pc, #92]	@ (8002224 <TSK_SafetyTask_PWMOFF+0x98>)
 80021c6:	f007 f89b 	bl	8009300 <NTC_CalcAvTemp>
 80021ca:	4607      	mov	r7, r0
   CodeReturn |= PWMC_IsFaultOccurred(pwmcHandle[lbmotor]);     /* check for fault. It return MC_OVER_CURR or MC_NO_FAULTS
 80021cc:	6830      	ldr	r0, [r6, #0]
 80021ce:	f000 ffe7 	bl	80031a0 <PWMC_IsFaultOccurred>
 80021d2:	4605      	mov	r5, r0
    uint16_t rawValueM1 =  RCM_ExecRegularConv(&VbusRegConv_M1);
 80021d4:	4814      	ldr	r0, [pc, #80]	@ (8002228 <TSK_SafetyTask_PWMOFF+0x9c>)
 80021d6:	f002 f9a3 	bl	8004520 <RCM_ExecRegularConv>
 80021da:	4601      	mov	r1, r0
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1, rawValueM1);
 80021dc:	4813      	ldr	r0, [pc, #76]	@ (800222c <TSK_SafetyTask_PWMOFF+0xa0>)
 80021de:	f008 f8f5 	bl	800a3cc <RVBS_CalcAvVbus>
 80021e2:	4307      	orrs	r7, r0
 80021e4:	f007 070e 	and.w	r7, r7, #14
 80021e8:	ea45 0107 	orr.w	r1, r5, r7
 80021ec:	b289      	uxth	r1, r1
 80021ee:	e7d5      	b.n	800219c <TSK_SafetyTask_PWMOFF+0x10>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80021f0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80021f4:	f000 ff88 	bl	8003108 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0U)
 80021f8:	480d      	ldr	r0, [pc, #52]	@ (8002230 <TSK_SafetyTask_PWMOFF+0xa4>)
 80021fa:	f890 3029 	ldrb.w	r3, [r0, #41]	@ 0x29
 80021fe:	b923      	cbnz	r3, 800220a <TSK_SafetyTask_PWMOFF+0x7e>
    FOC_Clear(bMotor);
 8002200:	4620      	mov	r0, r4
}
 8002202:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002206:	f000 b933 	b.w	8002470 <FOC_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 800220a:	f006 ffa9 	bl	8009160 <MCPA_flushDataLog>
    FOC_Clear(bMotor);
 800220e:	4620      	mov	r0, r4
}
 8002210:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    FOC_Clear(bMotor);
 8002214:	f000 b92c 	b.w	8002470 <FOC_Clear>
 8002218:	20000a04 	.word	0x20000a04
 800221c:	20000000 	.word	0x20000000
 8002220:	200003bc 	.word	0x200003bc
 8002224:	200003a0 	.word	0x200003a0
 8002228:	20000390 	.word	0x20000390
 800222c:	20000374 	.word	0x20000374
 8002230:	20000424 	.word	0x20000424

08002234 <TSK_SafetyTask>:
{
 8002234:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002236:	4b06      	ldr	r3, [pc, #24]	@ (8002250 <TSK_SafetyTask+0x1c>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d000      	beq.n	8002240 <TSK_SafetyTask+0xc>
}
 800223e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002240:	2000      	movs	r0, #0
 8002242:	f7ff ffa3 	bl	800218c <TSK_SafetyTask_PWMOFF>
}
 8002246:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800224a:	f002 ba31 	b.w	80046b0 <RCM_ExecUserConv>
 800224e:	bf00      	nop
 8002250:	20000a14 	.word	0x20000a14

08002254 <MC_RunMotorControlTasks>:
  if (0U == bMCBootCompleted)
 8002254:	4b1e      	ldr	r3, [pc, #120]	@ (80022d0 <MC_RunMotorControlTasks+0x7c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	b1cb      	cbz	r3, 800228e <MC_RunMotorControlTasks+0x3a>
{
 800225a:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 800225c:	4c1d      	ldr	r4, [pc, #116]	@ (80022d4 <MC_RunMotorControlTasks+0x80>)
 800225e:	8823      	ldrh	r3, [r4, #0]
 8002260:	b1b3      	cbz	r3, 8002290 <MC_RunMotorControlTasks+0x3c>
      hMFTaskCounterM1--;
 8002262:	3b01      	subs	r3, #1
 8002264:	b29b      	uxth	r3, r3
    if(hBootCapDelayCounterM1 > 0U)
 8002266:	4a1c      	ldr	r2, [pc, #112]	@ (80022d8 <MC_RunMotorControlTasks+0x84>)
      hMFTaskCounterM1--;
 8002268:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800226a:	8813      	ldrh	r3, [r2, #0]
 800226c:	b29b      	uxth	r3, r3
 800226e:	b11b      	cbz	r3, 8002278 <MC_RunMotorControlTasks+0x24>
      hBootCapDelayCounterM1--;
 8002270:	8813      	ldrh	r3, [r2, #0]
 8002272:	3b01      	subs	r3, #1
 8002274:	b29b      	uxth	r3, r3
 8002276:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8002278:	4a18      	ldr	r2, [pc, #96]	@ (80022dc <MC_RunMotorControlTasks+0x88>)
 800227a:	8813      	ldrh	r3, [r2, #0]
 800227c:	b29b      	uxth	r3, r3
 800227e:	b11b      	cbz	r3, 8002288 <MC_RunMotorControlTasks+0x34>
      hStopPermanencyCounterM1--;
 8002280:	8813      	ldrh	r3, [r2, #0]
 8002282:	3b01      	subs	r3, #1
 8002284:	b29b      	uxth	r3, r3
 8002286:	8013      	strh	r3, [r2, #0]
    TSK_SafetyTask();
 8002288:	f7ff ffd4 	bl	8002234 <TSK_SafetyTask>
}
 800228c:	bd70      	pop	{r4, r5, r6, pc}
 800228e:	4770      	bx	lr
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8002290:	4d13      	ldr	r5, [pc, #76]	@ (80022e0 <MC_RunMotorControlTasks+0x8c>)
      TSK_MediumFrequencyTaskM1();
 8002292:	f000 f9bb 	bl	800260c <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8002296:	f7ff fcc9 	bl	8001c2c <MC_APP_PostMediumFrequencyHook_M1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 800229a:	4629      	mov	r1, r5
 800229c:	f851 0b0c 	ldr.w	r0, [r1], #12
 80022a0:	6883      	ldr	r3, [r0, #8]
 80022a2:	4798      	blx	r3
 80022a4:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80022a6:	b130      	cbz	r0, 80022b6 <MC_RunMotorControlTasks+0x62>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80022a8:	4629      	mov	r1, r5
 80022aa:	220a      	movs	r2, #10
 80022ac:	f851 0b08 	ldr.w	r0, [r1], #8
 80022b0:	6803      	ldr	r3, [r0, #0]
 80022b2:	4798      	blx	r3
 80022b4:	b908      	cbnz	r0, 80022ba <MC_RunMotorControlTasks+0x66>
{
 80022b6:	2301      	movs	r3, #1
 80022b8:	e7d5      	b.n	8002266 <MC_RunMotorControlTasks+0x12>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80022ba:	4628      	mov	r0, r5
 80022bc:	f000 fc96 	bl	8002bec <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80022c0:	6828      	ldr	r0, [r5, #0]
 80022c2:	89ea      	ldrh	r2, [r5, #14]
 80022c4:	6846      	ldr	r6, [r0, #4]
 80022c6:	68a9      	ldr	r1, [r5, #8]
 80022c8:	230a      	movs	r3, #10
 80022ca:	47b0      	blx	r6
 80022cc:	e7f3      	b.n	80022b6 <MC_RunMotorControlTasks+0x62>
 80022ce:	bf00      	nop
 80022d0:	20000a14 	.word	0x20000a14
 80022d4:	20000a1a 	.word	0x20000a1a
 80022d8:	20000a18 	.word	0x20000a18
 80022dc:	20000a16 	.word	0x20000a16
 80022e0:	20000450 	.word	0x20000450

080022e4 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80022e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
   FOC_Clear(M1);
 80022e6:	2000      	movs	r0, #0
 80022e8:	f000 f8c2 	bl	8002470 <FOC_Clear>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80022ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80022f0:	4802      	ldr	r0, [pc, #8]	@ (80022fc <TSK_HardwareFaultTask+0x18>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	2180      	movs	r1, #128	@ 0x80
 80022f6:	f7ff bcc9 	b.w	8001c8c <MCI_FaultProcessing>
 80022fa:	bf00      	nop
 80022fc:	20000000 	.word	0x20000000

08002300 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 8002300:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 8002302:	f7ff fc89 	bl	8001c18 <MC_GetSTMStateMotor1>
 8002306:	b918      	cbnz	r0, 8002310 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 8002308:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 800230c:	f7ff bc4c 	b.w	8001ba8 <MC_StartMotor1>
}
 8002310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 8002314:	f7ff bc4e 	b.w	8001bb4 <MC_StopMotor1>

08002318 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration.
  */
__weak void mc_lock_pins (void)
{
 8002318:	b4f0      	push	{r4, r5, r6, r7}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800231a:	4a4d      	ldr	r2, [pc, #308]	@ (8002450 <mc_lock_pins+0x138>)
 800231c:	494d      	ldr	r1, [pc, #308]	@ (8002454 <mc_lock_pins+0x13c>)
 800231e:	484e      	ldr	r0, [pc, #312]	@ (8002458 <mc_lock_pins+0x140>)
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002320:	2504      	movs	r5, #4
 8002322:	b092      	sub	sp, #72	@ 0x48
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002324:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002326:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002328:	61d1      	str	r1, [r2, #28]
  /* Read LCKR register. This read is mandatory to complete key lock sequence */
  temp = READ_REG(GPIOx->LCKR);
 800232a:	69d3      	ldr	r3, [r2, #28]
 800232c:	9311      	str	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, PinMask);
 800232e:	2602      	movs	r6, #2
  (void) temp;
 8002330:	9b11      	ldr	r3, [sp, #68]	@ 0x44
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002332:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002334:	61d6      	str	r6, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002336:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002338:	69d3      	ldr	r3, [r2, #28]
 800233a:	9310      	str	r3, [sp, #64]	@ 0x40
  (void) temp;
 800233c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
  WRITE_REG(GPIOx->LCKR, PinMask);
 800233e:	f44f 4480 	mov.w	r4, #16384	@ 0x4000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002342:	f44f 33a0 	mov.w	r3, #81920	@ 0x14000
 8002346:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002348:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800234a:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800234c:	69d4      	ldr	r4, [r2, #28]
 800234e:	940f      	str	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002350:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
  (void) temp;
 8002354:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002356:	2701      	movs	r7, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002358:	f04f 1401 	mov.w	r4, #65537	@ 0x10001
 800235c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800235e:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002360:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002362:	f8d3 c01c 	ldr.w	ip, [r3, #28]
 8002366:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
  (void) temp;
 800236a:	f8dd c038 	ldr.w	ip, [sp, #56]	@ 0x38
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800236e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002370:	61d7      	str	r7, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002372:	61d4      	str	r4, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002374:	69d4      	ldr	r4, [r2, #28]
 8002376:	940d      	str	r4, [sp, #52]	@ 0x34
  (void) temp;
 8002378:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800237a:	4c38      	ldr	r4, [pc, #224]	@ (800245c <mc_lock_pins+0x144>)
 800237c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800237e:	2780      	movs	r7, #128	@ 0x80
 8002380:	61df      	str	r7, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002382:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002384:	69dc      	ldr	r4, [r3, #28]
 8002386:	940c      	str	r4, [sp, #48]	@ 0x30
  (void) temp;
 8002388:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800238a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800238c:	61de      	str	r6, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800238e:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002390:	69d8      	ldr	r0, [r3, #28]
 8002392:	900b      	str	r0, [sp, #44]	@ 0x2c
  (void) temp;
 8002394:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002396:	4832      	ldr	r0, [pc, #200]	@ (8002460 <mc_lock_pins+0x148>)
 8002398:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800239a:	2408      	movs	r4, #8
 800239c:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800239e:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023a0:	69d8      	ldr	r0, [r3, #28]
 80023a2:	900a      	str	r0, [sp, #40]	@ 0x28
  (void) temp;
 80023a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023a6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023a8:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023aa:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023ac:	69d9      	ldr	r1, [r3, #28]
 80023ae:	9109      	str	r1, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023b0:	2040      	movs	r0, #64	@ 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023b2:	492c      	ldr	r1, [pc, #176]	@ (8002464 <mc_lock_pins+0x14c>)
  (void) temp;
 80023b4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023b6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023b8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ba:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023bc:	69d9      	ldr	r1, [r3, #28]
 80023be:	9108      	str	r1, [sp, #32]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023c0:	2020      	movs	r0, #32
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c2:	4929      	ldr	r1, [pc, #164]	@ (8002468 <mc_lock_pins+0x150>)
  (void) temp;
 80023c4:	9c08      	ldr	r4, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023c6:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023c8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ca:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023cc:	69d8      	ldr	r0, [r3, #28]
 80023ce:	9007      	str	r0, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d0:	31e0      	adds	r1, #224	@ 0xe0
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023d2:	f44f 7080 	mov.w	r0, #256	@ 0x100
  (void) temp;
 80023d6:	9c07      	ldr	r4, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023d8:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023da:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023dc:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023de:	69d9      	ldr	r1, [r3, #28]
 80023e0:	9106      	str	r1, [sp, #24]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023e2:	f44f 7000 	mov.w	r0, #512	@ 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023e6:	f44f 3181 	mov.w	r1, #66048	@ 0x10200
  (void) temp;
 80023ea:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023ec:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023ee:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023f0:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80023f6:	f44f 6080 	mov.w	r0, #1024	@ 0x400
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80023fa:	f44f 3182 	mov.w	r1, #66560	@ 0x10400
  (void) temp;
 80023fe:	9c05      	ldr	r4, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002400:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002402:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002404:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002406:	69d9      	ldr	r1, [r3, #28]
 8002408:	9104      	str	r1, [sp, #16]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800240a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800240e:	f44f 3188 	mov.w	r1, #69632	@ 0x11000
  (void) temp;
 8002412:	9c04      	ldr	r4, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002414:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002416:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002418:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800241a:	69db      	ldr	r3, [r3, #28]
 800241c:	9303      	str	r3, [sp, #12]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800241e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002422:	f44f 33c0 	mov.w	r3, #98304	@ 0x18000
  (void) temp;
 8002426:	9803      	ldr	r0, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002428:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800242a:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800242c:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800242e:	69d2      	ldr	r2, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002430:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <mc_lock_pins+0x154>)
  temp = READ_REG(GPIOx->LCKR);
 8002432:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002434:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002438:	f44f 3290 	mov.w	r2, #73728	@ 0x12000
  (void) temp;
 800243c:	9802      	ldr	r0, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800243e:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002440:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002442:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002444:	69db      	ldr	r3, [r3, #28]
 8002446:	9301      	str	r3, [sp, #4]
  (void) temp;
 8002448:	9b01      	ldr	r3, [sp, #4]
LL_GPIO_LockPin(M1_PWM_VH_GPIO_Port, M1_PWM_VH_Pin);
LL_GPIO_LockPin(M1_PWM_WH_GPIO_Port, M1_PWM_WH_Pin);
LL_GPIO_LockPin(M1_PWM_VL_GPIO_Port, M1_PWM_VL_Pin);
LL_GPIO_LockPin(M1_PWM_WL_GPIO_Port, M1_PWM_WL_Pin);
LL_GPIO_LockPin(M1_PWM_UL_GPIO_Port, M1_PWM_UL_Pin);
}
 800244a:	b012      	add	sp, #72	@ 0x48
 800244c:	bcf0      	pop	{r4, r5, r6, r7}
 800244e:	4770      	bx	lr
 8002450:	48000400 	.word	0x48000400
 8002454:	00010004 	.word	0x00010004
 8002458:	00010002 	.word	0x00010002
 800245c:	00010080 	.word	0x00010080
 8002460:	00010008 	.word	0x00010008
 8002464:	00010040 	.word	0x00010040
 8002468:	00010020 	.word	0x00010020
 800246c:	48000800 	.word	0x48000800

08002470 <FOC_Clear>:
  *         controller. It must be called before each motor restart.
  *         It does not clear speed sensor.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_Clear(uint8_t bMotor)
{
 8002470:	b538      	push	{r3, r4, r5, lr}
 8002472:	2326      	movs	r3, #38	@ 0x26
 8002474:	4916      	ldr	r1, [pc, #88]	@ (80024d0 <FOC_Clear+0x60>)
 8002476:	fb00 f303 	mul.w	r3, r0, r3

  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
 800247a:	2400      	movs	r4, #0
 800247c:	50cc      	str	r4, [r1, r3]
{
 800247e:	4605      	mov	r5, r0
 8002480:	f103 0208 	add.w	r2, r3, #8
 8002484:	1858      	adds	r0, r3, r1
 8002486:	3310      	adds	r3, #16
 8002488:	440a      	add	r2, r1
 800248a:	440b      	add	r3, r1
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800248c:	4911      	ldr	r1, [pc, #68]	@ (80024d4 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 800248e:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002490:	f851 0025 	ldr.w	r0, [r1, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8002494:	6054      	str	r4, [r2, #4]
 8002496:	6094      	str	r4, [r2, #8]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8002498:	4621      	mov	r1, r4
  FOCVars[bMotor].Vqd = NULL_qd;
 800249a:	f8c3 4006 	str.w	r4, [r3, #6]
 800249e:	f8c3 400a 	str.w	r4, [r3, #10]
 80024a2:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80024a6:	f006 ff69 	bl	800937c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 80024aa:	4b0b      	ldr	r3, [pc, #44]	@ (80024d8 <FOC_Clear+0x68>)
 80024ac:	4621      	mov	r1, r4
 80024ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80024b2:	f006 ff63 	bl	800937c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 80024b6:	4b09      	ldr	r3, [pc, #36]	@ (80024dc <FOC_Clear+0x6c>)
 80024b8:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80024bc:	f008 f96c 	bl	800a798 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80024c0:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <FOC_Clear+0x70>)
 80024c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 80024c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 80024ca:	f000 be1d 	b.w	8003108 <PWMC_SwitchOffPWM>
 80024ce:	bf00      	nop
 80024d0:	200009dc 	.word	0x200009dc
 80024d4:	20000030 	.word	0x20000030
 80024d8:	2000002c 	.word	0x2000002c
 80024dc:	20000034 	.word	0x20000034
 80024e0:	20000a04 	.word	0x20000a04

080024e4 <FOC_Init>:
{
 80024e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80024e6:	4c27      	ldr	r4, [pc, #156]	@ (8002584 <FOC_Init+0xa0>)
    PID_HandleInit(&PIDSpeedHandle_M1);
 80024e8:	4e27      	ldr	r6, [pc, #156]	@ (8002588 <FOC_Init+0xa4>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80024ea:	4828      	ldr	r0, [pc, #160]	@ (800258c <FOC_Init+0xa8>)
    STO_PLL_Init (&STO_PLL_M1);
 80024ec:	4f28      	ldr	r7, [pc, #160]	@ (8002590 <FOC_Init+0xac>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80024ee:	4d29      	ldr	r5, [pc, #164]	@ (8002594 <FOC_Init+0xb0>)
{
 80024f0:	b085      	sub	sp, #20
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80024f2:	6020      	str	r0, [r4, #0]
    R3_2_Init(&PWM_Handle_M1);
 80024f4:	f007 fb20 	bl	8009b38 <R3_2_Init>
    startTimers();
 80024f8:	f000 fc52 	bl	8002da0 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80024fc:	4630      	mov	r0, r6
 80024fe:	f006 ff29 	bl	8009354 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8002502:	4638      	mov	r0, r7
 8002504:	f008 fbd2 	bl	800acac <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8002508:	6828      	ldr	r0, [r5, #0]
 800250a:	463a      	mov	r2, r7
 800250c:	4631      	mov	r1, r6
 800250e:	f008 f92b 	bl	800a768 <STC_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002512:	6820      	ldr	r0, [r4, #0]
 8002514:	6829      	ldr	r1, [r5, #0]
 8002516:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <FOC_Init+0xb4>)
 8002518:	4a20      	ldr	r2, [pc, #128]	@ (800259c <FOC_Init+0xb8>)
 800251a:	9000      	str	r0, [sp, #0]
 800251c:	4820      	ldr	r0, [pc, #128]	@ (80025a0 <FOC_Init+0xbc>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800251e:	4c21      	ldr	r4, [pc, #132]	@ (80025a4 <FOC_Init+0xc0>)
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8002520:	f008 f814 	bl	800a54c <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8002524:	4820      	ldr	r0, [pc, #128]	@ (80025a8 <FOC_Init+0xc4>)
 8002526:	f006 ff15 	bl	8009354 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 800252a:	4820      	ldr	r0, [pc, #128]	@ (80025ac <FOC_Init+0xc8>)
 800252c:	f006 ff12 	bl	8009354 <PID_HandleInit>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <FOC_Init+0xcc>)
 8002532:	4a20      	ldr	r2, [pc, #128]	@ (80025b4 <FOC_Init+0xd0>)
 8002534:	681b      	ldr	r3, [r3, #0]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8002536:	4820      	ldr	r0, [pc, #128]	@ (80025b8 <FOC_Init+0xd4>)
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8002538:	e9c3 4202 	strd	r4, r2, [r3, #8]
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 800253c:	4b1f      	ldr	r3, [pc, #124]	@ (80025bc <FOC_Init+0xd8>)
 800253e:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8002540:	f007 ff72 	bl	800a428 <REMNG_Init>
    FOC_Clear(M1);
 8002544:	2000      	movs	r0, #0
 8002546:	f7ff ff93 	bl	8002470 <FOC_Clear>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800254a:	2301      	movs	r3, #1
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800254c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800254e:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8002552:	f008 f9b3 	bl	800a8bc <STC_GetDefaultIqdref>
 8002556:	f3c0 420f 	ubfx	r2, r0, #16, #16
 800255a:	4603      	mov	r3, r0
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800255c:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800255e:	8262      	strh	r2, [r4, #18]
 8002560:	8223      	strh	r3, [r4, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8002562:	f008 f9ab 	bl	800a8bc <STC_GetDefaultIqdref>
 8002566:	f3c0 430f 	ubfx	r3, r0, #16, #16
    MCI_ExecSpeedRamp(&Mci[M1],
 800256a:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 800256c:	82a3      	strh	r3, [r4, #20]
    MCI_ExecSpeedRamp(&Mci[M1],
 800256e:	f008 f9a1 	bl	800a8b4 <STC_GetMecSpeedRefUnitDefault>
 8002572:	4601      	mov	r1, r0
 8002574:	4812      	ldr	r0, [pc, #72]	@ (80025c0 <FOC_Init+0xdc>)
 8002576:	2200      	movs	r2, #0
}
 8002578:	b005      	add	sp, #20
 800257a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    MCI_ExecSpeedRamp(&Mci[M1],
 800257e:	f7ff bb57 	b.w	8001c30 <MCI_ExecSpeedRamp>
 8002582:	bf00      	nop
 8002584:	20000a04 	.word	0x20000a04
 8002588:	20000338 	.word	0x20000338
 800258c:	20000190 	.word	0x20000190
 8002590:	20000068 	.word	0x20000068
 8002594:	20000034 	.word	0x20000034
 8002598:	20000054 	.word	0x20000054
 800259c:	200003cc 	.word	0x200003cc
 80025a0:	20000234 	.word	0x20000234
 80025a4:	200009dc 	.word	0x200009dc
 80025a8:	2000030c 	.word	0x2000030c
 80025ac:	200002e0 	.word	0x200002e0
 80025b0:	20000028 	.word	0x20000028
 80025b4:	20000374 	.word	0x20000374
 80025b8:	2000003c 	.word	0x2000003c
 80025bc:	200009d8 	.word	0x200009d8
 80025c0:	20000000 	.word	0x20000000

080025c4 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80025c4:	4770      	bx	lr
 80025c6:	bf00      	nop

080025c8 <FOC_CalcCurrRef>:
  *         MTPA algorithm(s). It must be called with the periodicity specified
  *         in oTSC parameters.
  * @param  bMotor related motor it can be M1 or M2.
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	4606      	mov	r6, r0
  __ASM volatile ("cpsid i" : : : "memory");
 80025cc:	b672      	cpsid	i

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference latching */
  /* to avoid MF task writing them while HF task reading them */
  __disable_irq();
  IqdTmp = FOCVars[bMotor].Iqdref;
 80025ce:	4d0d      	ldr	r5, [pc, #52]	@ (8002604 <FOC_CalcCurrRef+0x3c>)
 80025d0:	2426      	movs	r4, #38	@ 0x26
 80025d2:	fb04 5400 	mla	r4, r4, r0, r5
 80025d6:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
 80025da:	f9b4 7012 	ldrsh.w	r7, [r4, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 80025de:	b662      	cpsie	i
  __enable_irq();

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80025e0:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80025e4:	b13b      	cbz	r3, 80025f6 <FOC_CalcCurrRef+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 80025e6:	b672      	cpsid	i
  }

  /* Enter critical section */
  /* Disable interrupts to avoid any interruption during Iqd reference restoring */
  __disable_irq();
  FOCVars[bMotor].Iqdref = IqdTmp;
 80025e8:	2326      	movs	r3, #38	@ 0x26
 80025ea:	fb03 5506 	mla	r5, r3, r6, r5
 80025ee:	8228      	strh	r0, [r5, #16]
 80025f0:	826f      	strh	r7, [r5, #18]
  __ASM volatile ("cpsie i" : : : "memory");
 80025f2:	b662      	cpsie	i
  /* Exit critical section */
  __enable_irq();
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80025f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80025f6:	4b04      	ldr	r3, [pc, #16]	@ (8002608 <FOC_CalcCurrRef+0x40>)
 80025f8:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80025fc:	f008 f924 	bl	800a848 <STC_CalcTorqueReference>
 8002600:	83e0      	strh	r0, [r4, #30]
    IqdTmp.q = FOCVars[bMotor].hTeref;
 8002602:	e7f0      	b.n	80025e6 <FOC_CalcCurrRef+0x1e>
 8002604:	200009dc 	.word	0x200009dc
 8002608:	20000034 	.word	0x20000034

0800260c <TSK_MediumFrequencyTaskM1>:
{
 800260c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800260e:	b083      	sub	sp, #12
  int16_t wAux = 0;
 8002610:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002612:	4669      	mov	r1, sp
 8002614:	48b6      	ldr	r0, [pc, #728]	@ (80028f0 <TSK_MediumFrequencyTaskM1+0x2e4>)
  int16_t wAux = 0;
 8002616:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800261a:	f008 fa4f 	bl	800aabc <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 800261e:	4bb5      	ldr	r3, [pc, #724]	@ (80028f4 <TSK_MediumFrequencyTaskM1+0x2e8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8002620:	4cb5      	ldr	r4, [pc, #724]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8002622:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	f006 ff1d 	bl	8009464 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff fb7a 	bl	8001d24 <MCI_GetCurrentFaults>
 8002630:	b118      	cbz	r0, 800263a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8002632:	230a      	movs	r3, #10
 8002634:	77e3      	strb	r3, [r4, #31]
}
 8002636:	b003      	add	sp, #12
 8002638:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800263a:	4620      	mov	r0, r4
 800263c:	f7ff fb70 	bl	8001d20 <MCI_GetOccurredFaults>
 8002640:	bb70      	cbnz	r0, 80026a0 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 8002642:	7fe3      	ldrb	r3, [r4, #31]
 8002644:	2b13      	cmp	r3, #19
 8002646:	d8f6      	bhi.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
 8002648:	a201      	add	r2, pc, #4	@ (adr r2, 8002650 <TSK_MediumFrequencyTaskM1+0x44>)
 800264a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800264e:	bf00      	nop
 8002650:	0800281d 	.word	0x0800281d
 8002654:	08002637 	.word	0x08002637
 8002658:	08002637 	.word	0x08002637
 800265c:	08002637 	.word	0x08002637
 8002660:	0800278f 	.word	0x0800278f
 8002664:	08002637 	.word	0x08002637
 8002668:	0800276b 	.word	0x0800276b
 800266c:	08002637 	.word	0x08002637
 8002670:	0800274b 	.word	0x0800274b
 8002674:	08002637 	.word	0x08002637
 8002678:	080026a1 	.word	0x080026a1
 800267c:	0800273d 	.word	0x0800273d
 8002680:	08002637 	.word	0x08002637
 8002684:	08002637 	.word	0x08002637
 8002688:	08002637 	.word	0x08002637
 800268c:	08002637 	.word	0x08002637
 8002690:	080026fb 	.word	0x080026fb
 8002694:	080026c9 	.word	0x080026c9
 8002698:	08002637 	.word	0x08002637
 800269c:	080026a9 	.word	0x080026a9
      Mci[M1].State = FAULT_OVER;
 80026a0:	230b      	movs	r3, #11
 80026a2:	77e3      	strb	r3, [r4, #31]
}
 80026a4:	b003      	add	sp, #12
 80026a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026a8:	7fa3      	ldrb	r3, [r4, #30]
 80026aa:	2b05      	cmp	r3, #5
 80026ac:	f000 80ce 	beq.w	800284c <TSK_MediumFrequencyTaskM1+0x240>
            if (! RUC_Exec(&RevUpControlM1))
 80026b0:	4892      	ldr	r0, [pc, #584]	@ (80028fc <TSK_MediumFrequencyTaskM1+0x2f0>)
 80026b2:	f007 ffd3 	bl	800a65c <RUC_Exec>
 80026b6:	4602      	mov	r2, r0
 80026b8:	2800      	cmp	r0, #0
 80026ba:	f040 80df 	bne.w	800287c <TSK_MediumFrequencyTaskM1+0x270>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80026be:	488e      	ldr	r0, [pc, #568]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80026c0:	2110      	movs	r1, #16
 80026c2:	f7ff fae3 	bl	8001c8c <MCI_FaultProcessing>
 80026c6:	e7b6      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026c8:	7fa3      	ldrb	r3, [r4, #30]
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80026ca:	4d8d      	ldr	r5, [pc, #564]	@ (8002900 <TSK_MediumFrequencyTaskM1+0x2f4>)
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026cc:	2b05      	cmp	r3, #5
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 80026ce:	6828      	ldr	r0, [r5, #0]
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026d0:	f000 80be 	beq.w	8002850 <TSK_MediumFrequencyTaskM1+0x244>
            if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 80026d4:	2101      	movs	r1, #1
 80026d6:	f000 fd1b 	bl	8003110 <PWMC_CurrentReadingCalibr>
 80026da:	2800      	cmp	r0, #0
 80026dc:	d0ab      	beq.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 80026de:	7fa3      	ldrb	r3, [r4, #30]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	f000 80ff 	beq.w	80028e4 <TSK_MediumFrequencyTaskM1+0x2d8>
                R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80026e6:	6828      	ldr	r0, [r5, #0]
 80026e8:	2100      	movs	r1, #0
 80026ea:	f007 f989 	bl	8009a00 <R3_2_TurnOnLowSides>
                TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 80026ee:	2014      	movs	r0, #20
 80026f0:	f7ff fd16 	bl	8002120 <TSK_SetChargeBootCapDelayM1>
                Mci[M1].State = CHARGE_BOOT_CAP;
 80026f4:	2310      	movs	r3, #16
 80026f6:	77e3      	strb	r3, [r4, #31]
 80026f8:	e79d      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80026fa:	7fa3      	ldrb	r3, [r4, #30]
 80026fc:	2b05      	cmp	r3, #5
 80026fe:	f000 80a5 	beq.w	800284c <TSK_MediumFrequencyTaskM1+0x240>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8002702:	f7ff fd13 	bl	800212c <TSK_ChargeBootCapDelayHasElapsedM1>
 8002706:	2800      	cmp	r0, #0
 8002708:	d095      	beq.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_2_SwitchOffPWM(pwmcHandle[M1]);
 800270a:	4d7d      	ldr	r5, [pc, #500]	@ (8002900 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800270c:	6828      	ldr	r0, [r5, #0]
 800270e:	f007 f8b7 	bl	8009880 <R3_2_SwitchOffPWM>
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002712:	497c      	ldr	r1, [pc, #496]	@ (8002904 <TSK_MediumFrequencyTaskM1+0x2f8>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 8002714:	4b7c      	ldr	r3, [pc, #496]	@ (8002908 <TSK_MediumFrequencyTaskM1+0x2fc>)
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002716:	6808      	ldr	r0, [r1, #0]
 8002718:	497c      	ldr	r1, [pc, #496]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
              FOCVars[M1].bDriveInput = EXTERNAL;
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
              STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8002720:	f008 f838 	bl	800a794 <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8002724:	4872      	ldr	r0, [pc, #456]	@ (80028f0 <TSK_MediumFrequencyTaskM1+0x2e4>)
 8002726:	f008 fa9b 	bl	800ac60 <STO_PLL_Clear>
              FOC_Clear( M1 );
 800272a:	2000      	movs	r0, #0
 800272c:	f7ff fea0 	bl	8002470 <FOC_Clear>
                Mci[M1].State = START;
 8002730:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002732:	6828      	ldr	r0, [r5, #0]
                Mci[M1].State = START;
 8002734:	77e3      	strb	r3, [r4, #31]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8002736:	f000 fce9 	bl	800310c <PWMC_SwitchOnPWM>
 800273a:	e77c      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 800273c:	7fa3      	ldrb	r3, [r4, #30]
 800273e:	2b02      	cmp	r3, #2
 8002740:	f47f af79 	bne.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002744:	2300      	movs	r3, #0
 8002746:	83e3      	strh	r3, [r4, #30]
 8002748:	e775      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800274a:	f7ff fcff 	bl	800214c <TSK_StopPermanencyTimeHasElapsedM1>
 800274e:	2800      	cmp	r0, #0
 8002750:	f43f af71 	beq.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 8002754:	4b6b      	ldr	r3, [pc, #428]	@ (8002904 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8002756:	496d      	ldr	r1, [pc, #436]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
 8002758:	6818      	ldr	r0, [r3, #0]
 800275a:	f008 f81b 	bl	800a794 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 800275e:	486b      	ldr	r0, [pc, #428]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
 8002760:	f008 fb80 	bl	800ae64 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002764:	2300      	movs	r3, #0
 8002766:	83e3      	strh	r3, [r4, #30]
 8002768:	e765      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800276a:	7fa3      	ldrb	r3, [r4, #30]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d06d      	beq.n	800284c <TSK_MediumFrequencyTaskM1+0x240>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8002770:	4861      	ldr	r0, [pc, #388]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8002772:	f7ff fa97 	bl	8001ca4 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8002776:	2000      	movs	r0, #0
 8002778:	f7ff ff26 	bl	80025c8 <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 800277c:	2d00      	cmp	r5, #0
 800277e:	f47f af5a 	bne.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8002782:	485d      	ldr	r0, [pc, #372]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8002784:	462a      	mov	r2, r5
 8002786:	2120      	movs	r1, #32
 8002788:	f7ff fa80 	bl	8001c8c <MCI_FaultProcessing>
 800278c:	e753      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800278e:	7fa3      	ldrb	r3, [r4, #30]
 8002790:	2b05      	cmp	r3, #5
 8002792:	d05b      	beq.n	800284c <TSK_MediumFrequencyTaskM1+0x240>
            if(! RUC_Exec(&RevUpControlM1))
 8002794:	4859      	ldr	r0, [pc, #356]	@ (80028fc <TSK_MediumFrequencyTaskM1+0x2f0>)
 8002796:	f007 ff61 	bl	800a65c <RUC_Exec>
 800279a:	4602      	mov	r2, r0
 800279c:	2800      	cmp	r0, #0
 800279e:	d163      	bne.n	8002868 <TSK_MediumFrequencyTaskM1+0x25c>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80027a0:	4855      	ldr	r0, [pc, #340]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80027a2:	2110      	movs	r1, #16
 80027a4:	f7ff fa72 	bl	8001c8c <MCI_FaultProcessing>
            (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80027a8:	4858      	ldr	r0, [pc, #352]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
 80027aa:	f10d 0102 	add.w	r1, sp, #2
 80027ae:	f008 fbbd 	bl	800af2c <VSS_CalcAvrgMecSpeedUnit>
            if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 80027b2:	4852      	ldr	r0, [pc, #328]	@ (80028fc <TSK_MediumFrequencyTaskM1+0x2f0>)
 80027b4:	f007 ff8a 	bl	800a6cc <RUC_FirstAccelerationStageReached>
 80027b8:	2800      	cmp	r0, #0
 80027ba:	f43f af3c 	beq.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 80027be:	4e4c      	ldr	r6, [pc, #304]	@ (80028f0 <TSK_MediumFrequencyTaskM1+0x2e4>)
 80027c0:	f10d 0102 	add.w	r1, sp, #2
 80027c4:	4630      	mov	r0, r6
 80027c6:	f008 faab 	bl	800ad20 <STO_PLL_IsObserverConverged>
 80027ca:	4605      	mov	r5, r0
              STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 80027cc:	484a      	ldr	r0, [pc, #296]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80027ce:	f7ff faf9 	bl	8001dc4 <MCI_GetImposedMotorDirection>
 80027d2:	b241      	sxtb	r1, r0
 80027d4:	4630      	mov	r0, r6
 80027d6:	f008 fb41 	bl	800ae5c <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 80027da:	484c      	ldr	r0, [pc, #304]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
 80027dc:	4629      	mov	r1, r5
 80027de:	f008 fc33 	bl	800b048 <VSS_SetStartTransition>
            if (ObserverConverged)
 80027e2:	2d00      	cmp	r5, #0
 80027e4:	f43f af27 	beq.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80027e8:	4f47      	ldr	r7, [pc, #284]	@ (8002908 <TSK_MediumFrequencyTaskM1+0x2fc>)
 80027ea:	f9b6 1004 	ldrsh.w	r1, [r6, #4]
 80027ee:	6878      	ldr	r0, [r7, #4]
              REMNG_Init(pREMNG[M1]);
 80027f0:	4d47      	ldr	r5, [pc, #284]	@ (8002910 <TSK_MediumFrequencyTaskM1+0x304>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 80027f2:	f7ff fbed 	bl	8001fd0 <MCM_Park>
 80027f6:	9001      	str	r0, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 80027f8:	6828      	ldr	r0, [r5, #0]
 80027fa:	f007 fe15 	bl	800a428 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 80027fe:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8002802:	6828      	ldr	r0, [r5, #0]
 8002804:	2200      	movs	r2, #0
 8002806:	f007 fe5b 	bl	800a4c0 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 800280a:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 800280e:	6828      	ldr	r0, [r5, #0]
 8002810:	2219      	movs	r2, #25
 8002812:	f007 fe55 	bl	800a4c0 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8002816:	2313      	movs	r3, #19
 8002818:	77e3      	strb	r3, [r4, #31]
 800281a:	e70c      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 800281c:	7fa5      	ldrb	r5, [r4, #30]
 800281e:	f005 05fd 	and.w	r5, r5, #253	@ 0xfd
 8002822:	2d01      	cmp	r5, #1
 8002824:	f47f af07 	bne.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8002828:	4833      	ldr	r0, [pc, #204]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 800282a:	4e35      	ldr	r6, [pc, #212]	@ (8002900 <TSK_MediumFrequencyTaskM1+0x2f4>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 800282c:	f7ff faca 	bl	8001dc4 <MCI_GetImposedMotorDirection>
 8002830:	4601      	mov	r1, r0
 8002832:	4832      	ldr	r0, [pc, #200]	@ (80028fc <TSK_MediumFrequencyTaskM1+0x2f0>)
 8002834:	f007 fec6 	bl	800a5c4 <RUC_Clear>
            if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002838:	6830      	ldr	r0, [r6, #0]
 800283a:	f890 107f 	ldrb.w	r1, [r0, #127]	@ 0x7f
 800283e:	2900      	cmp	r1, #0
 8002840:	d148      	bne.n	80028d4 <TSK_MediumFrequencyTaskM1+0x2c8>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002842:	f000 fc65 	bl	8003110 <PWMC_CurrentReadingCalibr>
              Mci[M1].State = OFFSET_CALIB;
 8002846:	2311      	movs	r3, #17
 8002848:	77e3      	strb	r3, [r4, #31]
 800284a:	e6f4      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
    R3_2_SwitchOffPWM(pwmcHandle[motor]);
 800284c:	4b2c      	ldr	r3, [pc, #176]	@ (8002900 <TSK_MediumFrequencyTaskM1+0x2f4>)
 800284e:	6818      	ldr	r0, [r3, #0]
 8002850:	f007 f816 	bl	8009880 <R3_2_SwitchOffPWM>
  FOC_Clear(motor);
 8002854:	2000      	movs	r0, #0
 8002856:	f7ff fe0b 	bl	8002470 <FOC_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 800285a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800285e:	f7ff fc6f 	bl	8002140 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8002862:	2308      	movs	r3, #8
 8002864:	77e3      	strb	r3, [r4, #31]
}
 8002866:	e6e6      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 8002868:	4b26      	ldr	r3, [pc, #152]	@ (8002904 <TSK_MediumFrequencyTaskM1+0x2f8>)
 800286a:	6818      	ldr	r0, [r3, #0]
 800286c:	f007 ffec 	bl	800a848 <STC_CalcTorqueReference>
              IqdRef.d = FOCVars[M1].UserIdref;
 8002870:	4b25      	ldr	r3, [pc, #148]	@ (8002908 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002872:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
              FOCVars[M1].Iqdref = IqdRef;
 8002876:	8218      	strh	r0, [r3, #16]
 8002878:	825a      	strh	r2, [r3, #18]
 800287a:	e795      	b.n	80027a8 <TSK_MediumFrequencyTaskM1+0x19c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 800287c:	4823      	ldr	r0, [pc, #140]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
 800287e:	a901      	add	r1, sp, #4
 8002880:	f008 fb54 	bl	800af2c <VSS_CalcAvrgMecSpeedUnit>
 8002884:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8002886:	4821      	ldr	r0, [pc, #132]	@ (800290c <TSK_MediumFrequencyTaskM1+0x300>)
 8002888:	f008 fbec 	bl	800b064 <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 800288c:	b915      	cbnz	r5, 8002894 <TSK_MediumFrequencyTaskM1+0x288>
 800288e:	2800      	cmp	r0, #0
 8002890:	f43f aed1 	beq.w	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002894:	4b1c      	ldr	r3, [pc, #112]	@ (8002908 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8002896:	481f      	ldr	r0, [pc, #124]	@ (8002914 <TSK_MediumFrequencyTaskM1+0x308>)
 8002898:	f9b3 5010 	ldrsh.w	r5, [r3, #16]
 800289c:	f006 fd78 	bl	8009390 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80028a0:	b201      	sxth	r1, r0
 80028a2:	fb05 f101 	mul.w	r1, r5, r1
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 80028a6:	4d17      	ldr	r5, [pc, #92]	@ (8002904 <TSK_MediumFrequencyTaskM1+0x2f8>)
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 80028a8:	481a      	ldr	r0, [pc, #104]	@ (8002914 <TSK_MediumFrequencyTaskM1+0x308>)
 80028aa:	f006 fd67 	bl	800937c <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 80028ae:	4910      	ldr	r1, [pc, #64]	@ (80028f0 <TSK_MediumFrequencyTaskM1+0x2e4>)
 80028b0:	6828      	ldr	r0, [r5, #0]
 80028b2:	f007 ff6f 	bl	800a794 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 80028b6:	2000      	movs	r0, #0
 80028b8:	f7ff fe84 	bl	80025c4 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef(M1);
 80028bc:	2000      	movs	r0, #0
 80028be:	f7ff fe83 	bl	80025c8 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 80028c2:	6828      	ldr	r0, [r5, #0]
 80028c4:	f008 f800 	bl	800a8c8 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 80028c8:	480b      	ldr	r0, [pc, #44]	@ (80028f8 <TSK_MediumFrequencyTaskM1+0x2ec>)
 80028ca:	f7ff f9eb 	bl	8001ca4 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 80028ce:	2306      	movs	r3, #6
 80028d0:	77e3      	strb	r3, [r4, #31]
 80028d2:	e6b0      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80028d4:	4629      	mov	r1, r5
              pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 80028d6:	f8a0 5060 	strh.w	r5, [r0, #96]	@ 0x60
              (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 80028da:	f000 fc19 	bl	8003110 <PWMC_CurrentReadingCalibr>
              R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 80028de:	6830      	ldr	r0, [r6, #0]
 80028e0:	2100      	movs	r1, #0
 80028e2:	e702      	b.n	80026ea <TSK_MediumFrequencyTaskM1+0xde>
                FOC_Clear(M1);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f7ff fdc3 	bl	8002470 <FOC_Clear>
                Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80028ea:	2300      	movs	r3, #0
 80028ec:	83e3      	strh	r3, [r4, #30]
 80028ee:	e6a2      	b.n	8002636 <TSK_MediumFrequencyTaskM1+0x2a>
 80028f0:	20000068 	.word	0x20000068
 80028f4:	20000028 	.word	0x20000028
 80028f8:	20000000 	.word	0x20000000
 80028fc:	20000234 	.word	0x20000234
 8002900:	20000a04 	.word	0x20000a04
 8002904:	20000034 	.word	0x20000034
 8002908:	200009dc 	.word	0x200009dc
 800290c:	200003cc 	.word	0x200003cc
 8002910:	200009d8 	.word	0x200009d8
 8002914:	20000338 	.word	0x20000338

08002918 <FOC_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
{
 8002918:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  /* USER CODE END HighFrequencyTask 0 */

  Observer_Inputs_t STO_Inputs; /* Only if sensorless main */

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
  if (SWITCH_OVER == Mci[M1].State)
 800291c:	4f4c      	ldr	r7, [pc, #304]	@ (8002a50 <FOC_HighFrequencyTask+0x138>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 800291e:	4c4d      	ldr	r4, [pc, #308]	@ (8002a54 <FOC_HighFrequencyTask+0x13c>)
  if (SWITCH_OVER == Mci[M1].State)
 8002920:	7ffb      	ldrb	r3, [r7, #31]
{
 8002922:	b089      	sub	sp, #36	@ 0x24
 8002924:	4605      	mov	r5, r0
  if (SWITCH_OVER == Mci[M1].State)
 8002926:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 8002928:	f8d4 001a 	ldr.w	r0, [r4, #26]
 800292c:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 800292e:	f000 8083 	beq.w	8002a38 <FOC_HighFrequencyTask+0x120>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8002932:	4b49      	ldr	r3, [pc, #292]	@ (8002a58 <FOC_HighFrequencyTask+0x140>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002934:	f8df 8144 	ldr.w	r8, [pc, #324]	@ 8002a7c <FOC_HighFrequencyTask+0x164>
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f8d8 0000 	ldr.w	r0, [r8]
static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
 800293e:	695b      	ldr	r3, [r3, #20]
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002940:	a902      	add	r1, sp, #8
 8002942:	f9b3 6004 	ldrsh.w	r6, [r3, #4]
 8002946:	6803      	ldr	r3, [r0, #0]
 8002948:	4798      	blx	r3
  RCM_ReadOngoingConv();
 800294a:	f001 ff29 	bl	80047a0 <RCM_ReadOngoingConv>
  RCM_ExecNextConv();
 800294e:	f001 fee3 	bl	8004718 <RCM_ExecNextConv>
  Ialphabeta = MCM_Clarke(Iab);
 8002952:	9802      	ldr	r0, [sp, #8]
 8002954:	f7ff fb02 	bl	8001f5c <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002958:	4631      	mov	r1, r6
  Ialphabeta = MCM_Clarke(Iab);
 800295a:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 800295c:	f7ff fb38 	bl	8001fd0 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002960:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002964:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8002966:	b201      	sxth	r1, r0
 8002968:	1a59      	subs	r1, r3, r1
 800296a:	4b3c      	ldr	r3, [pc, #240]	@ (8002a5c <FOC_HighFrequencyTask+0x144>)
 800296c:	6818      	ldr	r0, [r3, #0]
 800296e:	f006 fd39 	bl	80093e4 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002972:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8002976:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800297a:	1ac9      	subs	r1, r1, r3
 800297c:	4b38      	ldr	r3, [pc, #224]	@ (8002a60 <FOC_HighFrequencyTask+0x148>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800297e:	4681      	mov	r9, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	f006 fd2f 	bl	80093e4 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002986:	f8ad 9004 	strh.w	r9, [sp, #4]
 800298a:	f8ad 0006 	strh.w	r0, [sp, #6]
 800298e:	9901      	ldr	r1, [sp, #4]
 8002990:	4834      	ldr	r0, [pc, #208]	@ (8002a64 <FOC_HighFrequencyTask+0x14c>)
 8002992:	f006 faf9 	bl	8008f88 <Circle_Limitation>
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002996:	4631      	mov	r1, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8002998:	4681      	mov	r9, r0
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800299a:	f7ff fb5b 	bl	8002054 <MCM_Rev_Park>
 800299e:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80029a0:	f8d8 0000 	ldr.w	r0, [r8]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 80029a4:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 80029a6:	f000 fa67 	bl	8002e78 <PWMC_SetPhaseVoltage>
 80029aa:	4601      	mov	r1, r0

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 80029ac:	9802      	ldr	r0, [sp, #8]
 80029ae:	6020      	str	r0, [r4, #0]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 80029b0:	9803      	ldr	r0, [sp, #12]
 80029b2:	6060      	str	r0, [r4, #4]
  FOCVars[M1].Iqd = Iqd;
 80029b4:	9800      	ldr	r0, [sp, #0]
 80029b6:	60e0      	str	r0, [r4, #12]
  if(hFOCreturn == MC_DURATION)
 80029b8:	2901      	cmp	r1, #1
  FOCVars[M1].Valphabeta = Valphabeta;
 80029ba:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Vqd = Vqd;
 80029bc:	f8c4 9016 	str.w	r9, [r4, #22]
  FOCVars[M1].hElAngle = hElAngle;
 80029c0:	8426      	strh	r6, [r4, #32]
  FOCVars[M1].Valphabeta = Valphabeta;
 80029c2:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 80029c6:	d02f      	beq.n	8002a28 <FOC_HighFrequencyTask+0x110>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80029c8:	4827      	ldr	r0, [pc, #156]	@ (8002a68 <FOC_HighFrequencyTask+0x150>)
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80029ca:	4e28      	ldr	r6, [pc, #160]	@ (8002a6c <FOC_HighFrequencyTask+0x154>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80029cc:	f007 fe7e 	bl	800a6cc <RUC_FirstAccelerationStageReached>
  {
    temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
 80029d0:	4a27      	ldr	r2, [pc, #156]	@ (8002a70 <FOC_HighFrequencyTask+0x158>)
 80029d2:	4603      	mov	r3, r0
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 80029d4:	6860      	ldr	r0, [r4, #4]
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 80029d6:	88d2      	ldrh	r2, [r2, #6]
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 80029d8:	9006      	str	r0, [sp, #24]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80029da:	a905      	add	r1, sp, #20
 80029dc:	4630      	mov	r0, r6
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 80029de:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless */
 80029e0:	f8ad 201c 	strh.w	r2, [sp, #28]
    (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 80029e4:	f007 ff78 	bl	800a8d8 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 80029e8:	4630      	mov	r0, r6
 80029ea:	f008 f90d 	bl	800ac08 <STO_PLL_CalcAvrgElSpeedDpp>
    if (false == IsAccelerationStageReached)
 80029ee:	b144      	cbz	r4, 8002a02 <FOC_HighFrequencyTask+0xea>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 80029f0:	7ffb      	ldrb	r3, [r7, #31]
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d00d      	beq.n	8002a12 <FOC_HighFrequencyTask+0xfa>
 80029f6:	2b13      	cmp	r3, #19
 80029f8:	d00b      	beq.n	8002a12 <FOC_HighFrequencyTask+0xfa>
}
 80029fa:	4628      	mov	r0, r5
 80029fc:	b009      	add	sp, #36	@ 0x24
 80029fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8002a02:	4621      	mov	r1, r4
 8002a04:	f106 0034 	add.w	r0, r6, #52	@ 0x34
 8002a08:	f006 fcb8 	bl	800937c <PID_SetIntegralTerm>
    if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 8002a0c:	7ffb      	ldrb	r3, [r7, #31]
 8002a0e:	2b04      	cmp	r3, #4
 8002a10:	d1f1      	bne.n	80029f6 <FOC_HighFrequencyTask+0xde>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002a12:	88b3      	ldrh	r3, [r6, #4]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002a14:	4817      	ldr	r0, [pc, #92]	@ (8002a74 <FOC_HighFrequencyTask+0x15c>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002a16:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002a1a:	a904      	add	r1, sp, #16
 8002a1c:	f008 fa34 	bl	800ae88 <VSS_CalcElAngle>
}
 8002a20:	4628      	mov	r0, r5
 8002a22:	b009      	add	sp, #36	@ 0x24
 8002a24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8002a28:	4809      	ldr	r0, [pc, #36]	@ (8002a50 <FOC_HighFrequencyTask+0x138>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f7ff f92e 	bl	8001c8c <MCI_FaultProcessing>
}
 8002a30:	4628      	mov	r0, r5
 8002a32:	b009      	add	sp, #36	@ 0x24
 8002a34:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8002a38:	4e0f      	ldr	r6, [pc, #60]	@ (8002a78 <FOC_HighFrequencyTask+0x160>)
 8002a3a:	6830      	ldr	r0, [r6, #0]
 8002a3c:	f007 fd1e 	bl	800a47c <REMNG_RampCompleted>
 8002a40:	2800      	cmp	r0, #0
 8002a42:	f47f af76 	bne.w	8002932 <FOC_HighFrequencyTask+0x1a>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8002a46:	6830      	ldr	r0, [r6, #0]
 8002a48:	f007 fcf6 	bl	800a438 <REMNG_Calc>
 8002a4c:	8220      	strh	r0, [r4, #16]
 8002a4e:	e770      	b.n	8002932 <FOC_HighFrequencyTask+0x1a>
 8002a50:	20000000 	.word	0x20000000
 8002a54:	200009dc 	.word	0x200009dc
 8002a58:	20000034 	.word	0x20000034
 8002a5c:	20000030 	.word	0x20000030
 8002a60:	2000002c 	.word	0x2000002c
 8002a64:	20000038 	.word	0x20000038
 8002a68:	20000234 	.word	0x20000234
 8002a6c:	20000068 	.word	0x20000068
 8002a70:	20000374 	.word	0x20000374
 8002a74:	200003cc 	.word	0x200003cc
 8002a78:	200009d8 	.word	0x200009d8
 8002a7c:	20000a04 	.word	0x20000a04

08002a80 <RI_SetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a84:	b089      	sub	sp, #36	@ 0x24
  else
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
 8002a86:	6885      	ldr	r5, [r0, #8]
    uint8_t accessResult;

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002a88:	4b33      	ldr	r3, [pc, #204]	@ (8002b58 <RI_SetRegCommandParser+0xd8>)
 8002a8a:	9306      	str	r3, [sp, #24]
    uint16_t size = 0U;
 8002a8c:	f04f 0800 	mov.w	r8, #0
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002a90:	4b32      	ldr	r3, [pc, #200]	@ (8002b5c <RI_SetRegCommandParser+0xdc>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002a92:	6844      	ldr	r4, [r0, #4]
    int16_t rxLength = pHandle->rxLength;
 8002a94:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    uint16_t size = 0U;
 8002a98:	f8ad 8016 	strh.w	r8, [sp, #22]
{
 8002a9c:	4606      	mov	r6, r0
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002a9e:	f8a0 800e 	strh.w	r8, [r0, #14]
 8002aa2:	186f      	adds	r7, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 8002aa4:	f8cd 800c 	str.w	r8, [sp, #12]
    uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_SetRegisterGlobal, &RI_SetRegisterMotor1};
 8002aa8:	9307      	str	r3, [sp, #28]
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
        /* Prepare next data*/
        rxLength = (int16_t) (rxLength - size);
        rxData = rxData+size;
        /* If there is only one CMD in the buffer, we do not store the result */
        if ((1U == number_of_item) && (0 == rxLength))
 8002aaa:	f1c5 0901 	rsb	r9, r5, #1
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002aae:	f1a2 0a02 	sub.w	sl, r2, #2
    while (rxLength > 0)
 8002ab2:	2a00      	cmp	r2, #0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002ab4:	fa0f fe8a 	sxth.w	lr, sl
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002ab8:	f10d 0316 	add.w	r3, sp, #22
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002abc:	fa1f fa8a 	uxth.w	sl, sl
    while (rxLength > 0)
 8002ac0:	dd36      	ble.n	8002b30 <RI_SetRegCommandParser+0xb0>
      regID = *dataElementID & REG_MASK;
 8002ac2:	f834 cb02 	ldrh.w	ip, [r4], #2
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002ac6:	f10d 0820 	add.w	r8, sp, #32
      regID = *dataElementID & REG_MASK;
 8002aca:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002ace:	f00c 0b07 	and.w	fp, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8002ad2:	f01c 0f06 	tst.w	ip, #6
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002ad6:	4622      	mov	r2, r4
      regID = *dataElementID & REG_MASK;
 8002ad8:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002ada:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002ade:	eb08 0b8b 	add.w	fp, r8, fp, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8002ae2:	d12d      	bne.n	8002b40 <RI_SetRegCommandParser+0xc0>
        accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 8002ae4:	f85b bc08 	ldr.w	fp, [fp, #-8]
 8002ae8:	f8cd e000 	str.w	lr, [sp]
 8002aec:	47d8      	blx	fp
        rxLength = (int16_t) (rxLength - size);
 8002aee:	f8bd 1016 	ldrh.w	r1, [sp, #22]
        if ((1U == number_of_item) && (0 == rxLength))
 8002af2:	eb05 0309 	add.w	r3, r5, r9
 8002af6:	b2db      	uxtb	r3, r3
        rxLength = (int16_t) (rxLength - size);
 8002af8:	ebaa 0201 	sub.w	r2, sl, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8002afc:	2b01      	cmp	r3, #1
        rxLength = (int16_t) (rxLength - size);
 8002afe:	b212      	sxth	r2, r2
        rxData = rxData+size;
 8002b00:	440c      	add	r4, r1
        if ((1U == number_of_item) && (0 == rxLength))
 8002b02:	d012      	beq.n	8002b2a <RI_SetRegCommandParser+0xaa>
        {
          retVal = accessResult;
        }
        else
        {/* Store the result for each access to be able to report failing access */
          if (txSyncFreeSpace !=0 )
 8002b04:	42bd      	cmp	r5, r7
 8002b06:	d021      	beq.n	8002b4c <RI_SetRegCommandParser+0xcc>
          {
            *txData = accessResult;
 8002b08:	f805 0b01 	strb.w	r0, [r5], #1
            txData = txData+1;
            pHandle->txLength++;
 8002b0c:	89f3      	ldrh	r3, [r6, #14]
 8002b0e:	3301      	adds	r3, #1
 8002b10:	81f3      	strh	r3, [r6, #14]
            txSyncFreeSpace--; /* decrement one by one no wraparound possible */
            retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002b12:	2800      	cmp	r0, #0
 8002b14:	d0cb      	beq.n	8002aae <RI_SetRegCommandParser+0x2e>
            if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002b16:	2807      	cmp	r0, #7
 8002b18:	d012      	beq.n	8002b40 <RI_SetRegCommandParser+0xc0>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	280a      	cmp	r0, #10
 8002b1e:	9303      	str	r3, [sp, #12]
 8002b20:	d1c5      	bne.n	8002aae <RI_SetRegCommandParser+0x2e>
    }
  #ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002b22:	9803      	ldr	r0, [sp, #12]
 8002b24:	b009      	add	sp, #36	@ 0x24
 8002b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if ((1U == number_of_item) && (0 == rxLength))
 8002b2a:	2a00      	cmp	r2, #0
 8002b2c:	d1ea      	bne.n	8002b04 <RI_SetRegCommandParser+0x84>
 8002b2e:	9003      	str	r0, [sp, #12]
    if (MCP_CMD_OK == retVal)
 8002b30:	9b03      	ldr	r3, [sp, #12]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f5      	bne.n	8002b22 <RI_SetRegCommandParser+0xa2>
}
 8002b36:	9803      	ldr	r0, [sp, #12]
      pHandle->txLength = 0;
 8002b38:	81f3      	strh	r3, [r6, #14]
}
 8002b3a:	b009      	add	sp, #36	@ 0x24
 8002b3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        retVal = MCP_CMD_NOK;
 8002b40:	2301      	movs	r3, #1
 8002b42:	9303      	str	r3, [sp, #12]
}
 8002b44:	9803      	ldr	r0, [sp, #12]
 8002b46:	b009      	add	sp, #36	@ 0x24
 8002b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002b4c:	2308      	movs	r3, #8
 8002b4e:	9303      	str	r3, [sp, #12]
}
 8002b50:	9803      	ldr	r0, [sp, #12]
 8002b52:	b009      	add	sp, #36	@ 0x24
 8002b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b58:	080031d9 	.word	0x080031d9
 8002b5c:	080032d9 	.word	0x080032d9

08002b60 <RI_GetRegCommandParser>:
  * @param  txSyncFreeSpace Space available for synchronous transmission
  *
  * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  */
uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b64:	b086      	sub	sp, #24
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    uint16_t size = 0U;
 8002b66:	2300      	movs	r3, #0
 8002b68:	f8ad 300e 	strh.w	r3, [sp, #14]

    uint16_t regID;
    uint8_t typeID;
    uint8_t motorID;
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
    pHandle->txLength = 0;
 8002b6c:	81c3      	strh	r3, [r0, #14]
    uint16_t rxLength = pHandle->rxLength;
 8002b6e:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002b72:	4b1c      	ldr	r3, [pc, #112]	@ (8002be4 <RI_GetRegCommandParser+0x84>)
 8002b74:	9304      	str	r3, [sp, #16]
 8002b76:	4b1c      	ldr	r3, [pc, #112]	@ (8002be8 <RI_GetRegCommandParser+0x88>)
    uint8_t * rxData = pHandle->rxBuffer;
 8002b78:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002b7c:	6886      	ldr	r6, [r0, #8]
    uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_GetRegisterGlobal, &RI_GetRegisterMotor1};
 8002b7e:	9305      	str	r3, [sp, #20]
    while (rxLength > 0U)
 8002b80:	f1b8 0f00 	cmp.w	r8, #0
 8002b84:	d029      	beq.n	8002bda <RI_GetRegCommandParser+0x7a>
 8002b86:	4607      	mov	r7, r0
 8002b88:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002b8a:	464d      	mov	r5, r9
 8002b8c:	e012      	b.n	8002bb4 <RI_GetRegCommandParser+0x54>
        retVal = MCP_CMD_NOK;
        rxLength = 0;
      }
      else
      {
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002b8e:	f85e ac08 	ldr.w	sl, [lr, #-8]
 8002b92:	9400      	str	r4, [sp, #0]
 8002b94:	47d0      	blx	sl
        if (retVal == MCP_CMD_OK )
 8002b96:	eba8 0305 	sub.w	r3, r8, r5
    while (rxLength > 0U)
 8002b9a:	fa19 f383 	uxtah	r3, r9, r3
 8002b9e:	b29b      	uxth	r3, r3
        if (retVal == MCP_CMD_OK )
 8002ba0:	b9e0      	cbnz	r0, 8002bdc <RI_GetRegCommandParser+0x7c>
        {
          /* Prepare next data */
          txData = txData+size;
 8002ba2:	f8bd 100e 	ldrh.w	r1, [sp, #14]
          pHandle->txLength += size;
 8002ba6:	89fa      	ldrh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002ba8:	1a64      	subs	r4, r4, r1
          pHandle->txLength += size;
 8002baa:	440a      	add	r2, r1
          txData = txData+size;
 8002bac:	440e      	add	r6, r1
          pHandle->txLength += size;
 8002bae:	81fa      	strh	r2, [r7, #14]
          freeSpaceS16 = freeSpaceS16-size;
 8002bb0:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8002bb2:	b19b      	cbz	r3, 8002bdc <RI_GetRegCommandParser+0x7c>
      regID = *dataElementID & REG_MASK;
 8002bb4:	f835 cb02 	ldrh.w	ip, [r5], #2
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002bb8:	f10d 0a18 	add.w	sl, sp, #24
      regID = *dataElementID & REG_MASK;
 8002bbc:	f02c 0007 	bic.w	r0, ip, #7
      motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 8002bc0:	f00c 0e07 	and.w	lr, ip, #7
      if (motorID > NBR_OF_MOTORS)
 8002bc4:	f01c 0f06 	tst.w	ip, #6
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002bc8:	f10d 030e 	add.w	r3, sp, #14
 8002bcc:	4632      	mov	r2, r6
      regID = *dataElementID & REG_MASK;
 8002bce:	b280      	uxth	r0, r0
      typeID = (uint8_t)*dataElementID & TYPE_MASK;
 8002bd0:	f00c 0138 	and.w	r1, ip, #56	@ 0x38
        retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 8002bd4:	eb0a 0e8e 	add.w	lr, sl, lr, lsl #2
      if (motorID > NBR_OF_MOTORS)
 8002bd8:	d0d9      	beq.n	8002b8e <RI_GetRegCommandParser+0x2e>
  uint8_t retVal = MCP_CMD_NOK;
 8002bda:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 8002bdc:	b006      	add	sp, #24
 8002bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be2:	bf00      	nop
 8002be4:	08003895 	.word	0x08003895
 8002be8:	080039c9 	.word	0x080039c9

08002bec <MCP_ReceivedPacket>:
  * @brief  Parses the header from the received packet and call the required function depending on the command sent by the controller device.
  *
  * @param  pHandle Handler of the current instance of the MCP component
  */
void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8002bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bee:	4604      	mov	r4, r0
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002bf0:	6846      	ldr	r6, [r0, #4]
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;

    /* Commands requiering payload response must be aware of space available for the payload */
    /* Last byte is reserved for MCP response*/
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002bf2:	6822      	ldr	r2, [r4, #0]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002bf4:	f836 3b02 	ldrh.w	r3, [r6], #2
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002bf8:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002bfa:	8992      	ldrh	r2, [r2, #12]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002bfc:	f403 457f 	and.w	r5, r3, #65280	@ 0xff00
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002c00:	3a01      	subs	r2, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002c02:	3802      	subs	r0, #2
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002c04:	f023 0c07 	bic.w	ip, r3, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002c08:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002c0c:	b291      	uxth	r1, r2
{
 8002c0e:	b083      	sub	sp, #12
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002c10:	b280      	uxth	r0, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8002c12:	fa1f fc8c 	uxth.w	ip, ip
    txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 8002c16:	b212      	sxth	r2, r2
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8002c18:	d039      	beq.n	8002c8e <MCP_ReceivedPacket+0xa2>
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8002c1a:	3b01      	subs	r3, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002c1c:	4f4f      	ldr	r7, [pc, #316]	@ (8002d5c <MCP_ReceivedPacket+0x170>)
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002c1e:	81a0      	strh	r0, [r4, #12]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002c20:	f003 0307 	and.w	r3, r3, #7
 8002c24:	eb03 0383 	add.w	r3, r3, r3, lsl #2

    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0U;
 8002c28:	2500      	movs	r5, #0

    switch (command)
 8002c2a:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002c2e:	6066      	str	r6, [r4, #4]
    MCI_Handle_t *pMCI = &Mci[motorID];
 8002c30:	eb07 07c3 	add.w	r7, r7, r3, lsl #3
    pHandle->txLength = 0U;
 8002c34:	81e5      	strh	r5, [r4, #14]
    switch (command)
 8002c36:	d835      	bhi.n	8002ca4 <MCP_ReceivedPacket+0xb8>
 8002c38:	f1bc 0f38 	cmp.w	ip, #56	@ 0x38
 8002c3c:	d81e      	bhi.n	8002c7c <MCP_ReceivedPacket+0x90>
 8002c3e:	e8df f00c 	tbb	[pc, ip]
 8002c42:	1d6b      	.short	0x1d6b
 8002c44:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c48:	1d731d1d 	.word	0x1d731d1d
 8002c4c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c50:	1d581d1d 	.word	0x1d581d1d
 8002c54:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c58:	1d501d1d 	.word	0x1d501d1d
 8002c5c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c60:	1d4a1d1d 	.word	0x1d4a1d1d
 8002c64:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c68:	1d5d1d1d 	.word	0x1d5d1d1d
 8002c6c:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c70:	1d461d1d 	.word	0x1d461d1d
 8002c74:	1d1d1d1d 	.word	0x1d1d1d1d
 8002c78:	1d1d      	.short	0x1d1d
 8002c7a:	65          	.byte	0x65
 8002c7b:	00          	.byte	0x00
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002c80:	68a2      	ldr	r2, [r4, #8]
 8002c82:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8002c84:	89e3      	ldrh	r3, [r4, #14]
 8002c86:	3301      	adds	r3, #1
 8002c88:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8002c8a:	b003      	add	sp, #12
 8002c8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 8002c8e:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
    pHandle->txLength = 0U;
 8002c92:	2300      	movs	r3, #0
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002c94:	f1bc 0f01 	cmp.w	ip, #1
    pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 8002c98:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 8002c9a:	6066      	str	r6, [r4, #4]
    pHandle->txLength = 0U;
 8002c9c:	81e3      	strh	r3, [r4, #14]
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002c9e:	d948      	bls.n	8002d32 <MCP_ReceivedPacket+0x146>
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8002ca0:	200d      	movs	r0, #13
 8002ca2:	e7ed      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
    switch (command)
 8002ca4:	f1bc 0f68 	cmp.w	ip, #104	@ 0x68
 8002ca8:	d008      	beq.n	8002cbc <MCP_ReceivedPacket+0xd0>
 8002caa:	f1bc 0f48 	cmp.w	ip, #72	@ 0x48
 8002cae:	d1e5      	bne.n	8002c7c <MCP_ReceivedPacket+0x90>
        MCI_Clear_Iqdref(pMCI);
 8002cb0:	4638      	mov	r0, r7
 8002cb2:	f7ff f949 	bl	8001f48 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002cb6:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002cb8:	4628      	mov	r0, r5
        break;
 8002cba:	e7e1      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength,
 8002cbc:	68a3      	ldr	r3, [r4, #8]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	4631      	mov	r1, r6
 8002cc2:	f104 030e 	add.w	r3, r4, #14
 8002cc6:	f7fe ffad 	bl	8001c24 <MC_ProfilerCommand>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002cca:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002ccc:	e7d8      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        if (IDLE == MCI_GetSTMState(pMCI))
 8002cce:	4638      	mov	r0, r7
 8002cd0:	f7ff f824 	bl	8001d1c <MCI_GetSTMState>
 8002cd4:	b128      	cbz	r0, 8002ce2 <MCP_ReceivedPacket+0xf6>
          (void)MCI_StopMotor(pMCI);
 8002cd6:	4638      	mov	r0, r7
 8002cd8:	f7ff f83c 	bl	8001d54 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002cdc:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002cde:	2000      	movs	r0, #0
 8002ce0:	e7ce      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002ce2:	4638      	mov	r0, r7
 8002ce4:	f7ff f820 	bl	8001d28 <MCI_StartMotor>
 8002ce8:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002cec:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 8002cee:	b2c0      	uxtb	r0, r0
 8002cf0:	e7c6      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff ff34 	bl	8002b60 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002cf8:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002cfa:	e7c1      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        if (RUN == MCI_GetSTMState(pMCI))
 8002cfc:	4638      	mov	r0, r7
 8002cfe:	f7ff f80d 	bl	8001d1c <MCI_GetSTMState>
 8002d02:	2806      	cmp	r0, #6
 8002d04:	d021      	beq.n	8002d4a <MCP_ReceivedPacket+0x15e>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002d06:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002d08:	2000      	movs	r0, #0
 8002d0a:	e7b9      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        (void)MCI_FaultAcknowledged(pMCI);
 8002d0c:	4638      	mov	r0, r7
 8002d0e:	f7ff f83d 	bl	8001d8c <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002d12:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002d14:	2000      	movs	r0, #0
        break;
 8002d16:	e7b3      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        *pHandle->txBuffer = MCP_VERSION;
 8002d18:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4U;
 8002d1a:	2104      	movs	r1, #4
        *pHandle->txBuffer = MCP_VERSION;
 8002d1c:	2201      	movs	r2, #1
        pHandle->txLength = 4U;
 8002d1e:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = MCP_VERSION;
 8002d20:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002d22:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002d24:	2000      	movs	r0, #0
        break;
 8002d26:	e7ab      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f7ff fea9 	bl	8002a80 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002d2e:	89e3      	ldrh	r3, [r4, #14]
        break;
 8002d30:	e7a6      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
        if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 8002d32:	4b0b      	ldr	r3, [pc, #44]	@ (8002d60 <MCP_ReceivedPacket+0x174>)
 8002d34:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
 8002d38:	b16d      	cbz	r5, 8002d56 <MCP_ReceivedPacket+0x16a>
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	4631      	mov	r1, r6
 8002d40:	f104 030e 	add.w	r3, r4, #14
 8002d44:	47a8      	blx	r5
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002d46:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace,
 8002d48:	e79a      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
          MCI_StopRamp(pMCI);
 8002d4a:	4638      	mov	r0, r7
 8002d4c:	f7ff f866 	bl	8001e1c <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8002d50:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8002d52:	2000      	movs	r0, #0
 8002d54:	e794      	b.n	8002c80 <MCP_ReceivedPacket+0x94>
 8002d56:	462b      	mov	r3, r5
 8002d58:	e7a2      	b.n	8002ca0 <MCP_ReceivedPacket+0xb4>
 8002d5a:	bf00      	nop
 8002d5c:	20000000 	.word	0x20000000
 8002d60:	20000a1c 	.word	0x20000a1c

08002d64 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8002d64:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8002d66:	f004 ffe9 	bl	8007d3c <HAL_RCC_GetHCLKFreq>
 8002d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d94 <MX_MotorControl_Init+0x30>)
 8002d6c:	fba3 3000 	umull	r3, r0, r3, r0
 8002d70:	09c0      	lsrs	r0, r0, #7
 8002d72:	f003 faf7 	bl	8006364 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002d76:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <MX_MotorControl_Init+0x34>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	6819      	ldr	r1, [r3, #0]
 8002d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d80:	f003 fa94 	bl	80062ac <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002d84:	4805      	ldr	r0, [pc, #20]	@ (8002d9c <MX_MotorControl_Init+0x38>)
 8002d86:	f7ff f993 	bl	80020b0 <MCboot>
  mc_lock_pins();
}
 8002d8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8002d8e:	f7ff bac3 	b.w	8002318 <mc_lock_pins>
 8002d92:	bf00      	nop
 8002d94:	10624dd3 	.word	0x10624dd3
 8002d98:	200004f4 	.word	0x200004f4
 8002d9c:	20001ba8 	.word	0x20001ba8

08002da0 <startTimers>:
  *         @arg @ref LL_TIM_TS_ETRF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerInput(TIM_TypeDef *TIMx, uint32_t TriggerInput)
{
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_TS, TriggerInput);
 8002da0:	4922      	ldr	r1, [pc, #136]	@ (8002e2c <startTimers+0x8c>)
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
  */
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return ((READ_BIT(RCC->APB1ENR1, Periphs) == Periphs) ? 1UL : 0UL);
 8002da2:	4a23      	ldr	r2, [pc, #140]	@ (8002e30 <startTimers+0x90>)
 8002da4:	688b      	ldr	r3, [r1, #8]
  * When this function is called, TIM1 and/or TIM8 must be in a frozen state
  * with CNT, ARR, REP RATE and trigger correctly set (these settings are
  * usually performed in the Init method accordingly with the configuration)
  */
__weak void startTimers(void)
{
 8002da6:	b410      	push	{r4}
 8002da8:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8002dac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002db0:	f043 0310 	orr.w	r3, r3, #16
 8002db4:	b083      	sub	sp, #12
 8002db6:	608b      	str	r3, [r1, #8]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS, SlaveMode);
 8002db8:	688b      	ldr	r3, [r1, #8]
 8002dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dbe:	f023 0307 	bic.w	r3, r3, #7
 8002dc2:	f043 0306 	orr.w	r3, r3, #6
 8002dc6:	608b      	str	r3, [r1, #8]
 8002dc8:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002dca:	07db      	lsls	r3, r3, #31
 8002dcc:	d416      	bmi.n	8002dfc <startTimers+0x5c>
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002dce:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002dd0:	f043 0301 	orr.w	r3, r3, #1
 8002dd4:	6593      	str	r3, [r2, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002dd6:	6d93      	ldr	r3, [r2, #88]	@ 0x58
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002dd8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002de2:	9b01      	ldr	r3, [sp, #4]
 8002de4:	694b      	ldr	r3, [r1, #20]
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	614b      	str	r3, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002dec:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8002dee:	f023 0301 	bic.w	r3, r3, #1
 8002df2:	6593      	str	r3, [r2, #88]	@ 0x58
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8002df4:	b003      	add	sp, #12
 8002df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dfa:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8002dfc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002e00:	480c      	ldr	r0, [pc, #48]	@ (8002e34 <startTimers+0x94>)
 8002e02:	685a      	ldr	r2, [r3, #4]
 8002e04:	6859      	ldr	r1, [r3, #4]
 8002e06:	4c0c      	ldr	r4, [pc, #48]	@ (8002e38 <startTimers+0x98>)
 8002e08:	4001      	ands	r1, r0
 8002e0a:	f041 0120 	orr.w	r1, r1, #32
 8002e0e:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002e10:	6959      	ldr	r1, [r3, #20]
 8002e12:	f041 0101 	orr.w	r1, r1, #1
 8002e16:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	4022      	ands	r2, r4
 8002e1c:	4001      	ands	r1, r0
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
}
 8002e22:	b003      	add	sp, #12
 8002e24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40012c00 	.word	0x40012c00
 8002e30:	40021000 	.word	0x40021000
 8002e34:	fdffff8f 	.word	0xfdffff8f
 8002e38:	02000070 	.word	0x02000070

08002e3c <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002e3c:	3201      	adds	r2, #1
{
 8002e3e:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8002e40:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002e42:	f06f 0602 	mvn.w	r6, #2
 8002e46:	0155      	lsls	r5, r2, #5
 8002e48:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8002e4a:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8002e4c:	f893 c000 	ldrb.w	ip, [r3]
 8002e50:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8002e54:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8002e58:	d80c      	bhi.n	8002e74 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8002e5a:	6904      	ldr	r4, [r0, #16]
 8002e5c:	07a4      	lsls	r4, r4, #30
 8002e5e:	d5f5      	bpl.n	8002e4c <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8002e60:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8002e64:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8002e66:	6106      	str	r6, [r0, #16]
 8002e68:	d8f0      	bhi.n	8002e4c <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8002e6a:	781c      	ldrb	r4, [r3, #0]
 8002e6c:	2c0f      	cmp	r4, #15
 8002e6e:	d8ed      	bhi.n	8002e4c <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8002e70:	2301      	movs	r3, #1
 8002e72:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_PTR_CHECK_POW_COM
  }
#endif
  }
 8002e74:	bd70      	pop	{r4, r5, r6, pc}
 8002e76:	bf00      	nop

08002e78 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002e78:	b530      	push	{r4, r5, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002e7a:	f8b0 4070 	ldrh.w	r4, [r0, #112]	@ 0x70
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002e7e:	f8b0 204e 	ldrh.w	r2, [r0, #78]	@ 0x4e
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002e82:	ea4f 4c21 	mov.w	ip, r1, asr #16
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002e86:	b20b      	sxth	r3, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002e88:	fb04 fc0c 	mul.w	ip, r4, ip
 8002e8c:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002e90:	fb02 f303 	mul.w	r3, r2, r3

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002e94:	eb03 024c 	add.w	r2, r3, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002e98:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002e9c:	eb02 7ed2 	add.w	lr, r2, r2, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002ea0:	eb03 71d3 	add.w	r1, r3, r3, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002ea4:	1c55      	adds	r5, r2, #1
{
 8002ea6:	b083      	sub	sp, #12
    {
      if (wZ < 0)
      {
        pHandle->Sector = SECTOR_5;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002ea8:	ea4f 0494 	mov.w	r4, r4, lsr #2
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002eac:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002eb0:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002eb4:	ea4f 0161 	mov.w	r1, r1, asr #1
    if (wY < 0)
 8002eb8:	db6b      	blt.n	8002f92 <PWMC_SetPhaseVoltage+0x11a>
        }
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002eba:	1c5d      	adds	r5, r3, #1
 8002ebc:	db3d      	blt.n	8002f3a <PWMC_SetPhaseVoltage+0xc2>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002ebe:	ebbe 0e01 	subs.w	lr, lr, r1
 8002ec2:	bf44      	itt	mi
 8002ec4:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002ec8:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bfbc      	itt	lt
 8002ed0:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8002ed4:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002ed8:	2a00      	cmp	r2, #0
 8002eda:	bfb8      	it	lt
 8002edc:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00

        if(true == pHandle->SingleShuntTopology)
 8002ee0:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002ee4:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_2;
 8002ee8:	f04f 0501 	mov.w	r5, #1
        wTimePhC = wTimePhA - (wY / 131072);
 8002eec:	bfb8      	it	lt
 8002eee:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_2;
 8002ef2:	f880 507a 	strb.w	r5, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 8002ef6:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002efa:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 8002efe:	2900      	cmp	r1, #0
 8002f00:	d16e      	bne.n	8002fe0 <PWMC_SetPhaseVoltage+0x168>
          pHandle->midDuty = 0U;
          pHandle->highDuty = 1U;
        }
        else
        {
        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002f02:	fa1f fc83 	uxth.w	ip, r3
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002f06:	fa1f f48e 	uxth.w	r4, lr
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002f0a:	b291      	uxth	r1, r2
            pHandle->highDuty = 2U;
 8002f0c:	f8a0 105c 	strh.w	r1, [r0, #92]	@ 0x5c

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002f10:	6941      	ldr	r1, [r0, #20]
            pHandle->lowDuty = 0U;
 8002f12:	f8a0 c058 	strh.w	ip, [r0, #88]	@ 0x58
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002f16:	ea2e 7eee 	bic.w	lr, lr, lr, asr #31
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002f1a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002f1e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
            pHandle->midDuty = 1U;
 8002f22:	f8a0 405a 	strh.w	r4, [r0, #90]	@ 0x5a
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002f26:	f8a0 e050 	strh.w	lr, [r0, #80]	@ 0x50
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002f2a:	f8a0 3052 	strh.w	r3, [r0, #82]	@ 0x52
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 8002f2e:	f8a0 2054 	strh.w	r2, [r0, #84]	@ 0x54
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002f32:	b003      	add	sp, #12
 8002f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002f38:	4708      	bx	r1
        if ( wX <= 0 )
 8002f3a:	f1bc 0f00 	cmp.w	ip, #0
 8002f3e:	dd7b      	ble.n	8003038 <PWMC_SetPhaseVoltage+0x1c0>
          wTimePhB = wTimePhA + (wZ / 131072);
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	bfb8      	it	lt
 8002f44:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002f48:	ebac 0101 	sub.w	r1, ip, r1
          wTimePhB = wTimePhA + (wZ / 131072);
 8002f4c:	bfb8      	it	lt
 8002f4e:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          wTimePhC = wTimePhB - (wX / 131072);
 8002f52:	f1bc 0f00 	cmp.w	ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002f56:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002f5a:	bfb8      	it	lt
 8002f5c:	f50c 3cff 	addlt.w	ip, ip, #130560	@ 0x1fe00
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002f60:	f890 107d 	ldrb.w	r1, [r0, #125]	@ 0x7d
          pHandle->Sector = SECTOR_1;
 8002f64:	f04f 0200 	mov.w	r2, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002f68:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002f6c:	bfb8      	it	lt
 8002f6e:	f20c 1cff 	addwlt	ip, ip, #511	@ 0x1ff
          pHandle->Sector = SECTOR_1;
 8002f72:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 8002f76:	eba3 426c 	sub.w	r2, r3, ip, asr #17
          if((pHandle->DPWM_Mode == true) || (pHandle->SingleShuntTopology == true))
 8002f7a:	2900      	cmp	r1, #0
 8002f7c:	f040 80ae 	bne.w	80030dc <PWMC_SetPhaseVoltage+0x264>
 8002f80:	f890 4085 	ldrb.w	r4, [r0, #133]	@ 0x85
 8002f84:	2c00      	cmp	r4, #0
 8002f86:	f000 80b9 	beq.w	80030fc <PWMC_SetPhaseVoltage+0x284>
 8002f8a:	f04f 0c02 	mov.w	ip, #2
 8002f8e:	2401      	movs	r4, #1
 8002f90:	e7bc      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 8002f92:	f1b3 3fff 	cmp.w	r3, #4294967295
        if(true == pHandle->SingleShuntTopology)
 8002f96:	f890 5085 	ldrb.w	r5, [r0, #133]	@ 0x85
      if (wZ < 0)
 8002f9a:	db70      	blt.n	800307e <PWMC_SetPhaseVoltage+0x206>
        if (wX <= 0)
 8002f9c:	f1bc 0f00 	cmp.w	ip, #0
 8002fa0:	dd23      	ble.n	8002fea <PWMC_SetPhaseVoltage+0x172>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002fa2:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002fa6:	bf44      	itt	mi
 8002fa8:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8002fac:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002fb0:	2a00      	cmp	r2, #0
 8002fb2:	bfb8      	it	lt
 8002fb4:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002fb8:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 8002fbc:	bfb8      	it	lt
 8002fbe:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_3;
 8002fc2:	2302      	movs	r3, #2
          wTimePhC = wTimePhA - (wY / 131072);
 8002fc4:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          pHandle->Sector = SECTOR_3;
 8002fc8:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8002fcc:	eb02 436c 	add.w	r3, r2, ip, asr #17
          if(true == pHandle->SingleShuntTopology)
 8002fd0:	2d00      	cmp	r5, #0
 8002fd2:	d17e      	bne.n	80030d2 <PWMC_SetPhaseVoltage+0x25a>
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002fd4:	fa1f fc83 	uxth.w	ip, r3
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002fd8:	b294      	uxth	r4, r2
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002fda:	fa1f f18e 	uxth.w	r1, lr
 8002fde:	e795      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
 8002fe0:	f04f 0c02 	mov.w	ip, #2
 8002fe4:	2400      	movs	r4, #0
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	e790      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002fea:	ebbc 0101 	subs.w	r1, ip, r1
 8002fee:	bf44      	itt	mi
 8002ff0:	f501 317f 	addmi.w	r1, r1, #261120	@ 0x3fc00
 8002ff4:	f201 31ff 	addwmi	r1, r1, #1023	@ 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	bfb8      	it	lt
 8002ffc:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_4;
 8003000:	f04f 0203 	mov.w	r2, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8003004:	bfb8      	it	lt
 8003006:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
          pHandle->Sector = SECTOR_4;
 800300a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
          wTimePhC = wTimePhB - (wX / 131072);
 800300e:	f1bc 0200 	subs.w	r2, ip, #0
 8003012:	bfb8      	it	lt
 8003014:	f502 32ff 	addlt.w	r2, r2, #130560	@ 0x1fe00
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8003018:	eb04 4ea1 	add.w	lr, r4, r1, asr #18
          wTimePhB = wTimePhA + (wZ / 131072);
 800301c:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8003020:	bfb8      	it	lt
 8003022:	f202 12ff 	addwlt	r2, r2, #511	@ 0x1ff
 8003026:	eba3 4262 	sub.w	r2, r3, r2, asr #17
          if(true == pHandle->SingleShuntTopology)
 800302a:	2d00      	cmp	r5, #0
 800302c:	d060      	beq.n	80030f0 <PWMC_SetPhaseVoltage+0x278>
 800302e:	f04f 0c00 	mov.w	ip, #0
 8003032:	2401      	movs	r4, #1
 8003034:	2102      	movs	r1, #2
 8003036:	e769      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
          wTimePhC = wTimePhA - (wY / 131072);
 8003038:	2a00      	cmp	r2, #0
 800303a:	bfb8      	it	lt
 800303c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
          pHandle->Sector = SECTOR_6;
 8003040:	f04f 0305 	mov.w	r3, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8003044:	bfb8      	it	lt
 8003046:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800304a:	ebae 0e0c 	sub.w	lr, lr, ip
          pHandle->Sector = SECTOR_6;
 800304e:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
          wTimePhB = wTimePhC + (wX / 131072);
 8003052:	f1bc 0300 	subs.w	r3, ip, #0
 8003056:	bfb8      	it	lt
 8003058:	f503 33ff 	addlt.w	r3, r3, #130560	@ 0x1fe00
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800305c:	eb04 4eae 	add.w	lr, r4, lr, asr #18
          if(true == pHandle->SingleShuntTopology)
 8003060:	f890 1085 	ldrb.w	r1, [r0, #133]	@ 0x85
          wTimePhC = wTimePhA - (wY / 131072);
 8003064:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8003068:	bfb8      	it	lt
 800306a:	f203 13ff 	addwlt	r3, r3, #511	@ 0x1ff
 800306e:	eb02 4363 	add.w	r3, r2, r3, asr #17
          if(true == pHandle->SingleShuntTopology)
 8003072:	b3c1      	cbz	r1, 80030e6 <PWMC_SetPhaseVoltage+0x26e>
 8003074:	f04f 0c01 	mov.w	ip, #1
 8003078:	2402      	movs	r4, #2
 800307a:	2100      	movs	r1, #0
 800307c:	e746      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800307e:	ebbe 0e01 	subs.w	lr, lr, r1
 8003082:	bf44      	itt	mi
 8003084:	f50e 3e7f 	addmi.w	lr, lr, #261120	@ 0x3fc00
 8003088:	f20e 3eff 	addwmi	lr, lr, #1023	@ 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800308c:	2b00      	cmp	r3, #0
 800308e:	bfbc      	itt	lt
 8003090:	f503 337f 	addlt.w	r3, r3, #261120	@ 0x3fc00
 8003094:	f203 33ff 	addwlt	r3, r3, #1023	@ 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8003098:	2a00      	cmp	r2, #0
 800309a:	bfb8      	it	lt
 800309c:	f502 327f 	addlt.w	r2, r2, #261120	@ 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80030a0:	eb04 4eae 	add.w	lr, r4, lr, asr #18
        pHandle->Sector = SECTOR_5;
 80030a4:	f04f 0c04 	mov.w	ip, #4
        wTimePhC = wTimePhA - (wY / 131072) ;
 80030a8:	bfb8      	it	lt
 80030aa:	f202 32ff 	addwlt	r2, r2, #1023	@ 0x3ff
        pHandle->Sector = SECTOR_5;
 80030ae:	f880 c07a 	strb.w	ip, [r0, #122]	@ 0x7a
        wTimePhB = wTimePhA + (wZ / 131072);
 80030b2:	eb0e 43a3 	add.w	r3, lr, r3, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 80030b6:	ebae 42a2 	sub.w	r2, lr, r2, asr #18
        if(true == pHandle->SingleShuntTopology)
 80030ba:	b92d      	cbnz	r5, 80030c8 <PWMC_SetPhaseVoltage+0x250>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80030bc:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhA;
 80030c0:	fa1f f48e 	uxth.w	r4, lr
          pHandle->highDuty = (uint16_t)wTimePhB;
 80030c4:	b299      	uxth	r1, r3
 80030c6:	e721      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
 80030c8:	f04f 0c01 	mov.w	ip, #1
 80030cc:	2400      	movs	r4, #0
 80030ce:	2102      	movs	r1, #2
 80030d0:	e71c      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
 80030d2:	f04f 0c00 	mov.w	ip, #0
 80030d6:	2402      	movs	r4, #2
 80030d8:	2101      	movs	r1, #1
 80030da:	e717      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
 80030dc:	f04f 0c02 	mov.w	ip, #2
 80030e0:	2401      	movs	r4, #1
 80030e2:	2100      	movs	r1, #0
 80030e4:	e712      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80030e6:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhC;
 80030ea:	b294      	uxth	r4, r2
            pHandle->highDuty = (uint16_t)wTimePhB;
 80030ec:	b299      	uxth	r1, r3
 80030ee:	e70d      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80030f0:	fa1f fc82 	uxth.w	ip, r2
          pHandle->midDuty = (uint16_t)wTimePhB;
 80030f4:	b29c      	uxth	r4, r3
          pHandle->highDuty = (uint16_t)wTimePhA;
 80030f6:	fa1f f18e 	uxth.w	r1, lr
 80030fa:	e707      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
            pHandle->lowDuty = (uint16_t)wTimePhA;
 80030fc:	fa1f fc8e 	uxth.w	ip, lr
            pHandle->midDuty = (uint16_t)wTimePhB;
 8003100:	b29c      	uxth	r4, r3
            pHandle->highDuty = (uint16_t)wTimePhC;
 8003102:	b291      	uxth	r1, r2
 8003104:	e702      	b.n	8002f0c <PWMC_SetPhaseVoltage+0x94>
 8003106:	bf00      	nop

08003108 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8003108:	6843      	ldr	r3, [r0, #4]
 800310a:	4718      	bx	r3

0800310c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800310c:	6883      	ldr	r3, [r0, #8]
 800310e:	4718      	bx	r3

08003110 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8003110:	b510      	push	{r4, lr}
 8003112:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8003114:	b179      	cbz	r1, 8003136 <PWMC_CurrentReadingCalibr+0x26>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8003116:	2901      	cmp	r1, #1
 8003118:	d001      	beq.n	800311e <PWMC_CurrentReadingCalibr+0xe>
  bool retVal = false;
 800311a:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800311c:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 800311e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	@ 0x60
 8003122:	b16b      	cbz	r3, 8003140 <PWMC_CurrentReadingCalibr+0x30>
        pHandle->OffCalibrWaitTimeCounter--;
 8003124:	3b01      	subs	r3, #1
 8003126:	b29b      	uxth	r3, r3
 8003128:	f8a0 3060 	strh.w	r3, [r0, #96]	@ 0x60
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 800312c:	2b00      	cmp	r3, #0
 800312e:	d1f4      	bne.n	800311a <PWMC_CurrentReadingCalibr+0xa>
          pHandle->pFctCurrReadingCalib(pHandle);
 8003130:	68c3      	ldr	r3, [r0, #12]
 8003132:	4798      	blx	r3
          retVal = true;
 8003134:	e004      	b.n	8003140 <PWMC_CurrentReadingCalibr+0x30>
      PWMC_SwitchOffPWM(pHandle);
 8003136:	f7ff ffe7 	bl	8003108 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 800313a:	68e3      	ldr	r3, [r4, #12]
 800313c:	4620      	mov	r0, r4
 800313e:	4798      	blx	r3
      retVal = true;
 8003140:	2001      	movs	r0, #1
}
 8003142:	bd10      	pop	{r4, pc}

08003144 <PWMC_OCP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    if (false == pHandle->BrakeActionLock)
 8003144:	f890 3083 	ldrb.w	r3, [r0, #131]	@ 0x83
 8003148:	b91b      	cbnz	r3, 8003152 <PWMC_OCP_Handler+0xe>
    {
      if (ES_GPIO == pHandle->LowSideOutputs)
 800314a:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800314e:	2b02      	cmp	r3, #2
 8003150:	d004      	beq.n	800315c <PWMC_OCP_Handler+0x18>
    }
    else
    {
      /* Nothing to do */
    }
    pHandle->OverCurrentFlag = true;
 8003152:	2301      	movs	r3, #1
 8003154:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003158:	3078      	adds	r0, #120	@ 0x78
 800315a:	4770      	bx	lr
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 800315c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8003160:	b410      	push	{r4}
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 8003162:	6c43      	ldr	r3, [r0, #68]	@ 0x44
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_u_port, pHandle->pwm_en_u_pin);
 8003164:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8003168:	6294      	str	r4, [r2, #40]	@ 0x28
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_v_port, pHandle->pwm_en_v_pin);
 800316a:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->pwm_en_w_port, pHandle->pwm_en_w_pin);
 800316e:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8003172:	628c      	str	r4, [r1, #40]	@ 0x28
 8003174:	629a      	str	r2, [r3, #40]	@ 0x28
    pHandle->OverCurrentFlag = true;
 8003176:	2301      	movs	r3, #1
 8003178:	f880 3080 	strb.w	r3, [r0, #128]	@ 0x80
}
 800317c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003180:	3078      	adds	r0, #120	@ 0x78
 8003182:	4770      	bx	lr

08003184 <PWMC_OVP_Handler>:
    tempPointer = MC_NULL;
  }
  else
  {
#endif
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8003184:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
{
 8003186:	4603      	mov	r3, r0
    pHandle->OverVoltageFlag = true;
 8003188:	f04f 0c01 	mov.w	ip, #1
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800318c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003190:	644a      	str	r2, [r1, #68]	@ 0x44
    tempPointer = &(pHandle->Motor);
#ifdef NULL_PTR_CHECK_PWR_CUR_FDB
  }
#endif
  return (tempPointer);
}
 8003192:	3078      	adds	r0, #120	@ 0x78
    pHandle->OverVoltageFlag = true;
 8003194:	f883 c081 	strb.w	ip, [r3, #129]	@ 0x81
    pHandle->BrakeActionLock = true;
 8003198:	f883 c083 	strb.w	ip, [r3, #131]	@ 0x83
}
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop

080031a0 <PWMC_IsFaultOccurred>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns #MC_OVER_CURR if an overcurrent has been
  *                  detected since last method call, #MC_NO_FAULTS otherwise.
  */
__weak uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle)
{
 80031a0:	4603      	mov	r3, r0
  uint16_t retVal = MC_NO_FAULTS;

  if (true == pHandle->OverVoltageFlag)
 80031a2:	f890 0081 	ldrb.w	r0, [r0, #129]	@ 0x81
 80031a6:	b1a8      	cbz	r0, 80031d4 <PWMC_IsFaultOccurred+0x34>
  {
    retVal = MC_OVER_VOLT;
    pHandle->OverVoltageFlag = false;
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 80031ae:	2142      	movs	r1, #66	@ 0x42
    retVal = MC_OVER_VOLT;
 80031b0:	2002      	movs	r0, #2
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->OverCurrentFlag)
 80031b2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80031b6:	b11a      	cbz	r2, 80031c0 <PWMC_IsFaultOccurred+0x20>
  {
    retVal |= MC_OVER_CURR;
    pHandle->OverCurrentFlag = false;
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
    retVal |= MC_OVER_CURR;
 80031be:	4608      	mov	r0, r1
  else
  {
    /* Nothing to do */
  }

  if (true == pHandle->driverProtectionFlag)
 80031c0:	f893 2082 	ldrb.w	r2, [r3, #130]	@ 0x82
 80031c4:	b12a      	cbz	r2, 80031d2 <PWMC_IsFaultOccurred+0x32>
  {
    retVal |= MC_DP_FAULT;
 80031c6:	f440 6080 	orr.w	r0, r0, #1024	@ 0x400
    pHandle->driverProtectionFlag = false;
 80031ca:	2200      	movs	r2, #0
    retVal |= MC_DP_FAULT;
 80031cc:	b280      	uxth	r0, r0
    pHandle->driverProtectionFlag = false;
 80031ce:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
  {
    /* Nothing to do */
  }

  return (retVal);
}
 80031d2:	4770      	bx	lr
 80031d4:	2140      	movs	r1, #64	@ 0x40
 80031d6:	e7ec      	b.n	80031b2 <PWMC_IsFaultOccurred+0x12>

080031d8 <RI_SetRegisterGlobal>:
#include "mcp_config.h"
#include "mcpa.h"
#include "mc_configuration_registers.h"

uint8_t RI_SetRegisterGlobal(uint16_t regID, uint8_t typeID, uint8_t *data, uint16_t *size, int16_t dataAvailable)
{
 80031d8:	b410      	push	{r4}
  uint8_t retVal = MCP_CMD_OK;
  switch(typeID)
 80031da:	3908      	subs	r1, #8
{
 80031dc:	f9bd c004 	ldrsh.w	ip, [sp, #4]
  switch(typeID)
 80031e0:	2920      	cmp	r1, #32
 80031e2:	d812      	bhi.n	800320a <RI_SetRegisterGlobal+0x32>
 80031e4:	e8df f001 	tbb	[pc, r1]
 80031e8:	11111117 	.word	0x11111117
 80031ec:	11111111 	.word	0x11111111
 80031f0:	11111121 	.word	0x11111121
 80031f4:	11111111 	.word	0x11111111
 80031f8:	1111112f 	.word	0x1111112f
 80031fc:	11111111 	.word	0x11111111
 8003200:	11111139 	.word	0x11111139
 8003204:	11111111 	.word	0x11111111
 8003208:	4d          	.byte	0x4d
 8003209:	00          	.byte	0x00
    }

    default:
    {
      retVal = MCP_ERROR_BAD_DATA_TYPE;
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 800320a:	2200      	movs	r2, #0
 800320c:	801a      	strh	r2, [r3, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 800320e:	2007      	movs	r0, #7
      break;
    }
  }
  return (retVal);
}
 8003210:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003214:	4770      	bx	lr
          retVal = MCP_ERROR_RO_REG;
 8003216:	2848      	cmp	r0, #72	@ 0x48
      *size = 1;
 8003218:	f04f 0201 	mov.w	r2, #1
          retVal = MCP_ERROR_RO_REG;
 800321c:	bf14      	ite	ne
 800321e:	2005      	movne	r0, #5
 8003220:	2004      	moveq	r0, #4
}
 8003222:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 1;
 8003226:	801a      	strh	r2, [r3, #0]
}
 8003228:	4770      	bx	lr
      switch (regID)
 800322a:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 800322e:	d039      	beq.n	80032a4 <RI_SetRegisterGlobal+0xcc>
 8003230:	d942      	bls.n	80032b8 <RI_SetRegisterGlobal+0xe0>
 8003232:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003236:	d035      	beq.n	80032a4 <RI_SetRegisterGlobal+0xcc>
 8003238:	f641 3258 	movw	r2, #7000	@ 0x1b58
 800323c:	4290      	cmp	r0, r2
 800323e:	bf14      	ite	ne
 8003240:	2005      	movne	r0, #5
 8003242:	2004      	moveq	r0, #4
 8003244:	e02f      	b.n	80032a6 <RI_SetRegisterGlobal+0xce>
          retVal = MCP_ERROR_RO_REG;
 8003246:	2818      	cmp	r0, #24
      *size = 4;
 8003248:	f04f 0204 	mov.w	r2, #4
          retVal = MCP_ERROR_RO_REG;
 800324c:	bf14      	ite	ne
 800324e:	2005      	movne	r0, #5
 8003250:	4610      	moveq	r0, r2
}
 8003252:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 4;
 8003256:	801a      	strh	r2, [r3, #0]
}
 8003258:	4770      	bx	lr
uint8_t RI_MovString(const char_t *srcString, char_t *destString, uint16_t *size, int16_t maxSize)
{
  uint8_t retVal = MCP_CMD_OK;
  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */
 800325a:	2101      	movs	r1, #1
 800325c:	8019      	strh	r1, [r3, #0]

  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800325e:	f992 0000 	ldrsb.w	r0, [r2]
 8003262:	b328      	cbz	r0, 80032b0 <RI_SetRegisterGlobal+0xd8>
 8003264:	fa1f f08c 	uxth.w	r0, ip
 8003268:	e003      	b.n	8003272 <RI_SetRegisterGlobal+0x9a>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 800326a:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800326c:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8003270:	b1f4      	cbz	r4, 80032b0 <RI_SetRegisterGlobal+0xd8>
    *size = *size + 1U;
 8003272:	f101 0c01 	add.w	ip, r1, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003276:	4281      	cmp	r1, r0
    *size = *size + 1U;
 8003278:	fa1f f18c 	uxth.w	r1, ip
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800327c:	d3f5      	bcc.n	800326a <RI_SetRegisterGlobal+0x92>
      retVal = MCP_ERROR_RO_REG;
 800327e:	2004      	movs	r0, #4
 8003280:	e7c6      	b.n	8003210 <RI_SetRegisterGlobal+0x38>
      *size = rawSize + 2U;
 8003282:	8812      	ldrh	r2, [r2, #0]
 8003284:	3202      	adds	r2, #2
 8003286:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 8003288:	fa1f fc8c 	uxth.w	ip, ip
 800328c:	4562      	cmp	r2, ip
      *size = rawSize + 2U;
 800328e:	801a      	strh	r2, [r3, #0]
      if (*size > (uint16_t)dataAvailable)
 8003290:	d81a      	bhi.n	80032c8 <RI_SetRegisterGlobal+0xf0>
        switch (regID)
 8003292:	28a8      	cmp	r0, #168	@ 0xa8
 8003294:	d0f3      	beq.n	800327e <RI_SetRegisterGlobal+0xa6>
 8003296:	d81b      	bhi.n	80032d0 <RI_SetRegisterGlobal+0xf8>
 8003298:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 800329c:	2828      	cmp	r0, #40	@ 0x28
 800329e:	d0ee      	beq.n	800327e <RI_SetRegisterGlobal+0xa6>
 80032a0:	2005      	movs	r0, #5
 80032a2:	e7b5      	b.n	8003210 <RI_SetRegisterGlobal+0x38>
  uint8_t retVal = MCP_CMD_OK;
 80032a4:	2000      	movs	r0, #0
      *size = 2;
 80032a6:	2202      	movs	r2, #2
}
 80032a8:	f85d 4b04 	ldr.w	r4, [sp], #4
      *size = 2;
 80032ac:	801a      	strh	r2, [r3, #0]
}
 80032ae:	4770      	bx	lr
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *tempdestString = (int8_t)0;
 80032b0:	2300      	movs	r3, #0
 80032b2:	7013      	strb	r3, [r2, #0]
      retVal = MCP_ERROR_RO_REG;
 80032b4:	2004      	movs	r0, #4
 80032b6:	e7ab      	b.n	8003210 <RI_SetRegisterGlobal+0x38>
      switch (regID)
 80032b8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80032bc:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80032c0:	bf14      	ite	ne
 80032c2:	2005      	movne	r0, #5
 80032c4:	2004      	moveq	r0, #4
 80032c6:	e7ee      	b.n	80032a6 <RI_SetRegisterGlobal+0xce>
        *size = 0;
 80032c8:	2200      	movs	r2, #0
 80032ca:	801a      	strh	r2, [r3, #0]
        retVal = MCP_ERROR_BAD_RAW_FORMAT; /* This error stop the parsing of the CMD buffer */
 80032cc:	200a      	movs	r0, #10
 80032ce:	e79f      	b.n	8003210 <RI_SetRegisterGlobal+0x38>
        switch (regID)
 80032d0:	28e8      	cmp	r0, #232	@ 0xe8
 80032d2:	d1e5      	bne.n	80032a0 <RI_SetRegisterGlobal+0xc8>
 80032d4:	e7d3      	b.n	800327e <RI_SetRegisterGlobal+0xa6>
 80032d6:	bf00      	nop

080032d8 <RI_SetRegisterMotor1>:
{
 80032d8:	b530      	push	{r4, r5, lr}
 80032da:	b083      	sub	sp, #12
  switch(typeID)
 80032dc:	3908      	subs	r1, #8
{
 80032de:	f9bd e018 	ldrsh.w	lr, [sp, #24]
 80032e2:	4694      	mov	ip, r2
 80032e4:	461c      	mov	r4, r3
  switch(typeID)
 80032e6:	2920      	cmp	r1, #32
 80032e8:	d812      	bhi.n	8003310 <RI_SetRegisterMotor1+0x38>
 80032ea:	e8df f001 	tbb	[pc, r1]
 80032ee:	1116      	.short	0x1116
 80032f0:	11111111 	.word	0x11111111
 80032f4:	11231111 	.word	0x11231111
 80032f8:	11111111 	.word	0x11111111
 80032fc:	11581111 	.word	0x11581111
 8003300:	11111111 	.word	0x11111111
 8003304:	11461111 	.word	0x11461111
 8003308:	11111111 	.word	0x11111111
 800330c:	1111      	.short	0x1111
 800330e:	65          	.byte	0x65
 800330f:	00          	.byte	0x00
      *size =0; /* From this point we are not able anymore to decode the RX buffer */
 8003310:	2300      	movs	r3, #0
 8003312:	8023      	strh	r3, [r4, #0]
      retVal = MCP_ERROR_BAD_DATA_TYPE;
 8003314:	2007      	movs	r0, #7
}
 8003316:	b003      	add	sp, #12
 8003318:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 800331a:	2888      	cmp	r0, #136	@ 0x88
 800331c:	f000 8098 	beq.w	8003450 <RI_SetRegisterMotor1+0x178>
 8003320:	f020 0080 	bic.w	r0, r0, #128	@ 0x80
 8003324:	2848      	cmp	r0, #72	@ 0x48
 8003326:	bf0c      	ite	eq
 8003328:	2004      	moveq	r0, #4
 800332a:	2005      	movne	r0, #5
      *size = 1;
 800332c:	2301      	movs	r3, #1
 800332e:	8023      	strh	r3, [r4, #0]
}
 8003330:	b003      	add	sp, #12
 8003332:	bd30      	pop	{r4, r5, pc}
      switch (regID)
 8003334:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
      uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8003338:	8815      	ldrh	r5, [r2, #0]
      switch (regID)
 800333a:	f000 8214 	beq.w	8003766 <RI_SetRegisterMotor1+0x48e>
 800333e:	d85e      	bhi.n	80033fe <RI_SetRegisterMotor1+0x126>
 8003340:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003344:	f000 820a 	beq.w	800375c <RI_SetRegisterMotor1+0x484>
 8003348:	f240 80bb 	bls.w	80034c2 <RI_SetRegisterMotor1+0x1ea>
 800334c:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003350:	f000 81ee 	beq.w	8003730 <RI_SetRegisterMotor1+0x458>
 8003354:	f200 817e 	bhi.w	8003654 <RI_SetRegisterMotor1+0x37c>
 8003358:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 800335c:	f000 81c5 	beq.w	80036ea <RI_SetRegisterMotor1+0x412>
 8003360:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8003364:	f000 81b4 	beq.w	80036d0 <RI_SetRegisterMotor1+0x3f8>
 8003368:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 800336c:	f040 81ae 	bne.w	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKI(&PIDIdHandle_M1, (int16_t)regdata16);
 8003370:	48b2      	ldr	r0, [pc, #712]	@ (800363c <RI_SetRegisterMotor1+0x364>)
 8003372:	b229      	sxth	r1, r5
 8003374:	f005 fff8 	bl	8009368 <PID_SetKI>
          break;
 8003378:	e061      	b.n	800343e <RI_SetRegisterMotor1+0x166>
  *size= 1U ; /* /0 is the min String size */
 800337a:	2201      	movs	r2, #1
 800337c:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800337e:	f99c 3000 	ldrsb.w	r3, [ip]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d036      	beq.n	80033f4 <RI_SetRegisterMotor1+0x11c>
 8003386:	fa1f f38e 	uxth.w	r3, lr
 800338a:	e003      	b.n	8003394 <RI_SetRegisterMotor1+0xbc>
    *size = *size + 1U;
 800338c:	8022      	strh	r2, [r4, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800338e:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003392:	b379      	cbz	r1, 80033f4 <RI_SetRegisterMotor1+0x11c>
    *size = *size + 1U;
 8003394:	1c51      	adds	r1, r2, #1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003396:	4293      	cmp	r3, r2
    *size = *size + 1U;
 8003398:	b28a      	uxth	r2, r1
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800339a:	d8f7      	bhi.n	800338c <RI_SetRegisterMotor1+0xb4>
 800339c:	e02d      	b.n	80033fa <RI_SetRegisterMotor1+0x122>
      switch (regID)
 800339e:	2898      	cmp	r0, #152	@ 0x98
 80033a0:	d066      	beq.n	8003470 <RI_SetRegisterMotor1+0x198>
 80033a2:	d85d      	bhi.n	8003460 <RI_SetRegisterMotor1+0x188>
 80033a4:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
          retVal = MCP_ERROR_RO_REG;
 80033a8:	2818      	cmp	r0, #24
 80033aa:	bf14      	ite	ne
 80033ac:	2005      	movne	r0, #5
 80033ae:	2004      	moveq	r0, #4
      *size = 4;
 80033b0:	2304      	movs	r3, #4
 80033b2:	8023      	strh	r3, [r4, #0]
}
 80033b4:	b003      	add	sp, #12
 80033b6:	bd30      	pop	{r4, r5, pc}
      uint16_t rawSize = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 80033b8:	8811      	ldrh	r1, [r2, #0]
      *size = rawSize + 2U;
 80033ba:	1c8a      	adds	r2, r1, #2
 80033bc:	b292      	uxth	r2, r2
      if (*size > (uint16_t)dataAvailable)
 80033be:	fa1f f38e 	uxth.w	r3, lr
 80033c2:	429a      	cmp	r2, r3
      *size = rawSize + 2U;
 80033c4:	8022      	strh	r2, [r4, #0]
      if (*size > (uint16_t)dataAvailable)
 80033c6:	d83f      	bhi.n	8003448 <RI_SetRegisterMotor1+0x170>
        switch (regID)
 80033c8:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 80033cc:	f000 80c3 	beq.w	8003556 <RI_SetRegisterMotor1+0x27e>
 80033d0:	f200 80a6 	bhi.w	8003520 <RI_SetRegisterMotor1+0x248>
 80033d4:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 80033d8:	f000 8088 	beq.w	80034ec <RI_SetRegisterMotor1+0x214>
 80033dc:	f200 80af 	bhi.w	800353e <RI_SetRegisterMotor1+0x266>
 80033e0:	28a8      	cmp	r0, #168	@ 0xa8
 80033e2:	d00a      	beq.n	80033fa <RI_SetRegisterMotor1+0x122>
 80033e4:	f200 81b6 	bhi.w	8003754 <RI_SetRegisterMotor1+0x47c>
 80033e8:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80033ec:	2828      	cmp	r0, #40	@ 0x28
 80033ee:	d004      	beq.n	80033fa <RI_SetRegisterMotor1+0x122>
 80033f0:	2005      	movs	r0, #5
 80033f2:	e790      	b.n	8003316 <RI_SetRegisterMotor1+0x3e>
    *tempdestString = (int8_t)0;
 80033f4:	2300      	movs	r3, #0
 80033f6:	f88c 3000 	strb.w	r3, [ip]
      retVal = MCP_ERROR_RO_REG;
 80033fa:	2004      	movs	r0, #4
 80033fc:	e78b      	b.n	8003316 <RI_SetRegisterMotor1+0x3e>
      switch (regID)
 80033fe:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003402:	4298      	cmp	r0, r3
 8003404:	f000 81a1 	beq.w	800374a <RI_SetRegisterMotor1+0x472>
 8003408:	d840      	bhi.n	800348c <RI_SetRegisterMotor1+0x1b4>
 800340a:	f241 4350 	movw	r3, #5200	@ 0x1450
 800340e:	4298      	cmp	r0, r3
 8003410:	f000 8170 	beq.w	80036f4 <RI_SetRegisterMotor1+0x41c>
 8003414:	f240 80fc 	bls.w	8003610 <RI_SetRegisterMotor1+0x338>
 8003418:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 800341c:	4298      	cmp	r0, r3
 800341e:	f000 81c7 	beq.w	80037b0 <RI_SetRegisterMotor1+0x4d8>
 8003422:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003426:	4298      	cmp	r0, r3
 8003428:	f000 81b8 	beq.w	800379c <RI_SetRegisterMotor1+0x4c4>
 800342c:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003430:	4298      	cmp	r0, r3
 8003432:	f040 814b 	bne.w	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKIDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 8003436:	4882      	ldr	r0, [pc, #520]	@ (8003640 <RI_SetRegisterMotor1+0x368>)
 8003438:	4629      	mov	r1, r5
 800343a:	f005 ffb1 	bl	80093a0 <PID_SetKIDivisorPOW2>
  uint8_t retVal = MCP_CMD_OK;
 800343e:	2000      	movs	r0, #0
      *size = 2;
 8003440:	2302      	movs	r3, #2
 8003442:	8023      	strh	r3, [r4, #0]
}
 8003444:	b003      	add	sp, #12
 8003446:	bd30      	pop	{r4, r5, pc}
        *size = 0;
 8003448:	2300      	movs	r3, #0
 800344a:	8023      	strh	r3, [r4, #0]
              retVal = MCP_ERROR_BAD_RAW_FORMAT;
 800344c:	200a      	movs	r0, #10
 800344e:	e762      	b.n	8003316 <RI_SetRegisterMotor1+0x3e>
          uint8_t regdata8 = *data;
 8003450:	7813      	ldrb	r3, [r2, #0]
          if ((uint8_t)MCM_TORQUE_MODE == regdata8)
 8003452:	2b04      	cmp	r3, #4
 8003454:	d05b      	beq.n	800350e <RI_SetRegisterMotor1+0x236>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 8003456:	2b03      	cmp	r3, #3
 8003458:	f000 8125 	beq.w	80036a6 <RI_SetRegisterMotor1+0x3ce>
  uint8_t retVal = MCP_CMD_OK;
 800345c:	2000      	movs	r0, #0
 800345e:	e765      	b.n	800332c <RI_SetRegisterMotor1+0x54>
      switch (regID)
 8003460:	28d8      	cmp	r0, #216	@ 0xd8
 8003462:	d052      	beq.n	800350a <RI_SetRegisterMotor1+0x232>
          retVal = MCP_ERROR_RO_REG;
 8003464:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8003468:	bf14      	ite	ne
 800346a:	2005      	movne	r0, #5
 800346c:	2004      	moveq	r0, #4
 800346e:	e79f      	b.n	80033b0 <RI_SetRegisterMotor1+0xd8>
          MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8003470:	f9b2 3000 	ldrsh.w	r3, [r2]
 8003474:	4973      	ldr	r1, [pc, #460]	@ (8003644 <RI_SetRegisterMotor1+0x36c>)
 8003476:	4874      	ldr	r0, [pc, #464]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 8003478:	fb81 2103 	smull	r2, r1, r1, r3
 800347c:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8003480:	2200      	movs	r2, #0
 8003482:	b209      	sxth	r1, r1
 8003484:	f7fe fbd4 	bl	8001c30 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003488:	2000      	movs	r0, #0
          break;
 800348a:	e791      	b.n	80033b0 <RI_SetRegisterMotor1+0xd8>
      switch (regID)
 800348c:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003490:	4298      	cmp	r0, r3
 8003492:	f000 8134 	beq.w	80036fe <RI_SetRegisterMotor1+0x426>
 8003496:	f200 80ea 	bhi.w	800366e <RI_SetRegisterMotor1+0x396>
 800349a:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 800349e:	4298      	cmp	r0, r3
 80034a0:	f000 8137 	beq.w	8003712 <RI_SetRegisterMotor1+0x43a>
 80034a4:	f241 6310 	movw	r3, #5648	@ 0x1610
 80034a8:	4298      	cmp	r0, r3
 80034aa:	f000 812d 	beq.w	8003708 <RI_SetRegisterMotor1+0x430>
 80034ae:	f241 5390 	movw	r3, #5520	@ 0x1590
 80034b2:	4298      	cmp	r0, r3
 80034b4:	f040 810a 	bne.w	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKDDivisorPOW2(&PIDIdHandle_M1, regdata16);
 80034b8:	4860      	ldr	r0, [pc, #384]	@ (800363c <RI_SetRegisterMotor1+0x364>)
 80034ba:	4629      	mov	r1, r5
 80034bc:	f005 ff8c 	bl	80093d8 <PID_SetKDDivisorPOW2>
          break;
 80034c0:	e7bd      	b.n	800343e <RI_SetRegisterMotor1+0x166>
      switch (regID)
 80034c2:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 80034c6:	f000 812e 	beq.w	8003726 <RI_SetRegisterMotor1+0x44e>
 80034ca:	f200 80e0 	bhi.w	800368e <RI_SetRegisterMotor1+0x3b6>
 80034ce:	28d0      	cmp	r0, #208	@ 0xd0
 80034d0:	f000 815a 	beq.w	8003788 <RI_SetRegisterMotor1+0x4b0>
 80034d4:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 80034d8:	f000 8151 	beq.w	800377e <RI_SetRegisterMotor1+0x4a6>
 80034dc:	2890      	cmp	r0, #144	@ 0x90
 80034de:	f040 80f5 	bne.w	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKP(&PIDSpeedHandle_M1, (int16_t)regdata16);
 80034e2:	4857      	ldr	r0, [pc, #348]	@ (8003640 <RI_SetRegisterMotor1+0x368>)
 80034e4:	b229      	sxth	r1, r5
 80034e6:	f005 ff3d 	bl	8009364 <PID_SetKP>
          break;
 80034ea:	e7a8      	b.n	800343e <RI_SetRegisterMotor1+0x166>
            MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 80034ec:	f8dc 1002 	ldr.w	r1, [ip, #2]
 80034f0:	4b54      	ldr	r3, [pc, #336]	@ (8003644 <RI_SetRegisterMotor1+0x36c>)
 80034f2:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 80034f6:	fb83 0301 	smull	r0, r3, r3, r1
 80034fa:	eba3 71e1 	sub.w	r1, r3, r1, asr #31
 80034fe:	4852      	ldr	r0, [pc, #328]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 8003500:	b209      	sxth	r1, r1
 8003502:	f7fe fb95 	bl	8001c30 <MCI_ExecSpeedRamp>
  uint8_t retVal = MCP_CMD_OK;
 8003506:	2000      	movs	r0, #0
 8003508:	e705      	b.n	8003316 <RI_SetRegisterMotor1+0x3e>
          retVal = MCP_ERROR_RO_REG;
 800350a:	2004      	movs	r0, #4
 800350c:	e750      	b.n	80033b0 <RI_SetRegisterMotor1+0xd8>
            MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 800350e:	484e      	ldr	r0, [pc, #312]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 8003510:	f7fe fcea 	bl	8001ee8 <MCI_GetTeref>
 8003514:	2200      	movs	r2, #0
 8003516:	4601      	mov	r1, r0
 8003518:	484b      	ldr	r0, [pc, #300]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 800351a:	f7fe fba3 	bl	8001c64 <MCI_ExecTorqueRamp>
          if ((uint8_t)MCM_SPEED_MODE == regdata8)
 800351e:	e79d      	b.n	800345c <RI_SetRegisterMotor1+0x184>
        switch (regID)
 8003520:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003524:	d06d      	beq.n	8003602 <RI_SetRegisterMotor1+0x32a>
 8003526:	f5b0 6fa5 	cmp.w	r0, #1320	@ 0x528
 800352a:	f47f af61 	bne.w	80033f0 <RI_SetRegisterMotor1+0x118>
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800352e:	4847      	ldr	r0, [pc, #284]	@ (800364c <RI_SetRegisterMotor1+0x374>)
 8003530:	f10c 0102 	add.w	r1, ip, #2
}
 8003534:	b003      	add	sp, #12
 8003536:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800353a:	f005 be3f 	b.w	80091bc <MCPA_cfgLog>
        switch (regID)
 800353e:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003542:	f47f af55 	bne.w	80033f0 <RI_SetRegisterMotor1+0x118>
            MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8003546:	f8bc 2006 	ldrh.w	r2, [ip, #6]
 800354a:	f9bc 1002 	ldrsh.w	r1, [ip, #2]
 800354e:	483e      	ldr	r0, [pc, #248]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 8003550:	f7fe fb88 	bl	8001c64 <MCI_ExecTorqueRamp>
            break;
 8003554:	e7d7      	b.n	8003506 <RI_SetRegisterMotor1+0x22e>
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003556:	074b      	lsls	r3, r1, #29
 8003558:	f47f af78 	bne.w	800344c <RI_SetRegisterMotor1+0x174>
            uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 800355c:	b2c9      	uxtb	r1, r1
            if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 800355e:	292f      	cmp	r1, #47	@ 0x2f
 8003560:	f63f af74 	bhi.w	800344c <RI_SetRegisterMotor1+0x174>
              for (i = 0; i <nbrOfPhase; i++)
 8003564:	08c9      	lsrs	r1, r1, #3
 8003566:	d0ce      	beq.n	8003506 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003568:	f9bc 3002 	ldrsh.w	r3, [ip, #2]
 800356c:	4a35      	ldr	r2, [pc, #212]	@ (8003644 <RI_SetRegisterMotor1+0x36c>)
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800356e:	f8bc 5008 	ldrh.w	r5, [ip, #8]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003572:	fb82 4003 	smull	r4, r0, r2, r3
 8003576:	eba0 70e3 	sub.w	r0, r0, r3, asr #31
    retValue = false;
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 800357a:	4b35      	ldr	r3, [pc, #212]	@ (8003650 <RI_SetRegisterMotor1+0x378>)
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800357c:	f9bc 4006 	ldrsh.w	r4, [ip, #6]
 8003580:	821c      	strh	r4, [r3, #16]
              for (i = 0; i <nbrOfPhase; i++)
 8003582:	2901      	cmp	r1, #1
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8003584:	819d      	strh	r5, [r3, #12]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8003586:	81d8      	strh	r0, [r3, #14]
 8003588:	d0bd      	beq.n	8003506 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 800358a:	f9bc 400a 	ldrsh.w	r4, [ip, #10]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800358e:	f9bc 500e 	ldrsh.w	r5, [ip, #14]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003592:	fb82 e004 	smull	lr, r0, r2, r4
 8003596:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 800359a:	2902      	cmp	r1, #2
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800359c:	f8bc 4010 	ldrh.w	r4, [ip, #16]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80035a0:	831c      	strh	r4, [r3, #24]
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80035a2:	839d      	strh	r5, [r3, #28]
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80035a4:	8358      	strh	r0, [r3, #26]
              for (i = 0; i <nbrOfPhase; i++)
 80035a6:	d0ae      	beq.n	8003506 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80035a8:	f9bc 4012 	ldrsh.w	r4, [ip, #18]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80035ac:	f9bc 5016 	ldrsh.w	r5, [ip, #22]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80035b0:	fb82 e004 	smull	lr, r0, r2, r4
 80035b4:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 80035b8:	2903      	cmp	r1, #3
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80035ba:	f8bc 4018 	ldrh.w	r4, [ip, #24]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80035be:	849c      	strh	r4, [r3, #36]	@ 0x24
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80035c0:	851d      	strh	r5, [r3, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80035c2:	84d8      	strh	r0, [r3, #38]	@ 0x26
              for (i = 0; i <nbrOfPhase; i++)
 80035c4:	d09f      	beq.n	8003506 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80035c6:	f9bc 401a 	ldrsh.w	r4, [ip, #26]
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80035ca:	f9bc 501e 	ldrsh.w	r5, [ip, #30]
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80035ce:	fb82 e004 	smull	lr, r0, r2, r4
 80035d2:	eba0 70e4 	sub.w	r0, r0, r4, asr #31
              for (i = 0; i <nbrOfPhase; i++)
 80035d6:	2905      	cmp	r1, #5
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80035d8:	f8bc 4020 	ldrh.w	r4, [ip, #32]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80035dc:	861c      	strh	r4, [r3, #48]	@ 0x30
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80035de:	869d      	strh	r5, [r3, #52]	@ 0x34
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80035e0:	8658      	strh	r0, [r3, #50]	@ 0x32
              for (i = 0; i <nbrOfPhase; i++)
 80035e2:	d190      	bne.n	8003506 <RI_SetRegisterMotor1+0x22e>
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80035e4:	f9bc 1022 	ldrsh.w	r1, [ip, #34]	@ 0x22
              revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80035e8:	f9bc 0026 	ldrsh.w	r0, [ip, #38]	@ 0x26
              revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 80035ec:	fb82 4201 	smull	r4, r2, r2, r1
 80035f0:	eba2 72e1 	sub.w	r2, r2, r1, asr #31
              revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 80035f4:	f8bc 4028 	ldrh.w	r4, [ip, #40]	@ 0x28
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80035f8:	879c      	strh	r4, [r3, #60]	@ 0x3c
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
 80035fa:	f8a3 0040 	strh.w	r0, [r3, #64]	@ 0x40
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80035fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
              for (i = 0; i <nbrOfPhase; i++)
 8003600:	e781      	b.n	8003506 <RI_SetRegisterMotor1+0x22e>
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003602:	f8dc 1002 	ldr.w	r1, [ip, #2]
            MCI_SetCurrentReferences(pMCIN, currComp);
 8003606:	4810      	ldr	r0, [pc, #64]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
            currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8003608:	9101      	str	r1, [sp, #4]
            MCI_SetCurrentReferences(pMCIN, currComp);
 800360a:	f7fe fb35 	bl	8001c78 <MCI_SetCurrentReferences>
            break;
 800360e:	e77a      	b.n	8003506 <RI_SetRegisterMotor1+0x22e>
      switch (regID)
 8003610:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8003614:	f000 80d1 	beq.w	80037ba <RI_SetRegisterMotor1+0x4e2>
 8003618:	d84e      	bhi.n	80036b8 <RI_SetRegisterMotor1+0x3e0>
 800361a:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 800361e:	f040 80de 	bne.w	80037de <RI_SetRegisterMotor1+0x506>
          currComp = MCI_GetIqdref(pMCIN);
 8003622:	4809      	ldr	r0, [pc, #36]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 8003624:	f7fe fc42 	bl	8001eac <MCI_GetIqdref>
 8003628:	4603      	mov	r3, r0
 800362a:	9301      	str	r3, [sp, #4]
          currComp.d = (int16_t)regdata16;
 800362c:	f8ad 5006 	strh.w	r5, [sp, #6]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003630:	4805      	ldr	r0, [pc, #20]	@ (8003648 <RI_SetRegisterMotor1+0x370>)
 8003632:	9901      	ldr	r1, [sp, #4]
 8003634:	f7fe fb20 	bl	8001c78 <MCI_SetCurrentReferences>
          break;
 8003638:	e701      	b.n	800343e <RI_SetRegisterMotor1+0x166>
 800363a:	bf00      	nop
 800363c:	200002e0 	.word	0x200002e0
 8003640:	20000338 	.word	0x20000338
 8003644:	2aaaaaab 	.word	0x2aaaaaab
 8003648:	20000000 	.word	0x20000000
 800364c:	20000424 	.word	0x20000424
 8003650:	20000234 	.word	0x20000234
      switch (regID)
 8003654:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003658:	d060      	beq.n	800371c <RI_SetRegisterMotor1+0x444>
 800365a:	f200 80b0 	bhi.w	80037be <RI_SetRegisterMotor1+0x4e6>
 800365e:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8003662:	d133      	bne.n	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKI (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 8003664:	4885      	ldr	r0, [pc, #532]	@ (800387c <RI_SetRegisterMotor1+0x5a4>)
 8003666:	b229      	sxth	r1, r5
 8003668:	f005 fe7e 	bl	8009368 <PID_SetKI>
          break;
 800366c:	e6e7      	b.n	800343e <RI_SetRegisterMotor1+0x166>
      switch (regID)
 800366e:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003672:	4298      	cmp	r0, r3
 8003674:	f000 808d 	beq.w	8003792 <RI_SetRegisterMotor1+0x4ba>
 8003678:	f200 80da 	bhi.w	8003830 <RI_SetRegisterMotor1+0x558>
 800367c:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8003680:	4298      	cmp	r0, r3
 8003682:	d123      	bne.n	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKIDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003684:	487d      	ldr	r0, [pc, #500]	@ (800387c <RI_SetRegisterMotor1+0x5a4>)
 8003686:	4629      	mov	r1, r5
 8003688:	f005 fe8a 	bl	80093a0 <PID_SetKIDivisorPOW2>
          break;
 800368c:	e6d7      	b.n	800343e <RI_SetRegisterMotor1+0x166>
      switch (regID)
 800368e:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8003692:	f000 8088 	beq.w	80037a6 <RI_SetRegisterMotor1+0x4ce>
 8003696:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 800369a:	d117      	bne.n	80036cc <RI_SetRegisterMotor1+0x3f4>
          PID_SetKD(&PIDIqHandle_M1, (int16_t)regdata16);
 800369c:	4878      	ldr	r0, [pc, #480]	@ (8003880 <RI_SetRegisterMotor1+0x5a8>)
 800369e:	b229      	sxth	r1, r5
 80036a0:	f005 fe92 	bl	80093c8 <PID_SetKD>
          break;
 80036a4:	e6cb      	b.n	800343e <RI_SetRegisterMotor1+0x166>
            MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 80036a6:	4877      	ldr	r0, [pc, #476]	@ (8003884 <RI_SetRegisterMotor1+0x5ac>)
 80036a8:	f7fe fbd0 	bl	8001e4c <MCI_GetMecSpeedRefUnit>
 80036ac:	2200      	movs	r2, #0
 80036ae:	4601      	mov	r1, r0
 80036b0:	4874      	ldr	r0, [pc, #464]	@ (8003884 <RI_SetRegisterMotor1+0x5ac>)
 80036b2:	f7fe fabd 	bl	8001c30 <MCI_ExecSpeedRamp>
 80036b6:	e6d1      	b.n	800345c <RI_SetRegisterMotor1+0x184>
      switch (regID)
 80036b8:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80036bc:	f43f aebf 	beq.w	800343e <RI_SetRegisterMotor1+0x166>
 80036c0:	f240 809c 	bls.w	80037fc <RI_SetRegisterMotor1+0x524>
 80036c4:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 80036c8:	f43f aeb9 	beq.w	800343e <RI_SetRegisterMotor1+0x166>
          retVal = MCP_ERROR_UNKNOWN_REG;
 80036cc:	2005      	movs	r0, #5
 80036ce:	e6b7      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 80036d0:	aa01      	add	r2, sp, #4
 80036d2:	f10d 0102 	add.w	r1, sp, #2
 80036d6:	486c      	ldr	r0, [pc, #432]	@ (8003888 <RI_SetRegisterMotor1+0x5b0>)
 80036d8:	f007 fb9e 	bl	800ae18 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, (int16_t)regdata16, hC2);
 80036dc:	486a      	ldr	r0, [pc, #424]	@ (8003888 <RI_SetRegisterMotor1+0x5b0>)
 80036de:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80036e2:	b229      	sxth	r1, r5
 80036e4:	f007 fba0 	bl	800ae28 <STO_PLL_SetObserverGains>
          break;
 80036e8:	e6a9      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKD(&PIDIdHandle_M1, (int16_t)regdata16);
 80036ea:	4868      	ldr	r0, [pc, #416]	@ (800388c <RI_SetRegisterMotor1+0x5b4>)
 80036ec:	b229      	sxth	r1, r5
 80036ee:	f005 fe6b 	bl	80093c8 <PID_SetKD>
          break;
 80036f2:	e6a4      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80036f4:	4866      	ldr	r0, [pc, #408]	@ (8003890 <RI_SetRegisterMotor1+0x5b8>)
 80036f6:	4629      	mov	r1, r5
 80036f8:	f005 fe44 	bl	8009384 <PID_SetKPDivisorPOW2>
          break;
 80036fc:	e69f      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKDDivisorPOW2(&PIDIqHandle_M1, regdata16);
 80036fe:	4860      	ldr	r0, [pc, #384]	@ (8003880 <RI_SetRegisterMotor1+0x5a8>)
 8003700:	4629      	mov	r1, r5
 8003702:	f005 fe69 	bl	80093d8 <PID_SetKDDivisorPOW2>
          break;
 8003706:	e69a      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKIDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003708:	485d      	ldr	r0, [pc, #372]	@ (8003880 <RI_SetRegisterMotor1+0x5a8>)
 800370a:	4629      	mov	r1, r5
 800370c:	f005 fe48 	bl	80093a0 <PID_SetKIDivisorPOW2>
          break;
 8003710:	e695      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDIqHandle_M1, regdata16);
 8003712:	485b      	ldr	r0, [pc, #364]	@ (8003880 <RI_SetRegisterMotor1+0x5a8>)
 8003714:	4629      	mov	r1, r5
 8003716:	f005 fe35 	bl	8009384 <PID_SetKPDivisorPOW2>
          break;
 800371a:	e690      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKP (&(&STO_PLL_M1)->PIRegulator, (int16_t)regdata16);
 800371c:	4857      	ldr	r0, [pc, #348]	@ (800387c <RI_SetRegisterMotor1+0x5a4>)
 800371e:	b229      	sxth	r1, r5
 8003720:	f005 fe20 	bl	8009364 <PID_SetKP>
          break;
 8003724:	e68b      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKP(&PIDIqHandle_M1, (int16_t)regdata16);
 8003726:	4856      	ldr	r0, [pc, #344]	@ (8003880 <RI_SetRegisterMotor1+0x5a8>)
 8003728:	b229      	sxth	r1, r5
 800372a:	f005 fe1b 	bl	8009364 <PID_SetKP>
          break;
 800372e:	e686      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003730:	aa01      	add	r2, sp, #4
 8003732:	f10d 0102 	add.w	r1, sp, #2
 8003736:	4854      	ldr	r0, [pc, #336]	@ (8003888 <RI_SetRegisterMotor1+0x5b0>)
 8003738:	f007 fb6e 	bl	800ae18 <STO_PLL_GetObserverGains>
          STO_PLL_SetObserverGains(&STO_PLL_M1, hC1, (int16_t)regdata16);
 800373c:	4852      	ldr	r0, [pc, #328]	@ (8003888 <RI_SetRegisterMotor1+0x5b0>)
 800373e:	f9bd 1002 	ldrsh.w	r1, [sp, #2]
 8003742:	b22a      	sxth	r2, r5
 8003744:	f007 fb70 	bl	800ae28 <STO_PLL_SetObserverGains>
          break;
 8003748:	e679      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKIDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800374a:	4850      	ldr	r0, [pc, #320]	@ (800388c <RI_SetRegisterMotor1+0x5b4>)
 800374c:	4629      	mov	r1, r5
 800374e:	f005 fe27 	bl	80093a0 <PID_SetKIDivisorPOW2>
          break;
 8003752:	e674      	b.n	800343e <RI_SetRegisterMotor1+0x166>
        switch (regID)
 8003754:	28e8      	cmp	r0, #232	@ 0xe8
 8003756:	f43f ae50 	beq.w	80033fa <RI_SetRegisterMotor1+0x122>
 800375a:	e649      	b.n	80033f0 <RI_SetRegisterMotor1+0x118>
          PID_SetKP(&PIDIdHandle_M1, (int16_t)regdata16);
 800375c:	484b      	ldr	r0, [pc, #300]	@ (800388c <RI_SetRegisterMotor1+0x5b4>)
 800375e:	b229      	sxth	r1, r5
 8003760:	f005 fe00 	bl	8009364 <PID_SetKP>
          break;
 8003764:	e66b      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          currComp = MCI_GetIqdref(pMCIN);
 8003766:	4847      	ldr	r0, [pc, #284]	@ (8003884 <RI_SetRegisterMotor1+0x5ac>)
 8003768:	f7fe fba0 	bl	8001eac <MCI_GetIqdref>
 800376c:	4603      	mov	r3, r0
 800376e:	9301      	str	r3, [sp, #4]
          currComp.q = (int16_t)regdata16;
 8003770:	f8ad 5004 	strh.w	r5, [sp, #4]
          MCI_SetCurrentReferences(pMCIN,currComp);
 8003774:	4843      	ldr	r0, [pc, #268]	@ (8003884 <RI_SetRegisterMotor1+0x5ac>)
 8003776:	9901      	ldr	r1, [sp, #4]
 8003778:	f7fe fa7e 	bl	8001c78 <MCI_SetCurrentReferences>
          break;
 800377c:	e65f      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKD(&PIDSpeedHandle_M1, (int16_t)regdata16);
 800377e:	4844      	ldr	r0, [pc, #272]	@ (8003890 <RI_SetRegisterMotor1+0x5b8>)
 8003780:	b229      	sxth	r1, r5
 8003782:	f005 fe21 	bl	80093c8 <PID_SetKD>
          break;
 8003786:	e65a      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKI(&PIDSpeedHandle_M1, (int16_t)regdata16);
 8003788:	4841      	ldr	r0, [pc, #260]	@ (8003890 <RI_SetRegisterMotor1+0x5b8>)
 800378a:	b229      	sxth	r1, r5
 800378c:	f005 fdec 	bl	8009368 <PID_SetKI>
          break;
 8003790:	e655      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2 (&(&STO_PLL_M1)->PIRegulator,regdata16);
 8003792:	483a      	ldr	r0, [pc, #232]	@ (800387c <RI_SetRegisterMotor1+0x5a4>)
 8003794:	4629      	mov	r1, r5
 8003796:	f005 fdf5 	bl	8009384 <PID_SetKPDivisorPOW2>
          break;
 800379a:	e650      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKPDivisorPOW2(&PIDIdHandle_M1, regdata16);
 800379c:	483b      	ldr	r0, [pc, #236]	@ (800388c <RI_SetRegisterMotor1+0x5b4>)
 800379e:	4629      	mov	r1, r5
 80037a0:	f005 fdf0 	bl	8009384 <PID_SetKPDivisorPOW2>
          break;
 80037a4:	e64b      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKI(&PIDIqHandle_M1, (int16_t)regdata16);
 80037a6:	4836      	ldr	r0, [pc, #216]	@ (8003880 <RI_SetRegisterMotor1+0x5a8>)
 80037a8:	b229      	sxth	r1, r5
 80037aa:	f005 fddd 	bl	8009368 <PID_SetKI>
          break;
 80037ae:	e646      	b.n	800343e <RI_SetRegisterMotor1+0x166>
          PID_SetKDDivisorPOW2(&PIDSpeedHandle_M1, regdata16);
 80037b0:	4837      	ldr	r0, [pc, #220]	@ (8003890 <RI_SetRegisterMotor1+0x5b8>)
 80037b2:	4629      	mov	r1, r5
 80037b4:	f005 fe10 	bl	80093d8 <PID_SetKDDivisorPOW2>
          break;
 80037b8:	e641      	b.n	800343e <RI_SetRegisterMotor1+0x166>
      switch (regID)
 80037ba:	2004      	movs	r0, #4
 80037bc:	e640      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 80037be:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 80037c2:	d0fa      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 80037c4:	d827      	bhi.n	8003816 <RI_SetRegisterMotor1+0x53e>
 80037c6:	f5b0 6ff2 	cmp.w	r0, #1936	@ 0x790
 80037ca:	d0f6      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 80037cc:	d84a      	bhi.n	8003864 <RI_SetRegisterMotor1+0x58c>
 80037ce:	f020 0040 	bic.w	r0, r0, #64	@ 0x40
 80037d2:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 80037d6:	bf14      	ite	ne
 80037d8:	2005      	movne	r0, #5
 80037da:	2004      	moveq	r0, #4
 80037dc:	e630      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 80037de:	f4ff af75 	bcc.w	80036cc <RI_SetRegisterMotor1+0x3f4>
 80037e2:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 80037e6:	d0e8      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 80037e8:	d82d      	bhi.n	8003846 <RI_SetRegisterMotor1+0x56e>
 80037ea:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 80037ee:	d0e4      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 80037f0:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 80037f4:	bf14      	ite	ne
 80037f6:	2005      	movne	r0, #5
 80037f8:	2004      	moveq	r0, #4
 80037fa:	e621      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 80037fc:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8003800:	d0db      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 8003802:	d835      	bhi.n	8003870 <RI_SetRegisterMotor1+0x598>
 8003804:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003808:	d0d7      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 800380a:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 800380e:	bf14      	ite	ne
 8003810:	2005      	movne	r0, #5
 8003812:	2004      	moveq	r0, #4
 8003814:	e614      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 8003816:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 800381a:	d0ce      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 800381c:	d81c      	bhi.n	8003858 <RI_SetRegisterMotor1+0x580>
 800381e:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8003822:	d0ca      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 8003824:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8003828:	bf14      	ite	ne
 800382a:	2005      	movne	r0, #5
 800382c:	2004      	moveq	r0, #4
 800382e:	e607      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 8003830:	f641 2390 	movw	r3, #6800	@ 0x1a90
 8003834:	4298      	cmp	r0, r3
 8003836:	d0c0      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 8003838:	f641 3358 	movw	r3, #7000	@ 0x1b58
 800383c:	4298      	cmp	r0, r3
 800383e:	bf14      	ite	ne
 8003840:	2005      	movne	r0, #5
 8003842:	2004      	moveq	r0, #4
 8003844:	e5fc      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 8003846:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 800384a:	d0b6      	beq.n	80037ba <RI_SetRegisterMotor1+0x4e2>
 800384c:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8003850:	bf14      	ite	ne
 8003852:	2005      	movne	r0, #5
 8003854:	2004      	moveq	r0, #4
 8003856:	e5f3      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 8003858:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 800385c:	bf14      	ite	ne
 800385e:	2005      	movne	r0, #5
 8003860:	2004      	moveq	r0, #4
 8003862:	e5ed      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 8003864:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8003868:	bf14      	ite	ne
 800386a:	2005      	movne	r0, #5
 800386c:	2004      	moveq	r0, #4
 800386e:	e5e7      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 8003870:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8003874:	bf14      	ite	ne
 8003876:	2005      	movne	r0, #5
 8003878:	2004      	moveq	r0, #4
 800387a:	e5e1      	b.n	8003440 <RI_SetRegisterMotor1+0x168>
 800387c:	2000009c 	.word	0x2000009c
 8003880:	2000030c 	.word	0x2000030c
 8003884:	20000000 	.word	0x20000000
 8003888:	20000068 	.word	0x20000068
 800388c:	200002e0 	.word	0x200002e0
 8003890:	20000338 	.word	0x20000338

08003894 <RI_GetRegisterGlobal>:
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 8003894:	b510      	push	{r4, lr}
    switch (typeID)
 8003896:	f1a1 0c08 	sub.w	ip, r1, #8
uint8_t RI_GetRegisterGlobal(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace){
 800389a:	f9bd e008 	ldrsh.w	lr, [sp, #8]
    switch (typeID)
 800389e:	f1bc 0f20 	cmp.w	ip, #32
 80038a2:	d812      	bhi.n	80038ca <RI_GetRegisterGlobal+0x36>
 80038a4:	e8df f00c 	tbb	[pc, ip]
 80038a8:	1111111b 	.word	0x1111111b
 80038ac:	11111111 	.word	0x11111111
 80038b0:	11111127 	.word	0x11111127
 80038b4:	11111111 	.word	0x11111111
 80038b8:	11111122 	.word	0x11111122
 80038bc:	11111111 	.word	0x11111111
 80038c0:	11111135 	.word	0x11111135
 80038c4:	11111111 	.word	0x11111111
 80038c8:	13          	.byte	0x13
 80038c9:	00          	.byte	0x00
 80038ca:	2007      	movs	r0, #7
}
 80038cc:	bd10      	pop	{r4, pc}
        switch (regID)
 80038ce:	2828      	cmp	r0, #40	@ 0x28
 80038d0:	d029      	beq.n	8003926 <RI_GetRegisterGlobal+0x92>
        *size = (*rawSize) + 2U;
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	3202      	adds	r2, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 80038d6:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 80038d8:	b292      	uxth	r2, r2
 80038da:	801a      	strh	r2, [r3, #0]
}
 80038dc:	bd10      	pop	{r4, pc}
        if (freeSpace > 0)
 80038de:	f1be 0f00 	cmp.w	lr, #0
 80038e2:	dd1e      	ble.n	8003922 <RI_GetRegisterGlobal+0x8e>
 80038e4:	2201      	movs	r2, #1
            *size= 0 ; /* */
 80038e6:	801a      	strh	r2, [r3, #0]
              retVal = MCP_ERROR_UNKNOWN_REG;
 80038e8:	2005      	movs	r0, #5
}
 80038ea:	bd10      	pop	{r4, pc}
        if (freeSpace >= 4)
 80038ec:	f1be 0f03 	cmp.w	lr, #3
 80038f0:	dd15      	ble.n	800391e <RI_GetRegisterGlobal+0x8a>
 80038f2:	2204      	movs	r2, #4
 80038f4:	e7f7      	b.n	80038e6 <RI_GetRegisterGlobal+0x52>
        if (freeSpace >= 2)
 80038f6:	f1be 0f01 	cmp.w	lr, #1
 80038fa:	dd10      	ble.n	800391e <RI_GetRegisterGlobal+0x8a>
          switch (regID)
 80038fc:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 8003900:	d05a      	beq.n	80039b8 <RI_GetRegisterGlobal+0x124>
    uint8_t retVal = MCP_CMD_OK;
 8003902:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003906:	bf14      	ite	ne
 8003908:	2005      	movne	r0, #5
 800390a:	2000      	moveq	r0, #0
          *size = 2;
 800390c:	2202      	movs	r2, #2
 800390e:	801a      	strh	r2, [r3, #0]
}
 8003910:	bd10      	pop	{r4, pc}
        switch (regID)
 8003912:	2820      	cmp	r0, #32
 8003914:	d02c      	beq.n	8003970 <RI_GetRegisterGlobal+0xdc>
 8003916:	2860      	cmp	r0, #96	@ 0x60
 8003918:	d00f      	beq.n	800393a <RI_GetRegisterGlobal+0xa6>
 800391a:	2200      	movs	r2, #0
 800391c:	e7e3      	b.n	80038e6 <RI_GetRegisterGlobal+0x52>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800391e:	2008      	movs	r0, #8
}
 8003920:	bd10      	pop	{r4, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003922:	4608      	mov	r0, r1
}
 8003924:	bd10      	pop	{r4, pc}
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003926:	fa1f fe8e 	uxth.w	lr, lr
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800392a:	210a      	movs	r1, #10
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 800392c:	f1be 0f0b 	cmp.w	lr, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003930:	8011      	strh	r1, [r2, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003932:	d835      	bhi.n	80039a0 <RI_GetRegisterGlobal+0x10c>
 8003934:	220c      	movs	r2, #12
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003936:	2008      	movs	r0, #8
 8003938:	e7cf      	b.n	80038da <RI_GetRegisterGlobal+0x46>
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800393a:	4c20      	ldr	r4, [pc, #128]	@ (80039bc <RI_GetRegisterGlobal+0x128>)
 800393c:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003940:	2101      	movs	r1, #1
 8003942:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003944:	b180      	cbz	r0, 8003968 <RI_GetRegisterGlobal+0xd4>
 8003946:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 800394a:	46a4      	mov	ip, r4
 800394c:	e008      	b.n	8003960 <RI_GetRegisterGlobal+0xcc>
    *tempdestString = *tempsrcString;
 800394e:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 8003952:	8819      	ldrh	r1, [r3, #0]
 8003954:	3101      	adds	r1, #1
 8003956:	b289      	uxth	r1, r1
 8003958:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800395a:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 800395e:	b118      	cbz	r0, 8003968 <RI_GetRegisterGlobal+0xd4>
 8003960:	4571      	cmp	r1, lr
 8003962:	d3f4      	bcc.n	800394e <RI_GetRegisterGlobal+0xba>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003964:	2006      	movs	r0, #6
}
 8003966:	bd10      	pop	{r4, pc}
    *tempdestString = (int8_t)0;
 8003968:	2300      	movs	r3, #0
 800396a:	7013      	strb	r3, [r2, #0]
  uint8_t retVal = MCP_CMD_OK;
 800396c:	2000      	movs	r0, #0
}
 800396e:	bd10      	pop	{r4, pc}
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003970:	4c13      	ldr	r4, [pc, #76]	@ (80039c0 <RI_GetRegisterGlobal+0x12c>)
 8003972:	f994 0000 	ldrsb.w	r0, [r4]
  *size= 1U ; /* /0 is the min String size */
 8003976:	2101      	movs	r1, #1
 8003978:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 800397a:	2800      	cmp	r0, #0
 800397c:	d0f4      	beq.n	8003968 <RI_GetRegisterGlobal+0xd4>
 800397e:	fa1f fe8e 	uxth.w	lr, lr
  const char_t *tempsrcString = srcString;
 8003982:	46a4      	mov	ip, r4
 8003984:	e009      	b.n	800399a <RI_GetRegisterGlobal+0x106>
    *tempdestString = *tempsrcString;
 8003986:	f802 0b01 	strb.w	r0, [r2], #1
    *size = *size + 1U;
 800398a:	8819      	ldrh	r1, [r3, #0]
 800398c:	3101      	adds	r1, #1
 800398e:	b289      	uxth	r1, r1
 8003990:	8019      	strh	r1, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003992:	f91c 0f01 	ldrsb.w	r0, [ip, #1]!
 8003996:	2800      	cmp	r0, #0
 8003998:	d0e6      	beq.n	8003968 <RI_GetRegisterGlobal+0xd4>
 800399a:	458e      	cmp	lr, r1
 800399c:	d8f3      	bhi.n	8003986 <RI_GetRegisterGlobal+0xf2>
 800399e:	e7e1      	b.n	8003964 <RI_GetRegisterGlobal+0xd0>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80039a0:	4908      	ldr	r1, [pc, #32]	@ (80039c4 <RI_GetRegisterGlobal+0x130>)
 80039a2:	6848      	ldr	r0, [r1, #4]
 80039a4:	680c      	ldr	r4, [r1, #0]
 80039a6:	8909      	ldrh	r1, [r1, #8]
 80039a8:	f8c2 0006 	str.w	r0, [r2, #6]
 80039ac:	f8c2 4002 	str.w	r4, [r2, #2]
 80039b0:	8151      	strh	r1, [r2, #10]
    uint8_t retVal = MCP_CMD_OK;
 80039b2:	2000      	movs	r0, #0
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 80039b4:	220c      	movs	r2, #12
 80039b6:	e790      	b.n	80038da <RI_GetRegisterGlobal+0x46>
    uint8_t retVal = MCP_CMD_OK;
 80039b8:	2000      	movs	r0, #0
 80039ba:	e7a7      	b.n	800390c <RI_GetRegisterGlobal+0x78>
 80039bc:	0800bf68 	.word	0x0800bf68
 80039c0:	0800bf44 	.word	0x0800bf44
 80039c4:	0800bf38 	.word	0x0800bf38

080039c8 <RI_GetRegisterMotor1>:
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80039c8:	b530      	push	{r4, r5, lr}
 80039ca:	b095      	sub	sp, #84	@ 0x54
 80039cc:	461d      	mov	r5, r3
    switch (typeID)
 80039ce:	f1a1 0308 	sub.w	r3, r1, #8
  uint8_t RI_GetRegisterMotor1(uint16_t regID,uint8_t typeID,uint8_t * data,uint16_t *size,int16_t freeSpace) {
 80039d2:	f9bd c060 	ldrsh.w	ip, [sp, #96]	@ 0x60
 80039d6:	4614      	mov	r4, r2
    switch (typeID)
 80039d8:	2b20      	cmp	r3, #32
 80039da:	d812      	bhi.n	8003a02 <RI_GetRegisterMotor1+0x3a>
 80039dc:	e8df f003 	tbb	[pc, r3]
 80039e0:	11111131 	.word	0x11111131
 80039e4:	11111111 	.word	0x11111111
 80039e8:	1111116a 	.word	0x1111116a
 80039ec:	11111111 	.word	0x11111111
 80039f0:	11111147 	.word	0x11111147
 80039f4:	11111111 	.word	0x11111111
 80039f8:	11111161 	.word	0x11111161
 80039fc:	11111111 	.word	0x11111111
 8003a00:	14          	.byte	0x14
 8003a01:	00          	.byte	0x00
 8003a02:	2007      	movs	r0, #7
  }
 8003a04:	b015      	add	sp, #84	@ 0x54
 8003a06:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003a08:	f5b0 7fd4 	cmp.w	r0, #424	@ 0x1a8
 8003a0c:	f000 81d2 	beq.w	8003db4 <RI_GetRegisterMotor1+0x3ec>
 8003a10:	d87c      	bhi.n	8003b0c <RI_GetRegisterMotor1+0x144>
 8003a12:	28e8      	cmp	r0, #232	@ 0xe8
        rawData++;
 8003a14:	f104 0302 	add.w	r3, r4, #2
        switch (regID)
 8003a18:	f000 81e8 	beq.w	8003dec <RI_GetRegisterMotor1+0x424>
 8003a1c:	f200 8121 	bhi.w	8003c62 <RI_GetRegisterMotor1+0x29a>
 8003a20:	2868      	cmp	r0, #104	@ 0x68
 8003a22:	f000 81d8 	beq.w	8003dd6 <RI_GetRegisterMotor1+0x40e>
 8003a26:	28a8      	cmp	r0, #168	@ 0xa8
 8003a28:	f040 81ac 	bne.w	8003d84 <RI_GetRegisterMotor1+0x3bc>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003a2c:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003a30:	2210      	movs	r2, #16
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003a32:	f1bc 0f11 	cmp.w	ip, #17
            *rawSize = (uint16_t)sizeof(ApplicationConfig_reg_t);
 8003a36:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003a38:	f200 825a 	bhi.w	8003ef0 <RI_GetRegisterMotor1+0x528>
 8003a3c:	2312      	movs	r3, #18
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003a3e:	2008      	movs	r0, #8
 8003a40:	e080      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
        if (freeSpace > 0)
 8003a42:	f1bc 0f00 	cmp.w	ip, #0
 8003a46:	f340 8174 	ble.w	8003d32 <RI_GetRegisterMotor1+0x36a>
          switch (regID)
 8003a4a:	2888      	cmp	r0, #136	@ 0x88
 8003a4c:	f000 8196 	beq.w	8003d7c <RI_GetRegisterMotor1+0x3b4>
 8003a50:	28c8      	cmp	r0, #200	@ 0xc8
 8003a52:	f000 818f 	beq.w	8003d74 <RI_GetRegisterMotor1+0x3ac>
 8003a56:	2848      	cmp	r0, #72	@ 0x48
 8003a58:	f040 80cd 	bne.w	8003bf6 <RI_GetRegisterMotor1+0x22e>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003a5c:	48b6      	ldr	r0, [pc, #728]	@ (8003d38 <RI_GetRegisterMotor1+0x370>)
 8003a5e:	f7fe f95d 	bl	8001d1c <MCI_GetSTMState>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003a62:	7020      	strb	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a64:	2000      	movs	r0, #0
          *size = 1;
 8003a66:	2301      	movs	r3, #1
 8003a68:	802b      	strh	r3, [r5, #0]
  }
 8003a6a:	b015      	add	sp, #84	@ 0x54
 8003a6c:	bd30      	pop	{r4, r5, pc}
        if (freeSpace >= 4)
 8003a6e:	f1bc 0f03 	cmp.w	ip, #3
 8003a72:	dd48      	ble.n	8003b06 <RI_GetRegisterMotor1+0x13e>
          switch (regID)
 8003a74:	28d8      	cmp	r0, #216	@ 0xd8
 8003a76:	f000 81c8 	beq.w	8003e0a <RI_GetRegisterMotor1+0x442>
 8003a7a:	f200 816b 	bhi.w	8003d54 <RI_GetRegisterMotor1+0x38c>
 8003a7e:	2858      	cmp	r0, #88	@ 0x58
 8003a80:	f000 814f 	beq.w	8003d22 <RI_GetRegisterMotor1+0x35a>
 8003a84:	2898      	cmp	r0, #152	@ 0x98
 8003a86:	f000 81c7 	beq.w	8003e18 <RI_GetRegisterMotor1+0x450>
 8003a8a:	2818      	cmp	r0, #24
 8003a8c:	f040 81c2 	bne.w	8003e14 <RI_GetRegisterMotor1+0x44c>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 8003a90:	48a9      	ldr	r0, [pc, #676]	@ (8003d38 <RI_GetRegisterMotor1+0x370>)
 8003a92:	f7fe f98d 	bl	8001db0 <MCI_GetFaultState>
 8003a96:	6020      	str	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003a98:	2000      	movs	r0, #0
          *size = 4;
 8003a9a:	2304      	movs	r3, #4
 8003a9c:	802b      	strh	r3, [r5, #0]
  }
 8003a9e:	b015      	add	sp, #84	@ 0x54
 8003aa0:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003aa2:	28a0      	cmp	r0, #160	@ 0xa0
 8003aa4:	f000 808f 	beq.w	8003bc6 <RI_GetRegisterMotor1+0x1fe>
 8003aa8:	28e0      	cmp	r0, #224	@ 0xe0
 8003aaa:	d06f      	beq.n	8003b8c <RI_GetRegisterMotor1+0x1c4>
            *size= 0 ; /* */
 8003aac:	2300      	movs	r3, #0
 8003aae:	802b      	strh	r3, [r5, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003ab0:	2005      	movs	r0, #5
            break;
 8003ab2:	e7a7      	b.n	8003a04 <RI_GetRegisterMotor1+0x3c>
        if (freeSpace >= 2)
 8003ab4:	f1bc 0f01 	cmp.w	ip, #1
 8003ab8:	dd25      	ble.n	8003b06 <RI_GetRegisterMotor1+0x13e>
          switch (regID)
 8003aba:	f5b0 6f19 	cmp.w	r0, #2448	@ 0x990
 8003abe:	f000 833e 	beq.w	800413e <RI_GetRegisterMotor1+0x776>
 8003ac2:	d842      	bhi.n	8003b4a <RI_GetRegisterMotor1+0x182>
 8003ac4:	f5b0 6f8a 	cmp.w	r0, #1104	@ 0x450
 8003ac8:	f000 8334 	beq.w	8004134 <RI_GetRegisterMotor1+0x76c>
 8003acc:	f200 80b0 	bhi.w	8003c30 <RI_GetRegisterMotor1+0x268>
 8003ad0:	f5b0 7f04 	cmp.w	r0, #528	@ 0x210
 8003ad4:	f000 8301 	beq.w	80040da <RI_GetRegisterMotor1+0x712>
 8003ad8:	f200 81bc 	bhi.w	8003e54 <RI_GetRegisterMotor1+0x48c>
 8003adc:	f5b0 7f88 	cmp.w	r0, #272	@ 0x110
 8003ae0:	f000 82ab 	beq.w	800403a <RI_GetRegisterMotor1+0x672>
 8003ae4:	f200 8258 	bhi.w	8003f98 <RI_GetRegisterMotor1+0x5d0>
 8003ae8:	2890      	cmp	r0, #144	@ 0x90
 8003aea:	f000 82d0 	beq.w	800408e <RI_GetRegisterMotor1+0x6c6>
 8003aee:	28d0      	cmp	r0, #208	@ 0xd0
 8003af0:	f040 82f1 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDSpeedHandle_M1);
 8003af4:	4891      	ldr	r0, [pc, #580]	@ (8003d3c <RI_GetRegisterMotor1+0x374>)
 8003af6:	f005 fc3d 	bl	8009374 <PID_GetKI>
 8003afa:	8020      	strh	r0, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003afc:	2000      	movs	r0, #0
          *size = 2;
 8003afe:	2302      	movs	r3, #2
 8003b00:	802b      	strh	r3, [r5, #0]
  }
 8003b02:	b015      	add	sp, #84	@ 0x54
 8003b04:	bd30      	pop	{r4, r5, pc}
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003b06:	2008      	movs	r0, #8
  }
 8003b08:	b015      	add	sp, #84	@ 0x54
 8003b0a:	bd30      	pop	{r4, r5, pc}
        switch (regID)
 8003b0c:	f5b0 7f0a 	cmp.w	r0, #552	@ 0x228
 8003b10:	f000 80bf 	beq.w	8003c92 <RI_GetRegisterMotor1+0x2ca>
 8003b14:	f5b0 7f5a 	cmp.w	r0, #872	@ 0x368
 8003b18:	f000 8139 	beq.w	8003d8e <RI_GetRegisterMotor1+0x3c6>
 8003b1c:	f5b0 7ff4 	cmp.w	r0, #488	@ 0x1e8
 8003b20:	f040 8130 	bne.w	8003d84 <RI_GetRegisterMotor1+0x3bc>
            *rawSize = 4;
 8003b24:	2304      	movs	r3, #4
 8003b26:	8023      	strh	r3, [r4, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8003b28:	4883      	ldr	r0, [pc, #524]	@ (8003d38 <RI_GetRegisterMotor1+0x370>)
 8003b2a:	f7fe f971 	bl	8001e10 <MCI_GetLastRampFinalTorque>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	8063      	strh	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003b32:	4881      	ldr	r0, [pc, #516]	@ (8003d38 <RI_GetRegisterMotor1+0x370>)
 8003b34:	f7fe f970 	bl	8001e18 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8003b38:	8823      	ldrh	r3, [r4, #0]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003b3a:	4602      	mov	r2, r0
        *size = (*rawSize) + 2U;
 8003b3c:	3302      	adds	r3, #2
    uint8_t retVal = MCP_CMD_OK;
 8003b3e:	2000      	movs	r0, #0
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8003b40:	80a2      	strh	r2, [r4, #4]
        *size = (*rawSize) + 2U;
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	802b      	strh	r3, [r5, #0]
  }
 8003b46:	b015      	add	sp, #84	@ 0x54
 8003b48:	bd30      	pop	{r4, r5, pc}
          switch (regID)
 8003b4a:	f5b0 6f69 	cmp.w	r0, #3728	@ 0xe90
 8003b4e:	d0d5      	beq.n	8003afc <RI_GetRegisterMotor1+0x134>
 8003b50:	d953      	bls.n	8003bfa <RI_GetRegisterMotor1+0x232>
 8003b52:	f241 5390 	movw	r3, #5520	@ 0x1590
 8003b56:	4298      	cmp	r0, r3
 8003b58:	f000 82c4 	beq.w	80040e4 <RI_GetRegisterMotor1+0x71c>
 8003b5c:	f200 8164 	bhi.w	8003e28 <RI_GetRegisterMotor1+0x460>
 8003b60:	f241 43d0 	movw	r3, #5328	@ 0x14d0
 8003b64:	4298      	cmp	r0, r3
 8003b66:	f000 8288 	beq.w	800407a <RI_GetRegisterMotor1+0x6b2>
 8003b6a:	f200 81f9 	bhi.w	8003f60 <RI_GetRegisterMotor1+0x598>
 8003b6e:	f241 4350 	movw	r3, #5200	@ 0x1450
 8003b72:	4298      	cmp	r0, r3
 8003b74:	f000 82bb 	beq.w	80040ee <RI_GetRegisterMotor1+0x726>
 8003b78:	f241 4390 	movw	r3, #5264	@ 0x1490
 8003b7c:	4298      	cmp	r0, r3
 8003b7e:	f040 82aa 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(&PIDSpeedHandle_M1);
 8003b82:	486e      	ldr	r0, [pc, #440]	@ (8003d3c <RI_GetRegisterMotor1+0x374>)
 8003b84:	f005 fc06 	bl	8009394 <PID_GetKIDivisorPOW2>
 8003b88:	8020      	strh	r0, [r4, #0]
              break;
 8003b8a:	e7b7      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003b8c:	4b6c      	ldr	r3, [pc, #432]	@ (8003d40 <RI_GetRegisterMotor1+0x378>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
  *size= 1U ; /* /0 is the min String size */
 8003b90:	2301      	movs	r3, #1
 8003b92:	802b      	strh	r3, [r5, #0]
            retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003b94:	f102 0124 	add.w	r1, r2, #36	@ 0x24
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003b98:	f992 2024 	ldrsb.w	r2, [r2, #36]	@ 0x24
 8003b9c:	b17a      	cbz	r2, 8003bbe <RI_GetRegisterMotor1+0x1f6>
 8003b9e:	fa1f fc8c 	uxth.w	ip, ip
 8003ba2:	e008      	b.n	8003bb6 <RI_GetRegisterMotor1+0x1ee>
    *tempdestString = *tempsrcString;
 8003ba4:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003ba8:	882b      	ldrh	r3, [r5, #0]
 8003baa:	3301      	adds	r3, #1
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bb0:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003bb4:	b11a      	cbz	r2, 8003bbe <RI_GetRegisterMotor1+0x1f6>
 8003bb6:	459c      	cmp	ip, r3
 8003bb8:	d8f4      	bhi.n	8003ba4 <RI_GetRegisterMotor1+0x1dc>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003bba:	2006      	movs	r0, #6
 8003bbc:	e722      	b.n	8003a04 <RI_GetRegisterMotor1+0x3c>
    *tempdestString = (int8_t)0;
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	7023      	strb	r3, [r4, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003bc2:	2000      	movs	r0, #0
 8003bc4:	e71e      	b.n	8003a04 <RI_GetRegisterMotor1+0x3c>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8003d44 <RI_GetRegisterMotor1+0x37c>)
  *size= 1U ; /* /0 is the min String size */
 8003bc8:	2301      	movs	r3, #1
            retVal = RI_MovString (PWR_BOARD_NAME[motorID], charData, size, freeSpace);
 8003bca:	6811      	ldr	r1, [r2, #0]
  *size= 1U ; /* /0 is the min String size */
 8003bcc:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003bce:	f991 2000 	ldrsb.w	r2, [r1]
 8003bd2:	2a00      	cmp	r2, #0
 8003bd4:	d0f3      	beq.n	8003bbe <RI_GetRegisterMotor1+0x1f6>
 8003bd6:	fa1f fc8c 	uxth.w	ip, ip
 8003bda:	e009      	b.n	8003bf0 <RI_GetRegisterMotor1+0x228>
    *tempdestString = *tempsrcString;
 8003bdc:	f804 2b01 	strb.w	r2, [r4], #1
    *size = *size + 1U;
 8003be0:	882b      	ldrh	r3, [r5, #0]
 8003be2:	3301      	adds	r3, #1
 8003be4:	b29b      	uxth	r3, r3
 8003be6:	802b      	strh	r3, [r5, #0]
  while ((*tempsrcString != (char_t)0) && (*size < (uint16_t)maxSize))
 8003be8:	f911 2f01 	ldrsb.w	r2, [r1, #1]!
 8003bec:	2a00      	cmp	r2, #0
 8003bee:	d0e6      	beq.n	8003bbe <RI_GetRegisterMotor1+0x1f6>
 8003bf0:	459c      	cmp	ip, r3
 8003bf2:	d8f3      	bhi.n	8003bdc <RI_GetRegisterMotor1+0x214>
 8003bf4:	e7e1      	b.n	8003bba <RI_GetRegisterMotor1+0x1f2>
          switch (regID)
 8003bf6:	2005      	movs	r0, #5
 8003bf8:	e735      	b.n	8003a66 <RI_GetRegisterMotor1+0x9e>
          switch (regID)
 8003bfa:	f5b0 6f39 	cmp.w	r0, #2960	@ 0xb90
 8003bfe:	f000 827b 	beq.w	80040f8 <RI_GetRegisterMotor1+0x730>
 8003c02:	f200 813a 	bhi.w	8003e7a <RI_GetRegisterMotor1+0x4b2>
 8003c06:	f5b0 6f25 	cmp.w	r0, #2640	@ 0xa50
 8003c0a:	f000 824c 	beq.w	80040a6 <RI_GetRegisterMotor1+0x6de>
 8003c0e:	f200 81b6 	bhi.w	8003f7e <RI_GetRegisterMotor1+0x5b6>
 8003c12:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
 8003c16:	f000 8283 	beq.w	8004120 <RI_GetRegisterMotor1+0x758>
 8003c1a:	f5b0 6f21 	cmp.w	r0, #2576	@ 0xa10
 8003c1e:	f040 825a 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003c22:	4845      	ldr	r0, [pc, #276]	@ (8003d38 <RI_GetRegisterMotor1+0x370>)
 8003c24:	f7fe f94c 	bl	8001ec0 <MCI_GetVqd>
 8003c28:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003c2c:	8023      	strh	r3, [r4, #0]
              break;
 8003c2e:	e765      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003c30:	f5b0 6f05 	cmp.w	r0, #2128	@ 0x850
 8003c34:	f000 828a 	beq.w	800414c <RI_GetRegisterMotor1+0x784>
 8003c38:	f200 8134 	bhi.w	8003ea4 <RI_GetRegisterMotor1+0x4dc>
 8003c3c:	f5b0 6fba 	cmp.w	r0, #1488	@ 0x5d0
 8003c40:	f000 823b 	beq.w	80040ba <RI_GetRegisterMotor1+0x6f2>
 8003c44:	f200 81b5 	bhi.w	8003fb2 <RI_GetRegisterMotor1+0x5ea>
 8003c48:	f5b0 6f92 	cmp.w	r0, #1168	@ 0x490
 8003c4c:	f000 826d 	beq.w	800412a <RI_GetRegisterMotor1+0x762>
 8003c50:	f5b0 6fb2 	cmp.w	r0, #1424	@ 0x590
 8003c54:	f040 823f 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor);
 8003c58:	483b      	ldr	r0, [pc, #236]	@ (8003d48 <RI_GetRegisterMotor1+0x380>)
 8003c5a:	f005 f98f 	bl	8008f7c <VBS_GetAvBusVoltage_V>
 8003c5e:	8020      	strh	r0, [r4, #0]
              break;
 8003c60:	e74c      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
        switch (regID)
 8003c62:	f5b0 7f94 	cmp.w	r0, #296	@ 0x128
 8003c66:	f040 808d 	bne.w	8003d84 <RI_GetRegisterMotor1+0x3bc>
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003c6a:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = 12;
 8003c6e:	220c      	movs	r2, #12
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003c70:	f1bc 0f0d 	cmp.w	ip, #13
            *rawSize = 12;
 8003c74:	8022      	strh	r2, [r4, #0]
            if ((*rawSize) +2U > (uint16_t)freeSpace)
 8003c76:	f240 812b 	bls.w	8003ed0 <RI_GetRegisterMotor1+0x508>
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003c7a:	4a34      	ldr	r2, [pc, #208]	@ (8003d4c <RI_GetRegisterMotor1+0x384>)
 8003c7c:	6850      	ldr	r0, [r2, #4]
 8003c7e:	6814      	ldr	r4, [r2, #0]
 8003c80:	6891      	ldr	r1, [r2, #8]
 8003c82:	68d2      	ldr	r2, [r2, #12]
 8003c84:	60da      	str	r2, [r3, #12]
 8003c86:	6058      	str	r0, [r3, #4]
 8003c88:	601c      	str	r4, [r3, #0]
 8003c8a:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003c8c:	2000      	movs	r0, #0
              memcpy(rawData, &scaleParams_M1, sizeof(ScaleParams_t) );
 8003c8e:	230e      	movs	r3, #14
 8003c90:	e758      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003c92:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003c96:	2328      	movs	r3, #40	@ 0x28
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003c98:	f1bc 0f29 	cmp.w	ip, #41	@ 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003c9c:	8023      	strh	r3, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003c9e:	f240 8114 	bls.w	8003eca <RI_GetRegisterMotor1+0x502>
    retValue = false;
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d50 <RI_GetRegisterMotor1+0x388>)
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003ca4:	f9b3 200e 	ldrsh.w	r2, [r3, #14]
 8003ca8:	f9b3 0010 	ldrsh.w	r0, [r3, #16]
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003cac:	8999      	ldrh	r1, [r3, #12]
                *durationms  = revUpPhase.hDurationms;
 8003cae:	8121      	strh	r1, [r4, #8]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003cb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003cb4:	80e0      	strh	r0, [r4, #6]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003cb6:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003cb8:	f9b3 001c 	ldrsh.w	r0, [r3, #28]
 8003cbc:	f8c4 2002 	str.w	r2, [r4, #2]
 8003cc0:	f9b3 201a 	ldrsh.w	r2, [r3, #26]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003cc4:	8b19      	ldrh	r1, [r3, #24]
                *durationms  = revUpPhase.hDurationms;
 8003cc6:	8221      	strh	r1, [r4, #16]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003cc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003ccc:	81e0      	strh	r0, [r4, #14]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003cce:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003cd0:	f9b3 0028 	ldrsh.w	r0, [r3, #40]	@ 0x28
 8003cd4:	f8c4 200a 	str.w	r2, [r4, #10]
 8003cd8:	f9b3 2026 	ldrsh.w	r2, [r3, #38]	@ 0x26
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003cdc:	8c99      	ldrh	r1, [r3, #36]	@ 0x24
                *durationms  = revUpPhase.hDurationms;
 8003cde:	8321      	strh	r1, [r4, #24]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003ce0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003ce4:	82e0      	strh	r0, [r4, #22]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003ce6:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003ce8:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	@ 0x34
 8003cec:	f8c4 2012 	str.w	r2, [r4, #18]
 8003cf0:	f9b3 2032 	ldrsh.w	r2, [r3, #50]	@ 0x32
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003cf4:	8e19      	ldrh	r1, [r3, #48]	@ 0x30
                *durationms  = revUpPhase.hDurationms;
 8003cf6:	8421      	strh	r1, [r4, #32]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003cf8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003cfc:	83e0      	strh	r0, [r4, #30]
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003cfe:	0052      	lsls	r2, r2, #1
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
 8003d00:	f9b3 0040 	ldrsh.w	r0, [r3, #64]	@ 0x40
 8003d04:	f8c4 201a 	str.w	r2, [r4, #26]
 8003d08:	f9b3 203e 	ldrsh.w	r2, [r3, #62]	@ 0x3e
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8003d0c:	8f99      	ldrh	r1, [r3, #60]	@ 0x3c
                *durationms  = revUpPhase.hDurationms;
 8003d0e:	8521      	strh	r1, [r4, #40]	@ 0x28
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003d14:	0052      	lsls	r2, r2, #1
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003d16:	84e0      	strh	r0, [r4, #38]	@ 0x26
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 8003d18:	f8c4 2022 	str.w	r2, [r4, #34]	@ 0x22
                *durationms  = revUpPhase.hDurationms;
 8003d1c:	232a      	movs	r3, #42	@ 0x2a
    uint8_t retVal = MCP_CMD_OK;
 8003d1e:	2000      	movs	r0, #0
 8003d20:	e710      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003d22:	4805      	ldr	r0, [pc, #20]	@ (8003d38 <RI_GetRegisterMotor1+0x370>)
 8003d24:	f7fe f880 	bl	8001e28 <MCI_GetAvrgMecSpeedUnit>
 8003d28:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003d2c:	0040      	lsls	r0, r0, #1
 8003d2e:	6020      	str	r0, [r4, #0]
              break;
 8003d30:	e6b2      	b.n	8003a98 <RI_GetRegisterMotor1+0xd0>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003d32:	4608      	mov	r0, r1
 8003d34:	e666      	b.n	8003a04 <RI_GetRegisterMotor1+0x3c>
 8003d36:	bf00      	nop
 8003d38:	20000000 	.word	0x20000000
 8003d3c:	20000338 	.word	0x20000338
 8003d40:	20000408 	.word	0x20000408
 8003d44:	20000410 	.word	0x20000410
 8003d48:	20000374 	.word	0x20000374
 8003d4c:	20000414 	.word	0x20000414
 8003d50:	20000234 	.word	0x20000234
          switch (regID)
 8003d54:	f5b0 7f8c 	cmp.w	r0, #280	@ 0x118
 8003d58:	d052      	beq.n	8003e00 <RI_GetRegisterMotor1+0x438>
 8003d5a:	f641 3358 	movw	r3, #7000	@ 0x1b58
 8003d5e:	4298      	cmp	r0, r3
 8003d60:	d158      	bne.n	8003e14 <RI_GetRegisterMotor1+0x44c>
              ReadVal.Float_Val = PQD_GetAvrgElMotorPowerW(pMPM[M1]);
 8003d62:	4bb8      	ldr	r3, [pc, #736]	@ (8004044 <RI_GetRegisterMotor1+0x67c>)
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	f005 fb99 	bl	800949c <PQD_GetAvrgElMotorPowerW>
 8003d6a:	ed8d 0a01 	vstr	s0, [sp, #4]
              *regdataU32 = ReadVal.U32_Val; //cstat !UNION-type-punning
 8003d6e:	9b01      	ldr	r3, [sp, #4]
 8003d70:	6023      	str	r3, [r4, #0]
              break;
 8003d72:	e691      	b.n	8003a98 <RI_GetRegisterMotor1+0xd0>
  return ((uint8_t)pHandle->bPhaseNbr);
 8003d74:	4bb4      	ldr	r3, [pc, #720]	@ (8004048 <RI_GetRegisterMotor1+0x680>)
 8003d76:	f893 0048 	ldrb.w	r0, [r3, #72]	@ 0x48
              break;
 8003d7a:	e672      	b.n	8003a62 <RI_GetRegisterMotor1+0x9a>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 8003d7c:	48b3      	ldr	r0, [pc, #716]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003d7e:	f7fe f81d 	bl	8001dbc <MCI_GetControlMode>
              break;
 8003d82:	e66e      	b.n	8003a62 <RI_GetRegisterMotor1+0x9a>
        *size = (*rawSize) + 2U;
 8003d84:	8823      	ldrh	r3, [r4, #0]
 8003d86:	3302      	adds	r3, #2
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003d88:	2005      	movs	r0, #5
        *size = (*rawSize) + 2U;
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	e6da      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
            *rawSize = 4;
 8003d8e:	2304      	movs	r3, #4
 8003d90:	8023      	strh	r3, [r4, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003d92:	48ae      	ldr	r0, [pc, #696]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003d94:	f7fe f88a 	bl	8001eac <MCI_GetIqdref>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	8063      	strh	r3, [r4, #2]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003d9c:	48ab      	ldr	r0, [pc, #684]	@ (800404c <RI_GetRegisterMotor1+0x684>)
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8003d9e:	9312      	str	r3, [sp, #72]	@ 0x48
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003da0:	f7fe f884 	bl	8001eac <MCI_GetIqdref>
        *size = (*rawSize) + 2U;
 8003da4:	8823      	ldrh	r3, [r4, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003da6:	f3c0 400f 	ubfx	r0, r0, #16, #16
        *size = (*rawSize) + 2U;
 8003daa:	3302      	adds	r3, #2
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8003dac:	80a0      	strh	r0, [r4, #4]
        *size = (*rawSize) + 2U;
 8003dae:	b29b      	uxth	r3, r3
    uint8_t retVal = MCP_CMD_OK;
 8003db0:	2000      	movs	r0, #0
            break;
 8003db2:	e6c7      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003db4:	48a5      	ldr	r0, [pc, #660]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003db6:	f7fe f827 	bl	8001e08 <MCI_GetLastRampFinalSpeed>
 8003dba:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003dbe:	0043      	lsls	r3, r0, #1
 8003dc0:	f8c4 3002 	str.w	r3, [r4, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003dc4:	48a1      	ldr	r0, [pc, #644]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003dc6:	f7fe f827 	bl	8001e18 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003dca:	2306      	movs	r3, #6
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003dcc:	80e0      	strh	r0, [r4, #6]
            *rawSize = 6;
 8003dce:	8023      	strh	r3, [r4, #0]
    uint8_t retVal = MCP_CMD_OK;
 8003dd0:	2000      	movs	r0, #0
            break;
 8003dd2:	2308      	movs	r3, #8
 8003dd4:	e6b6      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003dd6:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003dda:	223c      	movs	r2, #60	@ 0x3c
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003ddc:	f1bc 0f3d 	cmp.w	ip, #61	@ 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003de0:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003de2:	f200 8092 	bhi.w	8003f0a <RI_GetRegisterMotor1+0x542>
 8003de6:	233e      	movs	r3, #62	@ 0x3e
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003de8:	2008      	movs	r0, #8
 8003dea:	e6ab      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003dec:	fa1f fc8c 	uxth.w	ip, ip
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003df0:	220e      	movs	r2, #14
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003df2:	f1bc 0f0f 	cmp.w	ip, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003df6:	8022      	strh	r2, [r4, #0]
            if (((*rawSize) + 2U) > (uint16_t)freeSpace)
 8003df8:	d86d      	bhi.n	8003ed6 <RI_GetRegisterMotor1+0x50e>
 8003dfa:	2310      	movs	r3, #16
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003dfc:	2008      	movs	r0, #8
 8003dfe:	e6a1      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
static inline int32_t STO_PLL_GetObservedBemfLevel(STO_PLL_Handle_t *pHandle)
{
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
 8003e00:	4b93      	ldr	r3, [pc, #588]	@ (8004050 <RI_GetRegisterMotor1+0x688>)
 8003e02:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
              *regdata32 = STO_PLL_GetObservedBemfLevel(&STO_PLL_M1);
 8003e06:	6023      	str	r3, [r4, #0]
              break;
 8003e08:	e646      	b.n	8003a98 <RI_GetRegisterMotor1+0xd0>
  return (pHandle->Est_Bemf_Level);
 8003e0a:	4b91      	ldr	r3, [pc, #580]	@ (8004050 <RI_GetRegisterMotor1+0x688>)
 8003e0c:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(&STO_PLL_M1);
 8003e10:	6023      	str	r3, [r4, #0]
              break;
 8003e12:	e641      	b.n	8003a98 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 8003e14:	2005      	movs	r0, #5
 8003e16:	e640      	b.n	8003a9a <RI_GetRegisterMotor1+0xd2>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003e18:	488c      	ldr	r0, [pc, #560]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003e1a:	f7fe f817 	bl	8001e4c <MCI_GetMecSpeedRefUnit>
 8003e1e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003e22:	0040      	lsls	r0, r0, #1
 8003e24:	6020      	str	r0, [r4, #0]
              break;
 8003e26:	e637      	b.n	8003a98 <RI_GetRegisterMotor1+0xd0>
          switch (regID)
 8003e28:	f241 6350 	movw	r3, #5712	@ 0x1650
 8003e2c:	4298      	cmp	r0, r3
 8003e2e:	f000 80ff 	beq.w	8004030 <RI_GetRegisterMotor1+0x668>
 8003e32:	f200 8086 	bhi.w	8003f42 <RI_GetRegisterMotor1+0x57a>
 8003e36:	f241 53d0 	movw	r3, #5584	@ 0x15d0
 8003e3a:	4298      	cmp	r0, r3
 8003e3c:	f000 8118 	beq.w	8004070 <RI_GetRegisterMotor1+0x6a8>
 8003e40:	f241 6310 	movw	r3, #5648	@ 0x1610
 8003e44:	4298      	cmp	r0, r3
 8003e46:	f040 8146 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIqHandle_M1);
 8003e4a:	4882      	ldr	r0, [pc, #520]	@ (8004054 <RI_GetRegisterMotor1+0x68c>)
 8003e4c:	f005 faa2 	bl	8009394 <PID_GetKIDivisorPOW2>
 8003e50:	8020      	strh	r0, [r4, #0]
              break;
 8003e52:	e653      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003e54:	f5b0 7f44 	cmp.w	r0, #784	@ 0x310
 8003e58:	f000 8158 	beq.w	800410c <RI_GetRegisterMotor1+0x744>
 8003e5c:	f200 80b8 	bhi.w	8003fd0 <RI_GetRegisterMotor1+0x608>
 8003e60:	f5b0 7f24 	cmp.w	r0, #656	@ 0x290
 8003e64:	f000 814d 	beq.w	8004102 <RI_GetRegisterMotor1+0x73a>
 8003e68:	f5b0 7f34 	cmp.w	r0, #720	@ 0x2d0
 8003e6c:	f040 8133 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDIdHandle_M1);
 8003e70:	4879      	ldr	r0, [pc, #484]	@ (8004058 <RI_GetRegisterMotor1+0x690>)
 8003e72:	f005 fa7f 	bl	8009374 <PID_GetKI>
 8003e76:	8020      	strh	r0, [r4, #0]
              break;
 8003e78:	e640      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003e7a:	f5b0 6f45 	cmp.w	r0, #3152	@ 0xc50
 8003e7e:	f000 816f 	beq.w	8004160 <RI_GetRegisterMotor1+0x798>
 8003e82:	f200 80b5 	bhi.w	8003ff0 <RI_GetRegisterMotor1+0x628>
 8003e86:	f5b0 6f3d 	cmp.w	r0, #3024	@ 0xbd0
 8003e8a:	f000 8164 	beq.w	8004156 <RI_GetRegisterMotor1+0x78e>
 8003e8e:	f5b0 6f41 	cmp.w	r0, #3088	@ 0xc10
 8003e92:	f040 8120 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).beta;
 8003e96:	486e      	ldr	r0, [pc, #440]	@ (8004050 <RI_GetRegisterMotor1+0x688>)
 8003e98:	f006 ffac 	bl	800adf4 <STO_PLL_GetEstimatedCurrent>
 8003e9c:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003ea0:	8023      	strh	r3, [r4, #0]
              break;
 8003ea2:	e62b      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003ea4:	f5b0 6f11 	cmp.w	r0, #2320	@ 0x910
 8003ea8:	f000 80b4 	beq.w	8004014 <RI_GetRegisterMotor1+0x64c>
 8003eac:	f200 80aa 	bhi.w	8004004 <RI_GetRegisterMotor1+0x63c>
 8003eb0:	f5b0 6f09 	cmp.w	r0, #2192	@ 0x890
 8003eb4:	f000 80b5 	beq.w	8004022 <RI_GetRegisterMotor1+0x65a>
 8003eb8:	f5b0 6f0d 	cmp.w	r0, #2256	@ 0x8d0
 8003ebc:	f040 810b 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003ec0:	4862      	ldr	r0, [pc, #392]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003ec2:	f7fd ffe9 	bl	8001e98 <MCI_GetIqd>
 8003ec6:	8020      	strh	r0, [r4, #0]
              break;
 8003ec8:	e618      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
 8003eca:	232a      	movs	r3, #42	@ 0x2a
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ecc:	2008      	movs	r0, #8
 8003ece:	e639      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
 8003ed0:	230e      	movs	r3, #14
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8003ed2:	2008      	movs	r0, #8
 8003ed4:	e636      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8003ed6:	4a61      	ldr	r2, [pc, #388]	@ (800405c <RI_GetRegisterMotor1+0x694>)
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003ed8:	6812      	ldr	r2, [r2, #0]
 8003eda:	6810      	ldr	r0, [r2, #0]
 8003edc:	6851      	ldr	r1, [r2, #4]
 8003ede:	6894      	ldr	r4, [r2, #8]
 8003ee0:	609c      	str	r4, [r3, #8]
 8003ee2:	6018      	str	r0, [r3, #0]
 8003ee4:	6059      	str	r1, [r3, #4]
 8003ee6:	8992      	ldrh	r2, [r2, #12]
 8003ee8:	819a      	strh	r2, [r3, #12]
    uint8_t retVal = MCP_CMD_OK;
 8003eea:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 8003eec:	2310      	movs	r3, #16
 8003eee:	e629      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
              ApplicationConfig_reg_t const *pApplicationConfig_reg = ApplicationConfig_reg[motorID];
 8003ef0:	4a5b      	ldr	r2, [pc, #364]	@ (8004060 <RI_GetRegisterMotor1+0x698>)
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003ef2:	6812      	ldr	r2, [r2, #0]
 8003ef4:	6850      	ldr	r0, [r2, #4]
 8003ef6:	6814      	ldr	r4, [r2, #0]
 8003ef8:	6891      	ldr	r1, [r2, #8]
 8003efa:	68d2      	ldr	r2, [r2, #12]
 8003efc:	60da      	str	r2, [r3, #12]
 8003efe:	6058      	str	r0, [r3, #4]
 8003f00:	601c      	str	r4, [r3, #0]
 8003f02:	6099      	str	r1, [r3, #8]
    uint8_t retVal = MCP_CMD_OK;
 8003f04:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pApplicationConfig_reg, sizeof(ApplicationConfig_reg_t));
 8003f06:	2312      	movs	r3, #18
 8003f08:	e61c      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 8003f0a:	4a56      	ldr	r2, [pc, #344]	@ (8004064 <RI_GetRegisterMotor1+0x69c>)
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003f0c:	6812      	ldr	r2, [r2, #0]
 8003f0e:	f102 0e30 	add.w	lr, r2, #48	@ 0x30
 8003f12:	6814      	ldr	r4, [r2, #0]
 8003f14:	6850      	ldr	r0, [r2, #4]
 8003f16:	6891      	ldr	r1, [r2, #8]
 8003f18:	f8d2 c00c 	ldr.w	ip, [r2, #12]
 8003f1c:	f8c3 c00c 	str.w	ip, [r3, #12]
 8003f20:	3210      	adds	r2, #16
 8003f22:	4572      	cmp	r2, lr
 8003f24:	601c      	str	r4, [r3, #0]
 8003f26:	6058      	str	r0, [r3, #4]
 8003f28:	6099      	str	r1, [r3, #8]
 8003f2a:	f103 0310 	add.w	r3, r3, #16
 8003f2e:	d1f0      	bne.n	8003f12 <RI_GetRegisterMotor1+0x54a>
 8003f30:	6810      	ldr	r0, [r2, #0]
 8003f32:	6851      	ldr	r1, [r2, #4]
 8003f34:	6892      	ldr	r2, [r2, #8]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	6018      	str	r0, [r3, #0]
 8003f3a:	6059      	str	r1, [r3, #4]
    uint8_t retVal = MCP_CMD_OK;
 8003f3c:	2000      	movs	r0, #0
              (void)memcpy(rawData, (const uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003f3e:	233e      	movs	r3, #62	@ 0x3e
 8003f40:	e600      	b.n	8003b44 <RI_GetRegisterMotor1+0x17c>
          switch (regID)
 8003f42:	f641 03d0 	movw	r3, #6352	@ 0x18d0
 8003f46:	4298      	cmp	r0, r3
 8003f48:	f000 809c 	beq.w	8004084 <RI_GetRegisterMotor1+0x6bc>
 8003f4c:	f641 1310 	movw	r3, #6416	@ 0x1910
 8003f50:	4298      	cmp	r0, r3
 8003f52:	f040 80c0 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKPDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8003f56:	4844      	ldr	r0, [pc, #272]	@ (8004068 <RI_GetRegisterMotor1+0x6a0>)
 8003f58:	f005 fa12 	bl	8009380 <PID_GetKPDivisorPOW2>
 8003f5c:	8020      	strh	r0, [r4, #0]
              break;
 8003f5e:	e5cd      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003f60:	f241 5310 	movw	r3, #5392	@ 0x1510
 8003f64:	4298      	cmp	r0, r3
 8003f66:	f000 80a3 	beq.w	80040b0 <RI_GetRegisterMotor1+0x6e8>
 8003f6a:	f241 5350 	movw	r3, #5456	@ 0x1550
 8003f6e:	4298      	cmp	r0, r3
 8003f70:	f040 80b1 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdataU16 = PID_GetKIDivisorPOW2(&PIDIdHandle_M1);
 8003f74:	4838      	ldr	r0, [pc, #224]	@ (8004058 <RI_GetRegisterMotor1+0x690>)
 8003f76:	f005 fa0d 	bl	8009394 <PID_GetKIDivisorPOW2>
 8003f7a:	8020      	strh	r0, [r4, #0]
              break;
 8003f7c:	e5be      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003f7e:	f5b0 6f29 	cmp.w	r0, #2704	@ 0xa90
 8003f82:	f000 8089 	beq.w	8004098 <RI_GetRegisterMotor1+0x6d0>
 8003f86:	f5b0 6f35 	cmp.w	r0, #2896	@ 0xb50
 8003f8a:	f040 80a4 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
 8003f8e:	4b30      	ldr	r3, [pc, #192]	@ (8004050 <RI_GetRegisterMotor1+0x688>)
 8003f90:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 8003f94:	8023      	strh	r3, [r4, #0]
              break;
 8003f96:	e5b1      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003f98:	f5b0 7fc8 	cmp.w	r0, #400	@ 0x190
 8003f9c:	f000 8092 	beq.w	80040c4 <RI_GetRegisterMotor1+0x6fc>
 8003fa0:	f5b0 7fe8 	cmp.w	r0, #464	@ 0x1d0
 8003fa4:	f040 8097 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = PID_GetKI(&PIDIqHandle_M1);
 8003fa8:	482a      	ldr	r0, [pc, #168]	@ (8004054 <RI_GetRegisterMotor1+0x68c>)
 8003faa:	f005 f9e3 	bl	8009374 <PID_GetKI>
 8003fae:	8020      	strh	r0, [r4, #0]
              break;
 8003fb0:	e5a4      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003fb2:	f5b0 6ffa 	cmp.w	r0, #2000	@ 0x7d0
 8003fb6:	f000 80ae 	beq.w	8004116 <RI_GetRegisterMotor1+0x74e>
 8003fba:	f5b0 6f01 	cmp.w	r0, #2064	@ 0x810
 8003fbe:	f040 808a 	bne.w	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003fc2:	4822      	ldr	r0, [pc, #136]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8003fc4:	f7fd ff54 	bl	8001e70 <MCI_GetIab>
 8003fc8:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8003fcc:	8023      	strh	r3, [r4, #0]
              break;
 8003fce:	e595      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003fd0:	f5b0 7f54 	cmp.w	r0, #848	@ 0x350
 8003fd4:	f000 80c9 	beq.w	800416a <RI_GetRegisterMotor1+0x7a2>
 8003fd8:	f5b0 7f64 	cmp.w	r0, #912	@ 0x390
 8003fdc:	d17b      	bne.n	80040d6 <RI_GetRegisterMotor1+0x70e>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 8003fde:	481c      	ldr	r0, [pc, #112]	@ (8004050 <RI_GetRegisterMotor1+0x688>)
 8003fe0:	aa13      	add	r2, sp, #76	@ 0x4c
 8003fe2:	a912      	add	r1, sp, #72	@ 0x48
 8003fe4:	f006 ff18 	bl	800ae18 <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8003fe8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8003fec:	8023      	strh	r3, [r4, #0]
              break;
 8003fee:	e585      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8003ff0:	f5b0 6f49 	cmp.w	r0, #3216	@ 0xc90
 8003ff4:	d16b      	bne.n	80040ce <RI_GetRegisterMotor1+0x706>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).beta;
 8003ff6:	4816      	ldr	r0, [pc, #88]	@ (8004050 <RI_GetRegisterMotor1+0x688>)
 8003ff8:	f006 fef8 	bl	800adec <STO_PLL_GetEstimatedBemf>
 8003ffc:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004000:	8023      	strh	r3, [r4, #0]
              break;
 8004002:	e57b      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 8004004:	f5b0 6f15 	cmp.w	r0, #2384	@ 0x950
 8004008:	d165      	bne.n	80040d6 <RI_GetRegisterMotor1+0x70e>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 800400a:	4810      	ldr	r0, [pc, #64]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 800400c:	f7fd ff4e 	bl	8001eac <MCI_GetIqdref>
 8004010:	8020      	strh	r0, [r4, #0]
              break;
 8004012:	e573      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8004014:	480d      	ldr	r0, [pc, #52]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8004016:	f7fd ff3f 	bl	8001e98 <MCI_GetIqd>
 800401a:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800401e:	8023      	strh	r3, [r4, #0]
              break;
 8004020:	e56c      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8004022:	480a      	ldr	r0, [pc, #40]	@ (800404c <RI_GetRegisterMotor1+0x684>)
 8004024:	f7fd ff2e 	bl	8001e84 <MCI_GetIalphabeta>
 8004028:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800402c:	8023      	strh	r3, [r4, #0]
              break;
 800402e:	e565      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIqHandle_M1);
 8004030:	4808      	ldr	r0, [pc, #32]	@ (8004054 <RI_GetRegisterMotor1+0x68c>)
 8004032:	f005 f9cf 	bl	80093d4 <PID_GetKDDivisorPOW2>
 8004036:	8020      	strh	r0, [r4, #0]
              break;
 8004038:	e560      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKD(&PIDSpeedHandle_M1);
 800403a:	480c      	ldr	r0, [pc, #48]	@ (800406c <RI_GetRegisterMotor1+0x6a4>)
 800403c:	f005 f9c6 	bl	80093cc <PID_GetKD>
 8004040:	8020      	strh	r0, [r4, #0]
              break;
 8004042:	e55b      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
 8004044:	20000028 	.word	0x20000028
 8004048:	20000234 	.word	0x20000234
 800404c:	20000000 	.word	0x20000000
 8004050:	20000068 	.word	0x20000068
 8004054:	2000030c 	.word	0x2000030c
 8004058:	200002e0 	.word	0x200002e0
 800405c:	2000040c 	.word	0x2000040c
 8004060:	20000404 	.word	0x20000404
 8004064:	20000408 	.word	0x20000408
 8004068:	2000009c 	.word	0x2000009c
 800406c:	20000338 	.word	0x20000338
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIqHandle_M1);
 8004070:	4842      	ldr	r0, [pc, #264]	@ (800417c <RI_GetRegisterMotor1+0x7b4>)
 8004072:	f005 f985 	bl	8009380 <PID_GetKPDivisorPOW2>
 8004076:	8020      	strh	r0, [r4, #0]
              break;
 8004078:	e540      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDSpeedHandle_M1);
 800407a:	4841      	ldr	r0, [pc, #260]	@ (8004180 <RI_GetRegisterMotor1+0x7b8>)
 800407c:	f005 f9aa 	bl	80093d4 <PID_GetKDDivisorPOW2>
 8004080:	8020      	strh	r0, [r4, #0]
              break;
 8004082:	e53b      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKIDivisorPOW2(&(&STO_PLL_M1)->PIRegulator);
 8004084:	483f      	ldr	r0, [pc, #252]	@ (8004184 <RI_GetRegisterMotor1+0x7bc>)
 8004086:	f005 f985 	bl	8009394 <PID_GetKIDivisorPOW2>
 800408a:	8020      	strh	r0, [r4, #0]
              break;
 800408c:	e536      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDSpeedHandle_M1);
 800408e:	483c      	ldr	r0, [pc, #240]	@ (8004180 <RI_GetRegisterMotor1+0x7b8>)
 8004090:	f005 f96c 	bl	800936c <PID_GetKP>
 8004094:	8020      	strh	r0, [r4, #0]
              break;
 8004096:	e531      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 8004098:	483b      	ldr	r0, [pc, #236]	@ (8004188 <RI_GetRegisterMotor1+0x7c0>)
 800409a:	f7fd ff1b 	bl	8001ed4 <MCI_GetValphabeta>
 800409e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 80040a2:	8023      	strh	r3, [r4, #0]
              break;
 80040a4:	e52a      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80040a6:	4838      	ldr	r0, [pc, #224]	@ (8004188 <RI_GetRegisterMotor1+0x7c0>)
 80040a8:	f7fd ff14 	bl	8001ed4 <MCI_GetValphabeta>
 80040ac:	8020      	strh	r0, [r4, #0]
              break;
 80040ae:	e525      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKPDivisorPOW2(&PIDIdHandle_M1);
 80040b0:	4836      	ldr	r0, [pc, #216]	@ (800418c <RI_GetRegisterMotor1+0x7c4>)
 80040b2:	f005 f965 	bl	8009380 <PID_GetKPDivisorPOW2>
 80040b6:	8020      	strh	r0, [r4, #0]
              break;
 80040b8:	e520      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = NTC_GetAvTemp_C(&TempSensor_M1);
 80040ba:	4835      	ldr	r0, [pc, #212]	@ (8004190 <RI_GetRegisterMotor1+0x7c8>)
 80040bc:	f005 f938 	bl	8009330 <NTC_GetAvTemp_C>
 80040c0:	8020      	strh	r0, [r4, #0]
              break;
 80040c2:	e51b      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDIqHandle_M1);
 80040c4:	482d      	ldr	r0, [pc, #180]	@ (800417c <RI_GetRegisterMotor1+0x7b4>)
 80040c6:	f005 f951 	bl	800936c <PID_GetKP>
 80040ca:	8020      	strh	r0, [r4, #0]
              break;
 80040cc:	e516      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
          switch (regID)
 80040ce:	f5b0 6f65 	cmp.w	r0, #3664	@ 0xe50
 80040d2:	f43f ad13 	beq.w	8003afc <RI_GetRegisterMotor1+0x134>
 80040d6:	2005      	movs	r0, #5
 80040d8:	e511      	b.n	8003afe <RI_GetRegisterMotor1+0x136>
              *regdata16 = PID_GetKD(&PIDIqHandle_M1);
 80040da:	4828      	ldr	r0, [pc, #160]	@ (800417c <RI_GetRegisterMotor1+0x7b4>)
 80040dc:	f005 f976 	bl	80093cc <PID_GetKD>
 80040e0:	8020      	strh	r0, [r4, #0]
              break;
 80040e2:	e50b      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdataU16 = PID_GetKDDivisorPOW2(&PIDIdHandle_M1);
 80040e4:	4829      	ldr	r0, [pc, #164]	@ (800418c <RI_GetRegisterMotor1+0x7c4>)
 80040e6:	f005 f975 	bl	80093d4 <PID_GetKDDivisorPOW2>
 80040ea:	8020      	strh	r0, [r4, #0]
              break;
 80040ec:	e506      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(&PIDSpeedHandle_M1);
 80040ee:	4824      	ldr	r0, [pc, #144]	@ (8004180 <RI_GetRegisterMotor1+0x7b8>)
 80040f0:	f005 f946 	bl	8009380 <PID_GetKPDivisorPOW2>
 80040f4:	8020      	strh	r0, [r4, #0]
              break;
 80040f6:	e501      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)&STO_PLL_M1);
 80040f8:	4826      	ldr	r0, [pc, #152]	@ (8004194 <RI_GetRegisterMotor1+0x7cc>)
 80040fa:	f006 fb2b 	bl	800a754 <SPD_GetS16Speed>
 80040fe:	8020      	strh	r0, [r4, #0]
              break;
 8004100:	e4fc      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP(&PIDIdHandle_M1);
 8004102:	4822      	ldr	r0, [pc, #136]	@ (800418c <RI_GetRegisterMotor1+0x7c4>)
 8004104:	f005 f932 	bl	800936c <PID_GetKP>
 8004108:	8020      	strh	r0, [r4, #0]
              break;
 800410a:	e4f7      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKD(&PIDIdHandle_M1);
 800410c:	481f      	ldr	r0, [pc, #124]	@ (800418c <RI_GetRegisterMotor1+0x7c4>)
 800410e:	f005 f95d 	bl	80093cc <PID_GetKD>
 8004112:	8020      	strh	r0, [r4, #0]
              break;
 8004114:	e4f2      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8004116:	481c      	ldr	r0, [pc, #112]	@ (8004188 <RI_GetRegisterMotor1+0x7c0>)
 8004118:	f7fd feaa 	bl	8001e70 <MCI_GetIab>
 800411c:	8020      	strh	r0, [r4, #0]
              break;
 800411e:	e4ed      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8004120:	4819      	ldr	r0, [pc, #100]	@ (8004188 <RI_GetRegisterMotor1+0x7c0>)
 8004122:	f7fd fecd 	bl	8001ec0 <MCI_GetVqd>
 8004126:	8020      	strh	r0, [r4, #0]
              break;
 8004128:	e4e8      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKP (&(&STO_PLL_M1)->PIRegulator);
 800412a:	4816      	ldr	r0, [pc, #88]	@ (8004184 <RI_GetRegisterMotor1+0x7bc>)
 800412c:	f005 f91e 	bl	800936c <PID_GetKP>
 8004130:	8020      	strh	r0, [r4, #0]
              break;
 8004132:	e4e3      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = PID_GetKI (&(&STO_PLL_M1)->PIRegulator);
 8004134:	4813      	ldr	r0, [pc, #76]	@ (8004184 <RI_GetRegisterMotor1+0x7bc>)
 8004136:	f005 f91d 	bl	8009374 <PID_GetKI>
 800413a:	8020      	strh	r0, [r4, #0]
              break;
 800413c:	e4de      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800413e:	4812      	ldr	r0, [pc, #72]	@ (8004188 <RI_GetRegisterMotor1+0x7c0>)
 8004140:	f7fd feb4 	bl	8001eac <MCI_GetIqdref>
 8004144:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8004148:	8023      	strh	r3, [r4, #0]
              break;
 800414a:	e4d7      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800414c:	480e      	ldr	r0, [pc, #56]	@ (8004188 <RI_GetRegisterMotor1+0x7c0>)
 800414e:	f7fd fe99 	bl	8001e84 <MCI_GetIalphabeta>
 8004152:	8020      	strh	r0, [r4, #0]
              break;
 8004154:	e4d2      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = STO_PLL_GetEstimatedCurrent(&STO_PLL_M1).alpha;
 8004156:	480f      	ldr	r0, [pc, #60]	@ (8004194 <RI_GetRegisterMotor1+0x7cc>)
 8004158:	f006 fe4c 	bl	800adf4 <STO_PLL_GetEstimatedCurrent>
 800415c:	8020      	strh	r0, [r4, #0]
              break;
 800415e:	e4cd      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              *regdata16 = STO_PLL_GetEstimatedBemf(&STO_PLL_M1).alpha;
 8004160:	480c      	ldr	r0, [pc, #48]	@ (8004194 <RI_GetRegisterMotor1+0x7cc>)
 8004162:	f006 fe43 	bl	800adec <STO_PLL_GetEstimatedBemf>
 8004166:	8020      	strh	r0, [r4, #0]
              break;
 8004168:	e4c8      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
              STO_PLL_GetObserverGains(&STO_PLL_M1, &hC1, &hC2);
 800416a:	480a      	ldr	r0, [pc, #40]	@ (8004194 <RI_GetRegisterMotor1+0x7cc>)
 800416c:	aa13      	add	r2, sp, #76	@ 0x4c
 800416e:	a912      	add	r1, sp, #72	@ 0x48
 8004170:	f006 fe52 	bl	800ae18 <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8004174:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004178:	8023      	strh	r3, [r4, #0]
              break;
 800417a:	e4bf      	b.n	8003afc <RI_GetRegisterMotor1+0x134>
 800417c:	2000030c 	.word	0x2000030c
 8004180:	20000338 	.word	0x20000338
 8004184:	2000009c 	.word	0x2000009c
 8004188:	20000000 	.word	0x20000000
 800418c:	200002e0 	.word	0x200002e0
 8004190:	200003a0 	.word	0x200003a0
 8004194:	20000068 	.word	0x20000068

08004198 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8004198:	f000 0038 	and.w	r0, r0, #56	@ 0x38
 800419c:	3808      	subs	r0, #8
 800419e:	b2c0      	uxtb	r0, r0
 80041a0:	2810      	cmp	r0, #16
 80041a2:	bf9a      	itte	ls
 80041a4:	4b01      	ldrls	r3, [pc, #4]	@ (80041ac <RI_GetIDSize+0x14>)
 80041a6:	5c18      	ldrbls	r0, [r3, r0]
 80041a8:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80041aa:	4770      	bx	lr
 80041ac:	0800c088 	.word	0x0800c088

080041b0 <RI_GetPtrReg>:

    MCI_Handle_t *pMCIN = &Mci[0];
    uint16_t regID = dataID & REG_MASK;
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 80041b0:	f000 0338 	and.w	r3, r0, #56	@ 0x38
 80041b4:	2b10      	cmp	r3, #16
 80041b6:	d003      	beq.n	80041c0 <RI_GetPtrReg+0x10>
 80041b8:	4b42      	ldr	r3, [pc, #264]	@ (80042c4 <RI_GetPtrReg+0x114>)
      }

      default:
      {
        *dataPtr = &nullData16;
        retVal = MCP_ERROR_UNKNOWN_REG;
 80041ba:	2005      	movs	r0, #5
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 80041bc:	600b      	str	r3, [r1, #0]
    }
#ifdef NULL_PTR_CHECK_REG_INT
  }
#endif
  return (retVal);
}
 80041be:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 80041c0:	f020 0007 	bic.w	r0, r0, #7
        switch (regID)
 80041c4:	f5b0 6f1d 	cmp.w	r0, #2512	@ 0x9d0
    uint16_t regID = dataID & REG_MASK;
 80041c8:	b282      	uxth	r2, r0
        switch (regID)
 80041ca:	d068      	beq.n	800429e <RI_GetPtrReg+0xee>
 80041cc:	d812      	bhi.n	80041f4 <RI_GetPtrReg+0x44>
 80041ce:	f5b2 6f0d 	cmp.w	r2, #2256	@ 0x8d0
 80041d2:	d05f      	beq.n	8004294 <RI_GetPtrReg+0xe4>
 80041d4:	d820      	bhi.n	8004218 <RI_GetPtrReg+0x68>
 80041d6:	f5b2 6f05 	cmp.w	r2, #2128	@ 0x850
 80041da:	d065      	beq.n	80042a8 <RI_GetPtrReg+0xf8>
 80041dc:	d84d      	bhi.n	800427a <RI_GetPtrReg+0xca>
 80041de:	f5b2 6ffa 	cmp.w	r2, #2000	@ 0x7d0
 80041e2:	d03b      	beq.n	800425c <RI_GetPtrReg+0xac>
 80041e4:	f5b2 6f01 	cmp.w	r2, #2064	@ 0x810
 80041e8:	d1e6      	bne.n	80041b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80041ea:	4b37      	ldr	r3, [pc, #220]	@ (80042c8 <RI_GetPtrReg+0x118>)
 80041ec:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80041ee:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 80041f0:	3302      	adds	r3, #2
            break;
 80041f2:	e7e3      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 80041f4:	f5b2 6f35 	cmp.w	r2, #2896	@ 0xb50
 80041f8:	d034      	beq.n	8004264 <RI_GetPtrReg+0xb4>
 80041fa:	d81b      	bhi.n	8004234 <RI_GetPtrReg+0x84>
 80041fc:	f5b2 6f25 	cmp.w	r2, #2640	@ 0xa50
 8004200:	d043      	beq.n	800428a <RI_GetPtrReg+0xda>
 8004202:	f5b2 6f29 	cmp.w	r2, #2704	@ 0xa90
 8004206:	d024      	beq.n	8004252 <RI_GetPtrReg+0xa2>
 8004208:	f5b2 6f21 	cmp.w	r2, #2576	@ 0xa10
 800420c:	d1d4      	bne.n	80041b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 800420e:	4b2e      	ldr	r3, [pc, #184]	@ (80042c8 <RI_GetPtrReg+0x118>)
 8004210:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004212:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8004214:	3318      	adds	r3, #24
            break;
 8004216:	e7d1      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 8004218:	f5b2 6f15 	cmp.w	r2, #2384	@ 0x950
 800421c:	d04c      	beq.n	80042b8 <RI_GetPtrReg+0x108>
 800421e:	f5b2 6f19 	cmp.w	r2, #2448	@ 0x990
 8004222:	d022      	beq.n	800426a <RI_GetPtrReg+0xba>
 8004224:	f5b2 6f11 	cmp.w	r2, #2320	@ 0x910
 8004228:	d1c6      	bne.n	80041b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 800422a:	4b27      	ldr	r3, [pc, #156]	@ (80042c8 <RI_GetPtrReg+0x118>)
 800422c:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800422e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8004230:	330e      	adds	r3, #14
            break;
 8004232:	e7c3      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 8004234:	f5b2 6f45 	cmp.w	r2, #3152	@ 0xc50
 8004238:	d03b      	beq.n	80042b2 <RI_GetPtrReg+0x102>
 800423a:	f5b2 6f49 	cmp.w	r2, #3216	@ 0xc90
 800423e:	d019      	beq.n	8004274 <RI_GetPtrReg+0xc4>
 8004240:	4822      	ldr	r0, [pc, #136]	@ (80042cc <RI_GetPtrReg+0x11c>)
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <RI_GetPtrReg+0x114>)
 8004244:	f5b2 6f39 	cmp.w	r2, #2960	@ 0xb90
 8004248:	bf0a      	itet	eq
 800424a:	4603      	moveq	r3, r0
 800424c:	2005      	movne	r0, #5
 800424e:	2000      	moveq	r0, #0
 8004250:	e7b4      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004252:	4b1d      	ldr	r3, [pc, #116]	@ (80042c8 <RI_GetPtrReg+0x118>)
 8004254:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004256:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8004258:	331c      	adds	r3, #28
            break;
 800425a:	e7af      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 800425c:	4b1a      	ldr	r3, [pc, #104]	@ (80042c8 <RI_GetPtrReg+0x118>)
  uint8_t retVal = MCP_CMD_OK;
 800425e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8004260:	685b      	ldr	r3, [r3, #4]
             break;
 8004262:	e7ab      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 8004264:	4b1a      	ldr	r3, [pc, #104]	@ (80042d0 <RI_GetPtrReg+0x120>)
  uint8_t retVal = MCP_CMD_OK;
 8004266:	2000      	movs	r0, #0
 8004268:	e7a8      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800426a:	4b17      	ldr	r3, [pc, #92]	@ (80042c8 <RI_GetPtrReg+0x118>)
 800426c:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800426e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8004270:	3312      	adds	r3, #18
            break;
 8004272:	e7a3      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 8004274:	4b17      	ldr	r3, [pc, #92]	@ (80042d4 <RI_GetPtrReg+0x124>)
  uint8_t retVal = MCP_CMD_OK;
 8004276:	2000      	movs	r0, #0
 8004278:	e7a0      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 800427a:	f5b2 6f09 	cmp.w	r2, #2192	@ 0x890
 800427e:	d19b      	bne.n	80041b8 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004280:	4b11      	ldr	r3, [pc, #68]	@ (80042c8 <RI_GetPtrReg+0x118>)
 8004282:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004284:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8004286:	3306      	adds	r3, #6
            break;
 8004288:	e798      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800428a:	4b0f      	ldr	r3, [pc, #60]	@ (80042c8 <RI_GetPtrReg+0x118>)
 800428c:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 800428e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8004290:	331a      	adds	r3, #26
            break;
 8004292:	e793      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8004294:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <RI_GetPtrReg+0x118>)
 8004296:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 8004298:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 800429a:	330c      	adds	r3, #12
            break;
 800429c:	e78e      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 800429e:	4b0a      	ldr	r3, [pc, #40]	@ (80042c8 <RI_GetPtrReg+0x118>)
 80042a0:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80042a2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80042a4:	3316      	adds	r3, #22
            break;
 80042a6:	e789      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80042a8:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <RI_GetPtrReg+0x118>)
 80042aa:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80042ac:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80042ae:	3304      	adds	r3, #4
            break;
 80042b0:	e784      	b.n	80041bc <RI_GetPtrReg+0xc>
        switch (regID)
 80042b2:	4b09      	ldr	r3, [pc, #36]	@ (80042d8 <RI_GetPtrReg+0x128>)
  uint8_t retVal = MCP_CMD_OK;
 80042b4:	2000      	movs	r0, #0
 80042b6:	e781      	b.n	80041bc <RI_GetPtrReg+0xc>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80042b8:	4b03      	ldr	r3, [pc, #12]	@ (80042c8 <RI_GetPtrReg+0x118>)
 80042ba:	685b      	ldr	r3, [r3, #4]
  uint8_t retVal = MCP_CMD_OK;
 80042bc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80042be:	3310      	adds	r3, #16
            break;
 80042c0:	e77c      	b.n	80041bc <RI_GetPtrReg+0xc>
 80042c2:	bf00      	nop
 80042c4:	20001bac 	.word	0x20001bac
 80042c8:	20000000 	.word	0x20000000
 80042cc:	20000074 	.word	0x20000074
 80042d0:	2000006c 	.word	0x2000006c
 80042d4:	200000da 	.word	0x200000da
 80042d8:	200000d8 	.word	0x200000d8

080042dc <RCM_RegisterRegConv>:
  * @param  regConv Pointer to the regular conversion parameters.
  *         Contains ADC, Channel and sampling time to be used.
  *
  */
void RCM_RegisterRegConv(RegConv_t *regConv)
{
 80042dc:	b570      	push	{r4, r5, r6, lr}

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80042de:	4c8c      	ldr	r4, [pc, #560]	@ (8004510 <RCM_RegisterRegConv+0x234>)
 80042e0:	6822      	ldr	r2, [r4, #0]
 80042e2:	2a00      	cmp	r2, #0
 80042e4:	d033      	beq.n	800434e <RCM_RegisterRegConv+0x72>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80042e6:	f890 c004 	ldrb.w	ip, [r0, #4]
 80042ea:	7913      	ldrb	r3, [r2, #4]
 80042ec:	4563      	cmp	r3, ip
 80042ee:	d01e      	beq.n	800432e <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80042f0:	6861      	ldr	r1, [r4, #4]
 80042f2:	2900      	cmp	r1, #0
 80042f4:	f000 80d3 	beq.w	800449e <RCM_RegisterRegConv+0x1c2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80042f8:	790b      	ldrb	r3, [r1, #4]
 80042fa:	4563      	cmp	r3, ip
 80042fc:	d036      	beq.n	800436c <RCM_RegisterRegConv+0x90>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80042fe:	68a5      	ldr	r5, [r4, #8]
 8004300:	2d00      	cmp	r5, #0
 8004302:	f000 80ad 	beq.w	8004460 <RCM_RegisterRegConv+0x184>
  uint8_t handle = 255U;
 8004306:	22ff      	movs	r2, #255	@ 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004308:	792b      	ldrb	r3, [r5, #4]
 800430a:	4563      	cmp	r3, ip
 800430c:	f000 80b8 	beq.w	8004480 <RCM_RegisterRegConv+0x1a4>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004310:	68e5      	ldr	r5, [r4, #12]
 8004312:	2d00      	cmp	r5, #0
 8004314:	f000 80bc 	beq.w	8004490 <RCM_RegisterRegConv+0x1b4>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004318:	792b      	ldrb	r3, [r5, #4]
 800431a:	4563      	cmp	r3, ip
 800431c:	f000 80ce 	beq.w	80044bc <RCM_RegisterRegConv+0x1e0>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8004320:	2a03      	cmp	r2, #3
 8004322:	bf98      	it	ls
 8004324:	6803      	ldrls	r3, [r0, #0]
 8004326:	d936      	bls.n	8004396 <RCM_RegisterRegConv+0xba>
 8004328:	22ff      	movs	r2, #255	@ 0xff
      /* Nothing to do handle is already set to error value : 255 */
    }
#ifdef NULL_PTR_CHECK_REG_CON_MNG
  }
#endif
  regConv->convHandle = handle;
 800432a:	7302      	strb	r2, [r0, #12]
}
 800432c:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800432e:	6803      	ldr	r3, [r0, #0]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	4293      	cmp	r3, r2
 8004334:	d031      	beq.n	800439a <RCM_RegisterRegConv+0xbe>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004336:	6861      	ldr	r1, [r4, #4]
 8004338:	2900      	cmp	r1, #0
 800433a:	f000 80da 	beq.w	80044f2 <RCM_RegisterRegConv+0x216>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800433e:	790a      	ldrb	r2, [r1, #4]
 8004340:	4562      	cmp	r2, ip
 8004342:	f000 80cb 	beq.w	80044dc <RCM_RegisterRegConv+0x200>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004346:	68a5      	ldr	r5, [r4, #8]
 8004348:	2d00      	cmp	r5, #0
 800434a:	d1dc      	bne.n	8004306 <RCM_RegisterRegConv+0x2a>
 800434c:	e089      	b.n	8004462 <RCM_RegisterRegConv+0x186>
 800434e:	6861      	ldr	r1, [r4, #4]
 8004350:	2900      	cmp	r1, #0
 8004352:	f000 80a8 	beq.w	80044a6 <RCM_RegisterRegConv+0x1ca>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004356:	f890 c004 	ldrb.w	ip, [r0, #4]
 800435a:	790b      	ldrb	r3, [r1, #4]
 800435c:	4563      	cmp	r3, ip
 800435e:	d006      	beq.n	800436e <RCM_RegisterRegConv+0x92>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004360:	68a5      	ldr	r5, [r4, #8]
 8004362:	2d00      	cmp	r5, #0
 8004364:	d1d0      	bne.n	8004308 <RCM_RegisterRegConv+0x2c>
 8004366:	6803      	ldr	r3, [r0, #0]
 8004368:	462a      	mov	r2, r5
 800436a:	e00b      	b.n	8004384 <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 800436c:	22ff      	movs	r2, #255	@ 0xff
 800436e:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004370:	6809      	ldr	r1, [r1, #0]
 8004372:	4299      	cmp	r1, r3
 8004374:	f000 80a8 	beq.w	80044c8 <RCM_RegisterRegConv+0x1ec>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004378:	68a5      	ldr	r5, [r4, #8]
 800437a:	2d00      	cmp	r5, #0
 800437c:	d1c4      	bne.n	8004308 <RCM_RegisterRegConv+0x2c>
 800437e:	2a04      	cmp	r2, #4
 8004380:	d86f      	bhi.n	8004462 <RCM_RegisterRegConv+0x186>
 8004382:	462a      	mov	r2, r5
 8004384:	68e1      	ldr	r1, [r4, #12]
 8004386:	b131      	cbz	r1, 8004396 <RCM_RegisterRegConv+0xba>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004388:	790d      	ldrb	r5, [r1, #4]
 800438a:	4565      	cmp	r5, ip
 800438c:	d103      	bne.n	8004396 <RCM_RegisterRegConv+0xba>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800438e:	6809      	ldr	r1, [r1, #0]
 8004390:	4299      	cmp	r1, r3
 8004392:	f000 8081 	beq.w	8004498 <RCM_RegisterRegConv+0x1bc>
      RCM_handle_array [handle] = regConv;
 8004396:	4611      	mov	r1, r2
 8004398:	e001      	b.n	800439e <RCM_RegisterRegConv+0xc2>
    uint8_t i = 0;
 800439a:	2200      	movs	r2, #0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800439c:	4611      	mov	r1, r2
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 800439e:	4d5d      	ldr	r5, [pc, #372]	@ (8004514 <RCM_RegisterRegConv+0x238>)
      RCM_handle_array [handle] = regConv;
 80043a0:	f844 0021 	str.w	r0, [r4, r1, lsl #2]
 80043a4:	2400      	movs	r4, #0
 80043a6:	46a6      	mov	lr, r4
      RCM_CB_array [handle].cb = NULL; /* If a previous callback was attached, it is cleared */
 80043a8:	f845 4031 	str.w	r4, [r5, r1, lsl #3]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80043ac:	689c      	ldr	r4, [r3, #8]
 80043ae:	f362 0e07 	bfi	lr, r2, #0, #8
 80043b2:	07e6      	lsls	r6, r4, #31
 80043b4:	f362 2e0f 	bfi	lr, r2, #8, #8
 80043b8:	d422      	bmi.n	8004400 <RCM_RegisterRegConv+0x124>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80043ba:	685c      	ldr	r4, [r3, #4]
 80043bc:	f024 0404 	bic.w	r4, r4, #4
 80043c0:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80043c2:	2404      	movs	r4, #4
 80043c4:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80043c6:	685c      	ldr	r4, [r3, #4]
 80043c8:	f024 0420 	bic.w	r4, r4, #32
 80043cc:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80043ce:	2420      	movs	r4, #32
 80043d0:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80043d2:	689c      	ldr	r4, [r3, #8]
 80043d4:	f024 4440 	bic.w	r4, r4, #3221225472	@ 0xc0000000
 80043d8:	f024 043f 	bic.w	r4, r4, #63	@ 0x3f
 80043dc:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 80043e0:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80043e2:	689c      	ldr	r4, [r3, #8]
 80043e4:	2c00      	cmp	r4, #0
 80043e6:	dbfc      	blt.n	80043e2 <RCM_RegisterRegConv+0x106>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80043e8:	681c      	ldr	r4, [r3, #0]
 80043ea:	07e5      	lsls	r5, r4, #31
 80043ec:	d408      	bmi.n	8004400 <RCM_RegisterRegConv+0x124>
  MODIFY_REG(ADCx->CR,
 80043ee:	4d4a      	ldr	r5, [pc, #296]	@ (8004518 <RCM_RegisterRegConv+0x23c>)
 80043f0:	689c      	ldr	r4, [r3, #8]
 80043f2:	402c      	ands	r4, r5
 80043f4:	f044 0401 	orr.w	r4, r4, #1
 80043f8:	609c      	str	r4, [r3, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80043fa:	681c      	ldr	r4, [r3, #0]
 80043fc:	07e4      	lsls	r4, r4, #31
 80043fe:	d5f7      	bpl.n	80043f0 <RCM_RegisterRegConv+0x114>
      RCM_NoInj_array[handle].enable = false;
 8004400:	4d46      	ldr	r5, [pc, #280]	@ (800451c <RCM_RegisterRegConv+0x240>)
 8004402:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004406:	004c      	lsls	r4, r1, #1
      RCM_NoInj_array[handle].prev = handle;
 8004408:	1d2e      	adds	r6, r5, #4
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800440a:	2101      	movs	r1, #1
      RCM_NoInj_array[handle].prev = handle;
 800440c:	f826 e004 	strh.w	lr, [r6, r4]
      RCM_NoInj_array[handle].enable = false;
 8004410:	f04f 0e00 	mov.w	lr, #0
 8004414:	f805 e004 	strb.w	lr, [r5, r4]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8004418:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 800441a:	fa01 f10c 	lsl.w	r1, r1, ip
 800441e:	f024 040f 	bic.w	r4, r4, #15
 8004422:	f1bc 0f09 	cmp.w	ip, #9
 8004426:	631c      	str	r4, [r3, #48]	@ 0x30
 8004428:	ea41 618c 	orr.w	r1, r1, ip, lsl #26
 800442c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
 8004430:	d81f      	bhi.n	8004472 <RCM_RegisterRegConv+0x196>
 8004432:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8004436:	0dcd      	lsrs	r5, r1, #23
 8004438:	f005 0504 	and.w	r5, r5, #4
 800443c:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 800443e:	6886      	ldr	r6, [r0, #8]
 8004440:	595c      	ldr	r4, [r3, r5]
 8004442:	f3c1 5104 	ubfx	r1, r1, #20, #5
 8004446:	f04f 0e07 	mov.w	lr, #7
 800444a:	fa06 fc01 	lsl.w	ip, r6, r1
 800444e:	fa0e f101 	lsl.w	r1, lr, r1
 8004452:	ea24 0101 	bic.w	r1, r4, r1
 8004456:	ea41 010c 	orr.w	r1, r1, ip
 800445a:	5159      	str	r1, [r3, r5]
  regConv->convHandle = handle;
 800445c:	7302      	strb	r2, [r0, #12]
}
 800445e:	bd70      	pop	{r4, r5, r6, pc}
 8004460:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004462:	68e2      	ldr	r2, [r4, #12]
 8004464:	b112      	cbz	r2, 800446c <RCM_RegisterRegConv+0x190>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8004466:	7911      	ldrb	r1, [r2, #4]
 8004468:	4561      	cmp	r1, ip
 800446a:	d03e      	beq.n	80044ea <RCM_RegisterRegConv+0x20e>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 800446c:	2202      	movs	r2, #2
      RCM_handle_array [handle] = regConv;
 800446e:	4611      	mov	r1, r2
 8004470:	e795      	b.n	800439e <RCM_RegisterRegConv+0xc2>
      LL_ADC_SetChannelSamplingTime(regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8004472:	3c1e      	subs	r4, #30
 8004474:	ea41 5104 	orr.w	r1, r1, r4, lsl #20
 8004478:	f041 7100 	orr.w	r1, r1, #33554432	@ 0x2000000
 800447c:	e7db      	b.n	8004436 <RCM_RegisterRegConv+0x15a>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 800447e:	460a      	mov	r2, r1
 8004480:	6803      	ldr	r3, [r0, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8004482:	6829      	ldr	r1, [r5, #0]
 8004484:	4299      	cmp	r1, r3
 8004486:	f47f af43 	bne.w	8004310 <RCM_RegisterRegConv+0x34>
      i++;
 800448a:	2202      	movs	r2, #2
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800448c:	4611      	mov	r1, r2
 800448e:	e786      	b.n	800439e <RCM_RegisterRegConv+0xc2>
 8004490:	2a04      	cmp	r2, #4
 8004492:	6803      	ldr	r3, [r0, #0]
 8004494:	f67f af7f 	bls.w	8004396 <RCM_RegisterRegConv+0xba>
 8004498:	2203      	movs	r2, #3
      RCM_handle_array [handle] = regConv;
 800449a:	4611      	mov	r1, r2
 800449c:	e77f      	b.n	800439e <RCM_RegisterRegConv+0xc2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800449e:	68a5      	ldr	r5, [r4, #8]
 80044a0:	b1cd      	cbz	r5, 80044d6 <RCM_RegisterRegConv+0x1fa>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80044a2:	2201      	movs	r2, #1
 80044a4:	e730      	b.n	8004308 <RCM_RegisterRegConv+0x2c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80044a6:	68a5      	ldr	r5, [r4, #8]
 80044a8:	b1d5      	cbz	r5, 80044e0 <RCM_RegisterRegConv+0x204>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80044aa:	f890 c004 	ldrb.w	ip, [r0, #4]
 80044ae:	792b      	ldrb	r3, [r5, #4]
 80044b0:	4563      	cmp	r3, ip
 80044b2:	d0e4      	beq.n	800447e <RCM_RegisterRegConv+0x1a2>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80044b4:	68e5      	ldr	r5, [r4, #12]
 80044b6:	b155      	cbz	r5, 80044ce <RCM_RegisterRegConv+0x1f2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80044b8:	460a      	mov	r2, r1
 80044ba:	e72d      	b.n	8004318 <RCM_RegisterRegConv+0x3c>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80044bc:	6829      	ldr	r1, [r5, #0]
 80044be:	6803      	ldr	r3, [r0, #0]
 80044c0:	4299      	cmp	r1, r3
 80044c2:	f47f af2d 	bne.w	8004320 <RCM_RegisterRegConv+0x44>
 80044c6:	e7e7      	b.n	8004498 <RCM_RegisterRegConv+0x1bc>
      i++;
 80044c8:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80044ca:	4611      	mov	r1, r2
 80044cc:	e767      	b.n	800439e <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80044ce:	462a      	mov	r2, r5
 80044d0:	6803      	ldr	r3, [r0, #0]
      RCM_handle_array [handle] = regConv;
 80044d2:	4611      	mov	r1, r2
 80044d4:	e763      	b.n	800439e <RCM_RegisterRegConv+0xc2>
 80044d6:	6803      	ldr	r3, [r0, #0]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 80044d8:	2201      	movs	r2, #1
 80044da:	e753      	b.n	8004384 <RCM_RegisterRegConv+0xa8>
  uint8_t handle = 255U;
 80044dc:	22ff      	movs	r2, #255	@ 0xff
 80044de:	e747      	b.n	8004370 <RCM_RegisterRegConv+0x94>
 80044e0:	f890 c004 	ldrb.w	ip, [r0, #4]
 80044e4:	6803      	ldr	r3, [r0, #0]
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80044e6:	462a      	mov	r2, r5
 80044e8:	e74c      	b.n	8004384 <RCM_RegisterRegConv+0xa8>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80044ea:	6812      	ldr	r2, [r2, #0]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d0d3      	beq.n	8004498 <RCM_RegisterRegConv+0x1bc>
 80044f0:	e7bc      	b.n	800446c <RCM_RegisterRegConv+0x190>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80044f2:	68a5      	ldr	r5, [r4, #8]
 80044f4:	2d00      	cmp	r5, #0
 80044f6:	d0ef      	beq.n	80044d8 <RCM_RegisterRegConv+0x1fc>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80044f8:	792a      	ldrb	r2, [r5, #4]
 80044fa:	4562      	cmp	r2, ip
 80044fc:	d006      	beq.n	800450c <RCM_RegisterRegConv+0x230>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80044fe:	68e5      	ldr	r5, [r4, #12]
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 8004500:	2201      	movs	r2, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8004502:	2d00      	cmp	r5, #0
 8004504:	f47f af08 	bne.w	8004318 <RCM_RegisterRegConv+0x3c>
      RCM_handle_array [handle] = regConv;
 8004508:	4611      	mov	r1, r2
 800450a:	e748      	b.n	800439e <RCM_RegisterRegConv+0xc2>
        handle = i; /* First location available, but still looping to check that this config does not already exist */
 800450c:	2201      	movs	r2, #1
 800450e:	e7b8      	b.n	8004482 <RCM_RegisterRegConv+0x1a6>
 8004510:	20001bf4 	.word	0x20001bf4
 8004514:	20001bd4 	.word	0x20001bd4
 8004518:	7fffffc0 	.word	0x7fffffc0
 800451c:	20001bbc 	.word	0x20001bbc

08004520 <RCM_ExecRegularConv>:
 * Otherwise, the latest stored conversion result will be returned.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
uint16_t RCM_ExecRegularConv (RegConv_t *regConv)
{
 8004520:	b530      	push	{r4, r5, lr}
  uint16_t retVal;
  uint8_t handle = regConv->convHandle;
 8004522:	7b03      	ldrb	r3, [r0, #12]
  uint8_t formerNext;
  uint8_t i=0;
  uint8_t LastEnable = RCM_MAX_CONV;

  if (false == RCM_NoInj_array [handle].enable)
 8004524:	4a5e      	ldr	r2, [pc, #376]	@ (80046a0 <RCM_ExecRegularConv+0x180>)
 8004526:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800452a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800452e:	f812 0011 	ldrb.w	r0, [r2, r1, lsl #1]
 8004532:	2800      	cmp	r0, #0
 8004534:	d138      	bne.n	80045a8 <RCM_ExecRegularConv+0x88>
  {
    /* Find position in the list */
    while (i < RCM_MAX_CONV)
    {
      if (true == RCM_NoInj_array [i].enable)
 8004536:	7811      	ldrb	r1, [r2, #0]
 8004538:	b991      	cbnz	r1, 8004560 <RCM_ExecRegularConv+0x40>
  uint8_t LastEnable = RCM_MAX_CONV;
 800453a:	2004      	movs	r0, #4
      if (true == RCM_NoInj_array [i].enable)
 800453c:	7991      	ldrb	r1, [r2, #6]
 800453e:	2900      	cmp	r1, #0
 8004540:	d175      	bne.n	800462e <RCM_ExecRegularConv+0x10e>
 8004542:	7b11      	ldrb	r1, [r2, #12]
 8004544:	2900      	cmp	r1, #0
 8004546:	d177      	bne.n	8004638 <RCM_ExecRegularConv+0x118>
 8004548:	7c91      	ldrb	r1, [r2, #18]
 800454a:	2900      	cmp	r1, #0
 800454c:	f000 809a 	beq.w	8004684 <RCM_ExecRegularConv+0x164>
      {
        if (RCM_NoInj_array[i].next > handle)
 8004550:	7dd1      	ldrb	r1, [r2, #23]
 8004552:	4299      	cmp	r1, r3
 8004554:	f240 80a0 	bls.w	8004698 <RCM_ExecRegularConv+0x178>
 8004558:	f04f 0e03 	mov.w	lr, #3
 800455c:	4670      	mov	r0, lr
 800455e:	e003      	b.n	8004568 <RCM_ExecRegularConv+0x48>
 8004560:	7951      	ldrb	r1, [r2, #5]
 8004562:	428b      	cmp	r3, r1
 8004564:	d2ea      	bcs.n	800453c <RCM_ExecRegularConv+0x1c>
  uint8_t i=0;
 8004566:	4686      	mov	lr, r0
        /* We found a previous reg conv to link with */
        {
          formerNext = RCM_NoInj_array [i].next;
          RCM_NoInj_array[handle].next = formerNext;
 8004568:	eb0c 0403 	add.w	r4, ip, r3
 800456c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
          RCM_NoInj_array[handle].prev = i;
          RCM_NoInj_array[i].next = handle;
 8004570:	eb00 0040 	add.w	r0, r0, r0, lsl #1
          RCM_NoInj_array[handle].next = formerNext;
 8004574:	7161      	strb	r1, [r4, #5]
          RCM_NoInj_array[formerNext].prev = handle;
 8004576:	eb01 0141 	add.w	r1, r1, r1, lsl #1
          RCM_NoInj_array[handle].prev = i;
 800457a:	f884 e004 	strb.w	lr, [r4, #4]
          RCM_NoInj_array[formerNext].prev = handle;
 800457e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
      }
    }
    /* The handle is now linked with others, we can set the enable flag */
    RCM_NoInj_array[handle].enable = true;
    RCM_NoInj_array[handle].status = notvalid;
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004582:	4c48      	ldr	r4, [pc, #288]	@ (80046a4 <RCM_ExecRegularConv+0x184>)
          RCM_NoInj_array[formerNext].prev = handle;
 8004584:	710b      	strb	r3, [r1, #4]
          RCM_NoInj_array[i].next = handle;
 8004586:	eb02 0040 	add.w	r0, r2, r0, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800458a:	7821      	ldrb	r1, [r4, #0]
          RCM_NoInj_array[i].next = handle;
 800458c:	7143      	strb	r3, [r0, #5]
    RCM_NoInj_array[handle].enable = true;
 800458e:	eb0c 0003 	add.w	r0, ip, r3
 8004592:	2501      	movs	r5, #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004594:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    RCM_NoInj_array[handle].enable = true;
 8004598:	f822 5010 	strh.w	r5, [r2, r0, lsl #1]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800459c:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80045a0:	7849      	ldrb	r1, [r1, #1]
 80045a2:	42a9      	cmp	r1, r5
    {/* Select the new conversion to be the next scheduled only if a conversion is not ongoing */
      RCM_currentHandle = handle;
 80045a4:	bf18      	it	ne
 80045a6:	7023      	strbne	r3, [r4, #0]
  }
  else
  {
    /* Nothing to do the current handle is already scheduled */
  }
  if (false == PWM_Handle_M1.ADCRegularLocked)
 80045a8:	493f      	ldr	r1, [pc, #252]	@ (80046a8 <RCM_ExecRegularConv+0x188>)
 80045aa:	f891 10a0 	ldrb.w	r1, [r1, #160]	@ 0xa0
 80045ae:	2900      	cmp	r1, #0
 80045b0:	d138      	bne.n	8004624 <RCM_ExecRegularConv+0x104>
  /* The ADC is free to be used asynchronously */
  {
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80045b2:	493e      	ldr	r1, [pc, #248]	@ (80046ac <RCM_ExecRegularConv+0x18c>)
 80045b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80045b8:	790c      	ldrb	r4, [r1, #4]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80045ba:	6808      	ldr	r0, [r1, #0]
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80045bc:	2101      	movs	r1, #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80045be:	2c09      	cmp	r4, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80045c0:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80045c4:	fa01 f104 	lsl.w	r1, r1, r4
 80045c8:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 80045cc:	bf84      	itt	hi
 80045ce:	3d1e      	subhi	r5, #30
 80045d0:	ea41 5105 	orrhi.w	r1, r1, r5, lsl #20
  MODIFY_REG(*preg,
 80045d4:	6b04      	ldr	r4, [r0, #48]	@ 0x30
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80045d6:	bf94      	ite	ls
 80045d8:	ea41 5105 	orrls.w	r1, r1, r5, lsl #20
 80045dc:	f041 7100 	orrhi.w	r1, r1, #33554432	@ 0x2000000
 80045e0:	0d09      	lsrs	r1, r1, #20
 80045e2:	f401 61f8 	and.w	r1, r1, #1984	@ 0x7c0
 80045e6:	f424 64f8 	bic.w	r4, r4, #1984	@ 0x7c0
 80045ea:	4321      	orrs	r1, r4
 80045ec:	6301      	str	r1, [r0, #48]	@ 0x30
* param  ADCx ADC instance
* retval Value between Min_Data=0x0000 and Max_Data=0xFFF0
*/
__STATIC_INLINE uint16_t LL_ADC_REG_ReadConversionData12L(const ADC_TypeDef *ADCx)
{
  return (uint16_t)(READ_REG(ADCx->DR) & 0x0000FFF0UL);
 80045ee:	6c01      	ldr	r1, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 80045f0:	6881      	ldr	r1, [r0, #8]
 80045f2:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80045f6:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80045fa:	f041 0104 	orr.w	r1, r1, #4
 80045fe:	6081      	str	r1, [r0, #8]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 8004600:	6801      	ldr	r1, [r0, #0]
 8004602:	0749      	lsls	r1, r1, #29
 8004604:	d5fc      	bpl.n	8004600 <RCM_ExecRegularConv+0xe0>
    {
      /* Nothing to do */
    }

    /* Read the "Regular" conversion (Not related to current sampling) */
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004606:	eb0c 0103 	add.w	r1, ip, r3
 800460a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800460e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
    RCM_currentHandle = RCM_NoInj_array[handle].next;
 8004610:	4d24      	ldr	r5, [pc, #144]	@ (80046a4 <RCM_ExecRegularConv+0x184>)
 8004612:	f891 e005 	ldrb.w	lr, [r1, #5]
 8004616:	f885 e000 	strb.w	lr, [r5]
 800461a:	f020 000f 	bic.w	r0, r0, #15
    RCM_NoInj_array[handle].status = valid;
 800461e:	2402      	movs	r4, #2
    RCM_NoInj_array[handle].value = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[handle]->regADC);
 8004620:	8048      	strh	r0, [r1, #2]
    RCM_NoInj_array[handle].status = valid;
 8004622:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do */
  }
  retVal = RCM_NoInj_array[handle].value;
 8004624:	449c      	add	ip, r3
 8004626:	eb02 024c 	add.w	r2, r2, ip, lsl #1
  return (retVal);
}
 800462a:	8850      	ldrh	r0, [r2, #2]
 800462c:	bd30      	pop	{r4, r5, pc}
        if (RCM_NoInj_array[i].next > handle)
 800462e:	7ad1      	ldrb	r1, [r2, #11]
 8004630:	428b      	cmp	r3, r1
 8004632:	d31d      	bcc.n	8004670 <RCM_ExecRegularConv+0x150>
      if (true == RCM_NoInj_array [i].enable)
 8004634:	7b11      	ldrb	r1, [r2, #12]
 8004636:	b1f9      	cbz	r1, 8004678 <RCM_ExecRegularConv+0x158>
        if (RCM_NoInj_array[i].next > handle)
 8004638:	7c51      	ldrb	r1, [r2, #17]
 800463a:	4299      	cmp	r1, r3
 800463c:	d828      	bhi.n	8004690 <RCM_ExecRegularConv+0x170>
      if (true == RCM_NoInj_array [i].enable)
 800463e:	7c91      	ldrb	r1, [r2, #18]
 8004640:	2900      	cmp	r1, #0
 8004642:	d185      	bne.n	8004550 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004644:	2102      	movs	r1, #2
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004646:	4608      	mov	r0, r1
 8004648:	eb00 0040 	add.w	r0, r0, r0, lsl #1
         RCM_NoInj_array[handle].next = formerNext;
 800464c:	eb0c 0403 	add.w	r4, ip, r3
 8004650:	eb02 0444 	add.w	r4, r2, r4, lsl #1
         formerNext = RCM_NoInj_array[LastEnable].next;
 8004654:	eb02 0040 	add.w	r0, r2, r0, lsl #1
         RCM_NoInj_array[handle].prev = LastEnable;
 8004658:	7121      	strb	r1, [r4, #4]
         formerNext = RCM_NoInj_array[LastEnable].next;
 800465a:	7941      	ldrb	r1, [r0, #5]
         RCM_NoInj_array[handle].next = formerNext;
 800465c:	7161      	strb	r1, [r4, #5]
         RCM_NoInj_array[formerNext].prev = handle;
 800465e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8004662:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 8004666:	4c0f      	ldr	r4, [pc, #60]	@ (80046a4 <RCM_ExecRegularConv+0x184>)
         RCM_NoInj_array[formerNext].prev = handle;
 8004668:	710b      	strb	r3, [r1, #4]
         RCM_NoInj_array[LastEnable].next = handle;
 800466a:	7143      	strb	r3, [r0, #5]
    if (RCM_NoInj_array[RCM_currentHandle].status != ongoing)
 800466c:	7821      	ldrb	r1, [r4, #0]
 800466e:	e78e      	b.n	800458e <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004670:	f04f 0e01 	mov.w	lr, #1
      if (true == RCM_NoInj_array [i].enable)
 8004674:	4670      	mov	r0, lr
 8004676:	e777      	b.n	8004568 <RCM_ExecRegularConv+0x48>
 8004678:	7c91      	ldrb	r1, [r2, #18]
 800467a:	2900      	cmp	r1, #0
 800467c:	f47f af68 	bne.w	8004550 <RCM_ExecRegularConv+0x30>
          LastEnable = i;
 8004680:	2101      	movs	r1, #1
 8004682:	e7e0      	b.n	8004646 <RCM_ExecRegularConv+0x126>
       if (LastEnable != RCM_MAX_CONV )
 8004684:	2800      	cmp	r0, #0
 8004686:	d0de      	beq.n	8004646 <RCM_ExecRegularConv+0x126>
         RCM_currentHandle = handle;
 8004688:	4c06      	ldr	r4, [pc, #24]	@ (80046a4 <RCM_ExecRegularConv+0x184>)
 800468a:	4619      	mov	r1, r3
 800468c:	7023      	strb	r3, [r4, #0]
    while (i < RCM_MAX_CONV)
 800468e:	e77e      	b.n	800458e <RCM_ExecRegularConv+0x6e>
        if (RCM_NoInj_array[i].next > handle)
 8004690:	f04f 0e02 	mov.w	lr, #2
      if (true == RCM_NoInj_array [i].enable)
 8004694:	4670      	mov	r0, lr
 8004696:	e767      	b.n	8004568 <RCM_ExecRegularConv+0x48>
 8004698:	2003      	movs	r0, #3
          LastEnable = i;
 800469a:	4601      	mov	r1, r0
 800469c:	e7d4      	b.n	8004648 <RCM_ExecRegularConv+0x128>
 800469e:	bf00      	nop
 80046a0:	20001bbc 	.word	0x20001bbc
 80046a4:	20001bb8 	.word	0x20001bb8
 80046a8:	20000190 	.word	0x20000190
 80046ac:	20001bf4 	.word	0x20001bf4

080046b0 <RCM_ExecUserConv>:
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
  uint8_t handle;
  if (RCM_UserConvHandle != NULL)
 80046b0:	4b14      	ldr	r3, [pc, #80]	@ (8004704 <RCM_ExecUserConv+0x54>)
{
 80046b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (RCM_UserConvHandle != NULL)
 80046b6:	681c      	ldr	r4, [r3, #0]
 80046b8:	b124      	cbz	r4, 80046c4 <RCM_ExecUserConv+0x14>
  {
    handle = RCM_UserConvHandle->convHandle;
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80046ba:	4d13      	ldr	r5, [pc, #76]	@ (8004708 <RCM_ExecUserConv+0x58>)
    handle = RCM_UserConvHandle->convHandle;
 80046bc:	7b26      	ldrb	r6, [r4, #12]
    if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80046be:	782b      	ldrb	r3, [r5, #0]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d001      	beq.n	80046c8 <RCM_ExecUserConv+0x18>
  }
  else
  {
     /* Nothing to do */
  }
}
 80046c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80046c8:	4620      	mov	r0, r4
 80046ca:	f7ff ff29 	bl	8004520 <RCM_ExecRegularConv>
 80046ce:	4b0f      	ldr	r3, [pc, #60]	@ (800470c <RCM_ExecUserConv+0x5c>)
 80046d0:	8018      	strh	r0, [r3, #0]
      if (RCM_NoInj_array [handle].status != notvalid)
 80046d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004710 <RCM_ExecUserConv+0x60>)
 80046d4:	eb06 0246 	add.w	r2, r6, r6, lsl #1
 80046d8:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 80046dc:	4601      	mov	r1, r0
      if (RCM_NoInj_array [handle].status != notvalid)
 80046de:	785b      	ldrb	r3, [r3, #1]
 80046e0:	b10b      	cbz	r3, 80046e6 <RCM_ExecUserConv+0x36>
        RCM_UserConvState = RCM_USERCONV_EOC;
 80046e2:	2302      	movs	r3, #2
 80046e4:	702b      	strb	r3, [r5, #0]
      if (RCM_CB_array[handle].cb != NULL)
 80046e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004714 <RCM_ExecUserConv+0x64>)
 80046e8:	f853 7036 	ldr.w	r7, [r3, r6, lsl #3]
 80046ec:	2f00      	cmp	r7, #0
 80046ee:	d0e9      	beq.n	80046c4 <RCM_ExecUserConv+0x14>
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80046f0:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80046f4:	4620      	mov	r0, r4
 80046f6:	685a      	ldr	r2, [r3, #4]
        RCM_UserConvState = RCM_USERCONV_IDLE;
 80046f8:	2300      	movs	r3, #0
 80046fa:	702b      	strb	r3, [r5, #0]
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80046fc:	463b      	mov	r3, r7
}
 80046fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        RCM_CB_array[handle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8004702:	4718      	bx	r3
 8004704:	20001bb0 	.word	0x20001bb0
 8004708:	20001bb4 	.word	0x20001bb4
 800470c:	20001bb6 	.word	0x20001bb6
 8004710:	20001bbc 	.word	0x20001bbc
 8004714:	20001bd4 	.word	0x20001bd4

08004718 <RCM_ExecNextConv>:
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecNextConv(void)
{
  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 8004718:	4b1e      	ldr	r3, [pc, #120]	@ (8004794 <RCM_ExecNextConv+0x7c>)
 800471a:	491f      	ldr	r1, [pc, #124]	@ (8004798 <RCM_ExecNextConv+0x80>)
 800471c:	781a      	ldrb	r2, [r3, #0]
 800471e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8004722:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8004726:	b3a3      	cbz	r3, 8004792 <RCM_ExecNextConv+0x7a>
    /* When this function is called, the ADC conversions triggered by External
       event for current reading has been completed.
       ADC is therefore ready to be started because already stopped */

    /* Clear EOC */
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 8004728:	4b1c      	ldr	r3, [pc, #112]	@ (800479c <RCM_ExecNextConv+0x84>)
{
 800472a:	b510      	push	{r4, lr}
    LL_ADC_ClearFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 800472c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004730:	6818      	ldr	r0, [r3, #0]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8004732:	2404      	movs	r4, #4
 8004734:	6004      	str	r4, [r0, #0]
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
                                 LL_ADC_REG_RANK_1,
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004736:	f893 c004 	ldrb.w	ip, [r3, #4]
 800473a:	2301      	movs	r3, #1
 800473c:	eb0c 044c 	add.w	r4, ip, ip, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004740:	f1bc 0f09 	cmp.w	ip, #9
                                 __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[RCM_currentHandle]->channel));
 8004744:	fa03 f30c 	lsl.w	r3, r3, ip
 8004748:	ea43 638c 	orr.w	r3, r3, ip, lsl #26
 800474c:	bf84      	itt	hi
 800474e:	3c1e      	subhi	r4, #30
 8004750:	ea43 5304 	orrhi.w	r3, r3, r4, lsl #20
 8004754:	ea4f 0e42 	mov.w	lr, r2, lsl #1
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004758:	bf98      	it	ls
 800475a:	ea43 5304 	orrls.w	r3, r3, r4, lsl #20

    (void)LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);

    /* Start ADC for regular conversion */
    LL_ADC_REG_StartConversion(RCM_handle_array[RCM_currentHandle]->regADC);
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800475e:	4496      	add	lr, r2
    LL_ADC_REG_SetSequencerRanks(RCM_handle_array[RCM_currentHandle]->regADC,
 8004760:	bf88      	it	hi
 8004762:	f043 7300 	orrhi.w	r3, r3, #33554432	@ 0x2000000
  MODIFY_REG(*preg,
 8004766:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8004768:	0d1b      	lsrs	r3, r3, #20
 800476a:	f403 63f8 	and.w	r3, r3, #1984	@ 0x7c0
 800476e:	f422 62f8 	bic.w	r2, r2, #1984	@ 0x7c0
 8004772:	4313      	orrs	r3, r2
 8004774:	6303      	str	r3, [r0, #48]	@ 0x30
 8004776:	6c03      	ldr	r3, [r0, #64]	@ 0x40
  MODIFY_REG(ADCx->CR,
 8004778:	6883      	ldr	r3, [r0, #8]
 800477a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
    RCM_NoInj_array[RCM_currentHandle].status = ongoing;
 800477e:	eb01 014e 	add.w	r1, r1, lr, lsl #1
 8004782:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004786:	2401      	movs	r4, #1
 8004788:	f043 0304 	orr.w	r3, r3, #4
 800478c:	6083      	str	r3, [r0, #8]
 800478e:	704c      	strb	r4, [r1, #1]
  }
  else
  {
    /* Nothing to do, conversion not enabled have already notvalid status */
  }
}
 8004790:	bd10      	pop	{r4, pc}
 8004792:	4770      	bx	lr
 8004794:	20001bb8 	.word	0x20001bb8
 8004798:	20001bbc 	.word	0x20001bbc
 800479c:	20001bf4 	.word	0x20001bf4

080047a0 <RCM_ReadOngoingConv>:
 * and user conversion.
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ReadOngoingConv(void)
{
 80047a0:	b430      	push	{r4, r5}
  uint32_t result;
  RCM_status_t status;

  if (true == RCM_NoInj_array [RCM_currentHandle].enable)
 80047a2:	4812      	ldr	r0, [pc, #72]	@ (80047ec <RCM_ReadOngoingConv+0x4c>)
 80047a4:	4a12      	ldr	r2, [pc, #72]	@ (80047f0 <RCM_ReadOngoingConv+0x50>)
 80047a6:	7803      	ldrb	r3, [r0, #0]
 80047a8:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 80047ac:	f812 4011 	ldrb.w	r4, [r2, r1, lsl #1]
 80047b0:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 80047b4:	b16c      	cbz	r4, 80047d2 <RCM_ReadOngoingConv+0x32>
  {
    status = RCM_NoInj_array[RCM_currentHandle].status;
    result = LL_ADC_IsActiveFlag_EOC(RCM_handle_array[RCM_currentHandle]->regADC);
 80047b6:	4c0f      	ldr	r4, [pc, #60]	@ (80047f4 <RCM_ReadOngoingConv+0x54>)
 80047b8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 80047bc:	6824      	ldr	r4, [r4, #0]
  return ((READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC)) ? 1UL : 0UL);
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	076d      	lsls	r5, r5, #29
 80047c2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80047c6:	d406      	bmi.n	80047d6 <RCM_ReadOngoingConv+0x36>
      RCM_NoInj_array[RCM_currentHandle].status = valid;
      /* Restore back DMA configuration */
    }

    /* Prepare next conversion */
    RCM_currentHandle = RCM_NoInj_array [RCM_currentHandle].next;
 80047c8:	449c      	add	ip, r3
 80047ca:	eb02 024c 	add.w	r2, r2, ip, lsl #1
 80047ce:	7953      	ldrb	r3, [r2, #5]
 80047d0:	7003      	strb	r3, [r0, #0]
    }
    else
    {
      /* Nothing to do */
    }
}
 80047d2:	bc30      	pop	{r4, r5}
 80047d4:	4770      	bx	lr
    if (( valid == status ) || ( notvalid == status ) || ( 0U == result ))
 80047d6:	784d      	ldrb	r5, [r1, #1]
 80047d8:	f015 0ffd 	tst.w	r5, #253	@ 0xfd
 80047dc:	d0f4      	beq.n	80047c8 <RCM_ReadOngoingConv+0x28>
 80047de:	6c24      	ldr	r4, [r4, #64]	@ 0x40
 80047e0:	f024 040f 	bic.w	r4, r4, #15
                    = LL_ADC_REG_ReadConversionData12L(RCM_handle_array[RCM_currentHandle]->regADC);
 80047e4:	804c      	strh	r4, [r1, #2]
      RCM_NoInj_array[RCM_currentHandle].status = valid;
 80047e6:	2402      	movs	r4, #2
 80047e8:	704c      	strb	r4, [r1, #1]
 80047ea:	e7ed      	b.n	80047c8 <RCM_ReadOngoingConv+0x28>
 80047ec:	20001bb8 	.word	0x20001bb8
 80047f0:	20001bbc 	.word	0x20001bbc
 80047f4:	20001bf4 	.word	0x20001bf4

080047f8 <USART2_IRQHandler>:
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80047f8:	4b44      	ldr	r3, [pc, #272]	@ (800490c <USART2_IRQHandler+0x114>)
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	0652      	lsls	r2, r2, #25
  * @brief  This function handles USART interrupt request.
  * @param  None
  */
//cstat !MISRAC2012-Rule-8.4
void USART2_IRQHandler(void)
{
 80047fe:	b510      	push	{r4, lr}
 8004800:	d509      	bpl.n	8004816 <USART2_IRQHandler+0x1e>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8004802:	4943      	ldr	r1, [pc, #268]	@ (8004910 <USART2_IRQHandler+0x118>)
    /* Disable the DMA channel to prepare the next chunck of data*/
    LL_DMA_DisableChannel(DMA_TX_A, DMACH_TX_A);
    LL_USART_ClearFlag_TC(USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT(&aspepOverUartA);
 8004804:	4843      	ldr	r0, [pc, #268]	@ (8004914 <USART2_IRQHandler+0x11c>)
 8004806:	69ca      	ldr	r2, [r1, #28]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_TC(USART_TypeDef *USARTx)
{
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8004808:	2440      	movs	r4, #64	@ 0x40
 800480a:	f022 0201 	bic.w	r2, r2, #1
 800480e:	61ca      	str	r2, [r1, #28]
 8004810:	621c      	str	r4, [r3, #32]
 8004812:	f7fc fbdf 	bl	8000fd4 <ASPEP_HWDataTransmittedIT>
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004816:	4b3d      	ldr	r3, [pc, #244]	@ (800490c <USART2_IRQHandler+0x114>)
 8004818:	69d8      	ldr	r0, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 800481a:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 800481c:	69d9      	ldr	r1, [r3, #28]
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(const USART_TypeDef *USARTx)
{
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 800481e:	689b      	ldr	r3, [r3, #8]
  return ((READ_BIT(USARTx->ISR, USART_ISR_NE) == (USART_ISR_NE)) ? 1UL : 0UL);
 8004820:	074c      	lsls	r4, r1, #29
 8004822:	d56a      	bpl.n	80048fa <USART2_IRQHandler+0x102>
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8004824:	07d8      	lsls	r0, r3, #31
 8004826:	d51e      	bpl.n	8004866 <USART2_IRQHandler+0x6e>
  {
    /* Nothing to do */
  }
  else
  { /* Stopping the debugger will generate an OverRun error*/
    WRITE_REG(USARTA->ICR, USART_ICR_FECF | USART_ICR_ORECF | USART_ICR_NECF);
 8004828:	4b38      	ldr	r3, [pc, #224]	@ (800490c <USART2_IRQHandler+0x114>)
 800482a:	220e      	movs	r2, #14
 800482c:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482e:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004832:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004836:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 800483a:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 8004842:	e840 3100 	strex	r1, r3, [r0]
 8004846:	2900      	cmp	r1, #0
 8004848:	d1f3      	bne.n	8004832 <USART2_IRQHandler+0x3a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800484a:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800484e:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 8004852:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004856:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800485a:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 800485e:	e840 3100 	strex	r1, r3, [r0]
 8004862:	2900      	cmp	r1, #0
 8004864:	d1f3      	bne.n	800484e <USART2_IRQHandler+0x56>
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8004866:	4b29      	ldr	r3, [pc, #164]	@ (800490c <USART2_IRQHandler+0x114>)
 8004868:	69da      	ldr	r2, [r3, #28]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 800486a:	681b      	ldr	r3, [r3, #0]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 800486c:	06d2      	lsls	r2, r2, #27
 800486e:	d543      	bpl.n	80048f8 <USART2_IRQHandler+0x100>
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8004870:	06db      	lsls	r3, r3, #27
 8004872:	d541      	bpl.n	80048f8 <USART2_IRQHandler+0x100>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004874:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004878:	f502 6380 	add.w	r3, r2, #1024	@ 0x400
 800487c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004880:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004884:	f502 6080 	add.w	r0, r2, #1024	@ 0x400
 8004888:	e840 3100 	strex	r1, r3, [r0]
 800488c:	2900      	cmp	r1, #0
 800488e:	d1f3      	bne.n	8004878 <USART2_IRQHandler+0x80>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004894:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 8004898:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800489c:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a0:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80048a4:	e840 3100 	strex	r1, r3, [r0]
 80048a8:	2900      	cmp	r1, #0
 80048aa:	d1f3      	bne.n	8004894 <USART2_IRQHandler+0x9c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ac:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80048b0:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80048b4:	e853 3f00 	ldrex	r3, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 80048b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048bc:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80048c0:	e840 3100 	strex	r1, r3, [r0]
 80048c4:	2900      	cmp	r1, #0
 80048c6:	d1f3      	bne.n	80048b0 <USART2_IRQHandler+0xb8>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80048c8:	4b10      	ldr	r3, [pc, #64]	@ (800490c <USART2_IRQHandler+0x114>)
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80048d0:	f502 6381 	add.w	r3, r2, #1032	@ 0x408
 80048d4:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80048d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048dc:	f502 6081 	add.w	r0, r2, #1032	@ 0x408
 80048e0:	e840 3100 	strex	r1, r3, [r0]
 80048e4:	2900      	cmp	r1, #0
 80048e6:	d1f3      	bne.n	80048d0 <USART2_IRQHandler+0xd8>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 80048e8:	4b09      	ldr	r3, [pc, #36]	@ (8004910 <USART2_IRQHandler+0x118>)
    LL_USART_DisableDMAReq_RX(USARTA);
    (void)LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX(USARTA);
    /* Clear pending DMA TC to process only new received packet */
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWReset(&aspepOverUartA);
 80048ea:	480a      	ldr	r0, [pc, #40]	@ (8004914 <USART2_IRQHandler+0x11c>)
 80048ec:	2202      	movs	r2, #2
  }

  /* USER CODE BEGIN USART2_IRQHandler 1 */

  /* USER CODE END USART2_IRQHandler 1 */
}
 80048ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048f2:	605a      	str	r2, [r3, #4]
    ASPEP_HWReset(&aspepOverUartA);
 80048f4:	f7fc bd64 	b.w	80013c0 <ASPEP_HWReset>
}
 80048f8:	bd10      	pop	{r4, pc}
  return ((READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 80048fa:	07d9      	lsls	r1, r3, #31
 80048fc:	d5b3      	bpl.n	8004866 <USART2_IRQHandler+0x6e>
  return ((READ_BIT(USARTx->ISR, USART_ISR_FE) == (USART_ISR_FE)) ? 1UL : 0UL);
 80048fe:	f002 0202 	and.w	r2, r2, #2
  return ((READ_BIT(USARTx->ISR, USART_ISR_ORE) == (USART_ISR_ORE)) ? 1UL : 0UL);
 8004902:	f000 0008 	and.w	r0, r0, #8
  if (0U == flags)
 8004906:	4302      	orrs	r2, r0
 8004908:	d18e      	bne.n	8004828 <USART2_IRQHandler+0x30>
 800490a:	e7ac      	b.n	8004866 <USART2_IRQHandler+0x6e>
 800490c:	40004400 	.word	0x40004400
 8004910:	40020000 	.word	0x40020000
 8004914:	20000460 	.word	0x20000460

08004918 <HardFault_Handler>:
/**
  * @brief  This function handles Hard Fault exception.
  * @param  None
  */
void HardFault_Handler(void)
{
 8004918:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */

  TSK_HardwareFaultTask();
 800491a:	f7fd fce3 	bl	80022e4 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (true)
 800491e:	e7fe      	b.n	800491e <HardFault_Handler+0x6>

08004920 <SysTick_Handler>:

 /* USER CODE END HardFault_IRQn 1 */
}

void SysTick_Handler(void)
{
 8004920:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004922:	4c0d      	ldr	r4, [pc, #52]	@ (8004958 <SysTick_Handler+0x38>)
 8004924:	7823      	ldrb	r3, [r4, #0]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d00f      	beq.n	800494a <SysTick_Handler+0x2a>
  else
  {
    /* Nothing to do */
  }

  SystickDividerCounter ++;
 800492a:	3301      	adds	r3, #1
 800492c:	b2db      	uxtb	r3, r3
  return ((NULL == DMAx) ? 0U : ((READ_BIT(DMAx->ISR,
 800492e:	4a0b      	ldr	r2, [pc, #44]	@ (800495c <SysTick_Handler+0x3c>)
 8004930:	7023      	strb	r3, [r4, #0]
 8004932:	6813      	ldr	r3, [r2, #0]
 8004934:	079b      	lsls	r3, r3, #30
 8004936:	d504      	bpl.n	8004942 <SysTick_Handler+0x22>
    WRITE_REG (DMAx->IFCR, DMA_IFCR_CTCIF1 << ((Channel-LL_DMA_CHANNEL_1)<<2));
 8004938:	2302      	movs	r3, #2
  /* Buffer is ready by the HW layer to be processed */
  /* NO DMA interrupt */
  if (LL_DMA_IsActiveFlag_TC(DMA_RX_A, DMACH_RX_A))
  {
    LL_DMA_ClearFlag_TC(DMA_RX_A, DMACH_RX_A);
    ASPEP_HWDataReceivedIT(&aspepOverUartA);
 800493a:	4809      	ldr	r0, [pc, #36]	@ (8004960 <SysTick_Handler+0x40>)
 800493c:	6053      	str	r3, [r2, #4]
 800493e:	f7fc fcef 	bl	8001320 <ASPEP_HWDataReceivedIT>
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */

  /* USER CODE END SysTick_IRQn 2 */
}
 8004942:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004946:	f7fd bc85 	b.w	8002254 <MC_RunMotorControlTasks>
    HAL_IncTick();
 800494a:	f000 fcf9 	bl	8005340 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800494e:	f001 fd25 	bl	800639c <HAL_SYSTICK_IRQHandler>
    SystickDividerCounter = 0;
 8004952:	2301      	movs	r3, #1
 8004954:	e7eb      	b.n	800492e <SysTick_Handler+0xe>
 8004956:	bf00      	nop
 8004958:	200004e8 	.word	0x200004e8
 800495c:	40020000 	.word	0x40020000
 8004960:	20000460 	.word	0x20000460

08004964 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR1, ExtiLine));
 8004964:	4b04      	ldr	r3, [pc, #16]	@ (8004978 <EXTI15_10_IRQHandler+0x14>)
 8004966:	695a      	ldr	r2, [r3, #20]

  */
void EXTI15_10_IRQHandler(void)
{
  /* USER CODE BEGIN START_STOP_BTN */
  if (LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_10))
 8004968:	0552      	lsls	r2, r2, #21
 800496a:	d400      	bmi.n	800496e <EXTI15_10_IRQHandler+0xa>
  else
  {
    /* Nothing to do */
  }

}
 800496c:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 800496e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004972:	615a      	str	r2, [r3, #20]
    (void)UI_HandleStartStopButton_cb();
 8004974:	f7fd bcc4 	b.w	8002300 <UI_HandleStartStopButton_cb>
 8004978:	40010400 	.word	0x40010400

0800497c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800497c:	b500      	push	{lr}

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800497e:	4b0e      	ldr	r3, [pc, #56]	@ (80049b8 <HAL_MspInit+0x3c>)
 8004980:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004982:	f042 0201 	orr.w	r2, r2, #1
{
 8004986:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004988:	661a      	str	r2, [r3, #96]	@ 0x60
 800498a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800498c:	f002 0201 	and.w	r2, r2, #1
 8004990:	9200      	str	r2, [sp, #0]
 8004992:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004994:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004996:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800499a:	659a      	str	r2, [r3, #88]	@ 0x58
 800499c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800499e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a2:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80049a4:	2004      	movs	r0, #4
  __HAL_RCC_PWR_CLK_ENABLE();
 80049a6:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80049a8:	f001 fc6e 	bl	8006288 <HAL_NVIC_SetPriorityGrouping>
  HAL_PWREx_DisableUCPDDeadBattery();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80049ac:	b003      	add	sp, #12
 80049ae:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_PWREx_DisableUCPDDeadBattery();
 80049b2:	f002 be39 	b.w	8007628 <HAL_PWREx_DisableUCPDDeadBattery>
 80049b6:	bf00      	nop
 80049b8:	40021000 	.word	0x40021000
 80049bc:	00000000 	.word	0x00000000

080049c0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80049c0:	b510      	push	{r4, lr}
 80049c2:	4604      	mov	r4, r0
 80049c4:	b09c      	sub	sp, #112	@ 0x70
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049c6:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049c8:	2244      	movs	r2, #68	@ 0x44
 80049ca:	a80b      	add	r0, sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049cc:	e9cd 1106 	strd	r1, r1, [sp, #24]
 80049d0:	e9cd 1108 	strd	r1, r1, [sp, #32]
 80049d4:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049d6:	f006 fb85 	bl	800b0e4 <memset>
  if(hadc->Instance==ADC1)
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049e0:	d004      	beq.n	80049ec <HAL_ADC_MspInit+0x2c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
  else if(hadc->Instance==ADC2)
 80049e2:	4a43      	ldr	r2, [pc, #268]	@ (8004af0 <HAL_ADC_MspInit+0x130>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d046      	beq.n	8004a76 <HAL_ADC_MspInit+0xb6>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80049e8:	b01c      	add	sp, #112	@ 0x70
 80049ea:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80049ec:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80049f0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049f4:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80049f6:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80049f8:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80049fa:	f003 f9d1 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 80049fe:	2800      	cmp	r0, #0
 8004a00:	d16a      	bne.n	8004ad8 <HAL_ADC_MspInit+0x118>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a02:	4a3c      	ldr	r2, [pc, #240]	@ (8004af4 <HAL_ADC_MspInit+0x134>)
 8004a04:	6813      	ldr	r3, [r2, #0]
 8004a06:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a08:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a0c:	d109      	bne.n	8004a22 <HAL_ADC_MspInit+0x62>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8004af8 <HAL_ADC_MspInit+0x138>)
 8004a10:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a12:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a16:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004a1e:	9301      	str	r3, [sp, #4]
 8004a20:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a22:	4b35      	ldr	r3, [pc, #212]	@ (8004af8 <HAL_ADC_MspInit+0x138>)
 8004a24:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004a2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a2e:	f002 0201 	and.w	r2, r2, #1
 8004a32:	9202      	str	r2, [sp, #8]
 8004a34:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a38:	f042 0202 	orr.w	r2, r2, #2
 8004a3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8004a40:	2005      	movs	r0, #5
 8004a42:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a44:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = M1_BUS_VOLTAGE_Pin|M1_OPAMP1_OUT_Pin;
 8004a48:	e9cd 0106 	strd	r0, r1, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a4c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4e:	2400      	movs	r4, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a50:	a906      	add	r1, sp, #24
 8004a52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004a56:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a58:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a5a:	f002 fa37 	bl	8006ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004a5e:	f244 0202 	movw	r2, #16386	@ 0x4002
 8004a62:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a64:	4825      	ldr	r0, [pc, #148]	@ (8004afc <HAL_ADC_MspInit+0x13c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a66:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a68:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = M1_OPAMP3_OUT_Pin|M1_TEMPERATURE_Pin;
 8004a6a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a6e:	f002 fa2d 	bl	8006ecc <HAL_GPIO_Init>
}
 8004a72:	b01c      	add	sp, #112	@ 0x70
 8004a74:	bd10      	pop	{r4, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a76:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004a7a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a7e:	a80b      	add	r0, sp, #44	@ 0x2c
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8004a80:	920b      	str	r2, [sp, #44]	@ 0x2c
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8004a82:	931a      	str	r3, [sp, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a84:	f003 f98c 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 8004a88:	bb48      	cbnz	r0, 8004ade <HAL_ADC_MspInit+0x11e>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a8a:	4a1a      	ldr	r2, [pc, #104]	@ (8004af4 <HAL_ADC_MspInit+0x134>)
 8004a8c:	6813      	ldr	r3, [r2, #0]
 8004a8e:	3301      	adds	r3, #1
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a90:	2b01      	cmp	r3, #1
    HAL_RCC_ADC12_CLK_ENABLED++;
 8004a92:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8004a94:	d109      	bne.n	8004aaa <HAL_ADC_MspInit+0xea>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8004a96:	4b18      	ldr	r3, [pc, #96]	@ (8004af8 <HAL_ADC_MspInit+0x138>)
 8004a98:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004a9a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aa2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004aa6:	9304      	str	r3, [sp, #16]
 8004aa8:	9b04      	ldr	r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aaa:	4b13      	ldr	r3, [pc, #76]	@ (8004af8 <HAL_ADC_MspInit+0x138>)
 8004aac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004aae:	f042 0201 	orr.w	r2, r2, #1
 8004ab2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8004ab6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8004ae8 <HAL_ADC_MspInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004ac0:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ac2:	2300      	movs	r3, #0
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004ac4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_OUT_Pin;
 8004ac8:	ed8d 7b06 	vstr	d7, [sp, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004acc:	9a05      	ldr	r2, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ace:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(M1_OPAMP2_OUT_GPIO_Port, &GPIO_InitStruct);
 8004ad0:	f002 f9fc 	bl	8006ecc <HAL_GPIO_Init>
}
 8004ad4:	b01c      	add	sp, #112	@ 0x70
 8004ad6:	bd10      	pop	{r4, pc}
      Error_Handler();
 8004ad8:	f7fd f864 	bl	8001ba4 <Error_Handler>
 8004adc:	e791      	b.n	8004a02 <HAL_ADC_MspInit+0x42>
      Error_Handler();
 8004ade:	f7fd f861 	bl	8001ba4 <Error_Handler>
 8004ae2:	e7d2      	b.n	8004a8a <HAL_ADC_MspInit+0xca>
 8004ae4:	f3af 8000 	nop.w
 8004ae8:	00000040 	.word	0x00000040
 8004aec:	00000003 	.word	0x00000003
 8004af0:	50000100 	.word	0x50000100
 8004af4:	20001c04 	.word	0x20001c04
 8004af8:	40021000 	.word	0x40021000
 8004afc:	48000400 	.word	0x48000400

08004b00 <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8004b00:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hcomp->Instance==COMP1)
 8004b02:	6802      	ldr	r2, [r0, #0]
 8004b04:	4934      	ldr	r1, [pc, #208]	@ (8004bd8 <HAL_COMP_MspInit+0xd8>)
{
 8004b06:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b08:	2300      	movs	r3, #0
  if(hcomp->Instance==COMP1)
 8004b0a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b0c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004b10:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004b14:	9308      	str	r3, [sp, #32]
  if(hcomp->Instance==COMP1)
 8004b16:	d008      	beq.n	8004b2a <HAL_COMP_MspInit+0x2a>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
  else if(hcomp->Instance==COMP2)
 8004b18:	4b30      	ldr	r3, [pc, #192]	@ (8004bdc <HAL_COMP_MspInit+0xdc>)
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d01e      	beq.n	8004b5c <HAL_COMP_MspInit+0x5c>

  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }
  else if(hcomp->Instance==COMP4)
 8004b1e:	4b30      	ldr	r3, [pc, #192]	@ (8004be0 <HAL_COMP_MspInit+0xe0>)
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d034      	beq.n	8004b8e <HAL_COMP_MspInit+0x8e>
  /* USER CODE BEGIN COMP4_MspInit 1 */

  /* USER CODE END COMP4_MspInit 1 */
  }

}
 8004b24:	b00b      	add	sp, #44	@ 0x2c
 8004b26:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004b2e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004b32:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8004bc0 <HAL_COMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b36:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8004b46:	a904      	add	r1, sp, #16
 8004b48:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin;
 8004b4c:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b50:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(M1_CURR_SHUNT_U_GPIO_Port, &GPIO_InitStruct);
 8004b52:	f002 f9bb 	bl	8006ecc <HAL_GPIO_Init>
}
 8004b56:	b00b      	add	sp, #44	@ 0x2c
 8004b58:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b5c:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004b60:	f503 73fe 	add.w	r3, r3, #508	@ 0x1fc
 8004b64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004b66:	f042 0201 	orr.w	r2, r2, #1
 8004b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004b6e:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004bc8 <HAL_COMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004b78:	a904      	add	r1, sp, #16
 8004b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_V_Pin;
 8004b7e:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b82:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(M1_CURR_SHUNT_V_GPIO_Port, &GPIO_InitStruct);
 8004b84:	f002 f9a2 	bl	8006ecc <HAL_GPIO_Init>
}
 8004b88:	b00b      	add	sp, #44	@ 0x2c
 8004b8a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b8e:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004b92:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8004b96:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004b98:	4812      	ldr	r0, [pc, #72]	@ (8004be4 <HAL_COMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b9a:	f042 0202 	orr.w	r2, r2, #2
 8004b9e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004ba0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004ba2:	ed9f 7b0b 	vldr	d7, [pc, #44]	@ 8004bd0 <HAL_COMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004bac:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin;
 8004bae:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bb2:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(M1_CURR_SHUNT_W_GPIO_Port, &GPIO_InitStruct);
 8004bb4:	f002 f98a 	bl	8006ecc <HAL_GPIO_Init>
}
 8004bb8:	b00b      	add	sp, #44	@ 0x2c
 8004bba:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bbe:	bf00      	nop
 8004bc0:	00000002 	.word	0x00000002
 8004bc4:	00000003 	.word	0x00000003
 8004bc8:	00000080 	.word	0x00000080
 8004bcc:	00000003 	.word	0x00000003
 8004bd0:	00000001 	.word	0x00000001
 8004bd4:	00000003 	.word	0x00000003
 8004bd8:	40010200 	.word	0x40010200
 8004bdc:	40010204 	.word	0x40010204
 8004be0:	4001020c 	.word	0x4001020c
 8004be4:	48000400 	.word	0x48000400

08004be8 <HAL_CORDIC_MspInit>:
* @param hcordic: CORDIC handle pointer
* @retval None
*/
void HAL_CORDIC_MspInit(CORDIC_HandleTypeDef* hcordic)
{
  if(hcordic->Instance==CORDIC)
 8004be8:	4b09      	ldr	r3, [pc, #36]	@ (8004c10 <HAL_CORDIC_MspInit+0x28>)
 8004bea:	6802      	ldr	r2, [r0, #0]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d000      	beq.n	8004bf2 <HAL_CORDIC_MspInit+0xa>
 8004bf0:	4770      	bx	lr
  {
  /* USER CODE BEGIN CORDIC_MspInit 0 */

  /* USER CODE END CORDIC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004bf2:	f8d3 2448 	ldr.w	r2, [r3, #1096]	@ 0x448
 8004bf6:	f042 0208 	orr.w	r2, r2, #8
{
 8004bfa:	b082      	sub	sp, #8
    __HAL_RCC_CORDIC_CLK_ENABLE();
 8004bfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c00:	649a      	str	r2, [r3, #72]	@ 0x48
 8004c02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	9301      	str	r3, [sp, #4]
 8004c0a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CORDIC_MspInit 1 */

  }

}
 8004c0c:	b002      	add	sp, #8
 8004c0e:	4770      	bx	lr
 8004c10:	40020c00 	.word	0x40020c00

08004c14 <HAL_DAC_MspInit>:
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
  if(hdac->Instance==DAC3)
 8004c14:	4b0a      	ldr	r3, [pc, #40]	@ (8004c40 <HAL_DAC_MspInit+0x2c>)
 8004c16:	6802      	ldr	r2, [r0, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d000      	beq.n	8004c1e <HAL_DAC_MspInit+0xa>
 8004c1c:	4770      	bx	lr
  {
  /* USER CODE BEGIN DAC3_MspInit 0 */

  /* USER CODE END DAC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC3_CLK_ENABLE();
 8004c1e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
 8004c22:	f503 3300 	add.w	r3, r3, #131072	@ 0x20000
{
 8004c26:	b082      	sub	sp, #8
    __HAL_RCC_DAC3_CLK_ENABLE();
 8004c28:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c2a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8004c2e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004c30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c36:	9301      	str	r3, [sp, #4]
 8004c38:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END DAC3_MspInit 1 */

  }

}
 8004c3a:	b002      	add	sp, #8
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	50001000 	.word	0x50001000

08004c44 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8004c44:	b5d0      	push	{r4, r6, r7, lr}
 8004c46:	4604      	mov	r4, r0
 8004c48:	b09a      	sub	sp, #104	@ 0x68
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c4a:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c4c:	2244      	movs	r2, #68	@ 0x44
 8004c4e:	a809      	add	r0, sp, #36	@ 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c50:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004c54:	e9cd 1106 	strd	r1, r1, [sp, #24]
 8004c58:	9108      	str	r1, [sp, #32]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c5a:	f006 fa43 	bl	800b0e4 <memset>
  if(hfdcan->Instance==FDCAN1)
 8004c5e:	4b2f      	ldr	r3, [pc, #188]	@ (8004d1c <HAL_FDCAN_MspInit+0xd8>)
 8004c60:	6822      	ldr	r2, [r4, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d001      	beq.n	8004c6a <HAL_FDCAN_MspInit+0x26>

  /* USER CODE END FDCAN1_MspInit 1 */

  }

}
 8004c66:	b01a      	add	sp, #104	@ 0x68
 8004c68:	bdd0      	pop	{r4, r6, r7, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004c6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004c6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c72:	a809      	add	r0, sp, #36	@ 0x24
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8004c74:	9209      	str	r2, [sp, #36]	@ 0x24
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004c76:	9315      	str	r3, [sp, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004c78:	f003 f892 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 8004c7c:	2800      	cmp	r0, #0
 8004c7e:	d149      	bne.n	8004d14 <HAL_FDCAN_MspInit+0xd0>
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8004c80:	4b27      	ldr	r3, [pc, #156]	@ (8004d20 <HAL_FDCAN_MspInit+0xdc>)
 8004c82:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c84:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8004c88:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c8a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004c8c:	f002 7200 	and.w	r2, r2, #33554432	@ 0x2000000
 8004c90:	9201      	str	r2, [sp, #4]
 8004c92:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c94:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c96:	f042 0201 	orr.w	r2, r2, #1
 8004c9a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004c9c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004c9e:	f002 0201 	and.w	r2, r2, #1
 8004ca2:	9202      	str	r2, [sp, #8]
 8004ca4:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ca6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ca8:	f042 0202 	orr.w	r2, r2, #2
 8004cac:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004cae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004cb0:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004cb4:	2102      	movs	r1, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cb6:	f003 0302 	and.w	r3, r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004cba:	e9cd 0104 	strd	r0, r1, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004cbe:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004cc0:	2600      	movs	r6, #0
 8004cc2:	2700      	movs	r7, #0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004cc4:	2409      	movs	r4, #9
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc6:	a904      	add	r1, sp, #16
 8004cc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ccc:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004cce:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004cd0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cd4:	f002 f8fa 	bl	8006ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cd8:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cda:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004cdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ce0:	4810      	ldr	r0, [pc, #64]	@ (8004d24 <HAL_FDCAN_MspInit+0xe0>)
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8004ce2:	9408      	str	r4, [sp, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ce4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ce8:	e9cd 6706 	strd	r6, r7, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cec:	f002 f8ee 	bl	8006ecc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	4611      	mov	r1, r2
 8004cf4:	2015      	movs	r0, #21
 8004cf6:	f001 fad9 	bl	80062ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8004cfa:	2015      	movs	r0, #21
 8004cfc:	f001 fb12 	bl	8006324 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8004d00:	2200      	movs	r2, #0
 8004d02:	4611      	mov	r1, r2
 8004d04:	2016      	movs	r0, #22
 8004d06:	f001 fad1 	bl	80062ac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8004d0a:	2016      	movs	r0, #22
 8004d0c:	f001 fb0a 	bl	8006324 <HAL_NVIC_EnableIRQ>
}
 8004d10:	b01a      	add	sp, #104	@ 0x68
 8004d12:	bdd0      	pop	{r4, r6, r7, pc}
      Error_Handler();
 8004d14:	f7fc ff46 	bl	8001ba4 <Error_Handler>
 8004d18:	e7b2      	b.n	8004c80 <HAL_FDCAN_MspInit+0x3c>
 8004d1a:	bf00      	nop
 8004d1c:	40006400 	.word	0x40006400
 8004d20:	40021000 	.word	0x40021000
 8004d24:	48000400 	.word	0x48000400

08004d28 <HAL_OPAMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hopamp: OPAMP handle pointer
* @retval None
*/
void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* hopamp)
{
 8004d28:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hopamp->Instance==OPAMP1)
 8004d2a:	6802      	ldr	r2, [r0, #0]
 8004d2c:	4934      	ldr	r1, [pc, #208]	@ (8004e00 <HAL_OPAMP_MspInit+0xd8>)
{
 8004d2e:	b08b      	sub	sp, #44	@ 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d30:	2300      	movs	r3, #0
  if(hopamp->Instance==OPAMP1)
 8004d32:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d34:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004d38:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004d3c:	9308      	str	r3, [sp, #32]
  if(hopamp->Instance==OPAMP1)
 8004d3e:	d008      	beq.n	8004d52 <HAL_OPAMP_MspInit+0x2a>

  /* USER CODE BEGIN OPAMP1_MspInit 1 */

  /* USER CODE END OPAMP1_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP2)
 8004d40:	4b30      	ldr	r3, [pc, #192]	@ (8004e04 <HAL_OPAMP_MspInit+0xdc>)
 8004d42:	429a      	cmp	r2, r3
 8004d44:	d01e      	beq.n	8004d84 <HAL_OPAMP_MspInit+0x5c>

  /* USER CODE BEGIN OPAMP2_MspInit 1 */

  /* USER CODE END OPAMP2_MspInit 1 */
  }
  else if(hopamp->Instance==OPAMP3)
 8004d46:	4b30      	ldr	r3, [pc, #192]	@ (8004e08 <HAL_OPAMP_MspInit+0xe0>)
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d033      	beq.n	8004db4 <HAL_OPAMP_MspInit+0x8c>
  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }

}
 8004d4c:	b00b      	add	sp, #44	@ 0x2c
 8004d4e:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d52:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d56:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8004d5a:	ed9f 7b23 	vldr	d7, [pc, #140]	@ 8004de8 <HAL_OPAMP_MspInit+0xc0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d5e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004d66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d6e:	a904      	add	r1, sp, #16
 8004d70:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_U_Pin|M1_OPAMP1_OUT_Pin|M1_OPAMP1_INT_GAIN_Pin;
 8004d74:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d78:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d7a:	f002 f8a7 	bl	8006ecc <HAL_GPIO_Init>
}
 8004d7e:	b00b      	add	sp, #44	@ 0x2c
 8004d80:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d84:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004d88:	33fc      	adds	r3, #252	@ 0xfc
 8004d8a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8004d94:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8004df0 <HAL_OPAMP_MspInit+0xc8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d98:	f003 0301 	and.w	r3, r3, #1
 8004d9c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d9e:	a904      	add	r1, sp, #16
 8004da0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_OPAMP2_INT_GAIN_Pin|M1_OPAMP2_OUT_Pin|M1_CURR_SHUNT_V_Pin;
 8004da4:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004da8:	9b02      	ldr	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004daa:	f002 f88f 	bl	8006ecc <HAL_GPIO_Init>
}
 8004dae:	b00b      	add	sp, #44	@ 0x2c
 8004db0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004db4:	f503 3386 	add.w	r3, r3, #68608	@ 0x10c00
 8004db8:	33f8      	adds	r3, #248	@ 0xf8
 8004dba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dbc:	4813      	ldr	r0, [pc, #76]	@ (8004e0c <HAL_OPAMP_MspInit+0xe4>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dbe:	f042 0202 	orr.w	r2, r2, #2
 8004dc2:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004dc6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8004df8 <HAL_OPAMP_MspInit+0xd0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_SHUNT_W_Pin|M1_OPAMP3_OUT_Pin|M1_OPAMP3_INT_GAIN_Pin;
 8004dd2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dd6:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dd8:	f002 f878 	bl	8006ecc <HAL_GPIO_Init>
}
 8004ddc:	b00b      	add	sp, #44	@ 0x2c
 8004dde:	f85d fb04 	ldr.w	pc, [sp], #4
 8004de2:	bf00      	nop
 8004de4:	f3af 8000 	nop.w
 8004de8:	0000000e 	.word	0x0000000e
 8004dec:	00000003 	.word	0x00000003
 8004df0:	000000e0 	.word	0x000000e0
 8004df4:	00000003 	.word	0x00000003
 8004df8:	00000007 	.word	0x00000007
 8004dfc:	00000003 	.word	0x00000003
 8004e00:	40010300 	.word	0x40010300
 8004e04:	40010304 	.word	0x40010304
 8004e08:	40010308 	.word	0x40010308
 8004e0c:	48000400 	.word	0x48000400

08004e10 <HAL_TIM_PWM_MspInit>:
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
  if(htim_pwm->Instance==TIM1)
 8004e10:	4b09      	ldr	r3, [pc, #36]	@ (8004e38 <HAL_TIM_PWM_MspInit+0x28>)
 8004e12:	6802      	ldr	r2, [r0, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d000      	beq.n	8004e1a <HAL_TIM_PWM_MspInit+0xa>
 8004e18:	4770      	bx	lr
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e1a:	f503 4364 	add.w	r3, r3, #58368	@ 0xe400
{
 8004e1e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8004e22:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e26:	661a      	str	r2, [r3, #96]	@ 0x60
 8004e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e2e:	9301      	str	r3, [sp, #4]
 8004e30:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END TIM1_MspInit 1 */

  }

}
 8004e32:	b002      	add	sp, #8
 8004e34:	4770      	bx	lr
 8004e36:	bf00      	nop
 8004e38:	40012c00 	.word	0x40012c00

08004e3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004e3c:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004e3e:	4a2b      	ldr	r2, [pc, #172]	@ (8004eec <HAL_TIM_MspPostInit+0xb0>)
 8004e40:	6801      	ldr	r1, [r0, #0]
{
 8004e42:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e44:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 8004e46:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e48:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004e4c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8004e50:	9308      	str	r3, [sp, #32]
  if(htim->Instance==TIM1)
 8004e52:	d001      	beq.n	8004e58 <HAL_TIM_MspPostInit+0x1c>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004e54:	b00a      	add	sp, #40	@ 0x28
 8004e56:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e58:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004e5c:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004e60:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e64:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e66:	f042 0204 	orr.w	r2, r2, #4
 8004e6a:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e6c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e6e:	f002 0204 	and.w	r2, r2, #4
 8004e72:	9201      	str	r2, [sp, #4]
 8004e74:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e76:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e78:	f042 0202 	orr.w	r2, r2, #2
 8004e7c:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e80:	f002 0202 	and.w	r2, r2, #2
 8004e84:	9202      	str	r2, [sp, #8]
 8004e86:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e88:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004e90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004e92:	2102      	movs	r1, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e94:	f003 0301 	and.w	r3, r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004e98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004e9c:	2402      	movs	r4, #2
 8004e9e:	2502      	movs	r5, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004ea2:	2604      	movs	r6, #4
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004ea4:	a904      	add	r1, sp, #16
 8004ea6:	4812      	ldr	r0, [pc, #72]	@ (8004ef0 <HAL_TIM_MspPostInit+0xb4>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea8:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004eaa:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_UL_Pin;
 8004eac:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_UL_GPIO_Port, &GPIO_InitStruct);
 8004eb0:	f002 f80c 	bl	8006ecc <HAL_GPIO_Init>
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004eb4:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004eb6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8004eba:	2302      	movs	r3, #2
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004ebc:	480d      	ldr	r0, [pc, #52]	@ (8004ef4 <HAL_TIM_MspPostInit+0xb8>)
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8004ebe:	9608      	str	r6, [sp, #32]
    GPIO_InitStruct.Pin = M1_PWM_WL_Pin;
 8004ec0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004ec4:	e9cd 4506 	strd	r4, r5, [sp, #24]
    HAL_GPIO_Init(M1_PWM_WL_GPIO_Port, &GPIO_InitStruct);
 8004ec8:	f002 f800 	bl	8006ecc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8004ecc:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ed8:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eda:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin|M1_PWM_VL_Pin;
 8004ede:	e9cd 4506 	strd	r4, r5, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8004ee2:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee4:	f001 fff2 	bl	8006ecc <HAL_GPIO_Init>
}
 8004ee8:	b00a      	add	sp, #40	@ 0x28
 8004eea:	bd70      	pop	{r4, r5, r6, pc}
 8004eec:	40012c00 	.word	0x40012c00
 8004ef0:	48000800 	.word	0x48000800
 8004ef4:	48000400 	.word	0x48000400

08004ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4604      	mov	r4, r0
 8004efc:	b098      	sub	sp, #96	@ 0x60
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004efe:	2100      	movs	r1, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f00:	2244      	movs	r2, #68	@ 0x44
 8004f02:	a807      	add	r0, sp, #28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	e9cd 1102 	strd	r1, r1, [sp, #8]
 8004f08:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8004f0c:	9106      	str	r1, [sp, #24]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f0e:	f006 f8e9 	bl	800b0e4 <memset>
  if(huart->Instance==USART2)
 8004f12:	4b35      	ldr	r3, [pc, #212]	@ (8004fe8 <HAL_UART_MspInit+0xf0>)
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d001      	beq.n	8004f1e <HAL_UART_MspInit+0x26>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8004f1a:	b018      	add	sp, #96	@ 0x60
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f1e:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f20:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f22:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f24:	f002 ff3c 	bl	8007da0 <HAL_RCCEx_PeriphCLKConfig>
 8004f28:	2800      	cmp	r0, #0
 8004f2a:	d14c      	bne.n	8004fc6 <HAL_UART_MspInit+0xce>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f2c:	4b2f      	ldr	r3, [pc, #188]	@ (8004fec <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f2e:	4830      	ldr	r0, [pc, #192]	@ (8004ff0 <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f30:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
    hdma_usart2_rx.Instance = DMA1_Channel1;
 8004f32:	4e30      	ldr	r6, [pc, #192]	@ (8004ff4 <HAL_UART_MspInit+0xfc>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f34:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8004f38:	659a      	str	r2, [r3, #88]	@ 0x58
 8004f3a:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8004f3c:	f402 3200 	and.w	r2, r2, #131072	@ 0x20000
 8004f40:	9200      	str	r2, [sp, #0]
 8004f42:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f44:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004f46:	ed9f 7b24 	vldr	d7, [pc, #144]	@ 8004fd8 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4a:	f042 0202 	orr.w	r2, r2, #2
 8004f4e:	64da      	str	r2, [r3, #76]	@ 0x4c
 8004f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004f52:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004f56:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8004fe0 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f60:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f62:	2307      	movs	r3, #7
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f64:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004f66:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8004f68:	ed8d 7b04 	vstr	d7, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f6c:	f001 ffae 	bl	8006ecc <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004f70:	4921      	ldr	r1, [pc, #132]	@ (8004ff8 <HAL_UART_MspInit+0x100>)
 8004f72:	221a      	movs	r2, #26
 8004f74:	2300      	movs	r3, #0
 8004f76:	e9c6 1200 	strd	r1, r2, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f7a:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004f7c:	2280      	movs	r2, #128	@ 0x80
 8004f7e:	e9c6 3302 	strd	r3, r3, [r6, #8]
 8004f82:	e9c6 2304 	strd	r2, r3, [r6, #16]
 8004f86:	e9c6 3306 	strd	r3, r3, [r6, #24]
 8004f8a:	6233      	str	r3, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004f8c:	f001 fb0c 	bl	80065a8 <HAL_DMA_Init>
 8004f90:	b9f8      	cbnz	r0, 8004fd2 <HAL_UART_MspInit+0xda>
    hdma_usart2_tx.Instance = DMA1_Channel2;
 8004f92:	4d1a      	ldr	r5, [pc, #104]	@ (8004ffc <HAL_UART_MspInit+0x104>)
 8004f94:	491a      	ldr	r1, [pc, #104]	@ (8005000 <HAL_UART_MspInit+0x108>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004f96:	f8c4 6080 	str.w	r6, [r4, #128]	@ 0x80
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004f9a:	221b      	movs	r2, #27
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	e9c5 1200 	strd	r1, r2, [r5]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004fa2:	4628      	mov	r0, r5
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004fa4:	2110      	movs	r1, #16
 8004fa6:	2280      	movs	r2, #128	@ 0x80
 8004fa8:	e9c5 1302 	strd	r1, r3, [r5, #8]
 8004fac:	e9c5 3305 	strd	r3, r3, [r5, #20]
 8004fb0:	e9c5 3307 	strd	r3, r3, [r5, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004fb4:	62b4      	str	r4, [r6, #40]	@ 0x28
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004fb6:	612a      	str	r2, [r5, #16]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004fb8:	f001 faf6 	bl	80065a8 <HAL_DMA_Init>
 8004fbc:	b930      	cbnz	r0, 8004fcc <HAL_UART_MspInit+0xd4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004fbe:	67e5      	str	r5, [r4, #124]	@ 0x7c
 8004fc0:	62ac      	str	r4, [r5, #40]	@ 0x28
}
 8004fc2:	b018      	add	sp, #96	@ 0x60
 8004fc4:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004fc6:	f7fc fded 	bl	8001ba4 <Error_Handler>
 8004fca:	e7af      	b.n	8004f2c <HAL_UART_MspInit+0x34>
      Error_Handler();
 8004fcc:	f7fc fdea 	bl	8001ba4 <Error_Handler>
 8004fd0:	e7f5      	b.n	8004fbe <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8004fd2:	f7fc fde7 	bl	8001ba4 <Error_Handler>
 8004fd6:	e7dc      	b.n	8004f92 <HAL_UART_MspInit+0x9a>
 8004fd8:	00000018 	.word	0x00000018
 8004fdc:	00000002 	.word	0x00000002
	...
 8004fe8:	40004400 	.word	0x40004400
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	48000400 	.word	0x48000400
 8004ff4:	20000600 	.word	0x20000600
 8004ff8:	40020008 	.word	0x40020008
 8004ffc:	200005a0 	.word	0x200005a0
 8005000:	4002001c 	.word	0x4002001c

08005004 <HAL_UART_MspDeInit>:
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
  if(huart->Instance==USART2)
 8005004:	4b0d      	ldr	r3, [pc, #52]	@ (800503c <HAL_UART_MspDeInit+0x38>)
 8005006:	6802      	ldr	r2, [r0, #0]
 8005008:	429a      	cmp	r2, r3
 800500a:	d000      	beq.n	800500e <HAL_UART_MspDeInit+0xa>
 800500c:	4770      	bx	lr
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 800500e:	4a0c      	ldr	r2, [pc, #48]	@ (8005040 <HAL_UART_MspDeInit+0x3c>)
 8005010:	6d93      	ldr	r3, [r2, #88]	@ 0x58
{
 8005012:	b510      	push	{r4, lr}
    __HAL_RCC_USART2_CLK_DISABLE();
 8005014:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005018:	4604      	mov	r4, r0

    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 800501a:	2118      	movs	r1, #24
    __HAL_RCC_USART2_CLK_DISABLE();
 800501c:	6593      	str	r3, [r2, #88]	@ 0x58
    HAL_GPIO_DeInit(GPIOB, UART_TX_Pin|UART_RX_Pin);
 800501e:	4809      	ldr	r0, [pc, #36]	@ (8005044 <HAL_UART_MspDeInit+0x40>)
 8005020:	f002 f912 	bl	8007248 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(huart->hdmarx);
 8005024:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 8005028:	f001 fb50 	bl	80066cc <HAL_DMA_DeInit>
    HAL_DMA_DeInit(huart->hdmatx);
 800502c:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 800502e:	f001 fb4d 	bl	80066cc <HAL_DMA_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8005032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8005036:	2026      	movs	r0, #38	@ 0x26
 8005038:	f001 b982 	b.w	8006340 <HAL_NVIC_DisableIRQ>
 800503c:	40004400 	.word	0x40004400
 8005040:	40021000 	.word	0x40021000
 8005044:	48000400 	.word	0x48000400

08005048 <FDCAN1_IT0_IRQHandler>:
void FDCAN1_IT0_IRQHandler(void)
{
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8005048:	4801      	ldr	r0, [pc, #4]	@ (8005050 <FDCAN1_IT0_IRQHandler+0x8>)
 800504a:	f001 be7b 	b.w	8006d44 <HAL_FDCAN_IRQHandler>
 800504e:	bf00      	nop
 8005050:	200007f4 	.word	0x200007f4

08005054 <FDCAN1_IT1_IRQHandler>:
}

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
 8005054:	4801      	ldr	r0, [pc, #4]	@ (800505c <FDCAN1_IT1_IRQHandler+0x8>)
 8005056:	f001 be75 	b.w	8006d44 <HAL_FDCAN_IRQHandler>
 800505a:	bf00      	nop
 800505c:	200007f4 	.word	0x200007f4

08005060 <ADC1_2_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8005060:	4b02      	ldr	r3, [pc, #8]	@ (800506c <ADC1_2_IRQHandler+0xc>)
 8005062:	2240      	movs	r2, #64	@ 0x40
 8005064:	601a      	str	r2, [r3, #0]

    /* Clear Flags M1 */
    LL_ADC_ClearFlag_JEOS(ADC2);

  /* Highfrequency task */
  (void)TSK_HighFrequencyTask();
 8005066:	f7fd b87b 	b.w	8002160 <TSK_HighFrequencyTask>
 800506a:	bf00      	nop
 800506c:	50000100 	.word	0x50000100

08005070 <TIM1_UP_TIM16_IRQHandler>:
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005070:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(TIM1);
  (void)R3_2_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8005072:	4804      	ldr	r0, [pc, #16]	@ (8005084 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8005074:	f06f 0201 	mvn.w	r2, #1
 8005078:	611a      	str	r2, [r3, #16]
 800507a:	f004 bf99 	b.w	8009fb0 <R3_2_TIMx_UP_IRQHandler>
 800507e:	bf00      	nop
 8005080:	40012c00 	.word	0x40012c00
 8005084:	20000190 	.word	0x20000190

08005088 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8005088:	b508      	push	{r3, lr}
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 800508a:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <TIM1_BRK_TIM15_IRQHandler+0x34>)
 800508c:	691a      	ldr	r2, [r3, #16]
 800508e:	0612      	lsls	r2, r2, #24
 8005090:	d505      	bpl.n	800509e <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8005092:	f06f 0280 	mvn.w	r2, #128	@ 0x80
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    PWMC_OCP_Handler(&PWM_Handle_M1._Super);
 8005096:	480a      	ldr	r0, [pc, #40]	@ (80050c0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8005098:	611a      	str	r2, [r3, #16]
 800509a:	f7fe f853 	bl	8003144 <PWMC_OCP_Handler>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 800509e:	4907      	ldr	r1, [pc, #28]	@ (80050bc <TIM1_BRK_TIM15_IRQHandler+0x34>)
 80050a0:	690b      	ldr	r3, [r1, #16]
 80050a2:	05db      	lsls	r3, r3, #23
 80050a4:	d505      	bpl.n	80050b2 <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80050a6:	f46f 7380 	mvn.w	r3, #256	@ 0x100
    /* Nothing to do */
  }
  else
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    PWMC_OVP_Handler(&PWM_Handle_M1._Super, TIM1);
 80050aa:	4805      	ldr	r0, [pc, #20]	@ (80050c0 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 80050ac:	610b      	str	r3, [r1, #16]
 80050ae:	f7fe f869 	bl	8003184 <PWMC_OVP_Handler>
  MC_RunMotorControlTasks();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80050b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_RunMotorControlTasks();
 80050b6:	f7fd b8cd 	b.w	8002254 <MC_RunMotorControlTasks>
 80050ba:	bf00      	nop
 80050bc:	40012c00 	.word	0x40012c00
 80050c0:	20000190 	.word	0x20000190

080050c4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80050c4:	490c      	ldr	r1, [pc, #48]	@ (80050f8 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050c6:	4a0d      	ldr	r2, [pc, #52]	@ (80050fc <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80050c8:	680b      	ldr	r3, [r1, #0]
{
 80050ca:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80050cc:	4c0c      	ldr	r4, [pc, #48]	@ (8005100 <_sbrk+0x3c>)
 80050ce:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80050d0:	b12b      	cbz	r3, 80050de <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80050d2:	4418      	add	r0, r3
 80050d4:	4290      	cmp	r0, r2
 80050d6:	d807      	bhi.n	80050e8 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80050d8:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80050da:	4618      	mov	r0, r3
 80050dc:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <_sbrk+0x40>)
 80050e0:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80050e2:	4418      	add	r0, r3
 80050e4:	4290      	cmp	r0, r2
 80050e6:	d9f7      	bls.n	80050d8 <_sbrk+0x14>
    errno = ENOMEM;
 80050e8:	f006 f804 	bl	800b0f4 <__errno>
 80050ec:	230c      	movs	r3, #12
 80050ee:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80050f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd10      	pop	{r4, pc}
 80050f8:	20001c08 	.word	0x20001c08
 80050fc:	20008000 	.word	0x20008000
 8005100:	00000400 	.word	0x00000400
 8005104:	20001d60 	.word	0x20001d60

08005108 <uart_debug_print>:
extern UART_HandleTypeDef huart2;
uint8_t uartTxBuffer[UART_TX_BUFFER_SIZE];
volatile bool uartTxDone = true;
extern void MX_USART2_UART_Init(void);

void uart_debug_print(const char *format, ...) {
 8005108:	b40f      	push	{r0, r1, r2, r3}
 800510a:	b570      	push	{r4, r5, r6, lr}
 800510c:	f5ad 6d81 	sub.w	sp, sp, #1032	@ 0x408
 8005110:	f50d 6383 	add.w	r3, sp, #1048	@ 0x418
    char buffer[UART_TX_BUFFER_SIZE];

    va_list args;
    va_start(args, format);
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 8005114:	f44f 6180 	mov.w	r1, #1024	@ 0x400
void uart_debug_print(const char *format, ...) {
 8005118:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(args, format);
 800511c:	9301      	str	r3, [sp, #4]
    int len = vsnprintf(buffer, sizeof(buffer), format, args);
 800511e:	a802      	add	r0, sp, #8
 8005120:	f005 ffd2 	bl	800b0c8 <vsniprintf>
    va_end(args);

    if (len > 0 && len < sizeof(buffer)) {
 8005124:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 8005128:	1e42      	subs	r2, r0, #1
 800512a:	429a      	cmp	r2, r3
 800512c:	d905      	bls.n	800513a <uart_debug_print+0x32>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // LED ON = error
        } else {
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
        }
    }
}
 800512e:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 8005132:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005136:	b004      	add	sp, #16
 8005138:	4770      	bx	lr
 800513a:	4604      	mov	r4, r0
        uint32_t startTick = HAL_GetTick();
 800513c:	f000 f90c 	bl	8005358 <HAL_GetTick>
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 8005140:	4e15      	ldr	r6, [pc, #84]	@ (8005198 <uart_debug_print+0x90>)
        uint32_t startTick = HAL_GetTick();
 8005142:	4605      	mov	r5, r0
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 8005144:	b2a4      	uxth	r4, r4
 8005146:	e004      	b.n	8005152 <uart_debug_print+0x4a>
        } while (status == HAL_BUSY && (HAL_GetTick() - startTick < 200));
 8005148:	f000 f906 	bl	8005358 <HAL_GetTick>
 800514c:	1b40      	subs	r0, r0, r5
 800514e:	28c7      	cmp	r0, #199	@ 0xc7
 8005150:	d812      	bhi.n	8005178 <uart_debug_print+0x70>
            status = HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, 100);  // max 100ms block
 8005152:	2364      	movs	r3, #100	@ 0x64
 8005154:	4622      	mov	r2, r4
 8005156:	a902      	add	r1, sp, #8
 8005158:	4630      	mov	r0, r6
 800515a:	f003 faeb 	bl	8008734 <HAL_UART_Transmit>
        } while (status == HAL_BUSY && (HAL_GetTick() - startTick < 200));
 800515e:	2802      	cmp	r0, #2
 8005160:	d0f2      	beq.n	8005148 <uart_debug_print+0x40>
        if (status != HAL_OK) {
 8005162:	b948      	cbnz	r0, 8005178 <uart_debug_print+0x70>
            HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_6); // blink on success
 8005164:	480d      	ldr	r0, [pc, #52]	@ (800519c <uart_debug_print+0x94>)
 8005166:	2140      	movs	r1, #64	@ 0x40
 8005168:	f002 f96a 	bl	8007440 <HAL_GPIO_TogglePin>
}
 800516c:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 8005170:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005174:	b004      	add	sp, #16
 8005176:	4770      	bx	lr
            HAL_UART_DeInit(&huart2);
 8005178:	4807      	ldr	r0, [pc, #28]	@ (8005198 <uart_debug_print+0x90>)
 800517a:	f003 fabb 	bl	80086f4 <HAL_UART_DeInit>
            MX_USART2_UART_Init();
 800517e:	f7fc f97b 	bl	8001478 <MX_USART2_UART_Init>
            HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6, GPIO_PIN_SET); // LED ON = error
 8005182:	4806      	ldr	r0, [pc, #24]	@ (800519c <uart_debug_print+0x94>)
 8005184:	2201      	movs	r2, #1
 8005186:	2140      	movs	r1, #64	@ 0x40
 8005188:	f002 f954 	bl	8007434 <HAL_GPIO_WritePin>
}
 800518c:	f50d 6d81 	add.w	sp, sp, #1032	@ 0x408
 8005190:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005194:	b004      	add	sp, #16
 8005196:	4770      	bx	lr
 8005198:	20000660 	.word	0x20000660
 800519c:	48000800 	.word	0x48000800

080051a0 <UASPEP_INIT>:
  * @brief  Initialization of the Hardware used for data transmission and reception.
  *
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_INIT(void *pHWHandle)
{
 80051a0:	b430      	push	{r4, r5}
#endif
    /* DMA interrupt not used for all families */
    /* Enable DMA end of transfer on UART RX channel completion */
    /* LL_DMA_EnableIT_TC(pHandle->rxDMA, pHandle->rxChannel) */
    /* Enable Error interrupt (EIE) to unmask Overrun interrupt */
    LL_USART_EnableIT_ERROR(pHandle->USARTx);
 80051a2:	6802      	ldr	r2, [r0, #0]
__STATIC_INLINE void LL_USART_EnableIT_ERROR(USART_TypeDef *USARTx)
 80051a4:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80051ac:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b0:	e841 3400 	strex	r4, r3, [r1]
 80051b4:	2c00      	cmp	r4, #0
 80051b6:	d1f7      	bne.n	80051a8 <UASPEP_INIT+0x8>
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphAddress)
{
  uint32_t dma_base_addr = (uint32_t)DMAx;
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 80051b8:	68c1      	ldr	r1, [r0, #12]
 80051ba:	4d19      	ldr	r5, [pc, #100]	@ (8005220 <UASPEP_INIT+0x80>)
 80051bc:	6843      	ldr	r3, [r0, #4]
 80051be:	5c6c      	ldrb	r4, [r5, r1]
 80051c0:	4423      	add	r3, r4

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->RDR);
 80051c2:	f102 0124 	add.w	r1, r2, #36	@ 0x24
 80051c6:	6099      	str	r1, [r3, #8]
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80051c8:	2340      	movs	r3, #64	@ 0x40
 80051ca:	6213      	str	r3, [r2, #32]
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
 80051cc:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80051d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d8:	e841 3400 	strex	r4, r3, [r1]
 80051dc:	2c00      	cmp	r4, #0
 80051de:	d1f7      	bne.n	80051d0 <UASPEP_INIT+0x30>
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 80051e0:	2340      	movs	r3, #64	@ 0x40
 80051e2:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e4:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 80051e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	e842 3100 	strex	r1, r3, [r2]
 80051f0:	2900      	cmp	r1, #0
 80051f2:	d1f7      	bne.n	80051e4 <UASPEP_INIT+0x44>
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
 80051f4:	f102 0108 	add.w	r1, r2, #8
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80051fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005200:	e841 3400 	strex	r4, r3, [r1]
 8005204:	2c00      	cmp	r4, #0
 8005206:	d1f7      	bne.n	80051f8 <UASPEP_INIT+0x58>
 8005208:	6901      	ldr	r1, [r0, #16]
 800520a:	6883      	ldr	r3, [r0, #8]
 800520c:	5c69      	ldrb	r1, [r5, r1]
 800520e:	440b      	add	r3, r1
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->TDR);
 8005210:	f102 0028 	add.w	r0, r2, #40	@ 0x28
  WRITE_REG(USARTx->ICR, USART_ICR_TCCF);
 8005214:	2140      	movs	r1, #64	@ 0x40
 8005216:	6098      	str	r0, [r3, #8]
}
 8005218:	bc30      	pop	{r4, r5}
 800521a:	6211      	str	r1, [r2, #32]
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	0800c09c 	.word	0x0800c09c

08005224 <UASPEP_CFG_TRANSMISSION>:
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005224:	6903      	ldr	r3, [r0, #16]
 8005226:	6880      	ldr	r0, [r0, #8]
  * @param  pHWHandle Hardware components chosen for communication
  * @param  data Data to be transmitted to controller
  * @param  length Length of the data to be transmitted
  */
void UASPEP_CFG_TRANSMISSION(void *pHWHandle, void *data, uint16_t length)
{
 8005228:	b410      	push	{r4}
 800522a:	4c0b      	ldr	r4, [pc, #44]	@ (8005258 <UASPEP_CFG_TRANSMISSION+0x34>)
 800522c:	5ce3      	ldrb	r3, [r4, r3]
 800522e:	58c4      	ldr	r4, [r0, r3]
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005230:	07e4      	lsls	r4, r4, #31
  return ((READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8005232:	eb00 0c03 	add.w	ip, r0, r3
                    DMA_CCR_EN) == (DMA_CCR_EN)) ? 1UL : 0UL);
 8005236:	d40c      	bmi.n	8005252 <UASPEP_CFG_TRANSMISSION+0x2e>
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005238:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800523c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8005240:	f36f 010f 	bfc	r1, #0, #16
 8005244:	430a      	orrs	r2, r1
 8005246:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800524a:	58c2      	ldr	r2, [r0, r3]
 800524c:	f042 0201 	orr.w	r2, r2, #1
 8005250:	50c2      	str	r2, [r0, r3]
  }
  else
  {
    /* Nothing to do */
  }
}
 8005252:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	0800c09c 	.word	0x0800c09c

0800525c <UASPEP_CFG_RECEPTION>:
  * @param  pHWHandle Hardware components chosen for communication
  * @param  buffer Buffer which will receive the communicated data
  * @param  length Length of the received data
  */
void UASPEP_CFG_RECEPTION(void *pHWHandle, void* buffer, uint16_t length)
{
 800525c:	b410      	push	{r4}
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800525e:	68c3      	ldr	r3, [r0, #12]
 8005260:	4c0c      	ldr	r4, [pc, #48]	@ (8005294 <UASPEP_CFG_RECEPTION+0x38>)
 8005262:	6840      	ldr	r0, [r0, #4]
 8005264:	5ce3      	ldrb	r3, [r4, r3]
 8005266:	58c4      	ldr	r4, [r0, r3]
 8005268:	eb00 0c03 	add.w	ip, r0, r3
 800526c:	f024 0401 	bic.w	r4, r4, #1
 8005270:	50c4      	str	r4, [r0, r3]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 8005272:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8005276:	f8dc 1004 	ldr.w	r1, [ip, #4]
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);

  LL_DMA_EnableChannel(pHandle->rxDMA, pHandle->rxChannel);
}
 800527a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800527e:	f36f 010f 	bfc	r1, #0, #16
 8005282:	4311      	orrs	r1, r2
 8005284:	f8cc 1004 	str.w	r1, [ip, #4]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 8005288:	58c2      	ldr	r2, [r0, r3]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	50c2      	str	r2, [r0, r3]
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	0800c09c 	.word	0x0800c09c

08005298 <UASPEP_IDLE_ENABLE>:
  * @param  pHandle Handler of the current instance of the UASPEP component
  */
void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8005298:	6802      	ldr	r2, [r0, #0]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 800529a:	2310      	movs	r3, #16
 800529c:	6213      	str	r3, [r2, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80052a2:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	e842 3100 	strex	r1, r3, [r2]
 80052aa:	2900      	cmp	r1, #0
 80052ac:	d1f7      	bne.n	800529e <UASPEP_IDLE_ENABLE+0x6>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80052ae:	4770      	bx	lr

080052b0 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80052b0:	4a03      	ldr	r2, [pc, #12]	@ (80052c0 <SystemInit+0x10>)
 80052b2:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 80052b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80052ba:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80052be:	4770      	bx	lr
 80052c0:	e000ed00 	.word	0xe000ed00

080052c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80052c4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80052c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005304 <HAL_InitTick+0x40>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	b90b      	cbnz	r3, 80052d0 <HAL_InitTick+0xc>
        status = HAL_ERROR;
      }
    }
    else
    {
      status = HAL_ERROR;
 80052cc:	2001      	movs	r0, #1
    status = HAL_ERROR;
  }

  /* Return function status */
  return status;
}
 80052ce:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80052d0:	490d      	ldr	r1, [pc, #52]	@ (8005308 <HAL_InitTick+0x44>)
 80052d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80052d6:	4605      	mov	r5, r0
 80052d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052dc:	6808      	ldr	r0, [r1, #0]
 80052de:	fbb0 f0f3 	udiv	r0, r0, r3
 80052e2:	f001 f83f 	bl	8006364 <HAL_SYSTICK_Config>
 80052e6:	4604      	mov	r4, r0
 80052e8:	2800      	cmp	r0, #0
 80052ea:	d1ef      	bne.n	80052cc <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052ec:	2d0f      	cmp	r5, #15
 80052ee:	d8ed      	bhi.n	80052cc <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80052f0:	4602      	mov	r2, r0
 80052f2:	4629      	mov	r1, r5
 80052f4:	f04f 30ff 	mov.w	r0, #4294967295
 80052f8:	f000 ffd8 	bl	80062ac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052fc:	4b03      	ldr	r3, [pc, #12]	@ (800530c <HAL_InitTick+0x48>)
 80052fe:	4620      	mov	r0, r4
 8005300:	601d      	str	r5, [r3, #0]
}
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	200004f0 	.word	0x200004f0
 8005308:	200004ec 	.word	0x200004ec
 800530c:	200004f4 	.word	0x200004f4

08005310 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005310:	4a0a      	ldr	r2, [pc, #40]	@ (800533c <HAL_Init+0x2c>)
 8005312:	6813      	ldr	r3, [r2, #0]
 8005314:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
{
 8005318:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800531a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800531c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800531e:	f000 ffb3 	bl	8006288 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005322:	2004      	movs	r0, #4
 8005324:	f7ff ffce 	bl	80052c4 <HAL_InitTick>
 8005328:	b110      	cbz	r0, 8005330 <HAL_Init+0x20>
    status = HAL_ERROR;
 800532a:	2401      	movs	r4, #1
}
 800532c:	4620      	mov	r0, r4
 800532e:	bd10      	pop	{r4, pc}
 8005330:	4604      	mov	r4, r0
    HAL_MspInit();
 8005332:	f7ff fb23 	bl	800497c <HAL_MspInit>
}
 8005336:	4620      	mov	r0, r4
 8005338:	bd10      	pop	{r4, pc}
 800533a:	bf00      	nop
 800533c:	40022000 	.word	0x40022000

08005340 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005340:	4a03      	ldr	r2, [pc, #12]	@ (8005350 <HAL_IncTick+0x10>)
 8005342:	4904      	ldr	r1, [pc, #16]	@ (8005354 <HAL_IncTick+0x14>)
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	6809      	ldr	r1, [r1, #0]
 8005348:	440b      	add	r3, r1
 800534a:	6013      	str	r3, [r2, #0]
}
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20001c0c 	.word	0x20001c0c
 8005354:	200004f0 	.word	0x200004f0

08005358 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005358:	4b01      	ldr	r3, [pc, #4]	@ (8005360 <HAL_GetTick+0x8>)
 800535a:	6818      	ldr	r0, [r3, #0]
}
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	20001c0c 	.word	0x20001c0c

08005364 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005364:	b538      	push	{r3, r4, r5, lr}
 8005366:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005368:	f7ff fff6 	bl	8005358 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800536c:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 800536e:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8005370:	d002      	beq.n	8005378 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8005372:	4b04      	ldr	r3, [pc, #16]	@ (8005384 <HAL_Delay+0x20>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	441c      	add	r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005378:	f7ff ffee 	bl	8005358 <HAL_GetTick>
 800537c:	1b40      	subs	r0, r0, r5
 800537e:	42a0      	cmp	r0, r4
 8005380:	d3fa      	bcc.n	8005378 <HAL_Delay+0x14>
  {
  }
}
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	200004f0 	.word	0x200004f0

08005388 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005388:	b530      	push	{r4, r5, lr}
 800538a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800538c:	2300      	movs	r3, #0
 800538e:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8005390:	2800      	cmp	r0, #0
 8005392:	f000 80aa 	beq.w	80054ea <HAL_ADC_Init+0x162>
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005396:	6dc5      	ldr	r5, [r0, #92]	@ 0x5c
 8005398:	4604      	mov	r4, r0
 800539a:	2d00      	cmp	r5, #0
 800539c:	f000 80aa 	beq.w	80054f4 <HAL_ADC_Init+0x16c>
    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80053a0:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80053a2:	6893      	ldr	r3, [r2, #8]
 80053a4:	009d      	lsls	r5, r3, #2
 80053a6:	d505      	bpl.n	80053b4 <HAL_ADC_Init+0x2c>
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80053a8:	6893      	ldr	r3, [r2, #8]
 80053aa:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80053ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80053b2:	6093      	str	r3, [r2, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053b4:	6893      	ldr	r3, [r2, #8]
 80053b6:	00d8      	lsls	r0, r3, #3
 80053b8:	d419      	bmi.n	80053ee <HAL_ADC_Init+0x66>
    LL_ADC_EnableInternalRegulator(hadc->Instance);

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80053ba:	4b68      	ldr	r3, [pc, #416]	@ (800555c <HAL_ADC_Init+0x1d4>)
 80053bc:	4868      	ldr	r0, [pc, #416]	@ (8005560 <HAL_ADC_Init+0x1d8>)
 80053be:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(ADCx->CR,
 80053c0:	6891      	ldr	r1, [r2, #8]
 80053c2:	099b      	lsrs	r3, r3, #6
 80053c4:	fba0 0303 	umull	r0, r3, r0, r3
 80053c8:	f021 4110 	bic.w	r1, r1, #2415919104	@ 0x90000000
 80053cc:	099b      	lsrs	r3, r3, #6
 80053ce:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80053d2:	3301      	adds	r3, #1
 80053d4:	005b      	lsls	r3, r3, #1
 80053d6:	f041 5180 	orr.w	r1, r1, #268435456	@ 0x10000000
 80053da:	6091      	str	r1, [r2, #8]
 80053dc:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80053de:	9b01      	ldr	r3, [sp, #4]
 80053e0:	b12b      	cbz	r3, 80053ee <HAL_ADC_Init+0x66>
    {
      wait_loop_index--;
 80053e2:	9b01      	ldr	r3, [sp, #4]
 80053e4:	3b01      	subs	r3, #1
 80053e6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80053e8:	9b01      	ldr	r3, [sp, #4]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f9      	bne.n	80053e2 <HAL_ADC_Init+0x5a>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80053ee:	6893      	ldr	r3, [r2, #8]
 80053f0:	00d9      	lsls	r1, r3, #3
 80053f2:	d47d      	bmi.n	80054f0 <HAL_ADC_Init+0x168>
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053f4:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80053f6:	f043 0310 	orr.w	r3, r3, #16
 80053fa:	65e3      	str	r3, [r4, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fc:	6e23      	ldr	r3, [r4, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80053fe:	2001      	movs	r0, #1
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005400:	4303      	orrs	r3, r0
 8005402:	6623      	str	r3, [r4, #96]	@ 0x60
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005404:	6893      	ldr	r3, [r2, #8]
 8005406:	f013 0f04 	tst.w	r3, #4
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800540a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 800540c:	d169      	bne.n	80054e2 <HAL_ADC_Init+0x15a>
 800540e:	06db      	lsls	r3, r3, #27
 8005410:	d467      	bmi.n	80054e2 <HAL_ADC_Init+0x15a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005412:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8005414:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8005418:	f043 0302 	orr.w	r3, r3, #2
 800541c:	65e3      	str	r3, [r4, #92]	@ 0x5c
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800541e:	6893      	ldr	r3, [r2, #8]
 8005420:	07dd      	lsls	r5, r3, #31
 8005422:	d409      	bmi.n	8005438 <HAL_ADC_Init+0xb0>
 8005424:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	f013 0f01 	tst.w	r3, #1
 800542e:	4b4d      	ldr	r3, [pc, #308]	@ (8005564 <HAL_ADC_Init+0x1dc>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	d101      	bne.n	8005438 <HAL_ADC_Init+0xb0>
 8005434:	07d9      	lsls	r1, r3, #31
 8005436:	d57a      	bpl.n	800552e <HAL_ADC_Init+0x1a6>
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
                 hadc->Init.Overrun                                                     |
                 hadc->Init.DataAlign                                                   |
 8005438:	68e5      	ldr	r5, [r4, #12]
 800543a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
                 hadc->Init.Resolution                                                  |
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800543c:	f894 1024 	ldrb.w	r1, [r4, #36]	@ 0x24
                 hadc->Init.DataAlign                                                   |
 8005440:	432b      	orrs	r3, r5
 8005442:	68a5      	ldr	r5, [r4, #8]
 8005444:	432b      	orrs	r3, r5
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005446:	7f65      	ldrb	r5, [r4, #29]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005448:	2901      	cmp	r1, #1
                 hadc->Init.DataAlign                                                   |
 800544a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800544e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005452:	d055      	beq.n	8005500 <HAL_ADC_Init+0x178>
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005454:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8005456:	b121      	cbz	r1, 8005462 <HAL_ADC_Init+0xda>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
                   | hadc->Init.ExternalTrigConvEdge
 8005458:	6b25      	ldr	r5, [r4, #48]	@ 0x30
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800545a:	f401 7178 	and.w	r1, r1, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800545e:	4329      	orrs	r1, r5
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005460:	430b      	orrs	r3, r1
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8005462:	68d5      	ldr	r5, [r2, #12]
 8005464:	4940      	ldr	r1, [pc, #256]	@ (8005568 <HAL_ADC_Init+0x1e0>)
 8005466:	4029      	ands	r1, r5
 8005468:	4319      	orrs	r1, r3
 800546a:	60d1      	str	r1, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800546c:	6913      	ldr	r3, [r2, #16]
 800546e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005470:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8005474:	430b      	orrs	r3, r1
 8005476:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005478:	6893      	ldr	r3, [r2, #8]
 800547a:	071b      	lsls	r3, r3, #28
 800547c:	d422      	bmi.n	80054c4 <HAL_ADC_Init+0x13c>
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800547e:	68d1      	ldr	r1, [r2, #12]
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005480:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005484:	7f25      	ldrb	r5, [r4, #28]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005486:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800548a:	005b      	lsls	r3, r3, #1
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800548c:	f021 0102 	bic.w	r1, r1, #2
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8005490:	ea43 3385 	orr.w	r3, r3, r5, lsl #14
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005494:	430b      	orrs	r3, r1

      if (hadc->Init.GainCompensation != 0UL)
 8005496:	6921      	ldr	r1, [r4, #16]
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8005498:	60d3      	str	r3, [r2, #12]
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800549a:	6913      	ldr	r3, [r2, #16]
      if (hadc->Init.GainCompensation != 0UL)
 800549c:	2900      	cmp	r1, #0
 800549e:	d03c      	beq.n	800551a <HAL_ADC_Init+0x192>
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80054a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054a4:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80054a6:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 80054aa:	f36f 030d 	bfc	r3, #0, #14
 80054ae:	430b      	orrs	r3, r1
 80054b0:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80054b4:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d040      	beq.n	800553e <HAL_ADC_Init+0x1b6>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80054bc:	6913      	ldr	r3, [r2, #16]
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	6113      	str	r3, [r2, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80054c4:	6963      	ldr	r3, [r4, #20]
 80054c6:	2b01      	cmp	r3, #1
 80054c8:	d01f      	beq.n	800550a <HAL_ADC_Init+0x182>
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80054ca:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80054cc:	f023 030f 	bic.w	r3, r3, #15
 80054d0:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80054d2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80054d4:	f023 0303 	bic.w	r3, r3, #3
 80054d8:	f043 0301 	orr.w	r3, r3, #1
 80054dc:	65e3      	str	r3, [r4, #92]	@ 0x5c
    tmp_hal_status = HAL_ERROR;
  }

  /* Return function status */
  return tmp_hal_status;
}
 80054de:	b003      	add	sp, #12
 80054e0:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80054e2:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 80054e4:	f043 0310 	orr.w	r3, r3, #16
 80054e8:	65e3      	str	r3, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80054ea:	2001      	movs	r0, #1
}
 80054ec:	b003      	add	sp, #12
 80054ee:	bd30      	pop	{r4, r5, pc}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80054f0:	2000      	movs	r0, #0
 80054f2:	e787      	b.n	8005404 <HAL_ADC_Init+0x7c>
    HAL_ADC_MspInit(hadc);
 80054f4:	f7ff fa64 	bl	80049c0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80054f8:	6625      	str	r5, [r4, #96]	@ 0x60
    hadc->Lock = HAL_UNLOCKED;
 80054fa:	f884 5058 	strb.w	r5, [r4, #88]	@ 0x58
 80054fe:	e74f      	b.n	80053a0 <HAL_ADC_Init+0x18>
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005500:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8005502:	3901      	subs	r1, #1
 8005504:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8005508:	e7a4      	b.n	8005454 <HAL_ADC_Init+0xcc>
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800550a:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 800550c:	6a23      	ldr	r3, [r4, #32]
 800550e:	f021 010f 	bic.w	r1, r1, #15
 8005512:	3b01      	subs	r3, #1
 8005514:	430b      	orrs	r3, r1
 8005516:	6313      	str	r3, [r2, #48]	@ 0x30
 8005518:	e7db      	b.n	80054d2 <HAL_ADC_Init+0x14a>
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800551a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800551e:	6113      	str	r3, [r2, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005520:	f8d2 30c0 	ldr.w	r3, [r2, #192]	@ 0xc0
 8005524:	f36f 030d 	bfc	r3, #0, #14
 8005528:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 800552c:	e7c2      	b.n	80054b4 <HAL_ADC_Init+0x12c>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800552e:	490f      	ldr	r1, [pc, #60]	@ (800556c <HAL_ADC_Init+0x1e4>)
 8005530:	6865      	ldr	r5, [r4, #4]
 8005532:	688b      	ldr	r3, [r1, #8]
 8005534:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
 8005538:	432b      	orrs	r3, r5
 800553a:	608b      	str	r3, [r1, #8]
}
 800553c:	e77c      	b.n	8005438 <HAL_ADC_Init+0xb0>
        MODIFY_REG(hadc->Instance->CFGR2,
 800553e:	6911      	ldr	r1, [r2, #16]
 8005540:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8005542:	6ca5      	ldr	r5, [r4, #72]	@ 0x48
 8005544:	f36f 018a 	bfc	r1, #2, #9
 8005548:	432b      	orrs	r3, r5
 800554a:	430b      	orrs	r3, r1
 800554c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800554e:	430b      	orrs	r3, r1
 8005550:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 8005552:	430b      	orrs	r3, r1
 8005554:	f043 0301 	orr.w	r3, r3, #1
 8005558:	6113      	str	r3, [r2, #16]
 800555a:	e7b3      	b.n	80054c4 <HAL_ADC_Init+0x13c>
 800555c:	200004ec 	.word	0x200004ec
 8005560:	053e2d63 	.word	0x053e2d63
 8005564:	50000100 	.word	0x50000100
 8005568:	fff04007 	.word	0xfff04007
 800556c:	50000300 	.word	0x50000300

08005570 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8005570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005574:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
{
 8005578:	b082      	sub	sp, #8
 800557a:	4603      	mov	r3, r0
  __HAL_LOCK(hadc);
 800557c:	2a01      	cmp	r2, #1
  __IO uint32_t wait_loop_index = 0UL;
 800557e:	f04f 0000 	mov.w	r0, #0
 8005582:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005584:	f000 812d 	beq.w	80057e2 <HAL_ADC_ConfigChannel+0x272>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005588:	681a      	ldr	r2, [r3, #0]
  __HAL_LOCK(hadc);
 800558a:	2001      	movs	r0, #1
 800558c:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005590:	6894      	ldr	r4, [r2, #8]
 8005592:	0764      	lsls	r4, r4, #29
 8005594:	d455      	bmi.n	8005642 <HAL_ADC_ConfigChannel+0xd2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8005596:	6848      	ldr	r0, [r1, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8005598:	ea4f 1e90 	mov.w	lr, r0, lsr #6
  MODIFY_REG(*preg,
 800559c:	f000 0c1f 	and.w	ip, r0, #31
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055a0:	f00e 0e0c 	and.w	lr, lr, #12
  MODIFY_REG(*preg,
 80055a4:	6808      	ldr	r0, [r1, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80055a6:	f102 0430 	add.w	r4, r2, #48	@ 0x30
  MODIFY_REG(*preg,
 80055aa:	f3c0 6084 	ubfx	r0, r0, #26, #5
 80055ae:	f854 500e 	ldr.w	r5, [r4, lr]
 80055b2:	261f      	movs	r6, #31
 80055b4:	fa00 f00c 	lsl.w	r0, r0, ip
 80055b8:	fa06 fc0c 	lsl.w	ip, r6, ip
 80055bc:	ea25 0c0c 	bic.w	ip, r5, ip
 80055c0:	ea40 000c 	orr.w	r0, r0, ip
 80055c4:	f844 000e 	str.w	r0, [r4, lr]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80055c8:	6890      	ldr	r0, [r2, #8]
 80055ca:	0747      	lsls	r7, r0, #29
 80055cc:	d543      	bpl.n	8005656 <HAL_ADC_ConfigChannel+0xe6>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80055ce:	6890      	ldr	r0, [r2, #8]
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80055d0:	6808      	ldr	r0, [r1, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80055d2:	6894      	ldr	r4, [r2, #8]
 80055d4:	07e5      	lsls	r5, r4, #31
 80055d6:	d412      	bmi.n	80055fe <HAL_ADC_ConfigChannel+0x8e>
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80055d8:	68ce      	ldr	r6, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 80055da:	4cb0      	ldr	r4, [pc, #704]	@ (800589c <HAL_ADC_ConfigChannel+0x32c>)
 80055dc:	f8d2 50b0 	ldr.w	r5, [r2, #176]	@ 0xb0
 80055e0:	f006 0718 	and.w	r7, r6, #24
 80055e4:	40fc      	lsrs	r4, r7
 80055e6:	f3c0 0712 	ubfx	r7, r0, #0, #19
 80055ea:	4004      	ands	r4, r0
 80055ec:	ea25 0507 	bic.w	r5, r5, r7
 80055f0:	432c      	orrs	r4, r5
 80055f2:	f8c2 40b0 	str.w	r4, [r2, #176]	@ 0xb0

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80055f6:	4caa      	ldr	r4, [pc, #680]	@ (80058a0 <HAL_ADC_ConfigChannel+0x330>)
 80055f8:	42a6      	cmp	r6, r4
 80055fa:	f000 80a2 	beq.w	8005742 <HAL_ADC_ConfigChannel+0x1d2>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80055fe:	49a9      	ldr	r1, [pc, #676]	@ (80058a4 <HAL_ADC_ConfigChannel+0x334>)
 8005600:	4208      	tst	r0, r1
 8005602:	d01c      	beq.n	800563e <HAL_ADC_ConfigChannel+0xce>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005604:	4ca8      	ldr	r4, [pc, #672]	@ (80058a8 <HAL_ADC_ConfigChannel+0x338>)
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005606:	4da9      	ldr	r5, [pc, #676]	@ (80058ac <HAL_ADC_ConfigChannel+0x33c>)
 8005608:	68a1      	ldr	r1, [r4, #8]
 800560a:	42a8      	cmp	r0, r5
 800560c:	f001 76e0 	and.w	r6, r1, #29360128	@ 0x1c00000
 8005610:	d074      	beq.n	80056fc <HAL_ADC_ConfigChannel+0x18c>
 8005612:	4da7      	ldr	r5, [pc, #668]	@ (80058b0 <HAL_ADC_ConfigChannel+0x340>)
 8005614:	42a8      	cmp	r0, r5
 8005616:	d071      	beq.n	80056fc <HAL_ADC_ConfigChannel+0x18c>
          {
            wait_loop_index--;
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8005618:	4da6      	ldr	r5, [pc, #664]	@ (80058b4 <HAL_ADC_ConfigChannel+0x344>)
 800561a:	42a8      	cmp	r0, r5
 800561c:	f000 80e5 	beq.w	80057ea <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8005620:	4da5      	ldr	r5, [pc, #660]	@ (80058b8 <HAL_ADC_ConfigChannel+0x348>)
 8005622:	42a8      	cmp	r0, r5
 8005624:	d10b      	bne.n	800563e <HAL_ADC_ConfigChannel+0xce>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005626:	0249      	lsls	r1, r1, #9
 8005628:	d409      	bmi.n	800563e <HAL_ADC_ConfigChannel+0xce>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800562a:	49a4      	ldr	r1, [pc, #656]	@ (80058bc <HAL_ADC_ConfigChannel+0x34c>)
 800562c:	428a      	cmp	r2, r1
 800562e:	d006      	beq.n	800563e <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005630:	68a2      	ldr	r2, [r4, #8]
 8005632:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005636:	4332      	orrs	r2, r6
 8005638:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 800563c:	60a2      	str	r2, [r4, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800563e:	2000      	movs	r0, #0
 8005640:	e003      	b.n	800564a <HAL_ADC_ConfigChannel+0xda>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005642:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8005644:	f042 0220 	orr.w	r2, r2, #32
 8005648:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800564a:	2200      	movs	r2, #0
 800564c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005650:	b002      	add	sp, #8
 8005652:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005656:	6894      	ldr	r4, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005658:	6808      	ldr	r0, [r1, #0]
 800565a:	0726      	lsls	r6, r4, #28
 800565c:	d4b9      	bmi.n	80055d2 <HAL_ADC_ConfigChannel+0x62>
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800565e:	688d      	ldr	r5, [r1, #8]
  MODIFY_REG(*preg,
 8005660:	f3c0 5604 	ubfx	r6, r0, #20, #5
 8005664:	2407      	movs	r4, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005666:	0dc0      	lsrs	r0, r0, #23
  MODIFY_REG(*preg,
 8005668:	40b4      	lsls	r4, r6
 800566a:	f1b5 4f00 	cmp.w	r5, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800566e:	f000 0004 	and.w	r0, r0, #4
  MODIFY_REG(*preg,
 8005672:	ea6f 0404 	mvn.w	r4, r4
 8005676:	f000 8107 	beq.w	8005888 <HAL_ADC_ConfigChannel+0x318>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800567a:	f102 0714 	add.w	r7, r2, #20
  MODIFY_REG(*preg,
 800567e:	40b5      	lsls	r5, r6
 8005680:	583e      	ldr	r6, [r7, r0]
 8005682:	4034      	ands	r4, r6
 8005684:	432c      	orrs	r4, r5
 8005686:	503c      	str	r4, [r7, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005688:	6950      	ldr	r0, [r2, #20]
 800568a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800568e:	6150      	str	r0, [r2, #20]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005690:	e9d1 6404 	ldrd	r6, r4, [r1, #16]
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8005694:	6808      	ldr	r0, [r1, #0]
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8005696:	68d5      	ldr	r5, [r2, #12]
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005698:	2e04      	cmp	r6, #4
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800569a:	4607      	mov	r7, r0
      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800569c:	f000 80c8 	beq.w	8005830 <HAL_ADC_ConfigChannel+0x2c0>
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80056a0:	f3c5 05c1 	ubfx	r5, r5, #3, #2
 80056a4:	006d      	lsls	r5, r5, #1
  MODIFY_REG(*preg,
 80056a6:	f000 47f8 	and.w	r7, r0, #2080374784	@ 0x7c000000
 80056aa:	fa04 f005 	lsl.w	r0, r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056ae:	f102 0460 	add.w	r4, r2, #96	@ 0x60
  MODIFY_REG(*preg,
 80056b2:	4d83      	ldr	r5, [pc, #524]	@ (80058c0 <HAL_ADC_ConfigChannel+0x350>)
 80056b4:	f854 c026 	ldr.w	ip, [r4, r6, lsl #2]
 80056b8:	ea0c 0505 	and.w	r5, ip, r5
 80056bc:	433d      	orrs	r5, r7
 80056be:	4328      	orrs	r0, r5
 80056c0:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80056c4:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056c8:	690d      	ldr	r5, [r1, #16]
  MODIFY_REG(*preg,
 80056ca:	698e      	ldr	r6, [r1, #24]
 80056cc:	f854 0025 	ldr.w	r0, [r4, r5, lsl #2]
 80056d0:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 80056d4:	4330      	orrs	r0, r6
 80056d6:	f844 0025 	str.w	r0, [r4, r5, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80056da:	690e      	ldr	r6, [r1, #16]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80056dc:	7f0d      	ldrb	r5, [r1, #28]
  MODIFY_REG(*preg,
 80056de:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80056e2:	f1a5 0501 	sub.w	r5, r5, #1
 80056e6:	fab5 f585 	clz	r5, r5
 80056ea:	096d      	lsrs	r5, r5, #5
 80056ec:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 80056f0:	ea40 6045 	orr.w	r0, r0, r5, lsl #25
 80056f4:	f844 0026 	str.w	r0, [r4, r6, lsl #2]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80056f8:	6808      	ldr	r0, [r1, #0]
}
 80056fa:	e76a      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x62>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80056fc:	020c      	lsls	r4, r1, #8
 80056fe:	d49e      	bmi.n	800563e <HAL_ADC_ConfigChannel+0xce>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005700:	f1b2 4fa0 	cmp.w	r2, #1342177280	@ 0x50000000
 8005704:	d19b      	bne.n	800563e <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005706:	4968      	ldr	r1, [pc, #416]	@ (80058a8 <HAL_ADC_ConfigChannel+0x338>)
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005708:	486e      	ldr	r0, [pc, #440]	@ (80058c4 <HAL_ADC_ConfigChannel+0x354>)
 800570a:	688a      	ldr	r2, [r1, #8]
 800570c:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 8005710:	4332      	orrs	r2, r6
 8005712:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005716:	608a      	str	r2, [r1, #8]
 8005718:	6802      	ldr	r2, [r0, #0]
 800571a:	496b      	ldr	r1, [pc, #428]	@ (80058c8 <HAL_ADC_ConfigChannel+0x358>)
 800571c:	0992      	lsrs	r2, r2, #6
 800571e:	fba1 1202 	umull	r1, r2, r1, r2
 8005722:	0992      	lsrs	r2, r2, #6
 8005724:	3201      	adds	r2, #1
 8005726:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800572a:	0092      	lsls	r2, r2, #2
 800572c:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800572e:	9a01      	ldr	r2, [sp, #4]
 8005730:	2a00      	cmp	r2, #0
 8005732:	d084      	beq.n	800563e <HAL_ADC_ConfigChannel+0xce>
            wait_loop_index--;
 8005734:	9a01      	ldr	r2, [sp, #4]
 8005736:	3a01      	subs	r2, #1
 8005738:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800573a:	9a01      	ldr	r2, [sp, #4]
 800573c:	2a00      	cmp	r2, #0
 800573e:	d1f9      	bne.n	8005734 <HAL_ADC_ConfigChannel+0x1c4>
 8005740:	e77d      	b.n	800563e <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005742:	2f00      	cmp	r7, #0
 8005744:	d060      	beq.n	8005808 <HAL_ADC_ConfigChannel+0x298>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005746:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 800574a:	2c00      	cmp	r4, #0
 800574c:	f000 80be 	beq.w	80058cc <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005750:	fab4 f484 	clz	r4, r4
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005754:	3401      	adds	r4, #1
 8005756:	f004 041f 	and.w	r4, r4, #31
 800575a:	2c09      	cmp	r4, #9
 800575c:	f240 80b6 	bls.w	80058cc <HAL_ADC_ConfigChannel+0x35c>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005760:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 8005764:	2c00      	cmp	r4, #0
 8005766:	f000 8157 	beq.w	8005a18 <HAL_ADC_ConfigChannel+0x4a8>
  return __builtin_clz(value);
 800576a:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800576e:	3401      	adds	r4, #1
 8005770:	06a4      	lsls	r4, r4, #26
 8005772:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005776:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800577a:	2d00      	cmp	r5, #0
 800577c:	f000 8156 	beq.w	8005a2c <HAL_ADC_ConfigChannel+0x4bc>
  return __builtin_clz(value);
 8005780:	fab5 f585 	clz	r5, r5
 8005784:	3501      	adds	r5, #1
 8005786:	f005 051f 	and.w	r5, r5, #31
 800578a:	2601      	movs	r6, #1
 800578c:	fa06 f505 	lsl.w	r5, r6, r5
 8005790:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005792:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005796:	2800      	cmp	r0, #0
 8005798:	f000 8146 	beq.w	8005a28 <HAL_ADC_ConfigChannel+0x4b8>
  return __builtin_clz(value);
 800579c:	fab0 f080 	clz	r0, r0
 80057a0:	1c45      	adds	r5, r0, #1
 80057a2:	f005 051f 	and.w	r5, r5, #31
 80057a6:	2003      	movs	r0, #3
 80057a8:	f06f 061d 	mvn.w	r6, #29
 80057ac:	fb10 6005 	smlabb	r0, r0, r5, r6
 80057b0:	0500      	lsls	r0, r0, #20
 80057b2:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80057b6:	4320      	orrs	r0, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057b8:	0dc5      	lsrs	r5, r0, #23
  MODIFY_REG(*preg,
 80057ba:	688c      	ldr	r4, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80057bc:	f005 0504 	and.w	r5, r5, #4
 80057c0:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 80057c4:	f3c0 5004 	ubfx	r0, r0, #20, #5
 80057c8:	fa04 f700 	lsl.w	r7, r4, r0
 80057cc:	f04f 0c07 	mov.w	ip, #7
 80057d0:	5974      	ldr	r4, [r6, r5]
 80057d2:	fa0c f000 	lsl.w	r0, ip, r0
 80057d6:	ea24 0000 	bic.w	r0, r4, r0
 80057da:	4338      	orrs	r0, r7
 80057dc:	5170      	str	r0, [r6, r5]
    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80057de:	6808      	ldr	r0, [r1, #0]
}
 80057e0:	e70d      	b.n	80055fe <HAL_ADC_ConfigChannel+0x8e>
  __HAL_LOCK(hadc);
 80057e2:	2002      	movs	r0, #2
}
 80057e4:	b002      	add	sp, #8
 80057e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80057ea:	01c8      	lsls	r0, r1, #7
 80057ec:	f53f af27 	bmi.w	800563e <HAL_ADC_ConfigChannel+0xce>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057f0:	4932      	ldr	r1, [pc, #200]	@ (80058bc <HAL_ADC_ConfigChannel+0x34c>)
 80057f2:	428a      	cmp	r2, r1
 80057f4:	f43f af23 	beq.w	800563e <HAL_ADC_ConfigChannel+0xce>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80057f8:	68a2      	ldr	r2, [r4, #8]
 80057fa:	f022 72e0 	bic.w	r2, r2, #29360128	@ 0x1c00000
 80057fe:	4332      	orrs	r2, r6
 8005800:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8005804:	60a2      	str	r2, [r4, #8]
}
 8005806:	e71a      	b.n	800563e <HAL_ADC_ConfigChannel+0xce>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005808:	0e80      	lsrs	r0, r0, #26
 800580a:	3001      	adds	r0, #1
 800580c:	f000 051f 	and.w	r5, r0, #31
 8005810:	2401      	movs	r4, #1
 8005812:	0680      	lsls	r0, r0, #26
 8005814:	f000 40f8 	and.w	r0, r0, #2080374784	@ 0x7c000000
 8005818:	40ac      	lsls	r4, r5
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800581a:	2d09      	cmp	r5, #9
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800581c:	ea44 0400 	orr.w	r4, r4, r0
 8005820:	eb05 0045 	add.w	r0, r5, r5, lsl #1
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005824:	d977      	bls.n	8005916 <HAL_ADC_ConfigChannel+0x3a6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005826:	381e      	subs	r0, #30
 8005828:	0500      	lsls	r0, r0, #20
 800582a:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 800582e:	e7c2      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x246>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005830:	6e14      	ldr	r4, [r2, #96]	@ 0x60
 8005832:	6e14      	ldr	r4, [r2, #96]	@ 0x60
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005834:	f3c0 0512 	ubfx	r5, r0, #0, #19
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005838:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800583c:	2d00      	cmp	r5, #0
 800583e:	d16c      	bne.n	800591a <HAL_ADC_ConfigChannel+0x3aa>
 8005840:	f3c0 6084 	ubfx	r0, r0, #26, #5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005844:	4284      	cmp	r4, r0
 8005846:	f000 80a0 	beq.w	800598a <HAL_ADC_ConfigChannel+0x41a>
 800584a:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800584c:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800584e:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005852:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005856:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
 800585a:	4285      	cmp	r5, r0
 800585c:	f000 80c0 	beq.w	80059e0 <HAL_ADC_ConfigChannel+0x470>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005860:	68a5      	ldr	r5, [r4, #8]
 8005862:	68a5      	ldr	r5, [r4, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005864:	f104 0c08 	add.w	ip, r4, #8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005868:	f3c5 6584 	ubfx	r5, r5, #26, #5
 800586c:	4285      	cmp	r5, r0
 800586e:	f000 80a1 	beq.w	80059b4 <HAL_ADC_ConfigChannel+0x444>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005872:	68e5      	ldr	r5, [r4, #12]
 8005874:	68e5      	ldr	r5, [r4, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005876:	f104 060c 	add.w	r6, r4, #12
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800587a:	f3c5 6484 	ubfx	r4, r5, #26, #5
 800587e:	42a0      	cmp	r0, r4
 8005880:	f000 80c4 	beq.w	8005a0c <HAL_ADC_ConfigChannel+0x49c>
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005884:	4638      	mov	r0, r7
 8005886:	e6a4      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x62>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005888:	f102 0614 	add.w	r6, r2, #20
  MODIFY_REG(*preg,
 800588c:	5835      	ldr	r5, [r6, r0]
 800588e:	402c      	ands	r4, r5
 8005890:	5034      	str	r4, [r6, r0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005892:	6950      	ldr	r0, [r2, #20]
 8005894:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8005898:	6150      	str	r0, [r2, #20]
}
 800589a:	e6f9      	b.n	8005690 <HAL_ADC_ConfigChannel+0x120>
 800589c:	0007ffff 	.word	0x0007ffff
 80058a0:	407f0000 	.word	0x407f0000
 80058a4:	80080000 	.word	0x80080000
 80058a8:	50000300 	.word	0x50000300
 80058ac:	c3210000 	.word	0xc3210000
 80058b0:	90c00010 	.word	0x90c00010
 80058b4:	c7520000 	.word	0xc7520000
 80058b8:	cb840000 	.word	0xcb840000
 80058bc:	50000100 	.word	0x50000100
 80058c0:	03fff000 	.word	0x03fff000
 80058c4:	200004ec 	.word	0x200004ec
 80058c8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058cc:	fa90 f4a0 	rbit	r4, r0
  if (value == 0U)
 80058d0:	2c00      	cmp	r4, #0
 80058d2:	f000 80b7 	beq.w	8005a44 <HAL_ADC_ConfigChannel+0x4d4>
  return __builtin_clz(value);
 80058d6:	fab4 f484 	clz	r4, r4
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80058da:	3401      	adds	r4, #1
 80058dc:	06a4      	lsls	r4, r4, #26
 80058de:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058e2:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 80058e6:	2d00      	cmp	r5, #0
 80058e8:	f000 80aa 	beq.w	8005a40 <HAL_ADC_ConfigChannel+0x4d0>
  return __builtin_clz(value);
 80058ec:	fab5 f585 	clz	r5, r5
 80058f0:	3501      	adds	r5, #1
 80058f2:	f005 051f 	and.w	r5, r5, #31
 80058f6:	2601      	movs	r6, #1
 80058f8:	fa06 f505 	lsl.w	r5, r6, r5
 80058fc:	432c      	orrs	r4, r5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80058fe:	fa90 f0a0 	rbit	r0, r0
  if (value == 0U)
 8005902:	2800      	cmp	r0, #0
 8005904:	f000 8099 	beq.w	8005a3a <HAL_ADC_ConfigChannel+0x4ca>
  return __builtin_clz(value);
 8005908:	fab0 f080 	clz	r0, r0
 800590c:	3001      	adds	r0, #1
 800590e:	f000 001f 	and.w	r0, r0, #31
 8005912:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005916:	0500      	lsls	r0, r0, #20
 8005918:	e74d      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x246>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800591a:	fa90 f5a0 	rbit	r5, r0
  if (value == 0U)
 800591e:	b11d      	cbz	r5, 8005928 <HAL_ADC_ConfigChannel+0x3b8>
  return __builtin_clz(value);
 8005920:	fab5 f585 	clz	r5, r5
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005924:	42ac      	cmp	r4, r5
 8005926:	d030      	beq.n	800598a <HAL_ADC_ConfigChannel+0x41a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005928:	6e54      	ldr	r4, [r2, #100]	@ 0x64
 800592a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800592c:	f102 0460 	add.w	r4, r2, #96	@ 0x60
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005930:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005934:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005938:	fa97 f6a7 	rbit	r6, r7
 800593c:	f104 0c08 	add.w	ip, r4, #8
 8005940:	46e0      	mov	r8, ip
  if (value == 0U)
 8005942:	2e00      	cmp	r6, #0
 8005944:	d074      	beq.n	8005a30 <HAL_ADC_ConfigChannel+0x4c0>
  return __builtin_clz(value);
 8005946:	fab6 f686 	clz	r6, r6
 800594a:	42ae      	cmp	r6, r5
 800594c:	d04a      	beq.n	80059e4 <HAL_ADC_ConfigChannel+0x474>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800594e:	f8dc 5000 	ldr.w	r5, [ip]
 8005952:	f8dc 5000 	ldr.w	r5, [ip]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005956:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800595a:	fa97 fea7 	rbit	lr, r7
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800595e:	f104 060c 	add.w	r6, r4, #12
 8005962:	46b0      	mov	r8, r6
  if (value == 0U)
 8005964:	f1be 0f00 	cmp.w	lr, #0
 8005968:	d059      	beq.n	8005a1e <HAL_ADC_ConfigChannel+0x4ae>
  return __builtin_clz(value);
 800596a:	fabe fe8e 	clz	lr, lr
 800596e:	45ae      	cmp	lr, r5
 8005970:	d022      	beq.n	80059b8 <HAL_ADC_ConfigChannel+0x448>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005972:	6834      	ldr	r4, [r6, #0]
 8005974:	6834      	ldr	r4, [r6, #0]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005976:	f3c4 6484 	ubfx	r4, r4, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800597a:	fa97 f5a7 	rbit	r5, r7
  if (value == 0U)
 800597e:	2d00      	cmp	r5, #0
 8005980:	f43f ae27 	beq.w	80055d2 <HAL_ADC_ConfigChannel+0x62>
  return __builtin_clz(value);
 8005984:	fab5 f085 	clz	r0, r5
 8005988:	e779      	b.n	800587e <HAL_ADC_ConfigChannel+0x30e>
  MODIFY_REG(*preg,
 800598a:	6e10      	ldr	r0, [r2, #96]	@ 0x60
 800598c:	4614      	mov	r4, r2
 800598e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005992:	f844 0f60 	str.w	r0, [r4, #96]!
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005996:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005998:	6e50      	ldr	r0, [r2, #100]	@ 0x64
 800599a:	6e55      	ldr	r5, [r2, #100]	@ 0x64
 800599c:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059a0:	f102 0e64 	add.w	lr, r2, #100	@ 0x64
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80059a4:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059a8:	4638      	mov	r0, r7
 80059aa:	2e00      	cmp	r6, #0
 80059ac:	d1c4      	bne.n	8005938 <HAL_ADC_ConfigChannel+0x3c8>
 80059ae:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80059b2:	e752      	b.n	800585a <HAL_ADC_ConfigChannel+0x2ea>
 80059b4:	f104 080c 	add.w	r8, r4, #12
  MODIFY_REG(*preg,
 80059b8:	f8dc 0000 	ldr.w	r0, [ip]
 80059bc:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80059c0:	f8cc 0000 	str.w	r0, [ip]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059c4:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059c6:	68e0      	ldr	r0, [r4, #12]
 80059c8:	68e4      	ldr	r4, [r4, #12]
 80059ca:	f3c7 0512 	ubfx	r5, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059ce:	4646      	mov	r6, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80059d0:	f3c4 6484 	ubfx	r4, r4, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059d4:	4638      	mov	r0, r7
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	d1cf      	bne.n	800597a <HAL_ADC_ConfigChannel+0x40a>
 80059da:	f3c7 6084 	ubfx	r0, r7, #26, #5
 80059de:	e74e      	b.n	800587e <HAL_ADC_ConfigChannel+0x30e>
 80059e0:	f104 0808 	add.w	r8, r4, #8
  MODIFY_REG(*preg,
 80059e4:	f8de 0000 	ldr.w	r0, [lr]
 80059e8:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80059ec:	f8ce 0000 	str.w	r0, [lr]
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80059f0:	680f      	ldr	r7, [r1, #0]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80059f2:	68a0      	ldr	r0, [r4, #8]
 80059f4:	68a5      	ldr	r5, [r4, #8]
 80059f6:	f3c7 0612 	ubfx	r6, r7, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059fa:	46c4      	mov	ip, r8
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80059fc:	f3c5 6584 	ubfx	r5, r5, #26, #5
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8005a00:	4638      	mov	r0, r7
 8005a02:	2e00      	cmp	r6, #0
 8005a04:	d1a9      	bne.n	800595a <HAL_ADC_ConfigChannel+0x3ea>
 8005a06:	f3c7 6084 	ubfx	r0, r7, #26, #5
 8005a0a:	e72f      	b.n	800586c <HAL_ADC_ConfigChannel+0x2fc>
  MODIFY_REG(*preg,
 8005a0c:	6830      	ldr	r0, [r6, #0]
 8005a0e:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8005a12:	6030      	str	r0, [r6, #0]
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8005a14:	6808      	ldr	r0, [r1, #0]
}
 8005a16:	e5dc      	b.n	80055d2 <HAL_ADC_ConfigChannel+0x62>
 8005a18:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8005a1c:	e6ab      	b.n	8005776 <HAL_ADC_ConfigChannel+0x206>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005a1e:	68e5      	ldr	r5, [r4, #12]
 8005a20:	68e4      	ldr	r4, [r4, #12]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005a22:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8005a26:	e7a8      	b.n	800597a <HAL_ADC_ConfigChannel+0x40a>
 8005a28:	4808      	ldr	r0, [pc, #32]	@ (8005a4c <HAL_ADC_ConfigChannel+0x4dc>)
 8005a2a:	e6c4      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x246>
 8005a2c:	2502      	movs	r5, #2
 8005a2e:	e6af      	b.n	8005790 <HAL_ADC_ConfigChannel+0x220>
 8005a30:	68a5      	ldr	r5, [r4, #8]
 8005a32:	68a5      	ldr	r5, [r4, #8]
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005a34:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8005a38:	e78f      	b.n	800595a <HAL_ADC_ConfigChannel+0x3ea>
 8005a3a:	f44f 1040 	mov.w	r0, #3145728	@ 0x300000
 8005a3e:	e6ba      	b.n	80057b6 <HAL_ADC_ConfigChannel+0x246>
 8005a40:	2502      	movs	r5, #2
 8005a42:	e75b      	b.n	80058fc <HAL_ADC_ConfigChannel+0x38c>
 8005a44:	f04f 6480 	mov.w	r4, #67108864	@ 0x4000000
 8005a48:	e74b      	b.n	80058e2 <HAL_ADC_ConfigChannel+0x372>
 8005a4a:	bf00      	nop
 8005a4c:	fe500000 	.word	0xfe500000

08005a50 <HAL_ADCEx_InjectedConfigChannel>:
  *         injected group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef *hadc,
                                                  const ADC_InjectionConfTypeDef *pConfigInjected)
{
 8005a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfigInjected->InjectedChannel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005a54:	f890 3058 	ldrb.w	r3, [r0, #88]	@ 0x58
{
 8005a58:	b083      	sub	sp, #12
 8005a5a:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8005a5c:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0;
 8005a5e:	f04f 0000 	mov.w	r0, #0
 8005a62:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 8005a64:	f000 8175 	beq.w	8005d52 <HAL_ADCEx_InjectedConfigChannel+0x302>
 8005a68:	2301      	movs	r3, #1
  /*      injected channel rank. It is entered into queue only when all       */
  /*      injected ranks have been set.                                       */
  /*   Note: Scan mode is not present by hardware on this device, but used    */
  /*   by software for alignment over all STM32 devices.                      */

  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a6a:	6955      	ldr	r5, [r2, #20]
  __HAL_LOCK(hadc);
 8005a6c:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58
    /*    related to each channel: channel rank sequence                    */
    /* Clear the old JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built &= ~ADC_JSQR_RK(ADC_SQR3_SQ10, pConfigInjected->InjectedRank);

    /* Set the JSQx bits for the selected rank */
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8005a70:	e9d1 4000 	ldrd	r4, r0, [r1]

    /* 4. End of context setting: if this is the last channel set, then write context
        into register JSQR and make it enter into queue                   */
    if (hadc->InjectionConfig.ChannelCount == 0U)
    {
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005a74:	6813      	ldr	r3, [r2, #0]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a76:	2d00      	cmp	r5, #0
 8005a78:	d072      	beq.n	8005b60 <HAL_ADCEx_InjectedConfigChannel+0x110>
      (pConfigInjected->InjectedNbrOfConversion == 1U))
 8005a7a:	6a0d      	ldr	r5, [r1, #32]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8005a7c:	2d01      	cmp	r5, #1
 8005a7e:	d06f      	beq.n	8005b60 <HAL_ADCEx_InjectedConfigChannel+0x110>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005a80:	6e97      	ldr	r7, [r2, #104]	@ 0x68
    tmp_jsqr_context_queue_being_built |= ADC_JSQR_RK(pConfigInjected->InjectedChannel, pConfigInjected->InjectedRank);
 8005a82:	f000 001f 	and.w	r0, r0, #31
 8005a86:	f3c4 6684 	ubfx	r6, r4, #26, #5
 8005a8a:	4086      	lsls	r6, r0
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005a8c:	2f00      	cmp	r7, #0
 8005a8e:	f040 811a 	bne.w	8005cc6 <HAL_ADCEx_InjectedConfigChannel+0x276>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a92:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005a94:	3d01      	subs	r5, #1
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005a96:	2800      	cmp	r0, #0
 8005a98:	f000 821e 	beq.w	8005ed8 <HAL_ADCEx_InjectedConfigChannel+0x488>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005a9c:	6acf      	ldr	r7, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005a9e:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
 8005aa2:	4328      	orrs	r0, r5
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U)
 8005aa4:	4338      	orrs	r0, r7
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8005aa6:	4330      	orrs	r0, r6
 8005aa8:	e9c2 0519 	strd	r0, r5, [r2, #100]	@ 0x64
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005aac:	6898      	ldr	r0, [r3, #8]
 8005aae:	0700      	lsls	r0, r0, #28
 8005ab0:	d410      	bmi.n	8005ad4 <HAL_ADCEx_InjectedConfigChannel+0x84>
  if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
  {
    /* If auto-injected mode is disabled: no constraint                       */
    if (pConfigInjected->AutoInjectedConv == DISABLE)
    {
      MODIFY_REG(hadc->Instance->CFGR,
 8005ab2:	f891 0026 	ldrb.w	r0, [r1, #38]	@ 0x26
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8005ab6:	f891 5025 	ldrb.w	r5, [r1, #37]	@ 0x25
      MODIFY_REG(hadc->Instance->CFGR,
 8005aba:	0540      	lsls	r0, r0, #21
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8005abc:	2d00      	cmp	r5, #0
 8005abe:	f040 80f7 	bne.w	8005cb0 <HAL_ADCEx_InjectedConfigChannel+0x260>
      MODIFY_REG(hadc->Instance->CFGR,
 8005ac2:	68dd      	ldr	r5, [r3, #12]
 8005ac4:	f891 6024 	ldrb.w	r6, [r1, #36]	@ 0x24
 8005ac8:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8005acc:	ea40 5006 	orr.w	r0, r0, r6, lsl #20
 8005ad0:	4328      	orrs	r0, r5
 8005ad2:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005ad4:	6898      	ldr	r0, [r3, #8]
 8005ad6:	f010 0004 	ands.w	r0, r0, #4
 8005ada:	d057      	beq.n	8005b8c <HAL_ADCEx_InjectedConfigChannel+0x13c>
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005adc:	6898      	ldr	r0, [r3, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ade:	2000      	movs	r0, #0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005ae0:	689d      	ldr	r5, [r3, #8]
 8005ae2:	07ee      	lsls	r6, r5, #31
 8005ae4:	d414      	bmi.n	8005b10 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005ae6:	68cf      	ldr	r7, [r1, #12]
  MODIFY_REG(ADCx->DIFSEL,
 8005ae8:	4da3      	ldr	r5, [pc, #652]	@ (8005d78 <HAL_ADCEx_InjectedConfigChannel+0x328>)
 8005aea:	f8d3 60b0 	ldr.w	r6, [r3, #176]	@ 0xb0
 8005aee:	f007 0c18 	and.w	ip, r7, #24
 8005af2:	fa25 f50c 	lsr.w	r5, r5, ip
 8005af6:	f3c4 0e12 	ubfx	lr, r4, #0, #19
 8005afa:	4025      	ands	r5, r4
 8005afc:	ea26 0c0e 	bic.w	ip, r6, lr
 8005b00:	ea45 050c 	orr.w	r5, r5, ip
 8005b04:	f8c3 50b0 	str.w	r5, [r3, #176]	@ 0xb0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (pConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005b08:	4d9c      	ldr	r5, [pc, #624]	@ (8005d7c <HAL_ADCEx_InjectedConfigChannel+0x32c>)
 8005b0a:	42af      	cmp	r7, r5
 8005b0c:	f000 80f6 	beq.w	8005cfc <HAL_ADCEx_InjectedConfigChannel+0x2ac>
  /* internal measurement paths enable: If internal channel selected,       */
  /* enable dedicated internal buffers and path.                            */
  /* Note: these internal measurement paths can be disabled using           */
  /* HAL_ADC_DeInit().                                                      */

  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8005b10:	499b      	ldr	r1, [pc, #620]	@ (8005d80 <HAL_ADCEx_InjectedConfigChannel+0x330>)
 8005b12:	420c      	tst	r4, r1
 8005b14:	d01e      	beq.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005b16:	4e9b      	ldr	r6, [pc, #620]	@ (8005d84 <HAL_ADCEx_InjectedConfigChannel+0x334>)
  {
    tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));

    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (((pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC1)
 8005b18:	4d9b      	ldr	r5, [pc, #620]	@ (8005d88 <HAL_ADCEx_InjectedConfigChannel+0x338>)
 8005b1a:	68b1      	ldr	r1, [r6, #8]
 8005b1c:	42ac      	cmp	r4, r5
 8005b1e:	f001 77e0 	and.w	r7, r1, #29360128	@ 0x1c00000
 8005b22:	f000 809f 	beq.w	8005c64 <HAL_ADCEx_InjectedConfigChannel+0x214>
         || (pConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8005b26:	4d99      	ldr	r5, [pc, #612]	@ (8005d8c <HAL_ADCEx_InjectedConfigChannel+0x33c>)
 8005b28:	42ac      	cmp	r4, r5
 8005b2a:	f000 809b 	beq.w	8005c64 <HAL_ADCEx_InjectedConfigChannel+0x214>
        {
          wait_loop_index--;
        }
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)
 8005b2e:	4d98      	ldr	r5, [pc, #608]	@ (8005d90 <HAL_ADCEx_InjectedConfigChannel+0x340>)
 8005b30:	42ac      	cmp	r4, r5
 8005b32:	f000 8112 	beq.w	8005d5a <HAL_ADCEx_InjectedConfigChannel+0x30a>
      {
        LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
                                       LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
      }
    }
    else if ((pConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)
 8005b36:	4d97      	ldr	r5, [pc, #604]	@ (8005d94 <HAL_ADCEx_InjectedConfigChannel+0x344>)
 8005b38:	42ac      	cmp	r4, r5
 8005b3a:	d10b      	bne.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005b3c:	0249      	lsls	r1, r1, #9
 8005b3e:	d409      	bmi.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
    {
      if (ADC_VREFINT_INSTANCE(hadc))
 8005b40:	4995      	ldr	r1, [pc, #596]	@ (8005d98 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005b42:	428b      	cmp	r3, r1
 8005b44:	d006      	beq.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005b46:	68b3      	ldr	r3, [r6, #8]
 8005b48:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005b4c:	433b      	orrs	r3, r7
 8005b4e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005b52:	60b3      	str	r3, [r6, #8]
      /* nothing to do */
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b54:	2300      	movs	r3, #0
 8005b56:	f882 3058 	strb.w	r3, [r2, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
}
 8005b5a:	b003      	add	sp, #12
 8005b5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (pConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8005b60:	2809      	cmp	r0, #9
 8005b62:	d1a3      	bne.n	8005aac <HAL_ADCEx_InjectedConfigChannel+0x5c>
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005b64:	6a88      	ldr	r0, [r1, #40]	@ 0x28
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005b66:	0c65      	lsrs	r5, r4, #17
 8005b68:	f405 5578 	and.w	r5, r5, #15872	@ 0x3e00
      if (pConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8005b6c:	b120      	cbz	r0, 8005b78 <HAL_ADCEx_InjectedConfigChannel+0x128>
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005b6e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
                                              | (pConfigInjected->ExternalTrigInjecConv & ADC_JSQR_JEXTSEL)
 8005b70:	f000 007c 	and.w	r0, r0, #124	@ 0x7c
        tmp_jsqr_context_queue_being_built = (ADC_JSQR_RK(pConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1)
 8005b74:	4330      	orrs	r0, r6
 8005b76:	4305      	orrs	r5, r0
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, tmp_jsqr_context_queue_being_built);
 8005b78:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005b7a:	4e88      	ldr	r6, [pc, #544]	@ (8005d9c <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8005b7c:	4030      	ands	r0, r6
 8005b7e:	4328      	orrs	r0, r5
 8005b80:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b82:	6898      	ldr	r0, [r3, #8]
      hadc->InjectionConfig.ContextQueue = tmp_jsqr_context_queue_being_built;
 8005b84:	6655      	str	r5, [r2, #100]	@ 0x64
 8005b86:	0700      	lsls	r0, r0, #28
 8005b88:	d4a4      	bmi.n	8005ad4 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8005b8a:	e792      	b.n	8005ab2 <HAL_ADCEx_InjectedConfigChannel+0x62>
 8005b8c:	689d      	ldr	r5, [r3, #8]
 8005b8e:	072f      	lsls	r7, r5, #28
 8005b90:	d4a6      	bmi.n	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0x90>
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005b92:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
    if (pConfigInjected->AutoInjectedConv == DISABLE)
 8005b94:	f891 0025 	ldrb.w	r0, [r1, #37]	@ 0x25
    if ((pConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	f040 80a6 	bne.w	8005cea <HAL_ADCEx_InjectedConfigChannel+0x29a>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005b9e:	2801      	cmp	r0, #1
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ba0:	68d8      	ldr	r0, [r3, #12]
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005ba2:	f000 819b 	beq.w	8005edc <HAL_ADCEx_InjectedConfigChannel+0x48c>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005ba6:	f020 7000 	bic.w	r0, r0, #33554432	@ 0x2000000
 8005baa:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bac:	2000      	movs	r0, #0
    if (pConfigInjected->InjecOversamplingMode == ENABLE)
 8005bae:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8005bb2:	2d01      	cmp	r5, #1
 8005bb4:	f000 8185 	beq.w	8005ec2 <HAL_ADCEx_InjectedConfigChannel+0x472>
      CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_JOVSE);
 8005bb8:	691d      	ldr	r5, [r3, #16]
 8005bba:	f025 0502 	bic.w	r5, r5, #2
 8005bbe:	611d      	str	r5, [r3, #16]
    if (pConfigInjected->InjectedSamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005bc0:	688e      	ldr	r6, [r1, #8]
  MODIFY_REG(*preg,
 8005bc2:	f3c4 5704 	ubfx	r7, r4, #20, #5
 8005bc6:	2507      	movs	r5, #7
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005bc8:	0de4      	lsrs	r4, r4, #23
  MODIFY_REG(*preg,
 8005bca:	40bd      	lsls	r5, r7
 8005bcc:	f1b6 4f00 	cmp.w	r6, #2147483648	@ 0x80000000
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005bd0:	f004 0404 	and.w	r4, r4, #4
  MODIFY_REG(*preg,
 8005bd4:	ea6f 0505 	mvn.w	r5, r5
 8005bd8:	f000 8169 	beq.w	8005eae <HAL_ADCEx_InjectedConfigChannel+0x45e>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005bdc:	f103 0c14 	add.w	ip, r3, #20
  MODIFY_REG(*preg,
 8005be0:	40be      	lsls	r6, r7
 8005be2:	f85c 7004 	ldr.w	r7, [ip, r4]
 8005be6:	403d      	ands	r5, r7
 8005be8:	4335      	orrs	r5, r6
 8005bea:	f84c 5004 	str.w	r5, [ip, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005bee:	695c      	ldr	r4, [r3, #20]
 8005bf0:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005bf4:	615c      	str	r4, [r3, #20]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005bf6:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005bf8:	680c      	ldr	r4, [r1, #0]
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8005bfa:	694d      	ldr	r5, [r1, #20]
 8005bfc:	68de      	ldr	r6, [r3, #12]
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005bfe:	2f04      	cmp	r7, #4
      LL_ADC_SetOffset(hadc->Instance, pConfigInjected->InjectedOffsetNumber, pConfigInjected->InjectedChannel,
 8005c00:	46a4      	mov	ip, r4
    if (pConfigInjected->InjectedOffsetNumber != ADC_OFFSET_NONE)
 8005c02:	f000 810c 	beq.w	8005e1e <HAL_ADCEx_InjectedConfigChannel+0x3ce>
    tmp_offset_shifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, pConfigInjected->InjectedOffset);
 8005c06:	f3c6 06c1 	ubfx	r6, r6, #3, #2
 8005c0a:	0076      	lsls	r6, r6, #1
  MODIFY_REG(*preg,
 8005c0c:	f004 4cf8 	and.w	ip, r4, #2080374784	@ 0x7c000000
 8005c10:	fa05 f406 	lsl.w	r4, r5, r6
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c14:	f103 0560 	add.w	r5, r3, #96	@ 0x60
  MODIFY_REG(*preg,
 8005c18:	4e61      	ldr	r6, [pc, #388]	@ (8005da0 <HAL_ADCEx_InjectedConfigChannel+0x350>)
 8005c1a:	f855 e027 	ldr.w	lr, [r5, r7, lsl #2]
 8005c1e:	ea0e 0606 	and.w	r6, lr, r6
 8005c22:	ea46 060c 	orr.w	r6, r6, ip
 8005c26:	4334      	orrs	r4, r6
 8005c28:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8005c2c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c30:	690f      	ldr	r7, [r1, #16]
  MODIFY_REG(*preg,
 8005c32:	698e      	ldr	r6, [r1, #24]
 8005c34:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8005c38:	f024 7480 	bic.w	r4, r4, #16777216	@ 0x1000000
 8005c3c:	4334      	orrs	r4, r6
 8005c3e:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c42:	690f      	ldr	r7, [r1, #16]
      LL_ADC_SetOffsetSaturation(hadc->Instance, pConfigInjected->InjectedOffsetNumber,
 8005c44:	7f0e      	ldrb	r6, [r1, #28]
  MODIFY_REG(*preg,
 8005c46:	f855 4027 	ldr.w	r4, [r5, r7, lsl #2]
 8005c4a:	f1a6 0601 	sub.w	r6, r6, #1
 8005c4e:	fab6 f686 	clz	r6, r6
 8005c52:	0976      	lsrs	r6, r6, #5
 8005c54:	f024 7400 	bic.w	r4, r4, #33554432	@ 0x2000000
 8005c58:	ea44 6446 	orr.w	r4, r4, r6, lsl #25
 8005c5c:	f845 4027 	str.w	r4, [r5, r7, lsl #2]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005c60:	680c      	ldr	r4, [r1, #0]
}
 8005c62:	e73d      	b.n	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0x90>
        && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005c64:	020d      	lsls	r5, r1, #8
 8005c66:	f53f af75 	bmi.w	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005c6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6e:	f47f af71 	bne.w	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c72:	4944      	ldr	r1, [pc, #272]	@ (8005d84 <HAL_ADCEx_InjectedConfigChannel+0x334>)
                           * (((SystemCoreClock / (100000UL * 2UL)) + 1UL) + 1UL));
 8005c74:	4c4b      	ldr	r4, [pc, #300]	@ (8005da4 <HAL_ADCEx_InjectedConfigChannel+0x354>)
 8005c76:	688b      	ldr	r3, [r1, #8]
 8005c78:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005c7c:	433b      	orrs	r3, r7
 8005c7e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005c82:	608b      	str	r3, [r1, #8]
 8005c84:	6823      	ldr	r3, [r4, #0]
 8005c86:	4948      	ldr	r1, [pc, #288]	@ (8005da8 <HAL_ADCEx_InjectedConfigChannel+0x358>)
 8005c88:	099b      	lsrs	r3, r3, #6
 8005c8a:	fba1 1303 	umull	r1, r3, r1, r3
 8005c8e:	099b      	lsrs	r3, r3, #6
 8005c90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	3318      	adds	r3, #24
        wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8005c98:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005c9a:	9b01      	ldr	r3, [sp, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	f43f af59 	beq.w	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
          wait_loop_index--;
 8005ca2:	9b01      	ldr	r3, [sp, #4]
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	9301      	str	r3, [sp, #4]
        while (wait_loop_index != 0UL)
 8005ca8:	9b01      	ldr	r3, [sp, #4]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d1f9      	bne.n	8005ca2 <HAL_ADCEx_InjectedConfigChannel+0x252>
 8005cae:	e751      	b.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
      MODIFY_REG(hadc->Instance->CFGR,
 8005cb0:	68dd      	ldr	r5, [r3, #12]
 8005cb2:	f425 1540 	bic.w	r5, r5, #3145728	@ 0x300000
 8005cb6:	4328      	orrs	r0, r5
 8005cb8:	60d8      	str	r0, [r3, #12]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005cba:	6898      	ldr	r0, [r3, #8]
 8005cbc:	f010 0004 	ands.w	r0, r0, #4
 8005cc0:	f43f af64 	beq.w	8005b8c <HAL_ADCEx_InjectedConfigChannel+0x13c>
 8005cc4:	e70a      	b.n	8005adc <HAL_ADCEx_InjectedConfigChannel+0x8c>
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8005cc6:	6e55      	ldr	r5, [r2, #100]	@ 0x64
    hadc->InjectionConfig.ChannelCount--;
 8005cc8:	3f01      	subs	r7, #1
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8005cca:	4335      	orrs	r5, r6
    hadc->InjectionConfig.ChannelCount--;
 8005ccc:	6697      	str	r7, [r2, #104]	@ 0x68
    hadc->InjectionConfig.ContextQueue |= tmp_jsqr_context_queue_being_built;
 8005cce:	6655      	str	r5, [r2, #100]	@ 0x64
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8005cd0:	2f00      	cmp	r7, #0
 8005cd2:	f47f aeeb 	bne.w	8005aac <HAL_ADCEx_InjectedConfigChannel+0x5c>
      MODIFY_REG(hadc->Instance->JSQR, ADC_JSQR_FIELDS, hadc->InjectionConfig.ContextQueue);
 8005cd6:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8005cd8:	4e30      	ldr	r6, [pc, #192]	@ (8005d9c <HAL_ADCEx_InjectedConfigChannel+0x34c>)
 8005cda:	4030      	ands	r0, r6
 8005cdc:	4328      	orrs	r0, r5
 8005cde:	64d8      	str	r0, [r3, #76]	@ 0x4c
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005ce0:	6898      	ldr	r0, [r3, #8]
 8005ce2:	0700      	lsls	r0, r0, #28
 8005ce4:	f53f aef6 	bmi.w	8005ad4 <HAL_ADCEx_InjectedConfigChannel+0x84>
 8005ce8:	e6e3      	b.n	8005ab2 <HAL_ADCEx_InjectedConfigChannel+0x62>
        || (pConfigInjected->ExternalTrigInjecConvEdge == ADC_EXTERNALTRIGINJECCONV_EDGE_NONE))
 8005cea:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
 8005cec:	2d00      	cmp	r5, #0
 8005cee:	f43f af56 	beq.w	8005b9e <HAL_ADCEx_InjectedConfigChannel+0x14e>
      if (pConfigInjected->AutoInjectedConv == ENABLE)
 8005cf2:	2801      	cmp	r0, #1
 8005cf4:	f000 8118 	beq.w	8005f28 <HAL_ADCEx_InjectedConfigChannel+0x4d8>
        CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005cf8:	68d8      	ldr	r0, [r3, #12]
 8005cfa:	e754      	b.n	8005ba6 <HAL_ADCEx_InjectedConfigChannel+0x156>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005cfc:	f1be 0f00 	cmp.w	lr, #0
 8005d00:	d154      	bne.n	8005dac <HAL_ADCEx_InjectedConfigChannel+0x35c>
 8005d02:	0ea4      	lsrs	r4, r4, #26
 8005d04:	3401      	adds	r4, #1
 8005d06:	f004 061f 	and.w	r6, r4, #31
 8005d0a:	2501      	movs	r5, #1
 8005d0c:	06a4      	lsls	r4, r4, #26
 8005d0e:	f004 44f8 	and.w	r4, r4, #2080374784	@ 0x7c000000
 8005d12:	40b5      	lsls	r5, r6
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d14:	2e09      	cmp	r6, #9
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d16:	ea45 0504 	orr.w	r5, r5, r4
 8005d1a:	eb06 0446 	add.w	r4, r6, r6, lsl #1
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d1e:	f200 80fe 	bhi.w	8005f1e <HAL_ADCEx_InjectedConfigChannel+0x4ce>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005d22:	0524      	lsls	r4, r4, #20
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005d24:	432c      	orrs	r4, r5
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d26:	0de6      	lsrs	r6, r4, #23
  MODIFY_REG(*preg,
 8005d28:	688d      	ldr	r5, [r1, #8]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005d2a:	f006 0604 	and.w	r6, r6, #4
 8005d2e:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005d32:	f3c4 5404 	ubfx	r4, r4, #20, #5
 8005d36:	fa05 fc04 	lsl.w	ip, r5, r4
 8005d3a:	f04f 0e07 	mov.w	lr, #7
 8005d3e:	59bd      	ldr	r5, [r7, r6]
 8005d40:	fa0e f404 	lsl.w	r4, lr, r4
 8005d44:	ea25 0404 	bic.w	r4, r5, r4
 8005d48:	ea44 040c 	orr.w	r4, r4, ip
 8005d4c:	51bc      	str	r4, [r7, r6]
  if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfigInjected->InjectedChannel))
 8005d4e:	680c      	ldr	r4, [r1, #0]
}
 8005d50:	e6de      	b.n	8005b10 <HAL_ADCEx_InjectedConfigChannel+0xc0>
  __HAL_LOCK(hadc);
 8005d52:	2002      	movs	r0, #2
}
 8005d54:	b003      	add	sp, #12
 8005d56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
             && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8005d5a:	01cc      	lsls	r4, r1, #7
 8005d5c:	f53f aefa 	bmi.w	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
      if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005d60:	490d      	ldr	r1, [pc, #52]	@ (8005d98 <HAL_ADCEx_InjectedConfigChannel+0x348>)
 8005d62:	428b      	cmp	r3, r1
 8005d64:	f43f aef6 	beq.w	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005d68:	68b3      	ldr	r3, [r6, #8]
 8005d6a:	f023 73e0 	bic.w	r3, r3, #29360128	@ 0x1c00000
 8005d6e:	433b      	orrs	r3, r7
 8005d70:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d74:	60b3      	str	r3, [r6, #8]
}
 8005d76:	e6ed      	b.n	8005b54 <HAL_ADCEx_InjectedConfigChannel+0x104>
 8005d78:	0007ffff 	.word	0x0007ffff
 8005d7c:	407f0000 	.word	0x407f0000
 8005d80:	80080000 	.word	0x80080000
 8005d84:	50000300 	.word	0x50000300
 8005d88:	c3210000 	.word	0xc3210000
 8005d8c:	90c00010 	.word	0x90c00010
 8005d90:	c7520000 	.word	0xc7520000
 8005d94:	cb840000 	.word	0xcb840000
 8005d98:	50000100 	.word	0x50000100
 8005d9c:	04104000 	.word	0x04104000
 8005da0:	03fff000 	.word	0x03fff000
 8005da4:	200004ec 	.word	0x200004ec
 8005da8:	053e2d63 	.word	0x053e2d63
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dac:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005db0:	2d00      	cmp	r5, #0
 8005db2:	f000 80be 	beq.w	8005f32 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
  return __builtin_clz(value);
 8005db6:	fab5 f585 	clz	r5, r5
      LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005dba:	3501      	adds	r5, #1
 8005dbc:	f005 051f 	and.w	r5, r5, #31
 8005dc0:	2d09      	cmp	r5, #9
 8005dc2:	f240 80b6 	bls.w	8005f32 <HAL_ADCEx_InjectedConfigChannel+0x4e2>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dc6:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	f000 812b 	beq.w	8006026 <HAL_ADCEx_InjectedConfigChannel+0x5d6>
  return __builtin_clz(value);
 8005dd0:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005dd4:	3501      	adds	r5, #1
 8005dd6:	06ad      	lsls	r5, r5, #26
 8005dd8:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ddc:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005de0:	2e00      	cmp	r6, #0
 8005de2:	f000 811e 	beq.w	8006022 <HAL_ADCEx_InjectedConfigChannel+0x5d2>
  return __builtin_clz(value);
 8005de6:	fab6 f686 	clz	r6, r6
 8005dea:	3601      	adds	r6, #1
 8005dec:	f006 061f 	and.w	r6, r6, #31
 8005df0:	2701      	movs	r7, #1
 8005df2:	fa07 f606 	lsl.w	r6, r7, r6
 8005df6:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005df8:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	f000 8109 	beq.w	8006014 <HAL_ADCEx_InjectedConfigChannel+0x5c4>
  return __builtin_clz(value);
 8005e02:	fab4 f484 	clz	r4, r4
 8005e06:	1c66      	adds	r6, r4, #1
 8005e08:	f006 061f 	and.w	r6, r6, #31
 8005e0c:	2403      	movs	r4, #3
 8005e0e:	f06f 071d 	mvn.w	r7, #29
 8005e12:	fb14 7406 	smlabb	r4, r4, r6, r7
 8005e16:	0524      	lsls	r4, r4, #20
 8005e18:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8005e1c:	e782      	b.n	8005d24 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e1e:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
 8005e20:	6e1d      	ldr	r5, [r3, #96]	@ 0x60
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005e22:	f3c4 0612 	ubfx	r6, r4, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e26:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005e2a:	2e00      	cmp	r6, #0
 8005e2c:	d05a      	beq.n	8005ee4 <HAL_ADCEx_InjectedConfigChannel+0x494>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e2e:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005e32:	b126      	cbz	r6, 8005e3e <HAL_ADCEx_InjectedConfigChannel+0x3ee>
  return __builtin_clz(value);
 8005e34:	fab6 f686 	clz	r6, r6
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005e38:	42b5      	cmp	r5, r6
 8005e3a:	f000 80ce 	beq.w	8005fda <HAL_ADCEx_InjectedConfigChannel+0x58a>
 8005e3e:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8005e40:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e42:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005e46:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005e4a:	f103 0864 	add.w	r8, r3, #100	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e4e:	fa9c f7ac 	rbit	r7, ip
 8005e52:	f105 0e08 	add.w	lr, r5, #8
 8005e56:	46f1      	mov	r9, lr
  if (value == 0U)
 8005e58:	2f00      	cmp	r7, #0
 8005e5a:	f000 80dd 	beq.w	8006018 <HAL_ADCEx_InjectedConfigChannel+0x5c8>
  return __builtin_clz(value);
 8005e5e:	fab7 f787 	clz	r7, r7
 8005e62:	42b7      	cmp	r7, r6
 8005e64:	f000 80a3 	beq.w	8005fae <HAL_ADCEx_InjectedConfigChannel+0x55e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e68:	f8de 6000 	ldr.w	r6, [lr]
 8005e6c:	f8de 6000 	ldr.w	r6, [lr]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e70:	f3c6 6684 	ubfx	r6, r6, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e74:	fa9c f8ac 	rbit	r8, ip
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005e78:	f105 070c 	add.w	r7, r5, #12
 8005e7c:	46b9      	mov	r9, r7
  if (value == 0U)
 8005e7e:	f1b8 0f00 	cmp.w	r8, #0
 8005e82:	f000 80d3 	beq.w	800602c <HAL_ADCEx_InjectedConfigChannel+0x5dc>
  return __builtin_clz(value);
 8005e86:	fab8 f888 	clz	r8, r8
 8005e8a:	45b0      	cmp	r8, r6
 8005e8c:	d077      	beq.n	8005f7e <HAL_ADCEx_InjectedConfigChannel+0x52e>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005e8e:	683d      	ldr	r5, [r7, #0]
 8005e90:	683d      	ldr	r5, [r7, #0]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e92:	f3c5 6584 	ubfx	r5, r5, #26, #5
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e96:	fa9c f6ac 	rbit	r6, ip
  if (value == 0U)
 8005e9a:	2e00      	cmp	r6, #0
 8005e9c:	f43f ae20 	beq.w	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0x90>
  return __builtin_clz(value);
 8005ea0:	fab6 f486 	clz	r4, r6
 8005ea4:	42ac      	cmp	r4, r5
 8005ea6:	f000 80af 	beq.w	8006008 <HAL_ADCEx_InjectedConfigChannel+0x5b8>
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8005eaa:	4664      	mov	r4, ip
 8005eac:	e618      	b.n	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0x90>
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8005eae:	f103 0714 	add.w	r7, r3, #20
  MODIFY_REG(*preg,
 8005eb2:	593e      	ldr	r6, [r7, r4]
 8005eb4:	4035      	ands	r5, r6
 8005eb6:	513d      	str	r5, [r7, r4]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005eb8:	695c      	ldr	r4, [r3, #20]
 8005eba:	f044 4400 	orr.w	r4, r4, #2147483648	@ 0x80000000
 8005ebe:	615c      	str	r4, [r3, #20]
}
 8005ec0:	e699      	b.n	8005bf6 <HAL_ADCEx_InjectedConfigChannel+0x1a6>
      MODIFY_REG(hadc->Instance->CFGR2,
 8005ec2:	e9d1 570d 	ldrd	r5, r7, [r1, #52]	@ 0x34
 8005ec6:	691e      	ldr	r6, [r3, #16]
 8005ec8:	433d      	orrs	r5, r7
 8005eca:	f426 76ff 	bic.w	r6, r6, #510	@ 0x1fe
 8005ece:	4335      	orrs	r5, r6
 8005ed0:	f045 0502 	orr.w	r5, r5, #2
 8005ed4:	611d      	str	r5, [r3, #16]
 8005ed6:	e673      	b.n	8005bc0 <HAL_ADCEx_InjectedConfigChannel+0x170>
        tmp_jsqr_context_queue_being_built = ((pConfigInjected->InjectedNbrOfConversion - 1U));
 8005ed8:	4628      	mov	r0, r5
 8005eda:	e5e4      	b.n	8005aa6 <HAL_ADCEx_InjectedConfigChannel+0x56>
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8005edc:	f040 7000 	orr.w	r0, r0, #33554432	@ 0x2000000
 8005ee0:	60d8      	str	r0, [r3, #12]
 8005ee2:	e663      	b.n	8005bac <HAL_ADCEx_InjectedConfigChannel+0x15c>
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005ee4:	f3c4 6484 	ubfx	r4, r4, #26, #5
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005ee8:	42a5      	cmp	r5, r4
 8005eea:	d076      	beq.n	8005fda <HAL_ADCEx_InjectedConfigChannel+0x58a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005eec:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8005eee:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ef0:	f103 0560 	add.w	r5, r3, #96	@ 0x60
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ef4:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005ef8:	f103 0864 	add.w	r8, r3, #100	@ 0x64
 8005efc:	42a6      	cmp	r6, r4
 8005efe:	d054      	beq.n	8005faa <HAL_ADCEx_InjectedConfigChannel+0x55a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f00:	68ae      	ldr	r6, [r5, #8]
 8005f02:	68ae      	ldr	r6, [r5, #8]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f04:	f105 0e08 	add.w	lr, r5, #8
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005f08:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8005f0c:	42a6      	cmp	r6, r4
 8005f0e:	d034      	beq.n	8005f7a <HAL_ADCEx_InjectedConfigChannel+0x52a>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f10:	68ee      	ldr	r6, [r5, #12]
 8005f12:	68ee      	ldr	r6, [r5, #12]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f14:	f105 070c 	add.w	r7, r5, #12
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f18:	f3c6 6584 	ubfx	r5, r6, #26, #5
 8005f1c:	e7c2      	b.n	8005ea4 <HAL_ADCEx_InjectedConfigChannel+0x454>
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f1e:	3c1e      	subs	r4, #30
 8005f20:	0524      	lsls	r4, r4, #20
 8005f22:	f044 7400 	orr.w	r4, r4, #33554432	@ 0x2000000
 8005f26:	e6fd      	b.n	8005d24 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f28:	6dd5      	ldr	r5, [r2, #92]	@ 0x5c
 8005f2a:	f045 0520 	orr.w	r5, r5, #32
 8005f2e:	65d5      	str	r5, [r2, #92]	@ 0x5c
        tmp_hal_status = HAL_ERROR;
 8005f30:	e63d      	b.n	8005bae <HAL_ADCEx_InjectedConfigChannel+0x15e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f32:	fa94 f5a4 	rbit	r5, r4
  if (value == 0U)
 8005f36:	2d00      	cmp	r5, #0
 8005f38:	f000 8082 	beq.w	8006040 <HAL_ADCEx_InjectedConfigChannel+0x5f0>
  return __builtin_clz(value);
 8005f3c:	fab5 f585 	clz	r5, r5
                                    (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8005f40:	3501      	adds	r5, #1
 8005f42:	06ad      	lsls	r5, r5, #26
 8005f44:	f005 45f8 	and.w	r5, r5, #2080374784	@ 0x7c000000
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f48:	fa94 f6a4 	rbit	r6, r4
  if (value == 0U)
 8005f4c:	2e00      	cmp	r6, #0
 8005f4e:	d075      	beq.n	800603c <HAL_ADCEx_InjectedConfigChannel+0x5ec>
  return __builtin_clz(value);
 8005f50:	fab6 f686 	clz	r6, r6
 8005f54:	3601      	adds	r6, #1
 8005f56:	f006 061f 	and.w	r6, r6, #31
 8005f5a:	2701      	movs	r7, #1
 8005f5c:	fa07 f606 	lsl.w	r6, r7, r6
 8005f60:	4335      	orrs	r5, r6
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f62:	fa94 f4a4 	rbit	r4, r4
  if (value == 0U)
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	d065      	beq.n	8006036 <HAL_ADCEx_InjectedConfigChannel+0x5e6>
  return __builtin_clz(value);
 8005f6a:	fab4 f484 	clz	r4, r4
 8005f6e:	3401      	adds	r4, #1
 8005f70:	f004 041f 	and.w	r4, r4, #31
 8005f74:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8005f78:	e6d3      	b.n	8005d22 <HAL_ADCEx_InjectedConfigChannel+0x2d2>
 8005f7a:	f105 090c 	add.w	r9, r5, #12
  MODIFY_REG(*preg,
 8005f7e:	f8de 4000 	ldr.w	r4, [lr]
 8005f82:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005f86:	f8ce 4000 	str.w	r4, [lr]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005f8a:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005f8e:	68ec      	ldr	r4, [r5, #12]
 8005f90:	68ed      	ldr	r5, [r5, #12]
 8005f92:	f3cc 0612 	ubfx	r6, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005f96:	464f      	mov	r7, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005f98:	f3c5 6584 	ubfx	r5, r5, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005f9c:	4664      	mov	r4, ip
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	f47f af79 	bne.w	8005e96 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8005fa4:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8005fa8:	e77c      	b.n	8005ea4 <HAL_ADCEx_InjectedConfigChannel+0x454>
 8005faa:	f105 0908 	add.w	r9, r5, #8
  MODIFY_REG(*preg,
 8005fae:	f8d8 4000 	ldr.w	r4, [r8]
 8005fb2:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005fb6:	f8c8 4000 	str.w	r4, [r8]
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005fba:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fbe:	68ac      	ldr	r4, [r5, #8]
 8005fc0:	68ae      	ldr	r6, [r5, #8]
 8005fc2:	f3cc 0712 	ubfx	r7, ip, #0, #19
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005fc6:	46ce      	mov	lr, r9
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005fc8:	f3c6 6684 	ubfx	r6, r6, #26, #5
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005fcc:	4664      	mov	r4, ip
 8005fce:	2f00      	cmp	r7, #0
 8005fd0:	f47f af50 	bne.w	8005e74 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8005fd4:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8005fd8:	e798      	b.n	8005f0c <HAL_ADCEx_InjectedConfigChannel+0x4bc>
  MODIFY_REG(*preg,
 8005fda:	6e1c      	ldr	r4, [r3, #96]	@ 0x60
 8005fdc:	461d      	mov	r5, r3
 8005fde:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005fe2:	f845 4f60 	str.w	r4, [r5, #96]!
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005fe6:	f8d1 c000 	ldr.w	ip, [r1]
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005fea:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8005fec:	6e5e      	ldr	r6, [r3, #100]	@ 0x64
 8005fee:	f3cc 0712 	ubfx	r7, ip, #0, #19
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005ff2:	f3c6 6684 	ubfx	r6, r6, #26, #5
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005ff6:	f103 0864 	add.w	r8, r3, #100	@ 0x64
          == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfigInjected->InjectedChannel))
 8005ffa:	4664      	mov	r4, ip
 8005ffc:	2f00      	cmp	r7, #0
 8005ffe:	f47f af26 	bne.w	8005e4e <HAL_ADCEx_InjectedConfigChannel+0x3fe>
 8006002:	f3cc 6484 	ubfx	r4, ip, #26, #5
 8006006:	e779      	b.n	8005efc <HAL_ADCEx_InjectedConfigChannel+0x4ac>
  MODIFY_REG(*preg,
 8006008:	683c      	ldr	r4, [r7, #0]
 800600a:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800600e:	603c      	str	r4, [r7, #0]
    LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfigInjected->InjectedChannel, pConfigInjected->InjectedSingleDiff);
 8006010:	680c      	ldr	r4, [r1, #0]
}
 8006012:	e565      	b.n	8005ae0 <HAL_ADCEx_InjectedConfigChannel+0x90>
 8006014:	4c0c      	ldr	r4, [pc, #48]	@ (8006048 <HAL_ADCEx_InjectedConfigChannel+0x5f8>)
 8006016:	e685      	b.n	8005d24 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006018:	68ae      	ldr	r6, [r5, #8]
 800601a:	68ae      	ldr	r6, [r5, #8]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800601c:	f3c6 6684 	ubfx	r6, r6, #26, #5
 8006020:	e728      	b.n	8005e74 <HAL_ADCEx_InjectedConfigChannel+0x424>
 8006022:	2602      	movs	r6, #2
 8006024:	e6e7      	b.n	8005df6 <HAL_ADCEx_InjectedConfigChannel+0x3a6>
 8006026:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 800602a:	e6d7      	b.n	8005ddc <HAL_ADCEx_InjectedConfigChannel+0x38c>
 800602c:	68ee      	ldr	r6, [r5, #12]
 800602e:	68ed      	ldr	r5, [r5, #12]
      if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006030:	f3c5 6584 	ubfx	r5, r5, #26, #5
 8006034:	e72f      	b.n	8005e96 <HAL_ADCEx_InjectedConfigChannel+0x446>
 8006036:	f44f 1440 	mov.w	r4, #3145728	@ 0x300000
 800603a:	e673      	b.n	8005d24 <HAL_ADCEx_InjectedConfigChannel+0x2d4>
 800603c:	2602      	movs	r6, #2
 800603e:	e78f      	b.n	8005f60 <HAL_ADCEx_InjectedConfigChannel+0x510>
 8006040:	f04f 6580 	mov.w	r5, #67108864	@ 0x4000000
 8006044:	e780      	b.n	8005f48 <HAL_ADCEx_InjectedConfigChannel+0x4f8>
 8006046:	bf00      	nop
 8006048:	fe500000 	.word	0xfe500000

0800604c <HAL_ADCEx_MultiModeConfigChannel>:
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800604c:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 8006050:	2a01      	cmp	r2, #1
 8006052:	d045      	beq.n	80060e0 <HAL_ADCEx_MultiModeConfigChannel+0x94>
{
 8006054:	b4f0      	push	{r4, r5, r6, r7}

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006056:	6804      	ldr	r4, [r0, #0]
{
 8006058:	b09c      	sub	sp, #112	@ 0x70
 800605a:	4603      	mov	r3, r0
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800605c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 800605e:	2001      	movs	r0, #1
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8006060:	f1b4 4fa0 	cmp.w	r4, #1342177280	@ 0x50000000
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8006064:	9218      	str	r2, [sp, #96]	@ 0x60
  __HAL_LOCK(hadc);
 8006066:	f883 0058 	strb.w	r0, [r3, #88]	@ 0x58
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800606a:	9219      	str	r2, [sp, #100]	@ 0x64
  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 800606c:	d008      	beq.n	8006080 <HAL_ADCEx_MultiModeConfigChannel+0x34>

  if (tmp_hadc_slave.Instance == NULL)
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800606e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006070:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006074:	f041 0120 	orr.w	r1, r1, #32
 8006078:	65d9      	str	r1, [r3, #92]	@ 0x5c
  /* Process unlocked */
  __HAL_UNLOCK(hadc);

  /* Return function status */
  return tmp_hal_status;
}
 800607a:	b01c      	add	sp, #112	@ 0x70
 800607c:	bcf0      	pop	{r4, r5, r6, r7}
 800607e:	4770      	bx	lr
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006080:	4a22      	ldr	r2, [pc, #136]	@ (800610c <HAL_ADCEx_MultiModeConfigChannel+0xc0>)
 8006082:	6890      	ldr	r0, [r2, #8]
 8006084:	0740      	lsls	r0, r0, #29
 8006086:	d50b      	bpl.n	80060a0 <HAL_ADCEx_MultiModeConfigChannel+0x54>
 8006088:	68a2      	ldr	r2, [r4, #8]
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800608a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800608c:	f042 0220 	orr.w	r2, r2, #32
    tmp_hal_status = HAL_ERROR;
 8006090:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006092:	65da      	str	r2, [r3, #92]	@ 0x5c
  __HAL_UNLOCK(hadc);
 8006094:	2200      	movs	r2, #0
 8006096:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
}
 800609a:	b01c      	add	sp, #112	@ 0x70
 800609c:	bcf0      	pop	{r4, r5, r6, r7}
 800609e:	4770      	bx	lr
 80060a0:	68a0      	ldr	r0, [r4, #8]
 80060a2:	0745      	lsls	r5, r0, #29
 80060a4:	d4f1      	bmi.n	800608a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80060a6:	680d      	ldr	r5, [r1, #0]
 80060a8:	b1e5      	cbz	r5, 80060e4 <HAL_ADCEx_MultiModeConfigChannel+0x98>
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80060aa:	4e19      	ldr	r6, [pc, #100]	@ (8006110 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80060ac:	684f      	ldr	r7, [r1, #4]
 80060ae:	68b0      	ldr	r0, [r6, #8]
 80060b0:	f893 c038 	ldrb.w	ip, [r3, #56]	@ 0x38
 80060b4:	f420 4060 	bic.w	r0, r0, #57344	@ 0xe000
 80060b8:	4338      	orrs	r0, r7
 80060ba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
 80060be:	60b0      	str	r0, [r6, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80060c0:	68a0      	ldr	r0, [r4, #8]
 80060c2:	6892      	ldr	r2, [r2, #8]
 80060c4:	07c0      	lsls	r0, r0, #31
 80060c6:	d41e      	bmi.n	8006106 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80060c8:	07d7      	lsls	r7, r2, #31
 80060ca:	d41c      	bmi.n	8006106 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        MODIFY_REG(tmpADC_Common->CCR,
 80060cc:	68b2      	ldr	r2, [r6, #8]
 80060ce:	6889      	ldr	r1, [r1, #8]
 80060d0:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 80060d4:	430d      	orrs	r5, r1
 80060d6:	f022 020f 	bic.w	r2, r2, #15
 80060da:	4315      	orrs	r5, r2
 80060dc:	60b5      	str	r5, [r6, #8]
 80060de:	e012      	b.n	8006106 <HAL_ADCEx_MultiModeConfigChannel+0xba>
  __HAL_LOCK(hadc);
 80060e0:	2002      	movs	r0, #2
}
 80060e2:	4770      	bx	lr
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80060e4:	480a      	ldr	r0, [pc, #40]	@ (8006110 <HAL_ADCEx_MultiModeConfigChannel+0xc4>)
 80060e6:	6881      	ldr	r1, [r0, #8]
 80060e8:	f421 4160 	bic.w	r1, r1, #57344	@ 0xe000
 80060ec:	6081      	str	r1, [r0, #8]
 80060ee:	68a1      	ldr	r1, [r4, #8]
 80060f0:	6892      	ldr	r2, [r2, #8]
 80060f2:	07cd      	lsls	r5, r1, #31
 80060f4:	d407      	bmi.n	8006106 <HAL_ADCEx_MultiModeConfigChannel+0xba>
 80060f6:	07d4      	lsls	r4, r2, #31
 80060f8:	d405      	bmi.n	8006106 <HAL_ADCEx_MultiModeConfigChannel+0xba>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80060fa:	6882      	ldr	r2, [r0, #8]
 80060fc:	f422 6271 	bic.w	r2, r2, #3856	@ 0xf10
 8006100:	f022 020f 	bic.w	r2, r2, #15
 8006104:	6082      	str	r2, [r0, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006106:	2000      	movs	r0, #0
 8006108:	e7c4      	b.n	8006094 <HAL_ADCEx_MultiModeConfigChannel+0x48>
 800610a:	bf00      	nop
 800610c:	50000100 	.word	0x50000100
 8006110:	50000300 	.word	0x50000300

08006114 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006114:	b530      	push	{r4, r5, lr}
 8006116:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006118:	2300      	movs	r3, #0
 800611a:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if (hcomp == NULL)
 800611c:	2800      	cmp	r0, #0
 800611e:	d051      	beq.n	80061c4 <HAL_COMP_Init+0xb0>
  {
    status = HAL_ERROR;
  }
  else if (__HAL_COMP_IS_LOCKED(hcomp))
 8006120:	6802      	ldr	r2, [r0, #0]
 8006122:	6813      	ldr	r3, [r2, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	4604      	mov	r4, r0
 8006128:	db4c      	blt.n	80061c4 <HAL_COMP_Init+0xb0>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if (hcomp->State == HAL_COMP_STATE_RESET)
 800612a:	7f43      	ldrb	r3, [r0, #29]
 800612c:	f003 01ff 	and.w	r1, r3, #255	@ 0xff
 8006130:	2b00      	cmp	r3, #0
 8006132:	d073      	beq.n	800621c <HAL_COMP_Init+0x108>
    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);

    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InputMinus
               | hcomp->Init.InputPlus
 8006134:	e9d4 0301 	ldrd	r0, r3, [r4, #4]
               | hcomp->Init.BlankingSrce
 8006138:	6961      	ldr	r1, [r4, #20]
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800613a:	6815      	ldr	r5, [r2, #0]
               | hcomp->Init.InputPlus
 800613c:	4303      	orrs	r3, r0
               | hcomp->Init.BlankingSrce
 800613e:	430b      	orrs	r3, r1
               | hcomp->Init.Hysteresis
 8006140:	68e1      	ldr	r1, [r4, #12]
               | hcomp->Init.OutputPol
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006142:	6810      	ldr	r0, [r2, #0]
               | hcomp->Init.Hysteresis
 8006144:	430b      	orrs	r3, r1
    tmp_csr = (hcomp->Init.InputMinus
 8006146:	6921      	ldr	r1, [r4, #16]
 8006148:	430b      	orrs	r3, r1
    MODIFY_REG(hcomp->Instance->CSR,
 800614a:	493c      	ldr	r1, [pc, #240]	@ (800623c <HAL_COMP_Init+0x128>)
 800614c:	4001      	ands	r1, r0
 800614e:	430b      	orrs	r3, r1
 8006150:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006152:	6813      	ldr	r3, [r2, #0]
 8006154:	021b      	lsls	r3, r3, #8
 8006156:	d501      	bpl.n	800615c <HAL_COMP_Init+0x48>
 8006158:	022d      	lsls	r5, r5, #8
 800615a:	d549      	bpl.n	80061f0 <HAL_COMP_Init+0xdc>
        wait_loop_index--;
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800615c:	4b38      	ldr	r3, [pc, #224]	@ (8006240 <HAL_COMP_Init+0x12c>)
 800615e:	429a      	cmp	r2, r3
 8006160:	d062      	beq.n	8006228 <HAL_COMP_Init+0x114>
 8006162:	4b38      	ldr	r3, [pc, #224]	@ (8006244 <HAL_COMP_Init+0x130>)
 8006164:	429a      	cmp	r2, r3
 8006166:	d064      	beq.n	8006232 <HAL_COMP_Init+0x11e>
 8006168:	3304      	adds	r3, #4
 800616a:	429a      	cmp	r2, r3
 800616c:	bf15      	itete	ne
 800616e:	f06f 4280 	mvnne.w	r2, #1073741824	@ 0x40000000
 8006172:	f06f 5200 	mvneq.w	r2, #536870912	@ 0x20000000
 8006176:	f04f 4180 	movne.w	r1, #1073741824	@ 0x40000000
 800617a:	f04f 5100 	moveq.w	r1, #536870912	@ 0x20000000

    /* Manage EXTI settings */
    if ((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800617e:	69a3      	ldr	r3, [r4, #24]
 8006180:	0798      	lsls	r0, r3, #30
 8006182:	d022      	beq.n	80061ca <HAL_COMP_Init+0xb6>
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006184:	4d30      	ldr	r5, [pc, #192]	@ (8006248 <HAL_COMP_Init+0x134>)
 8006186:	68a8      	ldr	r0, [r5, #8]
    {
      /* Configure EXTI rising edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006188:	f013 0f10 	tst.w	r3, #16
 800618c:	bf14      	ite	ne
 800618e:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006190:	4010      	andeq	r0, r2
 8006192:	60a8      	str	r0, [r5, #8]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006194:	4d2c      	ldr	r5, [pc, #176]	@ (8006248 <HAL_COMP_Init+0x134>)
 8006196:	68e8      	ldr	r0, [r5, #12]
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI falling edge */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006198:	f013 0f20 	tst.w	r3, #32
 800619c:	bf14      	ite	ne
 800619e:	4308      	orrne	r0, r1
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80061a0:	4010      	andeq	r0, r2
 80061a2:	60e8      	str	r0, [r5, #12]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80061a4:	4828      	ldr	r0, [pc, #160]	@ (8006248 <HAL_COMP_Init+0x134>)
 80061a6:	6141      	str	r1, [r0, #20]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80061a8:	6845      	ldr	r5, [r0, #4]
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif /* COMP7 */

      /* Configure EXTI event mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 80061aa:	f013 0f02 	tst.w	r3, #2
 80061ae:	bf14      	ite	ne
 80061b0:	430d      	orrne	r5, r1
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80061b2:	4015      	andeq	r5, r2
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* COMP7 */
      }

      /* Configure EXTI interrupt mode */
      if ((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 80061b4:	07db      	lsls	r3, r3, #31
 80061b6:	6045      	str	r5, [r0, #4]
 80061b8:	d515      	bpl.n	80061e6 <HAL_COMP_Init+0xd2>
  SET_BIT(EXTI->IMR1, ExtiLine);
 80061ba:	4b23      	ldr	r3, [pc, #140]	@ (8006248 <HAL_COMP_Init+0x134>)
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	4311      	orrs	r1, r2
 80061c0:	6019      	str	r1, [r3, #0]
}
 80061c2:	e009      	b.n	80061d8 <HAL_COMP_Init+0xc4>
    status = HAL_ERROR;
 80061c4:	2001      	movs	r0, #1
      hcomp->State = HAL_COMP_STATE_READY;
    }
  }

  return status;
}
 80061c6:	b003      	add	sp, #12
 80061c8:	bd30      	pop	{r4, r5, pc}
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80061ca:	4b1f      	ldr	r3, [pc, #124]	@ (8006248 <HAL_COMP_Init+0x134>)
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	4011      	ands	r1, r2
 80061d0:	6059      	str	r1, [r3, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	400a      	ands	r2, r1
 80061d6:	601a      	str	r2, [r3, #0]
    if (hcomp->State == HAL_COMP_STATE_RESET)
 80061d8:	7f63      	ldrb	r3, [r4, #29]
 80061da:	b90b      	cbnz	r3, 80061e0 <HAL_COMP_Init+0xcc>
      hcomp->State = HAL_COMP_STATE_READY;
 80061dc:	2301      	movs	r3, #1
 80061de:	7763      	strb	r3, [r4, #29]
  HAL_StatusTypeDef status = HAL_OK;
 80061e0:	2000      	movs	r0, #0
}
 80061e2:	b003      	add	sp, #12
 80061e4:	bd30      	pop	{r4, r5, pc}
 80061e6:	4918      	ldr	r1, [pc, #96]	@ (8006248 <HAL_COMP_Init+0x134>)
 80061e8:	680b      	ldr	r3, [r1, #0]
 80061ea:	4013      	ands	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]
}
 80061ee:	e7f3      	b.n	80061d8 <HAL_COMP_Init+0xc4>
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061f0:	4b16      	ldr	r3, [pc, #88]	@ (800624c <HAL_COMP_Init+0x138>)
 80061f2:	4917      	ldr	r1, [pc, #92]	@ (8006250 <HAL_COMP_Init+0x13c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	099b      	lsrs	r3, r3, #6
 80061f8:	fba1 1303 	umull	r1, r3, r1, r3
 80061fc:	099b      	lsrs	r3, r3, #6
 80061fe:	3301      	adds	r3, #1
 8006200:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006208:	9b01      	ldr	r3, [sp, #4]
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0a6      	beq.n	800615c <HAL_COMP_Init+0x48>
        wait_loop_index--;
 800620e:	9b01      	ldr	r3, [sp, #4]
 8006210:	3b01      	subs	r3, #1
 8006212:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8006214:	9b01      	ldr	r3, [sp, #4]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1f9      	bne.n	800620e <HAL_COMP_Init+0xfa>
 800621a:	e79f      	b.n	800615c <HAL_COMP_Init+0x48>
      hcomp->Lock = HAL_UNLOCKED;
 800621c:	7701      	strb	r1, [r0, #28]
      COMP_CLEAR_ERRORCODE(hcomp);
 800621e:	6201      	str	r1, [r0, #32]
      HAL_COMP_MspInit(hcomp);
 8006220:	f7fe fc6e 	bl	8004b00 <HAL_COMP_MspInit>
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006224:	6822      	ldr	r2, [r4, #0]
 8006226:	e785      	b.n	8006134 <HAL_COMP_Init+0x20>
 8006228:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800622c:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006230:	e7a5      	b.n	800617e <HAL_COMP_Init+0x6a>
 8006232:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006236:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800623a:	e7a0      	b.n	800617e <HAL_COMP_Init+0x6a>
 800623c:	ff007e0f 	.word	0xff007e0f
 8006240:	40010200 	.word	0x40010200
 8006244:	40010204 	.word	0x40010204
 8006248:	40010400 	.word	0x40010400
 800624c:	200004ec 	.word	0x200004ec
 8006250:	053e2d63 	.word	0x053e2d63

08006254 <HAL_CORDIC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CORDIC_Init(CORDIC_HandleTypeDef *hcordic)
{
  /* Check the CORDIC handle allocation */
  if (hcordic == NULL)
 8006254:	b1b0      	cbz	r0, 8006284 <HAL_CORDIC_Init+0x30>
{
 8006256:	b510      	push	{r4, lr}

    /* Initialize the low level hardware */
    hcordic->MspInitCallback(hcordic);
  }
#else
  if (hcordic->State == HAL_CORDIC_STATE_RESET)
 8006258:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800625c:	4604      	mov	r4, r0
 800625e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006262:	b153      	cbz	r3, 800627a <HAL_CORDIC_Init+0x26>
    HAL_CORDIC_MspInit(hcordic);
  }
#endif /* (USE_HAL_CORDIC_REGISTER_CALLBACKS) */

  /* Set CORDIC error code to none */
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006264:	2000      	movs	r0, #0

  /* Reset DMADirection */
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;

  /* Change CORDIC peripheral state */
  hcordic->State = HAL_CORDIC_STATE_READY;
 8006266:	2301      	movs	r3, #1
  hcordic->ErrorCode = HAL_CORDIC_ERROR_NONE;
 8006268:	6260      	str	r0, [r4, #36]	@ 0x24
  hcordic->State = HAL_CORDIC_STATE_READY;
 800626a:	f884 3021 	strb.w	r3, [r4, #33]	@ 0x21
  hcordic->pInBuff = NULL;
 800626e:	e9c4 0001 	strd	r0, r0, [r4, #4]
  hcordic->NbCalcToOrder = 0U;
 8006272:	e9c4 0003 	strd	r0, r0, [r4, #12]
  hcordic->DMADirection = CORDIC_DMA_DIR_NONE;
 8006276:	6160      	str	r0, [r4, #20]

  /* Return function status */
  return HAL_OK;
}
 8006278:	bd10      	pop	{r4, pc}
    hcordic->Lock = HAL_UNLOCKED;
 800627a:	f880 2020 	strb.w	r2, [r0, #32]
    HAL_CORDIC_MspInit(hcordic);
 800627e:	f7fe fcb3 	bl	8004be8 <HAL_CORDIC_MspInit>
 8006282:	e7ef      	b.n	8006264 <HAL_CORDIC_Init+0x10>
    return HAL_ERROR;
 8006284:	2001      	movs	r0, #1
}
 8006286:	4770      	bx	lr

08006288 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006288:	4907      	ldr	r1, [pc, #28]	@ (80062a8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800628a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800628c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800628e:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006292:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006296:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006298:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800629a:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800629e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80062a2:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	e000ed00 	.word	0xe000ed00

080062ac <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80062ac:	4b1b      	ldr	r3, [pc, #108]	@ (800631c <HAL_NVIC_SetPriority+0x70>)
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062b4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062b6:	f1c3 0e07 	rsb	lr, r3, #7
 80062ba:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062be:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062c2:	bf28      	it	cs
 80062c4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062c8:	f1bc 0f06 	cmp.w	ip, #6
 80062cc:	d91c      	bls.n	8006308 <HAL_NVIC_SetPriority+0x5c>
 80062ce:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80062d2:	f04f 33ff 	mov.w	r3, #4294967295
 80062d6:	fa03 f30c 	lsl.w	r3, r3, ip
 80062da:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	fa03 f30e 	lsl.w	r3, r3, lr
 80062e6:	ea21 0303 	bic.w	r3, r1, r3
 80062ea:	fa03 f30c 	lsl.w	r3, r3, ip
 80062ee:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f0:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80062f2:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80062f6:	db0a      	blt.n	800630e <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062f8:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 80062fc:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006300:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006304:	f85d fb04 	ldr.w	pc, [sp], #4
 8006308:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800630a:	4694      	mov	ip, r2
 800630c:	e7e7      	b.n	80062de <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800630e:	4a04      	ldr	r2, [pc, #16]	@ (8006320 <HAL_NVIC_SetPriority+0x74>)
 8006310:	f000 000f 	and.w	r0, r0, #15
 8006314:	4402      	add	r2, r0
 8006316:	7613      	strb	r3, [r2, #24]
 8006318:	f85d fb04 	ldr.w	pc, [sp], #4
 800631c:	e000ed00 	.word	0xe000ed00
 8006320:	e000ecfc 	.word	0xe000ecfc

08006324 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006324:	2800      	cmp	r0, #0
 8006326:	db07      	blt.n	8006338 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006328:	4a04      	ldr	r2, [pc, #16]	@ (800633c <HAL_NVIC_EnableIRQ+0x18>)
 800632a:	0941      	lsrs	r1, r0, #5
 800632c:	2301      	movs	r3, #1
 800632e:	f000 001f 	and.w	r0, r0, #31
 8006332:	4083      	lsls	r3, r0
 8006334:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	e000e100 	.word	0xe000e100

08006340 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006340:	2800      	cmp	r0, #0
 8006342:	db0c      	blt.n	800635e <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006344:	0943      	lsrs	r3, r0, #5
 8006346:	4906      	ldr	r1, [pc, #24]	@ (8006360 <HAL_NVIC_DisableIRQ+0x20>)
 8006348:	f000 001f 	and.w	r0, r0, #31
 800634c:	3320      	adds	r3, #32
 800634e:	2201      	movs	r2, #1
 8006350:	4082      	lsls	r2, r0
 8006352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8006356:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800635a:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 800635e:	4770      	bx	lr
 8006360:	e000e100 	.word	0xe000e100

08006364 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006364:	3801      	subs	r0, #1
 8006366:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 800636a:	d301      	bcc.n	8006370 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 800636c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800636e:	4770      	bx	lr
{
 8006370:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006372:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006376:	4c07      	ldr	r4, [pc, #28]	@ (8006394 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006378:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800637a:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800637e:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006382:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006384:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006386:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006388:	619a      	str	r2, [r3, #24]
}
 800638a:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800638e:	6119      	str	r1, [r3, #16]
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	e000ed00 	.word	0xe000ed00

08006398 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop

0800639c <HAL_SYSTICK_IRQHandler>:
{
 800639c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800639e:	f7ff fffb 	bl	8006398 <HAL_SYSTICK_Callback>
}
 80063a2:	bd08      	pop	{r3, pc}

080063a4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80063a4:	b188      	cbz	r0, 80063ca <HAL_DAC_Init+0x26>
{
 80063a6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80063a8:	7903      	ldrb	r3, [r0, #4]
 80063aa:	4604      	mov	r4, r0
 80063ac:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80063b0:	b13b      	cbz	r3, 80063c2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80063b2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 80063b4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80063b6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 80063b8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80063ba:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80063bc:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 80063be:	4618      	mov	r0, r3
}
 80063c0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 80063c2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 80063c4:	f7fe fc26 	bl	8004c14 <HAL_DAC_MspInit>
 80063c8:	e7f3      	b.n	80063b2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 80063ca:	2001      	movs	r0, #1
}
 80063cc:	4770      	bx	lr
 80063ce:	bf00      	nop

080063d0 <HAL_DAC_ConfigChannel>:
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80063d0:	2800      	cmp	r0, #0
 80063d2:	f000 80c2 	beq.w	800655a <HAL_DAC_ConfigChannel+0x18a>
{
 80063d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063da:	460f      	mov	r7, r1
  if ((hdac == NULL) || (sConfig == NULL))
 80063dc:	2900      	cmp	r1, #0
 80063de:	f000 80be 	beq.w	800655e <HAL_DAC_ConfigChannel+0x18e>
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80063e2:	7943      	ldrb	r3, [r0, #5]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	4605      	mov	r5, r0
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 80063e8:	6888      	ldr	r0, [r1, #8]
  __HAL_LOCK(hdac);
 80063ea:	f000 80c7 	beq.w	800657c <HAL_DAC_ConfigChannel+0x1ac>
 80063ee:	2301      	movs	r3, #1
 80063f0:	716b      	strb	r3, [r5, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80063f2:	2804      	cmp	r0, #4
  hdac->State = HAL_DAC_STATE_BUSY;
 80063f4:	f04f 0302 	mov.w	r3, #2
 80063f8:	4616      	mov	r6, r2
 80063fa:	712b      	strb	r3, [r5, #4]
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80063fc:	d06f      	beq.n	80064de <HAL_DAC_ConfigChannel+0x10e>

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80063fe:	682b      	ldr	r3, [r5, #0]
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006400:	f002 0610 	and.w	r6, r2, #16
  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8006404:	69fa      	ldr	r2, [r7, #28]
 8006406:	2a01      	cmp	r2, #1
 8006408:	d108      	bne.n	800641c <HAL_DAC_ConfigChannel+0x4c>
    tmpreg1 = hdac->Instance->CCR;
 800640a:	6b99      	ldr	r1, [r3, #56]	@ 0x38
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800640c:	6a3a      	ldr	r2, [r7, #32]
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800640e:	241f      	movs	r4, #31
 8006410:	40b4      	lsls	r4, r6
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006412:	40b2      	lsls	r2, r6
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8006414:	ea21 0104 	bic.w	r1, r1, r4
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006418:	430a      	orrs	r2, r1
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800641a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800641c:	69b9      	ldr	r1, [r7, #24]
  tmpreg1 = hdac->Instance->MCR;
 800641e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
  {
    connectOnChip = DAC_MCR_MODE1_0;
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006420:	f8d7 e014 	ldr.w	lr, [r7, #20]
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006424:	2901      	cmp	r1, #1
 8006426:	f000 8095 	beq.w	8006554 <HAL_DAC_ConfigChannel+0x184>
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800642a:	2902      	cmp	r1, #2
 800642c:	f000 809a 	beq.w	8006564 <HAL_DAC_ConfigChannel+0x194>
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006430:	fabe fc8e 	clz	ip, lr
 8006434:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006438:	793c      	ldrb	r4, [r7, #4]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800643a:	7979      	ldrb	r1, [r7, #5]
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800643c:	f1a4 0401 	sub.w	r4, r4, #1
 8006440:	fab4 f484 	clz	r4, r4
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006444:	f1a1 0101 	sub.w	r1, r1, #1
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006448:	0964      	lsrs	r4, r4, #5
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800644a:	fab1 f181 	clz	r1, r1
 800644e:	0949      	lsrs	r1, r1, #5
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8006450:	0224      	lsls	r4, r4, #8
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006452:	ea44 2441 	orr.w	r4, r4, r1, lsl #9
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8006456:	f240 3107 	movw	r1, #775	@ 0x307
 800645a:	40b1      	lsls	r1, r6
 800645c:	ea22 0801 	bic.w	r8, r2, r1
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006460:	683a      	ldr	r2, [r7, #0]
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8006462:	ea44 040e 	orr.w	r4, r4, lr
 8006466:	4304      	orrs	r4, r0
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006468:	2a02      	cmp	r2, #2
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800646a:	ea44 040c 	orr.w	r4, r4, ip
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800646e:	f428 4840 	bic.w	r8, r8, #49152	@ 0xc000
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8006472:	d07a      	beq.n	800656a <HAL_DAC_ConfigChannel+0x19a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8006474:	ea48 0802 	orr.w	r8, r8, r2
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8006478:	40b4      	lsls	r4, r6
 800647a:	ea44 0408 	orr.w	r4, r4, r8
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800647e:	63dc      	str	r4, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006480:	681a      	ldr	r2, [r3, #0]
 8006482:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8006486:	40b1      	lsls	r1, r6
 8006488:	ea22 0201 	bic.w	r2, r2, r1
 800648c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800648e:	e9d7 1203 	ldrd	r1, r2, [r7, #12]
  tmpreg1 = hdac->Instance->CR;
 8006492:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8006494:	f640 70fe 	movw	r0, #4094	@ 0xffe
 8006498:	40b0      	lsls	r0, r6
 800649a:	ea24 0400 	bic.w	r4, r4, r0
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800649e:	fa01 f006 	lsl.w	r0, r1, r6
 80064a2:	4320      	orrs	r0, r4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80064a4:	0192      	lsls	r2, r2, #6
  hdac->Instance->CR = tmpreg1;
 80064a6:	6018      	str	r0, [r3, #0]
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80064a8:	f3c1 0183 	ubfx	r1, r1, #2, #4
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80064ac:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80064b0:	430a      	orrs	r2, r1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064b2:	24c0      	movs	r4, #192	@ 0xc0
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	40b4      	lsls	r4, r6
 80064b8:	ea21 0104 	bic.w	r1, r1, r4
 80064bc:	6019      	str	r1, [r3, #0]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80064be:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80064c0:	f640 700f 	movw	r0, #3855	@ 0xf0f
 80064c4:	40b0      	lsls	r0, r6
 80064c6:	ea21 0100 	bic.w	r1, r1, r0
 80064ca:	40b2      	lsls	r2, r6
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80064cc:	2400      	movs	r4, #0
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80064ce:	430a      	orrs	r2, r1
  hdac->State = HAL_DAC_STATE_READY;
 80064d0:	2101      	movs	r1, #1
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 80064d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Return function status */
  return status;
 80064d4:	4620      	mov	r0, r4
  hdac->State = HAL_DAC_STATE_READY;
 80064d6:	7129      	strb	r1, [r5, #4]
  __HAL_UNLOCK(hdac);
 80064d8:	716c      	strb	r4, [r5, #5]
}
 80064da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    tickstart = HAL_GetTick();
 80064de:	f7fe ff3b 	bl	8005358 <HAL_GetTick>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064e2:	682b      	ldr	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80064e4:	4604      	mov	r4, r0
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
    if (Channel == DAC_CHANNEL_1)
 80064e8:	b156      	cbz	r6, 8006500 <HAL_DAC_ConfigChannel+0x130>
 80064ea:	e018      	b.n	800651e <HAL_DAC_ConfigChannel+0x14e>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80064ec:	f7fe ff34 	bl	8005358 <HAL_GetTick>
 80064f0:	1b00      	subs	r0, r0, r4
 80064f2:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064f4:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80064f6:	d902      	bls.n	80064fe <HAL_DAC_ConfigChannel+0x12e>
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80064fa:	0411      	lsls	r1, r2, #16
 80064fc:	d448      	bmi.n	8006590 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80064fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006500:	0412      	lsls	r2, r2, #16
 8006502:	d4f3      	bmi.n	80064ec <HAL_DAC_ConfigChannel+0x11c>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006504:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006506:	641a      	str	r2, [r3, #64]	@ 0x40
 8006508:	e00d      	b.n	8006526 <HAL_DAC_ConfigChannel+0x156>
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800650a:	f7fe ff25 	bl	8005358 <HAL_GetTick>
 800650e:	1b00      	subs	r0, r0, r4
 8006510:	2801      	cmp	r0, #1
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006512:	682b      	ldr	r3, [r5, #0]
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8006514:	d902      	bls.n	800651c <HAL_DAC_ConfigChannel+0x14c>
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006516:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006518:	2a00      	cmp	r2, #0
 800651a:	db39      	blt.n	8006590 <HAL_DAC_ConfigChannel+0x1c0>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800651c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800651e:	2a00      	cmp	r2, #0
 8006520:	dbf3      	blt.n	800650a <HAL_DAC_ConfigChannel+0x13a>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006524:	645a      	str	r2, [r3, #68]	@ 0x44
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006526:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006528:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800652a:	f006 0610 	and.w	r6, r6, #16
 800652e:	f240 30ff 	movw	r0, #1023	@ 0x3ff
 8006532:	40b0      	lsls	r0, r6
 8006534:	40b1      	lsls	r1, r6
 8006536:	ea22 0200 	bic.w	r2, r2, r0
 800653a:	430a      	orrs	r2, r1
 800653c:	649a      	str	r2, [r3, #72]	@ 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 800653e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006540:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006542:	20ff      	movs	r0, #255	@ 0xff
 8006544:	40b0      	lsls	r0, r6
 8006546:	ea22 0200 	bic.w	r2, r2, r0
 800654a:	40b1      	lsls	r1, r6
 800654c:	430a      	orrs	r2, r1
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800654e:	68b8      	ldr	r0, [r7, #8]
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006550:	64da      	str	r2, [r3, #76]	@ 0x4c
 8006552:	e757      	b.n	8006404 <HAL_DAC_ConfigChannel+0x34>
    connectOnChip = 0x00000000UL;
 8006554:	f04f 0c00 	mov.w	ip, #0
 8006558:	e76e      	b.n	8006438 <HAL_DAC_ConfigChannel+0x68>
    return HAL_ERROR;
 800655a:	2001      	movs	r0, #1
}
 800655c:	4770      	bx	lr
    return HAL_ERROR;
 800655e:	2001      	movs	r0, #1
}
 8006560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    connectOnChip = DAC_MCR_MODE1_0;
 8006564:	f04f 0c01 	mov.w	ip, #1
 8006568:	e766      	b.n	8006438 <HAL_DAC_ConfigChannel+0x68>
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800656a:	f001 fbe7 	bl	8007d3c <HAL_RCC_GetHCLKFreq>
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800656e:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <HAL_DAC_ConfigChannel+0x1d0>)
 8006570:	4298      	cmp	r0, r3
 8006572:	d905      	bls.n	8006580 <HAL_DAC_ConfigChannel+0x1b0>
  hdac->Instance->MCR = tmpreg1;
 8006574:	682b      	ldr	r3, [r5, #0]
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8006576:	f448 4800 	orr.w	r8, r8, #32768	@ 0x8000
 800657a:	e77d      	b.n	8006478 <HAL_DAC_ConfigChannel+0xa8>
  __HAL_LOCK(hdac);
 800657c:	2002      	movs	r0, #2
 800657e:	e7ac      	b.n	80064da <HAL_DAC_ConfigChannel+0x10a>
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006580:	4a08      	ldr	r2, [pc, #32]	@ (80065a4 <HAL_DAC_ConfigChannel+0x1d4>)
  hdac->Instance->MCR = tmpreg1;
 8006582:	682b      	ldr	r3, [r5, #0]
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8006584:	4290      	cmp	r0, r2
 8006586:	f67f af77 	bls.w	8006478 <HAL_DAC_ConfigChannel+0xa8>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800658a:	f448 4880 	orr.w	r8, r8, #16384	@ 0x4000
 800658e:	e773      	b.n	8006478 <HAL_DAC_ConfigChannel+0xa8>
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006590:	692b      	ldr	r3, [r5, #16]
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006592:	2203      	movs	r2, #3
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006594:	f043 0308 	orr.w	r3, r3, #8
 8006598:	612b      	str	r3, [r5, #16]
            return HAL_TIMEOUT;
 800659a:	2003      	movs	r0, #3
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800659c:	712a      	strb	r2, [r5, #4]
            return HAL_TIMEOUT;
 800659e:	e79c      	b.n	80064da <HAL_DAC_ConfigChannel+0x10a>
 80065a0:	09896800 	.word	0x09896800
 80065a4:	04c4b400 	.word	0x04c4b400

080065a8 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80065a8:	2800      	cmp	r0, #0
 80065aa:	d076      	beq.n	800669a <HAL_DMA_Init+0xf2>
{
 80065ac:	b4f0      	push	{r4, r5, r6, r7}
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80065ae:	4a3c      	ldr	r2, [pc, #240]	@ (80066a0 <HAL_DMA_Init+0xf8>)
 80065b0:	6804      	ldr	r4, [r0, #0]
 80065b2:	4294      	cmp	r4, r2
 80065b4:	4603      	mov	r3, r0
 80065b6:	d95c      	bls.n	8006672 <HAL_DMA_Init+0xca>
    hdma->DmaBaseAddress = DMA1;
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065b8:	493a      	ldr	r1, [pc, #232]	@ (80066a4 <HAL_DMA_Init+0xfc>)
 80065ba:	4a3b      	ldr	r2, [pc, #236]	@ (80066a8 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA2;
 80065bc:	483b      	ldr	r0, [pc, #236]	@ (80066ac <HAL_DMA_Init+0x104>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80065be:	4421      	add	r1, r4
 80065c0:	fba2 2101 	umull	r2, r1, r2, r1
 80065c4:	0909      	lsrs	r1, r1, #4
 80065c6:	0089      	lsls	r1, r1, #2
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80065c8:	2202      	movs	r2, #2
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80065ca:	689d      	ldr	r5, [r3, #8]
  hdma->State = HAL_DMA_STATE_BUSY;
 80065cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
  tmp |=  hdma->Init.Direction        |
 80065d0:	68da      	ldr	r2, [r3, #12]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065d2:	4e35      	ldr	r6, [pc, #212]	@ (80066a8 <HAL_DMA_Init+0x100>)
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80065d4:	4f36      	ldr	r7, [pc, #216]	@ (80066b0 <HAL_DMA_Init+0x108>)
 80065d6:	e9c3 0110 	strd	r0, r1, [r3, #64]	@ 0x40
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065da:	6918      	ldr	r0, [r3, #16]
  tmp |=  hdma->Init.Direction        |
 80065dc:	432a      	orrs	r2, r5
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065de:	4302      	orrs	r2, r0
 80065e0:	6958      	ldr	r0, [r3, #20]
 80065e2:	4302      	orrs	r2, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e4:	6998      	ldr	r0, [r3, #24]
 80065e6:	4302      	orrs	r2, r0
 80065e8:	69d8      	ldr	r0, [r3, #28]
 80065ea:	4302      	orrs	r2, r0
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80065ec:	b2e0      	uxtb	r0, r4
 80065ee:	3808      	subs	r0, #8
 80065f0:	fba6 6000 	umull	r6, r0, r6, r0
  tmp = hdma->Instance->CCR;
 80065f4:	6826      	ldr	r6, [r4, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065f6:	f426 4cff 	bic.w	ip, r6, #32640	@ 0x7f80
          hdma->Init.Mode                | hdma->Init.Priority;
 80065fa:	6a1e      	ldr	r6, [r3, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80065fc:	f02c 0c70 	bic.w	ip, ip, #112	@ 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8006600:	4332      	orrs	r2, r6
  tmp |=  hdma->Init.Direction        |
 8006602:	ea42 020c 	orr.w	r2, r2, ip
  hdma->Instance->CCR = tmp;
 8006606:	6022      	str	r2, [r4, #0]
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006608:	4e25      	ldr	r6, [pc, #148]	@ (80066a0 <HAL_DMA_Init+0xf8>)
 800660a:	4a2a      	ldr	r2, [pc, #168]	@ (80066b4 <HAL_DMA_Init+0x10c>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800660c:	f3c0 1004 	ubfx	r0, r0, #4, #5
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8006610:	42b4      	cmp	r4, r6
 8006612:	bf98      	it	ls
 8006614:	463a      	movls	r2, r7
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006616:	f206 4679 	addw	r6, r6, #1145	@ 0x479
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800661a:	2401      	movs	r4, #1
 800661c:	fa04 f000 	lsl.w	r0, r4, r0
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006620:	64de      	str	r6, [r3, #76]	@ 0x4c
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006622:	f5b5 4f80 	cmp.w	r5, #16384	@ 0x4000
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8006626:	eb01 0602 	add.w	r6, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800662a:	6518      	str	r0, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800662c:	649e      	str	r6, [r3, #72]	@ 0x48
 800662e:	ea4f 0191 	mov.w	r1, r1, lsr #2
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006632:	d027      	beq.n	8006684 <HAL_DMA_Init+0xdc>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006634:	685e      	ldr	r6, [r3, #4]
 8006636:	b2f5      	uxtb	r5, r6
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006638:	3e01      	subs	r6, #1
 800663a:	2e03      	cmp	r6, #3
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800663c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006640:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006644:	d824      	bhi.n	8006690 <HAL_DMA_Init+0xe8>
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006646:	4a1c      	ldr	r2, [pc, #112]	@ (80066b8 <HAL_DMA_Init+0x110>)

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006648:	481c      	ldr	r0, [pc, #112]	@ (80066bc <HAL_DMA_Init+0x114>)
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800664a:	442a      	add	r2, r5
 800664c:	0092      	lsls	r2, r2, #2

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800664e:	3d01      	subs	r5, #1
 8006650:	40ac      	lsls	r4, r5
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006652:	2100      	movs	r1, #0
  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8006654:	e9c3 2015 	strd	r2, r0, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8006658:	65dc      	str	r4, [r3, #92]	@ 0x5c
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800665a:	6011      	str	r1, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800665c:	4a18      	ldr	r2, [pc, #96]	@ (80066c0 <HAL_DMA_Init+0x118>)
 800665e:	6454      	str	r4, [r2, #68]	@ 0x44
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006660:	2000      	movs	r0, #0
  hdma->State  = HAL_DMA_STATE_READY;
 8006662:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006664:	63d8      	str	r0, [r3, #60]	@ 0x3c
  hdma->Lock = HAL_UNLOCKED;
 8006666:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State  = HAL_DMA_STATE_READY;
 800666a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
}
 800666e:	bcf0      	pop	{r4, r5, r6, r7}
 8006670:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006672:	4914      	ldr	r1, [pc, #80]	@ (80066c4 <HAL_DMA_Init+0x11c>)
 8006674:	4a0c      	ldr	r2, [pc, #48]	@ (80066a8 <HAL_DMA_Init+0x100>)
    hdma->DmaBaseAddress = DMA1;
 8006676:	4814      	ldr	r0, [pc, #80]	@ (80066c8 <HAL_DMA_Init+0x120>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006678:	4421      	add	r1, r4
 800667a:	fba2 2101 	umull	r2, r1, r2, r1
 800667e:	0909      	lsrs	r1, r1, #4
 8006680:	0089      	lsls	r1, r1, #2
    hdma->DmaBaseAddress = DMA1;
 8006682:	e7a1      	b.n	80065c8 <HAL_DMA_Init+0x20>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006684:	2400      	movs	r4, #0
 8006686:	605c      	str	r4, [r3, #4]
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006688:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800668c:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
    hdma->DMAmuxRequestGen = 0U;
 8006690:	2200      	movs	r2, #0
 8006692:	e9c3 2215 	strd	r2, r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006696:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006698:	e7e2      	b.n	8006660 <HAL_DMA_Init+0xb8>
    return HAL_ERROR;
 800669a:	2001      	movs	r0, #1
}
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	40020407 	.word	0x40020407
 80066a4:	bffdfbf8 	.word	0xbffdfbf8
 80066a8:	cccccccd 	.word	0xcccccccd
 80066ac:	40020400 	.word	0x40020400
 80066b0:	40020800 	.word	0x40020800
 80066b4:	40020820 	.word	0x40020820
 80066b8:	1000823f 	.word	0x1000823f
 80066bc:	40020940 	.word	0x40020940
 80066c0:	40020900 	.word	0x40020900
 80066c4:	bffdfff8 	.word	0xbffdfff8
 80066c8:	40020000 	.word	0x40020000

080066cc <HAL_DMA_DeInit>:
  if (NULL == hdma)
 80066cc:	2800      	cmp	r0, #0
 80066ce:	d05f      	beq.n	8006790 <HAL_DMA_DeInit+0xc4>
  __HAL_DMA_DISABLE(hdma);
 80066d0:	6802      	ldr	r2, [r0, #0]
 80066d2:	4603      	mov	r3, r0
 80066d4:	6811      	ldr	r1, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80066d6:	482f      	ldr	r0, [pc, #188]	@ (8006794 <HAL_DMA_DeInit+0xc8>)
  __HAL_DMA_DISABLE(hdma);
 80066d8:	f021 0101 	bic.w	r1, r1, #1
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80066dc:	4282      	cmp	r2, r0
{
 80066de:	b430      	push	{r4, r5}
  __HAL_DMA_DISABLE(hdma);
 80066e0:	6011      	str	r1, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80066e2:	d942      	bls.n	800676a <HAL_DMA_DeInit+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80066e4:	492c      	ldr	r1, [pc, #176]	@ (8006798 <HAL_DMA_DeInit+0xcc>)
 80066e6:	482d      	ldr	r0, [pc, #180]	@ (800679c <HAL_DMA_DeInit+0xd0>)
    hdma->DmaBaseAddress = DMA2;
 80066e8:	4c2d      	ldr	r4, [pc, #180]	@ (80067a0 <HAL_DMA_DeInit+0xd4>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80066ea:	4411      	add	r1, r2
 80066ec:	fba0 0101 	umull	r0, r1, r0, r1
 80066f0:	0909      	lsrs	r1, r1, #4
 80066f2:	0089      	lsls	r1, r1, #2
  hdma->Instance->CCR  = 0;
 80066f4:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA2;
 80066f6:	e9c3 4110 	strd	r4, r1, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80066fa:	f001 051f 	and.w	r5, r1, #31
  hdma->Instance->CCR  = 0;
 80066fe:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006700:	2001      	movs	r0, #1
 8006702:	40a8      	lsls	r0, r5
 8006704:	6060      	str	r0, [r4, #4]
 8006706:	4827      	ldr	r0, [pc, #156]	@ (80067a4 <HAL_DMA_DeInit+0xd8>)
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006708:	4d27      	ldr	r5, [pc, #156]	@ (80067a8 <HAL_DMA_DeInit+0xdc>)
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800670a:	ea4f 0c91 	mov.w	ip, r1, lsr #2
 800670e:	4401      	add	r1, r0
 8006710:	6499      	str	r1, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006712:	4926      	ldr	r1, [pc, #152]	@ (80067ac <HAL_DMA_DeInit+0xe0>)
 8006714:	64d9      	str	r1, [r3, #76]	@ 0x4c
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	4920      	ldr	r1, [pc, #128]	@ (800679c <HAL_DMA_DeInit+0xd0>)
 800671a:	3a08      	subs	r2, #8
 800671c:	fba1 1202 	umull	r1, r2, r1, r2
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8006720:	f3c2 1204 	ubfx	r2, r2, #4, #5
 8006724:	2101      	movs	r1, #1
 8006726:	fa01 f202 	lsl.w	r2, r1, r2
  hdma->DMAmuxChannel->CCR = 0;
 800672a:	2400      	movs	r4, #0
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800672c:	651a      	str	r2, [r3, #80]	@ 0x50
  hdma->DMAmuxChannel->CCR = 0;
 800672e:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006732:	f8c5 2084 	str.w	r2, [r5, #132]	@ 0x84
  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006736:	6858      	ldr	r0, [r3, #4]
 8006738:	1e42      	subs	r2, r0, #1
 800673a:	2a03      	cmp	r2, #3
 800673c:	d806      	bhi.n	800674c <HAL_DMA_DeInit+0x80>
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800673e:	4091      	lsls	r1, r2
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8006740:	4a1b      	ldr	r2, [pc, #108]	@ (80067b0 <HAL_DMA_DeInit+0xe4>)
 8006742:	4402      	add	r2, r0
 8006744:	0092      	lsls	r2, r2, #2
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006746:	6014      	str	r4, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006748:	f8c5 1144 	str.w	r1, [r5, #324]	@ 0x144
  hdma->DMAmuxRequestGen = 0U;
 800674c:	2000      	movs	r0, #0
 800674e:	e9c3 0015 	strd	r0, r0, [r3, #84]	@ 0x54
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006752:	63d8      	str	r0, [r3, #60]	@ 0x3c
  __HAL_UNLOCK(hdma);
 8006754:	f883 0024 	strb.w	r0, [r3, #36]	@ 0x24
  hdma->State = HAL_DMA_STATE_RESET;
 8006758:	f883 0025 	strb.w	r0, [r3, #37]	@ 0x25
}
 800675c:	bc30      	pop	{r4, r5}
  hdma->XferHalfCpltCallback = NULL;
 800675e:	e9c3 000b 	strd	r0, r0, [r3, #44]	@ 0x2c
  hdma->XferAbortCallback = NULL;
 8006762:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8006766:	65d8      	str	r0, [r3, #92]	@ 0x5c
}
 8006768:	4770      	bx	lr
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800676a:	4912      	ldr	r1, [pc, #72]	@ (80067b4 <HAL_DMA_DeInit+0xe8>)
 800676c:	480b      	ldr	r0, [pc, #44]	@ (800679c <HAL_DMA_DeInit+0xd0>)
    hdma->DmaBaseAddress = DMA1;
 800676e:	4c12      	ldr	r4, [pc, #72]	@ (80067b8 <HAL_DMA_DeInit+0xec>)
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006770:	4411      	add	r1, r2
 8006772:	fba0 0101 	umull	r0, r1, r0, r1
 8006776:	0909      	lsrs	r1, r1, #4
 8006778:	0089      	lsls	r1, r1, #2
  hdma->Instance->CCR  = 0;
 800677a:	2000      	movs	r0, #0
    hdma->DmaBaseAddress = DMA1;
 800677c:	e9c3 4110 	strd	r4, r1, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006780:	f001 051f 	and.w	r5, r1, #31
  hdma->Instance->CCR  = 0;
 8006784:	6010      	str	r0, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8006786:	2001      	movs	r0, #1
 8006788:	40a8      	lsls	r0, r5
 800678a:	6060      	str	r0, [r4, #4]
 800678c:	4806      	ldr	r0, [pc, #24]	@ (80067a8 <HAL_DMA_DeInit+0xdc>)
 800678e:	e7bb      	b.n	8006708 <HAL_DMA_DeInit+0x3c>
    return HAL_ERROR;
 8006790:	2001      	movs	r0, #1
}
 8006792:	4770      	bx	lr
 8006794:	40020407 	.word	0x40020407
 8006798:	bffdfbf8 	.word	0xbffdfbf8
 800679c:	cccccccd 	.word	0xcccccccd
 80067a0:	40020400 	.word	0x40020400
 80067a4:	40020820 	.word	0x40020820
 80067a8:	40020800 	.word	0x40020800
 80067ac:	40020880 	.word	0x40020880
 80067b0:	1000823f 	.word	0x1000823f
 80067b4:	bffdfff8 	.word	0xbffdfff8
 80067b8:	40020000 	.word	0x40020000

080067bc <HAL_FDCAN_Init>:
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80067bc:	2800      	cmp	r0, #0
 80067be:	f000 80d9 	beq.w	8006974 <HAL_FDCAN_Init+0x1b8>
{
 80067c2:	b538      	push	{r3, r4, r5, lr}

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80067c4:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80067c8:	4604      	mov	r4, r0
 80067ca:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d071      	beq.n	80068b6 <HAL_FDCAN_Init+0xfa>
    HAL_FDCAN_MspInit(hfdcan);
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80067d2:	6822      	ldr	r2, [r4, #0]
 80067d4:	6993      	ldr	r3, [r2, #24]
 80067d6:	f023 0310 	bic.w	r3, r3, #16
 80067da:	6193      	str	r3, [r2, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067dc:	f7fe fdbc 	bl	8005358 <HAL_GetTick>
 80067e0:	4605      	mov	r5, r0

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067e2:	e004      	b.n	80067ee <HAL_FDCAN_Init+0x32>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80067e4:	f7fe fdb8 	bl	8005358 <HAL_GetTick>
 80067e8:	1b40      	subs	r0, r0, r5
 80067ea:	280a      	cmp	r0, #10
 80067ec:	d85a      	bhi.n	80068a4 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	699a      	ldr	r2, [r3, #24]
 80067f2:	0711      	lsls	r1, r2, #28
 80067f4:	d4f6      	bmi.n	80067e4 <HAL_FDCAN_Init+0x28>
      return HAL_ERROR;
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80067f6:	699a      	ldr	r2, [r3, #24]
 80067f8:	f042 0201 	orr.w	r2, r2, #1
 80067fc:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80067fe:	f7fe fdab 	bl	8005358 <HAL_GetTick>
 8006802:	4605      	mov	r5, r0

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006804:	e004      	b.n	8006810 <HAL_FDCAN_Init+0x54>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006806:	f7fe fda7 	bl	8005358 <HAL_GetTick>
 800680a:	1b40      	subs	r0, r0, r5
 800680c:	280a      	cmp	r0, #10
 800680e:	d849      	bhi.n	80068a4 <HAL_FDCAN_Init+0xe8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	699a      	ldr	r2, [r3, #24]
 8006814:	07d2      	lsls	r2, r2, #31
 8006816:	d5f6      	bpl.n	8006806 <HAL_FDCAN_Init+0x4a>
      return HAL_ERROR;
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006818:	699a      	ldr	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800681a:	4959      	ldr	r1, [pc, #356]	@ (8006980 <HAL_FDCAN_Init+0x1c4>)
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800681c:	f042 0202 	orr.w	r2, r2, #2
  if (hfdcan->Instance == FDCAN1)
 8006820:	428b      	cmp	r3, r1
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006822:	619a      	str	r2, [r3, #24]
  if (hfdcan->Instance == FDCAN1)
 8006824:	f000 80a1 	beq.w	800696a <HAL_FDCAN_Init+0x1ae>
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006828:	7c22      	ldrb	r2, [r4, #16]
 800682a:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	bf0c      	ite	eq
 8006830:	f022 0240 	biceq.w	r2, r2, #64	@ 0x40
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006834:	f042 0240 	orrne.w	r2, r2, #64	@ 0x40
 8006838:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800683a:	7c62      	ldrb	r2, [r4, #17]
 800683c:	2a01      	cmp	r2, #1
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800683e:	699a      	ldr	r2, [r3, #24]
 8006840:	bf0c      	ite	eq
 8006842:	f442 4280 	orreq.w	r2, r2, #16384	@ 0x4000
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006846:	f422 4280 	bicne.w	r2, r2, #16384	@ 0x4000
 800684a:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800684c:	7ca2      	ldrb	r2, [r4, #18]
 800684e:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006850:	699a      	ldr	r2, [r3, #24]
 8006852:	bf0c      	ite	eq
 8006854:	f422 5280 	biceq.w	r2, r2, #4096	@ 0x1000
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006858:	f442 5280 	orrne.w	r2, r2, #4096	@ 0x1000
 800685c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800685e:	699a      	ldr	r2, [r3, #24]
 8006860:	68a0      	ldr	r0, [r4, #8]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006862:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006864:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006868:	4302      	orrs	r2, r0
 800686a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8006872:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006874:	691a      	ldr	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006876:	2901      	cmp	r1, #1
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006878:	f022 0210 	bic.w	r2, r2, #16
 800687c:	611a      	str	r2, [r3, #16]
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800687e:	d01f      	beq.n	80068c0 <HAL_FDCAN_Init+0x104>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006880:	b311      	cbz	r1, 80068c8 <HAL_FDCAN_Init+0x10c>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006882:	2902      	cmp	r1, #2
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006884:	699a      	ldr	r2, [r3, #24]
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006886:	d077      	beq.n	8006978 <HAL_FDCAN_Init+0x1bc>
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006888:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800688c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800688e:	691a      	ldr	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006890:	2903      	cmp	r1, #3
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006892:	f042 0210 	orr.w	r2, r2, #16
 8006896:	611a      	str	r2, [r3, #16]
      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006898:	d116      	bne.n	80068c8 <HAL_FDCAN_Init+0x10c>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800689a:	699a      	ldr	r2, [r3, #24]
 800689c:	f042 0220 	orr.w	r2, r2, #32
 80068a0:	619a      	str	r2, [r3, #24]
 80068a2:	e011      	b.n	80068c8 <HAL_FDCAN_Init+0x10c>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068a4:	6e23      	ldr	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068a6:	2203      	movs	r2, #3
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80068a8:	f043 0301 	orr.w	r3, r3, #1
 80068ac:	6623      	str	r3, [r4, #96]	@ 0x60
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80068ae:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
    return HAL_ERROR;
 80068b2:	2001      	movs	r0, #1
  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 80068b4:	bd38      	pop	{r3, r4, r5, pc}
    hfdcan->Lock = HAL_UNLOCKED;
 80068b6:	f880 205d 	strb.w	r2, [r0, #93]	@ 0x5d
    HAL_FDCAN_MspInit(hfdcan);
 80068ba:	f7fe f9c3 	bl	8004c44 <HAL_FDCAN_MspInit>
 80068be:	e788      	b.n	80067d2 <HAL_FDCAN_Init+0x16>
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80068c0:	699a      	ldr	r2, [r3, #24]
 80068c2:	f042 0204 	orr.w	r2, r2, #4
 80068c6:	619a      	str	r2, [r3, #24]
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068c8:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068cc:	3a01      	subs	r2, #1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068ce:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068d0:	0212      	lsls	r2, r2, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068d2:	ea42 6241 	orr.w	r2, r2, r1, lsl #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068d6:	6a21      	ldr	r1, [r4, #32]
 80068d8:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80068da:	430a      	orrs	r2, r1
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80068dc:	6961      	ldr	r1, [r4, #20]
 80068de:	3901      	subs	r1, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80068e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068e4:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80068e8:	61da      	str	r2, [r3, #28]
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80068ea:	d10e      	bne.n	800690a <HAL_FDCAN_Init+0x14e>
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068ec:	e9d4 020b 	ldrd	r0, r2, [r4, #44]	@ 0x2c
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068f0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80068f2:	3a01      	subs	r2, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068f4:	3801      	subs	r0, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80068f6:	0112      	lsls	r2, r2, #4
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80068f8:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80068fa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 80068fe:	430a      	orrs	r2, r1
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006900:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8006902:	3901      	subs	r1, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8006904:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8006908:	60da      	str	r2, [r3, #12]
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800690a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 800690e:	6be0      	ldr	r0, [r4, #60]	@ 0x3c

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006910:	6b61      	ldr	r1, [r4, #52]	@ 0x34

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006912:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006914:	4302      	orrs	r2, r0
 8006916:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800691a:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 800691e:	4819      	ldr	r0, [pc, #100]	@ (8006984 <HAL_FDCAN_Init+0x1c8>)
 8006920:	6420      	str	r0, [r4, #64]	@ 0x40
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8006922:	f422 12f8 	bic.w	r2, r2, #2031616	@ 0x1f0000
 8006926:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800692a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 800692e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8006932:	4915      	ldr	r1, [pc, #84]	@ (8006988 <HAL_FDCAN_Init+0x1cc>)
 8006934:	6461      	str	r1, [r4, #68]	@ 0x44
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8006936:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800693a:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
 800693e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8006942:	4b12      	ldr	r3, [pc, #72]	@ (800698c <HAL_FDCAN_Init+0x1d0>)
 8006944:	4a12      	ldr	r2, [pc, #72]	@ (8006990 <HAL_FDCAN_Init+0x1d4>)
 8006946:	3140      	adds	r1, #64	@ 0x40
 8006948:	e9c4 1312 	strd	r1, r3, [r4, #72]	@ 0x48
 800694c:	33f0      	adds	r3, #240	@ 0xf0
 800694e:	e9c4 2314 	strd	r2, r3, [r4, #80]	@ 0x50
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8006952:	2100      	movs	r1, #0
 8006954:	f44f 7254 	mov.w	r2, #848	@ 0x350
 8006958:	f004 fbc4 	bl	800b0e4 <memset>
  hfdcan->LatestTxFifoQRequest = 0U;
 800695c:	2000      	movs	r0, #0
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800695e:	2301      	movs	r3, #1
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006960:	6620      	str	r0, [r4, #96]	@ 0x60
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006962:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
  hfdcan->LatestTxFifoQRequest = 0U;
 8006966:	65a0      	str	r0, [r4, #88]	@ 0x58
}
 8006968:	bd38      	pop	{r3, r4, r5, pc}
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800696a:	4a0a      	ldr	r2, [pc, #40]	@ (8006994 <HAL_FDCAN_Init+0x1d8>)
 800696c:	6861      	ldr	r1, [r4, #4]
 800696e:	f8c2 1500 	str.w	r1, [r2, #1280]	@ 0x500
 8006972:	e759      	b.n	8006828 <HAL_FDCAN_Init+0x6c>
    return HAL_ERROR;
 8006974:	2001      	movs	r0, #1
}
 8006976:	4770      	bx	lr
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006978:	f042 0220 	orr.w	r2, r2, #32
 800697c:	619a      	str	r2, [r3, #24]
 800697e:	e7a3      	b.n	80068c8 <HAL_FDCAN_Init+0x10c>
 8006980:	40006400 	.word	0x40006400
 8006984:	4000a400 	.word	0x4000a400
 8006988:	4000a470 	.word	0x4000a470
 800698c:	4000a588 	.word	0x4000a588
 8006990:	4000a660 	.word	0x4000a660
 8006994:	40006000 	.word	0x40006000

08006998 <HAL_FDCAN_ConfigFilter>:
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006998:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800699c:	3a01      	subs	r2, #1
 800699e:	2a01      	cmp	r2, #1
{
 80069a0:	4603      	mov	r3, r0
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80069a2:	d905      	bls.n	80069b0 <HAL_FDCAN_ConfigFilter+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069a4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80069a6:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 80069aa:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80069ac:	661a      	str	r2, [r3, #96]	@ 0x60
}
 80069ae:	4770      	bx	lr
{
 80069b0:	b470      	push	{r4, r5, r6}
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069b2:	688a      	ldr	r2, [r1, #8]
                         sFilterConfig->FilterID2);
 80069b4:	6948      	ldr	r0, [r1, #20]
                         (sFilterConfig->FilterID1 << 16U)    |
 80069b6:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 80069ba:	e9d1 6100 	ldrd	r6, r1, [r1]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069be:	0792      	lsls	r2, r2, #30
    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80069c0:	b956      	cbnz	r6, 80069d8 <HAL_FDCAN_ConfigFilter+0x40>
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069c2:	ea42 62c5 	orr.w	r2, r2, r5, lsl #27
 80069c6:	4302      	orrs	r2, r0
      *FilterAddress = FilterElementW1;
 80069c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80069ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
    return HAL_OK;
 80069ce:	2000      	movs	r0, #0
}
 80069d0:	bc70      	pop	{r4, r5, r6}
      *FilterAddress = FilterElementW1;
 80069d2:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 80069d6:	4770      	bx	lr
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80069da:	ea44 7445 	orr.w	r4, r4, r5, lsl #29
      *FilterAddress = FilterElementW1;
 80069de:	f843 4031 	str.w	r4, [r3, r1, lsl #3]
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80069e2:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80069e6:	4310      	orrs	r0, r2
      *FilterAddress = FilterElementW2;
 80069e8:	6058      	str	r0, [r3, #4]
}
 80069ea:	bc70      	pop	{r4, r5, r6}
    return HAL_OK;
 80069ec:	2000      	movs	r0, #0
}
 80069ee:	4770      	bx	lr

080069f0 <HAL_FDCAN_Start>:
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80069f0:	f890 205c 	ldrb.w	r2, [r0, #92]	@ 0x5c
 80069f4:	2a01      	cmp	r2, #1
{
 80069f6:	4603      	mov	r3, r0
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80069f8:	d005      	beq.n	8006a06 <HAL_FDCAN_Start+0x16>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80069fa:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80069fc:	f042 0204 	orr.w	r2, r2, #4
    return HAL_ERROR;
 8006a00:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006a02:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8006a04:	4770      	bx	lr
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a06:	6800      	ldr	r0, [r0, #0]
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006a08:	2202      	movs	r2, #2
 8006a0a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a0e:	6982      	ldr	r2, [r0, #24]
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a10:	2100      	movs	r1, #0
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a12:	f022 0201 	bic.w	r2, r2, #1
 8006a16:	6182      	str	r2, [r0, #24]
    return HAL_OK;
 8006a18:	4608      	mov	r0, r1
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006a1a:	6619      	str	r1, [r3, #96]	@ 0x60
    return HAL_OK;
 8006a1c:	4770      	bx	lr
 8006a1e:	bf00      	nop

08006a20 <HAL_FDCAN_AddMessageToTxFifoQ>:
{
 8006a20:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a22:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8006a26:	2b02      	cmp	r3, #2
{
 8006a28:	4686      	mov	lr, r0
  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8006a2a:	d10b      	bne.n	8006a44 <HAL_FDCAN_AddMessageToTxFifoQ+0x24>
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8006a2c:	6805      	ldr	r5, [r0, #0]
 8006a2e:	f8d5 30c4 	ldr.w	r3, [r5, #196]	@ 0xc4
 8006a32:	f413 1c00 	ands.w	ip, r3, #2097152	@ 0x200000
 8006a36:	d00b      	beq.n	8006a50 <HAL_FDCAN_AddMessageToTxFifoQ+0x30>
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8006a38:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006a3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006a3e:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8006a40:	2001      	movs	r0, #1
}
 8006a42:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006a44:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006a46:	f043 0308 	orr.w	r3, r3, #8
 8006a4a:	6603      	str	r3, [r0, #96]	@ 0x60
      return HAL_ERROR;
 8006a4c:	2001      	movs	r0, #1
}
 8006a4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006a50:	f8d5 60c4 	ldr.w	r6, [r5, #196]	@ 0xc4
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a54:	684b      	ldr	r3, [r1, #4]
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a56:	690f      	ldr	r7, [r1, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8006a58:	6888      	ldr	r0, [r1, #8]
                   (pTxHeader->Identifier << 18U));
 8006a5a:	680c      	ldr	r4, [r1, #0]
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8006a5c:	f3c6 4601 	ubfx	r6, r6, #16, #2
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d137      	bne.n	8006ad4 <HAL_FDCAN_AddMessageToTxFifoQ+0xb4>
                   FDCAN_STANDARD_ID |
 8006a64:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006a66:	ea47 4784 	orr.w	r7, r7, r4, lsl #18
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
                 pTxHeader->TxEventFifoControl |
                 pTxHeader->FDFormat |
 8006a6a:	e9d1 0306 	ldrd	r0, r3, [r1, #24]
 8006a6e:	4303      	orrs	r3, r0
 8006a70:	6948      	ldr	r0, [r1, #20]
                 pTxHeader->BitRateSwitch |
                 (pTxHeader->DataLength << 16U));
 8006a72:	68cc      	ldr	r4, [r1, #12]
                 pTxHeader->FDFormat |
 8006a74:	4303      	orrs	r3, r0
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a76:	6a08      	ldr	r0, [r1, #32]
                 pTxHeader->FDFormat |
 8006a78:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8006a7c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006a80:	f8de 0054 	ldr.w	r0, [lr, #84]	@ 0x54
 8006a84:	eb06 04c6 	add.w	r4, r6, r6, lsl #3

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8006a88:	f840 7034 	str.w	r7, [r0, r4, lsl #3]
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 8006a8c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
  TxAddress++;
  *TxAddress = TxElementW2;
  TxAddress++;

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a90:	4c13      	ldr	r4, [pc, #76]	@ (8006ae0 <HAL_FDCAN_AddMessageToTxFifoQ+0xc0>)
  *TxAddress = TxElementW2;
 8006a92:	6043      	str	r3, [r0, #4]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006a94:	68cb      	ldr	r3, [r1, #12]
 8006a96:	5ce3      	ldrb	r3, [r4, r3]
 8006a98:	b1a3      	cbz	r3, 8006ac4 <HAL_FDCAN_AddMessageToTxFifoQ+0xa4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a9a:	7893      	ldrb	r3, [r2, #2]
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006a9c:	78d7      	ldrb	r7, [r2, #3]
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8006a9e:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006aa0:	ea43 6307 	orr.w	r3, r3, r7, lsl #24
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
                  (uint32_t)pTxData[ByteCounter]);
 8006aa4:	7817      	ldrb	r7, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8006aa6:	433b      	orrs	r3, r7
 8006aa8:	7857      	ldrb	r7, [r2, #1]
 8006aaa:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006aae:	eb0c 0700 	add.w	r7, ip, r0
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006ab2:	f10c 0c04 	add.w	ip, ip, #4
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8006ab6:	60bb      	str	r3, [r7, #8]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength]; ByteCounter += 4U)
 8006ab8:	68cb      	ldr	r3, [r1, #12]
 8006aba:	5ce3      	ldrb	r3, [r4, r3]
 8006abc:	459c      	cmp	ip, r3
 8006abe:	f102 0204 	add.w	r2, r2, #4
 8006ac2:	d3ea      	bcc.n	8006a9a <HAL_FDCAN_AddMessageToTxFifoQ+0x7a>
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	40b3      	lsls	r3, r6
 8006ac8:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    return HAL_OK;
 8006acc:	2000      	movs	r0, #0
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8006ace:	f8ce 3058 	str.w	r3, [lr, #88]	@ 0x58
}
 8006ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
                   pTxHeader->TxFrameType |
 8006ad4:	4327      	orrs	r7, r4
 8006ad6:	4307      	orrs	r7, r0
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8006ad8:	f047 4780 	orr.w	r7, r7, #1073741824	@ 0x40000000
 8006adc:	e7c5      	b.n	8006a6a <HAL_FDCAN_AddMessageToTxFifoQ+0x4a>
 8006ade:	bf00      	nop
 8006ae0:	0800c0bc 	.word	0x0800c0bc

08006ae4 <HAL_FDCAN_GetRxMessage>:
{
 8006ae4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006ae8:	f890 405c 	ldrb.w	r4, [r0, #92]	@ 0x5c
  if (state == HAL_FDCAN_STATE_BUSY)
 8006aec:	2c02      	cmp	r4, #2
 8006aee:	d10d      	bne.n	8006b0c <HAL_FDCAN_GetRxMessage+0x28>
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006af0:	2940      	cmp	r1, #64	@ 0x40
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006af2:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006af4:	d010      	beq.n	8006b18 <HAL_FDCAN_GetRxMessage+0x34>
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8006af6:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8006afa:	0724      	lsls	r4, r4, #28
 8006afc:	d16e      	bne.n	8006bdc <HAL_FDCAN_GetRxMessage+0xf8>
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006afe:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b04:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 8006b06:	2001      	movs	r0, #1
}
 8006b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8006b0c:	6e03      	ldr	r3, [r0, #96]	@ 0x60
 8006b0e:	f043 0308 	orr.w	r3, r3, #8
 8006b12:	6603      	str	r3, [r0, #96]	@ 0x60
        return HAL_ERROR;
 8006b14:	2001      	movs	r0, #1
 8006b16:	e7f7      	b.n	8006b08 <HAL_FDCAN_GetRxMessage+0x24>
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006b18:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8006b1c:	0726      	lsls	r6, r4, #28
 8006b1e:	d0ee      	beq.n	8006afe <HAL_FDCAN_GetRxMessage+0x1a>
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006b20:	f8d5 4090 	ldr.w	r4, [r5, #144]	@ 0x90
 8006b24:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006b28:	bf18      	it	ne
 8006b2a:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b2e:	f8d5 7090 	ldr.w	r7, [r5, #144]	@ 0x90
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006b32:	bf18      	it	ne
 8006b34:	f3c4 2440 	ubfxne	r4, r4, #9, #1
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006b38:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8006b3c:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8006b40:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8006b42:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 8006b46:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006b4a:	6826      	ldr	r6, [r4, #0]
 8006b4c:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8006b50:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d15d      	bne.n	8006c12 <HAL_FDCAN_GetRxMessage+0x12e>
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8006b56:	6826      	ldr	r6, [r4, #0]
 8006b58:	f3c6 468a 	ubfx	r6, r6, #18, #11
 8006b5c:	6016      	str	r6, [r2, #0]
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8006b5e:	6826      	ldr	r6, [r4, #0]
 8006b60:	f006 5600 	and.w	r6, r6, #536870912	@ 0x20000000
 8006b64:	6096      	str	r6, [r2, #8]
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8006b66:	6826      	ldr	r6, [r4, #0]
 8006b68:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8006b6c:	6116      	str	r6, [r2, #16]
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8006b6e:	88a6      	ldrh	r6, [r4, #4]
 8006b70:	61d6      	str	r6, [r2, #28]
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 8006b72:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8006b76:	f00c 0c0f 	and.w	ip, ip, #15
 8006b7a:	f8c2 c00c 	str.w	ip, [r2, #12]
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8006b7e:	6866      	ldr	r6, [r4, #4]
 8006b80:	f406 1680 	and.w	r6, r6, #1048576	@ 0x100000
 8006b84:	6156      	str	r6, [r2, #20]
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8006b86:	6866      	ldr	r6, [r4, #4]
 8006b88:	f406 1600 	and.w	r6, r6, #2097152	@ 0x200000
 8006b8c:	6196      	str	r6, [r2, #24]
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8006b8e:	79e6      	ldrb	r6, [r4, #7]
 8006b90:	f006 067f 	and.w	r6, r6, #127	@ 0x7f
 8006b94:	6216      	str	r6, [r2, #32]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006b96:	4e22      	ldr	r6, [pc, #136]	@ (8006c20 <HAL_FDCAN_GetRxMessage+0x13c>)
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006b98:	6867      	ldr	r7, [r4, #4]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006b9a:	f816 e00c 	ldrb.w	lr, [r6, ip]
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8006b9e:	ea4f 7cd7 	mov.w	ip, r7, lsr #31
 8006ba2:	f8c2 c024 	str.w	ip, [r2, #36]	@ 0x24
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006ba6:	f1be 0f00 	cmp.w	lr, #0
 8006baa:	d010      	beq.n	8006bce <HAL_FDCAN_GetRxMessage+0xea>
 8006bac:	3b01      	subs	r3, #1
 8006bae:	f104 0e07 	add.w	lr, r4, #7
      pRxData[ByteCounter] = pData[ByteCounter];
 8006bb2:	46f4      	mov	ip, lr
 8006bb4:	f81e 5f01 	ldrb.w	r5, [lr, #1]!
 8006bb8:	f803 5f01 	strb.w	r5, [r3, #1]!
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8006bbc:	68d5      	ldr	r5, [r2, #12]
 8006bbe:	f1ac 0c06 	sub.w	ip, ip, #6
 8006bc2:	5d75      	ldrb	r5, [r6, r5]
 8006bc4:	ebac 0c04 	sub.w	ip, ip, r4
 8006bc8:	4565      	cmp	r5, ip
 8006bca:	d8f2      	bhi.n	8006bb2 <HAL_FDCAN_GetRxMessage+0xce>
 8006bcc:	6805      	ldr	r5, [r0, #0]
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006bce:	2940      	cmp	r1, #64	@ 0x40
 8006bd0:	d023      	beq.n	8006c1a <HAL_FDCAN_GetRxMessage+0x136>
      hfdcan->Instance->RXF1A = GetIndex;
 8006bd2:	f8c5 809c 	str.w	r8, [r5, #156]	@ 0x9c
    return HAL_OK;
 8006bd6:	2000      	movs	r0, #0
}
 8006bd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8006bdc:	f8d5 4098 	ldr.w	r4, [r5, #152]	@ 0x98
 8006be0:	f014 7480 	ands.w	r4, r4, #16777216	@ 0x1000000
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006be4:	bf18      	it	ne
 8006be6:	f8d5 4080 	ldrne.w	r4, [r5, #128]	@ 0x80
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006bea:	f8d5 7098 	ldr.w	r7, [r5, #152]	@ 0x98
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006bee:	bf18      	it	ne
 8006bf0:	f3c4 2400 	ubfxne	r4, r4, #8, #1
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8006bf4:	f3c7 2701 	ubfx	r7, r7, #8, #2
 8006bf8:	eb07 0804 	add.w	r8, r7, r4
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8006bfc:	6cc4      	ldr	r4, [r0, #76]	@ 0x4c
 8006bfe:	eb08 06c8 	add.w	r6, r8, r8, lsl #3
 8006c02:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8006c06:	6826      	ldr	r6, [r4, #0]
 8006c08:	f006 4680 	and.w	r6, r6, #1073741824	@ 0x40000000
 8006c0c:	6056      	str	r6, [r2, #4]
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8006c0e:	2e00      	cmp	r6, #0
 8006c10:	d0a1      	beq.n	8006b56 <HAL_FDCAN_GetRxMessage+0x72>
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8006c12:	6826      	ldr	r6, [r4, #0]
 8006c14:	f026 4660 	bic.w	r6, r6, #3758096384	@ 0xe0000000
 8006c18:	e7a0      	b.n	8006b5c <HAL_FDCAN_GetRxMessage+0x78>
      hfdcan->Instance->RXF0A = GetIndex;
 8006c1a:	f8c5 8094 	str.w	r8, [r5, #148]	@ 0x94
 8006c1e:	e7da      	b.n	8006bd6 <HAL_FDCAN_GetRxMessage+0xf2>
 8006c20:	0800c0bc 	.word	0x0800c0bc

08006c24 <HAL_FDCAN_ActivateNotification>:
{
 8006c24:	4603      	mov	r3, r0
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006c26:	f890 005c 	ldrb.w	r0, [r0, #92]	@ 0x5c
  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006c2a:	3801      	subs	r0, #1
 8006c2c:	2801      	cmp	r0, #1
 8006c2e:	d905      	bls.n	8006c3c <HAL_FDCAN_ActivateNotification+0x18>
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c30:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8006c32:	f042 0202 	orr.w	r2, r2, #2
    return HAL_ERROR;
 8006c36:	2001      	movs	r0, #1
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006c38:	661a      	str	r2, [r3, #96]	@ 0x60
}
 8006c3a:	4770      	bx	lr
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c3c:	681b      	ldr	r3, [r3, #0]
{
 8006c3e:	b470      	push	{r4, r5, r6}
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c40:	f011 0507 	ands.w	r5, r1, #7
    ITs_lines_selection = hfdcan->Instance->ILS;
 8006c44:	6d98      	ldr	r0, [r3, #88]	@ 0x58
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8006c46:	f001 0438 	and.w	r4, r1, #56	@ 0x38
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 8006c4a:	d009      	beq.n	8006c60 <HAL_FDCAN_ActivateNotification+0x3c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006c4c:	07c6      	lsls	r6, r0, #31
 8006c4e:	d407      	bmi.n	8006c60 <HAL_FDCAN_ActivateNotification+0x3c>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006c50:	6ddd      	ldr	r5, [r3, #92]	@ 0x5c
 8006c52:	f045 0501 	orr.w	r5, r5, #1
 8006c56:	65dd      	str	r5, [r3, #92]	@ 0x5c
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006c58:	b154      	cbz	r4, 8006c70 <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006c5a:	0784      	lsls	r4, r0, #30
 8006c5c:	d42f      	bmi.n	8006cbe <HAL_FDCAN_ActivateNotification+0x9a>
 8006c5e:	e007      	b.n	8006c70 <HAL_FDCAN_ActivateNotification+0x4c>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 8006c60:	b304      	cbz	r4, 8006ca4 <HAL_FDCAN_ActivateNotification+0x80>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006c62:	0786      	lsls	r6, r0, #30
 8006c64:	d41e      	bmi.n	8006ca4 <HAL_FDCAN_ActivateNotification+0x80>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006c66:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8006c68:	f046 0601 	orr.w	r6, r6, #1
 8006c6c:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006c6e:	bb25      	cbnz	r5, 8006cba <HAL_FDCAN_ActivateNotification+0x96>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 8006c70:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 8006c74:	d001      	beq.n	8006c7a <HAL_FDCAN_ActivateNotification+0x56>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 8006c76:	0746      	lsls	r6, r0, #29
 8006c78:	d421      	bmi.n	8006cbe <HAL_FDCAN_ActivateNotification+0x9a>
 8006c7a:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 8006c7e:	d001      	beq.n	8006c84 <HAL_FDCAN_ActivateNotification+0x60>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 8006c80:	0705      	lsls	r5, r0, #28
 8006c82:	d41c      	bmi.n	8006cbe <HAL_FDCAN_ActivateNotification+0x9a>
 8006c84:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8006c88:	d001      	beq.n	8006c8e <HAL_FDCAN_ActivateNotification+0x6a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 8006c8a:	06c4      	lsls	r4, r0, #27
 8006c8c:	d417      	bmi.n	8006cbe <HAL_FDCAN_ActivateNotification+0x9a>
 8006c8e:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8006c92:	d001      	beq.n	8006c98 <HAL_FDCAN_ActivateNotification+0x74>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 8006c94:	0686      	lsls	r6, r0, #26
 8006c96:	d412      	bmi.n	8006cbe <HAL_FDCAN_ActivateNotification+0x9a>
 8006c98:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 8006c9c:	d013      	beq.n	8006cc6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 8006c9e:	0645      	lsls	r5, r0, #25
 8006ca0:	d40d      	bmi.n	8006cbe <HAL_FDCAN_ActivateNotification+0x9a>
 8006ca2:	e010      	b.n	8006cc6 <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8006ca4:	f411 7fe0 	tst.w	r1, #448	@ 0x1c0
 8006ca8:	d021      	beq.n	8006cee <HAL_FDCAN_ActivateNotification+0xca>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006caa:	0746      	lsls	r6, r0, #29
 8006cac:	d41f      	bmi.n	8006cee <HAL_FDCAN_ActivateNotification+0xca>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8006cae:	6dde      	ldr	r6, [r3, #92]	@ 0x5c
 8006cb0:	f046 0601 	orr.w	r6, r6, #1
 8006cb4:	65de      	str	r6, [r3, #92]	@ 0x5c
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006cb6:	2d00      	cmp	r5, #0
 8006cb8:	d0ce      	beq.n	8006c58 <HAL_FDCAN_ActivateNotification+0x34>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8006cba:	07c5      	lsls	r5, r0, #31
 8006cbc:	d5cc      	bpl.n	8006c58 <HAL_FDCAN_ActivateNotification+0x34>
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8006cbe:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8006cc0:	f040 0002 	orr.w	r0, r0, #2
 8006cc4:	65d8      	str	r0, [r3, #92]	@ 0x5c
    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8006cc6:	060c      	lsls	r4, r1, #24
 8006cc8:	d504      	bpl.n	8006cd4 <HAL_FDCAN_ActivateNotification+0xb0>
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8006cca:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
 8006cce:	4310      	orrs	r0, r2
 8006cd0:	f8c3 00dc 	str.w	r0, [r3, #220]	@ 0xdc
    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8006cd4:	05c8      	lsls	r0, r1, #23
 8006cd6:	d504      	bpl.n	8006ce2 <HAL_FDCAN_ActivateNotification+0xbe>
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8006cd8:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
 8006cdc:	4302      	orrs	r2, r0
 8006cde:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006ce2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006ce4:	430a      	orrs	r2, r1
    return HAL_OK;
 8006ce6:	2000      	movs	r0, #0
}
 8006ce8:	bc70      	pop	{r4, r5, r6}
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8006cea:	655a      	str	r2, [r3, #84]	@ 0x54
}
 8006cec:	4770      	bx	lr
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8006cee:	f411 5ff0 	tst.w	r1, #7680	@ 0x1e00
 8006cf2:	d001      	beq.n	8006cf8 <HAL_FDCAN_ActivateNotification+0xd4>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8006cf4:	0706      	lsls	r6, r0, #28
 8006cf6:	d5da      	bpl.n	8006cae <HAL_FDCAN_ActivateNotification+0x8a>
 8006cf8:	f411 4f60 	tst.w	r1, #57344	@ 0xe000
 8006cfc:	d001      	beq.n	8006d02 <HAL_FDCAN_ActivateNotification+0xde>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 8006cfe:	06c6      	lsls	r6, r0, #27
 8006d00:	d5d5      	bpl.n	8006cae <HAL_FDCAN_ActivateNotification+0x8a>
 8006d02:	f411 3f40 	tst.w	r1, #196608	@ 0x30000
 8006d06:	d001      	beq.n	8006d0c <HAL_FDCAN_ActivateNotification+0xe8>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8006d08:	0686      	lsls	r6, r0, #26
 8006d0a:	d5d0      	bpl.n	8006cae <HAL_FDCAN_ActivateNotification+0x8a>
 8006d0c:	f411 0f7c 	tst.w	r1, #16515072	@ 0xfc0000
 8006d10:	d0d1      	beq.n	8006cb6 <HAL_FDCAN_ActivateNotification+0x92>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8006d12:	0646      	lsls	r6, r0, #25
 8006d14:	d5cb      	bpl.n	8006cae <HAL_FDCAN_ActivateNotification+0x8a>
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	d09e      	beq.n	8006c58 <HAL_FDCAN_ActivateNotification+0x34>
 8006d1a:	e7ce      	b.n	8006cba <HAL_FDCAN_ActivateNotification+0x96>

08006d1c <HAL_FDCAN_TxEventFifoCallback>:
}
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop

08006d20 <HAL_FDCAN_RxFifo1Callback>:
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
 8006d20:	4770      	bx	lr
 8006d22:	bf00      	nop

08006d24 <HAL_FDCAN_TxFifoEmptyCallback>:
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
 8006d24:	4770      	bx	lr
 8006d26:	bf00      	nop

08006d28 <HAL_FDCAN_TxBufferCompleteCallback>:
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop

08006d2c <HAL_FDCAN_TxBufferAbortCallback>:
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
 8006d2c:	4770      	bx	lr
 8006d2e:	bf00      	nop

08006d30 <HAL_FDCAN_TimestampWraparoundCallback>:
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop

08006d34 <HAL_FDCAN_TimeoutOccurredCallback>:
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop

08006d38 <HAL_FDCAN_HighPriorityMessageCallback>:
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop

08006d3c <HAL_FDCAN_ErrorCallback>:
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
 8006d3c:	4770      	bx	lr
 8006d3e:	bf00      	nop

08006d40 <HAL_FDCAN_ErrorStatusCallback>:
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
 8006d40:	4770      	bx	lr
 8006d42:	bf00      	nop

08006d44 <HAL_FDCAN_IRQHandler>:
{
 8006d44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8006d48:	6803      	ldr	r3, [r0, #0]
 8006d4a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d4c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d4e:	ea02 0a01 	and.w	sl, r2, r1
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8006d52:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d54:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006d56:	ea02 0901 	and.w	r9, r2, r1
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8006d5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d5c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8006d5e:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d60:	ea02 0801 	and.w	r8, r2, r1
  Errors &= hfdcan->Instance->IE;
 8006d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8006d66:	6d1f      	ldr	r7, [r3, #80]	@ 0x50
  Errors &= hfdcan->Instance->IE;
 8006d68:	4016      	ands	r6, r2
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006d6a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
  itsource = hfdcan->Instance->IE;
 8006d6c:	f8d3 b054 	ldr.w	fp, [r3, #84]	@ 0x54
  itflag = hfdcan->Instance->IR;
 8006d70:	6d1d      	ldr	r5, [r3, #80]	@ 0x50
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006d72:	4017      	ands	r7, r2
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006d74:	0669      	lsls	r1, r5, #25
{
 8006d76:	4604      	mov	r4, r0
  TxEventFifoITs &= hfdcan->Instance->IE;
 8006d78:	f40a 5ae0 	and.w	sl, sl, #7168	@ 0x1c00
  RxFifo0ITs &= hfdcan->Instance->IE;
 8006d7c:	f009 0907 	and.w	r9, r9, #7
  RxFifo1ITs &= hfdcan->Instance->IE;
 8006d80:	f008 0838 	and.w	r8, r8, #56	@ 0x38
  Errors &= hfdcan->Instance->IE;
 8006d84:	f406 0671 	and.w	r6, r6, #15794176	@ 0xf10000
  ErrorStatusITs &= hfdcan->Instance->IE;
 8006d88:	f407 2760 	and.w	r7, r7, #917504	@ 0xe0000
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8006d8c:	d502      	bpl.n	8006d94 <HAL_FDCAN_IRQHandler+0x50>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8006d8e:	f01b 0f40 	tst.w	fp, #64	@ 0x40
 8006d92:	d172      	bne.n	8006e7a <HAL_FDCAN_IRQHandler+0x136>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8006d94:	05ea      	lsls	r2, r5, #23
 8006d96:	d502      	bpl.n	8006d9e <HAL_FDCAN_IRQHandler+0x5a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8006d98:	f41b 7f80 	tst.w	fp, #256	@ 0x100
 8006d9c:	d15d      	bne.n	8006e5a <HAL_FDCAN_IRQHandler+0x116>
  if (TxEventFifoITs != 0U)
 8006d9e:	f1ba 0f00 	cmp.w	sl, #0
 8006da2:	d14a      	bne.n	8006e3a <HAL_FDCAN_IRQHandler+0xf6>
  if (RxFifo0ITs != 0U)
 8006da4:	f1b9 0f00 	cmp.w	r9, #0
 8006da8:	d135      	bne.n	8006e16 <HAL_FDCAN_IRQHandler+0xd2>
  if (RxFifo1ITs != 0U)
 8006daa:	f1b8 0f00 	cmp.w	r8, #0
 8006dae:	d13c      	bne.n	8006e2a <HAL_FDCAN_IRQHandler+0xe6>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8006db0:	05ab      	lsls	r3, r5, #22
 8006db2:	d502      	bpl.n	8006dba <HAL_FDCAN_IRQHandler+0x76>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8006db4:	f41b 7f00 	tst.w	fp, #512	@ 0x200
 8006db8:	d174      	bne.n	8006ea4 <HAL_FDCAN_IRQHandler+0x160>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8006dba:	0628      	lsls	r0, r5, #24
 8006dbc:	d502      	bpl.n	8006dc4 <HAL_FDCAN_IRQHandler+0x80>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 8006dbe:	f01b 0f80 	tst.w	fp, #128	@ 0x80
 8006dc2:	d177      	bne.n	8006eb4 <HAL_FDCAN_IRQHandler+0x170>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8006dc4:	04a9      	lsls	r1, r5, #18
 8006dc6:	d502      	bpl.n	8006dce <HAL_FDCAN_IRQHandler+0x8a>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8006dc8:	f41b 5f00 	tst.w	fp, #8192	@ 0x2000
 8006dcc:	d15a      	bne.n	8006e84 <HAL_FDCAN_IRQHandler+0x140>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8006dce:	042a      	lsls	r2, r5, #16
 8006dd0:	d502      	bpl.n	8006dd8 <HAL_FDCAN_IRQHandler+0x94>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8006dd2:	f41b 4f00 	tst.w	fp, #32768	@ 0x8000
 8006dd6:	d15d      	bne.n	8006e94 <HAL_FDCAN_IRQHandler+0x150>
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8006dd8:	046b      	lsls	r3, r5, #17
 8006dda:	d50a      	bpl.n	8006df2 <HAL_FDCAN_IRQHandler+0xae>
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8006ddc:	f41b 4f80 	tst.w	fp, #16384	@ 0x4000
 8006de0:	d007      	beq.n	8006df2 <HAL_FDCAN_IRQHandler+0xae>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006de8:	651a      	str	r2, [r3, #80]	@ 0x50
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8006dea:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006dec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006df0:	6623      	str	r3, [r4, #96]	@ 0x60
  if (ErrorStatusITs != 0U)
 8006df2:	b94f      	cbnz	r7, 8006e08 <HAL_FDCAN_IRQHandler+0xc4>
  if (Errors != 0U)
 8006df4:	b126      	cbz	r6, 8006e00 <HAL_FDCAN_IRQHandler+0xbc>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	651e      	str	r6, [r3, #80]	@ 0x50
    hfdcan->ErrorCode |= Errors;
 8006dfa:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006dfc:	4333      	orrs	r3, r6
 8006dfe:	6623      	str	r3, [r4, #96]	@ 0x60
  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8006e00:	6e23      	ldr	r3, [r4, #96]	@ 0x60
 8006e02:	bb2b      	cbnz	r3, 8006e50 <HAL_FDCAN_IRQHandler+0x10c>
}
 8006e04:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006e08:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006e0a:	4639      	mov	r1, r7
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8006e0c:	651f      	str	r7, [r3, #80]	@ 0x50
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8006e0e:	4620      	mov	r0, r4
 8006e10:	f7ff ff96 	bl	8006d40 <HAL_FDCAN_ErrorStatusCallback>
 8006e14:	e7ee      	b.n	8006df4 <HAL_FDCAN_IRQHandler+0xb0>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e16:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e18:	4649      	mov	r1, r9
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8006e1a:	f8c3 9050 	str.w	r9, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8006e1e:	4620      	mov	r0, r4
 8006e20:	f7fa fad8 	bl	80013d4 <HAL_FDCAN_RxFifo0Callback>
  if (RxFifo1ITs != 0U)
 8006e24:	f1b8 0f00 	cmp.w	r8, #0
 8006e28:	d0c2      	beq.n	8006db0 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e2a:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006e2c:	4641      	mov	r1, r8
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8006e2e:	f8c3 8050 	str.w	r8, [r3, #80]	@ 0x50
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8006e32:	4620      	mov	r0, r4
 8006e34:	f7ff ff74 	bl	8006d20 <HAL_FDCAN_RxFifo1Callback>
 8006e38:	e7ba      	b.n	8006db0 <HAL_FDCAN_IRQHandler+0x6c>
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e3a:	6823      	ldr	r3, [r4, #0]
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e3c:	4651      	mov	r1, sl
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8006e3e:	f8c3 a050 	str.w	sl, [r3, #80]	@ 0x50
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8006e42:	4620      	mov	r0, r4
 8006e44:	f7ff ff6a 	bl	8006d1c <HAL_FDCAN_TxEventFifoCallback>
  if (RxFifo0ITs != 0U)
 8006e48:	f1b9 0f00 	cmp.w	r9, #0
 8006e4c:	d0ad      	beq.n	8006daa <HAL_FDCAN_IRQHandler+0x66>
 8006e4e:	e7e2      	b.n	8006e16 <HAL_FDCAN_IRQHandler+0xd2>
    HAL_FDCAN_ErrorCallback(hfdcan);
 8006e50:	4620      	mov	r0, r4
 8006e52:	f7ff ff73 	bl	8006d3c <HAL_FDCAN_ErrorCallback>
}
 8006e56:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	f8d3 10d8 	ldr.w	r1, [r3, #216]	@ 0xd8
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8006e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8006e64:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8006e68:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8006e6a:	4011      	ands	r1, r2
 8006e6c:	4620      	mov	r0, r4
 8006e6e:	f7ff ff5d 	bl	8006d2c <HAL_FDCAN_TxBufferAbortCallback>
  if (TxEventFifoITs != 0U)
 8006e72:	f1ba 0f00 	cmp.w	sl, #0
 8006e76:	d095      	beq.n	8006da4 <HAL_FDCAN_IRQHandler+0x60>
 8006e78:	e7df      	b.n	8006e3a <HAL_FDCAN_IRQHandler+0xf6>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8006e7a:	2240      	movs	r2, #64	@ 0x40
 8006e7c:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8006e7e:	f7ff ff5b 	bl	8006d38 <HAL_FDCAN_HighPriorityMessageCallback>
 8006e82:	e787      	b.n	8006d94 <HAL_FDCAN_IRQHandler+0x50>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8006e84:	6823      	ldr	r3, [r4, #0]
 8006e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006e8a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	f7ff ff4f 	bl	8006d30 <HAL_FDCAN_TimestampWraparoundCallback>
 8006e92:	e79c      	b.n	8006dce <HAL_FDCAN_IRQHandler+0x8a>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8006e94:	6823      	ldr	r3, [r4, #0]
 8006e96:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8006e9a:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	f7ff ff49 	bl	8006d34 <HAL_FDCAN_TimeoutOccurredCallback>
 8006ea2:	e799      	b.n	8006dd8 <HAL_FDCAN_IRQHandler+0x94>
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8006ea4:	6823      	ldr	r3, [r4, #0]
 8006ea6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006eaa:	651a      	str	r2, [r3, #80]	@ 0x50
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8006eac:	4620      	mov	r0, r4
 8006eae:	f7ff ff39 	bl	8006d24 <HAL_FDCAN_TxFifoEmptyCallback>
 8006eb2:	e782      	b.n	8006dba <HAL_FDCAN_IRQHandler+0x76>
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8006eb4:	6823      	ldr	r3, [r4, #0]
 8006eb6:	f8d3 10d4 	ldr.w	r1, [r3, #212]	@ 0xd4
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8006eba:	f8d3 20dc 	ldr.w	r2, [r3, #220]	@ 0xdc
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8006ebe:	2080      	movs	r0, #128	@ 0x80
 8006ec0:	6518      	str	r0, [r3, #80]	@ 0x50
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8006ec2:	4011      	ands	r1, r2
 8006ec4:	4620      	mov	r0, r4
 8006ec6:	f7ff ff2f 	bl	8006d28 <HAL_FDCAN_TxBufferCompleteCallback>
 8006eca:	e77b      	b.n	8006dc4 <HAL_FDCAN_IRQHandler+0x80>

08006ecc <HAL_GPIO_Init>:
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ecc:	680b      	ldr	r3, [r1, #0]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	f000 8198 	beq.w	8007204 <HAL_GPIO_Init+0x338>
{
 8006ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed8:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
 8006edc:	b085      	sub	sp, #20
  uint32_t position = 0x00U;
 8006ede:	f04f 0200 	mov.w	r2, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ee2:	f04f 0b01 	mov.w	fp, #1
 8006ee6:	f000 810d 	beq.w	8007104 <HAL_GPIO_Init+0x238>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006eea:	f8df e34c 	ldr.w	lr, [pc, #844]	@ 8007238 <HAL_GPIO_Init+0x36c>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006eee:	9300      	str	r3, [sp, #0]
    if (iocurrent != 0x00u)
 8006ef0:	9b00      	ldr	r3, [sp, #0]
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006ef2:	fa0b fc02 	lsl.w	ip, fp, r2
    if (iocurrent != 0x00u)
 8006ef6:	ea1c 0a03 	ands.w	sl, ip, r3
 8006efa:	d077      	beq.n	8006fec <HAL_GPIO_Init+0x120>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006efc:	684d      	ldr	r5, [r1, #4]
 8006efe:	f005 0703 	and.w	r7, r5, #3
 8006f02:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f04:	2303      	movs	r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f06:	f107 38ff 	add.w	r8, r7, #4294967295
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f0a:	fa03 f604 	lsl.w	r6, r3, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f0e:	f1b8 0f01 	cmp.w	r8, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006f12:	ea6f 0606 	mvn.w	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006f16:	f240 8119 	bls.w	800714c <HAL_GPIO_Init+0x280>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006f1a:	2f03      	cmp	r7, #3
 8006f1c:	f040 8179 	bne.w	8007212 <HAL_GPIO_Init+0x346>
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f20:	fa07 f404 	lsl.w	r4, r7, r4
      temp = GPIOx->MODER;
 8006f24:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006f26:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f28:	4334      	orrs	r4, r6
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f2a:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8006f2e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006f30:	d05c      	beq.n	8006fec <HAL_GPIO_Init+0x120>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f32:	4ebe      	ldr	r6, [pc, #760]	@ (800722c <HAL_GPIO_Init+0x360>)
 8006f34:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8006f36:	f044 0401 	orr.w	r4, r4, #1
 8006f3a:	6634      	str	r4, [r6, #96]	@ 0x60
 8006f3c:	6e34      	ldr	r4, [r6, #96]	@ 0x60
 8006f3e:	f004 0401 	and.w	r4, r4, #1
 8006f42:	9403      	str	r4, [sp, #12]
 8006f44:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f46:	f022 0403 	bic.w	r4, r2, #3
 8006f4a:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f4e:	f002 0703 	and.w	r7, r2, #3
 8006f52:	230f      	movs	r3, #15
 8006f54:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
 8006f58:	00bf      	lsls	r7, r7, #2
 8006f5a:	fa03 fc07 	lsl.w	ip, r3, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f5e:	4bb4      	ldr	r3, [pc, #720]	@ (8007230 <HAL_GPIO_Init+0x364>)
        temp = SYSCFG->EXTICR[position >> 2U];
 8006f60:	68a6      	ldr	r6, [r4, #8]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f62:	4298      	cmp	r0, r3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006f64:	ea26 060c 	bic.w	r6, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8006f68:	f000 8140 	beq.w	80071ec <HAL_GPIO_Init+0x320>
 8006f6c:	4bb1      	ldr	r3, [pc, #708]	@ (8007234 <HAL_GPIO_Init+0x368>)
 8006f6e:	4298      	cmp	r0, r3
 8006f70:	f000 812d 	beq.w	80071ce <HAL_GPIO_Init+0x302>
 8006f74:	f8df c2c4 	ldr.w	ip, [pc, #708]	@ 800723c <HAL_GPIO_Init+0x370>
 8006f78:	4560      	cmp	r0, ip
 8006f7a:	f000 813d 	beq.w	80071f8 <HAL_GPIO_Init+0x32c>
 8006f7e:	f8df c2c0 	ldr.w	ip, [pc, #704]	@ 8007240 <HAL_GPIO_Init+0x374>
 8006f82:	4560      	cmp	r0, ip
 8006f84:	f000 813f 	beq.w	8007206 <HAL_GPIO_Init+0x33a>
 8006f88:	f8df c2b8 	ldr.w	ip, [pc, #696]	@ 8007244 <HAL_GPIO_Init+0x378>
 8006f8c:	4560      	cmp	r0, ip
 8006f8e:	bf0c      	ite	eq
 8006f90:	f04f 0c05 	moveq.w	ip, #5
 8006f94:	f04f 0c06 	movne.w	ip, #6
 8006f98:	fa0c f707 	lsl.w	r7, ip, r7
 8006f9c:	433e      	orrs	r6, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f9e:	60a6      	str	r6, [r4, #8]
        temp = EXTI->RTSR1;
 8006fa0:	f8de 4008 	ldr.w	r4, [lr, #8]
        temp &= ~(iocurrent);
 8006fa4:	ea6f 060a 	mvn.w	r6, sl
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006fa8:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 8006faa:	bf54      	ite	pl
 8006fac:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006fae:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->RTSR1 = temp;
 8006fb2:	f8ce 4008 	str.w	r4, [lr, #8]

        temp = EXTI->FTSR1;
 8006fb6:	f8de 400c 	ldr.w	r4, [lr, #12]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fba:	02ab      	lsls	r3, r5, #10
        temp &= ~(iocurrent);
 8006fbc:	bf54      	ite	pl
 8006fbe:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006fc0:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->FTSR1 = temp;
 8006fc4:	f8ce 400c 	str.w	r4, [lr, #12]

        temp = EXTI->EMR1;
 8006fc8:	f8de 4004 	ldr.w	r4, [lr, #4]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006fcc:	03af      	lsls	r7, r5, #14
        temp &= ~(iocurrent);
 8006fce:	bf54      	ite	pl
 8006fd0:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006fd2:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->EMR1 = temp;
 8006fd6:	f8ce 4004 	str.w	r4, [lr, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8006fda:	f8de 4000 	ldr.w	r4, [lr]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fde:	03eb      	lsls	r3, r5, #15
        temp &= ~(iocurrent);
 8006fe0:	bf54      	ite	pl
 8006fe2:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8006fe4:	ea4a 0404 	orrmi.w	r4, sl, r4
        }
        EXTI->IMR1 = temp;
 8006fe8:	f8ce 4000 	str.w	r4, [lr]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006fec:	9b00      	ldr	r3, [sp, #0]
      }
    }

    position++;
 8006fee:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 8006ff0:	fa33 f402 	lsrs.w	r4, r3, r2
 8006ff4:	f47f af7c 	bne.w	8006ef0 <HAL_GPIO_Init+0x24>
  }
}
 8006ff8:	b005      	add	sp, #20
 8006ffa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR;
 8006ffe:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007002:	68ce      	ldr	r6, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007004:	ea0a 0909 	and.w	r9, sl, r9
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007008:	fa06 f807 	lsl.w	r8, r6, r7
 800700c:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 8007010:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007014:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007018:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800701c:	f3c5 1e00 	ubfx	lr, r5, #4, #1
 8007020:	fa0e fe02 	lsl.w	lr, lr, r2
 8007024:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8007028:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 800702c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007030:	688e      	ldr	r6, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007032:	ea0a 0808 	and.w	r8, sl, r8
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007036:	fa06 fe07 	lsl.w	lr, r6, r7
 800703a:	ea4e 0e08 	orr.w	lr, lr, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800703e:	2c02      	cmp	r4, #2
        GPIOx->PUPDR = temp;
 8007040:	f8c0 e00c 	str.w	lr, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007044:	d119      	bne.n	800707a <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->AFR[position >> 3U];
 8007046:	ea4f 0ed2 	mov.w	lr, r2, lsr #3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800704a:	690e      	ldr	r6, [r1, #16]
 800704c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007050:	f002 0807 	and.w	r8, r2, #7
 8007054:	f10e 4e90 	add.w	lr, lr, #1207959552	@ 0x48000000
 8007058:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800705c:	fa06 f608 	lsl.w	r6, r6, r8
        temp = GPIOx->AFR[position >> 3U];
 8007060:	f8de 9020 	ldr.w	r9, [lr, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007064:	9600      	str	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007066:	260f      	movs	r6, #15
 8007068:	fa06 f808 	lsl.w	r8, r6, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800706c:	9e00      	ldr	r6, [sp, #0]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800706e:	ea29 0908 	bic.w	r9, r9, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007072:	ea46 0809 	orr.w	r8, r6, r9
        GPIOx->AFR[position >> 3U] = temp;
 8007076:	f8ce 8020 	str.w	r8, [lr, #32]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800707a:	40bc      	lsls	r4, r7
      temp = GPIOx->MODER;
 800707c:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800707e:	ea07 070a 	and.w	r7, r7, sl
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007082:	433c      	orrs	r4, r7
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007084:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8007088:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800708a:	d036      	beq.n	80070fa <HAL_GPIO_Init+0x22e>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800708c:	4f67      	ldr	r7, [pc, #412]	@ (800722c <HAL_GPIO_Init+0x360>)
 800708e:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007090:	f044 0401 	orr.w	r4, r4, #1
 8007094:	663c      	str	r4, [r7, #96]	@ 0x60
 8007096:	6e3c      	ldr	r4, [r7, #96]	@ 0x60
 8007098:	f004 0401 	and.w	r4, r4, #1
 800709c:	9403      	str	r4, [sp, #12]
 800709e:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80070a0:	f022 0403 	bic.w	r4, r2, #3
 80070a4:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 80070a8:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070ac:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80070b0:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80070b4:	260f      	movs	r6, #15
 80070b6:	00bf      	lsls	r7, r7, #2
 80070b8:	fa06 f707 	lsl.w	r7, r6, r7
 80070bc:	ea2e 0707 	bic.w	r7, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80070c0:	60a7      	str	r7, [r4, #8]
        temp = EXTI->RTSR1;
 80070c2:	4c5d      	ldr	r4, [pc, #372]	@ (8007238 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070c4:	02ee      	lsls	r6, r5, #11
        temp = EXTI->RTSR1;
 80070c6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~(iocurrent);
 80070c8:	ea6f 070c 	mvn.w	r7, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80070cc:	d47c      	bmi.n	80071c8 <HAL_GPIO_Init+0x2fc>
        temp &= ~(iocurrent);
 80070ce:	403c      	ands	r4, r7
        EXTI->RTSR1 = temp;
 80070d0:	4e59      	ldr	r6, [pc, #356]	@ (8007238 <HAL_GPIO_Init+0x36c>)
 80070d2:	60b4      	str	r4, [r6, #8]
        temp = EXTI->FTSR1;
 80070d4:	68f4      	ldr	r4, [r6, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80070d6:	02ae      	lsls	r6, r5, #10
 80070d8:	f100 8085 	bmi.w	80071e6 <HAL_GPIO_Init+0x31a>
        temp &= ~(iocurrent);
 80070dc:	403c      	ands	r4, r7
        EXTI->FTSR1 = temp;
 80070de:	4e56      	ldr	r6, [pc, #344]	@ (8007238 <HAL_GPIO_Init+0x36c>)
 80070e0:	60f4      	str	r4, [r6, #12]
        temp = EXTI->EMR1;
 80070e2:	6874      	ldr	r4, [r6, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80070e4:	03ae      	lsls	r6, r5, #14
 80070e6:	d47b      	bmi.n	80071e0 <HAL_GPIO_Init+0x314>
        temp &= ~(iocurrent);
 80070e8:	403c      	ands	r4, r7
        EXTI->EMR1 = temp;
 80070ea:	4e53      	ldr	r6, [pc, #332]	@ (8007238 <HAL_GPIO_Init+0x36c>)
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070ec:	03ed      	lsls	r5, r5, #15
        EXTI->EMR1 = temp;
 80070ee:	6074      	str	r4, [r6, #4]
        temp = EXTI->IMR1;
 80070f0:	6834      	ldr	r4, [r6, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070f2:	d472      	bmi.n	80071da <HAL_GPIO_Init+0x30e>
        temp &= ~(iocurrent);
 80070f4:	403c      	ands	r4, r7
        EXTI->IMR1 = temp;
 80070f6:	4d50      	ldr	r5, [pc, #320]	@ (8007238 <HAL_GPIO_Init+0x36c>)
 80070f8:	602c      	str	r4, [r5, #0]
    position++;
 80070fa:	3201      	adds	r2, #1
  while (((GPIO_Init->Pin) >> position) != 0U)
 80070fc:	fa33 f402 	lsrs.w	r4, r3, r2
 8007100:	f43f af7a 	beq.w	8006ff8 <HAL_GPIO_Init+0x12c>
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007104:	fa0b fe02 	lsl.w	lr, fp, r2
    if (iocurrent != 0x00u)
 8007108:	ea13 0c0e 	ands.w	ip, r3, lr
 800710c:	d0f5      	beq.n	80070fa <HAL_GPIO_Init+0x22e>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800710e:	684d      	ldr	r5, [r1, #4]
 8007110:	0057      	lsls	r7, r2, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007112:	2603      	movs	r6, #3
 8007114:	fa06 f807 	lsl.w	r8, r6, r7
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007118:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800711c:	ea6f 0a08 	mvn.w	sl, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8007120:	f104 38ff 	add.w	r8, r4, #4294967295
 8007124:	f1b8 0f01 	cmp.w	r8, #1
 8007128:	f67f af69 	bls.w	8006ffe <HAL_GPIO_Init+0x132>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800712c:	2c03      	cmp	r4, #3
 800712e:	d0a4      	beq.n	800707a <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->PUPDR;
 8007130:	f04f 4890 	mov.w	r8, #1207959552	@ 0x48000000
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007134:	688e      	ldr	r6, [r1, #8]
        temp = GPIOx->PUPDR;
 8007136:	f8d8 900c 	ldr.w	r9, [r8, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800713a:	fa06 fe07 	lsl.w	lr, r6, r7
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800713e:	ea0a 0909 	and.w	r9, sl, r9
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007142:	ea4e 0e09 	orr.w	lr, lr, r9
        GPIOx->PUPDR = temp;
 8007146:	f8c8 e00c 	str.w	lr, [r8, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800714a:	e796      	b.n	800707a <HAL_GPIO_Init+0x1ae>
        temp = GPIOx->OSPEEDR;
 800714c:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007150:	68cb      	ldr	r3, [r1, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007152:	ea09 0906 	and.w	r9, r9, r6
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007156:	fa03 f804 	lsl.w	r8, r3, r4
 800715a:	ea48 0809 	orr.w	r8, r8, r9
        GPIOx->OSPEEDR = temp;
 800715e:	f8c0 8008 	str.w	r8, [r0, #8]
        temp = GPIOx->OTYPER;
 8007162:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007166:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007168:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800716c:	f3c5 1c00 	ubfx	ip, r5, #4, #1
 8007170:	fa0c fc02 	lsl.w	ip, ip, r2
 8007174:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->OTYPER = temp;
 8007178:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 800717c:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007180:	fa03 fc04 	lsl.w	ip, r3, r4
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007184:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007188:	ea4c 0c08 	orr.w	ip, ip, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800718c:	2f02      	cmp	r7, #2
        GPIOx->PUPDR = temp;
 800718e:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007192:	f47f aec5 	bne.w	8006f20 <HAL_GPIO_Init+0x54>
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007196:	690b      	ldr	r3, [r1, #16]
        temp = GPIOx->AFR[position >> 3U];
 8007198:	ea4f 08d2 	mov.w	r8, r2, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800719c:	f002 0c07 	and.w	ip, r2, #7
 80071a0:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80071a4:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071a8:	fa03 f30c 	lsl.w	r3, r3, ip
        temp = GPIOx->AFR[position >> 3U];
 80071ac:	f8d8 9020 	ldr.w	r9, [r8, #32]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071b0:	9301      	str	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071b2:	230f      	movs	r3, #15
 80071b4:	fa03 fc0c 	lsl.w	ip, r3, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071b8:	9b01      	ldr	r3, [sp, #4]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80071ba:	ea29 090c 	bic.w	r9, r9, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80071be:	ea43 0c09 	orr.w	ip, r3, r9
        GPIOx->AFR[position >> 3U] = temp;
 80071c2:	f8c8 c020 	str.w	ip, [r8, #32]
 80071c6:	e6ab      	b.n	8006f20 <HAL_GPIO_Init+0x54>
          temp |= iocurrent;
 80071c8:	ea44 040c 	orr.w	r4, r4, ip
 80071cc:	e780      	b.n	80070d0 <HAL_GPIO_Init+0x204>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071ce:	f04f 0c02 	mov.w	ip, #2
 80071d2:	fa0c f707 	lsl.w	r7, ip, r7
 80071d6:	433e      	orrs	r6, r7
 80071d8:	e6e1      	b.n	8006f9e <HAL_GPIO_Init+0xd2>
          temp |= iocurrent;
 80071da:	ea4c 0404 	orr.w	r4, ip, r4
 80071de:	e78a      	b.n	80070f6 <HAL_GPIO_Init+0x22a>
          temp |= iocurrent;
 80071e0:	ea44 040c 	orr.w	r4, r4, ip
 80071e4:	e781      	b.n	80070ea <HAL_GPIO_Init+0x21e>
          temp |= iocurrent;
 80071e6:	ea4c 0404 	orr.w	r4, ip, r4
 80071ea:	e778      	b.n	80070de <HAL_GPIO_Init+0x212>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071ec:	f04f 0c01 	mov.w	ip, #1
 80071f0:	fa0c f707 	lsl.w	r7, ip, r7
 80071f4:	433e      	orrs	r6, r7
 80071f6:	e6d2      	b.n	8006f9e <HAL_GPIO_Init+0xd2>
 80071f8:	f04f 0c03 	mov.w	ip, #3
 80071fc:	fa0c f707 	lsl.w	r7, ip, r7
 8007200:	433e      	orrs	r6, r7
 8007202:	e6cc      	b.n	8006f9e <HAL_GPIO_Init+0xd2>
 8007204:	4770      	bx	lr
 8007206:	f04f 0c04 	mov.w	ip, #4
 800720a:	fa0c f707 	lsl.w	r7, ip, r7
 800720e:	433e      	orrs	r6, r7
 8007210:	e6c5      	b.n	8006f9e <HAL_GPIO_Init+0xd2>
        temp = GPIOx->PUPDR;
 8007212:	f8d0 800c 	ldr.w	r8, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007216:	688b      	ldr	r3, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007218:	ea08 0806 	and.w	r8, r8, r6
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800721c:	fa03 fc04 	lsl.w	ip, r3, r4
 8007220:	ea4c 0c08 	orr.w	ip, ip, r8
        GPIOx->PUPDR = temp;
 8007224:	f8c0 c00c 	str.w	ip, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007228:	e67a      	b.n	8006f20 <HAL_GPIO_Init+0x54>
 800722a:	bf00      	nop
 800722c:	40021000 	.word	0x40021000
 8007230:	48000400 	.word	0x48000400
 8007234:	48000800 	.word	0x48000800
 8007238:	40010400 	.word	0x40010400
 800723c:	48000c00 	.word	0x48000c00
 8007240:	48001000 	.word	0x48001000
 8007244:	48001400 	.word	0x48001400

08007248 <HAL_GPIO_DeInit>:
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 8007248:	2900      	cmp	r1, #0
 800724a:	f000 80e5 	beq.w	8007418 <HAL_GPIO_DeInit+0x1d0>
 800724e:	f1b0 4f90 	cmp.w	r0, #1207959552	@ 0x48000000
{
 8007252:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007256:	f04f 0300 	mov.w	r3, #0
 800725a:	d07e      	beq.n	800735a <HAL_GPIO_DeInit+0x112>
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800725c:	4e6f      	ldr	r6, [pc, #444]	@ (800741c <HAL_GPIO_DeInit+0x1d4>)
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800725e:	f04f 090f 	mov.w	r9, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007262:	f04f 0a03 	mov.w	sl, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 8007266:	2201      	movs	r2, #1
 8007268:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 800726a:	ea12 0e01 	ands.w	lr, r2, r1
 800726e:	d05f      	beq.n	8007330 <HAL_GPIO_DeInit+0xe8>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007270:	f023 0403 	bic.w	r4, r3, #3
 8007274:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8007278:	f504 3480 	add.w	r4, r4, #65536	@ 0x10000
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800727c:	4f68      	ldr	r7, [pc, #416]	@ (8007420 <HAL_GPIO_DeInit+0x1d8>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 800727e:	f8d4 c008 	ldr.w	ip, [r4, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007282:	f003 0503 	and.w	r5, r3, #3
 8007286:	00ad      	lsls	r5, r5, #2
 8007288:	fa09 f805 	lsl.w	r8, r9, r5
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800728c:	42b8      	cmp	r0, r7
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800728e:	ea08 0c0c 	and.w	ip, r8, ip
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007292:	d013      	beq.n	80072bc <HAL_GPIO_DeInit+0x74>
 8007294:	4f63      	ldr	r7, [pc, #396]	@ (8007424 <HAL_GPIO_DeInit+0x1dc>)
 8007296:	42b8      	cmp	r0, r7
 8007298:	d055      	beq.n	8007346 <HAL_GPIO_DeInit+0xfe>
 800729a:	4f63      	ldr	r7, [pc, #396]	@ (8007428 <HAL_GPIO_DeInit+0x1e0>)
 800729c:	42b8      	cmp	r0, r7
 800729e:	d057      	beq.n	8007350 <HAL_GPIO_DeInit+0x108>
 80072a0:	4f62      	ldr	r7, [pc, #392]	@ (800742c <HAL_GPIO_DeInit+0x1e4>)
 80072a2:	42b8      	cmp	r0, r7
 80072a4:	d04a      	beq.n	800733c <HAL_GPIO_DeInit+0xf4>
 80072a6:	f8df b188 	ldr.w	fp, [pc, #392]	@ 8007430 <HAL_GPIO_DeInit+0x1e8>
 80072aa:	4558      	cmp	r0, fp
 80072ac:	bf0c      	ite	eq
 80072ae:	f04f 0b05 	moveq.w	fp, #5
 80072b2:	f04f 0b06 	movne.w	fp, #6
 80072b6:	fa0b f505 	lsl.w	r5, fp, r5
 80072ba:	e002      	b.n	80072c2 <HAL_GPIO_DeInit+0x7a>
 80072bc:	2701      	movs	r7, #1
 80072be:	fa07 f505 	lsl.w	r5, r7, r5
 80072c2:	45ac      	cmp	ip, r5
 80072c4:	d113      	bne.n	80072ee <HAL_GPIO_DeInit+0xa6>
        EXTI->IMR1 &= ~(iocurrent);
 80072c6:	6835      	ldr	r5, [r6, #0]
 80072c8:	ea25 050e 	bic.w	r5, r5, lr
 80072cc:	6035      	str	r5, [r6, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80072ce:	6875      	ldr	r5, [r6, #4]
 80072d0:	ea25 050e 	bic.w	r5, r5, lr
 80072d4:	6075      	str	r5, [r6, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80072d6:	68f5      	ldr	r5, [r6, #12]
 80072d8:	ea25 050e 	bic.w	r5, r5, lr
 80072dc:	60f5      	str	r5, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80072de:	68b5      	ldr	r5, [r6, #8]
 80072e0:	ea25 050e 	bic.w	r5, r5, lr
 80072e4:	60b5      	str	r5, [r6, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80072e6:	68a5      	ldr	r5, [r4, #8]
 80072e8:	ea25 0508 	bic.w	r5, r5, r8
 80072ec:	60a5      	str	r5, [r4, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80072ee:	6804      	ldr	r4, [r0, #0]
 80072f0:	005d      	lsls	r5, r3, #1
 80072f2:	fa0a f505 	lsl.w	r5, sl, r5

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80072f6:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80072fa:	432c      	orrs	r4, r5
 80072fc:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
 8007300:	6004      	str	r4, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 8007302:	f003 0407 	and.w	r4, r3, #7
 8007306:	f8dc e020 	ldr.w	lr, [ip, #32]
 800730a:	00a4      	lsls	r4, r4, #2
 800730c:	fa09 f404 	lsl.w	r4, r9, r4
 8007310:	ea2e 0404 	bic.w	r4, lr, r4
 8007314:	f8cc 4020 	str.w	r4, [ip, #32]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8007318:	68c4      	ldr	r4, [r0, #12]
 800731a:	ea24 0405 	bic.w	r4, r4, r5
 800731e:	60c4      	str	r4, [r0, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 8007320:	6844      	ldr	r4, [r0, #4]
 8007322:	ea24 0202 	bic.w	r2, r4, r2
 8007326:	6042      	str	r2, [r0, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007328:	6882      	ldr	r2, [r0, #8]
 800732a:	ea22 0205 	bic.w	r2, r2, r5
 800732e:	6082      	str	r2, [r0, #8]
    }

    position++;
 8007330:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 8007332:	fa31 f203 	lsrs.w	r2, r1, r3
 8007336:	d196      	bne.n	8007266 <HAL_GPIO_DeInit+0x1e>
  }
}
 8007338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800733c:	f04f 0b04 	mov.w	fp, #4
 8007340:	fa0b f505 	lsl.w	r5, fp, r5
 8007344:	e7bd      	b.n	80072c2 <HAL_GPIO_DeInit+0x7a>
 8007346:	f04f 0b02 	mov.w	fp, #2
 800734a:	fa0b f505 	lsl.w	r5, fp, r5
 800734e:	e7b8      	b.n	80072c2 <HAL_GPIO_DeInit+0x7a>
 8007350:	f04f 0b03 	mov.w	fp, #3
 8007354:	fa0b f505 	lsl.w	r5, fp, r5
 8007358:	e7b3      	b.n	80072c2 <HAL_GPIO_DeInit+0x7a>
        EXTI->IMR1 &= ~(iocurrent);
 800735a:	4e30      	ldr	r6, [pc, #192]	@ (800741c <HAL_GPIO_DeInit+0x1d4>)
    iocurrent = (GPIO_Pin) & (1UL << position);
 800735c:	2701      	movs	r7, #1
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800735e:	250f      	movs	r5, #15
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8007360:	f04f 0c03 	mov.w	ip, #3
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007364:	f023 0203 	bic.w	r2, r3, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007368:	f003 0403 	and.w	r4, r3, #3
    iocurrent = (GPIO_Pin) & (1UL << position);
 800736c:	fa07 fe03 	lsl.w	lr, r7, r3
    if (iocurrent != 0x00u)
 8007370:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007374:	00a4      	lsls	r4, r4, #2
    if (iocurrent != 0x00u)
 8007376:	ea11 080e 	ands.w	r8, r1, lr
 800737a:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800737e:	fa05 f404 	lsl.w	r4, r5, r4
    if (iocurrent != 0x00u)
 8007382:	d043      	beq.n	800740c <HAL_GPIO_DeInit+0x1c4>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8007384:	f8d2 9008 	ldr.w	r9, [r2, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007388:	ea14 0f09 	tst.w	r4, r9
 800738c:	d11c      	bne.n	80073c8 <HAL_GPIO_DeInit+0x180>
        EXTI->IMR1 &= ~(iocurrent);
 800738e:	f8d6 9000 	ldr.w	r9, [r6]
 8007392:	ea29 0908 	bic.w	r9, r9, r8
 8007396:	f8c6 9000 	str.w	r9, [r6]
        EXTI->EMR1 &= ~(iocurrent);
 800739a:	f8d6 9004 	ldr.w	r9, [r6, #4]
 800739e:	ea29 0908 	bic.w	r9, r9, r8
 80073a2:	f8c6 9004 	str.w	r9, [r6, #4]
        EXTI->FTSR1 &= ~(iocurrent);
 80073a6:	f8d6 900c 	ldr.w	r9, [r6, #12]
 80073aa:	ea29 0908 	bic.w	r9, r9, r8
 80073ae:	f8c6 900c 	str.w	r9, [r6, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80073b2:	f8d6 9008 	ldr.w	r9, [r6, #8]
 80073b6:	ea29 0808 	bic.w	r8, r9, r8
 80073ba:	f8c6 8008 	str.w	r8, [r6, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80073be:	f8d2 8008 	ldr.w	r8, [r2, #8]
 80073c2:	ea28 0404 	bic.w	r4, r8, r4
 80073c6:	6094      	str	r4, [r2, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80073c8:	6802      	ldr	r2, [r0, #0]
 80073ca:	ea4f 0843 	mov.w	r8, r3, lsl #1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80073ce:	08dc      	lsrs	r4, r3, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80073d0:	fa0c f808 	lsl.w	r8, ip, r8
 80073d4:	00a4      	lsls	r4, r4, #2
 80073d6:	ea42 0208 	orr.w	r2, r2, r8
 80073da:	f104 4490 	add.w	r4, r4, #1207959552	@ 0x48000000
 80073de:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 80073e0:	f003 0207 	and.w	r2, r3, #7
 80073e4:	f8d4 9020 	ldr.w	r9, [r4, #32]
 80073e8:	0092      	lsls	r2, r2, #2
 80073ea:	fa05 f202 	lsl.w	r2, r5, r2
 80073ee:	ea29 0202 	bic.w	r2, r9, r2
 80073f2:	6222      	str	r2, [r4, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80073f4:	68c2      	ldr	r2, [r0, #12]
 80073f6:	ea22 0208 	bic.w	r2, r2, r8
 80073fa:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 80073fc:	6842      	ldr	r2, [r0, #4]
 80073fe:	ea22 020e 	bic.w	r2, r2, lr
 8007402:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007404:	6882      	ldr	r2, [r0, #8]
 8007406:	ea22 0208 	bic.w	r2, r2, r8
 800740a:	6082      	str	r2, [r0, #8]
    position++;
 800740c:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0U)
 800740e:	fa31 f203 	lsrs.w	r2, r1, r3
 8007412:	d1a7      	bne.n	8007364 <HAL_GPIO_DeInit+0x11c>
}
 8007414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007418:	4770      	bx	lr
 800741a:	bf00      	nop
 800741c:	40010400 	.word	0x40010400
 8007420:	48000400 	.word	0x48000400
 8007424:	48000800 	.word	0x48000800
 8007428:	48000c00 	.word	0x48000c00
 800742c:	48001000 	.word	0x48001000
 8007430:	48001400 	.word	0x48001400

08007434 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007434:	b10a      	cbz	r2, 800743a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007436:	6181      	str	r1, [r0, #24]
 8007438:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800743a:	6281      	str	r1, [r0, #40]	@ 0x28
  }
}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop

08007440 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007440:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007442:	ea01 0203 	and.w	r2, r1, r3
 8007446:	ea21 0103 	bic.w	r1, r1, r3
 800744a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800744e:	6181      	str	r1, [r0, #24]
}
 8007450:	4770      	bx	lr
 8007452:	bf00      	nop

08007454 <HAL_OPAMP_Init>:
{
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8007454:	2800      	cmp	r0, #0
 8007456:	d06f      	beq.n	8007538 <HAL_OPAMP_Init+0xe4>
{
 8007458:	b530      	push	{r4, r5, lr}
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800745a:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800745e:	2b05      	cmp	r3, #5
{
 8007460:	b083      	sub	sp, #12
 8007462:	4604      	mov	r4, r0
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8007464:	d056      	beq.n	8007514 <HAL_OPAMP_Init+0xc0>
  {
    return HAL_ERROR;
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8007466:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 800746a:	2b02      	cmp	r3, #2
 800746c:	d052      	beq.n	8007514 <HAL_OPAMP_Init+0xc0>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800746e:	4b33      	ldr	r3, [pc, #204]	@ (800753c <HAL_OPAMP_Init+0xe8>)
 8007470:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8007472:	f042 0201 	orr.w	r2, r2, #1
 8007476:	661a      	str	r2, [r3, #96]	@ 0x60
 8007478:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800747a:	f003 0301 	and.w	r3, r3, #1
 800747e:	9301      	str	r3, [sp, #4]
 8007480:	9b01      	ldr	r3, [sp, #4]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007482:	f890 303a 	ldrb.w	r3, [r0, #58]	@ 0x3a
 8007486:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800748a:	b90b      	cbnz	r3, 8007490 <HAL_OPAMP_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 800748c:	f880 2039 	strb.w	r2, [r0, #57]	@ 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8007490:	4620      	mov	r0, r4
 8007492:	f7fd fc49 	bl	8004d28 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8007496:	68a3      	ldr	r3, [r4, #8]
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8007498:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 800749a:	f023 0220 	bic.w	r2, r3, #32
 800749e:	2a40      	cmp	r2, #64	@ 0x40
      MODIFY_REG(hopamp->Instance->CSR,
 80074a0:	6822      	ldr	r2, [r4, #0]
 80074a2:	6811      	ldr	r1, [r2, #0]
    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 80074a4:	d039      	beq.n	800751a <HAL_OPAMP_Init+0xc6>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80074a6:	6865      	ldr	r5, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 80074a8:	f021 0110 	bic.w	r1, r1, #16
 80074ac:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 80074ae:	68e0      	ldr	r0, [r4, #12]
      MODIFY_REG(hopamp->Instance->CSR,
 80074b0:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 80074b2:	432b      	orrs	r3, r5
 80074b4:	4303      	orrs	r3, r0
 80074b6:	6920      	ldr	r0, [r4, #16]
 80074b8:	6811      	ldr	r1, [r2, #0]
 80074ba:	4303      	orrs	r3, r0
 80074bc:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80074be:	4303      	orrs	r3, r0
 80074c0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80074c2:	4303      	orrs	r3, r0
 80074c4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80074c6:	ea43 43c0 	orr.w	r3, r3, r0, lsl #19
 80074ca:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80074cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80074d0:	481b      	ldr	r0, [pc, #108]	@ (8007540 <HAL_OPAMP_Init+0xec>)
 80074d2:	4008      	ands	r0, r1
 80074d4:	7d21      	ldrb	r1, [r4, #20]
 80074d6:	f1a1 0101 	sub.w	r1, r1, #1
 80074da:	fab1 f181 	clz	r1, r1
 80074de:	4303      	orrs	r3, r0
 80074e0:	0949      	lsrs	r1, r1, #5
 80074e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80074e6:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 80074e8:	6993      	ldr	r3, [r2, #24]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	db09      	blt.n	8007502 <HAL_OPAMP_Init+0xae>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 80074ee:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 80074f2:	6991      	ldr	r1, [r2, #24]
 80074f4:	4303      	orrs	r3, r0
 80074f6:	6a20      	ldr	r0, [r4, #32]
 80074f8:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80074fc:	4303      	orrs	r3, r0
 80074fe:	430b      	orrs	r3, r1
 8007500:	6193      	str	r3, [r2, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8007502:	f894 303a 	ldrb.w	r3, [r4, #58]	@ 0x3a
 8007506:	b913      	cbnz	r3, 800750e <HAL_OPAMP_Init+0xba>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8007508:	2301      	movs	r3, #1
 800750a:	f884 303a 	strb.w	r3, [r4, #58]	@ 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 800750e:	2000      	movs	r0, #0
  }
}
 8007510:	b003      	add	sp, #12
 8007512:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8007514:	2001      	movs	r0, #1
}
 8007516:	b003      	add	sp, #12
 8007518:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(hopamp->Instance->CSR,
 800751a:	f021 0110 	bic.w	r1, r1, #16
 800751e:	4301      	orrs	r1, r0
      MODIFY_REG(hopamp->Instance->CSR,
 8007520:	6860      	ldr	r0, [r4, #4]
      MODIFY_REG(hopamp->Instance->CSR,
 8007522:	6011      	str	r1, [r2, #0]
      MODIFY_REG(hopamp->Instance->CSR,
 8007524:	4303      	orrs	r3, r0
 8007526:	6920      	ldr	r0, [r4, #16]
 8007528:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800752a:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 800752c:	4303      	orrs	r3, r0
 800752e:	430b      	orrs	r3, r1
 8007530:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8007532:	6811      	ldr	r1, [r2, #0]
 8007534:	432b      	orrs	r3, r5
 8007536:	e7c6      	b.n	80074c6 <HAL_OPAMP_Init+0x72>
    return HAL_ERROR;
 8007538:	2001      	movs	r0, #1
}
 800753a:	4770      	bx	lr
 800753c:	40021000 	.word	0x40021000
 8007540:	e0003e11 	.word	0xe0003e11

08007544 <HAL_PWREx_ControlVoltageScaling>:
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007544:	4a35      	ldr	r2, [pc, #212]	@ (800761c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 8007546:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8007548:	b960      	cbnz	r0, 8007564 <HAL_PWREx_ControlVoltageScaling+0x20>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800754a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800754e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007552:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007556:	d01b      	beq.n	8007590 <HAL_PWREx_ControlVoltageScaling+0x4c>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800755c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8007560:	2000      	movs	r0, #0
}
 8007562:	4770      	bx	lr
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007564:	f5b0 7f00 	cmp.w	r0, #512	@ 0x200
 8007568:	d006      	beq.n	8007578 <HAL_PWREx_ControlVoltageScaling+0x34>
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800756a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800756e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007572:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8007574:	2000      	movs	r0, #0
}
 8007576:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007578:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800757c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007580:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8007584:	d029      	beq.n	80075da <HAL_PWREx_ControlVoltageScaling+0x96>
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007586:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800758a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800758e:	e7f1      	b.n	8007574 <HAL_PWREx_ControlVoltageScaling+0x30>
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8007590:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007594:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007598:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800759a:	4821      	ldr	r0, [pc, #132]	@ (8007620 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 800759c:	4921      	ldr	r1, [pc, #132]	@ (8007624 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800759e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075a6:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075a8:	6803      	ldr	r3, [r0, #0]
 80075aa:	2032      	movs	r0, #50	@ 0x32
 80075ac:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075b0:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075b2:	fba1 1303 	umull	r1, r3, r1, r3
 80075b6:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075b8:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075ba:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075be:	d506      	bpl.n	80075ce <HAL_PWREx_ControlVoltageScaling+0x8a>
 80075c0:	e000      	b.n	80075c4 <HAL_PWREx_ControlVoltageScaling+0x80>
 80075c2:	b123      	cbz	r3, 80075ce <HAL_PWREx_ControlVoltageScaling+0x8a>
 80075c4:	6951      	ldr	r1, [r2, #20]
 80075c6:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 80075c8:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075cc:	d4f9      	bmi.n	80075c2 <HAL_PWREx_ControlVoltageScaling+0x7e>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80075ce:	4b13      	ldr	r3, [pc, #76]	@ (800761c <HAL_PWREx_ControlVoltageScaling+0xd8>)
 80075d0:	695b      	ldr	r3, [r3, #20]
 80075d2:	055b      	lsls	r3, r3, #21
 80075d4:	d5ce      	bpl.n	8007574 <HAL_PWREx_ControlVoltageScaling+0x30>
        return HAL_TIMEOUT;
 80075d6:	2003      	movs	r0, #3
 80075d8:	4770      	bx	lr
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80075da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075de:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e2:	6813      	ldr	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075e4:	480e      	ldr	r0, [pc, #56]	@ (8007620 <HAL_PWREx_ControlVoltageScaling+0xdc>)
 80075e6:	490f      	ldr	r1, [pc, #60]	@ (8007624 <HAL_PWREx_ControlVoltageScaling+0xe0>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80075e8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80075ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80075f0:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075f2:	6803      	ldr	r3, [r0, #0]
 80075f4:	2032      	movs	r0, #50	@ 0x32
 80075f6:	fb00 f303 	mul.w	r3, r0, r3
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80075fa:	6950      	ldr	r0, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075fc:	fba1 1303 	umull	r1, r3, r1, r3
 8007600:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007602:	0540      	lsls	r0, r0, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007604:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007608:	d5e1      	bpl.n	80075ce <HAL_PWREx_ControlVoltageScaling+0x8a>
 800760a:	e001      	b.n	8007610 <HAL_PWREx_ControlVoltageScaling+0xcc>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d0de      	beq.n	80075ce <HAL_PWREx_ControlVoltageScaling+0x8a>
 8007610:	6951      	ldr	r1, [r2, #20]
 8007612:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8007614:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007618:	d5d9      	bpl.n	80075ce <HAL_PWREx_ControlVoltageScaling+0x8a>
 800761a:	e7f7      	b.n	800760c <HAL_PWREx_ControlVoltageScaling+0xc8>
 800761c:	40007000 	.word	0x40007000
 8007620:	200004ec 	.word	0x200004ec
 8007624:	431bde83 	.word	0x431bde83

08007628 <HAL_PWREx_DisableUCPDDeadBattery>:
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8007628:	4a02      	ldr	r2, [pc, #8]	@ (8007634 <HAL_PWREx_DisableUCPDDeadBattery+0xc>)
 800762a:	6893      	ldr	r3, [r2, #8]
 800762c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007630:	6093      	str	r3, [r2, #8]
}
 8007632:	4770      	bx	lr
 8007634:	40007000 	.word	0x40007000

08007638 <HAL_RCC_OscConfig>:
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007638:	2800      	cmp	r0, #0
 800763a:	f000 81bd 	beq.w	80079b8 <HAL_RCC_OscConfig+0x380>
{
 800763e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007642:	6803      	ldr	r3, [r0, #0]
 8007644:	07d9      	lsls	r1, r3, #31
{
 8007646:	b082      	sub	sp, #8
 8007648:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800764a:	d512      	bpl.n	8007672 <HAL_RCC_OscConfig+0x3a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800764c:	49a6      	ldr	r1, [pc, #664]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 800764e:	688a      	ldr	r2, [r1, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007650:	68c9      	ldr	r1, [r1, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007652:	f002 020c 	and.w	r2, r2, #12

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007656:	2a0c      	cmp	r2, #12
 8007658:	f000 80d0 	beq.w	80077fc <HAL_RCC_OscConfig+0x1c4>
 800765c:	2a08      	cmp	r2, #8
 800765e:	f040 80d2 	bne.w	8007806 <HAL_RCC_OscConfig+0x1ce>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007662:	4aa1      	ldr	r2, [pc, #644]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 8007664:	6812      	ldr	r2, [r2, #0]
 8007666:	0392      	lsls	r2, r2, #14
 8007668:	d503      	bpl.n	8007672 <HAL_RCC_OscConfig+0x3a>
 800766a:	6862      	ldr	r2, [r4, #4]
 800766c:	2a00      	cmp	r2, #0
 800766e:	f000 8137 	beq.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007672:	079a      	lsls	r2, r3, #30
 8007674:	d522      	bpl.n	80076bc <HAL_RCC_OscConfig+0x84>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007676:	4a9c      	ldr	r2, [pc, #624]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 8007678:	6893      	ldr	r3, [r2, #8]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800767a:	68d2      	ldr	r2, [r2, #12]
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800767c:	f003 030c 	and.w	r3, r3, #12
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8007680:	2b0c      	cmp	r3, #12
 8007682:	f000 80f8 	beq.w	8007876 <HAL_RCC_OscConfig+0x23e>
 8007686:	2b04      	cmp	r3, #4
 8007688:	f040 80fa 	bne.w	8007880 <HAL_RCC_OscConfig+0x248>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800768c:	4b96      	ldr	r3, [pc, #600]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	055b      	lsls	r3, r3, #21
 8007692:	d503      	bpl.n	800769c <HAL_RCC_OscConfig+0x64>
 8007694:	68e3      	ldr	r3, [r4, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8122 	beq.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800769c:	4a92      	ldr	r2, [pc, #584]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 800769e:	6920      	ldr	r0, [r4, #16]
 80076a0:	6853      	ldr	r3, [r2, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80076a2:	4992      	ldr	r1, [pc, #584]	@ (80078ec <HAL_RCC_OscConfig+0x2b4>)
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80076a4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80076a8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80076ac:	6053      	str	r3, [r2, #4]
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80076ae:	6808      	ldr	r0, [r1, #0]
 80076b0:	f7fd fe08 	bl	80052c4 <HAL_InitTick>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	f040 8113 	bne.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	071a      	lsls	r2, r3, #28
 80076be:	d519      	bpl.n	80076f4 <HAL_RCC_OscConfig+0xbc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076c0:	6963      	ldr	r3, [r4, #20]
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80076c2:	4d89      	ldr	r5, [pc, #548]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 80c2 	beq.w	800784e <HAL_RCC_OscConfig+0x216>
      __HAL_RCC_LSI_ENABLE();
 80076ca:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80076ce:	f043 0301 	orr.w	r3, r3, #1
 80076d2:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80076d6:	f7fd fe3f 	bl	8005358 <HAL_GetTick>
 80076da:	4606      	mov	r6, r0

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076dc:	e005      	b.n	80076ea <HAL_RCC_OscConfig+0xb2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80076de:	f7fd fe3b 	bl	8005358 <HAL_GetTick>
 80076e2:	1b80      	subs	r0, r0, r6
 80076e4:	2802      	cmp	r0, #2
 80076e6:	f200 8117 	bhi.w	8007918 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80076ea:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 80076ee:	079b      	lsls	r3, r3, #30
 80076f0:	d5f5      	bpl.n	80076de <HAL_RCC_OscConfig+0xa6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	075d      	lsls	r5, r3, #29
 80076f6:	d541      	bpl.n	800777c <HAL_RCC_OscConfig+0x144>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80076f8:	4b7b      	ldr	r3, [pc, #492]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 80076fa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80076fc:	00d0      	lsls	r0, r2, #3
 80076fe:	f100 810f 	bmi.w	8007920 <HAL_RCC_OscConfig+0x2e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007702:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007704:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007708:	659a      	str	r2, [r3, #88]	@ 0x58
 800770a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800770c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007710:	9301      	str	r3, [sp, #4]
 8007712:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007714:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007716:	4e76      	ldr	r6, [pc, #472]	@ (80078f0 <HAL_RCC_OscConfig+0x2b8>)
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	05d9      	lsls	r1, r3, #23
 800771c:	f140 812e 	bpl.w	800797c <HAL_RCC_OscConfig+0x344>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007720:	68a3      	ldr	r3, [r4, #8]
 8007722:	2b01      	cmp	r3, #1
 8007724:	f000 80fe 	beq.w	8007924 <HAL_RCC_OscConfig+0x2ec>
 8007728:	2b05      	cmp	r3, #5
 800772a:	f000 8184 	beq.w	8007a36 <HAL_RCC_OscConfig+0x3fe>
 800772e:	4e6e      	ldr	r6, [pc, #440]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 8007730:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007734:	f022 0201 	bic.w	r2, r2, #1
 8007738:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90
 800773c:	f8d6 2090 	ldr.w	r2, [r6, #144]	@ 0x90
 8007740:	f022 0204 	bic.w	r2, r2, #4
 8007744:	f8c6 2090 	str.w	r2, [r6, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007748:	2b00      	cmp	r3, #0
 800774a:	f040 80f2 	bne.w	8007932 <HAL_RCC_OscConfig+0x2fa>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800774e:	f7fd fe03 	bl	8005358 <HAL_GetTick>

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007752:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8007756:	4607      	mov	r7, r0
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007758:	e005      	b.n	8007766 <HAL_RCC_OscConfig+0x12e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800775a:	f7fd fdfd 	bl	8005358 <HAL_GetTick>
 800775e:	1bc0      	subs	r0, r0, r7
 8007760:	4540      	cmp	r0, r8
 8007762:	f200 80d9 	bhi.w	8007918 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007766:	f8d6 3090 	ldr.w	r3, [r6, #144]	@ 0x90
 800776a:	0799      	lsls	r1, r3, #30
 800776c:	d4f5      	bmi.n	800775a <HAL_RCC_OscConfig+0x122>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800776e:	b125      	cbz	r5, 800777a <HAL_RCC_OscConfig+0x142>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007770:	4a5d      	ldr	r2, [pc, #372]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 8007772:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007778:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	069a      	lsls	r2, r3, #26
 800777e:	d518      	bpl.n	80077b2 <HAL_RCC_OscConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007780:	69a3      	ldr	r3, [r4, #24]
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007782:	4d59      	ldr	r5, [pc, #356]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007784:	2b00      	cmp	r3, #0
 8007786:	f000 80e5 	beq.w	8007954 <HAL_RCC_OscConfig+0x31c>
      __HAL_RCC_HSI48_ENABLE();
 800778a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800778e:	f043 0301 	orr.w	r3, r3, #1
 8007792:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007796:	f7fd fddf 	bl	8005358 <HAL_GetTick>
 800779a:	4606      	mov	r6, r0

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800779c:	e005      	b.n	80077aa <HAL_RCC_OscConfig+0x172>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800779e:	f7fd fddb 	bl	8005358 <HAL_GetTick>
 80077a2:	1b80      	subs	r0, r0, r6
 80077a4:	2802      	cmp	r0, #2
 80077a6:	f200 80b7 	bhi.w	8007918 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80077aa:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 80077ae:	079b      	lsls	r3, r3, #30
 80077b0:	d5f5      	bpl.n	800779e <HAL_RCC_OscConfig+0x166>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80077b2:	69e3      	ldr	r3, [r4, #28]
 80077b4:	b1f3      	cbz	r3, 80077f4 <HAL_RCC_OscConfig+0x1bc>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077b6:	4d4c      	ldr	r5, [pc, #304]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 80077b8:	68aa      	ldr	r2, [r5, #8]
 80077ba:	f002 020c 	and.w	r2, r2, #12
 80077be:	2a0c      	cmp	r2, #12
 80077c0:	f000 8147 	beq.w	8007a52 <HAL_RCC_OscConfig+0x41a>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077c4:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077c6:	682b      	ldr	r3, [r5, #0]
 80077c8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077cc:	602b      	str	r3, [r5, #0]
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80077ce:	f000 80f5 	beq.w	80079bc <HAL_RCC_OscConfig+0x384>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077d2:	f7fd fdc1 	bl	8005358 <HAL_GetTick>
 80077d6:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077d8:	e005      	b.n	80077e6 <HAL_RCC_OscConfig+0x1ae>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80077da:	f7fd fdbd 	bl	8005358 <HAL_GetTick>
 80077de:	1b00      	subs	r0, r0, r4
 80077e0:	2802      	cmp	r0, #2
 80077e2:	f200 8099 	bhi.w	8007918 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80077e6:	682b      	ldr	r3, [r5, #0]
 80077e8:	019b      	lsls	r3, r3, #6
 80077ea:	d4f6      	bmi.n	80077da <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80077ec:	68ea      	ldr	r2, [r5, #12]
 80077ee:	4b41      	ldr	r3, [pc, #260]	@ (80078f4 <HAL_RCC_OscConfig+0x2bc>)
 80077f0:	4013      	ands	r3, r2
 80077f2:	60eb      	str	r3, [r5, #12]
      }
    }
  }
  }

  return HAL_OK;
 80077f4:	2000      	movs	r0, #0
}
 80077f6:	b002      	add	sp, #8
 80077f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077fc:	f001 0103 	and.w	r1, r1, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8007800:	2903      	cmp	r1, #3
 8007802:	f43f af2e 	beq.w	8007662 <HAL_RCC_OscConfig+0x2a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007806:	6863      	ldr	r3, [r4, #4]
 8007808:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800780c:	d055      	beq.n	80078ba <HAL_RCC_OscConfig+0x282>
 800780e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007812:	f000 80c4 	beq.w	800799e <HAL_RCC_OscConfig+0x366>
 8007816:	4d34      	ldr	r5, [pc, #208]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 8007818:	682a      	ldr	r2, [r5, #0]
 800781a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800781e:	602a      	str	r2, [r5, #0]
 8007820:	682a      	ldr	r2, [r5, #0]
 8007822:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8007826:	602a      	str	r2, [r5, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007828:	2b00      	cmp	r3, #0
 800782a:	d14b      	bne.n	80078c4 <HAL_RCC_OscConfig+0x28c>
        tickstart = HAL_GetTick();
 800782c:	f7fd fd94 	bl	8005358 <HAL_GetTick>
 8007830:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007832:	e004      	b.n	800783e <HAL_RCC_OscConfig+0x206>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007834:	f7fd fd90 	bl	8005358 <HAL_GetTick>
 8007838:	1b80      	subs	r0, r0, r6
 800783a:	2864      	cmp	r0, #100	@ 0x64
 800783c:	d86c      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800783e:	682b      	ldr	r3, [r5, #0]
 8007840:	0399      	lsls	r1, r3, #14
 8007842:	d4f7      	bmi.n	8007834 <HAL_RCC_OscConfig+0x1fc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007844:	6823      	ldr	r3, [r4, #0]
 8007846:	079a      	lsls	r2, r3, #30
 8007848:	f57f af38 	bpl.w	80076bc <HAL_RCC_OscConfig+0x84>
 800784c:	e713      	b.n	8007676 <HAL_RCC_OscConfig+0x3e>
      __HAL_RCC_LSI_DISABLE();
 800784e:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007852:	f023 0301 	bic.w	r3, r3, #1
 8007856:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
      tickstart = HAL_GetTick();
 800785a:	f7fd fd7d 	bl	8005358 <HAL_GetTick>
 800785e:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007860:	e004      	b.n	800786c <HAL_RCC_OscConfig+0x234>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007862:	f7fd fd79 	bl	8005358 <HAL_GetTick>
 8007866:	1b80      	subs	r0, r0, r6
 8007868:	2802      	cmp	r0, #2
 800786a:	d855      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800786c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 8007870:	079f      	lsls	r7, r3, #30
 8007872:	d4f6      	bmi.n	8007862 <HAL_RCC_OscConfig+0x22a>
 8007874:	e73d      	b.n	80076f2 <HAL_RCC_OscConfig+0xba>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007876:	f002 0203 	and.w	r2, r2, #3
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800787a:	2a02      	cmp	r2, #2
 800787c:	f43f af06 	beq.w	800768c <HAL_RCC_OscConfig+0x54>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007880:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8007882:	4d19      	ldr	r5, [pc, #100]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007884:	2b00      	cmp	r3, #0
 8007886:	d037      	beq.n	80078f8 <HAL_RCC_OscConfig+0x2c0>
        __HAL_RCC_HSI_ENABLE();
 8007888:	682b      	ldr	r3, [r5, #0]
 800788a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800788e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007890:	f7fd fd62 	bl	8005358 <HAL_GetTick>
 8007894:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007896:	e004      	b.n	80078a2 <HAL_RCC_OscConfig+0x26a>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007898:	f7fd fd5e 	bl	8005358 <HAL_GetTick>
 800789c:	1b80      	subs	r0, r0, r6
 800789e:	2802      	cmp	r0, #2
 80078a0:	d83a      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80078a2:	682b      	ldr	r3, [r5, #0]
 80078a4:	055f      	lsls	r7, r3, #21
 80078a6:	d5f7      	bpl.n	8007898 <HAL_RCC_OscConfig+0x260>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078a8:	686b      	ldr	r3, [r5, #4]
 80078aa:	6922      	ldr	r2, [r4, #16]
 80078ac:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80078b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80078b4:	606b      	str	r3, [r5, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078b6:	6823      	ldr	r3, [r4, #0]
 80078b8:	e700      	b.n	80076bc <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80078ba:	4a0b      	ldr	r2, [pc, #44]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
 80078bc:	6813      	ldr	r3, [r2, #0]
 80078be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078c2:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80078c4:	f7fd fd48 	bl	8005358 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078c8:	4e07      	ldr	r6, [pc, #28]	@ (80078e8 <HAL_RCC_OscConfig+0x2b0>)
        tickstart = HAL_GetTick();
 80078ca:	4605      	mov	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078cc:	e004      	b.n	80078d8 <HAL_RCC_OscConfig+0x2a0>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078ce:	f7fd fd43 	bl	8005358 <HAL_GetTick>
 80078d2:	1b40      	subs	r0, r0, r5
 80078d4:	2864      	cmp	r0, #100	@ 0x64
 80078d6:	d81f      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078d8:	6833      	ldr	r3, [r6, #0]
 80078da:	039f      	lsls	r7, r3, #14
 80078dc:	d5f7      	bpl.n	80078ce <HAL_RCC_OscConfig+0x296>
 80078de:	e7b1      	b.n	8007844 <HAL_RCC_OscConfig+0x20c>
    return HAL_ERROR;
 80078e0:	2001      	movs	r0, #1
}
 80078e2:	b002      	add	sp, #8
 80078e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e8:	40021000 	.word	0x40021000
 80078ec:	200004f4 	.word	0x200004f4
 80078f0:	40007000 	.word	0x40007000
 80078f4:	feeefffc 	.word	0xfeeefffc
        __HAL_RCC_HSI_DISABLE();
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80078fe:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8007900:	f7fd fd2a 	bl	8005358 <HAL_GetTick>
 8007904:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007906:	682b      	ldr	r3, [r5, #0]
 8007908:	0559      	lsls	r1, r3, #21
 800790a:	f57f aed6 	bpl.w	80076ba <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800790e:	f7fd fd23 	bl	8005358 <HAL_GetTick>
 8007912:	1b80      	subs	r0, r0, r6
 8007914:	2802      	cmp	r0, #2
 8007916:	d9f6      	bls.n	8007906 <HAL_RCC_OscConfig+0x2ce>
            return HAL_TIMEOUT;
 8007918:	2003      	movs	r0, #3
}
 800791a:	b002      	add	sp, #8
 800791c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    FlagStatus       pwrclkchanged = RESET;
 8007920:	2500      	movs	r5, #0
 8007922:	e6f8      	b.n	8007716 <HAL_RCC_OscConfig+0xde>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007924:	4a65      	ldr	r2, [pc, #404]	@ (8007abc <HAL_RCC_OscConfig+0x484>)
 8007926:	f8d2 3090 	ldr.w	r3, [r2, #144]	@ 0x90
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      tickstart = HAL_GetTick();
 8007932:	f7fd fd11 	bl	8005358 <HAL_GetTick>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007936:	4f61      	ldr	r7, [pc, #388]	@ (8007abc <HAL_RCC_OscConfig+0x484>)
      tickstart = HAL_GetTick();
 8007938:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800793a:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800793e:	e004      	b.n	800794a <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007940:	f7fd fd0a 	bl	8005358 <HAL_GetTick>
 8007944:	1b80      	subs	r0, r0, r6
 8007946:	4540      	cmp	r0, r8
 8007948:	d8e6      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800794a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800794e:	079b      	lsls	r3, r3, #30
 8007950:	d5f6      	bpl.n	8007940 <HAL_RCC_OscConfig+0x308>
 8007952:	e70c      	b.n	800776e <HAL_RCC_OscConfig+0x136>
      __HAL_RCC_HSI48_DISABLE();
 8007954:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007958:	f023 0301 	bic.w	r3, r3, #1
 800795c:	f8c5 3098 	str.w	r3, [r5, #152]	@ 0x98
      tickstart = HAL_GetTick();
 8007960:	f7fd fcfa 	bl	8005358 <HAL_GetTick>
 8007964:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007966:	e004      	b.n	8007972 <HAL_RCC_OscConfig+0x33a>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007968:	f7fd fcf6 	bl	8005358 <HAL_GetTick>
 800796c:	1b80      	subs	r0, r0, r6
 800796e:	2802      	cmp	r0, #2
 8007970:	d8d2      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007972:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 8007976:	079f      	lsls	r7, r3, #30
 8007978:	d4f6      	bmi.n	8007968 <HAL_RCC_OscConfig+0x330>
 800797a:	e71a      	b.n	80077b2 <HAL_RCC_OscConfig+0x17a>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800797c:	6833      	ldr	r3, [r6, #0]
 800797e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007982:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007984:	f7fd fce8 	bl	8005358 <HAL_GetTick>
 8007988:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800798a:	6833      	ldr	r3, [r6, #0]
 800798c:	05da      	lsls	r2, r3, #23
 800798e:	f53f aec7 	bmi.w	8007720 <HAL_RCC_OscConfig+0xe8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007992:	f7fd fce1 	bl	8005358 <HAL_GetTick>
 8007996:	1bc0      	subs	r0, r0, r7
 8007998:	2802      	cmp	r0, #2
 800799a:	d9f6      	bls.n	800798a <HAL_RCC_OscConfig+0x352>
 800799c:	e7bc      	b.n	8007918 <HAL_RCC_OscConfig+0x2e0>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800799e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80079a2:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80079ac:	601a      	str	r2, [r3, #0]
 80079ae:	681a      	ldr	r2, [r3, #0]
 80079b0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80079b4:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80079b6:	e785      	b.n	80078c4 <HAL_RCC_OscConfig+0x28c>
    return HAL_ERROR;
 80079b8:	2001      	movs	r0, #1
}
 80079ba:	4770      	bx	lr
        tickstart = HAL_GetTick();
 80079bc:	f7fd fccc 	bl	8005358 <HAL_GetTick>
 80079c0:	4606      	mov	r6, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079c2:	e004      	b.n	80079ce <HAL_RCC_OscConfig+0x396>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80079c4:	f7fd fcc8 	bl	8005358 <HAL_GetTick>
 80079c8:	1b80      	subs	r0, r0, r6
 80079ca:	2802      	cmp	r0, #2
 80079cc:	d8a4      	bhi.n	8007918 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80079ce:	682b      	ldr	r3, [r5, #0]
 80079d0:	0199      	lsls	r1, r3, #6
 80079d2:	d4f7      	bmi.n	80079c4 <HAL_RCC_OscConfig+0x38c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80079d4:	68e9      	ldr	r1, [r5, #12]
 80079d6:	4b3a      	ldr	r3, [pc, #232]	@ (8007ac0 <HAL_RCC_OscConfig+0x488>)
 80079d8:	6a22      	ldr	r2, [r4, #32]
 80079da:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80079dc:	400b      	ands	r3, r1
 80079de:	4313      	orrs	r3, r2
 80079e0:	e9d4 120a 	ldrd	r1, r2, [r4, #40]	@ 0x28
 80079e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80079e8:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80079ec:	e9d4 120c 	ldrd	r1, r2, [r4, #48]	@ 0x30
 80079f0:	3801      	subs	r0, #1
 80079f2:	0849      	lsrs	r1, r1, #1
 80079f4:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
 80079f8:	3901      	subs	r1, #1
 80079fa:	0852      	lsrs	r2, r2, #1
 80079fc:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 8007a00:	3a01      	subs	r2, #1
 8007a02:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8007a06:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8007a08:	682b      	ldr	r3, [r5, #0]
 8007a0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a0e:	602b      	str	r3, [r5, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007a10:	68eb      	ldr	r3, [r5, #12]
 8007a12:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007a16:	60eb      	str	r3, [r5, #12]
        tickstart = HAL_GetTick();
 8007a18:	f7fd fc9e 	bl	8005358 <HAL_GetTick>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a1c:	4d27      	ldr	r5, [pc, #156]	@ (8007abc <HAL_RCC_OscConfig+0x484>)
        tickstart = HAL_GetTick();
 8007a1e:	4604      	mov	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a20:	e005      	b.n	8007a2e <HAL_RCC_OscConfig+0x3f6>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a22:	f7fd fc99 	bl	8005358 <HAL_GetTick>
 8007a26:	1b00      	subs	r0, r0, r4
 8007a28:	2802      	cmp	r0, #2
 8007a2a:	f63f af75 	bhi.w	8007918 <HAL_RCC_OscConfig+0x2e0>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007a2e:	682b      	ldr	r3, [r5, #0]
 8007a30:	019a      	lsls	r2, r3, #6
 8007a32:	d5f6      	bpl.n	8007a22 <HAL_RCC_OscConfig+0x3ea>
 8007a34:	e6de      	b.n	80077f4 <HAL_RCC_OscConfig+0x1bc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a36:	4b21      	ldr	r3, [pc, #132]	@ (8007abc <HAL_RCC_OscConfig+0x484>)
 8007a38:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007a3c:	f042 0204 	orr.w	r2, r2, #4
 8007a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 8007a44:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8007a48:	f042 0201 	orr.w	r2, r2, #1
 8007a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007a50:	e76f      	b.n	8007932 <HAL_RCC_OscConfig+0x2fa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	f43f af44 	beq.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
      temp_pllckcfg = RCC->PLLCFGR;
 8007a58:	68eb      	ldr	r3, [r5, #12]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a5a:	6a22      	ldr	r2, [r4, #32]
 8007a5c:	f003 0103 	and.w	r1, r3, #3
 8007a60:	4291      	cmp	r1, r2
 8007a62:	f47f af3d 	bne.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a66:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8007a68:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007a6c:	3901      	subs	r1, #1
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6e:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8007a72:	f47f af35 	bne.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a76:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8007a78:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007a7c:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8007a80:	f47f af2e 	bne.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a84:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007a86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8007a8a:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8007a8e:	f47f af27 	bne.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007a92:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8007a94:	0852      	lsrs	r2, r2, #1
 8007a96:	f403 01c0 	and.w	r1, r3, #6291456	@ 0x600000
 8007a9a:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007a9c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8007aa0:	f47f af1e 	bne.w	80078e0 <HAL_RCC_OscConfig+0x2a8>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007aa4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8007aa6:	0852      	lsrs	r2, r2, #1
 8007aa8:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
 8007aac:	3a01      	subs	r2, #1
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007aae:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8007ab2:	bf14      	ite	ne
 8007ab4:	2001      	movne	r0, #1
 8007ab6:	2000      	moveq	r0, #0
 8007ab8:	e69d      	b.n	80077f6 <HAL_RCC_OscConfig+0x1be>
 8007aba:	bf00      	nop
 8007abc:	40021000 	.word	0x40021000
 8007ac0:	019f800c 	.word	0x019f800c

08007ac4 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8007ac4:	4b18      	ldr	r3, [pc, #96]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x64>)
 8007ac6:	689a      	ldr	r2, [r3, #8]
 8007ac8:	f002 020c 	and.w	r2, r2, #12
 8007acc:	2a04      	cmp	r2, #4
 8007ace:	d026      	beq.n	8007b1e <HAL_RCC_GetSysClockFreq+0x5a>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8007ad0:	689a      	ldr	r2, [r3, #8]
 8007ad2:	f002 020c 	and.w	r2, r2, #12
 8007ad6:	2a08      	cmp	r2, #8
 8007ad8:	d023      	beq.n	8007b22 <HAL_RCC_GetSysClockFreq+0x5e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8007ada:	689a      	ldr	r2, [r3, #8]
 8007adc:	f002 020c 	and.w	r2, r2, #12
 8007ae0:	2a0c      	cmp	r2, #12
 8007ae2:	d001      	beq.n	8007ae8 <HAL_RCC_GetSysClockFreq+0x24>
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
    sysclockfreq = pllvco/pllr;
  }
  else
  {
    sysclockfreq = 0U;
 8007ae4:	2000      	movs	r0, #0
  }

  return sysclockfreq;
}
 8007ae6:	4770      	bx	lr
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007ae8:	68d9      	ldr	r1, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007aea:	68da      	ldr	r2, [r3, #12]
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007aec:	68d8      	ldr	r0, [r3, #12]
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007aee:	f001 0103 	and.w	r1, r1, #3
    switch (pllsource)
 8007af2:	2903      	cmp	r1, #3
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007af4:	f3c2 1203 	ubfx	r2, r2, #4, #4
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007af8:	f3c0 2006 	ubfx	r0, r0, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007afc:	bf0c      	ite	eq
 8007afe:	4b0b      	ldreq	r3, [pc, #44]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0x68>)
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b00:	4b0b      	ldrne	r3, [pc, #44]	@ (8007b30 <HAL_RCC_GetSysClockFreq+0x6c>)
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007b02:	3201      	adds	r2, #1
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007b04:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b08:	fb03 f000 	mul.w	r0, r3, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007b0c:	4b06      	ldr	r3, [pc, #24]	@ (8007b28 <HAL_RCC_GetSysClockFreq+0x64>)
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8007b14:	3301      	adds	r3, #1
 8007b16:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8007b18:	fbb0 f0f3 	udiv	r0, r0, r3
  return sysclockfreq;
 8007b1c:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8007b1e:	4804      	ldr	r0, [pc, #16]	@ (8007b30 <HAL_RCC_GetSysClockFreq+0x6c>)
 8007b20:	4770      	bx	lr
    sysclockfreq = HSE_VALUE;
 8007b22:	4802      	ldr	r0, [pc, #8]	@ (8007b2c <HAL_RCC_GetSysClockFreq+0x68>)
 8007b24:	4770      	bx	lr
 8007b26:	bf00      	nop
 8007b28:	40021000 	.word	0x40021000
 8007b2c:	007a1200 	.word	0x007a1200
 8007b30:	00f42400 	.word	0x00f42400

08007b34 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8007b34:	2800      	cmp	r0, #0
 8007b36:	f000 80ee 	beq.w	8007d16 <HAL_RCC_ClockConfig+0x1e2>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b3a:	4a78      	ldr	r2, [pc, #480]	@ (8007d1c <HAL_RCC_ClockConfig+0x1e8>)
{
 8007b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007b40:	6813      	ldr	r3, [r2, #0]
 8007b42:	f003 030f 	and.w	r3, r3, #15
 8007b46:	428b      	cmp	r3, r1
 8007b48:	460d      	mov	r5, r1
 8007b4a:	4604      	mov	r4, r0
 8007b4c:	d20c      	bcs.n	8007b68 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b4e:	6813      	ldr	r3, [r2, #0]
 8007b50:	f023 030f 	bic.w	r3, r3, #15
 8007b54:	430b      	orrs	r3, r1
 8007b56:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b58:	6813      	ldr	r3, [r2, #0]
 8007b5a:	f003 030f 	and.w	r3, r3, #15
 8007b5e:	428b      	cmp	r3, r1
 8007b60:	d002      	beq.n	8007b68 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007b62:	2001      	movs	r0, #1
}
 8007b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b68:	6823      	ldr	r3, [r4, #0]
 8007b6a:	07df      	lsls	r7, r3, #31
 8007b6c:	d569      	bpl.n	8007c42 <HAL_RCC_ClockConfig+0x10e>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b6e:	6867      	ldr	r7, [r4, #4]
 8007b70:	2f03      	cmp	r7, #3
 8007b72:	f000 80a0 	beq.w	8007cb6 <HAL_RCC_ClockConfig+0x182>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b76:	4b6a      	ldr	r3, [pc, #424]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b78:	2f02      	cmp	r7, #2
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b7a:	681b      	ldr	r3, [r3, #0]
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b7c:	f000 8097 	beq.w	8007cae <HAL_RCC_ClockConfig+0x17a>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b80:	055b      	lsls	r3, r3, #21
 8007b82:	d5ee      	bpl.n	8007b62 <HAL_RCC_ClockConfig+0x2e>
      pllfreq = HAL_RCC_GetSysClockFreq();
 8007b84:	f7ff ff9e 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
      if(pllfreq > 80000000U)
 8007b88:	4b66      	ldr	r3, [pc, #408]	@ (8007d24 <HAL_RCC_ClockConfig+0x1f0>)
 8007b8a:	4298      	cmp	r0, r3
 8007b8c:	f240 80c0 	bls.w	8007d10 <HAL_RCC_ClockConfig+0x1dc>
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8007b90:	4a63      	ldr	r2, [pc, #396]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007b92:	6893      	ldr	r3, [r2, #8]
 8007b94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b98:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8007b9e:	f04f 0980 	mov.w	r9, #128	@ 0x80
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007ba2:	4e5f      	ldr	r6, [pc, #380]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007ba4:	68b3      	ldr	r3, [r6, #8]
 8007ba6:	f023 0303 	bic.w	r3, r3, #3
 8007baa:	433b      	orrs	r3, r7
 8007bac:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007bae:	f7fd fbd3 	bl	8005358 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bb2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8007bb6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bb8:	e004      	b.n	8007bc4 <HAL_RCC_ClockConfig+0x90>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bba:	f7fd fbcd 	bl	8005358 <HAL_GetTick>
 8007bbe:	1bc0      	subs	r0, r0, r7
 8007bc0:	4540      	cmp	r0, r8
 8007bc2:	d871      	bhi.n	8007ca8 <HAL_RCC_ClockConfig+0x174>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bc4:	68b3      	ldr	r3, [r6, #8]
 8007bc6:	6862      	ldr	r2, [r4, #4]
 8007bc8:	f003 030c 	and.w	r3, r3, #12
 8007bcc:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007bd0:	d1f3      	bne.n	8007bba <HAL_RCC_ClockConfig+0x86>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bd2:	6823      	ldr	r3, [r4, #0]
 8007bd4:	079f      	lsls	r7, r3, #30
 8007bd6:	d436      	bmi.n	8007c46 <HAL_RCC_ClockConfig+0x112>
    if(hpre == RCC_SYSCLK_DIV2)
 8007bd8:	f1b9 0f00 	cmp.w	r9, #0
 8007bdc:	d003      	beq.n	8007be6 <HAL_RCC_ClockConfig+0xb2>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8007bde:	68b3      	ldr	r3, [r6, #8]
 8007be0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007be4:	60b3      	str	r3, [r6, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007be6:	4e4d      	ldr	r6, [pc, #308]	@ (8007d1c <HAL_RCC_ClockConfig+0x1e8>)
 8007be8:	6833      	ldr	r3, [r6, #0]
 8007bea:	f003 030f 	and.w	r3, r3, #15
 8007bee:	42ab      	cmp	r3, r5
 8007bf0:	d846      	bhi.n	8007c80 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	075a      	lsls	r2, r3, #29
 8007bf6:	d506      	bpl.n	8007c06 <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007bf8:	4949      	ldr	r1, [pc, #292]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007bfa:	68e0      	ldr	r0, [r4, #12]
 8007bfc:	688a      	ldr	r2, [r1, #8]
 8007bfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8007c02:	4302      	orrs	r2, r0
 8007c04:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c06:	071b      	lsls	r3, r3, #28
 8007c08:	d507      	bpl.n	8007c1a <HAL_RCC_ClockConfig+0xe6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c0a:	4a45      	ldr	r2, [pc, #276]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007c0c:	6921      	ldr	r1, [r4, #16]
 8007c0e:	6893      	ldr	r3, [r2, #8]
 8007c10:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8007c14:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007c18:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c1a:	f7ff ff53 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
 8007c1e:	4a40      	ldr	r2, [pc, #256]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007c20:	4c41      	ldr	r4, [pc, #260]	@ (8007d28 <HAL_RCC_ClockConfig+0x1f4>)
 8007c22:	6892      	ldr	r2, [r2, #8]
 8007c24:	4941      	ldr	r1, [pc, #260]	@ (8007d2c <HAL_RCC_ClockConfig+0x1f8>)
 8007c26:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	5ca2      	ldrb	r2, [r4, r2]
  return HAL_InitTick(uwTickPrio);
 8007c2e:	4840      	ldr	r0, [pc, #256]	@ (8007d30 <HAL_RCC_ClockConfig+0x1fc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007c30:	f002 021f 	and.w	r2, r2, #31
 8007c34:	40d3      	lsrs	r3, r2
 8007c36:	600b      	str	r3, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8007c38:	6800      	ldr	r0, [r0, #0]
}
 8007c3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  return HAL_InitTick(uwTickPrio);
 8007c3e:	f7fd bb41 	b.w	80052c4 <HAL_InitTick>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c42:	079e      	lsls	r6, r3, #30
 8007c44:	d5cf      	bpl.n	8007be6 <HAL_RCC_ClockConfig+0xb2>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c46:	0758      	lsls	r0, r3, #29
 8007c48:	d504      	bpl.n	8007c54 <HAL_RCC_ClockConfig+0x120>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c4a:	4935      	ldr	r1, [pc, #212]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007c4c:	688a      	ldr	r2, [r1, #8]
 8007c4e:	f442 62e0 	orr.w	r2, r2, #1792	@ 0x700
 8007c52:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c54:	0719      	lsls	r1, r3, #28
 8007c56:	d506      	bpl.n	8007c66 <HAL_RCC_ClockConfig+0x132>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8007c58:	4a31      	ldr	r2, [pc, #196]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007c5a:	6893      	ldr	r3, [r2, #8]
 8007c5c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8007c60:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8007c64:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c66:	4a2e      	ldr	r2, [pc, #184]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007c68:	68a1      	ldr	r1, [r4, #8]
 8007c6a:	6893      	ldr	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c6c:	4e2b      	ldr	r6, [pc, #172]	@ (8007d1c <HAL_RCC_ClockConfig+0x1e8>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007c72:	430b      	orrs	r3, r1
 8007c74:	6093      	str	r3, [r2, #8]
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007c76:	6833      	ldr	r3, [r6, #0]
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	42ab      	cmp	r3, r5
 8007c7e:	d9b8      	bls.n	8007bf2 <HAL_RCC_ClockConfig+0xbe>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c80:	6833      	ldr	r3, [r6, #0]
 8007c82:	f023 030f 	bic.w	r3, r3, #15
 8007c86:	432b      	orrs	r3, r5
 8007c88:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8007c8a:	f7fd fb65 	bl	8005358 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c8e:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 8007c92:	4607      	mov	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c94:	6833      	ldr	r3, [r6, #0]
 8007c96:	f003 030f 	and.w	r3, r3, #15
 8007c9a:	42ab      	cmp	r3, r5
 8007c9c:	d0a9      	beq.n	8007bf2 <HAL_RCC_ClockConfig+0xbe>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c9e:	f7fd fb5b 	bl	8005358 <HAL_GetTick>
 8007ca2:	1bc0      	subs	r0, r0, r7
 8007ca4:	4540      	cmp	r0, r8
 8007ca6:	d9f5      	bls.n	8007c94 <HAL_RCC_ClockConfig+0x160>
        return HAL_TIMEOUT;
 8007ca8:	2003      	movs	r0, #3
}
 8007caa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007cae:	039a      	lsls	r2, r3, #14
 8007cb0:	f53f af68 	bmi.w	8007b84 <HAL_RCC_ClockConfig+0x50>
 8007cb4:	e755      	b.n	8007b62 <HAL_RCC_ClockConfig+0x2e>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007cb6:	4a1a      	ldr	r2, [pc, #104]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
 8007cb8:	6811      	ldr	r1, [r2, #0]
 8007cba:	0188      	lsls	r0, r1, #6
 8007cbc:	f57f af51 	bpl.w	8007b62 <HAL_RCC_ClockConfig+0x2e>
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cc0:	68d0      	ldr	r0, [r2, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cc2:	68d1      	ldr	r1, [r2, #12]
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
    break;

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cc4:	68d2      	ldr	r2, [r2, #12]
      if(pllfreq > 80000000U)
 8007cc6:	4e17      	ldr	r6, [pc, #92]	@ (8007d24 <HAL_RCC_ClockConfig+0x1f0>)
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007cc8:	f000 0003 	and.w	r0, r0, #3
  switch (pllsource)
 8007ccc:	2803      	cmp	r0, #3
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cce:	f3c1 1103 	ubfx	r1, r1, #4, #4
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cd2:	bf0c      	ite	eq
 8007cd4:	4817      	ldreq	r0, [pc, #92]	@ (8007d34 <HAL_RCC_ClockConfig+0x200>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cd6:	4818      	ldrne	r0, [pc, #96]	@ (8007d38 <HAL_RCC_ClockConfig+0x204>)
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007cd8:	3101      	adds	r1, #1
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007cda:	fbb0 f1f1 	udiv	r1, r0, r1
    break;
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007cde:	4810      	ldr	r0, [pc, #64]	@ (8007d20 <HAL_RCC_ClockConfig+0x1ec>)
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8007ce0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8007ce4:	fb01 f202 	mul.w	r2, r1, r2
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007ce8:	68c1      	ldr	r1, [r0, #12]
 8007cea:	f3c1 6141 	ubfx	r1, r1, #25, #2
 8007cee:	3101      	adds	r1, #1
 8007cf0:	0049      	lsls	r1, r1, #1
  sysclockfreq = pllvco/pllr;
 8007cf2:	fbb2 f2f1 	udiv	r2, r2, r1
      if(pllfreq > 80000000U)
 8007cf6:	42b2      	cmp	r2, r6
 8007cf8:	d90a      	bls.n	8007d10 <HAL_RCC_ClockConfig+0x1dc>
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8007cfa:	6882      	ldr	r2, [r0, #8]
 8007cfc:	f012 0ff0 	tst.w	r2, #240	@ 0xf0
 8007d00:	f43f af46 	beq.w	8007b90 <HAL_RCC_ClockConfig+0x5c>
 8007d04:	0799      	lsls	r1, r3, #30
 8007d06:	d503      	bpl.n	8007d10 <HAL_RCC_ClockConfig+0x1dc>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8007d08:	68a3      	ldr	r3, [r4, #8]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f43f af40 	beq.w	8007b90 <HAL_RCC_ClockConfig+0x5c>
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8007d10:	f04f 0900 	mov.w	r9, #0
 8007d14:	e745      	b.n	8007ba2 <HAL_RCC_ClockConfig+0x6e>
    return HAL_ERROR;
 8007d16:	2001      	movs	r0, #1
}
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	40022000 	.word	0x40022000
 8007d20:	40021000 	.word	0x40021000
 8007d24:	04c4b400 	.word	0x04c4b400
 8007d28:	0800c0ac 	.word	0x0800c0ac
 8007d2c:	200004ec 	.word	0x200004ec
 8007d30:	200004f4 	.word	0x200004f4
 8007d34:	007a1200 	.word	0x007a1200
 8007d38:	00f42400 	.word	0x00f42400

08007d3c <HAL_RCC_GetHCLKFreq>:
  return SystemCoreClock;
 8007d3c:	4b01      	ldr	r3, [pc, #4]	@ (8007d44 <HAL_RCC_GetHCLKFreq+0x8>)
}
 8007d3e:	6818      	ldr	r0, [r3, #0]
 8007d40:	4770      	bx	lr
 8007d42:	bf00      	nop
 8007d44:	200004ec 	.word	0x200004ec

08007d48 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d48:	4b05      	ldr	r3, [pc, #20]	@ (8007d60 <HAL_RCC_GetPCLK1Freq+0x18>)
 8007d4a:	4a06      	ldr	r2, [pc, #24]	@ (8007d64 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007d4c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d4e:	4906      	ldr	r1, [pc, #24]	@ (8007d68 <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007d50:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8007d54:	6808      	ldr	r0, [r1, #0]
 8007d56:	5cd3      	ldrb	r3, [r2, r3]
 8007d58:	f003 031f 	and.w	r3, r3, #31
}
 8007d5c:	40d8      	lsrs	r0, r3
 8007d5e:	4770      	bx	lr
 8007d60:	40021000 	.word	0x40021000
 8007d64:	0800c0a4 	.word	0x0800c0a4
 8007d68:	200004ec 	.word	0x200004ec

08007d6c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d6c:	4b05      	ldr	r3, [pc, #20]	@ (8007d84 <HAL_RCC_GetPCLK2Freq+0x18>)
 8007d6e:	4a06      	ldr	r2, [pc, #24]	@ (8007d88 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007d70:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8007d72:	4906      	ldr	r1, [pc, #24]	@ (8007d8c <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007d74:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8007d78:	6808      	ldr	r0, [r1, #0]
 8007d7a:	5cd3      	ldrb	r3, [r2, r3]
 8007d7c:	f003 031f 	and.w	r3, r3, #31
}
 8007d80:	40d8      	lsrs	r0, r3
 8007d82:	4770      	bx	lr
 8007d84:	40021000 	.word	0x40021000
 8007d88:	0800c0a4 	.word	0x0800c0a4
 8007d8c:	200004ec 	.word	0x200004ec

08007d90 <HAL_RCC_EnableCSS>:
  SET_BIT(RCC->CR, RCC_CR_CSSON) ;
 8007d90:	4a02      	ldr	r2, [pc, #8]	@ (8007d9c <HAL_RCC_EnableCSS+0xc>)
 8007d92:	6813      	ldr	r3, [r2, #0]
 8007d94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007d98:	6013      	str	r3, [r2, #0]
}
 8007d9a:	4770      	bx	lr
 8007d9c:	40021000 	.word	0x40021000

08007da0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007da4:	6803      	ldr	r3, [r0, #0]
{
 8007da6:	4604      	mov	r4, r0
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007da8:	f413 2000 	ands.w	r0, r3, #524288	@ 0x80000
{
 8007dac:	b082      	sub	sp, #8
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007dae:	d041      	beq.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x94>
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007db0:	4ba0      	ldr	r3, [pc, #640]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007db2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007db4:	00d5      	lsls	r5, r2, #3
 8007db6:	f140 80f7 	bpl.w	8007fa8 <HAL_RCCEx_PeriphCLKConfig+0x208>
    FlagStatus       pwrclkchanged = RESET;
 8007dba:	2700      	movs	r7, #0
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007dbc:	4d9e      	ldr	r5, [pc, #632]	@ (8008038 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 8007dbe:	682b      	ldr	r3, [r5, #0]
 8007dc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dc4:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007dc6:	f7fd fac7 	bl	8005358 <HAL_GetTick>
 8007dca:	4606      	mov	r6, r0

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dcc:	e004      	b.n	8007dd8 <HAL_RCCEx_PeriphCLKConfig+0x38>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dce:	f7fd fac3 	bl	8005358 <HAL_GetTick>
 8007dd2:	1b83      	subs	r3, r0, r6
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	d828      	bhi.n	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007dd8:	682b      	ldr	r3, [r5, #0]
 8007dda:	05d8      	lsls	r0, r3, #23
 8007ddc:	d5f7      	bpl.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x2e>
    }

    if(ret == HAL_OK)
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007dde:	4d95      	ldr	r5, [pc, #596]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007de0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007de2:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007de6:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8007dea:	f000 8119 	beq.w	8008020 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8007dee:	4293      	cmp	r3, r2
 8007df0:	f000 8116 	beq.w	8008020 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007df4:	f8d5 1090 	ldr.w	r1, [r5, #144]	@ 0x90
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007df8:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007dfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007e00:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007e04:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 8007e08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007e0c:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007e10:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e14:	07c9      	lsls	r1, r1, #31
        RCC->BDCR = tmpregister;
 8007e16:	f8c5 3090 	str.w	r3, [r5, #144]	@ 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007e1a:	f140 8101 	bpl.w	8008020 <HAL_RCCEx_PeriphCLKConfig+0x280>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e1e:	f7fd fa9b 	bl	8005358 <HAL_GetTick>

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e22:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8007e26:	4606      	mov	r6, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007e28:	e0f5      	b.n	8008016 <HAL_RCCEx_PeriphCLKConfig+0x276>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007e2a:	2003      	movs	r0, #3
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e2c:	6823      	ldr	r3, [r4, #0]
    if(pwrclkchanged == SET)
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	f040 80c5 	bne.w	8007fbe <HAL_RCCEx_PeriphCLKConfig+0x21e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007e34:	07de      	lsls	r6, r3, #31
 8007e36:	d508      	bpl.n	8007e4a <HAL_RCCEx_PeriphCLKConfig+0xaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007e38:	497e      	ldr	r1, [pc, #504]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e3a:	6865      	ldr	r5, [r4, #4]
 8007e3c:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007e40:	f022 0203 	bic.w	r2, r2, #3
 8007e44:	432a      	orrs	r2, r5
 8007e46:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007e4a:	079d      	lsls	r5, r3, #30
 8007e4c:	d508      	bpl.n	8007e60 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007e4e:	4979      	ldr	r1, [pc, #484]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e50:	68a5      	ldr	r5, [r4, #8]
 8007e52:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007e56:	f022 020c 	bic.w	r2, r2, #12
 8007e5a:	432a      	orrs	r2, r5
 8007e5c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007e60:	0759      	lsls	r1, r3, #29
 8007e62:	d508      	bpl.n	8007e76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007e64:	4973      	ldr	r1, [pc, #460]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e66:	68e5      	ldr	r5, [r4, #12]
 8007e68:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007e6c:	f022 0230 	bic.w	r2, r2, #48	@ 0x30
 8007e70:	432a      	orrs	r2, r5
 8007e72:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007e76:	071a      	lsls	r2, r3, #28
 8007e78:	d508      	bpl.n	8007e8c <HAL_RCCEx_PeriphCLKConfig+0xec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007e7a:	496e      	ldr	r1, [pc, #440]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e7c:	6925      	ldr	r5, [r4, #16]
 8007e7e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007e82:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8007e86:	432a      	orrs	r2, r5
 8007e88:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007e8c:	069f      	lsls	r7, r3, #26
 8007e8e:	d508      	bpl.n	8007ea2 <HAL_RCCEx_PeriphCLKConfig+0x102>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007e90:	4968      	ldr	r1, [pc, #416]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007e92:	6965      	ldr	r5, [r4, #20]
 8007e94:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007e98:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8007e9c:	432a      	orrs	r2, r5
 8007e9e:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007ea2:	065e      	lsls	r6, r3, #25
 8007ea4:	d508      	bpl.n	8007eb8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007ea6:	4963      	ldr	r1, [pc, #396]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ea8:	69a5      	ldr	r5, [r4, #24]
 8007eaa:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007eae:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8007eb2:	432a      	orrs	r2, r5
 8007eb4:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007eb8:	061d      	lsls	r5, r3, #24
 8007eba:	d508      	bpl.n	8007ece <HAL_RCCEx_PeriphCLKConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007ebc:	495d      	ldr	r1, [pc, #372]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ebe:	69e5      	ldr	r5, [r4, #28]
 8007ec0:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007ec4:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8007ec8:	432a      	orrs	r2, r5
 8007eca:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007ece:	05d9      	lsls	r1, r3, #23
 8007ed0:	d508      	bpl.n	8007ee4 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007ed2:	4958      	ldr	r1, [pc, #352]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007ed4:	6a25      	ldr	r5, [r4, #32]
 8007ed6:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007eda:	f422 3240 	bic.w	r2, r2, #196608	@ 0x30000
 8007ede:	432a      	orrs	r2, r5
 8007ee0:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007ee4:	059a      	lsls	r2, r3, #22
 8007ee6:	d508      	bpl.n	8007efa <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007ee8:	4952      	ldr	r1, [pc, #328]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007eea:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8007eec:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007ef0:	f422 2240 	bic.w	r2, r2, #786432	@ 0xc0000
 8007ef4:	432a      	orrs	r2, r5
 8007ef6:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8007efa:	055f      	lsls	r7, r3, #21
 8007efc:	d50b      	bpl.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x176>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007efe:	494d      	ldr	r1, [pc, #308]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f00:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 8007f02:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007f06:	f422 1240 	bic.w	r2, r2, #3145728	@ 0x300000
 8007f0a:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007f0c:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007f10:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8007f14:	d059      	beq.n	8007fca <HAL_RCCEx_PeriphCLKConfig+0x22a>

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8007f16:	051e      	lsls	r6, r3, #20
 8007f18:	d50b      	bpl.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f1a:	4946      	ldr	r1, [pc, #280]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f1c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8007f1e:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007f22:	f422 0240 	bic.w	r2, r2, #12582912	@ 0xc00000
 8007f26:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f28:	f5b5 0f80 	cmp.w	r5, #4194304	@ 0x400000
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007f2c:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8007f30:	d050      	beq.n	8007fd4 <HAL_RCCEx_PeriphCLKConfig+0x234>

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007f32:	04dd      	lsls	r5, r3, #19
 8007f34:	d50b      	bpl.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f36:	493f      	ldr	r1, [pc, #252]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f38:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8007f3a:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007f3e:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8007f42:	432a      	orrs	r2, r5
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f44:	f1b5 7f80 	cmp.w	r5, #16777216	@ 0x1000000
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007f48:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8007f4c:	d047      	beq.n	8007fde <HAL_RCCEx_PeriphCLKConfig+0x23e>
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007f4e:	0499      	lsls	r1, r3, #18
 8007f50:	d50b      	bpl.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f52:	4938      	ldr	r1, [pc, #224]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f54:	6b65      	ldr	r5, [r4, #52]	@ 0x34
 8007f56:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007f5a:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007f5e:	432a      	orrs	r2, r5

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f60:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007f64:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007f68:	d03e      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x248>
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007f6a:	045a      	lsls	r2, r3, #17
 8007f6c:	d50b      	bpl.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f6e:	4931      	ldr	r1, [pc, #196]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f70:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8007f72:	f8d1 2088 	ldr.w	r2, [r1, #136]	@ 0x88
 8007f76:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8007f7a:	432a      	orrs	r2, r5

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f7c:	f1b5 6f00 	cmp.w	r5, #134217728	@ 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007f80:	f8c1 2088 	str.w	r2, [r1, #136]	@ 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007f84:	d035      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8007f86:	041b      	lsls	r3, r3, #16
 8007f88:	d50b      	bpl.n	8007fa2 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f8a:	4a2a      	ldr	r2, [pc, #168]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007f8c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8007f8e:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8007f92:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 8007f96:	430b      	orrs	r3, r1
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007f98:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8007f9c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8007fa0:	d02c      	beq.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x25c>
  }

#endif /* QUADSPI */

  return status;
}
 8007fa2:	b002      	add	sp, #8
 8007fa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 8007fa8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8007faa:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8007fae:	659a      	str	r2, [r3, #88]	@ 0x58
 8007fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007fb6:	9301      	str	r3, [sp, #4]
 8007fb8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007fba:	2701      	movs	r7, #1
 8007fbc:	e6fe      	b.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x1c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007fbe:	491d      	ldr	r1, [pc, #116]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8007fc0:	6d8a      	ldr	r2, [r1, #88]	@ 0x58
 8007fc2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8007fc6:	658a      	str	r2, [r1, #88]	@ 0x58
 8007fc8:	e734      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x94>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fca:	68ca      	ldr	r2, [r1, #12]
 8007fcc:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007fd0:	60ca      	str	r2, [r1, #12]
 8007fd2:	e7a0      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x176>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fd4:	68ca      	ldr	r2, [r1, #12]
 8007fd6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007fda:	60ca      	str	r2, [r1, #12]
 8007fdc:	e7a9      	b.n	8007f32 <HAL_RCCEx_PeriphCLKConfig+0x192>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fde:	68ca      	ldr	r2, [r1, #12]
 8007fe0:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007fe4:	60ca      	str	r2, [r1, #12]
 8007fe6:	e7b2      	b.n	8007f4e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007fe8:	68ca      	ldr	r2, [r1, #12]
 8007fea:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007fee:	60ca      	str	r2, [r1, #12]
 8007ff0:	e7bb      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ff2:	68ca      	ldr	r2, [r1, #12]
 8007ff4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8007ff8:	60ca      	str	r2, [r1, #12]
 8007ffa:	e7c4      	b.n	8007f86 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8007ffc:	68d3      	ldr	r3, [r2, #12]
 8007ffe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008002:	60d3      	str	r3, [r2, #12]
}
 8008004:	b002      	add	sp, #8
 8008006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800800a:	f7fd f9a5 	bl	8005358 <HAL_GetTick>
 800800e:	1b80      	subs	r0, r0, r6
 8008010:	4540      	cmp	r0, r8
 8008012:	f63f af0a 	bhi.w	8007e2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008016:	f8d5 3090 	ldr.w	r3, [r5, #144]	@ 0x90
 800801a:	079b      	lsls	r3, r3, #30
 800801c:	d5f5      	bpl.n	800800a <HAL_RCCEx_PeriphCLKConfig+0x26a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800801e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8008020:	4904      	ldr	r1, [pc, #16]	@ (8008034 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8008022:	f8d1 3090 	ldr.w	r3, [r1, #144]	@ 0x90
 8008026:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800802a:	4313      	orrs	r3, r2
 800802c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008030:	2000      	movs	r0, #0
 8008032:	e6fb      	b.n	8007e2c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8008034:	40021000 	.word	0x40021000
 8008038:	40007000 	.word	0x40007000

0800803c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800803c:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800803e:	6a02      	ldr	r2, [r0, #32]
 8008040:	f022 0201 	bic.w	r2, r2, #1
{
 8008044:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008046:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008048:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800804a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800804c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800804e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008052:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008056:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008058:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800805a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800805e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008060:	4d13      	ldr	r5, [pc, #76]	@ (80080b0 <TIM_OC1_SetConfig+0x74>)
 8008062:	42a8      	cmp	r0, r5
 8008064:	d00f      	beq.n	8008086 <TIM_OC1_SetConfig+0x4a>
 8008066:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 800806a:	42a8      	cmp	r0, r5
 800806c:	d00b      	beq.n	8008086 <TIM_OC1_SetConfig+0x4a>
 800806e:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 8008072:	42a8      	cmp	r0, r5
 8008074:	d007      	beq.n	8008086 <TIM_OC1_SetConfig+0x4a>
 8008076:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800807a:	42a8      	cmp	r0, r5
 800807c:	d003      	beq.n	8008086 <TIM_OC1_SetConfig+0x4a>
 800807e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008082:	42a8      	cmp	r0, r5
 8008084:	d10d      	bne.n	80080a2 <TIM_OC1_SetConfig+0x66>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008086:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008088:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 800808c:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800808e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008092:	f424 7440 	bic.w	r4, r4, #768	@ 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008096:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 800809a:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800809e:	ea4c 0404 	orr.w	r4, ip, r4

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80080a2:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80080a4:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80080a6:	6182      	str	r2, [r0, #24]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80080a8:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR1 = OC_Config->Pulse;
 80080aa:	6341      	str	r1, [r0, #52]	@ 0x34
  TIMx->CCER = tmpccer;
 80080ac:	6203      	str	r3, [r0, #32]
}
 80080ae:	4770      	bx	lr
 80080b0:	40012c00 	.word	0x40012c00

080080b4 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080b4:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080b6:	6a02      	ldr	r2, [r0, #32]
 80080b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
{
 80080bc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080be:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080c0:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080c2:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80080c6:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80080ca:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
  tmpccmrx |= OC_Config->OCMode;
 80080ce:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080d0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80080d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80080d6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80080da:	4d14      	ldr	r5, [pc, #80]	@ (800812c <TIM_OC3_SetConfig+0x78>)
 80080dc:	42a8      	cmp	r0, r5
 80080de:	d00f      	beq.n	8008100 <TIM_OC3_SetConfig+0x4c>
 80080e0:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80080e4:	42a8      	cmp	r0, r5
 80080e6:	d00b      	beq.n	8008100 <TIM_OC3_SetConfig+0x4c>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080e8:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80080ec:	42a8      	cmp	r0, r5
 80080ee:	d00e      	beq.n	800810e <TIM_OC3_SetConfig+0x5a>
 80080f0:	4d0f      	ldr	r5, [pc, #60]	@ (8008130 <TIM_OC3_SetConfig+0x7c>)
 80080f2:	42a8      	cmp	r0, r5
 80080f4:	d00b      	beq.n	800810e <TIM_OC3_SetConfig+0x5a>
 80080f6:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80080fa:	42a8      	cmp	r0, r5
 80080fc:	d10f      	bne.n	800811e <TIM_OC3_SetConfig+0x6a>
 80080fe:	e006      	b.n	800810e <TIM_OC3_SetConfig+0x5a>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008100:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8008102:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008106:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 800810a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800810e:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008112:	f424 5440 	bic.w	r4, r4, #12288	@ 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008116:	ea46 0c05 	orr.w	ip, r6, r5
 800811a:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800811e:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008120:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008122:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8008124:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8008126:	63c1      	str	r1, [r0, #60]	@ 0x3c
  TIMx->CCER = tmpccer;
 8008128:	6203      	str	r3, [r0, #32]
}
 800812a:	4770      	bx	lr
 800812c:	40012c00 	.word	0x40012c00
 8008130:	40014400 	.word	0x40014400

08008134 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008134:	6a03      	ldr	r3, [r0, #32]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008136:	6a02      	ldr	r2, [r0, #32]
 8008138:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
{
 800813c:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800813e:	6202      	str	r2, [r0, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008140:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008142:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008144:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008146:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800814a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800814e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008152:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8008154:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008158:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800815c:	4d14      	ldr	r5, [pc, #80]	@ (80081b0 <TIM_OC4_SetConfig+0x7c>)
 800815e:	42a8      	cmp	r0, r5
 8008160:	d00f      	beq.n	8008182 <TIM_OC4_SetConfig+0x4e>
 8008162:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 8008166:	42a8      	cmp	r0, r5
 8008168:	d00b      	beq.n	8008182 <TIM_OC4_SetConfig+0x4e>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800816a:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 800816e:	42a8      	cmp	r0, r5
 8008170:	d00e      	beq.n	8008190 <TIM_OC4_SetConfig+0x5c>
 8008172:	4d10      	ldr	r5, [pc, #64]	@ (80081b4 <TIM_OC4_SetConfig+0x80>)
 8008174:	42a8      	cmp	r0, r5
 8008176:	d00b      	beq.n	8008190 <TIM_OC4_SetConfig+0x5c>
 8008178:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800817c:	42a8      	cmp	r0, r5
 800817e:	d10f      	bne.n	80081a0 <TIM_OC4_SetConfig+0x6c>
 8008180:	e006      	b.n	8008190 <TIM_OC4_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008182:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC4NP;
 8008184:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008188:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    tmpccer &= ~TIM_CCER_CC4NE;
 800818c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
    tmpcr2 &= ~TIM_CR2_OIS4N;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008190:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008194:	f424 4440 	bic.w	r4, r4, #49152	@ 0xc000
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008198:	ea46 0c05 	orr.w	ip, r6, r5
 800819c:	ea44 148c 	orr.w	r4, r4, ip, lsl #6

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80081a0:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80081a2:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 80081a4:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 80081a6:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR4 = OC_Config->Pulse;
 80081a8:	6401      	str	r1, [r0, #64]	@ 0x40
  TIMx->CCER = tmpccer;
 80081aa:	6203      	str	r3, [r0, #32]
}
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40012c00 	.word	0x40012c00
 80081b4:	40014400 	.word	0x40014400

080081b8 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80081b8:	2800      	cmp	r0, #0
 80081ba:	d075      	beq.n	80082a8 <HAL_TIM_PWM_Init+0xf0>
{
 80081bc:	b570      	push	{r4, r5, r6, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80081be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80081c2:	4604      	mov	r4, r0
 80081c4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d068      	beq.n	800829e <HAL_TIM_PWM_Init+0xe6>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081cc:	6823      	ldr	r3, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081ce:	4e37      	ldr	r6, [pc, #220]	@ (80082ac <HAL_TIM_PWM_Init+0xf4>)
  TIMx->PSC = Structure->Prescaler;
 80081d0:	6861      	ldr	r1, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081d2:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d4:	69a5      	ldr	r5, [r4, #24]
  htim->State = HAL_TIM_STATE_BUSY;
 80081d6:	2202      	movs	r2, #2
 80081d8:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081dc:	42b3      	cmp	r3, r6
  tmpcr1 = TIMx->CR1;
 80081de:	681a      	ldr	r2, [r3, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80081e0:	d04c      	beq.n	800827c <HAL_TIM_PWM_Init+0xc4>
 80081e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80081e6:	d017      	beq.n	8008218 <HAL_TIM_PWM_Init+0x60>
 80081e8:	f5a6 3694 	sub.w	r6, r6, #75776	@ 0x12800
 80081ec:	42b3      	cmp	r3, r6
 80081ee:	d013      	beq.n	8008218 <HAL_TIM_PWM_Init+0x60>
 80081f0:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80081f4:	42b3      	cmp	r3, r6
 80081f6:	d00f      	beq.n	8008218 <HAL_TIM_PWM_Init+0x60>
 80081f8:	f506 3696 	add.w	r6, r6, #76800	@ 0x12c00
 80081fc:	42b3      	cmp	r3, r6
 80081fe:	d03d      	beq.n	800827c <HAL_TIM_PWM_Init+0xc4>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008200:	4e2b      	ldr	r6, [pc, #172]	@ (80082b0 <HAL_TIM_PWM_Init+0xf8>)
 8008202:	42b3      	cmp	r3, r6
 8008204:	d03e      	beq.n	8008284 <HAL_TIM_PWM_Init+0xcc>
 8008206:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800820a:	42b3      	cmp	r3, r6
 800820c:	d03a      	beq.n	8008284 <HAL_TIM_PWM_Init+0xcc>
 800820e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8008212:	42b3      	cmp	r3, r6
 8008214:	d108      	bne.n	8008228 <HAL_TIM_PWM_Init+0x70>
 8008216:	e035      	b.n	8008284 <HAL_TIM_PWM_Init+0xcc>
    tmpcr1 |= Structure->CounterMode;
 8008218:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800821a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800821e:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008220:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008222:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008226:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008228:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800822c:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 800822e:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008230:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008232:	6299      	str	r1, [r3, #40]	@ 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008234:	2201      	movs	r2, #1
 8008236:	615a      	str	r2, [r3, #20]
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008238:	691a      	ldr	r2, [r3, #16]
 800823a:	07d2      	lsls	r2, r2, #31
 800823c:	d503      	bpl.n	8008246 <HAL_TIM_PWM_Init+0x8e>
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800823e:	691a      	ldr	r2, [r3, #16]
 8008240:	f022 0201 	bic.w	r2, r2, #1
 8008244:	611a      	str	r2, [r3, #16]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008246:	2301      	movs	r3, #1
 8008248:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800824c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 8008250:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 8008254:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 8008258:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800825c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008260:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008264:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 8008268:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800826c:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 8008270:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 8008274:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  return HAL_OK;
 8008278:	2000      	movs	r0, #0
}
 800827a:	bd70      	pop	{r4, r5, r6, pc}
    tmpcr1 |= Structure->CounterMode;
 800827c:	68a6      	ldr	r6, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800827e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 8008282:	4332      	orrs	r2, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008284:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008286:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800828a:	4332      	orrs	r2, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800828c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008290:	432a      	orrs	r2, r5
  TIMx->CR1 = tmpcr1;
 8008292:	601a      	str	r2, [r3, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008294:	62d8      	str	r0, [r3, #44]	@ 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008296:	6299      	str	r1, [r3, #40]	@ 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8008298:	6962      	ldr	r2, [r4, #20]
 800829a:	631a      	str	r2, [r3, #48]	@ 0x30
 800829c:	e7ca      	b.n	8008234 <HAL_TIM_PWM_Init+0x7c>
    htim->Lock = HAL_UNLOCKED;
 800829e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80082a2:	f7fc fdb5 	bl	8004e10 <HAL_TIM_PWM_MspInit>
 80082a6:	e791      	b.n	80081cc <HAL_TIM_PWM_Init+0x14>
    return HAL_ERROR;
 80082a8:	2001      	movs	r0, #1
}
 80082aa:	4770      	bx	lr
 80082ac:	40012c00 	.word	0x40012c00
 80082b0:	40014000 	.word	0x40014000

080082b4 <TIM_OC2_SetConfig>:
  tmpccer = TIMx->CCER;
 80082b4:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082b6:	6a02      	ldr	r2, [r0, #32]
 80082b8:	f022 0210 	bic.w	r2, r2, #16
{
 80082bc:	b470      	push	{r4, r5, r6}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082be:	6202      	str	r2, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 80082c0:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 80082c2:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082c6:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 80082ca:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082ce:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80082d4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082dc:	4d14      	ldr	r5, [pc, #80]	@ (8008330 <TIM_OC2_SetConfig+0x7c>)
 80082de:	42a8      	cmp	r0, r5
 80082e0:	d00f      	beq.n	8008302 <TIM_OC2_SetConfig+0x4e>
 80082e2:	f505 6500 	add.w	r5, r5, #2048	@ 0x800
 80082e6:	42a8      	cmp	r0, r5
 80082e8:	d00b      	beq.n	8008302 <TIM_OC2_SetConfig+0x4e>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ea:	f505 6540 	add.w	r5, r5, #3072	@ 0xc00
 80082ee:	42a8      	cmp	r0, r5
 80082f0:	d00e      	beq.n	8008310 <TIM_OC2_SetConfig+0x5c>
 80082f2:	4d10      	ldr	r5, [pc, #64]	@ (8008334 <TIM_OC2_SetConfig+0x80>)
 80082f4:	42a8      	cmp	r0, r5
 80082f6:	d00b      	beq.n	8008310 <TIM_OC2_SetConfig+0x5c>
 80082f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80082fc:	42a8      	cmp	r0, r5
 80082fe:	d10f      	bne.n	8008320 <TIM_OC2_SetConfig+0x6c>
 8008300:	e006      	b.n	8008310 <TIM_OC2_SetConfig+0x5c>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008302:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008308:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 800830c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008310:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008314:	f424 6440 	bic.w	r4, r4, #3072	@ 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008318:	ea46 0c05 	orr.w	ip, r6, r5
 800831c:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8008320:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8008322:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008324:	6182      	str	r2, [r0, #24]
}
 8008326:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8008328:	6381      	str	r1, [r0, #56]	@ 0x38
  TIMx->CCER = tmpccer;
 800832a:	6203      	str	r3, [r0, #32]
}
 800832c:	4770      	bx	lr
 800832e:	bf00      	nop
 8008330:	40012c00 	.word	0x40012c00
 8008334:	40014400 	.word	0x40014400

08008338 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008338:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 800833c:	2b01      	cmp	r3, #1
 800833e:	f000 80dc 	beq.w	80084fa <HAL_TIM_PWM_ConfigChannel+0x1c2>
 8008342:	2301      	movs	r3, #1
{
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	4604      	mov	r4, r0
 8008348:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 800834a:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  switch (Channel)
 800834e:	2a14      	cmp	r2, #20
 8008350:	d80c      	bhi.n	800836c <HAL_TIM_PWM_ConfigChannel+0x34>
 8008352:	e8df f002 	tbb	[pc, r2]
 8008356:	0b4f      	.short	0x0b4f
 8008358:	0b630b0b 	.word	0x0b630b0b
 800835c:	0b740b0b 	.word	0x0b740b0b
 8008360:	0b840b0b 	.word	0x0b840b0b
 8008364:	0b950b0b 	.word	0x0b950b0b
 8008368:	0b0b      	.short	0x0b0b
 800836a:	10          	.byte	0x10
 800836b:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 800836c:	2300      	movs	r3, #0
 800836e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  switch (Channel)
 8008372:	2001      	movs	r0, #1
}
 8008374:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008376:	6803      	ldr	r3, [r0, #0]
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008378:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 800837a:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800837c:	6a19      	ldr	r1, [r3, #32]
 800837e:	f421 1180 	bic.w	r1, r1, #1048576	@ 0x100000
 8008382:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008384:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008386:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008388:	f021 7180 	bic.w	r1, r1, #16777216	@ 0x1000000
 800838c:	f421 41e0 	bic.w	r1, r1, #28672	@ 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008390:	ea41 2106 	orr.w	r1, r1, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008394:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008396:	f422 1200 	bic.w	r2, r2, #2097152	@ 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800839a:	ea42 5206 	orr.w	r2, r2, r6, lsl #20

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800839e:	4e58      	ldr	r6, [pc, #352]	@ (8008500 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80083a0:	42b3      	cmp	r3, r6
 80083a2:	d00f      	beq.n	80083c4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80083a4:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80083a8:	42b3      	cmp	r3, r6
 80083aa:	d00b      	beq.n	80083c4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80083ac:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80083b0:	42b3      	cmp	r3, r6
 80083b2:	d007      	beq.n	80083c4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80083b4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80083b8:	42b3      	cmp	r3, r6
 80083ba:	d003      	beq.n	80083c4 <HAL_TIM_PWM_ConfigChannel+0x8c>
 80083bc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80083c0:	42b3      	cmp	r3, r6
 80083c2:	d104      	bne.n	80083ce <HAL_TIM_PWM_ConfigChannel+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083c4:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 80083c6:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80083ca:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083ce:	6058      	str	r0, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80083d0:	6519      	str	r1, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80083d2:	6869      	ldr	r1, [r5, #4]
 80083d4:	64d9      	str	r1, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083d6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083da:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80083dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083e0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80083e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083e8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80083ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80083ec:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80083f0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80083f2:	e00e      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083f4:	6800      	ldr	r0, [r0, #0]
 80083f6:	f7ff fe21 	bl	800803c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083fa:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083fc:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083fe:	f043 0308 	orr.w	r3, r3, #8
 8008402:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008404:	6983      	ldr	r3, [r0, #24]
 8008406:	f023 0304 	bic.w	r3, r3, #4
 800840a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800840c:	6983      	ldr	r3, [r0, #24]
 800840e:	4313      	orrs	r3, r2
 8008410:	6183      	str	r3, [r0, #24]
  __HAL_UNLOCK(htim);
 8008412:	2300      	movs	r3, #0
 8008414:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008418:	2000      	movs	r0, #0
}
 800841a:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800841c:	6800      	ldr	r0, [r0, #0]
 800841e:	f7ff ff49 	bl	80082b4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008422:	6983      	ldr	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008424:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008426:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800842a:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800842c:	6983      	ldr	r3, [r0, #24]
 800842e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008432:	6183      	str	r3, [r0, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008434:	6983      	ldr	r3, [r0, #24]
 8008436:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800843a:	6183      	str	r3, [r0, #24]
      break;
 800843c:	e7e9      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800843e:	6800      	ldr	r0, [r0, #0]
 8008440:	f7ff fe38 	bl	80080b4 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008444:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008446:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008448:	f043 0308 	orr.w	r3, r3, #8
 800844c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800844e:	69c3      	ldr	r3, [r0, #28]
 8008450:	f023 0304 	bic.w	r3, r3, #4
 8008454:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008456:	69c3      	ldr	r3, [r0, #28]
 8008458:	4313      	orrs	r3, r2
 800845a:	61c3      	str	r3, [r0, #28]
      break;
 800845c:	e7d9      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800845e:	6800      	ldr	r0, [r0, #0]
 8008460:	f7ff fe68 	bl	8008134 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008464:	69c3      	ldr	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008466:	692a      	ldr	r2, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008468:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800846c:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800846e:	69c3      	ldr	r3, [r0, #28]
 8008470:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008474:	61c3      	str	r3, [r0, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008476:	69c3      	ldr	r3, [r0, #28]
 8008478:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800847c:	61c3      	str	r3, [r0, #28]
      break;
 800847e:	e7c8      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xda>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008480:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8008482:	682e      	ldr	r6, [r5, #0]
  tmpccer = TIMx->CCER;
 8008484:	6a1a      	ldr	r2, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008486:	6a19      	ldr	r1, [r3, #32]
 8008488:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800848c:	6219      	str	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800848e:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8008490:	6d19      	ldr	r1, [r3, #80]	@ 0x50
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008492:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 8008496:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
  tmpccmrx |= OC_Config->OCMode;
 800849a:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800849c:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800849e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80084a2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084a6:	4e16      	ldr	r6, [pc, #88]	@ (8008500 <HAL_TIM_PWM_ConfigChannel+0x1c8>)
 80084a8:	42b3      	cmp	r3, r6
 80084aa:	d00f      	beq.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x194>
 80084ac:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 80084b0:	42b3      	cmp	r3, r6
 80084b2:	d00b      	beq.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x194>
 80084b4:	f506 6640 	add.w	r6, r6, #3072	@ 0xc00
 80084b8:	42b3      	cmp	r3, r6
 80084ba:	d007      	beq.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x194>
 80084bc:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80084c0:	42b3      	cmp	r3, r6
 80084c2:	d003      	beq.n	80084cc <HAL_TIM_PWM_ConfigChannel+0x194>
 80084c4:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80084c8:	42b3      	cmp	r3, r6
 80084ca:	d104      	bne.n	80084d6 <HAL_TIM_PWM_ConfigChannel+0x19e>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084cc:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80084ce:	f420 3080 	bic.w	r0, r0, #65536	@ 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80084d2:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 80084d6:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 80084d8:	6519      	str	r1, [r3, #80]	@ 0x50
  TIMx->CCR5 = OC_Config->Pulse;
 80084da:	6869      	ldr	r1, [r5, #4]
 80084dc:	6499      	str	r1, [r3, #72]	@ 0x48
  TIMx->CCER = tmpccer;
 80084de:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084e2:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80084e4:	f042 0208 	orr.w	r2, r2, #8
 80084e8:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80084ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084ec:	f022 0204 	bic.w	r2, r2, #4
 80084f0:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80084f2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80084f4:	430a      	orrs	r2, r1
 80084f6:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80084f8:	e78b      	b.n	8008412 <HAL_TIM_PWM_ConfigChannel+0xda>
  __HAL_LOCK(htim);
 80084fa:	2002      	movs	r0, #2
}
 80084fc:	4770      	bx	lr
 80084fe:	bf00      	nop
 8008500:	40012c00 	.word	0x40012c00

08008504 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008504:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d046      	beq.n	800859a <HAL_TIMEx_MasterConfigSynchronization+0x96>
{
 800850c:	b470      	push	{r4, r5, r6}
 800850e:	4602      	mov	r2, r0

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008510:	4e23      	ldr	r6, [pc, #140]	@ (80085a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
  tmpcr2 = htim->Instance->CR2;
 8008512:	6800      	ldr	r0, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8008514:	2302      	movs	r3, #2
 8008516:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800851a:	42b0      	cmp	r0, r6
  tmpcr2 = htim->Instance->CR2;
 800851c:	6843      	ldr	r3, [r0, #4]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800851e:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008520:	6884      	ldr	r4, [r0, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008522:	d024      	beq.n	800856e <HAL_TIMEx_MasterConfigSynchronization+0x6a>
 8008524:	f506 6600 	add.w	r6, r6, #2048	@ 0x800
 8008528:	42b0      	cmp	r0, r6
 800852a:	d02b      	beq.n	8008584 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  tmpcr2 &= ~TIM_CR2_MMS;
 800852c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008530:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008534:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008536:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800853a:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800853c:	d00a      	beq.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800853e:	4b19      	ldr	r3, [pc, #100]	@ (80085a4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8008540:	4298      	cmp	r0, r3
 8008542:	d007      	beq.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 8008544:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008548:	4298      	cmp	r0, r3
 800854a:	d003      	beq.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0x50>
 800854c:	f503 339c 	add.w	r3, r3, #79872	@ 0x13800
 8008550:	4298      	cmp	r0, r3
 8008552:	d104      	bne.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0x5a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008554:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008556:	f024 0480 	bic.w	r4, r4, #128	@ 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800855a:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800855c:	6084      	str	r4, [r0, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800855e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8008560:	2301      	movs	r3, #1
 8008562:	f882 303d 	strb.w	r3, [r2, #61]	@ 0x3d
  __HAL_UNLOCK(htim);
 8008566:	f882 003c 	strb.w	r0, [r2, #60]	@ 0x3c

  return HAL_OK;
}
 800856a:	bc70      	pop	{r4, r5, r6}
 800856c:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800856e:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008570:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008574:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 8008576:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800857a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800857e:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8008580:	6043      	str	r3, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008582:	e7e7      	b.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0x50>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008584:	684e      	ldr	r6, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008586:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800858a:	4333      	orrs	r3, r6
  tmpcr2 &= ~TIM_CR2_MMS;
 800858c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008590:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008594:	431d      	orrs	r5, r3
  htim->Instance->CR2 = tmpcr2;
 8008596:	6045      	str	r5, [r0, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008598:	e7dc      	b.n	8008554 <HAL_TIMEx_MasterConfigSynchronization+0x50>
  __HAL_LOCK(htim);
 800859a:	2002      	movs	r0, #2
}
 800859c:	4770      	bx	lr
 800859e:	bf00      	nop
 80085a0:	40012c00 	.word	0x40012c00
 80085a4:	40000400 	.word	0x40000400

080085a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085a8:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	d045      	beq.n	800863c <HAL_TIMEx_ConfigBreakDeadTime+0x94>
{
 80085b0:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80085b2:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80085b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ba:	4602      	mov	r2, r0
 80085bc:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085be:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085c0:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80085c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80085c6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085cc:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80085ce:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085d0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085d4:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80085d6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085d8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085dc:	6b08      	ldr	r0, [r1, #48]	@ 0x30
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80085de:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085e0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085e4:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80085e6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085e8:	f423 2370 	bic.w	r3, r3, #983040	@ 0xf0000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80085ec:	69c8      	ldr	r0, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80085ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80085f2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085f6:	4c12      	ldr	r4, [pc, #72]	@ (8008640 <HAL_TIMEx_ConfigBreakDeadTime+0x98>)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80085f8:	4303      	orrs	r3, r0
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80085fa:	6810      	ldr	r0, [r2, #0]
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d00b      	beq.n	8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
 8008600:	f504 6400 	add.w	r4, r4, #2048	@ 0x800
 8008604:	42a0      	cmp	r0, r4
 8008606:	d007      	beq.n	8008618 <HAL_TIMEx_ConfigBreakDeadTime+0x70>
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 8008608:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 800860a:	6443      	str	r3, [r0, #68]	@ 0x44
  __HAL_UNLOCK(htim);
 800860c:	f882 103c 	strb.w	r1, [r2, #60]	@ 0x3c

  return HAL_OK;
 8008610:	4608      	mov	r0, r1
}
 8008612:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008616:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008618:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 800861a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800861e:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008622:	6a0c      	ldr	r4, [r1, #32]
 8008624:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8008628:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800862a:	6a4c      	ldr	r4, [r1, #36]	@ 0x24
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800862c:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800862e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008632:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8008634:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008638:	430b      	orrs	r3, r1
 800863a:	e7e5      	b.n	8008608 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
  __HAL_LOCK(htim);
 800863c:	2002      	movs	r0, #2
}
 800863e:	4770      	bx	lr
 8008640:	40012c00 	.word	0x40012c00

08008644 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 8008644:	4603      	mov	r3, r0
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 8008646:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800864a:	2801      	cmp	r0, #1
 800864c:	d047      	beq.n	80086de <HAL_TIMEx_ConfigBreakInput+0x9a>

  switch (sBreakInputConfig->Source)
 800864e:	6810      	ldr	r0, [r2, #0]
 8008650:	3801      	subs	r0, #1
 8008652:	280f      	cmp	r0, #15
{
 8008654:	b4f0      	push	{r4, r5, r6, r7}
 8008656:	d815      	bhi.n	8008684 <HAL_TIMEx_ConfigBreakInput+0x40>
 8008658:	4c22      	ldr	r4, [pc, #136]	@ (80086e4 <HAL_TIMEx_ConfigBreakInput+0xa0>)
 800865a:	4e23      	ldr	r6, [pc, #140]	@ (80086e8 <HAL_TIMEx_ConfigBreakInput+0xa4>)
 800865c:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8008660:	f856 c020 	ldr.w	ip, [r6, r0, lsl #2]
 8008664:	4c21      	ldr	r4, [pc, #132]	@ (80086ec <HAL_TIMEx_ConfigBreakInput+0xa8>)
 8008666:	4e22      	ldr	r6, [pc, #136]	@ (80086f0 <HAL_TIMEx_ConfigBreakInput+0xac>)
 8008668:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 800866c:	f856 7020 	ldr.w	r7, [r6, r0, lsl #2]
      bkin_polarity_bitpos = 0U;
      break;
    }
  }

  switch (BreakInput)
 8008670:	2901      	cmp	r1, #1
 8008672:	d00d      	beq.n	8008690 <HAL_TIMEx_ConfigBreakInput+0x4c>
 8008674:	2902      	cmp	r1, #2
 8008676:	d01c      	beq.n	80086b2 <HAL_TIMEx_ConfigBreakInput+0x6e>
    default:
      status = HAL_ERROR;
      break;
  }

  __HAL_UNLOCK(htim);
 8008678:	2200      	movs	r2, #0
 800867a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  switch (BreakInput)
 800867e:	2001      	movs	r0, #1

  return status;
}
 8008680:	bcf0      	pop	{r4, r5, r6, r7}
 8008682:	4770      	bx	lr
  switch (sBreakInputConfig->Source)
 8008684:	2700      	movs	r7, #0
  switch (BreakInput)
 8008686:	2901      	cmp	r1, #1
  switch (sBreakInputConfig->Source)
 8008688:	46bc      	mov	ip, r7
 800868a:	463c      	mov	r4, r7
 800868c:	463d      	mov	r5, r7
  switch (BreakInput)
 800868e:	d1f1      	bne.n	8008674 <HAL_TIMEx_ConfigBreakInput+0x30>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008690:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF1;
 8008692:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 8008694:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 8008696:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF1;
 8008698:	6e37      	ldr	r7, [r6, #96]	@ 0x60
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800869a:	fa01 f10c 	lsl.w	r1, r1, ip
 800869e:	ea81 0207 	eor.w	r2, r1, r7
 80086a2:	402a      	ands	r2, r5
 80086a4:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80086a6:	ea80 0102 	eor.w	r1, r0, r2
 80086aa:	4021      	ands	r1, r4
 80086ac:	404a      	eors	r2, r1
      htim->Instance->AF1 = tmporx;
 80086ae:	6632      	str	r2, [r6, #96]	@ 0x60
      break;
 80086b0:	e00f      	b.n	80086d2 <HAL_TIMEx_ConfigBreakInput+0x8e>
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80086b2:	6890      	ldr	r0, [r2, #8]
      tmporx = htim->Instance->AF2;
 80086b4:	681e      	ldr	r6, [r3, #0]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80086b6:	6851      	ldr	r1, [r2, #4]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80086b8:	40b8      	lsls	r0, r7
      tmporx = htim->Instance->AF2;
 80086ba:	6e77      	ldr	r7, [r6, #100]	@ 0x64
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 80086bc:	fa01 f10c 	lsl.w	r1, r1, ip
 80086c0:	ea81 0207 	eor.w	r2, r1, r7
 80086c4:	402a      	ands	r2, r5
 80086c6:	407a      	eors	r2, r7
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 80086c8:	ea80 0102 	eor.w	r1, r0, r2
 80086cc:	4021      	ands	r1, r4
 80086ce:	404a      	eors	r2, r1
      htim->Instance->AF2 = tmporx;
 80086d0:	6672      	str	r2, [r6, #100]	@ 0x64
  __HAL_UNLOCK(htim);
 80086d2:	2200      	movs	r2, #0
 80086d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80086d8:	2000      	movs	r0, #0
}
 80086da:	bcf0      	pop	{r4, r5, r6, r7}
 80086dc:	4770      	bx	lr
  __HAL_LOCK(htim);
 80086de:	2002      	movs	r0, #2
}
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	0800c18c 	.word	0x0800c18c
 80086e8:	0800c10c 	.word	0x0800c10c
 80086ec:	0800c14c 	.word	0x0800c14c
 80086f0:	0800c0cc 	.word	0x0800c0cc

080086f4 <HAL_UART_DeInit>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086f4:	b1d8      	cbz	r0, 800872e <HAL_UART_DeInit+0x3a>
{
 80086f6:	b538      	push	{r3, r4, r5, lr}
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80086f8:	2224      	movs	r2, #36	@ 0x24

  __HAL_UART_DISABLE(huart);
 80086fa:	6803      	ldr	r3, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80086fc:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008700:	681a      	ldr	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8008702:	2500      	movs	r5, #0
 8008704:	4604      	mov	r4, r0
  __HAL_UART_DISABLE(huart);
 8008706:	f022 0201 	bic.w	r2, r2, #1
 800870a:	601a      	str	r2, [r3, #0]
  huart->Instance->CR1 = 0x0U;
 800870c:	601d      	str	r5, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 800870e:	605d      	str	r5, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8008710:	609d      	str	r5, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8008712:	f7fc fc77 	bl	8005004 <HAL_UART_MspDeInit>
  huart->gState = HAL_UART_STATE_RESET;
  huart->RxState = HAL_UART_STATE_RESET;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
  huart->RxEventType = HAL_UART_RXEVENT_TC;

  __HAL_UNLOCK(huart);
 8008716:	f884 5084 	strb.w	r5, [r4, #132]	@ 0x84
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800871a:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90

  return HAL_OK;
 800871e:	4628      	mov	r0, r5
  huart->gState = HAL_UART_STATE_RESET;
 8008720:	f8c4 5088 	str.w	r5, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_RESET;
 8008724:	f8c4 508c 	str.w	r5, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008728:	66e5      	str	r5, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800872a:	6725      	str	r5, [r4, #112]	@ 0x70
}
 800872c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800872e:	2001      	movs	r0, #1
}
 8008730:	4770      	bx	lr
 8008732:	bf00      	nop

08008734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008738:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800873a:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 800873e:	2820      	cmp	r0, #32
 8008740:	d15e      	bne.n	8008800 <HAL_UART_Transmit+0xcc>
  {
    if ((pData == NULL) || (Size == 0U))
 8008742:	460d      	mov	r5, r1
 8008744:	b109      	cbz	r1, 800874a <HAL_UART_Transmit+0x16>
 8008746:	4616      	mov	r6, r2
 8008748:	b912      	cbnz	r2, 8008750 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 800874a:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 800874c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008750:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008752:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008756:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008758:	f8c4 8090 	str.w	r8, [r4, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800875c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    tickstart = HAL_GetTick();
 8008760:	f7fc fdfa 	bl	8005358 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008764:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8008766:	f8a4 6054 	strh.w	r6, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800876a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800876e:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8008770:	f8a4 6056 	strh.w	r6, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008774:	d047      	beq.n	8008806 <HAL_UART_Transmit+0xd2>
    while (huart->TxXferCount > 0U)
 8008776:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800877a:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 800877c:	b29b      	uxth	r3, r3
 800877e:	2b00      	cmp	r3, #0
 8008780:	d04d      	beq.n	800881e <HAL_UART_Transmit+0xea>
 8008782:	1c7b      	adds	r3, r7, #1
 8008784:	d12a      	bne.n	80087dc <HAL_UART_Transmit+0xa8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008786:	69d3      	ldr	r3, [r2, #28]
 8008788:	061f      	lsls	r7, r3, #24
 800878a:	d5fc      	bpl.n	8008786 <HAL_UART_Transmit+0x52>
      if (pdata8bits == NULL)
 800878c:	2d00      	cmp	r5, #0
 800878e:	d032      	beq.n	80087f6 <HAL_UART_Transmit+0xc2>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008790:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008794:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 8008796:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 800879a:	3b01      	subs	r3, #1
 800879c:	b29b      	uxth	r3, r3
 800879e:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80087a2:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1ec      	bne.n	8008786 <HAL_UART_Transmit+0x52>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ac:	69d3      	ldr	r3, [r2, #28]
 80087ae:	0659      	lsls	r1, r3, #25
 80087b0:	d5fc      	bpl.n	80087ac <HAL_UART_Transmit+0x78>
    huart->gState = HAL_UART_STATE_READY;
 80087b2:	2320      	movs	r3, #32
 80087b4:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 80087b8:	2000      	movs	r0, #0
}
 80087ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 80087be:	2d00      	cmp	r5, #0
 80087c0:	d040      	beq.n	8008844 <HAL_UART_Transmit+0x110>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80087c2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80087c6:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 80087c8:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80087cc:	3b01      	subs	r3, #1
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	f8a4 3056 	strh.w	r3, [r4, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80087d4:	f8b4 3056 	ldrh.w	r3, [r4, #86]	@ 0x56
 80087d8:	b29b      	uxth	r3, r3
 80087da:	b313      	cbz	r3, 8008822 <HAL_UART_Transmit+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087dc:	69d3      	ldr	r3, [r2, #28]
 80087de:	061e      	lsls	r6, r3, #24
 80087e0:	d4ed      	bmi.n	80087be <HAL_UART_Transmit+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087e2:	f7fc fdb9 	bl	8005358 <HAL_GetTick>
 80087e6:	eba0 0309 	sub.w	r3, r0, r9
 80087ea:	429f      	cmp	r7, r3
 80087ec:	d311      	bcc.n	8008812 <HAL_UART_Transmit+0xde>
 80087ee:	b187      	cbz	r7, 8008812 <HAL_UART_Transmit+0xde>
      {

        return HAL_TIMEOUT;
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087f0:	6822      	ldr	r2, [r4, #0]
 80087f2:	6813      	ldr	r3, [r2, #0]
 80087f4:	e7f2      	b.n	80087dc <HAL_UART_Transmit+0xa8>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80087f6:	f838 3b02 	ldrh.w	r3, [r8], #2
 80087fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087fe:	e7c9      	b.n	8008794 <HAL_UART_Transmit+0x60>
    return HAL_BUSY;
 8008800:	2002      	movs	r0, #2
}
 8008802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008806:	6923      	ldr	r3, [r4, #16]
 8008808:	2b00      	cmp	r3, #0
 800880a:	d1b4      	bne.n	8008776 <HAL_UART_Transmit+0x42>
      pdata16bits = (const uint16_t *) pData;
 800880c:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 800880e:	461d      	mov	r5, r3
 8008810:	e7b1      	b.n	8008776 <HAL_UART_Transmit+0x42>
        huart->gState = HAL_UART_STATE_READY;
 8008812:	2320      	movs	r3, #32
 8008814:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
        return HAL_TIMEOUT;
 8008818:	2003      	movs	r0, #3
}
 800881a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800881e:	1c78      	adds	r0, r7, #1
 8008820:	d0c4      	beq.n	80087ac <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008822:	69d3      	ldr	r3, [r2, #28]
 8008824:	065b      	lsls	r3, r3, #25
 8008826:	d4c4      	bmi.n	80087b2 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008828:	f7fc fd96 	bl	8005358 <HAL_GetTick>
 800882c:	eba0 0309 	sub.w	r3, r0, r9
 8008830:	429f      	cmp	r7, r3
 8008832:	d3ee      	bcc.n	8008812 <HAL_UART_Transmit+0xde>
 8008834:	2f00      	cmp	r7, #0
 8008836:	d0ec      	beq.n	8008812 <HAL_UART_Transmit+0xde>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	6813      	ldr	r3, [r2, #0]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800883c:	69d3      	ldr	r3, [r2, #28]
 800883e:	065b      	lsls	r3, r3, #25
 8008840:	d5f2      	bpl.n	8008828 <HAL_UART_Transmit+0xf4>
 8008842:	e7b6      	b.n	80087b2 <HAL_UART_Transmit+0x7e>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008844:	f838 3b02 	ldrh.w	r3, [r8], #2
 8008848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800884c:	e7bb      	b.n	80087c6 <HAL_UART_Transmit+0x92>
 800884e:	bf00      	nop

08008850 <UART_SetConfig>:
{
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008854:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008856:	6882      	ldr	r2, [r0, #8]
 8008858:	6900      	ldr	r0, [r0, #16]
 800885a:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800885c:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800885e:	4302      	orrs	r2, r0
 8008860:	430a      	orrs	r2, r1
 8008862:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008864:	498e      	ldr	r1, [pc, #568]	@ (8008aa0 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008866:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008868:	4029      	ands	r1, r5
 800886a:	430a      	orrs	r2, r1
 800886c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800886e:	685a      	ldr	r2, [r3, #4]
 8008870:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008872:	6a65      	ldr	r5, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008874:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 8008878:	430a      	orrs	r2, r1
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800887a:	498a      	ldr	r1, [pc, #552]	@ (8008aa4 <UART_SetConfig+0x254>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800887c:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800887e:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008880:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008882:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008884:	f021 416e 	bic.w	r1, r1, #3992977408	@ 0xee000000
 8008888:	f421 6130 	bic.w	r1, r1, #2816	@ 0xb00
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800888c:	f000 80b0 	beq.w	80089f0 <UART_SetConfig+0x1a0>
    tmpreg |= huart->Init.OneBitSampling;
 8008890:	6a26      	ldr	r6, [r4, #32]
 8008892:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008894:	430a      	orrs	r2, r1
 8008896:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008898:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800889a:	f022 020f 	bic.w	r2, r2, #15
 800889e:	432a      	orrs	r2, r5
 80088a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088a2:	4a81      	ldr	r2, [pc, #516]	@ (8008aa8 <UART_SetConfig+0x258>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d035      	beq.n	8008914 <UART_SetConfig+0xc4>
 80088a8:	4a80      	ldr	r2, [pc, #512]	@ (8008aac <UART_SetConfig+0x25c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d00d      	beq.n	80088ca <UART_SetConfig+0x7a>
 80088ae:	4a80      	ldr	r2, [pc, #512]	@ (8008ab0 <UART_SetConfig+0x260>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d055      	beq.n	8008960 <UART_SetConfig+0x110>
 80088b4:	4a7f      	ldr	r2, [pc, #508]	@ (8008ab4 <UART_SetConfig+0x264>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d040      	beq.n	800893c <UART_SetConfig+0xec>
        ret = HAL_ERROR;
 80088ba:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 80088bc:	2300      	movs	r3, #0
  huart->NbRxDataToProcess = 1;
 80088be:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
  huart->TxISR = NULL;
 80088c2:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
  huart->NbRxDataToProcess = 1;
 80088c6:	66a2      	str	r2, [r4, #104]	@ 0x68
}
 80088c8:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 80088ca:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab8 <UART_SetConfig+0x268>)
 80088cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80088d0:	f003 030c 	and.w	r3, r3, #12
 80088d4:	2b0c      	cmp	r3, #12
 80088d6:	d8f0      	bhi.n	80088ba <UART_SetConfig+0x6a>
 80088d8:	a201      	add	r2, pc, #4	@ (adr r2, 80088e0 <UART_SetConfig+0x90>)
 80088da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088de:	bf00      	nop
 80088e0:	080089e5 	.word	0x080089e5
 80088e4:	080088bb 	.word	0x080088bb
 80088e8:	080088bb 	.word	0x080088bb
 80088ec:	080088bb 	.word	0x080088bb
 80088f0:	08008953 	.word	0x08008953
 80088f4:	080088bb 	.word	0x080088bb
 80088f8:	080088bb 	.word	0x080088bb
 80088fc:	080088bb 	.word	0x080088bb
 8008900:	080089a7 	.word	0x080089a7
 8008904:	080088bb 	.word	0x080088bb
 8008908:	080088bb 	.word	0x080088bb
 800890c:	080088bb 	.word	0x080088bb
 8008910:	08008975 	.word	0x08008975
 8008914:	4b68      	ldr	r3, [pc, #416]	@ (8008ab8 <UART_SetConfig+0x268>)
 8008916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b02      	cmp	r3, #2
 8008920:	d041      	beq.n	80089a6 <UART_SetConfig+0x156>
 8008922:	2b03      	cmp	r3, #3
 8008924:	d026      	beq.n	8008974 <UART_SetConfig+0x124>
 8008926:	2b01      	cmp	r3, #1
 8008928:	d013      	beq.n	8008952 <UART_SetConfig+0x102>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800892a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800892e:	f000 80ac 	beq.w	8008a8a <UART_SetConfig+0x23a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008932:	f7ff fa1b 	bl	8007d6c <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 8008936:	b3a0      	cbz	r0, 80089a2 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008938:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800893a:	e020      	b.n	800897e <UART_SetConfig+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800893c:	4b5e      	ldr	r3, [pc, #376]	@ (8008ab8 <UART_SetConfig+0x268>)
 800893e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008942:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008946:	2b80      	cmp	r3, #128	@ 0x80
 8008948:	d02d      	beq.n	80089a6 <UART_SetConfig+0x156>
 800894a:	f200 808e 	bhi.w	8008a6a <UART_SetConfig+0x21a>
 800894e:	2b00      	cmp	r3, #0
 8008950:	d048      	beq.n	80089e4 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008952:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008956:	f000 809e 	beq.w	8008a96 <UART_SetConfig+0x246>
        pclk = HAL_RCC_GetSysClockFreq();
 800895a:	f7ff f8b3 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
        break;
 800895e:	e7ea      	b.n	8008936 <UART_SetConfig+0xe6>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008960:	4b55      	ldr	r3, [pc, #340]	@ (8008ab8 <UART_SetConfig+0x268>)
 8008962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008966:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800896a:	2b20      	cmp	r3, #32
 800896c:	d01b      	beq.n	80089a6 <UART_SetConfig+0x156>
 800896e:	d9ee      	bls.n	800894e <UART_SetConfig+0xfe>
 8008970:	2b30      	cmp	r3, #48	@ 0x30
 8008972:	d1a2      	bne.n	80088ba <UART_SetConfig+0x6a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008974:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8008978:	d019      	beq.n	80089ae <UART_SetConfig+0x15e>
        pclk = (uint32_t) LSE_VALUE;
 800897a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800897e:	6863      	ldr	r3, [r4, #4]
 8008980:	4a4e      	ldr	r2, [pc, #312]	@ (8008abc <UART_SetConfig+0x26c>)
 8008982:	f832 1015 	ldrh.w	r1, [r2, r5, lsl #1]
 8008986:	fbb0 f0f1 	udiv	r0, r0, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800898a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800898e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8008992:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008996:	f1a0 0310 	sub.w	r3, r0, #16
 800899a:	4293      	cmp	r3, r2
 800899c:	d88d      	bhi.n	80088ba <UART_SetConfig+0x6a>
          huart->Instance->BRR = usartdiv;
 800899e:	6823      	ldr	r3, [r4, #0]
 80089a0:	60d8      	str	r0, [r3, #12]
        pclk = (uint32_t) HSI_VALUE;
 80089a2:	2000      	movs	r0, #0
 80089a4:	e78a      	b.n	80088bc <UART_SetConfig+0x6c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089a6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
        pclk = (uint32_t) HSI_VALUE;
 80089aa:	4845      	ldr	r0, [pc, #276]	@ (8008ac0 <UART_SetConfig+0x270>)
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ac:	d1e7      	bne.n	800897e <UART_SetConfig+0x12e>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089ae:	6862      	ldr	r2, [r4, #4]
 80089b0:	4b42      	ldr	r3, [pc, #264]	@ (8008abc <UART_SetConfig+0x26c>)
 80089b2:	f833 1015 	ldrh.w	r1, [r3, r5, lsl #1]
 80089b6:	fbb0 f0f1 	udiv	r0, r0, r1
 80089ba:	0853      	lsrs	r3, r2, #1
 80089bc:	eb03 0340 	add.w	r3, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c0:	f64f 71ef 	movw	r1, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80089c4:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089c8:	f1a3 0210 	sub.w	r2, r3, #16
 80089cc:	428a      	cmp	r2, r1
 80089ce:	f63f af74 	bhi.w	80088ba <UART_SetConfig+0x6a>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d2:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
 80089d6:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80089d8:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80089da:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80089de:	4313      	orrs	r3, r2
 80089e0:	60cb      	str	r3, [r1, #12]
 80089e2:	e7de      	b.n	80089a2 <UART_SetConfig+0x152>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089e4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80089e8:	d049      	beq.n	8008a7e <UART_SetConfig+0x22e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ea:	f7ff f9ad 	bl	8007d48 <HAL_RCC_GetPCLK1Freq>
        break;
 80089ee:	e7a2      	b.n	8008936 <UART_SetConfig+0xe6>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80089f0:	4311      	orrs	r1, r2
 80089f2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 80089f6:	4930      	ldr	r1, [pc, #192]	@ (8008ab8 <UART_SetConfig+0x268>)
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80089f8:	f022 020f 	bic.w	r2, r2, #15
 80089fc:	432a      	orrs	r2, r5
 80089fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a00:	f8d1 3088 	ldr.w	r3, [r1, #136]	@ 0x88
 8008a04:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008a08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008a0c:	d046      	beq.n	8008a9c <UART_SetConfig+0x24c>
 8008a0e:	d82f      	bhi.n	8008a70 <UART_SetConfig+0x220>
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d03d      	beq.n	8008a90 <UART_SetConfig+0x240>
        pclk = HAL_RCC_GetSysClockFreq();
 8008a14:	f7ff f856 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 8008a18:	2800      	cmp	r0, #0
 8008a1a:	d0c2      	beq.n	80089a2 <UART_SetConfig+0x152>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a1c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a1e:	6866      	ldr	r6, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a20:	4b26      	ldr	r3, [pc, #152]	@ (8008abc <UART_SetConfig+0x26c>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a22:	eb06 0146 	add.w	r1, r6, r6, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008a26:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
 8008a2a:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008a2e:	4299      	cmp	r1, r3
 8008a30:	f63f af43 	bhi.w	80088ba <UART_SetConfig+0x6a>
 8008a34:	ebb3 3f06 	cmp.w	r3, r6, lsl #12
 8008a38:	f63f af3f 	bhi.w	80088ba <UART_SetConfig+0x6a>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	4619      	mov	r1, r3
 8008a40:	f7f7 fc3e 	bl	80002c0 <__aeabi_uldivmod>
 8008a44:	0872      	lsrs	r2, r6, #1
 8008a46:	0203      	lsls	r3, r0, #8
 8008a48:	0209      	lsls	r1, r1, #8
 8008a4a:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 8008a4e:	1898      	adds	r0, r3, r2
 8008a50:	f141 0100 	adc.w	r1, r1, #0
 8008a54:	4632      	mov	r2, r6
 8008a56:	2300      	movs	r3, #0
 8008a58:	f7f7 fc32 	bl	80002c0 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a5c:	4b19      	ldr	r3, [pc, #100]	@ (8008ac4 <UART_SetConfig+0x274>)
 8008a5e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 8008a62:	429a      	cmp	r2, r3
 8008a64:	f63f af29 	bhi.w	80088ba <UART_SetConfig+0x6a>
 8008a68:	e799      	b.n	800899e <UART_SetConfig+0x14e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a6a:	2bc0      	cmp	r3, #192	@ 0xc0
 8008a6c:	d082      	beq.n	8008974 <UART_SetConfig+0x124>
 8008a6e:	e724      	b.n	80088ba <UART_SetConfig+0x6a>
 8008a70:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008a74:	f47f af21 	bne.w	80088ba <UART_SetConfig+0x6a>
        pclk = (uint32_t) LSE_VALUE;
 8008a78:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8008a7c:	e7cf      	b.n	8008a1e <UART_SetConfig+0x1ce>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a7e:	f7ff f963 	bl	8007d48 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8008a82:	2800      	cmp	r0, #0
 8008a84:	d08d      	beq.n	80089a2 <UART_SetConfig+0x152>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a86:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008a88:	e791      	b.n	80089ae <UART_SetConfig+0x15e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a8a:	f7ff f96f 	bl	8007d6c <HAL_RCC_GetPCLK2Freq>
        break;
 8008a8e:	e7f8      	b.n	8008a82 <UART_SetConfig+0x232>
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a90:	f7ff f95a 	bl	8007d48 <HAL_RCC_GetPCLK1Freq>
        break;
 8008a94:	e7c0      	b.n	8008a18 <UART_SetConfig+0x1c8>
        pclk = HAL_RCC_GetSysClockFreq();
 8008a96:	f7ff f815 	bl	8007ac4 <HAL_RCC_GetSysClockFreq>
        break;
 8008a9a:	e7f2      	b.n	8008a82 <UART_SetConfig+0x232>
        pclk = (uint32_t) HSI_VALUE;
 8008a9c:	4808      	ldr	r0, [pc, #32]	@ (8008ac0 <UART_SetConfig+0x270>)
 8008a9e:	e7be      	b.n	8008a1e <UART_SetConfig+0x1ce>
 8008aa0:	cfff69f3 	.word	0xcfff69f3
 8008aa4:	40008000 	.word	0x40008000
 8008aa8:	40013800 	.word	0x40013800
 8008aac:	40004400 	.word	0x40004400
 8008ab0:	40004800 	.word	0x40004800
 8008ab4:	40004c00 	.word	0x40004c00
 8008ab8:	40021000 	.word	0x40021000
 8008abc:	0800c1cc 	.word	0x0800c1cc
 8008ac0:	00f42400 	.word	0x00f42400
 8008ac4:	000ffcff 	.word	0x000ffcff

08008ac8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ac8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8008aca:	071a      	lsls	r2, r3, #28
{
 8008acc:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ace:	d506      	bpl.n	8008ade <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ad0:	6801      	ldr	r1, [r0, #0]
 8008ad2:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 8008ad4:	684a      	ldr	r2, [r1, #4]
 8008ad6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008ada:	4322      	orrs	r2, r4
 8008adc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ade:	07dc      	lsls	r4, r3, #31
 8008ae0:	d506      	bpl.n	8008af0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ae2:	6801      	ldr	r1, [r0, #0]
 8008ae4:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 8008ae6:	684a      	ldr	r2, [r1, #4]
 8008ae8:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8008aec:	4322      	orrs	r2, r4
 8008aee:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008af0:	0799      	lsls	r1, r3, #30
 8008af2:	d506      	bpl.n	8008b02 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008af4:	6801      	ldr	r1, [r0, #0]
 8008af6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 8008af8:	684a      	ldr	r2, [r1, #4]
 8008afa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8008afe:	4322      	orrs	r2, r4
 8008b00:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b02:	075a      	lsls	r2, r3, #29
 8008b04:	d506      	bpl.n	8008b14 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b06:	6801      	ldr	r1, [r0, #0]
 8008b08:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 8008b0a:	684a      	ldr	r2, [r1, #4]
 8008b0c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008b10:	4322      	orrs	r2, r4
 8008b12:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b14:	06dc      	lsls	r4, r3, #27
 8008b16:	d506      	bpl.n	8008b26 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b18:	6801      	ldr	r1, [r0, #0]
 8008b1a:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 8008b1c:	688a      	ldr	r2, [r1, #8]
 8008b1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008b22:	4322      	orrs	r2, r4
 8008b24:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b26:	0699      	lsls	r1, r3, #26
 8008b28:	d506      	bpl.n	8008b38 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b2a:	6801      	ldr	r1, [r0, #0]
 8008b2c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 8008b2e:	688a      	ldr	r2, [r1, #8]
 8008b30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b34:	4322      	orrs	r2, r4
 8008b36:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b38:	065a      	lsls	r2, r3, #25
 8008b3a:	d509      	bpl.n	8008b50 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b3c:	6801      	ldr	r1, [r0, #0]
 8008b3e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8008b40:	684a      	ldr	r2, [r1, #4]
 8008b42:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8008b46:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b48:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b4c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b4e:	d00b      	beq.n	8008b68 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b50:	061b      	lsls	r3, r3, #24
 8008b52:	d506      	bpl.n	8008b62 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b54:	6802      	ldr	r2, [r0, #0]
 8008b56:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 8008b58:	6853      	ldr	r3, [r2, #4]
 8008b5a:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6053      	str	r3, [r2, #4]
}
 8008b62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b66:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b68:	684a      	ldr	r2, [r1, #4]
 8008b6a:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 8008b6c:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 8008b70:	4322      	orrs	r2, r4
 8008b72:	604a      	str	r2, [r1, #4]
 8008b74:	e7ec      	b.n	8008b50 <UART_AdvFeatureConfig+0x88>
 8008b76:	bf00      	nop

08008b78 <UART_CheckIdleState>:
{
 8008b78:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7a:	2300      	movs	r3, #0
{
 8008b7c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b7e:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 8008b82:	f7fc fbe9 	bl	8005358 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b86:	6822      	ldr	r2, [r4, #0]
 8008b88:	6813      	ldr	r3, [r2, #0]
 8008b8a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 8008b8c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b8e:	d40f      	bmi.n	8008bb0 <UART_CheckIdleState+0x38>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b90:	6813      	ldr	r3, [r2, #0]
 8008b92:	0759      	lsls	r1, r3, #29
 8008b94:	d431      	bmi.n	8008bfa <UART_CheckIdleState+0x82>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b96:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8008b98:	2220      	movs	r2, #32
 8008b9a:	f8c4 2088 	str.w	r2, [r4, #136]	@ 0x88
  return HAL_OK;
 8008b9e:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8008ba0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ba4:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ba6:	6723      	str	r3, [r4, #112]	@ 0x70
      __HAL_UNLOCK(huart);
 8008ba8:	2300      	movs	r3, #0
 8008baa:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 8008bae:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bb0:	69d3      	ldr	r3, [r2, #28]
 8008bb2:	0298      	lsls	r0, r3, #10
 8008bb4:	d4ec      	bmi.n	8008b90 <UART_CheckIdleState+0x18>
 8008bb6:	e00c      	b.n	8008bd2 <UART_CheckIdleState+0x5a>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bb8:	6819      	ldr	r1, [r3, #0]
 8008bba:	0749      	lsls	r1, r1, #29
 8008bbc:	461a      	mov	r2, r3
 8008bbe:	d505      	bpl.n	8008bcc <UART_CheckIdleState+0x54>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008bc0:	69d9      	ldr	r1, [r3, #28]
 8008bc2:	0708      	lsls	r0, r1, #28
 8008bc4:	d44a      	bmi.n	8008c5c <UART_CheckIdleState+0xe4>
          /* Process Unlocked */
          __HAL_UNLOCK(huart);

          return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008bc6:	69d9      	ldr	r1, [r3, #28]
 8008bc8:	0509      	lsls	r1, r1, #20
 8008bca:	d475      	bmi.n	8008cb8 <UART_CheckIdleState+0x140>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	0298      	lsls	r0, r3, #10
 8008bd0:	d4de      	bmi.n	8008b90 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bd2:	f7fc fbc1 	bl	8005358 <HAL_GetTick>
 8008bd6:	1b43      	subs	r3, r0, r5
 8008bd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008bdc:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008bde:	d3eb      	bcc.n	8008bb8 <UART_CheckIdleState+0x40>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be8:	e843 2100 	strex	r1, r2, [r3]
 8008bec:	2900      	cmp	r1, #0
 8008bee:	d1f7      	bne.n	8008be0 <UART_CheckIdleState+0x68>
      huart->gState = HAL_UART_STATE_READY;
 8008bf0:	2320      	movs	r3, #32
 8008bf2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 8008bf6:	2003      	movs	r0, #3
 8008bf8:	e7d6      	b.n	8008ba8 <UART_CheckIdleState+0x30>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bfa:	69d3      	ldr	r3, [r2, #28]
 8008bfc:	025b      	lsls	r3, r3, #9
 8008bfe:	d4ca      	bmi.n	8008b96 <UART_CheckIdleState+0x1e>
 8008c00:	e00d      	b.n	8008c1e <UART_CheckIdleState+0xa6>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	0750      	lsls	r0, r2, #29
 8008c06:	d507      	bpl.n	8008c18 <UART_CheckIdleState+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c08:	69da      	ldr	r2, [r3, #28]
 8008c0a:	0711      	lsls	r1, r2, #28
 8008c0c:	f100 8082 	bmi.w	8008d14 <UART_CheckIdleState+0x19c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c10:	69da      	ldr	r2, [r3, #28]
 8008c12:	0512      	lsls	r2, r2, #20
 8008c14:	f100 80ac 	bmi.w	8008d70 <UART_CheckIdleState+0x1f8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c18:	69db      	ldr	r3, [r3, #28]
 8008c1a:	025b      	lsls	r3, r3, #9
 8008c1c:	d4bb      	bmi.n	8008b96 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c1e:	f7fc fb9b 	bl	8005358 <HAL_GetTick>
 8008c22:	1b43      	subs	r3, r0, r5
 8008c24:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	d3ea      	bcc.n	8008c02 <UART_CheckIdleState+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c30:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	e843 2100 	strex	r1, r2, [r3]
 8008c38:	2900      	cmp	r1, #0
 8008c3a:	d1f7      	bne.n	8008c2c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c3c:	f103 0208 	add.w	r2, r3, #8
 8008c40:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c44:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c48:	f103 0008 	add.w	r0, r3, #8
 8008c4c:	e840 2100 	strex	r1, r2, [r0]
 8008c50:	2900      	cmp	r1, #0
 8008c52:	d1f3      	bne.n	8008c3c <UART_CheckIdleState+0xc4>
      huart->RxState = HAL_UART_STATE_READY;
 8008c54:	2320      	movs	r3, #32
 8008c56:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 8008c5a:	e7cc      	b.n	8008bf6 <UART_CheckIdleState+0x7e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c5c:	2208      	movs	r2, #8
 8008c5e:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c60:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c64:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c68:	e843 2100 	strex	r1, r2, [r3]
 8008c6c:	2900      	cmp	r1, #0
 8008c6e:	d1f7      	bne.n	8008c60 <UART_CheckIdleState+0xe8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c70:	4856      	ldr	r0, [pc, #344]	@ (8008dcc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	f103 0208 	add.w	r2, r3, #8
 8008c76:	e852 2f00 	ldrex	r2, [r2]
 8008c7a:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7c:	f103 0508 	add.w	r5, r3, #8
 8008c80:	e845 2100 	strex	r1, r2, [r5]
 8008c84:	2900      	cmp	r1, #0
 8008c86:	d1f4      	bne.n	8008c72 <UART_CheckIdleState+0xfa>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c88:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008c8a:	2a01      	cmp	r2, #1
 8008c8c:	d00b      	beq.n	8008ca6 <UART_CheckIdleState+0x12e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c8e:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008c90:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c92:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008c94:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c98:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c9a:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008c9c:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008ca0:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008ca4:	e79c      	b.n	8008be0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008caa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cae:	e843 2100 	strex	r1, r2, [r3]
 8008cb2:	2900      	cmp	r1, #0
 8008cb4:	d1f7      	bne.n	8008ca6 <UART_CheckIdleState+0x12e>
 8008cb6:	e7ea      	b.n	8008c8e <UART_CheckIdleState+0x116>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cb8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008cbc:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cbe:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cc2:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc6:	e843 2100 	strex	r1, r2, [r3]
 8008cca:	2900      	cmp	r1, #0
 8008ccc:	d1f7      	bne.n	8008cbe <UART_CheckIdleState+0x146>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008cce:	483f      	ldr	r0, [pc, #252]	@ (8008dcc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cd0:	f103 0208 	add.w	r2, r3, #8
 8008cd4:	e852 2f00 	ldrex	r2, [r2]
 8008cd8:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cda:	f103 0508 	add.w	r5, r3, #8
 8008cde:	e845 2100 	strex	r1, r2, [r5]
 8008ce2:	2900      	cmp	r1, #0
 8008ce4:	d1f4      	bne.n	8008cd0 <UART_CheckIdleState+0x158>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce6:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008ce8:	2a01      	cmp	r2, #1
 8008cea:	d00a      	beq.n	8008d02 <UART_CheckIdleState+0x18a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cec:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008cee:	2120      	movs	r1, #32
 8008cf0:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008cf4:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf6:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008cf8:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008cfc:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008d00:	e76e      	b.n	8008be0 <UART_CheckIdleState+0x68>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d06:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d0a:	e843 2100 	strex	r1, r2, [r3]
 8008d0e:	2900      	cmp	r1, #0
 8008d10:	d1f7      	bne.n	8008d02 <UART_CheckIdleState+0x18a>
 8008d12:	e7eb      	b.n	8008cec <UART_CheckIdleState+0x174>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d14:	2208      	movs	r2, #8
 8008d16:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d18:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d1c:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d20:	e843 2100 	strex	r1, r2, [r3]
 8008d24:	2900      	cmp	r1, #0
 8008d26:	d1f7      	bne.n	8008d18 <UART_CheckIdleState+0x1a0>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d28:	4828      	ldr	r0, [pc, #160]	@ (8008dcc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2a:	f103 0208 	add.w	r2, r3, #8
 8008d2e:	e852 2f00 	ldrex	r2, [r2]
 8008d32:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d34:	f103 0508 	add.w	r5, r3, #8
 8008d38:	e845 2100 	strex	r1, r2, [r5]
 8008d3c:	2900      	cmp	r1, #0
 8008d3e:	d1f4      	bne.n	8008d2a <UART_CheckIdleState+0x1b2>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d40:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008d42:	2a01      	cmp	r2, #1
 8008d44:	d00b      	beq.n	8008d5e <UART_CheckIdleState+0x1e6>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d46:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008d48:	2020      	movs	r0, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d4a:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8008d4c:	f8c4 008c 	str.w	r0, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008d50:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d52:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008d54:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d58:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_ERROR;
 8008d5c:	e766      	b.n	8008c2c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d62:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d66:	e843 2100 	strex	r1, r2, [r3]
 8008d6a:	2900      	cmp	r1, #0
 8008d6c:	d1f7      	bne.n	8008d5e <UART_CheckIdleState+0x1e6>
 8008d6e:	e7ea      	b.n	8008d46 <UART_CheckIdleState+0x1ce>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d70:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d74:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d76:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d7a:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	e843 2100 	strex	r1, r2, [r3]
 8008d82:	2900      	cmp	r1, #0
 8008d84:	d1f7      	bne.n	8008d76 <UART_CheckIdleState+0x1fe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d86:	4811      	ldr	r0, [pc, #68]	@ (8008dcc <UART_CheckIdleState+0x254>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	f103 0208 	add.w	r2, r3, #8
 8008d8c:	e852 2f00 	ldrex	r2, [r2]
 8008d90:	4002      	ands	r2, r0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d92:	f103 0508 	add.w	r5, r3, #8
 8008d96:	e845 2100 	strex	r1, r2, [r5]
 8008d9a:	2900      	cmp	r1, #0
 8008d9c:	d1f4      	bne.n	8008d88 <UART_CheckIdleState+0x210>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d9e:	6ee2      	ldr	r2, [r4, #108]	@ 0x6c
 8008da0:	2a01      	cmp	r2, #1
 8008da2:	d00a      	beq.n	8008dba <UART_CheckIdleState+0x242>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da4:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008da6:	2120      	movs	r1, #32
 8008da8:	f8c4 108c 	str.w	r1, [r4, #140]	@ 0x8c
  huart->RxISR = NULL;
 8008dac:	6762      	str	r2, [r4, #116]	@ 0x74
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dae:	66e2      	str	r2, [r4, #108]	@ 0x6c
          __HAL_UNLOCK(huart);
 8008db0:	f884 2084 	strb.w	r2, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db4:	f8c4 1090 	str.w	r1, [r4, #144]	@ 0x90
          return HAL_TIMEOUT;
 8008db8:	e738      	b.n	8008c2c <UART_CheckIdleState+0xb4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dbe:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	e843 2100 	strex	r1, r2, [r3]
 8008dc6:	2900      	cmp	r1, #0
 8008dc8:	d1f7      	bne.n	8008dba <UART_CheckIdleState+0x242>
 8008dca:	e7eb      	b.n	8008da4 <UART_CheckIdleState+0x22c>
 8008dcc:	effffffe 	.word	0xeffffffe

08008dd0 <HAL_UART_Init>:
  if (huart == NULL)
 8008dd0:	b380      	cbz	r0, 8008e34 <HAL_UART_Init+0x64>
  if (huart->gState == HAL_UART_STATE_RESET)
 8008dd2:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 8008dd6:	b510      	push	{r4, lr}
 8008dd8:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8008dda:	b333      	cbz	r3, 8008e2a <HAL_UART_Init+0x5a>
  __HAL_UART_DISABLE(huart);
 8008ddc:	6822      	ldr	r2, [r4, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dde:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
  huart->gState = HAL_UART_STATE_BUSY;
 8008de0:	2324      	movs	r3, #36	@ 0x24
 8008de2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 8008de6:	6813      	ldr	r3, [r2, #0]
 8008de8:	f023 0301 	bic.w	r3, r3, #1
 8008dec:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008dee:	b9c1      	cbnz	r1, 8008e22 <HAL_UART_Init+0x52>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008df0:	4620      	mov	r0, r4
 8008df2:	f7ff fd2d 	bl	8008850 <UART_SetConfig>
 8008df6:	2801      	cmp	r0, #1
 8008df8:	d011      	beq.n	8008e1e <HAL_UART_Init+0x4e>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008e02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e04:	689a      	ldr	r2, [r3, #8]
 8008e06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008e0a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8008e12:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8008e14:	601a      	str	r2, [r3, #0]
}
 8008e16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8008e1a:	f7ff bead 	b.w	8008b78 <UART_CheckIdleState>
}
 8008e1e:	2001      	movs	r0, #1
 8008e20:	bd10      	pop	{r4, pc}
    UART_AdvFeatureConfig(huart);
 8008e22:	4620      	mov	r0, r4
 8008e24:	f7ff fe50 	bl	8008ac8 <UART_AdvFeatureConfig>
 8008e28:	e7e2      	b.n	8008df0 <HAL_UART_Init+0x20>
    huart->Lock = HAL_UNLOCKED;
 8008e2a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 8008e2e:	f7fc f863 	bl	8004ef8 <HAL_UART_MspInit>
 8008e32:	e7d3      	b.n	8008ddc <HAL_UART_Init+0xc>
}
 8008e34:	2001      	movs	r0, #1
 8008e36:	4770      	bx	lr

08008e38 <HAL_UARTEx_DisableFifoMode>:

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e38:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d017      	beq.n	8008e70 <HAL_UARTEx_DisableFifoMode+0x38>

  huart->gState = HAL_UART_STATE_BUSY;

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e40:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008e42:	2324      	movs	r3, #36	@ 0x24
{
 8008e44:	b410      	push	{r4}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e46:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e4a:	6811      	ldr	r1, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e4c:	6814      	ldr	r4, [r2, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e4e:	2300      	movs	r3, #0
  __HAL_UART_DISABLE(huart);
 8008e50:	f024 0401 	bic.w	r4, r4, #1
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e54:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 8008e58:	6014      	str	r4, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e5a:	6643      	str	r3, [r0, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e5c:	6011      	str	r1, [r2, #0]

  huart->gState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e5e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 8008e62:	2220      	movs	r2, #32
 8008e64:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88

  return HAL_OK;
}
 8008e68:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8008e6c:	4618      	mov	r0, r3
}
 8008e6e:	4770      	bx	lr
  __HAL_LOCK(huart);
 8008e70:	2002      	movs	r0, #2
}
 8008e72:	4770      	bx	lr

08008e74 <HAL_UARTEx_SetTxFifoThreshold>:
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e74:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008e78:	2a01      	cmp	r2, #1
 8008e7a:	d037      	beq.n	8008eec <HAL_UARTEx_SetTxFifoThreshold+0x78>

  huart->gState = HAL_UART_STATE_BUSY;
 8008e7c:	4603      	mov	r3, r0

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e7e:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008e80:	2024      	movs	r0, #36	@ 0x24
{
 8008e82:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008e84:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e88:	6814      	ldr	r4, [r2, #0]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e8a:	6810      	ldr	r0, [r2, #0]
 8008e8c:	f020 0001 	bic.w	r0, r0, #1
 8008e90:	6010      	str	r0, [r2, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e92:	6890      	ldr	r0, [r2, #8]
 8008e94:	f020 4060 	bic.w	r0, r0, #3758096384	@ 0xe0000000
 8008e98:	4301      	orrs	r1, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e9a:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e9c:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008e9e:	b310      	cbz	r0, 8008ee6 <HAL_UARTEx_SetTxFifoThreshold+0x72>
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008ea0:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008ea2:	6890      	ldr	r0, [r2, #8]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
 8008ea4:	4d12      	ldr	r5, [pc, #72]	@ (8008ef0 <HAL_UARTEx_SetTxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ea6:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008eaa:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008eae:	4911      	ldr	r1, [pc, #68]	@ (8008ef4 <HAL_UARTEx_SetTxFifoThreshold+0x80>)
 8008eb0:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008eb4:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008eb8:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ebc:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ec0:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec2:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008ec4:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ec8:	fbb1 f1f5 	udiv	r1, r1, r5
 8008ecc:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8008ed0:	2100      	movs	r1, #0
 8008ed2:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008ed6:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008ed8:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008eda:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8008ede:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008ee0:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8008ee4:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008ee6:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008ee8:	4608      	mov	r0, r1
 8008eea:	e7ef      	b.n	8008ecc <HAL_UARTEx_SetTxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008eec:	2002      	movs	r0, #2
}
 8008eee:	4770      	bx	lr
 8008ef0:	0800c1e4 	.word	0x0800c1e4
 8008ef4:	0800c1ec 	.word	0x0800c1ec

08008ef8 <HAL_UARTEx_SetRxFifoThreshold>:
  __HAL_LOCK(huart);
 8008ef8:	f890 2084 	ldrb.w	r2, [r0, #132]	@ 0x84
 8008efc:	2a01      	cmp	r2, #1
 8008efe:	d037      	beq.n	8008f70 <HAL_UARTEx_SetRxFifoThreshold+0x78>
  huart->gState = HAL_UART_STATE_BUSY;
 8008f00:	4603      	mov	r3, r0
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f02:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008f04:	2024      	movs	r0, #36	@ 0x24
{
 8008f06:	b530      	push	{r4, r5, lr}
  huart->gState = HAL_UART_STATE_BUSY;
 8008f08:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008f0c:	6814      	ldr	r4, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8008f0e:	6810      	ldr	r0, [r2, #0]
 8008f10:	f020 0001 	bic.w	r0, r0, #1
 8008f14:	6010      	str	r0, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f16:	6890      	ldr	r0, [r2, #8]
 8008f18:	f020 6060 	bic.w	r0, r0, #234881024	@ 0xe000000
 8008f1c:	4301      	orrs	r1, r0
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f1e:	6e58      	ldr	r0, [r3, #100]	@ 0x64
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008f20:	6091      	str	r1, [r2, #8]
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f22:	b310      	cbz	r0, 8008f6a <HAL_UARTEx_SetRxFifoThreshold+0x72>
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f24:	6891      	ldr	r1, [r2, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f26:	6890      	ldr	r0, [r2, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f28:	4d12      	ldr	r5, [pc, #72]	@ (8008f74 <HAL_UARTEx_SetRxFifoThreshold+0x7c>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f2a:	f3c1 6c42 	ubfx	ip, r1, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f2e:	ea4f 7e50 	mov.w	lr, r0, lsr #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f32:	4911      	ldr	r1, [pc, #68]	@ (8008f78 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008f34:	f811 000e 	ldrb.w	r0, [r1, lr]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f38:	f811 100c 	ldrb.w	r1, [r1, ip]
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f3c:	f815 e00e 	ldrb.w	lr, [r5, lr]
                               (uint16_t)denominator[rx_fifo_threshold];
 8008f40:	f815 500c 	ldrb.w	r5, [r5, ip]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f44:	00c0      	lsls	r0, r0, #3
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f46:	00c9      	lsls	r1, r1, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f48:	fbb0 f0fe 	udiv	r0, r0, lr
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008f4c:	fbb1 f1f5 	udiv	r1, r1, r5
 8008f50:	f8a3 1068 	strh.w	r1, [r3, #104]	@ 0x68
  __HAL_UNLOCK(huart);
 8008f54:	2100      	movs	r1, #0
 8008f56:	f8a3 006a 	strh.w	r0, [r3, #106]	@ 0x6a
  huart->gState = HAL_UART_STATE_READY;
 8008f5a:	2520      	movs	r5, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f5c:	6014      	str	r4, [r2, #0]
  __HAL_UNLOCK(huart);
 8008f5e:	f883 1084 	strb.w	r1, [r3, #132]	@ 0x84
  return HAL_OK;
 8008f62:	4608      	mov	r0, r1
  huart->gState = HAL_UART_STATE_READY;
 8008f64:	f8c3 5088 	str.w	r5, [r3, #136]	@ 0x88
}
 8008f68:	bd30      	pop	{r4, r5, pc}
    huart->NbRxDataToProcess = 1U;
 8008f6a:	2101      	movs	r1, #1
    huart->NbTxDataToProcess = 1U;
 8008f6c:	4608      	mov	r0, r1
 8008f6e:	e7ef      	b.n	8008f50 <HAL_UARTEx_SetRxFifoThreshold+0x58>
  __HAL_LOCK(huart);
 8008f70:	2002      	movs	r0, #2
}
 8008f72:	4770      	bx	lr
 8008f74:	0800c1e4 	.word	0x0800c1e4
 8008f78:	0800c1ec 	.word	0x0800c1ec

08008f7c <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8008f7c:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8008f7e:	8840      	ldrh	r0, [r0, #2]
 8008f80:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8008f84:	0c00      	lsrs	r0, r0, #16
 8008f86:	4770      	bx	lr

08008f88 <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8008f88:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8008f8a:	8803      	ldrh	r3, [r0, #0]
 8008f8c:	140d      	asrs	r5, r1, #16
 8008f8e:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8008f90:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8008f94:	fb03 f303 	mul.w	r3, r3, r3
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8008f98:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8008f9c:	428b      	cmp	r3, r1
{
 8008f9e:	b084      	sub	sp, #16
    if (square_sum > square_limit)
 8008fa0:	da0f      	bge.n	8008fc2 <Circle_Limitation+0x3a>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8008fa2:	8846      	ldrh	r6, [r0, #2]
 8008fa4:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8008fa8:	4282      	cmp	r2, r0
 8008faa:	dd13      	ble.n	8008fd4 <Circle_Limitation+0x4c>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8008fac:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8008fae:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8008fb2:	bfb8      	it	lt
 8008fb4:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8008fb6:	f7f9 f86b 	bl	8002090 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8008fba:	2c00      	cmp	r4, #0
        {
          /* Nothing to do */
        }
      }
      local_vqd.q = (int16_t)new_q;
      local_vqd.d = (int16_t)new_d;
 8008fbc:	b235      	sxth	r5, r6
        if (Vqd.q < 0)
 8008fbe:	db0e      	blt.n	8008fde <Circle_Limitation+0x56>
      local_vqd.q = (int16_t)new_q;
 8008fc0:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (local_vqd);
 8008fc2:	b2a4      	uxth	r4, r4
 8008fc4:	2000      	movs	r0, #0
 8008fc6:	f364 000f 	bfi	r0, r4, #0, #16
 8008fca:	b2ad      	uxth	r5, r5
 8008fcc:	f365 401f 	bfi	r0, r5, #16, #16
}
 8008fd0:	b004      	add	sp, #16
 8008fd2:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8008fd4:	1a98      	subs	r0, r3, r2
 8008fd6:	f7f9 f85b 	bl	8002090 <MCM_Sqrt>
        if (Vqd.q < 0)
 8008fda:	2c00      	cmp	r4, #0
 8008fdc:	daf0      	bge.n	8008fc0 <Circle_Limitation+0x38>
          new_q = - new_q;
 8008fde:	4240      	negs	r0, r0
      local_vqd.q = (int16_t)new_q;
 8008fe0:	b204      	sxth	r4, r0
      local_vqd.d = (int16_t)new_d;
 8008fe2:	e7ee      	b.n	8008fc2 <Circle_Limitation+0x3a>

08008fe4 <MCPA_dataLog>:
  * @brief  Allocates and fills buffer with asynchronous data to be sent to controller
  *
  * @param  *pHandle Pointer to the MCPA Handle
  */
void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008fe6:	7fc3      	ldrb	r3, [r0, #31]
 8008fe8:	f890 2022 	ldrb.w	r2, [r0, #34]	@ 0x22
 8008fec:	429a      	cmp	r2, r3
{
 8008fee:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8008ff0:	d002      	beq.n	8008ff8 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* Nothing to log just waiting next call to MCPA_datalog */
      pHandle->HFIndex++;
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8008ff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8008ff8:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8008ffa:	2300      	movs	r3, #0
 8008ffc:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8008ffe:	2d00      	cmp	r5, #0
 8009000:	d02f      	beq.n	8009062 <MCPA_dataLog+0x7e>
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8009002:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8009004:	8ba2      	ldrh	r2, [r4, #28]
 8009006:	42aa      	cmp	r2, r5
 8009008:	d31a      	bcc.n	8009040 <MCPA_dataLog+0x5c>
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800900a:	f894 6024 	ldrb.w	r6, [r4, #36]	@ 0x24
        logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800900e:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009010:	2e00      	cmp	r6, #0
 8009012:	d07a      	beq.n	800910a <MCPA_dataLog+0x126>
 8009014:	68a2      	ldr	r2, [r4, #8]
 8009016:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 800901a:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]) ; //cstat !MISRAC2012-Rule-11.5
 800901c:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8009020:	8800      	ldrh	r0, [r0, #0]
 8009022:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8009026:	8b25      	ldrh	r5, [r4, #24]
 8009028:	3502      	adds	r5, #2
 800902a:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 800902c:	459c      	cmp	ip, r3
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 800902e:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8009030:	d1f4      	bne.n	800901c <MCPA_dataLog+0x38>
        if (pHandle->MFRateBuff < 254U)
 8009032:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009036:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8009038:	2bfd      	cmp	r3, #253	@ 0xfd
 800903a:	d96b      	bls.n	8009114 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800903c:	4295      	cmp	r5, r2
 800903e:	d9da      	bls.n	8008ff6 <MCPA_dataLog+0x12>
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8009040:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8009044:	2bfe      	cmp	r3, #254	@ 0xfe
 8009046:	d04a      	beq.n	80090de <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009048:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 800904c:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer,
 800904e:	8b22      	ldrh	r2, [r4, #24]
 8009050:	6820      	ldr	r0, [r4, #0]
 8009052:	3202      	adds	r2, #2
 8009054:	2309      	movs	r3, #9
 8009056:	6845      	ldr	r5, [r0, #4]
 8009058:	b292      	uxth	r2, r2
 800905a:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	8323      	strh	r3, [r4, #24]
}
 8009060:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8009062:	4601      	mov	r1, r0
 8009064:	2209      	movs	r2, #9
 8009066:	f851 0b14 	ldr.w	r0, [r1], #20
 800906a:	6803      	ldr	r3, [r0, #0]
 800906c:	4798      	blx	r3
 800906e:	b390      	cbz	r0, 80090d6 <MCPA_dataLog+0xf2>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009070:	4b3a      	ldr	r3, [pc, #232]	@ (800915c <MCPA_dataLog+0x178>)
          logValue = (uint32_t *)pHandle->currentBuffer; //cstat !MISRAC2012-Rule-11.3
 8009072:	6961      	ldr	r1, [r4, #20]
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8009078:	f894 0029 	ldrb.w	r0, [r4, #41]	@ 0x29
 800907c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer */
 8009080:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8009084:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8009086:	4282      	cmp	r2, r0
          pHandle->bufferIndex = 4U;
 8009088:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 800908a:	d101      	bne.n	8009090 <MCPA_dataLog+0xac>
 800908c:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 800908e:	e7b9      	b.n	8009004 <MCPA_dataLog+0x20>
            pHandle->MFNumBuff           = pHandle->MFNum;
 8009090:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            pHandle->HFNumBuff           = pHandle->HFNum;
 8009094:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
            pHandle->MFRateBuff          = pHandle->MFRate;
 8009098:	f894 1025 	ldrb.w	r1, [r4, #37]	@ 0x25
            pHandle->HFRateBuff          = pHandle->HFRate;
 800909c:	f894 5021 	ldrb.w	r5, [r4, #33]	@ 0x21
            pHandle->HFNumBuff           = pHandle->HFNum;
 80090a0:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
            pHandle->MFNumBuff           = pHandle->MFNum;
 80090a4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
                         ((uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum) * 4U); /* We store pointer here,
 80090a8:	441a      	add	r2, r3
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80090aa:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MarkBuff            = pHandle->Mark;
 80090ac:	f884 002a 	strb.w	r0, [r4, #42]	@ 0x2a
            pHandle->MFRateBuff          = pHandle->MFRate;
 80090b0:	f884 1026 	strb.w	r1, [r4, #38]	@ 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 80090b4:	83a3      	strh	r3, [r4, #28]
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80090b6:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 80090ba:	0092      	lsls	r2, r2, #2
            pHandle->HFRateBuff          = pHandle->HFRate;
 80090bc:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
            (void)memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable,
 80090c0:	f002 f844 	bl	800b14c <memcpy>
                         (uint32_t)pHandle->HFNum + (uint32_t)pHandle->MFNum); /* 1 size byte per ID */
 80090c4:	f894 2023 	ldrb.w	r2, [r4, #35]	@ 0x23
 80090c8:	f894 3027 	ldrb.w	r3, [r4, #39]	@ 0x27
            (void)memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable,
 80090cc:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80090d0:	441a      	add	r2, r3
 80090d2:	f002 f83b 	bl	800b14c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80090d6:	8b25      	ldrh	r5, [r4, #24]
 80090d8:	2d00      	cmp	r5, #0
 80090da:	d192      	bne.n	8009002 <MCPA_dataLog+0x1e>
}
 80090dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80090de:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 80090e2:	f894 0028 	ldrb.w	r0, [r4, #40]	@ 0x28
 80090e6:	4418      	add	r0, r3
 80090e8:	4283      	cmp	r3, r0
 80090ea:	daad      	bge.n	8009048 <MCPA_dataLog+0x64>
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80090ec:	68a7      	ldr	r7, [r4, #8]
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80090ee:	6926      	ldr	r6, [r4, #16]
            *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80090f0:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 80090f4:	6812      	ldr	r2, [r2, #0]
 80090f6:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80090f8:	1c5a      	adds	r2, r3, #1
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80090fa:	5cf3      	ldrb	r3, [r6, r3]
 80090fc:	442b      	add	r3, r5
 80090fe:	b29d      	uxth	r5, r3
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009100:	b2d3      	uxtb	r3, r2
 8009102:	4283      	cmp	r3, r0
            pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8009104:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009106:	dbf3      	blt.n	80090f0 <MCPA_dataLog+0x10c>
 8009108:	e79e      	b.n	8009048 <MCPA_dataLog+0x64>
        if (pHandle->MFRateBuff < 254U)
 800910a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 800910e:	2bfd      	cmp	r3, #253	@ 0xfd
 8009110:	f63f af71 	bhi.w	8008ff6 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8009114:	f894 0020 	ldrb.w	r0, [r4, #32]
 8009118:	4298      	cmp	r0, r3
 800911a:	d005      	beq.n	8009128 <MCPA_dataLog+0x144>
            pHandle->MFIndex ++;
 800911c:	3001      	adds	r0, #1
 800911e:	f884 0020 	strb.w	r0, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8009122:	42aa      	cmp	r2, r5
 8009124:	d390      	bcc.n	8009048 <MCPA_dataLog+0x64>
}
 8009126:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009128:	f894 7028 	ldrb.w	r7, [r4, #40]	@ 0x28
 800912c:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 800912e:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009130:	42be      	cmp	r6, r7
            pHandle->MFIndex = 0U;
 8009132:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009136:	daf4      	bge.n	8009122 <MCPA_dataLog+0x13e>
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009138:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800913c:	f8d4 c010 	ldr.w	ip, [r4, #16]
              *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8009140:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009148:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800914c:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800914e:	442b      	add	r3, r5
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009150:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009152:	b29d      	uxth	r5, r3
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009154:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8009156:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 8009158:	dbf2      	blt.n	8009140 <MCPA_dataLog+0x15c>
 800915a:	e76f      	b.n	800903c <MCPA_dataLog+0x58>
 800915c:	20001c10 	.word	0x20001c10

08009160 <MCPA_flushDataLog>:
#endif
    uint32_t *logValue;
    uint16_t *logValue16;
    uint8_t i;

    if (pHandle->bufferIndex > 0U)
 8009160:	8b03      	ldrh	r3, [r0, #24]
 8009162:	b19b      	cbz	r3, 800918c <MCPA_flushDataLog+0x2c>
{
 8009164:	b570      	push	{r4, r5, r6, lr}
    {  /* If buffer is allocated, we must send it */
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 8009166:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
                                          proper decoding */
      {
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
        {
         logValue = (uint32_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800916a:	6941      	ldr	r1, [r0, #20]
      if (pHandle->MFRateBuff == 254U) /* In case of flush, we must respect the packet format to allow
 800916c:	2afe      	cmp	r2, #254	@ 0xfe
 800916e:	4604      	mov	r4, r0
 8009170:	d00d      	beq.n	800918e <MCPA_flushDataLog+0x2e>
      else
      {
        /* Nothing to do */
      }
      logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
      *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 8009172:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009176:	52ca      	strh	r2, [r1, r3]
                                          the MARK */
      pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009178:	8b22      	ldrh	r2, [r4, #24]
 800917a:	6820      	ldr	r0, [r4, #0]
 800917c:	3202      	adds	r2, #2
 800917e:	2309      	movs	r3, #9
 8009180:	6845      	ldr	r5, [r0, #4]
 8009182:	b292      	uxth	r2, r2
 8009184:	47a8      	blx	r5
                                             pHandle->bufferIndex + 2U, MCTL_ASYNC);
      pHandle->bufferIndex = 0U;
 8009186:	2300      	movs	r3, #0
 8009188:	8323      	strh	r3, [r4, #24]
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 800918a:	bd70      	pop	{r4, r5, r6, pc}
 800918c:	4770      	bx	lr
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 800918e:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8009192:	f890 c028 	ldrb.w	ip, [r0, #40]	@ 0x28
 8009196:	4494      	add	ip, r2
 8009198:	4562      	cmp	r2, ip
 800919a:	daea      	bge.n	8009172 <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 800919c:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800919e:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *)pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80091a0:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 80091a4:	6800      	ldr	r0, [r0, #0]
 80091a6:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80091a8:	5ca8      	ldrb	r0, [r5, r2]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80091aa:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80091ac:	4403      	add	r3, r0
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80091ae:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80091b0:	b29b      	uxth	r3, r3
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80091b2:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80091b4:	8323      	strh	r3, [r4, #24]
        for (i = pHandle->HFNumBuff; i < (pHandle->MFNumBuff + pHandle->HFNumBuff); i++)
 80091b6:	dbf3      	blt.n	80091a0 <MCPA_flushDataLog+0x40>
 80091b8:	e7db      	b.n	8009172 <MCPA_flushDataLog+0x12>
 80091ba:	bf00      	nop

080091bc <MCPA_cfgLog>:
  *
  * @param  *pHandle Pointer to the MCPA Handle
  * @param  *cfgdata Configuration of the Async communication
  */
uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 80091bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
    uint16_t newID, buffSize;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80091c0:	880f      	ldrh	r7, [r1, #0]
{
 80091c2:	4604      	mov	r4, r0

    if (buffSize == 0U)
 80091c4:	2f00      	cmp	r7, #0
 80091c6:	d046      	beq.n	8009256 <MCPA_cfgLog+0x9a>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload)
 80091c8:	6803      	ldr	r3, [r0, #0]
 80091ca:	89db      	ldrh	r3, [r3, #14]
 80091cc:	42bb      	cmp	r3, r7
 80091ce:	d33f      	bcc.n	8009250 <MCPA_cfgLog+0x94>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 80091d0:	788b      	ldrb	r3, [r1, #2]
 80091d2:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 80091d6:	f891 8003 	ldrb.w	r8, [r1, #3]
 80091da:	f880 8023 	strb.w	r8, [r0, #35]	@ 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 80091de:	790b      	ldrb	r3, [r1, #4]
 80091e0:	f880 3025 	strb.w	r3, [r0, #37]	@ 0x25
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 80091e4:	794b      	ldrb	r3, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */

      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 80091e6:	7f82      	ldrb	r2, [r0, #30]
      pHandle->MFNum  = *((uint8_t *)&pCfgData[5]);
 80091e8:	f880 3027 	strb.w	r3, [r0, #39]	@ 0x27
      if ((pHandle->HFNum + pHandle->MFNum) <= pHandle->nbrOfDataLog)
 80091ec:	4443      	add	r3, r8
 80091ee:	4293      	cmp	r3, r2
 80091f0:	dc57      	bgt.n	80092a2 <MCPA_cfgLog+0xe6>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs */
 80091f2:	1d8e      	adds	r6, r1, #6
      {
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d057      	beq.n	80092a8 <MCPA_cfgLog+0xec>
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 80091f8:	f04f 0800 	mov.w	r8, #0
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80091fc:	4645      	mov	r5, r8
 80091fe:	e011      	b.n	8009224 <MCPA_cfgLog+0x68>
        {
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
          /* HF Data are fixed to 2 bytes */
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009200:	68e3      	ldr	r3, [r4, #12]
 8009202:	5558      	strb	r0, [r3, r5]
          pCfgData++; /* Point to the next UID */
          pCfgData++;
          logSize = logSize+pHandle->dataSizeTable[i];
 8009204:	68e2      	ldr	r2, [r4, #12]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009206:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 800920a:	f894 1027 	ldrb.w	r1, [r4, #39]	@ 0x27
          logSize = logSize+pHandle->dataSizeTable[i];
 800920e:	5d52      	ldrb	r2, [r2, r5]
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009210:	f105 0c01 	add.w	ip, r5, #1
 8009214:	fa5f f58c 	uxtb.w	r5, ip
 8009218:	440b      	add	r3, r1
          logSize = logSize+pHandle->dataSizeTable[i];
 800921a:	4442      	add	r2, r8
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 800921c:	429d      	cmp	r5, r3
          logSize = logSize+pHandle->dataSizeTable[i];
 800921e:	fa1f f882 	uxth.w	r8, r2
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 8009222:	da11      	bge.n	8009248 <MCPA_cfgLog+0x8c>
          newID = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8009224:	f836 9b02 	ldrh.w	r9, [r6], #2
          (void)RI_GetPtrReg(newID, &pHandle->dataPtrTable[i]);
 8009228:	6861      	ldr	r1, [r4, #4]
 800922a:	4648      	mov	r0, r9
 800922c:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8009230:	f7fa ffbe 	bl	80041b0 <RI_GetPtrReg>
          pHandle->dataSizeTable[i] = (i < pHandle->HFNum ) ? 2U : RI_GetIDSize(newID);
 8009234:	f894 3023 	ldrb.w	r3, [r4, #35]	@ 0x23
 8009238:	42ab      	cmp	r3, r5
 800923a:	f04f 0002 	mov.w	r0, #2
 800923e:	d8df      	bhi.n	8009200 <MCPA_cfgLog+0x44>
 8009240:	4648      	mov	r0, r9
 8009242:	f7fa ffa9 	bl	8004198 <RI_GetIDSize>
 8009246:	e7db      	b.n	8009200 <MCPA_cfgLog+0x44>
        }

        /* Smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp */
        if (buffSize < (logSize + 2U + 4U))
 8009248:	f108 0206 	add.w	r2, r8, #6
 800924c:	4297      	cmp	r7, r2
 800924e:	d210      	bcs.n	8009272 <MCPA_cfgLog+0xb6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8009250:	2009      	movs	r0, #9
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return (result);
}
 8009252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0U)
 8009256:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0U;
 8009258:	f880 7029 	strb.w	r7, [r0, #41]	@ 0x29
  if (pHandle->bufferIndex > 0U)
 800925c:	b9ab      	cbnz	r3, 800928a <MCPA_cfgLog+0xce>
  pHandle->bufferIndex = 0U;
 800925e:	2300      	movs	r3, #0
 8009260:	8323      	strh	r3, [r4, #24]
  pHandle->MarkBuff    = 0U;
 8009262:	f884 302a 	strb.w	r3, [r4, #42]	@ 0x2a
  pHandle->HFIndex     = 0U;
 8009266:	77e3      	strb	r3, [r4, #31]
  pHandle->HFRateBuff  = 0U; /* We do not want to miss any sample at the restart */
 8009268:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
  uint8_t result = MCP_CMD_OK;
 800926c:	2000      	movs	r0, #0
}
 800926e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          pHandle->bufferTxTrigger = buffSize-logSize - 2U; /* 2 is required to add the last Mark byte and NUL
 8009272:	3f02      	subs	r7, #2
 8009274:	eba7 0708 	sub.w	r7, r7, r8
 8009278:	8367      	strh	r7, [r4, #26]
          pHandle->Mark = *((uint8_t *)pCfgData);
 800927a:	7833      	ldrb	r3, [r6, #0]
 800927c:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
          if (0U == pHandle->Mark)
 8009280:	2b00      	cmp	r3, #0
 8009282:	d1f3      	bne.n	800926c <MCPA_cfgLog+0xb0>
  if (pHandle->bufferIndex > 0U)
 8009284:	8b23      	ldrh	r3, [r4, #24]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d0e9      	beq.n	800925e <MCPA_cfgLog+0xa2>
    logValue16 = (uint16_t *)&pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 800928a:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after
 800928c:	f894 202a 	ldrb.w	r2, [r4, #42]	@ 0x2a
 8009290:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer,
 8009292:	8b22      	ldrh	r2, [r4, #24]
 8009294:	6820      	ldr	r0, [r4, #0]
 8009296:	3202      	adds	r2, #2
 8009298:	6845      	ldr	r5, [r0, #4]
 800929a:	b292      	uxth	r2, r2
 800929c:	2309      	movs	r3, #9
 800929e:	47a8      	blx	r5
 80092a0:	e7dd      	b.n	800925e <MCPA_cfgLog+0xa2>
        result = MCP_ERROR_BAD_RAW_FORMAT;
 80092a2:	200a      	movs	r0, #10
}
 80092a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        for (i = 0; i < (pHandle->HFNum + pHandle->MFNum); i++)
 80092a8:	2206      	movs	r2, #6
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF) */
 80092aa:	4698      	mov	r8, r3
 80092ac:	e7ce      	b.n	800924c <MCPA_cfgLog+0x90>
 80092ae:	bf00      	nop

080092b0 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 )
 80092b0:	f9b0 1010 	ldrsh.w	r1, [r0, #16]
    {
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 80092b4:	8843      	ldrh	r3, [r0, #2]
 80092b6:	8982      	ldrh	r2, [r0, #12]
    if (pHandle->hSensitivity > 0 )
 80092b8:	2900      	cmp	r1, #0
 80092ba:	dd08      	ble.n	80092ce <NTC_SetFaultState+0x1e>
      if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d804      	bhi.n	80092ca <NTC_SetFaultState+0x1a>
      {
        hFault = MC_OVER_TEMP;
      }
      else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 80092c0:	89c2      	ldrh	r2, [r0, #14]
 80092c2:	429a      	cmp	r2, r3
 80092c4:	d908      	bls.n	80092d8 <NTC_SetFaultState+0x28>
      {
        hFault = MC_NO_ERROR;
 80092c6:	2000      	movs	r0, #0
 80092c8:	4770      	bx	lr
    }
    else
    {
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
      {
        hFault = MC_OVER_TEMP;
 80092ca:	2008      	movs	r0, #8
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (hFault);
}
 80092cc:	4770      	bx	lr
      if (pHandle->hAvTemp_d < pHandle->hOverTempThreshold)
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d3fb      	bcc.n	80092ca <NTC_SetFaultState+0x1a>
      else if (pHandle->hAvTemp_d > pHandle->hOverTempDeactThreshold)
 80092d2:	89c2      	ldrh	r2, [r0, #14]
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d3f6      	bcc.n	80092c6 <NTC_SetFaultState+0x16>
        hFault = pHandle->hFaultState;
 80092d8:	8900      	ldrh	r0, [r0, #8]
 80092da:	4770      	bx	lr

080092dc <NTC_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 80092dc:	7803      	ldrb	r3, [r0, #0]
 80092de:	b94b      	cbnz	r3, 80092f4 <NTC_Init+0x18>
    /* nothing to do */
  }
  else
  {
#endif
    if (pHandle->hSensitivity > 0 ) 
 80092e0:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	bfcc      	ite	gt
 80092e8:	2300      	movgt	r3, #0
 80092ea:	2301      	movle	r3, #1
 80092ec:	425b      	negs	r3, r3
 80092ee:	b29b      	uxth	r3, r3
    {
      pHandle->hAvTemp_d = 0U;
    }
    else
    {
      pHandle->hAvTemp_d = 0xFFFFU;
 80092f0:	8043      	strh	r3, [r0, #2]
}
 80092f2:	4770      	bx	lr
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 80092f4:	8883      	ldrh	r3, [r0, #4]
      pHandle->hAvTemp_d = 0xFFFFU;
 80092f6:	8043      	strh	r3, [r0, #2]
      pHandle->hFaultState = MC_NO_ERROR;
 80092f8:	2200      	movs	r2, #0
 80092fa:	8102      	strh	r2, [r0, #8]
}
 80092fc:	4770      	bx	lr
 80092fe:	bf00      	nop

08009300 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle, uint16_t rawValue)
{
 8009300:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8009302:	7803      	ldrb	r3, [r0, #0]
{
 8009304:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8009306:	b983      	cbnz	r3, 800932a <NTC_CalcAvTemp+0x2a>
    {
      uint16_t hAux;
      hAux = rawValue;

      if (0xFFFFU == hAux)
 8009308:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800930c:	4299      	cmp	r1, r3
 800930e:	d007      	beq.n	8009320 <NTC_CalcAvTemp+0x20>
        /* Nothing to do */
      }
      else
      {
        uint32_t wtemp;
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009310:	8943      	ldrh	r3, [r0, #10]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8009312:	8842      	ldrh	r2, [r0, #2]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8009314:	1e58      	subs	r0, r3, #1
        wtemp += hAux;
 8009316:	fb00 1102 	mla	r1, r0, r2, r1
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 800931a:	fbb1 f1f3 	udiv	r1, r1, r3

        pHandle->hAvTemp_d = (uint16_t)wtemp;
 800931e:	8061      	strh	r1, [r4, #2]
      }

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8009320:	4620      	mov	r0, r4
 8009322:	f7ff ffc5 	bl	80092b0 <NTC_SetFaultState>
 8009326:	8120      	strh	r0, [r4, #8]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009328:	bd10      	pop	{r4, pc}
 800932a:	2000      	movs	r0, #0
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 800932c:	8120      	strh	r0, [r4, #8]
}
 800932e:	bd10      	pop	{r4, pc}

08009330 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8009330:	7803      	ldrb	r3, [r0, #0]
 8009332:	b95b      	cbnz	r3, 800934c <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8009334:	8842      	ldrh	r2, [r0, #2]
      wTemp -= ((int32_t)pHandle->wV0);
 8009336:	6941      	ldr	r1, [r0, #20]
      wTemp *= pHandle->hSensitivity;
 8009338:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 800933c:	8b00      	ldrh	r0, [r0, #24]
      wTemp -= ((int32_t)pHandle->wV0);
 800933e:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8009340:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8009344:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8009348:	b200      	sxth	r0, r0
 800934a:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 800934c:	88c0      	ldrh	r0, [r0, #6]
}
 800934e:	b200      	sxth	r0, r0
 8009350:	4770      	bx	lr
 8009352:	bf00      	nop

08009354 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8009354:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8009356:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8009358:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 800935a:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 800935c:	8442      	strh	r2, [r0, #34]	@ 0x22
    pHandle->wIntegralTerm = 0;
 800935e:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8009360:	6283      	str	r3, [r0, #40]	@ 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009362:	4770      	bx	lr

08009364 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8009364:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8009366:	4770      	bx	lr

08009368 <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8009368:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800936a:	4770      	bx	lr

0800936c <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 800936c:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8009370:	4770      	bx	lr
 8009372:	bf00      	nop

08009374 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8009374:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8009378:	4770      	bx	lr
 800937a:	bf00      	nop

0800937c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 800937c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 800937e:	4770      	bx	lr

08009380 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8009380:	8b80      	ldrh	r0, [r0, #28]
 8009382:	4770      	bx	lr

08009384 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8009384:	2301      	movs	r3, #1
 8009386:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8009388:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800938a:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800938c:	4770      	bx	lr
 800938e:	bf00      	nop

08009390 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8009390:	8b40      	ldrh	r0, [r0, #26]
 8009392:	4770      	bx	lr

08009394 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8009394:	8bc0      	ldrh	r0, [r0, #30]
 8009396:	4770      	bx	lr

08009398 <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8009398:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800939a:	4770      	bx	lr

0800939c <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 800939c:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800939e:	4770      	bx	lr

080093a0 <PID_SetKIDivisorPOW2>:
{
 80093a0:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80093a2:	2301      	movs	r3, #1
{
 80093a4:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 80093a6:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80093a8:	f647 71ff 	movw	r1, #32767	@ 0x7fff
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 80093ac:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 80093ae:	8343      	strh	r3, [r0, #26]
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80093b0:	40a1      	lsls	r1, r4
{
 80093b2:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 80093b4:	f7ff fff2 	bl	800939c <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 80093b8:	4902      	ldr	r1, [pc, #8]	@ (80093c4 <PID_SetKIDivisorPOW2+0x24>)
 80093ba:	4628      	mov	r0, r5
 80093bc:	40a1      	lsls	r1, r4
 80093be:	f7ff ffeb 	bl	8009398 <PID_SetLowerIntegralTermLimit>
}
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	ffff8001 	.word	0xffff8001

080093c8 <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 80093c8:	8441      	strh	r1, [r0, #34]	@ 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80093ca:	4770      	bx	lr

080093cc <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 80093cc:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	@ 0x22
 80093d0:	4770      	bx	lr
 80093d2:	bf00      	nop

080093d4 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 80093d4:	8cc0      	ldrh	r0, [r0, #38]	@ 0x26
 80093d6:	4770      	bx	lr

080093d8 <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80093d8:	2301      	movs	r3, #1
 80093da:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 80093dc:	84c1      	strh	r1, [r0, #38]	@ 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 80093de:	8483      	strh	r3, [r0, #36]	@ 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop

080093e4 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80093e4:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
{
 80093e8:	4603      	mov	r3, r0
 80093ea:	b530      	push	{r4, r5, lr}

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 80093ec:	f9b0 4006 	ldrsh.w	r4, [r0, #6]
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 80093f0:	f9b3 c016 	ldrsh.w	ip, [r3, #22]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 80093f4:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 80093f8:	fb01 f202 	mul.w	r2, r1, r2
    if (0 == pHandle->hKiGain)
 80093fc:	b17c      	cbz	r4, 800941e <PI_Controller+0x3a>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80093fe:	fb04 f101 	mul.w	r1, r4, r1
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009402:	e9d3 5402 	ldrd	r5, r4, [r3, #8]
      if (wIntegral_sum_temp < 0)
 8009406:	eb15 0e01 	adds.w	lr, r5, r1
 800940a:	d41d      	bmi.n	8009448 <PI_Controller+0x64>
            wIntegral_sum_temp = -INT32_MAX;
 800940c:	420d      	tst	r5, r1
 800940e:	4914      	ldr	r1, [pc, #80]	@ (8009460 <PI_Controller+0x7c>)
 8009410:	bf48      	it	mi
 8009412:	468e      	movmi	lr, r1
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009414:	45a6      	cmp	lr, r4
 8009416:	dc02      	bgt.n	800941e <PI_Controller+0x3a>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8009418:	691c      	ldr	r4, [r3, #16]
 800941a:	4574      	cmp	r4, lr
 800941c:	dd1d      	ble.n	800945a <PI_Controller+0x76>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 800941e:	8b99      	ldrh	r1, [r3, #28]
 8009420:	410a      	asrs	r2, r1
 8009422:	8bd9      	ldrh	r1, [r3, #30]
 8009424:	fa44 f101 	asr.w	r1, r4, r1
 8009428:	440a      	add	r2, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 800942a:	4290      	cmp	r0, r2
 800942c:	da03      	bge.n	8009436 <PI_Controller+0x52>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 800942e:	1a82      	subs	r2, r0, r2
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8009430:	4414      	add	r4, r2
 8009432:	609c      	str	r4, [r3, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8009434:	bd30      	pop	{r4, r5, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8009436:	4594      	cmp	ip, r2
      wDischarge = hLowerOutputLimit - wOutput_32;
 8009438:	bfc5      	ittet	gt
 800943a:	ebac 0202 	subgt.w	r2, ip, r2
    pHandle->wIntegralTerm += wDischarge;
 800943e:	18a4      	addgt	r4, r4, r2
    returnValue = (int16_t)wOutput_32;
 8009440:	b210      	sxthle	r0, r2
      wOutput_32 = hLowerOutputLimit;
 8009442:	4660      	movgt	r0, ip
    pHandle->wIntegralTerm += wDischarge;
 8009444:	609c      	str	r4, [r3, #8]
}
 8009446:	bd30      	pop	{r4, r5, pc}
        if (pHandle->wIntegralTerm > 0)
 8009448:	2d00      	cmp	r5, #0
 800944a:	dde3      	ble.n	8009414 <PI_Controller+0x30>
          if (wIntegral_Term > 0)
 800944c:	2900      	cmp	r1, #0
 800944e:	dde1      	ble.n	8009414 <PI_Controller+0x30>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8009450:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009454:	428c      	cmp	r4, r1
 8009456:	d1e2      	bne.n	800941e <PI_Controller+0x3a>
            wIntegral_sum_temp = INT32_MAX;
 8009458:	46a6      	mov	lr, r4
        pHandle->wIntegralTerm = wIntegral_sum_temp;
 800945a:	4674      	mov	r4, lr
 800945c:	e7df      	b.n	800941e <PI_Controller+0x3a>
 800945e:	bf00      	nop
 8009460:	80000001 	.word	0x80000001

08009464 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8009464:	6882      	ldr	r2, [r0, #8]
{
 8009466:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009468:	89d1      	ldrh	r1, [r2, #14]
 800946a:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800946e:	8993      	ldrh	r3, [r2, #12]
 8009470:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8009474:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8009478:	fb13 230c 	smlabb	r3, r3, ip, r2
 800947c:	2b00      	cmp	r3, #0

    /* pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4 */
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800947e:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8009482:	bfbc      	itt	lt
 8009484:	f503 437f 	addlt.w	r3, r3, #65280	@ 0xff00
 8009488:	33ff      	addlt	r3, #255	@ 0xff
    pHandle->hAvrgElMotorPower += (int16_t)((wAux - (int32_t)pHandle->hAvrgElMotorPower) / 16);
 800948a:	ebd2 4323 	rsbs	r3, r2, r3, asr #16
 800948e:	bf48      	it	mi
 8009490:	330f      	addmi	r3, #15
 8009492:	eb02 1223 	add.w	r2, r2, r3, asr #4
 8009496:	8002      	strh	r2, [r0, #0]

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
}
 8009498:	f85d fb04 	ldr.w	pc, [sp], #4

0800949c <PQD_GetAvrgElMotorPowerW>:
  * 
  * @param pHandle pointer on the related component instance.
  * @retval float_t The average measured motor power expressed in Watts.
  */
__weak float_t PQD_GetAvrgElMotorPowerW(const PQD_MotorPowMeas_Handle_t *pHandle)
{
 800949c:	b510      	push	{r4, lr}
  else
  {
#endif

  /* First perform an integer multiplication, then a float one. */
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 800949e:	f9b0 3000 	ldrsh.w	r3, [r0]
 80094a2:	ee07 3a90 	vmov	s15, r3
{
 80094a6:	ed2d 8b02 	vpush	{d8}
 80094aa:	4604      	mov	r4, r0
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80094ac:	68c0      	ldr	r0, [r0, #12]
 80094ae:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80094b2:	f7ff fd63 	bl	8008f7c <VBS_GetAvBusVoltage_V>
 80094b6:	edd4 7a01 	vldr	s15, [r4, #4]
 80094ba:	ee68 7a27 	vmul.f32	s15, s16, s15

#ifdef NULL_PTR_CHECK_PQD_MOT_POW_MEAS
  }
#endif
  return (PowerW);
}
 80094be:	ecbd 8b02 	vpop	{d8}
  PowerW = ((float_t)pHandle->hAvrgElMotorPower * (float_t)VBS_GetAvBusVoltage_V(pHandle->pVBS)) * pHandle->ConvFact;
 80094c2:	ee00 0a10 	vmov	s0, r0
 80094c6:	eeb8 0a40 	vcvt.f32.u32	s0, s0
}
 80094ca:	ee27 0a80 	vmul.f32	s0, s15, s0
 80094ce:	bd10      	pop	{r4, pc}

080094d0 <R3_2_ADCxInit>:
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80094d0:	6883      	ldr	r3, [r0, #8]
 80094d2:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80094d6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
/*
  * @brief Initializes @p ADCx peripheral for current sensing.
  * 
  */
static void R3_2_ADCxInit(ADC_TypeDef *ADCx)
{
 80094da:	b082      	sub	sp, #8
 80094dc:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80094de:	6883      	ldr	r3, [r0, #8]
 80094e0:	00d9      	lsls	r1, r3, #3
 80094e2:	d418      	bmi.n	8009516 <R3_2_ADCxInit+0x46>
    /* Wait for Regulator Startup time, once for both */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency  */
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
                                         * (SystemCoreClock / (100000UL * 2UL)));
 80094e4:	4b26      	ldr	r3, [pc, #152]	@ (8009580 <R3_2_ADCxInit+0xb0>)
  MODIFY_REG(ADCx->CR,
 80094e6:	6882      	ldr	r2, [r0, #8]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	4926      	ldr	r1, [pc, #152]	@ (8009584 <R3_2_ADCxInit+0xb4>)
 80094ec:	099b      	lsrs	r3, r3, #6
 80094ee:	f022 4210 	bic.w	r2, r2, #2415919104	@ 0x90000000
 80094f2:	fba1 1303 	umull	r1, r3, r1, r3
 80094f6:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 80094fa:	099b      	lsrs	r3, r3, #6
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8009502:	6082      	str	r2, [r0, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL)
 8009504:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009506:	9b01      	ldr	r3, [sp, #4]
 8009508:	b12b      	cbz	r3, 8009516 <R3_2_ADCxInit+0x46>
    {
      wait_loop_index--;
 800950a:	9b01      	ldr	r3, [sp, #4]
 800950c:	3b01      	subs	r3, #1
 800950e:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009510:	9b01      	ldr	r3, [sp, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d1f9      	bne.n	800950a <R3_2_ADCxInit+0x3a>
  MODIFY_REG(ADCx->CR,
 8009516:	6883      	ldr	r3, [r0, #8]
 8009518:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 800951c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009520:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009524:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8009526:	6883      	ldr	r3, [r0, #8]
 8009528:	2b00      	cmp	r3, #0
 800952a:	dbfc      	blt.n	8009526 <R3_2_ADCxInit+0x56>
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800952c:	6803      	ldr	r3, [r0, #0]
 800952e:	07da      	lsls	r2, r3, #31
 8009530:	d408      	bmi.n	8009544 <R3_2_ADCxInit+0x74>
  MODIFY_REG(ADCx->CR,
 8009532:	4a15      	ldr	r2, [pc, #84]	@ (8009588 <R3_2_ADCxInit+0xb8>)
 8009534:	6883      	ldr	r3, [r0, #8]
 8009536:	4013      	ands	r3, r2
 8009538:	f043 0301 	orr.w	r3, r3, #1
 800953c:	6083      	str	r3, [r0, #8]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 800953e:	6803      	ldr	r3, [r0, #0]
 8009540:	07db      	lsls	r3, r3, #31
 8009542:	d5f7      	bpl.n	8009534 <R3_2_ADCxInit+0x64>
  MODIFY_REG(ADCx->CR,
 8009544:	6883      	ldr	r3, [r0, #8]
 8009546:	4a10      	ldr	r2, [pc, #64]	@ (8009588 <R3_2_ADCxInit+0xb8>)
 8009548:	4013      	ands	r3, r2
 800954a:	f043 0308 	orr.w	r3, r3, #8
 800954e:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CR,
 8009550:	6883      	ldr	r3, [r0, #8]
 8009552:	4013      	ands	r3, r2
 8009554:	f043 0320 	orr.w	r3, r3, #32
 8009558:	6083      	str	r3, [r0, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM | ADC_CFGR_JQDIS, QueueMode);
 800955a:	68c3      	ldr	r3, [r0, #12]
 800955c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009560:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009564:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009568:	60c3      	str	r3, [r0, #12]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800956a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800956c:	f023 030f 	bic.w	r3, r3, #15
 8009570:	6303      	str	r3, [r0, #48]	@ 0x30
  MODIFY_REG(ADCx->CR,
 8009572:	6883      	ldr	r3, [r0, #8]
 8009574:	4013      	ands	r3, r2
 8009576:	f043 0304 	orr.w	r3, r3, #4
 800957a:	6083      	str	r3, [r0, #8]

  /* Dummy conversion (ES0431 doc chap. 2.5.8 ADC channel 0 converted instead of the required ADC channel) 
     Note: Sequence length forced to zero in order to prevent ADC OverRun occurrence */
  LL_ADC_REG_SetSequencerLength(ADCx, 0U);
  LL_ADC_REG_StartConversion(ADCx);
}
 800957c:	b002      	add	sp, #8
 800957e:	4770      	bx	lr
 8009580:	200004ec 	.word	0x200004ec
 8009584:	053e2d63 	.word	0x053e2d63
 8009588:	7fffffc0 	.word	0x7fffffc0

0800958c <R3_2_GetPhaseCurrents>:
#endif
    int32_t Aux;
    uint32_t ADCDataReg1;
    uint32_t ADCDataReg2;
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl;  //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800958c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    uint8_t Sector;

    Sector = (uint8_t)pHandle->_Super.Sector;
 8009590:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
{
 8009594:	b470      	push	{r4, r5, r6}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009596:	681c      	ldr	r4, [r3, #0]
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 8009598:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800959c:	6b9d      	ldr	r5, [r3, #56]	@ 0x38
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 800959e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[Sector]->JDR1;
 80095a0:	f8d5 5080 	ldr.w	r5, [r5, #128]	@ 0x80
    ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[Sector]->JDR1;
 80095a4:	f8d3 6080 	ldr.w	r6, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80095a8:	6863      	ldr	r3, [r4, #4]
 80095aa:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80095ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80095b2:	6063      	str	r3, [r4, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    switch (Sector)
 80095b4:	2a05      	cmp	r2, #5
 80095b6:	f200 809d 	bhi.w	80096f4 <R3_2_GetPhaseCurrents+0x168>
 80095ba:	e8df f002 	tbb	[pc, r2]
 80095be:	1d37      	.short	0x1d37
 80095c0:	3703031d 	.word	0x3703031d
      case SECTOR_4:
      case SECTOR_5:
      {
        /* Current on Phase C is not accessible     */
        /* Ia = PhaseAOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80095c4:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88

        /* Saturation of Ia */
        if (Aux < -INT16_MAX)
 80095c8:	4a4e      	ldr	r2, [pc, #312]	@ (8009704 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80095ca:	1b5b      	subs	r3, r3, r5
        if (Aux < -INT16_MAX)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	db58      	blt.n	8009682 <R3_2_GetPhaseCurrents+0xf6>
        {
          Iab->a = -INT16_MAX;
        }
        else  if (Aux > INT16_MAX)
 80095d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095d4:	f280 8087 	bge.w	80096e6 <R3_2_GetPhaseCurrents+0x15a>
        {
          Iab->a = INT16_MAX;
        }
        else
        {
          Iab->a = (int16_t)Aux;
 80095d8:	fa0f fc83 	sxth.w	ip, r3
        }

        /* Ib = PhaseBOffset - ADC converted value) */
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80095dc:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c

        /* Saturation of Ib */
        if (Aux < -INT16_MAX)
 80095e0:	4d48      	ldr	r5, [pc, #288]	@ (8009704 <R3_2_GetPhaseCurrents+0x178>)
          Iab->a = -INT16_MAX;
 80095e2:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg2);
 80095e6:	1b92      	subs	r2, r2, r6
        if (Aux < -INT16_MAX)
 80095e8:	42aa      	cmp	r2, r5
 80095ea:	da5b      	bge.n	80096a4 <R3_2_GetPhaseCurrents+0x118>
        {
          Iab->b = -INT16_MAX;
 80095ec:	804d      	strh	r5, [r1, #2]
        break;
    }

    pHandle->_Super.Ia = Iab->a;
    pHandle->_Super.Ib = Iab->b;
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80095ee:	fa1f f38c 	uxth.w	r3, ip
 80095f2:	f248 0201 	movw	r2, #32769	@ 0x8001
 80095f6:	e030      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80095f8:	f8d0 4088 	ldr.w	r4, [r0, #136]	@ 0x88
        if (Aux < -INT16_MAX)
 80095fc:	4b41      	ldr	r3, [pc, #260]	@ (8009704 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseAOffset) - (int32_t)(ADCDataReg1);
 80095fe:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009600:	429c      	cmp	r4, r3
 8009602:	db39      	blt.n	8009678 <R3_2_GetPhaseCurrents+0xec>
        else  if (Aux > INT16_MAX)
 8009604:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 8009608:	da62      	bge.n	80096d0 <R3_2_GetPhaseCurrents+0x144>
          Iab->a = (int16_t)Aux;
 800960a:	fa0f fc84 	sxth.w	ip, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800960e:	b2a3      	uxth	r3, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009610:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
          Iab->a = -INT16_MAX;
 8009614:	f8a1 c000 	strh.w	ip, [r1]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009618:	1ab2      	subs	r2, r6, r2
        Aux -= (int32_t)Iab->a;             /* Ib */
 800961a:	1b12      	subs	r2, r2, r4
        if (Aux > INT16_MAX)
 800961c:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 8009620:	db39      	blt.n	8009696 <R3_2_GetPhaseCurrents+0x10a>
          Iab->b = INT16_MAX;
 8009622:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8009626:	804a      	strh	r2, [r1, #2]
 8009628:	4615      	mov	r5, r2
 800962a:	e016      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 800962c:	f8d0 408c 	ldr.w	r4, [r0, #140]	@ 0x8c
        if (Aux < -INT16_MAX)
 8009630:	4b34      	ldr	r3, [pc, #208]	@ (8009704 <R3_2_GetPhaseCurrents+0x178>)
        Aux = (int32_t)(pHandle->PhaseBOffset) - (int32_t)(ADCDataReg1);
 8009632:	1b64      	subs	r4, r4, r5
        if (Aux < -INT16_MAX)
 8009634:	429c      	cmp	r4, r3
 8009636:	db1a      	blt.n	800966e <R3_2_GetPhaseCurrents+0xe2>
        else  if (Aux > INT16_MAX)
 8009638:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 800963c:	da3d      	bge.n	80096ba <R3_2_GetPhaseCurrents+0x12e>
          Iab->b = (int16_t)Aux;
 800963e:	b225      	sxth	r5, r4
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009640:	b2a2      	uxth	r2, r4
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009642:	f8d0 3090 	ldr.w	r3, [r0, #144]	@ 0x90
          Iab->b = -INT16_MAX;
 8009646:	804d      	strh	r5, [r1, #2]
        Aux = (int32_t)(ADCDataReg2) - (int32_t)(pHandle->PhaseCOffset); /* -Ic */
 8009648:	1af3      	subs	r3, r6, r3
        Aux -= (int32_t)Iab->b;             /* Ia  */
 800964a:	1b1b      	subs	r3, r3, r4
        if (Aux > INT16_MAX)
 800964c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009650:	db19      	blt.n	8009686 <R3_2_GetPhaseCurrents+0xfa>
          Iab->a = INT16_MAX;
 8009652:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8009656:	800b      	strh	r3, [r1, #0]
 8009658:	469c      	mov	ip, r3
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 800965a:	4413      	add	r3, r2
 800965c:	425b      	negs	r3, r3
    pHandle->_Super.Ib = Iab->b;
 800965e:	f8a0 5064 	strh.w	r5, [r0, #100]	@ 0x64
    pHandle->_Super.Ia = Iab->a;
 8009662:	f8a0 c062 	strh.w	ip, [r0, #98]	@ 0x62
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009666:	bc70      	pop	{r4, r5, r6}
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 8009668:	f8a0 3066 	strh.w	r3, [r0, #102]	@ 0x66
}
 800966c:	4770      	bx	lr
 800966e:	461c      	mov	r4, r3
 8009670:	f248 0201 	movw	r2, #32769	@ 0x8001
 8009674:	461d      	mov	r5, r3
 8009676:	e7e4      	b.n	8009642 <R3_2_GetPhaseCurrents+0xb6>
 8009678:	461c      	mov	r4, r3
 800967a:	46a4      	mov	ip, r4
 800967c:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009680:	e7c6      	b.n	8009610 <R3_2_GetPhaseCurrents+0x84>
 8009682:	4694      	mov	ip, r2
 8009684:	e7aa      	b.n	80095dc <R3_2_GetPhaseCurrents+0x50>
        else  if (Aux < -INT16_MAX)
 8009686:	4c1f      	ldr	r4, [pc, #124]	@ (8009704 <R3_2_GetPhaseCurrents+0x178>)
 8009688:	42a3      	cmp	r3, r4
 800968a:	da26      	bge.n	80096da <R3_2_GetPhaseCurrents+0x14e>
          Iab->a = -INT16_MAX;
 800968c:	800c      	strh	r4, [r1, #0]
 800968e:	f248 0301 	movw	r3, #32769	@ 0x8001
 8009692:	46a4      	mov	ip, r4
 8009694:	e7e1      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux < -INT16_MAX)
 8009696:	4d1b      	ldr	r5, [pc, #108]	@ (8009704 <R3_2_GetPhaseCurrents+0x178>)
 8009698:	42aa      	cmp	r2, r5
 800969a:	da27      	bge.n	80096ec <R3_2_GetPhaseCurrents+0x160>
          Iab->b = -INT16_MAX;
 800969c:	804d      	strh	r5, [r1, #2]
 800969e:	f248 0201 	movw	r2, #32769	@ 0x8001
 80096a2:	e7da      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
        else  if (Aux > INT16_MAX)
 80096a4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 80096a8:	db0c      	blt.n	80096c4 <R3_2_GetPhaseCurrents+0x138>
          Iab->b = INT16_MAX;
 80096aa:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80096ae:	461a      	mov	r2, r3
 80096b0:	804b      	strh	r3, [r1, #2]
 80096b2:	4615      	mov	r5, r2
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80096b4:	fa1f f38c 	uxth.w	r3, ip
 80096b8:	e7cf      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
 80096ba:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80096be:	4614      	mov	r4, r2
 80096c0:	4615      	mov	r5, r2
 80096c2:	e7be      	b.n	8009642 <R3_2_GetPhaseCurrents+0xb6>
          Iab->b = (int16_t)Aux;
 80096c4:	b215      	sxth	r5, r2
 80096c6:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80096c8:	fa1f f38c 	uxth.w	r3, ip
 80096cc:	b292      	uxth	r2, r2
 80096ce:	e7c4      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
 80096d0:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 80096d4:	461c      	mov	r4, r3
 80096d6:	469c      	mov	ip, r3
 80096d8:	e79a      	b.n	8009610 <R3_2_GetPhaseCurrents+0x84>
          Iab->a = (int16_t)Aux;
 80096da:	fa0f fc83 	sxth.w	ip, r3
 80096de:	f8a1 c000 	strh.w	ip, [r1]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80096e2:	b29b      	uxth	r3, r3
 80096e4:	e7b9      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
 80096e6:	f647 7cff 	movw	ip, #32767	@ 0x7fff
 80096ea:	e777      	b.n	80095dc <R3_2_GetPhaseCurrents+0x50>
          Iab->b = (int16_t)Aux;
 80096ec:	b215      	sxth	r5, r2
 80096ee:	804d      	strh	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80096f0:	b292      	uxth	r2, r2
 80096f2:	e7b2      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
    pHandle->_Super.Ia = Iab->a;
 80096f4:	f9b1 c000 	ldrsh.w	ip, [r1]
    pHandle->_Super.Ib = Iab->b;
 80096f8:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
    pHandle->_Super.Ic = -Iab->a - Iab->b;
 80096fc:	880b      	ldrh	r3, [r1, #0]
 80096fe:	884a      	ldrh	r2, [r1, #2]
 8009700:	e7ab      	b.n	800965a <R3_2_GetPhaseCurrents+0xce>
 8009702:	bf00      	nop
 8009704:	ffff8001 	.word	0xffff8001

08009708 <R3_2_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval Return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_2_SetADCSampPointPolarization(PWMC_Handle_t *pHdl)
{
 8009708:	b410      	push	{r4}
  *         set too late for being taken into account in the next PWM cycle.
  */
__STATIC_INLINE uint16_t R3_2_WriteTIMRegisters(PWMC_Handle_t *pHdl, uint16_t SamplingPoint)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800970a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 800970e:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8009712:	f880 407a 	strb.w	r4, [r0, #122]	@ 0x7a
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009716:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800971a:	681b      	ldr	r3, [r3, #0]
  uint16_t Aux;

  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 800971c:	f8b0 4050 	ldrh.w	r4, [r0, #80]	@ 0x50
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009720:	635c      	str	r4, [r3, #52]	@ 0x34
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 8009722:	3a01      	subs	r2, #1
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009724:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009728:	f8b0 0054 	ldrh.w	r0, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR2, CompareValue);
 800972c:	639c      	str	r4, [r3, #56]	@ 0x38
  return R3_2_WriteTIMRegisters(&pHandle->_Super, (pHandle->Half_PWMPeriod - (uint16_t)1));
 800972e:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009730:	63d8      	str	r0, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009732:	641a      	str	r2, [r3, #64]	@ 0x40
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t) SamplingPoint);

  /* Limit for update event */
  /*  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u ) */
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009734:	4904      	ldr	r1, [pc, #16]	@ (8009748 <R3_2_SetADCSampPointPolarization+0x40>)
 8009736:	685b      	ldr	r3, [r3, #4]
}
 8009738:	f85d 4b04 	ldr.w	r4, [sp], #4
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800973c:	420b      	tst	r3, r1
}
 800973e:	bf14      	ite	ne
 8009740:	2001      	movne	r0, #1
 8009742:	2000      	moveq	r0, #0
 8009744:	4770      	bx	lr
 8009746:	bf00      	nop
 8009748:	02000070 	.word	0x02000070

0800974c <R3_2_HFCurrentsPolarizationAB>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  Iab: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_HFCurrentsPolarizationAB(PWMC_Handle_t *pHdl, ab_t *Iab)
{
 800974c:	b430      	push	{r4, r5}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800974e:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009752:	f890 4099 	ldrb.w	r4, [r0, #153]	@ 0x99
 8009756:	681a      	ldr	r2, [r3, #0]
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8009758:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800975c:	6b9c      	ldr	r4, [r3, #56]	@ 0x38
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 800975e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
    uint32_t ADCDataReg1 = pHandle->pParams_str->ADCDataReg1[pHandle->PolarizationSector]->JDR1;
 8009760:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 8009764:	f8d3 5080 	ldr.w	r5, [r3, #128]	@ 0x80
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009768:	6853      	ldr	r3, [r2, #4]
 800976a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800976e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009772:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 8009774:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 8009778:	2b0f      	cmp	r3, #15
 800977a:	d80d      	bhi.n	8009798 <R3_2_HFCurrentsPolarizationAB+0x4c>
    {
      pHandle-> PhaseAOffset += ADCDataReg1;
 800977c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
      pHandle-> PhaseBOffset += ADCDataReg2;
 8009780:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
      pHandle-> PhaseAOffset += ADCDataReg1;
 8009784:	441c      	add	r4, r3
      pHandle->PolarizationCounter++;
 8009786:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseBOffset += ADCDataReg2;
 800978a:	442a      	add	r2, r5
      pHandle->PolarizationCounter++;
 800978c:	3301      	adds	r3, #1
      pHandle-> PhaseBOffset += ADCDataReg2;
 800978e:	e9c0 4222 	strd	r4, r2, [r0, #136]	@ 0x88
      pHandle->PolarizationCounter++;
 8009792:	b2db      	uxtb	r3, r3
 8009794:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 8009798:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800979a:	bc30      	pop	{r4, r5}
    Iab->a = 0;
 800979c:	600b      	str	r3, [r1, #0]
}
 800979e:	4770      	bx	lr

080097a0 <R3_2_HFCurrentsPolarizationC>:
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80097a0:	f890 3099 	ldrb.w	r3, [r0, #153]	@ 0x99
{
 80097a4:	b410      	push	{r4}
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80097a6:	3314      	adds	r3, #20
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80097a8:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 80097ac:	6822      	ldr	r2, [r4, #0]
    uint32_t ADCDataReg2 = pHandle->pParams_str->ADCDataReg2[pHandle->PolarizationSector]->JDR1;
 80097ae:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80097b2:	f8d3 4080 	ldr.w	r4, [r3, #128]	@ 0x80
 80097b6:	6853      	ldr	r3, [r2, #4]
 80097b8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 80097bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80097c0:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    /* LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4) */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    if (pHandle->PolarizationCounter < NB_CONVERSIONS)
 80097c2:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
 80097c6:	2b0f      	cmp	r3, #15
 80097c8:	d80a      	bhi.n	80097e0 <R3_2_HFCurrentsPolarizationC+0x40>
    {
      /* Phase C is read from SECTOR_1, second value */
      pHandle-> PhaseCOffset += ADCDataReg2;
      pHandle->PolarizationCounter++;
 80097ca:	f890 3098 	ldrb.w	r3, [r0, #152]	@ 0x98
      pHandle-> PhaseCOffset += ADCDataReg2;
 80097ce:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 80097d2:	3301      	adds	r3, #1
      pHandle-> PhaseCOffset += ADCDataReg2;
 80097d4:	4422      	add	r2, r4
      pHandle->PolarizationCounter++;
 80097d6:	b2db      	uxtb	r3, r3
      pHandle-> PhaseCOffset += ADCDataReg2;
 80097d8:	f8c0 2090 	str.w	r2, [r0, #144]	@ 0x90
      pHandle->PolarizationCounter++;
 80097dc:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    {
      /* Nothing to do */
    }

    /* During offset calibration no current is flowing in the phases */
    Iab->a = 0;
 80097e0:	2300      	movs	r3, #0
    Iab->b = 0;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80097e2:	f85d 4b04 	ldr.w	r4, [sp], #4
    Iab->a = 0;
 80097e6:	600b      	str	r3, [r1, #0]
}
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop

080097ec <R3_2_SwitchOnPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80097ec:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
  pHandle->ADCRegularLocked = true;

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80097f0:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80097f4:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 80097f6:	f04f 0c01 	mov.w	ip, #1
{
 80097fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
 80097fc:	fa22 f10c 	lsr.w	r1, r2, ip
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009800:	f04f 0e00 	mov.w	lr, #0
 8009804:	f880 e07c 	strb.w	lr, [r0, #124]	@ 0x7c
  pHandle->ADCRegularLocked = true;
 8009808:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t)pHandle->Half_PWMPeriod / (uint32_t)2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t)pHandle->Half_PWMPeriod - (uint32_t)5));
 800980c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR1, CompareValue);
 800980e:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009810:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009812:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009814:	f06f 0101 	mvn.w	r1, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009818:	641a      	str	r2, [r3, #64]	@ 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800981a:	6119      	str	r1, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800981c:	691a      	ldr	r2, [r3, #16]
 800981e:	07d2      	lsls	r2, r2, #31
 8009820:	d5fc      	bpl.n	800981c <R3_2_SwitchOnPWM+0x30>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009822:	f06f 0201 	mvn.w	r2, #1
 8009826:	611a      	str	r2, [r3, #16]
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8009828:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800982a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800982e:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009830:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009832:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009836:	645a      	str	r2, [r3, #68]	@ 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8009838:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800983c:	2a02      	cmp	r2, #2
 800983e:	d007      	beq.n	8009850 <R3_2_SwitchOnPWM+0x64>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009840:	f06f 0201 	mvn.w	r2, #1
 8009844:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009846:	68da      	ldr	r2, [r3, #12]
 8009848:	f042 0201 	orr.w	r2, r2, #1
 800984c:	60da      	str	r2, [r3, #12]
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE(TIMx);
}
 800984e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8009850:	6a19      	ldr	r1, [r3, #32]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009852:	6bc7      	ldr	r7, [r0, #60]	@ 0x3c
 8009854:	f8b0 c048 	ldrh.w	ip, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009858:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800985a:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800985e:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 8009860:	f8b0 004c 	ldrh.w	r0, [r0, #76]	@ 0x4c
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0U)
 8009864:	f240 5255 	movw	r2, #1365	@ 0x555
 8009868:	4211      	tst	r1, r2
 800986a:	d004      	beq.n	8009876 <R3_2_SwitchOnPWM+0x8a>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800986c:	f8c7 c018 	str.w	ip, [r7, #24]
 8009870:	61ae      	str	r6, [r5, #24]
 8009872:	61a0      	str	r0, [r4, #24]
}
 8009874:	e7e4      	b.n	8009840 <R3_2_SwitchOnPWM+0x54>
  WRITE_REG(GPIOx->BRR, PinMask);
 8009876:	f8c7 c028 	str.w	ip, [r7, #40]	@ 0x28
 800987a:	62ae      	str	r6, [r5, #40]	@ 0x28
 800987c:	62a0      	str	r0, [r4, #40]	@ 0x28
}
 800987e:	e7df      	b.n	8009840 <R3_2_SwitchOnPWM+0x54>

08009880 <R3_2_SwitchOffPWM>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  */
__weak void R3_2_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009880:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (true == pHandle->_Super.BrakeActionLock)
 8009884:	f890 1083 	ldrb.w	r1, [r0, #131]	@ 0x83
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009888:	681b      	ldr	r3, [r3, #0]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	f022 0201 	bic.w	r2, r2, #1
 8009890:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009892:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
  pHandle->_Super.TurnOnLowSidesAction = false;
 8009894:	f04f 0c00 	mov.w	ip, #0
 8009898:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800989c:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 80098a0:	645a      	str	r2, [r3, #68]	@ 0x44
  if (true == pHandle->_Super.BrakeActionLock)
 80098a2:	b919      	cbnz	r1, 80098ac <R3_2_SwitchOffPWM+0x2c>
  {
    /* Nothing to do */
  }
  else
  {
    if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 80098a4:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80098a8:	2a02      	cmp	r2, #2
 80098aa:	d00c      	beq.n	80098c6 <R3_2_SwitchOffPWM+0x46>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80098ac:	f06f 0201 	mvn.w	r2, #1
 80098b0:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80098b2:	691a      	ldr	r2, [r3, #16]
 80098b4:	07d2      	lsls	r2, r2, #31
 80098b6:	d5fc      	bpl.n	80098b2 <R3_2_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80098b8:	f06f 0101 	mvn.w	r1, #1
    /* Nothing to do */
  }
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* We allow ADC usage for regular conversion on Systick */
  pHandle->ADCRegularLocked = false;
 80098bc:	2200      	movs	r2, #0
 80098be:	6119      	str	r1, [r3, #16]
 80098c0:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
 80098c4:	4770      	bx	lr
{
 80098c6:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80098c8:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80098cc:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80098d0:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BRR, PinMask);
 80098d2:	62a5      	str	r5, [r4, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80098d4:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 80098d8:	628c      	str	r4, [r1, #40]	@ 0x28
      LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80098da:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 80098de:	6291      	str	r1, [r2, #40]	@ 0x28
 80098e0:	f06f 0201 	mvn.w	r2, #1
 80098e4:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80098e6:	691a      	ldr	r2, [r3, #16]
 80098e8:	07d1      	lsls	r1, r2, #31
 80098ea:	d5fc      	bpl.n	80098e6 <R3_2_SwitchOffPWM+0x66>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80098ec:	f06f 0101 	mvn.w	r1, #1
  pHandle->ADCRegularLocked = false;
 80098f0:	2200      	movs	r2, #0
 80098f2:	6119      	str	r1, [r3, #16]
}
 80098f4:	bc30      	pop	{r4, r5}
  pHandle->ADCRegularLocked = false;
 80098f6:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
}
 80098fa:	4770      	bx	lr

080098fc <R3_2_RLGetPhaseCurrents>:
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @param  pStator_Currents: Pointer to the structure that will receive motor current
  *         of phase A and B in ab_t format.
  */
static void R3_2_RLGetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t *pStator_Currents)
{
 80098fc:	b410      	push	{r4}
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 80098fe:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
 8009902:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009904:	6853      	ldr	r3, [r2, #4]
 8009906:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800990a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800990e:	6053      	str	r3, [r2, #4]

    /* Disable ADC trigger source */
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

    wAux = ((int32_t)pHandle->PhaseBOffset)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 8009910:	f890 207a 	ldrb.w	r2, [r0, #122]	@ 0x7a
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8009914:	f8d0 308c 	ldr.w	r3, [r0, #140]	@ 0x8c
    else
    {
      wAux = -INT16_MAX;
    }

    pStator_Currents->a = (int16_t)wAux;
 8009918:	480c      	ldr	r0, [pc, #48]	@ (800994c <R3_2_RLGetPhaseCurrents+0x50>)
         - ((int32_t)(pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JDR1));
 800991a:	3214      	adds	r2, #20
 800991c:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8009920:	f8d4 4080 	ldr.w	r4, [r4, #128]	@ 0x80
      if (wAux < INT16_MAX)
 8009924:	f647 72ff 	movw	r2, #32767	@ 0x7fff
    wAux = ((int32_t)pHandle->PhaseBOffset)
 8009928:	1b1b      	subs	r3, r3, r4
      if (wAux < INT16_MAX)
 800992a:	4293      	cmp	r3, r2
 800992c:	bfa8      	it	ge
 800992e:	4613      	movge	r3, r2
    pStator_Currents->a = (int16_t)wAux;
 8009930:	4283      	cmp	r3, r0
 8009932:	bfb8      	it	lt
 8009934:	4603      	movlt	r3, r0
 8009936:	b21b      	sxth	r3, r3
 8009938:	2200      	movs	r2, #0
 800993a:	f363 020f 	bfi	r2, r3, #0, #16
 800993e:	f363 421f 	bfi	r2, r3, #16, #16
    pStator_Currents->b = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 8009942:	f85d 4b04 	ldr.w	r4, [sp], #4
    pStator_Currents->a = (int16_t)wAux;
 8009946:	600a      	str	r2, [r1, #0]
}
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	ffff8001 	.word	0xffff8001

08009950 <R3_2_RLSwitchOnPWM>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009950:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
{
 8009954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009958:	6813      	ldr	r3, [r2, #0]
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 800995a:	6b94      	ldr	r4, [r2, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 800995c:	6d11      	ldr	r1, [r2, #80]	@ 0x50

    pHandle->ADCRegularLocked=true;
 800995e:	2201      	movs	r2, #1
 8009960:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009964:	f06f 0201 	mvn.w	r2, #1
 8009968:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	07d5      	lsls	r5, r2, #31
 800996e:	d5fc      	bpl.n	800996a <R3_2_RLSwitchOnPWM+0x1a>
    }
    /* Clear Update Flag */
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 1U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 8009970:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009974:	f06f 0601 	mvn.w	r6, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009978:	2501      	movs	r5, #1
 800997a:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800997c:	611e      	str	r6, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800997e:	635d      	str	r5, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009980:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009982:	691a      	ldr	r2, [r3, #16]
 8009984:	07d2      	lsls	r2, r2, #31
 8009986:	d5fc      	bpl.n	8009982 <R3_2_RLSwitchOnPWM+0x32>
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	f042 0201 	orr.w	r2, r2, #1
 800998e:	60da      	str	r2, [r3, #12]

    /* Enable TIMx update interrupt */
    LL_TIM_EnableIT_UPDATE(TIMx);

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 8009990:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009992:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009996:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009998:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800999a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800999e:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs(TIMx);

    if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 80099a0:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 80099a4:	2a02      	cmp	r2, #2
 80099a6:	d00f      	beq.n	80099c8 <R3_2_RLSwitchOnPWM+0x78>
      /* Nothing to do */
    }

    /* Set the sector that correspond to Phase B and C sampling
     * B will be sampled by ADCx_1 */
    pHdl->Sector = SECTOR_4;
 80099a8:	2303      	movs	r3, #3
 80099aa:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
  MODIFY_REG(ADCx->CR,
 80099ae:	68a3      	ldr	r3, [r4, #8]
 80099b0:	4a12      	ldr	r2, [pc, #72]	@ (80099fc <R3_2_RLSwitchOnPWM+0xac>)
 80099b2:	4013      	ands	r3, r2
 80099b4:	f043 0308 	orr.w	r3, r3, #8
 80099b8:	60a3      	str	r3, [r4, #8]
 80099ba:	688b      	ldr	r3, [r1, #8]
 80099bc:	4013      	ands	r3, r2
 80099be:	f043 0308 	orr.w	r3, r3, #8
 80099c2:	608b      	str	r3, [r1, #8]
    LL_ADC_INJ_StartConversion(ADCx_1);
    LL_ADC_INJ_StartConversion(ADCx_2);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 80099c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80099c8:	6a1a      	ldr	r2, [r3, #32]
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80099ca:	f8d0 e03c 	ldr.w	lr, [r0, #60]	@ 0x3c
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80099ce:	6c07      	ldr	r7, [r0, #64]	@ 0x40
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80099d0:	6c45      	ldr	r5, [r0, #68]	@ 0x44
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 80099d2:	f8b0 8048 	ldrh.w	r8, [r0, #72]	@ 0x48
        LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 80099d6:	f8b0 c04a 	ldrh.w	ip, [r0, #74]	@ 0x4a
        LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 80099da:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
      if ((TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0U)
 80099de:	f240 5355 	movw	r3, #1365	@ 0x555
 80099e2:	421a      	tst	r2, r3
  WRITE_REG(GPIOx->BSRR, PinMask);
 80099e4:	bf15      	itete	ne
 80099e6:	f8ce 8018 	strne.w	r8, [lr, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80099ea:	f8ce 8028 	streq.w	r8, [lr, #40]	@ 0x28
  WRITE_REG(GPIOx->BSRR, PinMask);
 80099ee:	f8c7 c018 	strne.w	ip, [r7, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 80099f2:	f8c7 c028 	streq.w	ip, [r7, #40]	@ 0x28
 80099f6:	62ae      	str	r6, [r5, #40]	@ 0x28
}
 80099f8:	e7d6      	b.n	80099a8 <R3_2_RLSwitchOnPWM+0x58>
 80099fa:	bf00      	nop
 80099fc:	7fffffc0 	.word	0x7fffffc0

08009a00 <R3_2_TurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009a00:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009a04:	681b      	ldr	r3, [r3, #0]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8009a06:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009a0a:	f06f 0201 	mvn.w	r2, #1
 8009a0e:	f880 c07c 	strb.w	ip, [r0, #124]	@ 0x7c
 8009a12:	611a      	str	r2, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009a14:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009a16:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009a18:	63d9      	str	r1, [r3, #60]	@ 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	07d2      	lsls	r2, r2, #31
 8009a1e:	d5fc      	bpl.n	8009a1a <R3_2_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009a20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009a26:	645a      	str	r2, [r3, #68]	@ 0x44
  if ((ES_GPIO == pHandle->_Super.LowSideOutputs))
 8009a28:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009a2c:	2b02      	cmp	r3, #2
 8009a2e:	d000      	beq.n	8009a32 <R3_2_TurnOnLowSides+0x32>
 8009a30:	4770      	bx	lr
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009a32:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8009a36:	b410      	push	{r4}
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009a38:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009a3a:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
  WRITE_REG(GPIOx->BSRR, PinMask);
 8009a3e:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009a40:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009a44:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
 8009a48:	618c      	str	r4, [r1, #24]
}
 8009a4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a4e:	619a      	str	r2, [r3, #24]
 8009a50:	4770      	bx	lr
 8009a52:	bf00      	nop

08009a54 <R3_2_SetAOReferenceVoltage>:
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, (DAC_Channel >> DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS)
 8009a54:	ea4f 4c90 	mov.w	ip, r0, lsr #18
{
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	f00c 0c3c 	and.w	ip, ip, #60	@ 0x3c
 8009a5e:	f101 0e08 	add.w	lr, r1, #8
 8009a62:	b082      	sub	sp, #8
                                             & DAC_REG_DHR_REGOFFSET_MASK_POSBIT0);

  MODIFY_REG(*preg, DAC_DHR12L1_DACC1DHR, Data);
 8009a64:	f85e 300c 	ldr.w	r3, [lr, ip]
 8009a68:	f36f 130f 	bfc	r3, #4, #12
 8009a6c:	4313      	orrs	r3, r2
 8009a6e:	f84e 300c 	str.w	r3, [lr, ip]
  SET_BIT(DACx->SWTRIGR,
 8009a72:	684a      	ldr	r2, [r1, #4]
 8009a74:	f000 0303 	and.w	r3, r0, #3
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	604b      	str	r3, [r1, #4]
  return ((READ_BIT(DACx->CR,
 8009a7c:	680a      	ldr	r2, [r1, #0]
 8009a7e:	f000 0010 	and.w	r0, r0, #16
 8009a82:	2301      	movs	r3, #1
 8009a84:	4083      	lsls	r3, r0
           == (DAC_CR_EN1 << (DAC_Channel & DAC_CR_CHX_BITOFFSET_MASK))) ? 1UL : 0UL);
 8009a86:	ea33 0202 	bics.w	r2, r3, r2
 8009a8a:	d014      	beq.n	8009ab6 <R3_2_SetAOReferenceVoltage+0x62>
                                         * (SystemCoreClock / (1000000UL * 2UL)));
 8009a8c:	4a14      	ldr	r2, [pc, #80]	@ (8009ae0 <R3_2_SetAOReferenceVoltage+0x8c>)
 8009a8e:	4815      	ldr	r0, [pc, #84]	@ (8009ae4 <R3_2_SetAOReferenceVoltage+0x90>)
 8009a90:	6812      	ldr	r2, [r2, #0]
  SET_BIT(DACx->CR,
 8009a92:	680c      	ldr	r4, [r1, #0]
 8009a94:	fba0 0202 	umull	r0, r2, r0, r2
 8009a98:	0cd2      	lsrs	r2, r2, #19
 8009a9a:	4323      	orrs	r3, r4
 8009a9c:	00d2      	lsls	r2, r2, #3
 8009a9e:	600b      	str	r3, [r1, #0]
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US)
 8009aa0:	9200      	str	r2, [sp, #0]
    while (wait_loop_index != 0UL)
 8009aa2:	9b00      	ldr	r3, [sp, #0]
 8009aa4:	b12b      	cbz	r3, 8009ab2 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8009aa6:	9b00      	ldr	r3, [sp, #0]
 8009aa8:	3b01      	subs	r3, #1
 8009aaa:	9300      	str	r3, [sp, #0]
    while (wait_loop_index != 0UL)
 8009aac:	9b00      	ldr	r3, [sp, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d1f9      	bne.n	8009aa6 <R3_2_SetAOReferenceVoltage+0x52>
}
 8009ab2:	b002      	add	sp, #8
 8009ab4:	bd10      	pop	{r4, pc}
    volatile uint32_t wait_loop_index = ((LL_DAC_DELAY_VOLTAGE_SETTLING_US) * (SystemCoreClock / (1000000UL * 2UL)));
 8009ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8009ae0 <R3_2_SetAOReferenceVoltage+0x8c>)
 8009ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8009ae4 <R3_2_SetAOReferenceVoltage+0x90>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	fba2 2303 	umull	r2, r3, r2, r3
 8009ac0:	0cdb      	lsrs	r3, r3, #19
 8009ac2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8009ac6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009ac8:	9b01      	ldr	r3, [sp, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d0f1      	beq.n	8009ab2 <R3_2_SetAOReferenceVoltage+0x5e>
      wait_loop_index--;
 8009ace:	9b01      	ldr	r3, [sp, #4]
 8009ad0:	3b01      	subs	r3, #1
 8009ad2:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 8009ad4:	9b01      	ldr	r3, [sp, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d1f9      	bne.n	8009ace <R3_2_SetAOReferenceVoltage+0x7a>
}
 8009ada:	b002      	add	sp, #8
 8009adc:	bd10      	pop	{r4, pc}
 8009ade:	bf00      	nop
 8009ae0:	200004ec 	.word	0x200004ec
 8009ae4:	431bde83 	.word	0x431bde83

08009ae8 <R3_2_RLTurnOnLowSides>:
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009ae8:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009aec:	681b      	ldr	r3, [r3, #0]
  pHandle->ADCRegularLocked = true;
 8009aee:	f04f 0c01 	mov.w	ip, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009af2:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009af4:	f06f 0201 	mvn.w	r2, #1
 8009af8:	f880 c0a0 	strb.w	ip, [r0, #160]	@ 0xa0
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009afc:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8009afe:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8009b00:	691a      	ldr	r2, [r3, #16]
 8009b02:	07d2      	lsls	r2, r2, #31
 8009b04:	d5fc      	bpl.n	8009b00 <R3_2_RLTurnOnLowSides+0x18>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8009b06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009b08:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009b0c:	645a      	str	r2, [r3, #68]	@ 0x44
  if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 8009b0e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8009b12:	2b02      	cmp	r3, #2
 8009b14:	d000      	beq.n	8009b18 <R3_2_RLTurnOnLowSides+0x30>
 8009b16:	4770      	bx	lr
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009b18:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	@ 0x3c
{
 8009b1c:	b410      	push	{r4}
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009b1e:	6c43      	ldr	r3, [r0, #68]	@ 0x44
    LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 8009b20:	f8b0 4048 	ldrh.w	r4, [r0, #72]	@ 0x48
 8009b24:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 8009b26:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
    LL_GPIO_ResetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 8009b2a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	@ 0x4c
  WRITE_REG(GPIOx->BRR, PinMask);
 8009b2e:	628c      	str	r4, [r1, #40]	@ 0x28
}
 8009b30:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009b34:	629a      	str	r2, [r3, #40]	@ 0x28
 8009b36:	4770      	bx	lr

08009b38 <R3_2_Init>:
{
 8009b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009b3c:	f8d0 409c 	ldr.w	r4, [r0, #156]	@ 0x9c
    ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8009b40:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
    ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8009b42:	6d26      	ldr	r6, [r4, #80]	@ 0x50
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009b44:	687a      	ldr	r2, [r7, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009b46:	6825      	ldr	r5, [r4, #0]
    COMP_TypeDef *COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 8009b48:	f8d4 b00c 	ldr.w	fp, [r4, #12]
{
 8009b4c:	4680      	mov	r8, r0
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009b4e:	e9d4 c006 	ldrd	ip, r0, [r4, #24]
{
 8009b52:	b087      	sub	sp, #28
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009b54:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009b58:	f022 0204 	bic.w	r2, r2, #4
    DAC_TypeDef *DAC_OCPBx = pHandle->pParams_str->DAC_OCP_BSelection;
 8009b5c:	9000      	str	r0, [sp, #0]
    DAC_TypeDef *DAC_OCPCx = pHandle->pParams_str->DAC_OCP_CSelection;
 8009b5e:	6a20      	ldr	r0, [r4, #32]
 8009b60:	9001      	str	r0, [sp, #4]
    COMP_TypeDef *COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 8009b62:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    DAC_TypeDef *DAC_OVPx = pHandle->pParams_str->DAC_OVP_Selection;
 8009b66:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009b68:	9002      	str	r0, [sp, #8]
    COMP_TypeDef *COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 8009b6a:	e9d4 a904 	ldrd	sl, r9, [r4, #16]
 8009b6e:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009b70:	f8c7 e000 	str.w	lr, [r7]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009b74:	687a      	ldr	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009b76:	2020      	movs	r0, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009b78:	f022 0220 	bic.w	r2, r2, #32
 8009b7c:	607a      	str	r2, [r7, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009b7e:	6038      	str	r0, [r7, #0]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8009b80:	6872      	ldr	r2, [r6, #4]
 8009b82:	f022 0204 	bic.w	r2, r2, #4
 8009b86:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8009b88:	f8c6 e000 	str.w	lr, [r6]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8009b8c:	6872      	ldr	r2, [r6, #4]
 8009b8e:	f022 0220 	bic.w	r2, r2, #32
 8009b92:	6072      	str	r2, [r6, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8009b94:	6030      	str	r0, [r6, #0]
      if (TIM1 ==  TIMx)
 8009b96:	4a85      	ldr	r2, [pc, #532]	@ (8009dac <R3_2_Init+0x274>)
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8009b98:	4885      	ldr	r0, [pc, #532]	@ (8009db0 <R3_2_Init+0x278>)
 8009b9a:	4295      	cmp	r5, r2
 8009b9c:	6902      	ldr	r2, [r0, #16]
 8009b9e:	bf0c      	ite	eq
 8009ba0:	f442 6200 	orreq.w	r2, r2, #2048	@ 0x800
 8009ba4:	f442 5200 	orrne.w	r2, r2, #8192	@ 0x2000
 8009ba8:	6102      	str	r2, [r0, #16]
      if (OPAMPParams != NULL)
 8009baa:	b181      	cbz	r1, 8009bce <R3_2_Init+0x96>
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_1[1]);
 8009bac:	e9d1 2000 	ldrd	r2, r0, [r1]
  * @param  OPAMPx OPAMP instance
  * @retval None
  */
__STATIC_INLINE void LL_OPAMP_Enable(OPAMP_TypeDef *OPAMPx)
{
  SET_BIT(OPAMPx->CSR, OPAMP_CSR_OPAMPxEN);
 8009bb0:	f8d2 e000 	ldr.w	lr, [r2]
        LL_OPAMP_Enable(OPAMPParams->OPAMPSelect_2[0]);
 8009bb4:	6989      	ldr	r1, [r1, #24]
 8009bb6:	f04e 0e01 	orr.w	lr, lr, #1
 8009bba:	f8c2 e000 	str.w	lr, [r2]
 8009bbe:	6802      	ldr	r2, [r0, #0]
 8009bc0:	f042 0201 	orr.w	r2, r2, #1
 8009bc4:	6002      	str	r2, [r0, #0]
 8009bc6:	680a      	ldr	r2, [r1, #0]
 8009bc8:	f042 0201 	orr.w	r2, r2, #1
 8009bcc:	600a      	str	r2, [r1, #0]
      if (COMP_OCPAx != NULL)
 8009bce:	b1b3      	cbz	r3, 8009bfe <R3_2_Init+0xc6>
        if ((pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE) && (DAC_OCPAx != MC_NULL))
 8009bd0:	f894 20a7 	ldrb.w	r2, [r4, #167]	@ 0xa7
 8009bd4:	2a01      	cmp	r2, #1
 8009bd6:	d00a      	beq.n	8009bee <R3_2_Init+0xb6>
 8009bd8:	f1bc 0f00 	cmp.w	ip, #0
 8009bdc:	d007      	beq.n	8009bee <R3_2_Init+0xb6>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPA, DAC_OCPAx,
 8009bde:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8009be2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009be4:	9303      	str	r3, [sp, #12]
 8009be6:	4661      	mov	r1, ip
 8009be8:	f7ff ff34 	bl	8009a54 <R3_2_SetAOReferenceVoltage>
 8009bec:	9b03      	ldr	r3, [sp, #12]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	f042 0201 	orr.w	r2, r2, #1
 8009bf4:	601a      	str	r2, [r3, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009bf6:	681a      	ldr	r2, [r3, #0]
 8009bf8:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009bfc:	601a      	str	r2, [r3, #0]
      if (COMP_OCPBx != NULL)
 8009bfe:	f1bb 0f00 	cmp.w	fp, #0
 8009c02:	d017      	beq.n	8009c34 <R3_2_Init+0xfc>
        if ((pHandle->pParams_str->CompOCPBInvInput_MODE != EXT_MODE) && (DAC_OCPBx != MC_NULL))
 8009c04:	f894 30a8 	ldrb.w	r3, [r4, #168]	@ 0xa8
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d007      	beq.n	8009c1c <R3_2_Init+0xe4>
 8009c0c:	9b00      	ldr	r3, [sp, #0]
 8009c0e:	b12b      	cbz	r3, 8009c1c <R3_2_Init+0xe4>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPB, DAC_OCPBx,
 8009c10:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8009c14:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8009c16:	4619      	mov	r1, r3
 8009c18:	f7ff ff1c 	bl	8009a54 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009c1c:	f8db 3000 	ldr.w	r3, [fp]
 8009c20:	f043 0301 	orr.w	r3, r3, #1
 8009c24:	f8cb 3000 	str.w	r3, [fp]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009c28:	f8db 3000 	ldr.w	r3, [fp]
 8009c2c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c30:	f8cb 3000 	str.w	r3, [fp]
      if (COMP_OCPCx != NULL)
 8009c34:	f1ba 0f00 	cmp.w	sl, #0
 8009c38:	d017      	beq.n	8009c6a <R3_2_Init+0x132>
        if ((pHandle->pParams_str->CompOCPCInvInput_MODE != EXT_MODE)  && (DAC_OCPCx != MC_NULL))
 8009c3a:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d007      	beq.n	8009c52 <R3_2_Init+0x11a>
 8009c42:	9b01      	ldr	r3, [sp, #4]
 8009c44:	b12b      	cbz	r3, 8009c52 <R3_2_Init+0x11a>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OCPC, DAC_OCPCx,
 8009c46:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	@ 0xa2
 8009c4a:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009c4c:	4619      	mov	r1, r3
 8009c4e:	f7ff ff01 	bl	8009a54 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009c52:	f8da 3000 	ldr.w	r3, [sl]
 8009c56:	f043 0301 	orr.w	r3, r3, #1
 8009c5a:	f8ca 3000 	str.w	r3, [sl]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009c5e:	f8da 3000 	ldr.w	r3, [sl]
 8009c62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c66:	f8ca 3000 	str.w	r3, [sl]
      if (COMP_OVPx != NULL)
 8009c6a:	f1b9 0f00 	cmp.w	r9, #0
 8009c6e:	d017      	beq.n	8009ca0 <R3_2_Init+0x168>
        if ((pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE) && (DAC_OVPx != MC_NULL))
 8009c70:	f894 30aa 	ldrb.w	r3, [r4, #170]	@ 0xaa
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d007      	beq.n	8009c88 <R3_2_Init+0x150>
 8009c78:	9b02      	ldr	r3, [sp, #8]
 8009c7a:	b12b      	cbz	r3, 8009c88 <R3_2_Init+0x150>
          R3_2_SetAOReferenceVoltage(pHandle->pParams_str->DAC_Channel_OVP, DAC_OVPx,
 8009c7c:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	@ 0xa4
 8009c80:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009c82:	4619      	mov	r1, r3
 8009c84:	f7ff fee6 	bl	8009a54 <R3_2_SetAOReferenceVoltage>
  SET_BIT(COMPx->CSR, COMP_CSR_EN);
 8009c88:	f8d9 3000 	ldr.w	r3, [r9]
 8009c8c:	f043 0301 	orr.w	r3, r3, #1
 8009c90:	f8c9 3000 	str.w	r3, [r9]
  SET_BIT(COMPx->CSR, COMP_CSR_LOCK);
 8009c94:	f8d9 3000 	ldr.w	r3, [r9]
 8009c98:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009c9c:	f8c9 3000 	str.w	r3, [r9]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	07da      	lsls	r2, r3, #31
 8009ca4:	d553      	bpl.n	8009d4e <R3_2_Init+0x216>
 8009ca6:	68b3      	ldr	r3, [r6, #8]
 8009ca8:	07db      	lsls	r3, r3, #31
 8009caa:	d54c      	bpl.n	8009d46 <R3_2_Init+0x20e>
  volatile uint32_t Brk2Timeout = 1000;
 8009cac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8009cb0:	9305      	str	r3, [sp, #20]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8009cb2:	682b      	ldr	r3, [r5, #0]
 8009cb4:	f023 0301 	bic.w	r3, r3, #1
 8009cb8:	602b      	str	r3, [r5, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8009cba:	686b      	ldr	r3, [r5, #4]
 8009cbc:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8009cc0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009cc4:	606b      	str	r3, [r5, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8009cc6:	69ab      	ldr	r3, [r5, #24]
 8009cc8:	f043 0308 	orr.w	r3, r3, #8
 8009ccc:	61ab      	str	r3, [r5, #24]
 8009cce:	69ab      	ldr	r3, [r5, #24]
 8009cd0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009cd4:	61ab      	str	r3, [r5, #24]
 8009cd6:	69eb      	ldr	r3, [r5, #28]
 8009cd8:	f043 0308 	orr.w	r3, r3, #8
 8009cdc:	61eb      	str	r3, [r5, #28]
 8009cde:	69eb      	ldr	r3, [r5, #28]
 8009ce0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8009ce4:	61eb      	str	r3, [r5, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009ce6:	696b      	ldr	r3, [r5, #20]
 8009ce8:	f043 0301 	orr.w	r3, r3, #1
 8009cec:	616b      	str	r3, [r5, #20]
  if (2U == pHandle->pParams_str->FreqRatio)
 8009cee:	f894 30ab 	ldrb.w	r3, [r4, #171]	@ 0xab
 8009cf2:	2b02      	cmp	r3, #2
 8009cf4:	d046      	beq.n	8009d84 <R3_2_Init+0x24c>
    if (M1 == pHandle->_Super.Motor)
 8009cf6:	f898 3078 	ldrb.w	r3, [r8, #120]	@ 0x78
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d034      	beq.n	8009d68 <R3_2_Init+0x230>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8009cfe:	f06f 0380 	mvn.w	r3, #128	@ 0x80
 8009d02:	612b      	str	r3, [r5, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009d04:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8009d06:	9a05      	ldr	r2, [sp, #20]
 8009d08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d0c:	b172      	cbz	r2, 8009d2c <R3_2_Init+0x1f4>
 8009d0e:	b16b      	cbz	r3, 8009d2c <R3_2_Init+0x1f4>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 8009d10:	f46f 7180 	mvn.w	r1, #256	@ 0x100
 8009d14:	e000      	b.n	8009d18 <R3_2_Init+0x1e0>
 8009d16:	b14b      	cbz	r3, 8009d2c <R3_2_Init+0x1f4>
 8009d18:	6129      	str	r1, [r5, #16]
    Brk2Timeout--;
 8009d1a:	9b05      	ldr	r3, [sp, #20]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	9305      	str	r3, [sp, #20]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8009d20:	692b      	ldr	r3, [r5, #16]
  while ((Brk2Timeout != 0u) && (1U == result))
 8009d22:	9a05      	ldr	r2, [sp, #20]
 8009d24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d28:	2a00      	cmp	r2, #0
 8009d2a:	d1f4      	bne.n	8009d16 <R3_2_Init+0x1de>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8009d2c:	68eb      	ldr	r3, [r5, #12]
 8009d2e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d32:	60eb      	str	r3, [r5, #12]
  SET_BIT(TIMx->CCER, Channels);
 8009d34:	6a2b      	ldr	r3, [r5, #32]
 8009d36:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8009d3a:	f043 0305 	orr.w	r3, r3, #5
 8009d3e:	622b      	str	r3, [r5, #32]
}
 8009d40:	b007      	add	sp, #28
 8009d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        R3_2_ADCxInit(ADCx_2);
 8009d46:	4630      	mov	r0, r6
 8009d48:	f7ff fbc2 	bl	80094d0 <R3_2_ADCxInit>
 8009d4c:	e7ae      	b.n	8009cac <R3_2_Init+0x174>
        R3_2_ADCxInit(ADCx_1);
 8009d4e:	4638      	mov	r0, r7
 8009d50:	f7ff fbbe 	bl	80094d0 <R3_2_ADCxInit>
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 8009d54:	2340      	movs	r3, #64	@ 0x40
 8009d56:	603b      	str	r3, [r7, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d5e:	607b      	str	r3, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8009d60:	68b3      	ldr	r3, [r6, #8]
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d4a2      	bmi.n	8009cac <R3_2_Init+0x174>
 8009d66:	e7ee      	b.n	8009d46 <R3_2_Init+0x20e>
      if (1U == pHandle->pParams_str->RepetitionCounter)
 8009d68:	f894 30a6 	ldrb.w	r3, [r4, #166]	@ 0xa6
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	d00d      	beq.n	8009d8c <R3_2_Init+0x254>
      else if (3U == pHandle->pParams_str->RepetitionCounter)
 8009d70:	2b03      	cmp	r3, #3
 8009d72:	d1c4      	bne.n	8009cfe <R3_2_Init+0x1c6>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009d74:	2201      	movs	r2, #1
 8009d76:	632a      	str	r2, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009d78:	696a      	ldr	r2, [r5, #20]
 8009d7a:	f042 0201 	orr.w	r2, r2, #1
 8009d7e:	616a      	str	r2, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009d80:	632b      	str	r3, [r5, #48]	@ 0x30
}
 8009d82:	e7bc      	b.n	8009cfe <R3_2_Init+0x1c6>
    if (HIGHER_FREQ == pHandle->pParams_str->IsHigherFreqTim)
 8009d84:	f894 30ac 	ldrb.w	r3, [r4, #172]	@ 0xac
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d004      	beq.n	8009d96 <R3_2_Init+0x25e>
        LL_TIM_SetCounter(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) - 1U);
 8009d8c:	f8b8 3094 	ldrh.w	r3, [r8, #148]	@ 0x94
 8009d90:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8009d92:	626b      	str	r3, [r5, #36]	@ 0x24
}
 8009d94:	e7b3      	b.n	8009cfe <R3_2_Init+0x1c6>
      if (3U == pHandle->pParams_str->RepetitionCounter)
 8009d96:	f894 20a6 	ldrb.w	r2, [r4, #166]	@ 0xa6
 8009d9a:	2a03      	cmp	r2, #3
 8009d9c:	d1f6      	bne.n	8009d8c <R3_2_Init+0x254>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009d9e:	632b      	str	r3, [r5, #48]	@ 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8009da0:	696b      	ldr	r3, [r5, #20]
 8009da2:	f043 0301 	orr.w	r3, r3, #1
 8009da6:	616b      	str	r3, [r5, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8009da8:	632a      	str	r2, [r5, #48]	@ 0x30
}
 8009daa:	e7ef      	b.n	8009d8c <R3_2_Init+0x254>
 8009dac:	40012c00 	.word	0x40012c00
 8009db0:	e0042000 	.word	0xe0042000

08009db4 <R3_2_SetOffsetCalib>:
{
 8009db4:	b410      	push	{r4}
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8009db6:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 8009dba:	680b      	ldr	r3, [r1, #0]
 8009dbc:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    pHdl->offsetCalibStatus = true;
 8009dc0:	2301      	movs	r3, #1
    pHandle->PhaseAOffset = (uint32_t)offsets->phaseAOffset;
 8009dc2:	e9c0 4223 	strd	r4, r2, [r0, #140]	@ 0x8c
    pHdl->offsetCalibStatus = true;
 8009dc6:	f880 307f 	strb.w	r3, [r0, #127]	@ 0x7f
}
 8009dca:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dce:	4770      	bx	lr

08009dd0 <R3_2_GetOffsetCalib>:
  offsets->phaseAOffset = (int32_t)pHandle->PhaseAOffset;
 8009dd0:	e9d0 2323 	ldrd	r2, r3, [r0, #140]	@ 0x8c
 8009dd4:	f8d0 0088 	ldr.w	r0, [r0, #136]	@ 0x88
 8009dd8:	608b      	str	r3, [r1, #8]
 8009dda:	e9c1 0200 	strd	r0, r2, [r1]
}
 8009dde:	4770      	bx	lr

08009de0 <R3_2_CurrentReadingPolarization>:
{
 8009de0:	b5f0      	push	{r4, r5, r6, r7, lr}
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009de2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009de6:	681d      	ldr	r5, [r3, #0]
  ADC_TypeDef *ADCx_1 = pHandle->pParams_str->ADCDataReg1[0];
 8009de8:	6b9f      	ldr	r7, [r3, #56]	@ 0x38
  ADC_TypeDef *ADCx_2 = pHandle->pParams_str->ADCDataReg2[0];
 8009dea:	6d1e      	ldr	r6, [r3, #80]	@ 0x50
  if (true == pHandle->_Super.offsetCalibStatus)
 8009dec:	f890 307f 	ldrb.w	r3, [r0, #127]	@ 0x7f
{
 8009df0:	b083      	sub	sp, #12
 8009df2:	4604      	mov	r4, r0
  if (true == pHandle->_Super.offsetCalibStatus)
 8009df4:	b1ab      	cbz	r3, 8009e22 <R3_2_CurrentReadingPolarization+0x42>
  MODIFY_REG(ADCx->CR,
 8009df6:	68bb      	ldr	r3, [r7, #8]
 8009df8:	4a46      	ldr	r2, [pc, #280]	@ (8009f14 <R3_2_CurrentReadingPolarization+0x134>)
 8009dfa:	4013      	ands	r3, r2
 8009dfc:	f043 0308 	orr.w	r3, r3, #8
 8009e00:	60bb      	str	r3, [r7, #8]
 8009e02:	68b3      	ldr	r3, [r6, #8]
 8009e04:	4013      	ands	r3, r2
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009e06:	2180      	movs	r1, #128	@ 0x80
 8009e08:	f043 0308 	orr.w	r3, r3, #8
 8009e0c:	60b3      	str	r3, [r6, #8]
 8009e0e:	f8a0 1096 	strh.w	r1, [r0, #150]	@ 0x96
  pHandle->_Super.Sector = SECTOR_5;
 8009e12:	2204      	movs	r2, #4
  pHandle->_Super.BrakeActionLock = false;
 8009e14:	2300      	movs	r3, #0
  pHandle->_Super.Sector = SECTOR_5;
 8009e16:	f884 207a 	strb.w	r2, [r4, #122]	@ 0x7a
  pHandle->_Super.BrakeActionLock = false;
 8009e1a:	f884 3083 	strb.w	r3, [r4, #131]	@ 0x83
}
 8009e1e:	b003      	add	sp, #12
 8009e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 8009e22:	6802      	ldr	r2, [r0, #0]
 8009e24:	9200      	str	r2, [sp, #0]
    pHandle->PhaseAOffset = 0U;
 8009e26:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8009e2a:	6942      	ldr	r2, [r0, #20]
 8009e2c:	9201      	str	r2, [sp, #4]
    pHandle->PolarizationCounter = 0U;
 8009e2e:	f880 3098 	strb.w	r3, [r0, #152]	@ 0x98
    pHandle->PhaseCOffset = 0U;
 8009e32:	f8c0 3090 	str.w	r3, [r0, #144]	@ 0x90
  CLEAR_BIT(TIMx->CCER, Channels);
 8009e36:	6a2b      	ldr	r3, [r5, #32]
 8009e38:	f423 63aa 	bic.w	r3, r3, #1360	@ 0x550
 8009e3c:	f023 0305 	bic.w	r3, r3, #5
 8009e40:	622b      	str	r3, [r5, #32]
    pHandle->PolarizationSector=SECTOR_5;
 8009e42:	2304      	movs	r3, #4
 8009e44:	f880 3099 	strb.w	r3, [r0, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_5;
 8009e48:	f880 307a 	strb.w	r3, [r0, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationAB;
 8009e4c:	4b32      	ldr	r3, [pc, #200]	@ (8009f18 <R3_2_CurrentReadingPolarization+0x138>)
 8009e4e:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_2_SetADCSampPointPolarization;
 8009e50:	4b32      	ldr	r3, [pc, #200]	@ (8009f1c <R3_2_CurrentReadingPolarization+0x13c>)
 8009e52:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 8009e54:	2380      	movs	r3, #128	@ 0x80
 8009e56:	f8a0 3096 	strh.w	r3, [r0, #150]	@ 0x96
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8009e5a:	f7ff fcc7 	bl	80097ec <R3_2_SwitchOnPWM>
    while (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF)
 8009e5e:	4a30      	ldr	r2, [pc, #192]	@ (8009f20 <R3_2_CurrentReadingPolarization+0x140>)
 8009e60:	686b      	ldr	r3, [r5, #4]
 8009e62:	4013      	ands	r3, r2
 8009e64:	2b70      	cmp	r3, #112	@ 0x70
 8009e66:	d1fb      	bne.n	8009e60 <R3_2_CurrentReadingPolarization+0x80>
 8009e68:	68bb      	ldr	r3, [r7, #8]
 8009e6a:	4a2a      	ldr	r2, [pc, #168]	@ (8009f14 <R3_2_CurrentReadingPolarization+0x134>)
 8009e6c:	4013      	ands	r3, r2
 8009e6e:	f043 0308 	orr.w	r3, r3, #8
 8009e72:	60bb      	str	r3, [r7, #8]
 8009e74:	68b3      	ldr	r3, [r6, #8]
 8009e76:	4013      	ands	r3, r2
 8009e78:	f043 0308 	orr.w	r3, r3, #8
                           pHandle->pParams_str->RepetitionCounter,
 8009e7c:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
 8009e80:	60b3      	str	r3, [r6, #8]
    waitForPolarizationEnd(TIMx,
 8009e82:	f104 0798 	add.w	r7, r4, #152	@ 0x98
 8009e86:	f104 0656 	add.w	r6, r4, #86	@ 0x56
 8009e8a:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8009e8e:	4631      	mov	r1, r6
 8009e90:	463b      	mov	r3, r7
 8009e92:	4628      	mov	r0, r5
 8009e94:	f7f8 ffd2 	bl	8002e3c <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8009e98:	4620      	mov	r0, r4
 8009e9a:	f7ff fcf1 	bl	8009880 <R3_2_SwitchOffPWM>
    pHandle->PolarizationCounter = 0U;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f884 3098 	strb.w	r3, [r4, #152]	@ 0x98
    pHandle->PolarizationSector=SECTOR_1;
 8009ea4:	f884 3099 	strb.w	r3, [r4, #153]	@ 0x99
    pHandle->_Super.Sector = SECTOR_1;
 8009ea8:	f884 307a 	strb.w	r3, [r4, #122]	@ 0x7a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_HFCurrentsPolarizationC;
 8009eac:	4b1d      	ldr	r3, [pc, #116]	@ (8009f24 <R3_2_CurrentReadingPolarization+0x144>)
 8009eae:	6023      	str	r3, [r4, #0]
    R3_2_SwitchOnPWM(&pHandle->_Super);
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f7ff fc9b 	bl	80097ec <R3_2_SwitchOnPWM>
                           pHandle->pParams_str->RepetitionCounter,
 8009eb6:	f8d4 209c 	ldr.w	r2, [r4, #156]	@ 0x9c
    waitForPolarizationEnd(TIMx,
 8009eba:	463b      	mov	r3, r7
 8009ebc:	f892 20a6 	ldrb.w	r2, [r2, #166]	@ 0xa6
 8009ec0:	4631      	mov	r1, r6
 8009ec2:	4628      	mov	r0, r5
 8009ec4:	f7f8 ffba 	bl	8002e3c <waitForPolarizationEnd>
    R3_2_SwitchOffPWM(&pHandle->_Super);
 8009ec8:	4620      	mov	r0, r4
 8009eca:	f7ff fcd9 	bl	8009880 <R3_2_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009ece:	e9d4 2322 	ldrd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 8009ed2:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 8009ed4:	091b      	lsrs	r3, r3, #4
 8009ed6:	e9c4 2322 	strd	r2, r3, [r4, #136]	@ 0x88
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009eda:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8009ede:	f8b4 3094 	ldrh.w	r3, [r4, #148]	@ 0x94
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8009ee2:	9800      	ldr	r0, [sp, #0]
 8009ee4:	6020      	str	r0, [r4, #0]
    pHandle->_Super.offsetCalibStatus = true;
 8009ee6:	2101      	movs	r1, #1
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 8009ee8:	0912      	lsrs	r2, r2, #4
 8009eea:	f8c4 2090 	str.w	r2, [r4, #144]	@ 0x90
    LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod >> 1u);
 8009eee:	40cb      	lsrs	r3, r1
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009ef0:	9a01      	ldr	r2, [sp, #4]
    pHandle->_Super.offsetCalibStatus = true;
 8009ef2:	f884 107f 	strb.w	r1, [r4, #127]	@ 0x7f
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8009ef6:	6162      	str	r2, [r4, #20]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009ef8:	636b      	str	r3, [r5, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009efa:	63ab      	str	r3, [r5, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009efc:	63eb      	str	r3, [r5, #60]	@ 0x3c
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_COM(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_COMG);
 8009efe:	696b      	ldr	r3, [r5, #20]
 8009f00:	f043 0320 	orr.w	r3, r3, #32
 8009f04:	616b      	str	r3, [r5, #20]
  SET_BIT(TIMx->CCER, Channels);
 8009f06:	6a2b      	ldr	r3, [r5, #32]
 8009f08:	f443 63aa 	orr.w	r3, r3, #1360	@ 0x550
 8009f0c:	f043 0305 	orr.w	r3, r3, #5
 8009f10:	622b      	str	r3, [r5, #32]
}
 8009f12:	e77e      	b.n	8009e12 <R3_2_CurrentReadingPolarization+0x32>
 8009f14:	7fffffc0 	.word	0x7fffffc0
 8009f18:	0800974d 	.word	0x0800974d
 8009f1c:	08009709 	.word	0x08009709
 8009f20:	02000070 	.word	0x02000070
 8009f24:	080097a1 	.word	0x080097a1

08009f28 <R3_2_SetADCSampPointSectX>:
{
 8009f28:	b530      	push	{r4, r5, lr}
    if ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) > pHandle->pParams_str->Tafter)
 8009f2a:	f8b0 3058 	ldrh.w	r3, [r0, #88]	@ 0x58
 8009f2e:	f8b0 e094 	ldrh.w	lr, [r0, #148]	@ 0x94
 8009f32:	f8d0 109c 	ldr.w	r1, [r0, #156]	@ 0x9c
 8009f36:	ebae 0203 	sub.w	r2, lr, r3
 8009f3a:	f8b1 4098 	ldrh.w	r4, [r1, #152]	@ 0x98
 8009f3e:	b292      	uxth	r2, r2
 8009f40:	42a2      	cmp	r2, r4
 8009f42:	d917      	bls.n	8009f74 <R3_2_SetADCSampPointSectX+0x4c>
      pHandle->_Super.Sector = SECTOR_5;
 8009f44:	2204      	movs	r2, #4
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009f46:	f10e 33ff 	add.w	r3, lr, #4294967295
      pHandle->_Super.Sector = SECTOR_5;
 8009f4a:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
      SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t)1;
 8009f4e:	b29b      	uxth	r3, r3
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009f50:	680a      	ldr	r2, [r1, #0]
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t) pHandle->_Super.CntPhA);
 8009f52:	f8b0 5050 	ldrh.w	r5, [r0, #80]	@ 0x50
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t) pHandle->_Super.CntPhB);
 8009f56:	f8b0 4052 	ldrh.w	r4, [r0, #82]	@ 0x52
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t) pHandle->_Super.CntPhC);
 8009f5a:	f8b0 1054 	ldrh.w	r1, [r0, #84]	@ 0x54
  WRITE_REG(TIMx->CCR1, CompareValue);
 8009f5e:	6355      	str	r5, [r2, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8009f60:	6394      	str	r4, [r2, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8009f62:	63d1      	str	r1, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8009f64:	6413      	str	r3, [r2, #64]	@ 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 8009f66:	6852      	ldr	r2, [r2, #4]
 8009f68:	4b10      	ldr	r3, [pc, #64]	@ (8009fac <R3_2_SetADCSampPointSectX+0x84>)
 8009f6a:	421a      	tst	r2, r3
}
 8009f6c:	bf14      	ite	ne
 8009f6e:	2001      	movne	r0, #1
 8009f70:	2000      	moveq	r0, #0
 8009f72:	bd30      	pop	{r4, r5, pc}
      DeltaDuty = (uint16_t)(pHdl->lowDuty - pHdl->midDuty);
 8009f74:	f8b0 c05a 	ldrh.w	ip, [r0, #90]	@ 0x5a
 8009f78:	eba3 0c0c 	sub.w	ip, r3, ip
      if (DeltaDuty > ((uint16_t)(pHandle->Half_PWMPeriod - pHdl->lowDuty) * 2U))
 8009f7c:	fa1f fc8c 	uxth.w	ip, ip
 8009f80:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8009f84:	d904      	bls.n	8009f90 <R3_2_SetADCSampPointSectX+0x68>
        SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8009f86:	f8b1 209c 	ldrh.w	r2, [r1, #156]	@ 0x9c
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	b29b      	uxth	r3, r3
 8009f8e:	e7df      	b.n	8009f50 <R3_2_SetADCSampPointSectX+0x28>
        SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8009f90:	4423      	add	r3, r4
 8009f92:	b29b      	uxth	r3, r3
        if (SamplingPoint >= pHandle->Half_PWMPeriod)
 8009f94:	459e      	cmp	lr, r3
 8009f96:	d8db      	bhi.n	8009f50 <R3_2_SetADCSampPointSectX+0x28>
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009f98:	43db      	mvns	r3, r3
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009f9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009f9e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
          pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_FALLING;
 8009fa2:	f8a0 2096 	strh.w	r2, [r0, #150]	@ 0x96
          SamplingPoint = (2U * pHandle->Half_PWMPeriod) - SamplingPoint - (uint16_t)1;
 8009fa6:	b29b      	uxth	r3, r3
 8009fa8:	e7d2      	b.n	8009f50 <R3_2_SetADCSampPointSectX+0x28>
 8009faa:	bf00      	nop
 8009fac:	02000070 	.word	0x02000070

08009fb0 <R3_2_TIMx_UP_IRQHandler>:
{
 8009fb0:	b4f0      	push	{r4, r5, r6, r7}
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009fb2:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 8009fb6:	f890 407a 	ldrb.w	r4, [r0, #122]	@ 0x7a
    R3_3_OPAMPParams_t *OPAMPParams = pHandle->pParams_str->OPAMPParams;
 8009fba:	685e      	ldr	r6, [r3, #4]
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 8009fbc:	681d      	ldr	r5, [r3, #0]
{
 8009fbe:	4601      	mov	r1, r0
 8009fc0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009fc4:	6b82      	ldr	r2, [r0, #56]	@ 0x38
    if (OPAMPParams != NULL)
 8009fc6:	b1d6      	cbz	r6, 8009ffe <R3_2_TIMx_UP_IRQHandler+0x4e>
 8009fc8:	ea4f 0c84 	mov.w	ip, r4, lsl #2
      while (0x0u != pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR)
 8009fcc:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d1fc      	bne.n	8009fcc <R3_2_TIMx_UP_IRQHandler+0x1c>
      OpampConfig = OPAMPParams->OPAMPConfig1[pHandle->_Super.Sector];
 8009fd2:	eb06 030c 	add.w	r3, r6, ip
 8009fd6:	6b1f      	ldr	r7, [r3, #48]	@ 0x30
      if (OpampConfig != OPAMP_UNCHANGED)
 8009fd8:	f1b7 3fff 	cmp.w	r7, #4294967295
 8009fdc:	d006      	beq.n	8009fec <R3_2_TIMx_UP_IRQHandler+0x3c>
        operationAmp = OPAMPParams->OPAMPSelect_1[pHandle->_Super.Sector];
 8009fde:	f856 6024 	ldr.w	r6, [r6, r4, lsl #2]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009fe2:	6834      	ldr	r4, [r6, #0]
 8009fe4:	f424 7486 	bic.w	r4, r4, #268	@ 0x10c
 8009fe8:	433c      	orrs	r4, r7
 8009fea:	6034      	str	r4, [r6, #0]
      OpampConfig = OPAMPParams->OPAMPConfig2[pHandle->_Super.Sector];
 8009fec:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
      if (OpampConfig != OPAMP_UNCHANGED)
 8009fee:	1c66      	adds	r6, r4, #1
 8009ff0:	d005      	beq.n	8009ffe <R3_2_TIMx_UP_IRQHandler+0x4e>
        operationAmp = OPAMPParams->OPAMPSelect_2[pHandle->_Super.Sector];
 8009ff2:	699e      	ldr	r6, [r3, #24]
        MODIFY_REG(operationAmp->CSR, (OPAMP_CSR_OPAMPINTEN | OPAMP_CSR_VPSEL), OpampConfig);
 8009ff4:	6833      	ldr	r3, [r6, #0]
 8009ff6:	f423 7386 	bic.w	r3, r3, #268	@ 0x10c
 8009ffa:	4323      	orrs	r3, r4
 8009ffc:	6033      	str	r3, [r6, #0]
    pHandle->pParams_str->ADCDataReg1[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig1[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 8009ffe:	f8b1 3096 	ldrh.w	r3, [r1, #150]	@ 0x96
 800a002:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800a004:	431c      	orrs	r4, r3
 800a006:	64d4      	str	r4, [r2, #76]	@ 0x4c
    pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]->JSQR = pHandle->pParams_str->ADCConfig2[pHandle->_Super.Sector] | (uint32_t) pHandle->ADC_ExternalPolarityInjected;
 800a008:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800a00a:	f8d0 0080 	ldr.w	r0, [r0, #128]	@ 0x80
 800a00e:	4303      	orrs	r3, r0
 800a010:	64d3      	str	r3, [r2, #76]	@ 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a012:	686b      	ldr	r3, [r5, #4]
 800a014:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800a018:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a01c:	2280      	movs	r2, #128	@ 0x80
 800a01e:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800a022:	606b      	str	r3, [r5, #4]
}
 800a024:	f101 0078 	add.w	r0, r1, #120	@ 0x78
 800a028:	bcf0      	pop	{r4, r5, r6, r7}
    pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 800a02a:	f8a1 2096 	strh.w	r2, [r1, #150]	@ 0x96
}
 800a02e:	4770      	bx	lr

0800a030 <R3_2_RLDetectionModeEnable>:
  if (false == pHandle->_Super.RLDetectionMode)
 800a030:	f890 107e 	ldrb.w	r1, [r0, #126]	@ 0x7e
{
 800a034:	b410      	push	{r4}
  if (false == pHandle->_Super.RLDetectionMode)
 800a036:	2900      	cmp	r1, #0
 800a038:	d13d      	bne.n	800a0b6 <R3_2_RLDetectionModeEnable+0x86>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a03a:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a03e:	681b      	ldr	r3, [r3, #0]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a040:	699a      	ldr	r2, [r3, #24]
 800a042:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a046:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a04a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a04e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a050:	6a1a      	ldr	r2, [r3, #32]
 800a052:	f042 0201 	orr.w	r2, r2, #1
 800a056:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a058:	6a1a      	ldr	r2, [r3, #32]
 800a05a:	f022 0204 	bic.w	r2, r2, #4
 800a05e:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a060:	6359      	str	r1, [r3, #52]	@ 0x34
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a062:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a066:	2a01      	cmp	r2, #1
 800a068:	d033      	beq.n	800a0d2 <R3_2_RLDetectionModeEnable+0xa2>
    else if (ES_GPIO ==  pHandle->_Super.LowSideOutputs)
 800a06a:	2a02      	cmp	r2, #2
 800a06c:	d10f      	bne.n	800a08e <R3_2_RLDetectionModeEnable+0x5e>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a06e:	699a      	ldr	r2, [r3, #24]
 800a070:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a074:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a078:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800a07c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a07e:	6a1a      	ldr	r2, [r3, #32]
 800a080:	f042 0210 	orr.w	r2, r2, #16
 800a084:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a086:	6a1a      	ldr	r2, [r3, #32]
 800a088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a08c:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a08e:	69da      	ldr	r2, [r3, #28]
 800a090:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800a094:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a098:	f042 0270 	orr.w	r2, r2, #112	@ 0x70
 800a09c:	61da      	str	r2, [r3, #28]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a09e:	6a1a      	ldr	r2, [r3, #32]
    pHandle->PhaseAOffset = pHandle->PhaseBOffset; /* Use only the offset of phB */
 800a0a0:	f8d0 108c 	ldr.w	r1, [r0, #140]	@ 0x8c
 800a0a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a0a8:	621a      	str	r2, [r3, #32]
 800a0aa:	6a1a      	ldr	r2, [r3, #32]
 800a0ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a0b0:	621a      	str	r2, [r3, #32]
 800a0b2:	f8c0 1088 	str.w	r1, [r0, #136]	@ 0x88
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a0b6:	4b0f      	ldr	r3, [pc, #60]	@ (800a0f4 <R3_2_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_2_RLSwitchOnPWM;
 800a0b8:	490f      	ldr	r1, [pc, #60]	@ (800a0f8 <R3_2_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a0ba:	4a10      	ldr	r2, [pc, #64]	@ (800a0fc <R3_2_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a0bc:	4c10      	ldr	r4, [pc, #64]	@ (800a100 <R3_2_RLDetectionModeEnable+0xd0>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_2_RLTurnOnLowSides;
 800a0be:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 800a0c0:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_2_RLGetPhaseCurrents;
 800a0c2:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a0c4:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a0c8:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->_Super.RLDetectionMode = true;
 800a0cc:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800a0d0:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a0d2:	699a      	ldr	r2, [r3, #24]
 800a0d4:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a0d8:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a0dc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a0e0:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a0e2:	6a1a      	ldr	r2, [r3, #32]
 800a0e4:	f022 0210 	bic.w	r2, r2, #16
 800a0e8:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 800a0ea:	6a1a      	ldr	r2, [r3, #32]
 800a0ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0f0:	621a      	str	r2, [r3, #32]
}
 800a0f2:	e7cc      	b.n	800a08e <R3_2_RLDetectionModeEnable+0x5e>
 800a0f4:	08009ae9 	.word	0x08009ae9
 800a0f8:	08009951 	.word	0x08009951
 800a0fc:	08009881 	.word	0x08009881
 800a100:	080098fd 	.word	0x080098fd

0800a104 <R3_2_RLDetectionModeDisable>:
  if (true ==  pHandle->_Super.RLDetectionMode)
 800a104:	f890 307e 	ldrb.w	r3, [r0, #126]	@ 0x7e
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d03d      	beq.n	800a188 <R3_2_RLDetectionModeDisable+0x84>
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a10c:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800a110:	f8b0 1094 	ldrh.w	r1, [r0, #148]	@ 0x94
  TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a114:	681b      	ldr	r3, [r3, #0]
{
 800a116:	b410      	push	{r4}
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a118:	699a      	ldr	r2, [r3, #24]
 800a11a:	4c40      	ldr	r4, [pc, #256]	@ (800a21c <R3_2_RLDetectionModeDisable+0x118>)
 800a11c:	4022      	ands	r2, r4
 800a11e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a122:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a124:	6a1a      	ldr	r2, [r3, #32]
 800a126:	f042 0201 	orr.w	r2, r2, #1
 800a12a:	621a      	str	r2, [r3, #32]
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a12c:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a130:	2a01      	cmp	r2, #1
    LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t)pHandle->Half_PWMPeriod) >> 1);
 800a132:	ea4f 0151 	mov.w	r1, r1, lsr #1
    if (LS_PWM_TIMER == pHandle->_Super.LowSideOutputs)
 800a136:	d028      	beq.n	800a18a <R3_2_RLDetectionModeDisable+0x86>
    else if (ES_GPIO == pHandle->_Super.LowSideOutputs)
 800a138:	2a02      	cmp	r2, #2
 800a13a:	d04a      	beq.n	800a1d2 <R3_2_RLDetectionModeDisable+0xce>
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a13c:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a13e:	699a      	ldr	r2, [r3, #24]
 800a140:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a144:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a148:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a14c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a14e:	6a1a      	ldr	r2, [r3, #32]
 800a150:	f042 0210 	orr.w	r2, r2, #16
 800a154:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a156:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a158:	69da      	ldr	r2, [r3, #28]
 800a15a:	4022      	ands	r2, r4
 800a15c:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a160:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a162:	6a1a      	ldr	r2, [r3, #32]
 800a164:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a168:	621a      	str	r2, [r3, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a16a:	4a2d      	ldr	r2, [pc, #180]	@ (800a220 <R3_2_RLDetectionModeDisable+0x11c>)
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a16c:	63d9      	str	r1, [r3, #60]	@ 0x3c
    pHandle->_Super.pFctSwitchOnPwm = &R3_2_SwitchOnPWM;
 800a16e:	492d      	ldr	r1, [pc, #180]	@ (800a224 <R3_2_RLDetectionModeDisable+0x120>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_2_GetPhaseCurrents;
 800a170:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a172:	4a2d      	ldr	r2, [pc, #180]	@ (800a228 <R3_2_RLDetectionModeDisable+0x124>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_2_TurnOnLowSides;
 800a174:	4c2d      	ldr	r4, [pc, #180]	@ (800a22c <R3_2_RLDetectionModeDisable+0x128>)
 800a176:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 800a178:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_2_SwitchOffPWM;
 800a17a:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 800a17e:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 800a182:	f880 307e 	strb.w	r3, [r0, #126]	@ 0x7e
}
 800a186:	4770      	bx	lr
 800a188:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800a18a:	6a1a      	ldr	r2, [r3, #32]
 800a18c:	f042 0204 	orr.w	r2, r2, #4
 800a190:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a192:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a194:	699a      	ldr	r2, [r3, #24]
 800a196:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a19a:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a19e:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a1a2:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a1a4:	6a1a      	ldr	r2, [r3, #32]
 800a1a6:	f042 0210 	orr.w	r2, r2, #16
 800a1aa:	621a      	str	r2, [r3, #32]
 800a1ac:	6a1a      	ldr	r2, [r3, #32]
 800a1ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a1b2:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a1b4:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a1b6:	69da      	ldr	r2, [r3, #28]
 800a1b8:	4022      	ands	r2, r4
 800a1ba:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a1be:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a1c0:	6a1a      	ldr	r2, [r3, #32]
 800a1c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a1c6:	621a      	str	r2, [r3, #32]
 800a1c8:	6a1a      	ldr	r2, [r3, #32]
 800a1ca:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a1ce:	621a      	str	r2, [r3, #32]
}
 800a1d0:	e7cb      	b.n	800a16a <R3_2_RLDetectionModeDisable+0x66>
  CLEAR_BIT(TIMx->CCER, Channels);
 800a1d2:	6a1a      	ldr	r2, [r3, #32]
 800a1d4:	f022 0204 	bic.w	r2, r2, #4
 800a1d8:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a1da:	6359      	str	r1, [r3, #52]	@ 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a1dc:	699a      	ldr	r2, [r3, #24]
 800a1de:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800a1e2:	f422 42e6 	bic.w	r2, r2, #29440	@ 0x7300
 800a1e6:	f442 42c0 	orr.w	r2, r2, #24576	@ 0x6000
 800a1ea:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800a1ec:	6a1a      	ldr	r2, [r3, #32]
 800a1ee:	f042 0210 	orr.w	r2, r2, #16
 800a1f2:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a1f4:	6a1a      	ldr	r2, [r3, #32]
 800a1f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a1fa:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a1fc:	6399      	str	r1, [r3, #56]	@ 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a1fe:	69da      	ldr	r2, [r3, #28]
 800a200:	4022      	ands	r2, r4
 800a202:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a206:	61da      	str	r2, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800a208:	6a1a      	ldr	r2, [r3, #32]
 800a20a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a20e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 800a210:	6a1a      	ldr	r2, [r3, #32]
 800a212:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a216:	621a      	str	r2, [r3, #32]
}
 800a218:	e7a7      	b.n	800a16a <R3_2_RLDetectionModeDisable+0x66>
 800a21a:	bf00      	nop
 800a21c:	fffeff8c 	.word	0xfffeff8c
 800a220:	0800958d 	.word	0x0800958d
 800a224:	080097ed 	.word	0x080097ed
 800a228:	08009881 	.word	0x08009881
 800a22c:	08009a01 	.word	0x08009a01

0800a230 <R3_2_RLDetectionModeSetDuty>:
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a230:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800a234:	f8b0 c094 	ldrh.w	ip, [r0, #148]	@ 0x94
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a238:	6812      	ldr	r2, [r2, #0]
{
 800a23a:	4603      	mov	r3, r0
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800a23c:	69d0      	ldr	r0, [r2, #28]
 800a23e:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800a242:	fb0c f101 	mul.w	r1, ip, r1
 800a246:	f420 40e6 	bic.w	r0, r0, #29440	@ 0x7300
{
 800a24a:	b410      	push	{r4}
    val = (((uint32_t)pHandle->Half_PWMPeriod) * ((uint32_t)hDuty)) >> 16;
 800a24c:	0c09      	lsrs	r1, r1, #16
    pHandle->ADCRegularLocked = true;
 800a24e:	2401      	movs	r4, #1
 800a250:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 800a254:	f883 40a0 	strb.w	r4, [r3, #160]	@ 0xa0
    pHandle->_Super.CntPhA = (uint16_t)val;
 800a258:	f8a3 1050 	strh.w	r1, [r3, #80]	@ 0x50
 800a25c:	61d0      	str	r0, [r2, #28]
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800a25e:	f8b3 0074 	ldrh.w	r0, [r3, #116]	@ 0x74
    LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)pHandle->_Super.Toff);
 800a262:	f8b3 4076 	ldrh.w	r4, [r3, #118]	@ 0x76
    LL_TIM_OC_SetCompareCH4(TIMx, (((uint32_t)pHandle->Half_PWMPeriod) - ((uint32_t)pHandle->_Super.Ton)));
 800a266:	ebac 0000 	sub.w	r0, ip, r0
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a26a:	6410      	str	r0, [r2, #64]	@ 0x40
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a26c:	63d4      	str	r4, [r2, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a26e:	6351      	str	r1, [r2, #52]	@ 0x34
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800a270:	6851      	ldr	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800a272:	f8b3 0056 	ldrh.w	r0, [r3, #86]	@ 0x56
 800a276:	f021 7100 	bic.w	r1, r1, #33554432	@ 0x2000000
 800a27a:	f021 0170 	bic.w	r1, r1, #112	@ 0x70
    pHdl->Sector = SECTOR_4;
 800a27e:	f04f 0c03 	mov.w	ip, #3
 800a282:	f041 0170 	orr.w	r1, r1, #112	@ 0x70
 800a286:	6051      	str	r1, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800a288:	2801      	cmp	r0, #1
    pHdl->Sector = SECTOR_4;
 800a28a:	f883 c07a 	strb.w	ip, [r3, #122]	@ 0x7a
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a28e:	6852      	ldr	r2, [r2, #4]
    if (1U ==  pHandle->_Super.SWerror)
 800a290:	d007      	beq.n	800a2a2 <R3_2_RLDetectionModeSetDuty+0x72>
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a292:	4b07      	ldr	r3, [pc, #28]	@ (800a2b0 <R3_2_RLDetectionModeSetDuty+0x80>)
}
 800a294:	f85d 4b04 	ldr.w	r4, [sp], #4
    if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET)
 800a298:	421a      	tst	r2, r3
 800a29a:	bf14      	ite	ne
 800a29c:	2001      	movne	r0, #1
 800a29e:	2000      	moveq	r0, #0
}
 800a2a0:	4770      	bx	lr
      pHandle->_Super.SWerror = 0U;
 800a2a2:	2200      	movs	r2, #0
}
 800a2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->_Super.SWerror = 0U;
 800a2a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
}
 800a2ac:	4770      	bx	lr
 800a2ae:	bf00      	nop
 800a2b0:	02000070 	.word	0x02000070

0800a2b4 <R3_2_RLTurnOnLowSidesAndStart>:
  }
  else
  {
#endif
    PWMC_R3_2_Handle_t *pHandle = (PWMC_R3_2_Handle_t *)pHdl; //cstat !MISRAC2012-Rule-11.3
    TIM_TypeDef *TIMx = pHandle->pParams_str->TIMx;
 800a2b4:	f8d0 309c 	ldr.w	r3, [r0, #156]	@ 0x9c
 800a2b8:	681b      	ldr	r3, [r3, #0]

    pHandle->ADCRegularLocked=true;
 800a2ba:	2101      	movs	r1, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a2bc:	f06f 0201 	mvn.w	r2, #1
{
 800a2c0:	b430      	push	{r4, r5}
    pHandle->ADCRegularLocked=true;
 800a2c2:	f880 10a0 	strb.w	r1, [r0, #160]	@ 0xa0
 800a2c6:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a2c8:	691a      	ldr	r2, [r3, #16]
 800a2ca:	07d1      	lsls	r1, r2, #31
 800a2cc:	d5fc      	bpl.n	800a2c8 <R3_2_RLTurnOnLowSidesAndStart+0x14>
    LL_TIM_ClearFlag_UPDATE(TIMx);

    LL_TIM_OC_SetCompareCH1(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH2(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH3(TIMx, 0x0U);
    LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t )pHandle->Half_PWMPeriod) - 5U);
 800a2ce:	f8b0 2094 	ldrh.w	r2, [r0, #148]	@ 0x94
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a2d2:	2100      	movs	r1, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800a2d4:	f06f 0401 	mvn.w	r4, #1
 800a2d8:	3a05      	subs	r2, #5
 800a2da:	611c      	str	r4, [r3, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800a2dc:	6359      	str	r1, [r3, #52]	@ 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800a2de:	6399      	str	r1, [r3, #56]	@ 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800a2e0:	63d9      	str	r1, [r3, #60]	@ 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 800a2e2:	641a      	str	r2, [r3, #64]	@ 0x40
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800a2e4:	691a      	ldr	r2, [r3, #16]
 800a2e6:	07d2      	lsls	r2, r2, #31
 800a2e8:	d5fc      	bpl.n	800a2e4 <R3_2_RLTurnOnLowSidesAndStart+0x30>
    {
      /* Nothing to do */
    }

    /* Main PWM Output Enable */
    TIMx->BDTR |= LL_TIM_OSSI_ENABLE ;
 800a2ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a2f0:	645a      	str	r2, [r3, #68]	@ 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800a2f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a2f4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a2f8:	645a      	str	r2, [r3, #68]	@ 0x44
    LL_TIM_EnableAllOutputs (TIMx);

    if (ES_GPIO == pHandle->_Super.LowSideOutputs )
 800a2fa:	f890 207b 	ldrb.w	r2, [r0, #123]	@ 0x7b
 800a2fe:	2a02      	cmp	r2, #2
 800a300:	d00c      	beq.n	800a31c <R3_2_RLTurnOnLowSidesAndStart+0x68>
    else
    {
      /* Nothing to do */
    }

    pHdl->Sector = SECTOR_4;
 800a302:	2203      	movs	r2, #3
 800a304:	f880 207a 	strb.w	r2, [r0, #122]	@ 0x7a
  SET_BIT(TIMx->CCER, Channels);
 800a308:	6a1a      	ldr	r2, [r3, #32]
 800a30a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800a30e:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800a310:	68da      	ldr	r2, [r3, #12]
 800a312:	f042 0201 	orr.w	r2, r2, #1

    LL_TIM_EnableIT_UPDATE(TIMx);
#ifdef NULL_PTR_CHECK_R3_2_PWM_CURR_FDB
  }
#endif
}
 800a316:	bc30      	pop	{r4, r5}
 800a318:	60da      	str	r2, [r3, #12]
 800a31a:	4770      	bx	lr
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a31c:	e9d0 410f 	ldrd	r4, r1, [r0, #60]	@ 0x3c
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_u_port, pHandle->_Super.pwm_en_u_pin);
 800a320:	f8b0 5048 	ldrh.w	r5, [r0, #72]	@ 0x48
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a324:	6c42      	ldr	r2, [r0, #68]	@ 0x44
  WRITE_REG(GPIOx->BSRR, PinMask);
 800a326:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_v_port, pHandle->_Super.pwm_en_v_pin);
 800a328:	f8b0 404a 	ldrh.w	r4, [r0, #74]	@ 0x4a
 800a32c:	618c      	str	r4, [r1, #24]
      LL_GPIO_SetOutputPin(pHandle->_Super.pwm_en_w_port, pHandle->_Super.pwm_en_w_pin);
 800a32e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	@ 0x4c
 800a332:	6191      	str	r1, [r2, #24]
}
 800a334:	e7e5      	b.n	800a302 <R3_2_RLTurnOnLowSidesAndStart+0x4e>
 800a336:	bf00      	nop

0800a338 <RVBS_Clear>:
  * @brief  It clears bus voltage FW variable containing average bus voltage
  *         value.
  * @param  pHandle related RDivider_Handle_t
  */
__weak void RVBS_Clear(RDivider_Handle_t *pHandle)
{
 800a338:	b510      	push	{r4, lr}
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a33a:	8a42      	ldrh	r2, [r0, #18]
 800a33c:	f8b0 e00c 	ldrh.w	lr, [r0, #12]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a340:	8943      	ldrh	r3, [r0, #10]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800a342:	4496      	add	lr, r2
 800a344:	ea4f 0e5e 	mov.w	lr, lr, lsr #1
 800a348:	2400      	movs	r4, #0
 800a34a:	f36e 040f 	bfi	r4, lr, #0, #16
 800a34e:	f36e 441f 	bfi	r4, lr, #16, #16
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a352:	b153      	cbz	r3, 800a36a <RVBS_Clear+0x32>
 800a354:	6942      	ldr	r2, [r0, #20]
    {
      pHandle->aBuffer[index] = aux;
 800a356:	2300      	movs	r3, #0
 800a358:	3a02      	subs	r2, #2
 800a35a:	f822 ef02 	strh.w	lr, [r2, #2]!
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800a35e:	3301      	adds	r3, #1
 800a360:	f8b0 c00a 	ldrh.w	ip, [r0, #10]
 800a364:	b299      	uxth	r1, r3
 800a366:	458c      	cmp	ip, r1
 800a368:	d8f7      	bhi.n	800a35a <RVBS_Clear+0x22>
    }
    pHandle->_Super.LatestConv = aux;
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 800a36a:	2300      	movs	r3, #0
    pHandle->_Super.LatestConv = aux;
 800a36c:	6044      	str	r4, [r0, #4]
    pHandle->index = 0U;
 800a36e:	7643      	strb	r3, [r0, #25]
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
}
 800a370:	bd10      	pop	{r4, pc}
 800a372:	bf00      	nop

0800a374 <RVBS_Init>:
{
 800a374:	b508      	push	{r3, lr}
    RVBS_Clear(pHandle);
 800a376:	f7ff ffdf 	bl	800a338 <RVBS_Clear>
}
 800a37a:	bd08      	pop	{r3, pc}

0800a37c <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a37c:	8982      	ldrh	r2, [r0, #12]
 800a37e:	89c1      	ldrh	r1, [r0, #14]
	{
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a380:	88c3      	ldrh	r3, [r0, #6]
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 800a382:	428a      	cmp	r2, r1
 800a384:	d010      	beq.n	800a3a8 <RVBS_CheckFaultState+0x2c>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a386:	f8b0 c012 	ldrh.w	ip, [r0, #18]
 800a38a:	459c      	cmp	ip, r3
 800a38c:	d80a      	bhi.n	800a3a4 <RVBS_CheckFaultState+0x28>
{
 800a38e:	b410      	push	{r4}
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 800a390:	7c04      	ldrb	r4, [r0, #16]
 800a392:	b994      	cbnz	r4, 800a3ba <RVBS_CheckFaultState+0x3e>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 800a394:	4299      	cmp	r1, r3
 800a396:	d914      	bls.n	800a3c2 <RVBS_CheckFaultState+0x46>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 800a398:	2301      	movs	r3, #1
 800a39a:	7403      	strb	r3, [r0, #16]
        {
          pHandle->OverVoltageHysteresisUpDir = false;
          fault = MC_OVER_VOLT;
        }
        else{
          fault = MC_NO_ERROR;
 800a39c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 800a39e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a3a2:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 800a3a4:	2004      	movs	r0, #4
 800a3a6:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d30c      	bcc.n	800a3c6 <RVBS_CheckFaultState+0x4a>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 800a3ac:	8a40      	ldrh	r0, [r0, #18]
 800a3ae:	4298      	cmp	r0, r3
 800a3b0:	bf94      	ite	ls
 800a3b2:	2000      	movls	r0, #0
 800a3b4:	2001      	movhi	r0, #1
 800a3b6:	0080      	lsls	r0, r0, #2
 800a3b8:	4770      	bx	lr
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 800a3ba:	429a      	cmp	r2, r3
 800a3bc:	d2ee      	bcs.n	800a39c <RVBS_CheckFaultState+0x20>
          pHandle->OverVoltageHysteresisUpDir = false;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	7403      	strb	r3, [r0, #16]
          fault = MC_OVER_VOLT;
 800a3c2:	2002      	movs	r0, #2
 800a3c4:	e7eb      	b.n	800a39e <RVBS_CheckFaultState+0x22>
 800a3c6:	2002      	movs	r0, #2
}
 800a3c8:	4770      	bx	lr
 800a3ca:	bf00      	nop

0800a3cc <RVBS_CalcAvVbus>:
{
 800a3cc:	b538      	push	{r3, r4, r5, lr}
    if (0xFFFFU == hAux)
 800a3ce:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a3d2:	4299      	cmp	r1, r3
{
 800a3d4:	4604      	mov	r4, r0
    if (0xFFFFU == hAux)
 800a3d6:	d021      	beq.n	800a41c <RVBS_CalcAvVbus+0x50>
      pHandle->aBuffer[pHandle->index] = hAux;
 800a3d8:	6943      	ldr	r3, [r0, #20]
 800a3da:	7e45      	ldrb	r5, [r0, #25]
 800a3dc:	f823 1015 	strh.w	r1, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a3e0:	f8b0 e00a 	ldrh.w	lr, [r0, #10]
 800a3e4:	f01e 02ff 	ands.w	r2, lr, #255	@ 0xff
 800a3e8:	d00d      	beq.n	800a406 <RVBS_CalcAvVbus+0x3a>
 800a3ea:	3a01      	subs	r2, #1
 800a3ec:	b2d2      	uxtb	r2, r2
 800a3ee:	eb03 0042 	add.w	r0, r3, r2, lsl #1
 800a3f2:	3b02      	subs	r3, #2
      wtemp = 0u;
 800a3f4:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 800a3f6:	f833 cf02 	ldrh.w	ip, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a3fa:	4298      	cmp	r0, r3
        wtemp += pHandle->aBuffer[i];
 800a3fc:	4462      	add	r2, ip
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 800a3fe:	d1fa      	bne.n	800a3f6 <RVBS_CalcAvVbus+0x2a>
      wtemp /= pHandle->LowPassFilterBW;
 800a400:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a404:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 800a406:	f10e 3eff 	add.w	lr, lr, #4294967295
 800a40a:	4575      	cmp	r5, lr
        pHandle->index++;
 800a40c:	bf34      	ite	cc
 800a40e:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 800a410:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 800a412:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 800a414:	80a1      	strh	r1, [r4, #4]
        pHandle->index++;
 800a416:	bf34      	ite	cc
 800a418:	7665      	strbcc	r5, [r4, #25]
        pHandle->index = 0U;
 800a41a:	7663      	strbcs	r3, [r4, #25]
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800a41c:	4620      	mov	r0, r4
 800a41e:	f7ff ffad 	bl	800a37c <RVBS_CheckFaultState>
 800a422:	8120      	strh	r0, [r4, #8]
}
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	bf00      	nop

0800a428 <REMNG_Init>:
  }
  else
  {
#endif
    pHandle->Ext = 0;
    pHandle->TargetFinal = 0;
 800a428:	2300      	movs	r3, #0
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800a42a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800a42c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 800a430:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 800a434:	6142      	str	r2, [r0, #20]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
}
 800a436:	4770      	bx	lr

0800a438 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 800a438:	e9d0 2102 	ldrd	r2, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800a43c:	2901      	cmp	r1, #1
{
 800a43e:	b410      	push	{r4}
 800a440:	4603      	mov	r3, r0
      pHandle->RampRemainingStep --;
    }
    else if (1U == pHandle->RampRemainingStep)
    {
      /* Set the backup value of TargetFinal */
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a442:	6944      	ldr	r4, [r0, #20]
    if (pHandle->RampRemainingStep > 1U)
 800a444:	d909      	bls.n	800a45a <REMNG_Calc+0x22>
      current_ref += pHandle->IncDecAmount;
 800a446:	6900      	ldr	r0, [r0, #16]
      pHandle->RampRemainingStep --;
 800a448:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 800a44a:	4402      	add	r2, r0
      pHandle->RampRemainingStep --;
 800a44c:	60d9      	str	r1, [r3, #12]
    {
      /* Do nothing */
    }

    pHandle->Ext = current_ref;
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a44e:	fb92 f0f4 	sdiv	r0, r2, r4
    pHandle->Ext = current_ref;
 800a452:	609a      	str	r2, [r3, #8]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 800a454:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a458:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800a45a:	d005      	beq.n	800a468 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a45c:	fb92 f0f4 	sdiv	r0, r2, r4
}
 800a460:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->Ext = current_ref;
 800a464:	609a      	str	r2, [r3, #8]
}
 800a466:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a468:	6840      	ldr	r0, [r0, #4]
 800a46a:	fb04 f200 	mul.w	r2, r4, r0
      pHandle->RampRemainingStep = 0U;
 800a46e:	2100      	movs	r1, #0
}
 800a470:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->RampRemainingStep = 0U;
 800a474:	60d9      	str	r1, [r3, #12]
    pHandle->Ext = current_ref;
 800a476:	609a      	str	r2, [r3, #8]
}
 800a478:	4770      	bx	lr
 800a47a:	bf00      	nop

0800a47c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800a47c:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_PTR_CHECK_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800a47e:	fab0 f080 	clz	r0, r0
 800a482:	0940      	lsrs	r0, r0, #5
 800a484:	4770      	bx	lr
 800a486:	bf00      	nop

0800a488 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 800a488:	2800      	cmp	r0, #0
 800a48a:	bfb8      	it	lt
 800a48c:	4240      	neglt	r0, r0
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
    if (TargetAbs >= limit)
 800a48e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a492:	d213      	bcs.n	800a4bc <getScalingFactor+0x34>
 800a494:	2302      	movs	r3, #2
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800a496:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800a49a:	e001      	b.n	800a4a0 <getScalingFactor+0x18>
  for (i = 1U; i < 32U; i++)
 800a49c:	2b20      	cmp	r3, #32
 800a49e:	d00a      	beq.n	800a4b6 <getScalingFactor+0x2e>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800a4a0:	fa2c f203 	lsr.w	r2, ip, r3
    if (TargetAbs >= limit)
 800a4a4:	4290      	cmp	r0, r2
 800a4a6:	4619      	mov	r1, r3
 800a4a8:	f103 0301 	add.w	r3, r3, #1
 800a4ac:	d3f6      	bcc.n	800a49c <getScalingFactor+0x14>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 800a4ae:	3901      	subs	r1, #1
 800a4b0:	2001      	movs	r0, #1
 800a4b2:	4088      	lsls	r0, r1
 800a4b4:	4770      	bx	lr
 800a4b6:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a4ba:	4770      	bx	lr
    if (TargetAbs >= limit)
 800a4bc:	2001      	movs	r0, #1
}
 800a4be:	4770      	bx	lr

0800a4c0 <REMNG_ExecRamp>:
{
 800a4c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c4:	4604      	mov	r4, r0
 800a4c6:	460e      	mov	r6, r1
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a4c8:	6880      	ldr	r0, [r0, #8]
 800a4ca:	6963      	ldr	r3, [r4, #20]
    if (0U == Durationms)
 800a4cc:	4615      	mov	r5, r2
 800a4ce:	b962      	cbnz	r2, 800a4ea <REMNG_ExecRamp+0x2a>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800a4d0:	4608      	mov	r0, r1
 800a4d2:	f7ff ffd9 	bl	800a488 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a4d6:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 800a4da:	6160      	str	r0, [r4, #20]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a4dc:	4628      	mov	r0, r5
      pHandle->IncDecAmount = 0;
 800a4de:	e9c4 5003 	strd	r5, r0, [r4, #12]
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800a4e2:	60a6      	str	r6, [r4, #8]
}
 800a4e4:	2001      	movs	r0, #1
 800a4e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800a4ea:	fb90 f8f3 	sdiv	r8, r0, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 800a4ee:	eba1 0708 	sub.w	r7, r1, r8
 800a4f2:	4638      	mov	r0, r7
 800a4f4:	f7ff ffc8 	bl	800a488 <getScalingFactor>
 800a4f8:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	f7ff ffc4 	bl	800a488 <getScalingFactor>
 800a500:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 800a502:	4630      	mov	r0, r6
 800a504:	f7ff ffc0 	bl	800a488 <getScalingFactor>
      if (wScalingFactor <  wScalingFactor2)
 800a508:	45ca      	cmp	sl, r9
 800a50a:	d318      	bcc.n	800a53e <REMNG_ExecRamp+0x7e>
        if (wScalingFactor2 < wScalingFactor3)
 800a50c:	4548      	cmp	r0, r9
 800a50e:	bf28      	it	cs
 800a510:	4648      	movcs	r0, r9
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800a512:	fb08 f300 	mul.w	r3, r8, r0
 800a516:	60a3      	str	r3, [r4, #8]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800a518:	6823      	ldr	r3, [r4, #0]
      aux /= 1000U;
 800a51a:	4a0b      	ldr	r2, [pc, #44]	@ (800a548 <REMNG_ExecRamp+0x88>)
      pHandle->ScalingFactor = wScalingFactorMin;
 800a51c:	6160      	str	r0, [r4, #20]
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 800a51e:	fb05 f303 	mul.w	r3, r5, r3
      aux /= 1000U;
 800a522:	fba2 2303 	umull	r2, r3, r2, r3
 800a526:	099b      	lsrs	r3, r3, #6
      pHandle->RampRemainingStep++;
 800a528:	1c5d      	adds	r5, r3, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 800a52a:	fb07 f000 	mul.w	r0, r7, r0
      pHandle->TargetFinal = TargetFinal;
 800a52e:	6066      	str	r6, [r4, #4]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800a530:	fb90 f0f5 	sdiv	r0, r0, r5
      pHandle->IncDecAmount = 0;
 800a534:	e9c4 5003 	strd	r5, r0, [r4, #12]
}
 800a538:	2001      	movs	r0, #1
 800a53a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        if (wScalingFactor < wScalingFactor3)
 800a53e:	4550      	cmp	r0, sl
 800a540:	bf28      	it	cs
 800a542:	4650      	movcs	r0, sl
 800a544:	e7e5      	b.n	800a512 <REMNG_ExecRamp+0x52>
 800a546:	bf00      	nop
 800a548:	10624dd3 	.word	0x10624dd3

0800a54c <RUC_Init>:
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle,
                     SpeednTorqCtrl_Handle_t *pSTC,
                     VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL,
                     PWMC_Handle_t *pPWM)
{
 800a54c:	b500      	push	{lr}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800a54e:	6681      	str	r1, [r0, #104]	@ 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits */
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a550:	6941      	ldr	r1, [r0, #20]
    pHandle->pSNSL = pSNSL;
 800a552:	e9c0 231b 	strd	r2, r3, [r0, #108]	@ 0x6c
    pHandle->OTFSCLowside = false;
 800a556:	f04f 0c00 	mov.w	ip, #0
    pHandle->pPWM = pPWM;
 800a55a:	9b01      	ldr	r3, [sp, #4]
    pHandle->OTFSCLowside = false;
 800a55c:	f8a0 c054 	strh.w	ip, [r0, #84]	@ 0x54
    pHandle->pPWM = pPWM;
 800a560:	6743      	str	r3, [r0, #116]	@ 0x74
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a562:	b1f9      	cbz	r1, 800a5a4 <RUC_Init+0x58>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a564:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a566:	b313      	cbz	r3, 800a5ae <RUC_Init+0x62>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a568:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a56a:	b31b      	cbz	r3, 800a5b4 <RUC_Init+0x68>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a56c:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800a56e:	b323      	cbz	r3, 800a5ba <RUC_Init+0x6e>
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	f04f 0c05 	mov.w	ip, #5
 800a576:	2204      	movs	r2, #4
 800a578:	b1b3      	cbz	r3, 800a5a8 <RUC_Init+0x5c>
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a57a:	8803      	ldrh	r3, [r0, #0]
 800a57c:	4910      	ldr	r1, [pc, #64]	@ (800a5c0 <RUC_Init+0x74>)
 800a57e:	f04f 0e64 	mov.w	lr, #100	@ 0x64
 800a582:	fb0e f303 	mul.w	r3, lr, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a586:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a58a:	fba1 1303 	umull	r1, r3, r1, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a58e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800a592:	2100      	movs	r1, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a594:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a596:	6151      	str	r1, [r2, #20]
      pHandle->bPhaseNbr = bPhase;
 800a598:	f880 c048 	strb.w	ip, [r0, #72]	@ 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800a59c:	f880 3056 	strb.w	r3, [r0, #86]	@ 0x56
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a5a0:	f85d fb04 	ldr.w	pc, [sp], #4
      bPhase++;
 800a5a4:	f04f 0c01 	mov.w	ip, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800a5a8:	f10c 32ff 	add.w	r2, ip, #4294967295
 800a5ac:	e7e5      	b.n	800a57a <RUC_Init+0x2e>
      bPhase++;
 800a5ae:	f04f 0c02 	mov.w	ip, #2
 800a5b2:	e7f9      	b.n	800a5a8 <RUC_Init+0x5c>
 800a5b4:	f04f 0c03 	mov.w	ip, #3
 800a5b8:	e7f6      	b.n	800a5a8 <RUC_Init+0x5c>
 800a5ba:	f04f 0c04 	mov.w	ip, #4
 800a5be:	e7f3      	b.n	800a5a8 <RUC_Init+0x5c>
 800a5c0:	10624dd3 	.word	0x10624dd3

0800a5c4 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	4604      	mov	r4, r0

    pHandle->hDirection = hMotorDirection;
    pHandle->EnteredZone1 = false;

    /* Initializes the rev up stages counter */
    pHandle->bStageCnt = 0U;
 800a5ca:	2600      	movs	r6, #0
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 800a5cc:	f8d0 806c 	ldr.w	r8, [r0, #108]	@ 0x6c
    pHandle->bStageCnt = 0U;
 800a5d0:	f880 6058 	strb.w	r6, [r0, #88]	@ 0x58
    pHandle->bOTFRelCounter = 0U;
 800a5d4:	f880 6053 	strb.w	r6, [r0, #83]	@ 0x53
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 800a5d8:	6ea7      	ldr	r7, [r4, #104]	@ 0x68
    pHandle->hDirection = hMotorDirection;
 800a5da:	80c1      	strh	r1, [r0, #6]
    pHandle->OTFSCLowside = false;
 800a5dc:	f8a0 6054 	strh.w	r6, [r0, #84]	@ 0x54

    /* Calls the clear method of VSS */
    VSS_Clear(pVSS);
 800a5e0:	4640      	mov	r0, r8
{
 800a5e2:	460d      	mov	r5, r1
    VSS_Clear(pVSS);
 800a5e4:	f000 fc3e 	bl	800ae64 <VSS_Clear>

    /* Sets the STC in torque mode */
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 800a5e8:	2104      	movs	r1, #4
 800a5ea:	4638      	mov	r0, r7
 800a5ec:	f000 f8e0 	bl	800a7b0 <STC_SetControlMode>

    /* Sets the mechanical starting angle of VSS */
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 800a5f0:	8863      	ldrh	r3, [r4, #2]
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a5f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a5f6:	b2ad      	uxth	r5, r5
 800a5f8:	fb13 f305 	smulbb	r3, r3, r5
 800a5fc:	b21b      	sxth	r3, r3
    pHandle->hElAngleAccu = hMecAngle;
 800a5fe:	f8a8 3030 	strh.w	r3, [r8, #48]	@ 0x30
    pHandle->_Super.hElAngle = hMecAngle;
 800a602:	f8a8 3004 	strh.w	r3, [r8, #4]

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 800a606:	4631      	mov	r1, r6
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800a608:	fb93 f3f2 	sdiv	r3, r3, r2
 800a60c:	4638      	mov	r0, r7
 800a60e:	f8a8 3006 	strh.w	r3, [r8, #6]
 800a612:	4632      	mov	r2, r6
 800a614:	f000 f8d0 	bl	800a7b8 <STC_ExecRamp>

    /* Gives the first command to STC and VSS */
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 800a618:	8a21      	ldrh	r1, [r4, #16]
 800a61a:	89a2      	ldrh	r2, [r4, #12]
 800a61c:	fb11 f105 	smulbb	r1, r1, r5
 800a620:	b209      	sxth	r1, r1
 800a622:	4638      	mov	r0, r7
 800a624:	f000 f8c8 	bl	800a7b8 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 800a628:	89e1      	ldrh	r1, [r4, #14]
 800a62a:	89a2      	ldrh	r2, [r4, #12]
 800a62c:	fb11 f105 	smulbb	r1, r1, r5
 800a630:	b209      	sxth	r1, r1
 800a632:	4640      	mov	r0, r8
 800a634:	f000 fccc 	bl	800afd0 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks */
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 800a638:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800a63a:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 800a63c:	4a06      	ldr	r2, [pc, #24]	@ (800a658 <RUC_Clear+0x94>)

    /* Set the next phases parameter pointer */
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /* Timeout counter for PLL reset during OTF */
    pHandle->bResetPLLCnt = 0U;
 800a63e:	f884 6057 	strb.w	r6, [r4, #87]	@ 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800a642:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800a646:	fba2 2303 	umull	r2, r3, r2, r3
 800a64a:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800a64c:	6962      	ldr	r2, [r4, #20]
 800a64e:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 800a650:	3301      	adds	r3, #1
 800a652:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
}
 800a654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a658:	10624dd3 	.word	0x10624dd3

0800a65c <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 800a65c:	8883      	ldrh	r3, [r0, #4]
{
 800a65e:	b510      	push	{r4, lr}
 800a660:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800a662:	bb4b      	cbnz	r3, 800a6b8 <RUC_Exec+0x5c>
      /* Nothing to do */
    }

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800a664:	68a0      	ldr	r0, [r4, #8]
 800a666:	b330      	cbz	r0, 800a6b6 <RUC_Exec+0x5a>
      {
        /* If it becomes zero the current phase has been completed */
        /* Gives the next command to STC and VSS */
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 800a668:	8881      	ldrh	r1, [r0, #4]
 800a66a:	88e3      	ldrh	r3, [r4, #6]
 800a66c:	8802      	ldrh	r2, [r0, #0]
 800a66e:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
 800a670:	fb11 f103 	smulbb	r1, r1, r3
 800a674:	b209      	sxth	r1, r1
 800a676:	f000 f89f 	bl	800a7b8 <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800a67a:	68a3      	ldr	r3, [r4, #8]
 800a67c:	88e0      	ldrh	r0, [r4, #6]
 800a67e:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 800a680:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800a682:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800a686:	b209      	sxth	r1, r1
 800a688:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800a68a:	f000 fca1 	bl	800afd0 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks */
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800a68e:	68a2      	ldr	r2, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a690:	f8b4 c000 	ldrh.w	ip, [r4]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800a694:	8813      	ldrh	r3, [r2, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a696:	490c      	ldr	r1, [pc, #48]	@ (800a6c8 <RUC_Exec+0x6c>)
        pHandle->hPhaseRemainingTicks++;

        /* Set the next phases parameter pointer */
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800a698:	6890      	ldr	r0, [r2, #8]

        /* Increases the rev up stages counter */
        pHandle->bStageCnt++;
 800a69a:	f894 2058 	ldrb.w	r2, [r4, #88]	@ 0x58
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800a69e:	60a0      	str	r0, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800a6a0:	fb0c f303 	mul.w	r3, ip, r3
 800a6a4:	fba1 1303 	umull	r1, r3, r1, r3
 800a6a8:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 800a6aa:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 800a6ac:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 800a6ae:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 800a6b0:	f884 2058 	strb.w	r2, [r4, #88]	@ 0x58
  bool retVal = true;
 800a6b4:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800a6b6:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	b29b      	uxth	r3, r3
 800a6bc:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0d0      	beq.n	800a664 <RUC_Exec+0x8>
  bool retVal = true;
 800a6c2:	2001      	movs	r0, #1
}
 800a6c4:	bd10      	pop	{r4, pc}
 800a6c6:	bf00      	nop
 800a6c8:	10624dd3 	.word	0x10624dd3

0800a6cc <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800a6cc:	f890 2058 	ldrb.w	r2, [r0, #88]	@ 0x58
 800a6d0:	f890 0049 	ldrb.w	r0, [r0, #73]	@ 0x49
    }
#ifdef NULL_PTR_CHECK_REV_UP_CTL
  }
#endif
  return (retVal);
}
 800a6d4:	4282      	cmp	r2, r0
 800a6d6:	bf34      	ite	cc
 800a6d8:	2000      	movcc	r0, #0
 800a6da:	2001      	movcs	r0, #1
 800a6dc:	4770      	bx	lr
 800a6de:	bf00      	nop

0800a6e0 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 800a6e0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop

0800a6e8 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 800a6e8:	f9b1 c000 	ldrsh.w	ip, [r1]
{
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	b510      	push	{r4, lr}
    {
      hAux = -(*pMecSpeedUnit);
 800a6f0:	fa1f f18c 	uxth.w	r1, ip
    if (*pMecSpeedUnit < 0)
 800a6f4:	f1bc 0f00 	cmp.w	ip, #0
      hAux = -(*pMecSpeedUnit);
 800a6f8:	bfb8      	it	lt
 800a6fa:	4249      	neglt	r1, r1
    else
    {
      /* Nothing to do */
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a6fc:	f8b3 c016 	ldrh.w	ip, [r3, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 800a700:	78c0      	ldrb	r0, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 800a702:	781a      	ldrb	r2, [r3, #0]
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800a704:	8a9c      	ldrh	r4, [r3, #20]
      hAux = -(*pMecSpeedUnit);
 800a706:	bfb8      	it	lt
 800a708:	b289      	uxthlt	r1, r1
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800a70a:	458c      	cmp	ip, r1
 800a70c:	d818      	bhi.n	800a740 <SPD_IsMecSpeedReliable+0x58>
    {
      /* Nothing to do */
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 800a70e:	f9b3 e012 	ldrsh.w	lr, [r3, #18]
    {
      hAux = -(pHandle->hMecAccelUnitP);
 800a712:	fa1f fc8e 	uxth.w	ip, lr
    if (pHandle->hMecAccelUnitP < 0)
 800a716:	f1be 0f00 	cmp.w	lr, #0
      hAux = -(pHandle->hMecAccelUnitP);
 800a71a:	bfb8      	it	lt
 800a71c:	f1cc 0c00 	rsblt	ip, ip, #0
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a720:	f8b3 e018 	ldrh.w	lr, [r3, #24]
      hAux = -(pHandle->hMecAccelUnitP);
 800a724:	bfb8      	it	lt
 800a726:	fa1f fc8c 	uxthlt.w	ip, ip
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800a72a:	45e6      	cmp	lr, ip
 800a72c:	d308      	bcc.n	800a740 <SPD_IsMecSpeedReliable+0x58>
    else
    {
      /* Nothing to do */
    }

    if (true == SpeedError)
 800a72e:	428c      	cmp	r4, r1
 800a730:	d306      	bcc.n	800a740 <SPD_IsMecSpeedReliable+0x58>
        /* Nothing to do */
      }
    }
    else
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800a732:	4290      	cmp	r0, r2
 800a734:	d809      	bhi.n	800a74a <SPD_IsMecSpeedReliable+0x62>
      {
        /* Nothing to do */
      }
    }

    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800a736:	1a10      	subs	r0, r2, r0
    else
    {
      /* Nothing to do */
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a738:	701a      	strb	r2, [r3, #0]
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
 800a73a:	bf18      	it	ne
 800a73c:	2001      	movne	r0, #1
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 800a73e:	bd10      	pop	{r4, pc}
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800a740:	4290      	cmp	r0, r2
 800a742:	d9f8      	bls.n	800a736 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber++;
 800a744:	3201      	adds	r2, #1
 800a746:	b2d2      	uxtb	r2, r2
 800a748:	e7f5      	b.n	800a736 <SPD_IsMecSpeedReliable+0x4e>
        bSpeedErrorNumber = 0u;
 800a74a:	2200      	movs	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800a74c:	701a      	strb	r2, [r3, #0]
  bool SpeedSensorReliability = true;
 800a74e:	2001      	movs	r0, #1
}
 800a750:	bd10      	pop	{r4, pc}
 800a752:	bf00      	nop

0800a754 <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800a754:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800a758:	f9b0 2014 	ldrsh.w	r2, [r0, #20]
    wAux *= INT16_MAX;
 800a75c:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 800a760:	fb93 f0f2 	sdiv	r0, r3, r2
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_CHECK_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 800a764:	b200      	sxth	r0, r0
 800a766:	4770      	bx	lr

0800a768 <STC_Init>:
  * @retval none.
  *
  * - Called once right after object creation at initialization of the whole MC core.
  */
__weak void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Handle)
{
 800a768:	b410      	push	{r4}
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800a76a:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	@ 0x2c
    pHandle->PISpeed = pPI;
 800a76e:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800a770:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	@ 0x2e
    pHandle->Mode = pHandle->ModeDefault;
 800a774:	f890 402a 	ldrb.w	r4, [r0, #42]	@ 0x2a
 800a778:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 800a77a:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 800a77c:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 800a780:	0409      	lsls	r1, r1, #16
 800a782:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->SPD = SPD_Handle;
 800a786:	6142      	str	r2, [r0, #20]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a788:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->TargetFinal = 0;
 800a78c:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
 800a78e:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 800a790:	6183      	str	r3, [r0, #24]
}
 800a792:	4770      	bx	lr

0800a794 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 800a794:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a796:	4770      	bx	lr

0800a798 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a798:	7803      	ldrb	r3, [r0, #0]
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d000      	beq.n	800a7a0 <STC_Clear+0x8>
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a79e:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 800a7a0:	6900      	ldr	r0, [r0, #16]
 800a7a2:	2100      	movs	r1, #0
 800a7a4:	f7fe bdea 	b.w	800937c <PID_SetIntegralTerm>

0800a7a8 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 800a7a8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800a7ac:	4770      	bx	lr
 800a7ae:	bf00      	nop

0800a7b0 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800a7b0:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800a7b2:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp */
 800a7b4:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a7b6:	4770      	bx	lr

0800a7b8 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800a7b8:	b410      	push	{r4}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a7ba:	7803      	ldrb	r3, [r0, #0]
 800a7bc:	2b04      	cmp	r3, #4
 800a7be:	d019      	beq.n	800a7f4 <STC_ExecRamp+0x3c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800a7c0:	f8b0 c01e 	ldrh.w	ip, [r0, #30]
 800a7c4:	458c      	cmp	ip, r1
 800a7c6:	da03      	bge.n	800a7d0 <STC_ExecRamp+0x18>
 800a7c8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800a7ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ce:	4770      	bx	lr
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800a7d0:	f9b0 4024 	ldrsh.w	r4, [r0, #36]	@ 0x24
 800a7d4:	428c      	cmp	r4, r1
 800a7d6:	dcf7      	bgt.n	800a7c8 <STC_ExecRamp+0x10>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800a7d8:	8c04      	ldrh	r4, [r0, #32]
 800a7da:	428c      	cmp	r4, r1
 800a7dc:	dd03      	ble.n	800a7e6 <STC_ExecRamp+0x2e>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800a7de:	f9b0 4022 	ldrsh.w	r4, [r0, #34]	@ 0x22
 800a7e2:	428c      	cmp	r4, r1
 800a7e4:	dbf0      	blt.n	800a7c8 <STC_ExecRamp+0x10>
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800a7e6:	6844      	ldr	r4, [r0, #4]
      if (0U == hDurationms)
 800a7e8:	b9aa      	cbnz	r2, 800a816 <STC_ExecRamp+0x5e>
        if (MCM_SPEED_MODE == pHandle->Mode)
 800a7ea:	2b03      	cmp	r3, #3
 800a7ec:	d10a      	bne.n	800a804 <STC_ExecRamp+0x4c>
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800a7ee:	0409      	lsls	r1, r1, #16
 800a7f0:	6041      	str	r1, [r0, #4]
 800a7f2:	e009      	b.n	800a808 <STC_ExecRamp+0x50>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800a7f4:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 800a7f6:	428b      	cmp	r3, r1
 800a7f8:	dbe6      	blt.n	800a7c8 <STC_ExecRamp+0x10>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 800a7fa:	f9b0 3028 	ldrsh.w	r3, [r0, #40]	@ 0x28
 800a7fe:	428b      	cmp	r3, r1
 800a800:	dce2      	bgt.n	800a7c8 <STC_ExecRamp+0x10>
      if (0U == hDurationms)
 800a802:	b9e2      	cbnz	r2, 800a83e <STC_ExecRamp+0x86>
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800a804:	0409      	lsls	r1, r1, #16
 800a806:	6081      	str	r1, [r0, #8]
        pHandle->RampRemainingStep = 0U;
 800a808:	2300      	movs	r3, #0
 800a80a:	60c3      	str	r3, [r0, #12]
        pHandle->IncDecAmount = 0;
 800a80c:	6183      	str	r3, [r0, #24]
{
 800a80e:	2001      	movs	r0, #1
}
 800a810:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a814:	4770      	bx	lr
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800a816:	ea4f 4c24 	mov.w	ip, r4, asr #16
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800a81a:	8b83      	ldrh	r3, [r0, #28]
        wAux /= 1000U;
 800a81c:	4c09      	ldr	r4, [pc, #36]	@ (800a844 <STC_ExecRamp+0x8c>)
        pHandle->TargetFinal = hTargetFinal;
 800a81e:	8041      	strh	r1, [r0, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800a820:	fb02 f303 	mul.w	r3, r2, r3
        wAux /= 1000U;
 800a824:	fba4 4303 	umull	r4, r3, r4, r3
 800a828:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800a82a:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800a82c:	eba1 0c0c 	sub.w	ip, r1, ip
 800a830:	ea4f 420c 	mov.w	r2, ip, lsl #16
        pHandle->RampRemainingStep++;
 800a834:	60c3      	str	r3, [r0, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 800a836:	fb92 f2f3 	sdiv	r2, r2, r3
        pHandle->IncDecAmount = wAux1;
 800a83a:	6182      	str	r2, [r0, #24]
 800a83c:	e7e7      	b.n	800a80e <STC_ExecRamp+0x56>
  return ((int16_t)(pHandle->TorqueRef >> 16));
 800a83e:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 800a842:	e7ea      	b.n	800a81a <STC_ExecRamp+0x62>
 800a844:	10624dd3 	.word	0x10624dd3

0800a848 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 800a848:	b538      	push	{r3, r4, r5, lr}
    int32_t wCurrentReference;
    int16_t hMeasuredSpeed;
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a84a:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed */
    if (pHandle->RampRemainingStep > 1U)
 800a84c:	68c3      	ldr	r3, [r0, #12]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a84e:	2a04      	cmp	r2, #4
{
 800a850:	4604      	mov	r4, r0
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800a852:	d012      	beq.n	800a87a <STC_CalcTorqueReference+0x32>
    if (pHandle->RampRemainingStep > 1U)
 800a854:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->SpeedRefUnitExt;
 800a856:	6845      	ldr	r5, [r0, #4]
    if (pHandle->RampRemainingStep > 1U)
 800a858:	d908      	bls.n	800a86c <STC_CalcTorqueReference+0x24>
    {
      /* Increment/decrement the reference value */
      wCurrentReference += pHandle->IncDecAmount;
 800a85a:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 800a85c:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800a85e:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 800a860:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 800a862:	2a03      	cmp	r2, #3
 800a864:	d011      	beq.n	800a88a <STC_CalcTorqueReference+0x42>
    else
    {
      pHandle->TorqueRef = wCurrentReference;
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 800a866:	1428      	asrs	r0, r5, #16
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800a868:	60a5      	str	r5, [r4, #8]
    }
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 800a86a:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800a86c:	d1f9      	bne.n	800a862 <STC_CalcTorqueReference+0x1a>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a86e:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800a872:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a874:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800a876:	60c3      	str	r3, [r0, #12]
 800a878:	e7f3      	b.n	800a862 <STC_CalcTorqueReference+0x1a>
    if (pHandle->RampRemainingStep > 1U)
 800a87a:	2b01      	cmp	r3, #1
      wCurrentReference = pHandle->TorqueRef;
 800a87c:	6885      	ldr	r5, [r0, #8]
    if (pHandle->RampRemainingStep > 1U)
 800a87e:	d911      	bls.n	800a8a4 <STC_CalcTorqueReference+0x5c>
      wCurrentReference += pHandle->IncDecAmount;
 800a880:	6982      	ldr	r2, [r0, #24]
      pHandle->RampRemainingStep--;
 800a882:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 800a884:	4415      	add	r5, r2
      pHandle->RampRemainingStep--;
 800a886:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a888:	e7ed      	b.n	800a866 <STC_CalcTorqueReference+0x1e>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 800a88a:	6960      	ldr	r0, [r4, #20]
 800a88c:	f7ff ff28 	bl	800a6e0 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 800a890:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 800a894:	b209      	sxth	r1, r1
 800a896:	6920      	ldr	r0, [r4, #16]
 800a898:	f7fe fda4 	bl	80093e4 <PI_Controller>
      pHandle->SpeedRefUnitExt = wCurrentReference;
 800a89c:	6065      	str	r5, [r4, #4]
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 800a89e:	0405      	lsls	r5, r0, #16
 800a8a0:	60a5      	str	r5, [r4, #8]
}
 800a8a2:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 800a8a4:	d1df      	bne.n	800a866 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a8a6:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 800a8aa:	2300      	movs	r3, #0
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 800a8ac:	042d      	lsls	r5, r5, #16
      pHandle->RampRemainingStep = 0U;
 800a8ae:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 800a8b0:	e7d9      	b.n	800a866 <STC_CalcTorqueReference+0x1e>
 800a8b2:	bf00      	nop

0800a8b4 <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 800a8b4:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	@ 0x2c
 800a8b8:	4770      	bx	lr
 800a8ba:	bf00      	nop

0800a8bc <STC_GetDefaultIqdref>:
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
}
 800a8bc:	f8d0 002e 	ldr.w	r0, [r0, #46]	@ 0x2e
{
 800a8c0:	b082      	sub	sp, #8
}
 800a8c2:	b002      	add	sp, #8
 800a8c4:	4770      	bx	lr
 800a8c6:	bf00      	nop

0800a8c8 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 800a8c8:	b510      	push	{r4, lr}
 800a8ca:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800a8cc:	6940      	ldr	r0, [r0, #20]
 800a8ce:	f7ff ff07 	bl	800a6e0 <SPD_GetAvrgMecSpeedUnit>
 800a8d2:	0400      	lsls	r0, r0, #16
 800a8d4:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
  }
#endif
}
 800a8d6:	bd10      	pop	{r4, pc}

0800a8d8 <STO_PLL_CalcElAngle>:
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
//cstat !MISRAC2012-Rule-8.13
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 800a8d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800a8dc:	4604      	mov	r4, r0
{
 800a8de:	b089      	sub	sp, #36	@ 0x24
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800a8e0:	2800      	cmp	r0, #0
 800a8e2:	f000 80cf 	beq.w	800aa84 <STO_PLL_CalcElAngle+0x1ac>
 800a8e6:	2900      	cmp	r1, #0
 800a8e8:	f000 80cf 	beq.w	800aa8a <STO_PLL_CalcElAngle+0x1b2>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800a8ec:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	@ 0x2e
 800a8f0:	6e87      	ldr	r7, [r0, #104]	@ 0x68
 800a8f2:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800a8f6:	429f      	cmp	r7, r3
 800a8f8:	f340 80d1 	ble.w	800aa9e <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800a8fc:	6683      	str	r3, [r0, #104]	@ 0x68
 800a8fe:	461f      	mov	r7, r3
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800a900:	f8b4 511e 	ldrh.w	r5, [r4, #286]	@ 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800a904:	6ee6      	ldr	r6, [r4, #108]	@ 0x6c
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800a906:	fa47 f205 	asr.w	r2, r7, r5
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800a90a:	42b3      	cmp	r3, r6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800a90c:	9201      	str	r2, [sp, #4]
 800a90e:	fa0f fe82 	sxth.w	lr, r2
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800a912:	f2c0 80c1 	blt.w	800aa98 <STO_PLL_CalcElAngle+0x1c0>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
    }
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800a916:	425b      	negs	r3, r3
 800a918:	429e      	cmp	r6, r3
 800a91a:	f340 80bd 	ble.w	800aa98 <STO_PLL_CalcElAngle+0x1c0>
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a91e:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	@ 0x2c
 800a922:	f8d4 9060 	ldr.w	r9, [r4, #96]	@ 0x60
 800a926:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800a92a:	fa46 f505 	asr.w	r5, r6, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a92e:	4599      	cmp	r9, r3
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800a930:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a934:	f340 80b9 	ble.w	800aaaa <STO_PLL_CalcElAngle+0x1d2>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800a938:	6623      	str	r3, [r4, #96]	@ 0x60
 800a93a:	4699      	mov	r9, r3
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800a93c:	f8d4 8064 	ldr.w	r8, [r4, #100]	@ 0x64
 800a940:	4543      	cmp	r3, r8
 800a942:	f2c0 80a6 	blt.w	800aa92 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
    }
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800a946:	425b      	negs	r3, r3
 800a948:	4598      	cmp	r8, r3
 800a94a:	f340 80a2 	ble.w	800aa92 <STO_PLL_CalcElAngle+0x1ba>
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
#else
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a94e:	88c8      	ldrh	r0, [r1, #6]

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800a950:	f8b1 a008 	ldrh.w	sl, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a954:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a956:	f8ad 0014 	strh.w	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800a95a:	f9b1 0002 	ldrsh.w	r0, [r1, #2]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a95e:	f8ad 3010 	strh.w	r3, [sp, #16]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800a962:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800a966:	f8b4 211c 	ldrh.w	r2, [r4, #284]	@ 0x11c
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 800a96a:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a96e:	9904      	ldr	r1, [sp, #16]
    wAux = wAux * pHandle->hC6;
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /* Calls the PLL blockset */
    pHandle->hBemf_alfa_est = hAux_Alfa;
 800a970:	f8a4 e070 	strh.w	lr, [r4, #112]	@ 0x70
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 800a974:	fb0a f000 	mul.w	r0, sl, r0
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800a978:	fb0a f303 	mul.w	r3, sl, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a97c:	1400      	asrs	r0, r0, #16
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a97e:	141b      	asrs	r3, r3, #16
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a980:	9003      	str	r0, [sp, #12]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a982:	9805      	ldr	r0, [sp, #20]
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a984:	9302      	str	r3, [sp, #8]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800a986:	fa49 f302 	asr.w	r3, r9, r2
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800a98a:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a98e:	eba2 0a00 	sub.w	sl, r2, r0
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800a992:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 800a996:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a99a:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 800a99c:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	@ 0x22
    wIalfa_est_Next += wAux;
 800a9a0:	9802      	ldr	r0, [sp, #8]
    pHandle->hBemf_beta_est = hAux_Beta;
 800a9a2:	f8a4 c072 	strh.w	ip, [r4, #114]	@ 0x72
    wAux = ((int32_t)pHandle->hC1) * hAux;
 800a9a6:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 800a9aa:	eba9 0303 	sub.w	r3, r9, r3
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800a9ae:	b209      	sxth	r1, r1
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 800a9b0:	f9b4 9028 	ldrsh.w	r9, [r4, #40]	@ 0x28
    wIalfa_est_Next += wAux;
 800a9b4:	fb08 3301 	mla	r3, r8, r1, r3
    wIalfa_est_Next += wAux;
 800a9b8:	fb09 3300 	mla	r3, r9, r0, r3
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 800a9bc:	fa0f fa8a 	sxth.w	sl, sl
    wIbeta_est_Next += wAux;
 800a9c0:	9803      	ldr	r0, [sp, #12]
    wIbeta_est_Next += wAux;
 800a9c2:	fb08 280a 	mla	r8, r8, sl, r2
    wIbeta_est_Next += wAux;
 800a9c6:	fb09 8800 	mla	r8, r9, r0, r8
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 800a9ca:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	@ 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a9ce:	8e62      	ldrh	r2, [r4, #50]	@ 0x32
    wAux = wAux * pHandle->hC6;
 800a9d0:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	@ 0x2a
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800a9d4:	fb01 7100 	mla	r1, r1, r0, r7
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800a9d8:	fb00 600a 	mla	r0, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800a9dc:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	@ 0x24
    wIalfa_est_Next -= wAux;
 800a9e0:	fb06 371e 	mls	r7, r6, lr, r3
    wIbeta_est_Next -= wAux;
 800a9e4:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a9e8:	fa4e fe02 	asr.w	lr, lr, r2
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800a9ec:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800a9f0:	f9b4 200e 	ldrsh.w	r2, [r4, #14]
    wAux = wAux * pHandle->hC6;
 800a9f4:	fb0e f309 	mul.w	r3, lr, r9
    wBemf_beta_est_Next -= wAux;
 800a9f8:	fb03 0812 	mls	r8, r3, r2, r0

    if (0 == pHandle->hForcedDirection)
 800a9fc:	f994 3124 	ldrsb.w	r3, [r4, #292]	@ 0x124
    wAux = wAux * pHandle->hC6;
 800aa00:	fb0c fc09 	mul.w	ip, ip, r9
    wBemf_alfa_est_Next += wAux;
 800aa04:	fb0c 1902 	mla	r9, ip, r2, r1
    if (0 == pHandle->hForcedDirection)
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d154      	bne.n	800aab6 <STO_PLL_CalcElAngle+0x1de>
    {
      /* We are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800aa0c:	2a00      	cmp	r2, #0
 800aa0e:	f64f 7aff 	movw	sl, #65535	@ 0xffff
 800aa12:	bfa8      	it	ge
 800aa14:	f04f 0a01 	movge.w	sl, #1
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;
  Trig_Components Local_Components;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800aa18:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800aa1c:	f7f7 fac8 	bl	8001fb0 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800aa20:	9b01      	ldr	r3, [sp, #4]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800aa22:	fb15 f50a 	smulbb	r5, r5, sl
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800aa26:	fb13 f30a 	smulbb	r3, r3, sl
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800aa2a:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin */
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800aa2c:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800aa30:	fb10 f023 	smultb	r0, r0, r3
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800aa34:	f340 31cf 	sbfx	r1, r0, #15, #16
 800aa38:	f345 35cf 	sbfx	r5, r5, #15, #16
 800aa3c:	1a69      	subs	r1, r5, r1
 800aa3e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800aa42:	f7fe fccf 	bl	80093e4 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 800aa46:	f894 30f4 	ldrb.w	r3, [r4, #244]	@ 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800aa4a:	f894 210e 	ldrb.w	r2, [r4, #270]	@ 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 800aa4e:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800aa50:	3301      	adds	r3, #1
 800aa52:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800aa54:	429a      	cmp	r2, r3
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800aa56:	bf12      	itee	ne
 800aa58:	461a      	movne	r2, r3
 800aa5a:	2200      	moveq	r2, #0
    bBuffer_index = 0U;
 800aa5c:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800aa5e:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800aa62:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	@ 0x74
 800aa66:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 800aa6a:	f8a2 0074 	strh.w	r0, [r2, #116]	@ 0x74
  pHandle->Speed_Buffer_Index = bBuffer_index;
 800aa6e:	f884 30f4 	strb.w	r3, [r4, #244]	@ 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 800aa72:	88a3      	ldrh	r3, [r4, #4]
    pHandle->Ialfa_est = wIalfa_est_Next;
 800aa74:	6627      	str	r7, [r4, #96]	@ 0x60
    pHandle->_Super.hElAngle += hRotor_Speed;
 800aa76:	4418      	add	r0, r3
    pHandle->Ibeta_est = wIbeta_est_Next;
 800aa78:	e9c4 6919 	strd	r6, r9, [r4, #100]	@ 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 800aa7c:	b200      	sxth	r0, r0
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 800aa7e:	f8c4 806c 	str.w	r8, [r4, #108]	@ 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 800aa82:	80a0      	strh	r0, [r4, #4]
}
 800aa84:	b009      	add	sp, #36	@ 0x24
 800aa86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 800aa8a:	4608      	mov	r0, r1
}
 800aa8c:	b009      	add	sp, #36	@ 0x24
 800aa8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800aa92:	6663      	str	r3, [r4, #100]	@ 0x64
 800aa94:	4698      	mov	r8, r3
 800aa96:	e75a      	b.n	800a94e <STO_PLL_CalcElAngle+0x76>
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 800aa98:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800aa9a:	461e      	mov	r6, r3
 800aa9c:	e73f      	b.n	800a91e <STO_PLL_CalcElAngle+0x46>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800aa9e:	425a      	negs	r2, r3
 800aaa0:	4297      	cmp	r7, r2
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800aaa2:	bfdc      	itt	le
 800aaa4:	6682      	strle	r2, [r0, #104]	@ 0x68
 800aaa6:	4617      	movle	r7, r2
 800aaa8:	e72a      	b.n	800a900 <STO_PLL_CalcElAngle+0x28>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 800aaaa:	425a      	negs	r2, r3
 800aaac:	4591      	cmp	r9, r2
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 800aaae:	bfdc      	itt	le
 800aab0:	6622      	strle	r2, [r4, #96]	@ 0x60
 800aab2:	4691      	movle	r9, r2
 800aab4:	e742      	b.n	800a93c <STO_PLL_CalcElAngle+0x64>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800aab6:	fa1f fa83 	uxth.w	sl, r3
 800aaba:	e7ad      	b.n	800aa18 <STO_PLL_CalcElAngle+0x140>

0800aabc <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 800aabc:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800aabe:	f890 510e 	ldrb.w	r5, [r0, #270]	@ 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800aac2:	2d00      	cmp	r5, #0
 800aac4:	f000 809b 	beq.w	800abfe <STO_PLL_CalcAvrgMecSpeedUnit+0x142>
 800aac8:	f100 0272 	add.w	r2, r0, #114	@ 0x72
 800aacc:	eb02 0445 	add.w	r4, r2, r5, lsl #1
 800aad0:	4613      	mov	r3, r2
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800aad2:	f04f 0c00 	mov.w	ip, #0
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800aad6:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800aada:	42a3      	cmp	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800aadc:	44f4      	add	ip, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800aade:	d1fa      	bne.n	800aad6 <STO_PLL_CalcAvrgMecSpeedUnit+0x1a>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800aae0:	fb9c fef5 	sdiv	lr, ip, r5
    int32_t wAvrQuadraticError = 0;
 800aae4:	f04f 0c00 	mov.w	ip, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800aae8:	f932 3f02 	ldrsh.w	r3, [r2, #2]!
 800aaec:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800aaf0:	42a2      	cmp	r2, r4
      wAvrQuadraticError += wError;
 800aaf2:	fb03 cc03 	mla	ip, r3, r3, ip
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800aaf6:	d1f7      	bne.n	800aae8 <STO_PLL_CalcAvrgMecSpeedUnit+0x2c>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800aaf8:	fb9c f2f5 	sdiv	r2, ip, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 800aafc:	fb0e f30e 	mul.w	r3, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800ab00:	17de      	asrs	r6, r3, #31
 800ab02:	f8b0 c110 	ldrh.w	ip, [r0, #272]	@ 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800ab06:	8b45      	ldrh	r5, [r0, #26]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800ab08:	fbac 4303 	umull	r4, r3, ip, r3
 800ab0c:	fb0c 3306 	mla	r3, ip, r6, r3
    wAvrSquareSpeed = (int32_t)(lAvrSquareSpeed / (int64_t)128);
 800ab10:	09e4      	lsrs	r4, r4, #7
 800ab12:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800ab16:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800ab18:	f890 6104 	ldrb.w	r6, [r0, #260]	@ 0x104
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800ab1c:	fb0e f505 	mul.w	r5, lr, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800ab20:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800ab22:	fb05 f303 	mul.w	r3, r5, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800ab26:	bfd8      	it	le
 800ab28:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800ab2c:	69c5      	ldr	r5, [r0, #28]
 800ab2e:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800ab32:	bfc8      	it	gt
 800ab34:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800ab38:	7845      	ldrb	r5, [r0, #1]
 800ab3a:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800ab3e:	b21d      	sxth	r5, r3
 800ab40:	800d      	strh	r5, [r1, #0]
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * (int64_t)pHandle->VariancePercentage;
 800ab42:	2700      	movs	r7, #0
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800ab44:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800ab46:	f880 c0f5 	strb.w	ip, [r0, #245]	@ 0xf5
    if (false == pHandle->IsAlgorithmConverged)
 800ab4a:	f890 50f8 	ldrb.w	r5, [r0, #248]	@ 0xf8
    if (true == pHandle->EnableDualCheck) /* Do algorithm if it's enabled */
 800ab4e:	b996      	cbnz	r6, 800ab76 <STO_PLL_CalcAvrgMecSpeedUnit+0xba>
    if (false == pHandle->IsAlgorithmConverged)
 800ab50:	2d00      	cmp	r5, #0
 800ab52:	d049      	beq.n	800abe8 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800ab54:	4294      	cmp	r4, r2
 800ab56:	dc44      	bgt.n	800abe2 <STO_PLL_CalcAvrgMecSpeedUnit+0x126>
        pHandle->ReliabilityCounter++;
 800ab58:	f890 30f7 	ldrb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800ab5c:	78c2      	ldrb	r2, [r0, #3]
        pHandle->ReliabilityCounter++;
 800ab5e:	3301      	adds	r3, #1
 800ab60:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800ab62:	4293      	cmp	r3, r2
        pHandle->ReliabilityCounter++;
 800ab64:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->_Super.bMaximumSpeedErrorsNumber)
 800ab68:	d33e      	bcc.n	800abe8 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
          pHandle->ReliabilityCounter = 0U;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800ab70:	7002      	strb	r2, [r0, #0]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	bdf0      	pop	{r4, r5, r6, r7, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800ab76:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800ab78:	f8b0 611a 	ldrh.w	r6, [r0, #282]	@ 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 800ab7c:	bfb8      	it	lt
 800ab7e:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 800ab80:	429e      	cmp	r6, r3
 800ab82:	dd35      	ble.n	800abf0 <STO_PLL_CalcAvrgMecSpeedUnit+0x134>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800ab84:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	@ 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800ab88:	f9b0 7072 	ldrsh.w	r7, [r0, #114]	@ 0x72
        wObsBemfSq = wObsBemf * wObsBemf;
 800ab8c:	fb06 fc06 	mul.w	ip, r6, r6
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800ab90:	f890 6118 	ldrb.w	r6, [r0, #280]	@ 0x118
        wObsBemfSq += wObsBemf * wObsBemf;
 800ab94:	fb07 c707 	mla	r7, r7, r7, ip
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800ab98:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800ab9c:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800aba0:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800aba4:	fb03 f606 	mul.w	r6, r3, r6
 800aba8:	2e00      	cmp	r6, #0
 800abaa:	bfb8      	it	lt
 800abac:	363f      	addlt	r6, #63	@ 0x3f
 800abae:	11b6      	asrs	r6, r6, #6
        wEstBemfSq *= wEstBemf;
 800abb0:	fb06 f303 	mul.w	r3, r6, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	461e      	mov	r6, r3
 800abb8:	f890 c117 	ldrb.w	ip, [r0, #279]	@ 0x117
 800abbc:	bfb8      	it	lt
 800abbe:	f103 063f 	addlt.w	r6, r3, #63	@ 0x3f
 800abc2:	11b6      	asrs	r6, r6, #6
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800abc4:	e9c0 733f 	strd	r7, r3, [r0, #252]	@ 0xfc
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800abc8:	fb0c 3316 	mls	r3, ip, r6, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800abcc:	429f      	cmp	r7, r3
 800abce:	bfd4      	ite	le
 800abd0:	2600      	movle	r6, #0
 800abd2:	2601      	movgt	r6, #1
 800abd4:	f880 60f9 	strb.w	r6, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800abd8:	b135      	cbz	r5, 800abe8 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 800abda:	4294      	cmp	r4, r2
 800abdc:	ddbc      	ble.n	800ab58 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800abde:	429f      	cmp	r7, r3
 800abe0:	ddba      	ble.n	800ab58 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
        pHandle->ReliabilityCounter = 0U;
 800abe2:	2300      	movs	r3, #0
 800abe4:	f880 30f7 	strb.w	r3, [r0, #247]	@ 0xf7
}
 800abe8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800abec:	f7ff bd7c 	b.w	800a6e8 <SPD_IsMecSpeedReliable>
      pHandle->Est_Bemf_Level = wEstBemfSq;
 800abf0:	e9c0 773f 	strd	r7, r7, [r0, #252]	@ 0xfc
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 800abf4:	f880 70f9 	strb.w	r7, [r0, #249]	@ 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 800abf8:	2d00      	cmp	r5, #0
 800abfa:	d1ad      	bne.n	800ab58 <STO_PLL_CalcAvrgMecSpeedUnit+0x9c>
 800abfc:	e7f4      	b.n	800abe8 <STO_PLL_CalcAvrgMecSpeedUnit+0x12c>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800abfe:	462a      	mov	r2, r5
 800ac00:	462b      	mov	r3, r5
 800ac02:	462e      	mov	r6, r5
 800ac04:	46ae      	mov	lr, r5
 800ac06:	e77c      	b.n	800ab02 <STO_PLL_CalcAvrgMecSpeedUnit+0x46>

0800ac08 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800ac08:	f890 20f4 	ldrb.w	r2, [r0, #244]	@ 0xf4
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800ac0c:	f890 c10e 	ldrb.w	ip, [r0, #270]	@ 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800ac10:	f890 110f 	ldrb.w	r1, [r0, #271]	@ 0x10f
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ac14:	eb00 0342 	add.w	r3, r0, r2, lsl #1
{
 800ac18:	b410      	push	{r4}
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ac1a:	f9b3 3074 	ldrsh.w	r3, [r3, #116]	@ 0x74
 800ac1e:	f8d0 4108 	ldr.w	r4, [r0, #264]	@ 0x108
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 800ac22:	ebac 0101 	sub.w	r1, ip, r1
 800ac26:	b289      	uxth	r1, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ac28:	4423      	add	r3, r4
    if (0 == hBufferSizeDiff)
 800ac2a:	b959      	cbnz	r1, 800ac44 <STO_PLL_CalcAvrgElSpeedDpp+0x3c>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800ac2c:	f9b0 210c 	ldrsh.w	r2, [r0, #268]	@ 0x10c
 800ac30:	1a9b      	subs	r3, r3, r2
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800ac32:	f8b0 2120 	ldrh.w	r2, [r0, #288]	@ 0x120
    pHandle->DppBufferSum = wSum;
 800ac36:	f8c0 3108 	str.w	r3, [r0, #264]	@ 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800ac3a:	4113      	asrs	r3, r2
}
 800ac3c:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800ac40:	81c3      	strh	r3, [r0, #14]
}
 800ac42:	4770      	bx	lr
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800ac44:	440a      	add	r2, r1
 800ac46:	b291      	uxth	r1, r2
 800ac48:	b212      	sxth	r2, r2
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 800ac4a:	4594      	cmp	ip, r2
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800ac4c:	bfdc      	itt	le
 800ac4e:	eba1 010c 	suble.w	r1, r1, ip
 800ac52:	b20a      	sxthle	r2, r1
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 800ac54:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800ac58:	f9b2 2074 	ldrsh.w	r2, [r2, #116]	@ 0x74
 800ac5c:	1a9b      	subs	r3, r3, r2
 800ac5e:	e7e8      	b.n	800ac32 <STO_PLL_CalcAvrgElSpeedDpp+0x2a>

0800ac60 <STO_PLL_Clear>:
{
 800ac60:	b510      	push	{r4, lr}
  *
  */
static inline void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800ac62:	f890 210e 	ldrb.w	r2, [r0, #270]	@ 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800ac66:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 800ac68:	e9c0 1118 	strd	r1, r1, [r0, #96]	@ 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 800ac6c:	e9c0 111a 	strd	r1, r1, [r0, #104]	@ 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 800ac70:	e9c0 113f 	strd	r1, r1, [r0, #252]	@ 0xfc
{
 800ac74:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 800ac76:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 800ac78:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 800ac7a:	f8a0 10f6 	strh.w	r1, [r0, #246]	@ 0xf6
    pHandle->IsAlgorithmConverged = false;
 800ac7e:	f8a0 10f8 	strh.w	r1, [r0, #248]	@ 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 800ac82:	f8c0 1108 	str.w	r1, [r0, #264]	@ 0x108
    pHandle->ForceConvergency = false;
 800ac86:	f8a0 1122 	strh.w	r1, [r0, #290]	@ 0x122

  /* Init speed buffer */
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 800ac8a:	b11a      	cbz	r2, 800ac94 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 800ac8c:	0052      	lsls	r2, r2, #1
 800ac8e:	3074      	adds	r0, #116	@ 0x74
 800ac90:	f000 fa28 	bl	800b0e4 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 800ac94:	2100      	movs	r1, #0
 800ac96:	f884 10f4 	strb.w	r1, [r4, #244]	@ 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800ac9a:	f8a4 110c 	strh.w	r1, [r4, #268]	@ 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800ac9e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
}
 800aca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800aca6:	f7fe bb69 	b.w	800937c <PID_SetIntegralTerm>
 800acaa:	bf00      	nop

0800acac <STO_PLL_Init>:
{
 800acac:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800acae:	f890 1116 	ldrb.w	r1, [r0, #278]	@ 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800acb2:	4b19      	ldr	r3, [pc, #100]	@ (800ad18 <STO_PLL_Init+0x6c>)
 800acb4:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	@ 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800acb8:	f880 10f6 	strb.w	r1, [r0, #246]	@ 0xf6
    pHandle->EnableDualCheck = true;
 800acbc:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800acbe:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800acc0:	fb93 f3fe 	sdiv	r3, r3, lr
 800acc4:	b21b      	sxth	r3, r3
{
 800acc6:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 800acc8:	f880 2104 	strb.w	r2, [r0, #260]	@ 0x104
    pHandle->F3POW2 = 0U;
 800accc:	8641      	strh	r1, [r0, #50]	@ 0x32
    while (htempk != 0)
 800acce:	b30b      	cbz	r3, 800ad14 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 800acd0:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800acd2:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800acd6:	f102 0c01 	add.w	ip, r2, #1
 800acda:	105b      	asrs	r3, r3, #1
 800acdc:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800acde:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800ace2:	fa1f f28c 	uxth.w	r2, ip
 800ace6:	d1f4      	bne.n	800acd2 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 800ace8:	b20a      	sxth	r2, r1
 800acea:	8660      	strh	r0, [r4, #50]	@ 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800acec:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800acf0:	480a      	ldr	r0, [pc, #40]	@ (800ad1c <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800acf2:	8622      	strh	r2, [r4, #48]	@ 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800acf4:	17cb      	asrs	r3, r1, #31
 800acf6:	fb80 0101 	smull	r0, r1, r0, r1
 800acfa:	ebc3 2321 	rsb	r3, r3, r1, asr #8
 800acfe:	8563      	strh	r3, [r4, #42]	@ 0x2a
    STO_PLL_Clear(pHandle);
 800ad00:	4620      	mov	r0, r4
 800ad02:	f7ff ffad 	bl	800ac60 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800ad06:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ad0a:	f7fe fb23 	bl	8009354 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	8263      	strh	r3, [r4, #18]
}
 800ad12:	bd10      	pop	{r4, pc}
 800ad14:	4671      	mov	r1, lr
 800ad16:	e7eb      	b.n	800acf0 <STO_PLL_Init+0x44>
 800ad18:	000fea5e 	.word	0x000fea5e
 800ad1c:	06488dc5 	.word	0x06488dc5

0800ad20 <STO_PLL_IsObserverConverged>:
    int32_t wtemp;
    int16_t hEstimatedSpeedUnit;
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;

    if (true == pHandle->ForceConvergency2)
 800ad20:	f890 2123 	ldrb.w	r2, [r0, #291]	@ 0x123
{
 800ad24:	4603      	mov	r3, r0
    if (true == pHandle->ForceConvergency2)
 800ad26:	b112      	cbz	r2, 800ad2e <STO_PLL_IsObserverConverged+0xe>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800ad28:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
 800ad2c:	800a      	strh	r2, [r1, #0]
    else
    {
      /* Nothing to do */
    }

    if (true == pHandle->ForceConvergency)
 800ad2e:	f893 0122 	ldrb.w	r0, [r3, #290]	@ 0x122
 800ad32:	b128      	cbz	r0, 800ad40 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800ad34:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800ad36:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800ad38:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800ad3c:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 800ad3e:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800ad40:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800ad44:	f9b3 c00c 	ldrsh.w	ip, [r3, #12]
{
 800ad48:	b530      	push	{r4, r5, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800ad4a:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 800ad4e:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800ad52:	4614      	mov	r4, r2
      if (wtemp > 0)
 800ad54:	dd38      	ble.n	800adc8 <STO_PLL_IsObserverConverged+0xa8>
        if (hEstimatedSpeedUnit < 0)
 800ad56:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 800ad5a:	bfbc      	itt	lt
 800ad5c:	f1cc 0c00 	rsblt	ip, ip, #0
 800ad60:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800ad64:	2a00      	cmp	r2, #0
 800ad66:	db34      	blt.n	800add2 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 800ad68:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800ad6c:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800ad70:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800ad74:	b349      	cbz	r1, 800adca <STO_PLL_IsObserverConverged+0xaa>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 800ad76:	f8b3 5114 	ldrh.w	r5, [r3, #276]	@ 0x114
 800ad7a:	fa1f f18c 	uxth.w	r1, ip
 800ad7e:	428d      	cmp	r5, r1
 800ad80:	d223      	bcs.n	800adca <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800ad82:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 800ad86:	2a00      	cmp	r2, #0
 800ad88:	bfb8      	it	lt
 800ad8a:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 800ad8c:	f342 120f 	sbfx	r2, r2, #4, #16
 800ad90:	4594      	cmp	ip, r2
 800ad92:	db1a      	blt.n	800adca <STO_PLL_IsObserverConverged+0xaa>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800ad94:	fb04 fe0e 	mul.w	lr, r4, lr
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 800ad98:	f1be 0f00 	cmp.w	lr, #0
 800ad9c:	bfb8      	it	lt
 800ad9e:	f10e 0e0f 	addlt.w	lr, lr, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800ada2:	f34e 1e0f 	sbfx	lr, lr, #4, #16
 800ada6:	45f4      	cmp	ip, lr
 800ada8:	dc0f      	bgt.n	800adca <STO_PLL_IsObserverConverged+0xaa>
                pHandle->ConsistencyCounter++;
 800adaa:	f893 20f6 	ldrb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800adae:	f893 1116 	ldrb.w	r1, [r3, #278]	@ 0x116
                pHandle->ConsistencyCounter++;
 800adb2:	3201      	adds	r2, #1
 800adb4:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800adb6:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800adb8:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800adbc:	d804      	bhi.n	800adc8 <STO_PLL_IsObserverConverged+0xa8>
      pHandle->IsAlgorithmConverged = true;
 800adbe:	2001      	movs	r0, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800adc0:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800adc2:	f883 00f8 	strb.w	r0, [r3, #248]	@ 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800adc6:	701a      	strb	r2, [r3, #0]
}
 800adc8:	bd30      	pop	{r4, r5, pc}
                pHandle->ConsistencyCounter = 0U;
 800adca:	2200      	movs	r2, #0
 800adcc:	f883 20f6 	strb.w	r2, [r3, #246]	@ 0xf6
}
 800add0:	bd30      	pop	{r4, r5, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800add2:	4252      	negs	r2, r2
 800add4:	b212      	sxth	r2, r2
 800add6:	800a      	strh	r2, [r1, #0]
        if (true == pHandle->IsSpeedReliable)
 800add8:	f893 10f5 	ldrb.w	r1, [r3, #245]	@ 0xf5
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 800addc:	f893 e112 	ldrb.w	lr, [r3, #274]	@ 0x112
 800ade0:	4614      	mov	r4, r2
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 800ade2:	f893 2113 	ldrb.w	r2, [r3, #275]	@ 0x113
        if (true == pHandle->IsSpeedReliable)
 800ade6:	2900      	cmp	r1, #0
 800ade8:	d0ef      	beq.n	800adca <STO_PLL_IsObserverConverged+0xaa>
 800adea:	e7c4      	b.n	800ad76 <STO_PLL_IsObserverConverged+0x56>

0800adec <STO_PLL_GetEstimatedBemf>:
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
}
 800adec:	6f00      	ldr	r0, [r0, #112]	@ 0x70
{
 800adee:	b082      	sub	sp, #8
}
 800adf0:	b002      	add	sp, #8
 800adf2:	4770      	bx	lr

0800adf4 <STO_PLL_GetEstimatedCurrent>:
  * @brief  Exports from @p pHandle the stator current alpha-beta as estimated by state observer.
  * 
  * @retval alphabeta_t State observer estimated stator current Ialpha-beta.
  */
__weak alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle)
{
 800adf4:	4603      	mov	r3, r0
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 800adf6:	2000      	movs	r0, #0
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800adf8:	f8b3 111c 	ldrh.w	r1, [r3, #284]	@ 0x11c
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 800adfc:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 800ae00:	410a      	asrs	r2, r1
  return (iaux);
 800ae02:	410b      	asrs	r3, r1
 800ae04:	b292      	uxth	r2, r2
 800ae06:	f362 000f 	bfi	r0, r2, #0, #16
 800ae0a:	b29b      	uxth	r3, r3
{
 800ae0c:	b082      	sub	sp, #8
  return (iaux);
 800ae0e:	f363 401f 	bfi	r0, r3, #16, #16
}
 800ae12:	b002      	add	sp, #8
 800ae14:	4770      	bx	lr
 800ae16:	bf00      	nop

0800ae18 <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800ae18:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 800ae1c:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 800ae1e:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	@ 0x26
 800ae22:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800ae24:	4770      	bx	lr
 800ae26:	bf00      	nop

0800ae28 <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800ae28:	8441      	strh	r1, [r0, #34]	@ 0x22
    pHandle->hC4 = hhC2;
 800ae2a:	84c2      	strh	r2, [r0, #38]	@ 0x26
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800ae2c:	4770      	bx	lr
 800ae2e:	bf00      	nop

0800ae30 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 800ae30:	6800      	ldr	r0, [r0, #0]
 800ae32:	2100      	movs	r1, #0
 800ae34:	3034      	adds	r0, #52	@ 0x34
 800ae36:	f7fe baa1 	b.w	800937c <PID_SetIntegralTerm>
 800ae3a:	bf00      	nop

0800ae3c <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    const STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 800ae3c:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800ae3e:	f893 00f5 	ldrb.w	r0, [r3, #245]	@ 0xf5
 800ae42:	4770      	bx	lr

0800ae44 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 800ae44:	6803      	ldr	r3, [r0, #0]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 2122 	strb.w	r2, [r3, #290]	@ 0x122
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800ae4c:	4770      	bx	lr
 800ae4e:	bf00      	nop

0800ae50 <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800ae50:	6803      	ldr	r3, [r0, #0]
 800ae52:	2201      	movs	r2, #1
 800ae54:	f883 2123 	strb.w	r2, [r3, #291]	@ 0x123
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop

0800ae5c <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 800ae5c:	f880 1124 	strb.w	r1, [r0, #292]	@ 0x124
#ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop

0800ae64 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800ae64:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800ae66:	8ec2      	ldrh	r2, [r0, #54]	@ 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 800ae68:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 800ae6a:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800ae6e:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800ae70:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800ae72:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 800ae74:	8503      	strh	r3, [r0, #40]	@ 0x28
    pHandle->bTransitionStarted = false;
 800ae76:	8583      	strh	r3, [r0, #44]	@ 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 800ae78:	85c2      	strh	r2, [r0, #46]	@ 0x2e
    pHandle->hElAngleAccu = 0;
 800ae7a:	6303      	str	r3, [r0, #48]	@ 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800ae7c:	4770      	bx	lr
 800ae7e:	bf00      	nop

0800ae80 <VSS_Init>:
{
 800ae80:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800ae82:	f7ff ffef 	bl	800ae64 <VSS_Clear>
}
 800ae86:	bd08      	pop	{r3, pc}

0800ae88 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 800ae88:	f890 2033 	ldrb.w	r2, [r0, #51]	@ 0x33
{
 800ae8c:	4603      	mov	r3, r0
    if (true == pHandle->bCopyObserver)
 800ae8e:	b11a      	cbz	r2, 800ae98 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800ae90:	f9b1 0000 	ldrsh.w	r0, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800ae94:	8098      	strh	r0, [r3, #4]
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 800ae96:	4770      	bx	lr
{
 800ae98:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800ae9a:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800ae9e:	8e00      	ldrh	r0, [r0, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800aea0:	88dd      	ldrh	r5, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800aea2:	f893 402c 	ldrb.w	r4, [r3, #44]	@ 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800aea6:	785a      	ldrb	r2, [r3, #1]
 800aea8:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800aeac:	4460      	add	r0, ip
 800aeae:	fa1f fe80 	uxth.w	lr, r0
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800aeb2:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 800aeb4:	b200      	sxth	r0, r0
 800aeb6:	8618      	strh	r0, [r3, #48]	@ 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800aeb8:	80da      	strh	r2, [r3, #6]
      if (true == pHandle->bTransitionStarted)
 800aeba:	b1fc      	cbz	r4, 800aefc <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 800aebc:	f9b3 202e 	ldrsh.w	r2, [r3, #46]	@ 0x2e
 800aec0:	b1f2      	cbz	r2, 800af00 <VSS_CalcElAngle+0x78>
          pHandle->hTransitionRemainingSteps--;
 800aec2:	3a01      	subs	r2, #1
 800aec4:	b212      	sxth	r2, r2
 800aec6:	85da      	strh	r2, [r3, #46]	@ 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800aec8:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800aecc:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800aece:	db26      	blt.n	800af1e <VSS_CalcElAngle+0x96>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800aed0:	eba1 0e0e 	sub.w	lr, r1, lr
 800aed4:	fa0f fe8e 	sxth.w	lr, lr
 800aed8:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800aeda:	f9b3 4036 	ldrsh.w	r4, [r3, #54]	@ 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800aede:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800aee2:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 800aee6:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 800aeea:	fb12 f205 	smulbb	r2, r2, r5
 800aeee:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800aef0:	db0e      	blt.n	800af10 <VSS_CalcElAngle+0x88>
            pHandle->bTransitionLocked = true;
 800aef2:	2001      	movs	r0, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800aef4:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 800aef6:	f883 0032 	strb.w	r0, [r3, #50]	@ 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 800aefa:	b210      	sxth	r0, r2
    pHandle->_Super.hElAngle = hRetAngle;
 800aefc:	8098      	strh	r0, [r3, #4]
}
 800aefe:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800af00:	f9b1 0000 	ldrsh.w	r0, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 800af04:	701a      	strb	r2, [r3, #0]
          pHandle->bTransitionEnded = true;
 800af06:	2401      	movs	r4, #1
 800af08:	f883 402d 	strb.w	r4, [r3, #45]	@ 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800af0c:	8098      	strh	r0, [r3, #4]
}
 800af0e:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 800af10:	f893 4032 	ldrb.w	r4, [r3, #50]	@ 0x32
 800af14:	2c00      	cmp	r4, #0
 800af16:	d0f1      	beq.n	800aefc <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 800af18:	440a      	add	r2, r1
 800af1a:	b210      	sxth	r0, r2
 800af1c:	e7ee      	b.n	800aefc <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800af1e:	ebae 0e01 	sub.w	lr, lr, r1
 800af22:	fa0f fe8e 	sxth.w	lr, lr
 800af26:	f64f 75ff 	movw	r5, #65535	@ 0xffff
 800af2a:	e7d6      	b.n	800aeda <VSS_CalcElAngle+0x52>

0800af2c <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800af2c:	8d02      	ldrh	r2, [r0, #40]	@ 0x28
 800af2e:	2a01      	cmp	r2, #1
{
 800af30:	4603      	mov	r3, r0
    if (pHandle->hRemainingStep > 1u)
 800af32:	d922      	bls.n	800af7a <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 800af34:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800af36:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 800af38:	6a1c      	ldr	r4, [r3, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800af3a:	8b5a      	ldrh	r2, [r3, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800af3c:	4420      	add	r0, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800af3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800af42:	69dc      	ldr	r4, [r3, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800af44:	6258      	str	r0, [r3, #36]	@ 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800af46:	fb0c f202 	mul.w	r2, ip, r2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800af4a:	7858      	ldrb	r0, [r3, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800af4c:	f8a3 c00e 	strh.w	ip, [r3, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800af50:	eb02 0282 	add.w	r2, r2, r2, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800af54:	fb04 f000 	mul.w	r0, r4, r0
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800af58:	0052      	lsls	r2, r2, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 800af5a:	fb92 f2f0 	sdiv	r2, r2, r0
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800af5e:	b212      	sxth	r2, r2
 800af60:	800a      	strh	r2, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 800af62:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800af64:	819a      	strh	r2, [r3, #12]
      pHandle->hRemainingStep--;
 800af66:	1e42      	subs	r2, r0, #1
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 800af68:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->hRemainingStep--;
 800af6c:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800af6e:	b970      	cbnz	r0, 800af8e <VSS_CalcAvrgMecSpeedUnit+0x62>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800af70:	78da      	ldrb	r2, [r3, #3]
 800af72:	701a      	strb	r2, [r3, #0]
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 800af74:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af78:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 800af7a:	d00d      	beq.n	800af98 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800af7c:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
    if (false == pHandle->bTransitionEnded)
 800af80:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800af84:	800a      	strh	r2, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 800af86:	bb00      	cbnz	r0, 800afca <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800af88:	78da      	ldrb	r2, [r3, #3]
 800af8a:	701a      	strb	r2, [r3, #0]
}
 800af8c:	4770      	bx	lr
 800af8e:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800af92:	4618      	mov	r0, r3
 800af94:	f7ff bba8 	b.w	800a6e8 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 800af98:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	@ 0x2a
 800af9c:	f8a1 c000 	strh.w	ip, [r1]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800afa0:	8b42      	ldrh	r2, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800afa2:	69c0      	ldr	r0, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 800afa4:	f8a3 c00c 	strh.w	ip, [r3, #12]
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800afa8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800afac:	0052      	lsls	r2, r2, #1
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800afae:	fb00 f00c 	mul.w	r0, r0, ip
                                          / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800afb2:	fb90 f0f2 	sdiv	r0, r0, r2
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800afb6:	785a      	ldrb	r2, [r3, #1]
 800afb8:	fb12 f200 	smulbb	r2, r2, r0
      pHandle->hRemainingStep = 0U;
 800afbc:	2000      	movs	r0, #0
 800afbe:	8518      	strh	r0, [r3, #40]	@ 0x28
    if (false == pHandle->bTransitionEnded)
 800afc0:	f893 002d 	ldrb.w	r0, [r3, #45]	@ 0x2d
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800afc4:	81da      	strh	r2, [r3, #14]
    if (false == pHandle->bTransitionEnded)
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0de      	beq.n	800af88 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800afca:	4618      	mov	r0, r3
 800afcc:	f7ff bb8c 	b.w	800a6e8 <SPD_IsMecSpeedReliable>

0800afd0 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 800afd0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800afd4:	b9a3      	cbnz	r3, 800b000 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800afd6:	8b43      	ldrh	r3, [r0, #26]
{
 800afd8:	b510      	push	{r4, lr}
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800afda:	69c4      	ldr	r4, [r0, #28]

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800afdc:	f890 e001 	ldrb.w	lr, [r0, #1]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800afe0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800afe4:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800afe8:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800afea:	fb9c fcf3 	sdiv	ip, ip, r3
      if (0U == hDurationms)
 800afee:	b942      	cbnz	r2, 800b002 <VSS_SetMecAcceleration+0x32>
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800aff0:	fb1c fc0e 	smulbb	ip, ip, lr
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800aff4:	8181      	strh	r1, [r0, #12]
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800aff6:	f8a0 c00e 	strh.w	ip, [r0, #14]

        pHandle->hRemainingStep = 0U;
 800affa:	8502      	strh	r2, [r0, #40]	@ 0x28

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800affc:	8541      	strh	r1, [r0, #42]	@ 0x2a
      /* Nothing to do */
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
}
 800affe:	bd10      	pop	{r4, pc}
 800b000:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 800b002:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 800b004:	fb02 f303 	mul.w	r3, r2, r3
 800b008:	4a0e      	ldr	r2, [pc, #56]	@ (800b044 <VSS_SetMecAcceleration+0x74>)
 800b00a:	fba2 2303 	umull	r2, r3, r2, r3
 800b00e:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 800b012:	3301      	adds	r3, #1
 800b014:	b29b      	uxth	r3, r3
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b016:	f9b0 200e 	ldrsh.w	r2, [r0, #14]
        pHandle->hRemainingStep = hNbrStep;
 800b01a:	8503      	strh	r3, [r0, #40]	@ 0x28
        if (0U == hNbrStep)
 800b01c:	b91b      	cbnz	r3, 800b026 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b01e:	0412      	lsls	r2, r2, #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b020:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b022:	6242      	str	r2, [r0, #36]	@ 0x24
}
 800b024:	bd10      	pop	{r4, pc}
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800b026:	fb92 f4fe 	sdiv	r4, r2, lr
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b02a:	ebac 0c04 	sub.w	ip, ip, r4
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 800b02e:	ea4f 4c0c 	mov.w	ip, ip, lsl #16
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b032:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 800b034:	fb9c f3f3 	sdiv	r3, ip, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800b038:	fb0e f303 	mul.w	r3, lr, r3
 800b03c:	6203      	str	r3, [r0, #32]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800b03e:	8541      	strh	r1, [r0, #42]	@ 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800b040:	6242      	str	r2, [r0, #36]	@ 0x24
    }
 800b042:	e7ef      	b.n	800b024 <VSS_SetMecAcceleration+0x54>
 800b044:	10624dd3 	.word	0x10624dd3

0800b048 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 800b048:	b151      	cbz	r1, 800b060 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 800b04a:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	@ 0x36
      pHandle->bTransitionStarted = true;
 800b04e:	2201      	movs	r2, #1
 800b050:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
      if (0 == pHandle->hTransitionSteps)
 800b054:	b923      	cbnz	r3, 800b060 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 800b056:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 800b05a:	7003      	strb	r3, [r0, #0]
        bAux = false;
 800b05c:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 800b05e:	4770      	bx	lr
  bool bAux = true;
 800b060:	2001      	movs	r0, #1
 800b062:	4770      	bx	lr

0800b064 <VSS_TransitionEnded>:
#ifdef NULL_PTR_CHECK_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 800b064:	f890 002d 	ldrb.w	r0, [r0, #45]	@ 0x2d
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop

0800b06c <_vsniprintf_r>:
 800b06c:	b530      	push	{r4, r5, lr}
 800b06e:	4614      	mov	r4, r2
 800b070:	2c00      	cmp	r4, #0
 800b072:	b09b      	sub	sp, #108	@ 0x6c
 800b074:	4605      	mov	r5, r0
 800b076:	461a      	mov	r2, r3
 800b078:	da05      	bge.n	800b086 <_vsniprintf_r+0x1a>
 800b07a:	238b      	movs	r3, #139	@ 0x8b
 800b07c:	6003      	str	r3, [r0, #0]
 800b07e:	f04f 30ff 	mov.w	r0, #4294967295
 800b082:	b01b      	add	sp, #108	@ 0x6c
 800b084:	bd30      	pop	{r4, r5, pc}
 800b086:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b08a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800b08e:	f04f 0300 	mov.w	r3, #0
 800b092:	9319      	str	r3, [sp, #100]	@ 0x64
 800b094:	bf14      	ite	ne
 800b096:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b09a:	4623      	moveq	r3, r4
 800b09c:	9302      	str	r3, [sp, #8]
 800b09e:	9305      	str	r3, [sp, #20]
 800b0a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b0a4:	9100      	str	r1, [sp, #0]
 800b0a6:	9104      	str	r1, [sp, #16]
 800b0a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 800b0ac:	4669      	mov	r1, sp
 800b0ae:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800b0b0:	f000 f9ae 	bl	800b410 <_svfiprintf_r>
 800b0b4:	1c43      	adds	r3, r0, #1
 800b0b6:	bfbc      	itt	lt
 800b0b8:	238b      	movlt	r3, #139	@ 0x8b
 800b0ba:	602b      	strlt	r3, [r5, #0]
 800b0bc:	2c00      	cmp	r4, #0
 800b0be:	d0e0      	beq.n	800b082 <_vsniprintf_r+0x16>
 800b0c0:	9b00      	ldr	r3, [sp, #0]
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	701a      	strb	r2, [r3, #0]
 800b0c6:	e7dc      	b.n	800b082 <_vsniprintf_r+0x16>

0800b0c8 <vsniprintf>:
 800b0c8:	b507      	push	{r0, r1, r2, lr}
 800b0ca:	9300      	str	r3, [sp, #0]
 800b0cc:	4613      	mov	r3, r2
 800b0ce:	460a      	mov	r2, r1
 800b0d0:	4601      	mov	r1, r0
 800b0d2:	4803      	ldr	r0, [pc, #12]	@ (800b0e0 <vsniprintf+0x18>)
 800b0d4:	6800      	ldr	r0, [r0, #0]
 800b0d6:	f7ff ffc9 	bl	800b06c <_vsniprintf_r>
 800b0da:	b003      	add	sp, #12
 800b0dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0e0:	200004f8 	.word	0x200004f8

0800b0e4 <memset>:
 800b0e4:	4402      	add	r2, r0
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	d100      	bne.n	800b0ee <memset+0xa>
 800b0ec:	4770      	bx	lr
 800b0ee:	f803 1b01 	strb.w	r1, [r3], #1
 800b0f2:	e7f9      	b.n	800b0e8 <memset+0x4>

0800b0f4 <__errno>:
 800b0f4:	4b01      	ldr	r3, [pc, #4]	@ (800b0fc <__errno+0x8>)
 800b0f6:	6818      	ldr	r0, [r3, #0]
 800b0f8:	4770      	bx	lr
 800b0fa:	bf00      	nop
 800b0fc:	200004f8 	.word	0x200004f8

0800b100 <__libc_init_array>:
 800b100:	b570      	push	{r4, r5, r6, lr}
 800b102:	4d0d      	ldr	r5, [pc, #52]	@ (800b138 <__libc_init_array+0x38>)
 800b104:	4c0d      	ldr	r4, [pc, #52]	@ (800b13c <__libc_init_array+0x3c>)
 800b106:	1b64      	subs	r4, r4, r5
 800b108:	10a4      	asrs	r4, r4, #2
 800b10a:	2600      	movs	r6, #0
 800b10c:	42a6      	cmp	r6, r4
 800b10e:	d109      	bne.n	800b124 <__libc_init_array+0x24>
 800b110:	4d0b      	ldr	r5, [pc, #44]	@ (800b140 <__libc_init_array+0x40>)
 800b112:	4c0c      	ldr	r4, [pc, #48]	@ (800b144 <__libc_init_array+0x44>)
 800b114:	f000 fc64 	bl	800b9e0 <_init>
 800b118:	1b64      	subs	r4, r4, r5
 800b11a:	10a4      	asrs	r4, r4, #2
 800b11c:	2600      	movs	r6, #0
 800b11e:	42a6      	cmp	r6, r4
 800b120:	d105      	bne.n	800b12e <__libc_init_array+0x2e>
 800b122:	bd70      	pop	{r4, r5, r6, pc}
 800b124:	f855 3b04 	ldr.w	r3, [r5], #4
 800b128:	4798      	blx	r3
 800b12a:	3601      	adds	r6, #1
 800b12c:	e7ee      	b.n	800b10c <__libc_init_array+0xc>
 800b12e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b132:	4798      	blx	r3
 800b134:	3601      	adds	r6, #1
 800b136:	e7f2      	b.n	800b11e <__libc_init_array+0x1e>
 800b138:	0800c230 	.word	0x0800c230
 800b13c:	0800c230 	.word	0x0800c230
 800b140:	0800c230 	.word	0x0800c230
 800b144:	0800c234 	.word	0x0800c234

0800b148 <__retarget_lock_acquire_recursive>:
 800b148:	4770      	bx	lr

0800b14a <__retarget_lock_release_recursive>:
 800b14a:	4770      	bx	lr

0800b14c <memcpy>:
 800b14c:	440a      	add	r2, r1
 800b14e:	4291      	cmp	r1, r2
 800b150:	f100 33ff 	add.w	r3, r0, #4294967295
 800b154:	d100      	bne.n	800b158 <memcpy+0xc>
 800b156:	4770      	bx	lr
 800b158:	b510      	push	{r4, lr}
 800b15a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b15e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b162:	4291      	cmp	r1, r2
 800b164:	d1f9      	bne.n	800b15a <memcpy+0xe>
 800b166:	bd10      	pop	{r4, pc}

0800b168 <_free_r>:
 800b168:	b538      	push	{r3, r4, r5, lr}
 800b16a:	4605      	mov	r5, r0
 800b16c:	2900      	cmp	r1, #0
 800b16e:	d041      	beq.n	800b1f4 <_free_r+0x8c>
 800b170:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b174:	1f0c      	subs	r4, r1, #4
 800b176:	2b00      	cmp	r3, #0
 800b178:	bfb8      	it	lt
 800b17a:	18e4      	addlt	r4, r4, r3
 800b17c:	f000 f8e0 	bl	800b340 <__malloc_lock>
 800b180:	4a1d      	ldr	r2, [pc, #116]	@ (800b1f8 <_free_r+0x90>)
 800b182:	6813      	ldr	r3, [r2, #0]
 800b184:	b933      	cbnz	r3, 800b194 <_free_r+0x2c>
 800b186:	6063      	str	r3, [r4, #4]
 800b188:	6014      	str	r4, [r2, #0]
 800b18a:	4628      	mov	r0, r5
 800b18c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b190:	f000 b8dc 	b.w	800b34c <__malloc_unlock>
 800b194:	42a3      	cmp	r3, r4
 800b196:	d908      	bls.n	800b1aa <_free_r+0x42>
 800b198:	6820      	ldr	r0, [r4, #0]
 800b19a:	1821      	adds	r1, r4, r0
 800b19c:	428b      	cmp	r3, r1
 800b19e:	bf01      	itttt	eq
 800b1a0:	6819      	ldreq	r1, [r3, #0]
 800b1a2:	685b      	ldreq	r3, [r3, #4]
 800b1a4:	1809      	addeq	r1, r1, r0
 800b1a6:	6021      	streq	r1, [r4, #0]
 800b1a8:	e7ed      	b.n	800b186 <_free_r+0x1e>
 800b1aa:	461a      	mov	r2, r3
 800b1ac:	685b      	ldr	r3, [r3, #4]
 800b1ae:	b10b      	cbz	r3, 800b1b4 <_free_r+0x4c>
 800b1b0:	42a3      	cmp	r3, r4
 800b1b2:	d9fa      	bls.n	800b1aa <_free_r+0x42>
 800b1b4:	6811      	ldr	r1, [r2, #0]
 800b1b6:	1850      	adds	r0, r2, r1
 800b1b8:	42a0      	cmp	r0, r4
 800b1ba:	d10b      	bne.n	800b1d4 <_free_r+0x6c>
 800b1bc:	6820      	ldr	r0, [r4, #0]
 800b1be:	4401      	add	r1, r0
 800b1c0:	1850      	adds	r0, r2, r1
 800b1c2:	4283      	cmp	r3, r0
 800b1c4:	6011      	str	r1, [r2, #0]
 800b1c6:	d1e0      	bne.n	800b18a <_free_r+0x22>
 800b1c8:	6818      	ldr	r0, [r3, #0]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	6053      	str	r3, [r2, #4]
 800b1ce:	4408      	add	r0, r1
 800b1d0:	6010      	str	r0, [r2, #0]
 800b1d2:	e7da      	b.n	800b18a <_free_r+0x22>
 800b1d4:	d902      	bls.n	800b1dc <_free_r+0x74>
 800b1d6:	230c      	movs	r3, #12
 800b1d8:	602b      	str	r3, [r5, #0]
 800b1da:	e7d6      	b.n	800b18a <_free_r+0x22>
 800b1dc:	6820      	ldr	r0, [r4, #0]
 800b1de:	1821      	adds	r1, r4, r0
 800b1e0:	428b      	cmp	r3, r1
 800b1e2:	bf04      	itt	eq
 800b1e4:	6819      	ldreq	r1, [r3, #0]
 800b1e6:	685b      	ldreq	r3, [r3, #4]
 800b1e8:	6063      	str	r3, [r4, #4]
 800b1ea:	bf04      	itt	eq
 800b1ec:	1809      	addeq	r1, r1, r0
 800b1ee:	6021      	streq	r1, [r4, #0]
 800b1f0:	6054      	str	r4, [r2, #4]
 800b1f2:	e7ca      	b.n	800b18a <_free_r+0x22>
 800b1f4:	bd38      	pop	{r3, r4, r5, pc}
 800b1f6:	bf00      	nop
 800b1f8:	20001d58 	.word	0x20001d58

0800b1fc <sbrk_aligned>:
 800b1fc:	b570      	push	{r4, r5, r6, lr}
 800b1fe:	4e0f      	ldr	r6, [pc, #60]	@ (800b23c <sbrk_aligned+0x40>)
 800b200:	460c      	mov	r4, r1
 800b202:	6831      	ldr	r1, [r6, #0]
 800b204:	4605      	mov	r5, r0
 800b206:	b911      	cbnz	r1, 800b20e <sbrk_aligned+0x12>
 800b208:	f000 fba4 	bl	800b954 <_sbrk_r>
 800b20c:	6030      	str	r0, [r6, #0]
 800b20e:	4621      	mov	r1, r4
 800b210:	4628      	mov	r0, r5
 800b212:	f000 fb9f 	bl	800b954 <_sbrk_r>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	d103      	bne.n	800b222 <sbrk_aligned+0x26>
 800b21a:	f04f 34ff 	mov.w	r4, #4294967295
 800b21e:	4620      	mov	r0, r4
 800b220:	bd70      	pop	{r4, r5, r6, pc}
 800b222:	1cc4      	adds	r4, r0, #3
 800b224:	f024 0403 	bic.w	r4, r4, #3
 800b228:	42a0      	cmp	r0, r4
 800b22a:	d0f8      	beq.n	800b21e <sbrk_aligned+0x22>
 800b22c:	1a21      	subs	r1, r4, r0
 800b22e:	4628      	mov	r0, r5
 800b230:	f000 fb90 	bl	800b954 <_sbrk_r>
 800b234:	3001      	adds	r0, #1
 800b236:	d1f2      	bne.n	800b21e <sbrk_aligned+0x22>
 800b238:	e7ef      	b.n	800b21a <sbrk_aligned+0x1e>
 800b23a:	bf00      	nop
 800b23c:	20001d54 	.word	0x20001d54

0800b240 <_malloc_r>:
 800b240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b244:	1ccd      	adds	r5, r1, #3
 800b246:	f025 0503 	bic.w	r5, r5, #3
 800b24a:	3508      	adds	r5, #8
 800b24c:	2d0c      	cmp	r5, #12
 800b24e:	bf38      	it	cc
 800b250:	250c      	movcc	r5, #12
 800b252:	2d00      	cmp	r5, #0
 800b254:	4606      	mov	r6, r0
 800b256:	db01      	blt.n	800b25c <_malloc_r+0x1c>
 800b258:	42a9      	cmp	r1, r5
 800b25a:	d904      	bls.n	800b266 <_malloc_r+0x26>
 800b25c:	230c      	movs	r3, #12
 800b25e:	6033      	str	r3, [r6, #0]
 800b260:	2000      	movs	r0, #0
 800b262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b266:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b33c <_malloc_r+0xfc>
 800b26a:	f000 f869 	bl	800b340 <__malloc_lock>
 800b26e:	f8d8 3000 	ldr.w	r3, [r8]
 800b272:	461c      	mov	r4, r3
 800b274:	bb44      	cbnz	r4, 800b2c8 <_malloc_r+0x88>
 800b276:	4629      	mov	r1, r5
 800b278:	4630      	mov	r0, r6
 800b27a:	f7ff ffbf 	bl	800b1fc <sbrk_aligned>
 800b27e:	1c43      	adds	r3, r0, #1
 800b280:	4604      	mov	r4, r0
 800b282:	d158      	bne.n	800b336 <_malloc_r+0xf6>
 800b284:	f8d8 4000 	ldr.w	r4, [r8]
 800b288:	4627      	mov	r7, r4
 800b28a:	2f00      	cmp	r7, #0
 800b28c:	d143      	bne.n	800b316 <_malloc_r+0xd6>
 800b28e:	2c00      	cmp	r4, #0
 800b290:	d04b      	beq.n	800b32a <_malloc_r+0xea>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	4639      	mov	r1, r7
 800b296:	4630      	mov	r0, r6
 800b298:	eb04 0903 	add.w	r9, r4, r3
 800b29c:	f000 fb5a 	bl	800b954 <_sbrk_r>
 800b2a0:	4581      	cmp	r9, r0
 800b2a2:	d142      	bne.n	800b32a <_malloc_r+0xea>
 800b2a4:	6821      	ldr	r1, [r4, #0]
 800b2a6:	1a6d      	subs	r5, r5, r1
 800b2a8:	4629      	mov	r1, r5
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	f7ff ffa6 	bl	800b1fc <sbrk_aligned>
 800b2b0:	3001      	adds	r0, #1
 800b2b2:	d03a      	beq.n	800b32a <_malloc_r+0xea>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	442b      	add	r3, r5
 800b2b8:	6023      	str	r3, [r4, #0]
 800b2ba:	f8d8 3000 	ldr.w	r3, [r8]
 800b2be:	685a      	ldr	r2, [r3, #4]
 800b2c0:	bb62      	cbnz	r2, 800b31c <_malloc_r+0xdc>
 800b2c2:	f8c8 7000 	str.w	r7, [r8]
 800b2c6:	e00f      	b.n	800b2e8 <_malloc_r+0xa8>
 800b2c8:	6822      	ldr	r2, [r4, #0]
 800b2ca:	1b52      	subs	r2, r2, r5
 800b2cc:	d420      	bmi.n	800b310 <_malloc_r+0xd0>
 800b2ce:	2a0b      	cmp	r2, #11
 800b2d0:	d917      	bls.n	800b302 <_malloc_r+0xc2>
 800b2d2:	1961      	adds	r1, r4, r5
 800b2d4:	42a3      	cmp	r3, r4
 800b2d6:	6025      	str	r5, [r4, #0]
 800b2d8:	bf18      	it	ne
 800b2da:	6059      	strne	r1, [r3, #4]
 800b2dc:	6863      	ldr	r3, [r4, #4]
 800b2de:	bf08      	it	eq
 800b2e0:	f8c8 1000 	streq.w	r1, [r8]
 800b2e4:	5162      	str	r2, [r4, r5]
 800b2e6:	604b      	str	r3, [r1, #4]
 800b2e8:	4630      	mov	r0, r6
 800b2ea:	f000 f82f 	bl	800b34c <__malloc_unlock>
 800b2ee:	f104 000b 	add.w	r0, r4, #11
 800b2f2:	1d23      	adds	r3, r4, #4
 800b2f4:	f020 0007 	bic.w	r0, r0, #7
 800b2f8:	1ac2      	subs	r2, r0, r3
 800b2fa:	bf1c      	itt	ne
 800b2fc:	1a1b      	subne	r3, r3, r0
 800b2fe:	50a3      	strne	r3, [r4, r2]
 800b300:	e7af      	b.n	800b262 <_malloc_r+0x22>
 800b302:	6862      	ldr	r2, [r4, #4]
 800b304:	42a3      	cmp	r3, r4
 800b306:	bf0c      	ite	eq
 800b308:	f8c8 2000 	streq.w	r2, [r8]
 800b30c:	605a      	strne	r2, [r3, #4]
 800b30e:	e7eb      	b.n	800b2e8 <_malloc_r+0xa8>
 800b310:	4623      	mov	r3, r4
 800b312:	6864      	ldr	r4, [r4, #4]
 800b314:	e7ae      	b.n	800b274 <_malloc_r+0x34>
 800b316:	463c      	mov	r4, r7
 800b318:	687f      	ldr	r7, [r7, #4]
 800b31a:	e7b6      	b.n	800b28a <_malloc_r+0x4a>
 800b31c:	461a      	mov	r2, r3
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	42a3      	cmp	r3, r4
 800b322:	d1fb      	bne.n	800b31c <_malloc_r+0xdc>
 800b324:	2300      	movs	r3, #0
 800b326:	6053      	str	r3, [r2, #4]
 800b328:	e7de      	b.n	800b2e8 <_malloc_r+0xa8>
 800b32a:	230c      	movs	r3, #12
 800b32c:	6033      	str	r3, [r6, #0]
 800b32e:	4630      	mov	r0, r6
 800b330:	f000 f80c 	bl	800b34c <__malloc_unlock>
 800b334:	e794      	b.n	800b260 <_malloc_r+0x20>
 800b336:	6005      	str	r5, [r0, #0]
 800b338:	e7d6      	b.n	800b2e8 <_malloc_r+0xa8>
 800b33a:	bf00      	nop
 800b33c:	20001d58 	.word	0x20001d58

0800b340 <__malloc_lock>:
 800b340:	4801      	ldr	r0, [pc, #4]	@ (800b348 <__malloc_lock+0x8>)
 800b342:	f7ff bf01 	b.w	800b148 <__retarget_lock_acquire_recursive>
 800b346:	bf00      	nop
 800b348:	20001d50 	.word	0x20001d50

0800b34c <__malloc_unlock>:
 800b34c:	4801      	ldr	r0, [pc, #4]	@ (800b354 <__malloc_unlock+0x8>)
 800b34e:	f7ff befc 	b.w	800b14a <__retarget_lock_release_recursive>
 800b352:	bf00      	nop
 800b354:	20001d50 	.word	0x20001d50

0800b358 <__ssputs_r>:
 800b358:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b35c:	688e      	ldr	r6, [r1, #8]
 800b35e:	461f      	mov	r7, r3
 800b360:	42be      	cmp	r6, r7
 800b362:	680b      	ldr	r3, [r1, #0]
 800b364:	4682      	mov	sl, r0
 800b366:	460c      	mov	r4, r1
 800b368:	4690      	mov	r8, r2
 800b36a:	d82d      	bhi.n	800b3c8 <__ssputs_r+0x70>
 800b36c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b370:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b374:	d026      	beq.n	800b3c4 <__ssputs_r+0x6c>
 800b376:	6965      	ldr	r5, [r4, #20]
 800b378:	6909      	ldr	r1, [r1, #16]
 800b37a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b37e:	eba3 0901 	sub.w	r9, r3, r1
 800b382:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b386:	1c7b      	adds	r3, r7, #1
 800b388:	444b      	add	r3, r9
 800b38a:	106d      	asrs	r5, r5, #1
 800b38c:	429d      	cmp	r5, r3
 800b38e:	bf38      	it	cc
 800b390:	461d      	movcc	r5, r3
 800b392:	0553      	lsls	r3, r2, #21
 800b394:	d527      	bpl.n	800b3e6 <__ssputs_r+0x8e>
 800b396:	4629      	mov	r1, r5
 800b398:	f7ff ff52 	bl	800b240 <_malloc_r>
 800b39c:	4606      	mov	r6, r0
 800b39e:	b360      	cbz	r0, 800b3fa <__ssputs_r+0xa2>
 800b3a0:	6921      	ldr	r1, [r4, #16]
 800b3a2:	464a      	mov	r2, r9
 800b3a4:	f7ff fed2 	bl	800b14c <memcpy>
 800b3a8:	89a3      	ldrh	r3, [r4, #12]
 800b3aa:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b3ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b3b2:	81a3      	strh	r3, [r4, #12]
 800b3b4:	6126      	str	r6, [r4, #16]
 800b3b6:	6165      	str	r5, [r4, #20]
 800b3b8:	444e      	add	r6, r9
 800b3ba:	eba5 0509 	sub.w	r5, r5, r9
 800b3be:	6026      	str	r6, [r4, #0]
 800b3c0:	60a5      	str	r5, [r4, #8]
 800b3c2:	463e      	mov	r6, r7
 800b3c4:	42be      	cmp	r6, r7
 800b3c6:	d900      	bls.n	800b3ca <__ssputs_r+0x72>
 800b3c8:	463e      	mov	r6, r7
 800b3ca:	6820      	ldr	r0, [r4, #0]
 800b3cc:	4632      	mov	r2, r6
 800b3ce:	4641      	mov	r1, r8
 800b3d0:	f000 faa6 	bl	800b920 <memmove>
 800b3d4:	68a3      	ldr	r3, [r4, #8]
 800b3d6:	1b9b      	subs	r3, r3, r6
 800b3d8:	60a3      	str	r3, [r4, #8]
 800b3da:	6823      	ldr	r3, [r4, #0]
 800b3dc:	4433      	add	r3, r6
 800b3de:	6023      	str	r3, [r4, #0]
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3e6:	462a      	mov	r2, r5
 800b3e8:	f000 fac4 	bl	800b974 <_realloc_r>
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	2800      	cmp	r0, #0
 800b3f0:	d1e0      	bne.n	800b3b4 <__ssputs_r+0x5c>
 800b3f2:	6921      	ldr	r1, [r4, #16]
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	f7ff feb7 	bl	800b168 <_free_r>
 800b3fa:	230c      	movs	r3, #12
 800b3fc:	f8ca 3000 	str.w	r3, [sl]
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	e7e9      	b.n	800b3e2 <__ssputs_r+0x8a>
	...

0800b410 <_svfiprintf_r>:
 800b410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b414:	4698      	mov	r8, r3
 800b416:	898b      	ldrh	r3, [r1, #12]
 800b418:	061b      	lsls	r3, r3, #24
 800b41a:	b09d      	sub	sp, #116	@ 0x74
 800b41c:	4607      	mov	r7, r0
 800b41e:	460d      	mov	r5, r1
 800b420:	4614      	mov	r4, r2
 800b422:	d510      	bpl.n	800b446 <_svfiprintf_r+0x36>
 800b424:	690b      	ldr	r3, [r1, #16]
 800b426:	b973      	cbnz	r3, 800b446 <_svfiprintf_r+0x36>
 800b428:	2140      	movs	r1, #64	@ 0x40
 800b42a:	f7ff ff09 	bl	800b240 <_malloc_r>
 800b42e:	6028      	str	r0, [r5, #0]
 800b430:	6128      	str	r0, [r5, #16]
 800b432:	b930      	cbnz	r0, 800b442 <_svfiprintf_r+0x32>
 800b434:	230c      	movs	r3, #12
 800b436:	603b      	str	r3, [r7, #0]
 800b438:	f04f 30ff 	mov.w	r0, #4294967295
 800b43c:	b01d      	add	sp, #116	@ 0x74
 800b43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b442:	2340      	movs	r3, #64	@ 0x40
 800b444:	616b      	str	r3, [r5, #20]
 800b446:	2300      	movs	r3, #0
 800b448:	9309      	str	r3, [sp, #36]	@ 0x24
 800b44a:	2320      	movs	r3, #32
 800b44c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b450:	f8cd 800c 	str.w	r8, [sp, #12]
 800b454:	2330      	movs	r3, #48	@ 0x30
 800b456:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b5f4 <_svfiprintf_r+0x1e4>
 800b45a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b45e:	f04f 0901 	mov.w	r9, #1
 800b462:	4623      	mov	r3, r4
 800b464:	469a      	mov	sl, r3
 800b466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b46a:	b10a      	cbz	r2, 800b470 <_svfiprintf_r+0x60>
 800b46c:	2a25      	cmp	r2, #37	@ 0x25
 800b46e:	d1f9      	bne.n	800b464 <_svfiprintf_r+0x54>
 800b470:	ebba 0b04 	subs.w	fp, sl, r4
 800b474:	d00b      	beq.n	800b48e <_svfiprintf_r+0x7e>
 800b476:	465b      	mov	r3, fp
 800b478:	4622      	mov	r2, r4
 800b47a:	4629      	mov	r1, r5
 800b47c:	4638      	mov	r0, r7
 800b47e:	f7ff ff6b 	bl	800b358 <__ssputs_r>
 800b482:	3001      	adds	r0, #1
 800b484:	f000 80a7 	beq.w	800b5d6 <_svfiprintf_r+0x1c6>
 800b488:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b48a:	445a      	add	r2, fp
 800b48c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b48e:	f89a 3000 	ldrb.w	r3, [sl]
 800b492:	2b00      	cmp	r3, #0
 800b494:	f000 809f 	beq.w	800b5d6 <_svfiprintf_r+0x1c6>
 800b498:	2300      	movs	r3, #0
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295
 800b49e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4a2:	f10a 0a01 	add.w	sl, sl, #1
 800b4a6:	9304      	str	r3, [sp, #16]
 800b4a8:	9307      	str	r3, [sp, #28]
 800b4aa:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4ae:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4b0:	4654      	mov	r4, sl
 800b4b2:	2205      	movs	r2, #5
 800b4b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4b8:	484e      	ldr	r0, [pc, #312]	@ (800b5f4 <_svfiprintf_r+0x1e4>)
 800b4ba:	f7f4 feb1 	bl	8000220 <memchr>
 800b4be:	9a04      	ldr	r2, [sp, #16]
 800b4c0:	b9d8      	cbnz	r0, 800b4fa <_svfiprintf_r+0xea>
 800b4c2:	06d0      	lsls	r0, r2, #27
 800b4c4:	bf44      	itt	mi
 800b4c6:	2320      	movmi	r3, #32
 800b4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4cc:	0711      	lsls	r1, r2, #28
 800b4ce:	bf44      	itt	mi
 800b4d0:	232b      	movmi	r3, #43	@ 0x2b
 800b4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800b4da:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4dc:	d015      	beq.n	800b50a <_svfiprintf_r+0xfa>
 800b4de:	9a07      	ldr	r2, [sp, #28]
 800b4e0:	4654      	mov	r4, sl
 800b4e2:	2000      	movs	r0, #0
 800b4e4:	f04f 0c0a 	mov.w	ip, #10
 800b4e8:	4621      	mov	r1, r4
 800b4ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4ee:	3b30      	subs	r3, #48	@ 0x30
 800b4f0:	2b09      	cmp	r3, #9
 800b4f2:	d94b      	bls.n	800b58c <_svfiprintf_r+0x17c>
 800b4f4:	b1b0      	cbz	r0, 800b524 <_svfiprintf_r+0x114>
 800b4f6:	9207      	str	r2, [sp, #28]
 800b4f8:	e014      	b.n	800b524 <_svfiprintf_r+0x114>
 800b4fa:	eba0 0308 	sub.w	r3, r0, r8
 800b4fe:	fa09 f303 	lsl.w	r3, r9, r3
 800b502:	4313      	orrs	r3, r2
 800b504:	9304      	str	r3, [sp, #16]
 800b506:	46a2      	mov	sl, r4
 800b508:	e7d2      	b.n	800b4b0 <_svfiprintf_r+0xa0>
 800b50a:	9b03      	ldr	r3, [sp, #12]
 800b50c:	1d19      	adds	r1, r3, #4
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	9103      	str	r1, [sp, #12]
 800b512:	2b00      	cmp	r3, #0
 800b514:	bfbb      	ittet	lt
 800b516:	425b      	neglt	r3, r3
 800b518:	f042 0202 	orrlt.w	r2, r2, #2
 800b51c:	9307      	strge	r3, [sp, #28]
 800b51e:	9307      	strlt	r3, [sp, #28]
 800b520:	bfb8      	it	lt
 800b522:	9204      	strlt	r2, [sp, #16]
 800b524:	7823      	ldrb	r3, [r4, #0]
 800b526:	2b2e      	cmp	r3, #46	@ 0x2e
 800b528:	d10a      	bne.n	800b540 <_svfiprintf_r+0x130>
 800b52a:	7863      	ldrb	r3, [r4, #1]
 800b52c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b52e:	d132      	bne.n	800b596 <_svfiprintf_r+0x186>
 800b530:	9b03      	ldr	r3, [sp, #12]
 800b532:	1d1a      	adds	r2, r3, #4
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	9203      	str	r2, [sp, #12]
 800b538:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b53c:	3402      	adds	r4, #2
 800b53e:	9305      	str	r3, [sp, #20]
 800b540:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800b604 <_svfiprintf_r+0x1f4>
 800b544:	7821      	ldrb	r1, [r4, #0]
 800b546:	2203      	movs	r2, #3
 800b548:	4650      	mov	r0, sl
 800b54a:	f7f4 fe69 	bl	8000220 <memchr>
 800b54e:	b138      	cbz	r0, 800b560 <_svfiprintf_r+0x150>
 800b550:	9b04      	ldr	r3, [sp, #16]
 800b552:	eba0 000a 	sub.w	r0, r0, sl
 800b556:	2240      	movs	r2, #64	@ 0x40
 800b558:	4082      	lsls	r2, r0
 800b55a:	4313      	orrs	r3, r2
 800b55c:	3401      	adds	r4, #1
 800b55e:	9304      	str	r3, [sp, #16]
 800b560:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b564:	4824      	ldr	r0, [pc, #144]	@ (800b5f8 <_svfiprintf_r+0x1e8>)
 800b566:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b56a:	2206      	movs	r2, #6
 800b56c:	f7f4 fe58 	bl	8000220 <memchr>
 800b570:	2800      	cmp	r0, #0
 800b572:	d036      	beq.n	800b5e2 <_svfiprintf_r+0x1d2>
 800b574:	4b21      	ldr	r3, [pc, #132]	@ (800b5fc <_svfiprintf_r+0x1ec>)
 800b576:	bb1b      	cbnz	r3, 800b5c0 <_svfiprintf_r+0x1b0>
 800b578:	9b03      	ldr	r3, [sp, #12]
 800b57a:	3307      	adds	r3, #7
 800b57c:	f023 0307 	bic.w	r3, r3, #7
 800b580:	3308      	adds	r3, #8
 800b582:	9303      	str	r3, [sp, #12]
 800b584:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b586:	4433      	add	r3, r6
 800b588:	9309      	str	r3, [sp, #36]	@ 0x24
 800b58a:	e76a      	b.n	800b462 <_svfiprintf_r+0x52>
 800b58c:	fb0c 3202 	mla	r2, ip, r2, r3
 800b590:	460c      	mov	r4, r1
 800b592:	2001      	movs	r0, #1
 800b594:	e7a8      	b.n	800b4e8 <_svfiprintf_r+0xd8>
 800b596:	2300      	movs	r3, #0
 800b598:	3401      	adds	r4, #1
 800b59a:	9305      	str	r3, [sp, #20]
 800b59c:	4619      	mov	r1, r3
 800b59e:	f04f 0c0a 	mov.w	ip, #10
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5a8:	3a30      	subs	r2, #48	@ 0x30
 800b5aa:	2a09      	cmp	r2, #9
 800b5ac:	d903      	bls.n	800b5b6 <_svfiprintf_r+0x1a6>
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0c6      	beq.n	800b540 <_svfiprintf_r+0x130>
 800b5b2:	9105      	str	r1, [sp, #20]
 800b5b4:	e7c4      	b.n	800b540 <_svfiprintf_r+0x130>
 800b5b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ba:	4604      	mov	r4, r0
 800b5bc:	2301      	movs	r3, #1
 800b5be:	e7f0      	b.n	800b5a2 <_svfiprintf_r+0x192>
 800b5c0:	ab03      	add	r3, sp, #12
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	462a      	mov	r2, r5
 800b5c6:	4b0e      	ldr	r3, [pc, #56]	@ (800b600 <_svfiprintf_r+0x1f0>)
 800b5c8:	a904      	add	r1, sp, #16
 800b5ca:	4638      	mov	r0, r7
 800b5cc:	f3af 8000 	nop.w
 800b5d0:	1c42      	adds	r2, r0, #1
 800b5d2:	4606      	mov	r6, r0
 800b5d4:	d1d6      	bne.n	800b584 <_svfiprintf_r+0x174>
 800b5d6:	89ab      	ldrh	r3, [r5, #12]
 800b5d8:	065b      	lsls	r3, r3, #25
 800b5da:	f53f af2d 	bmi.w	800b438 <_svfiprintf_r+0x28>
 800b5de:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5e0:	e72c      	b.n	800b43c <_svfiprintf_r+0x2c>
 800b5e2:	ab03      	add	r3, sp, #12
 800b5e4:	9300      	str	r3, [sp, #0]
 800b5e6:	462a      	mov	r2, r5
 800b5e8:	4b05      	ldr	r3, [pc, #20]	@ (800b600 <_svfiprintf_r+0x1f0>)
 800b5ea:	a904      	add	r1, sp, #16
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	f000 f879 	bl	800b6e4 <_printf_i>
 800b5f2:	e7ed      	b.n	800b5d0 <_svfiprintf_r+0x1c0>
 800b5f4:	0800c1f4 	.word	0x0800c1f4
 800b5f8:	0800c1fe 	.word	0x0800c1fe
 800b5fc:	00000000 	.word	0x00000000
 800b600:	0800b359 	.word	0x0800b359
 800b604:	0800c1fa 	.word	0x0800c1fa

0800b608 <_printf_common>:
 800b608:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b60c:	4616      	mov	r6, r2
 800b60e:	4698      	mov	r8, r3
 800b610:	688a      	ldr	r2, [r1, #8]
 800b612:	690b      	ldr	r3, [r1, #16]
 800b614:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b618:	4293      	cmp	r3, r2
 800b61a:	bfb8      	it	lt
 800b61c:	4613      	movlt	r3, r2
 800b61e:	6033      	str	r3, [r6, #0]
 800b620:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b624:	4607      	mov	r7, r0
 800b626:	460c      	mov	r4, r1
 800b628:	b10a      	cbz	r2, 800b62e <_printf_common+0x26>
 800b62a:	3301      	adds	r3, #1
 800b62c:	6033      	str	r3, [r6, #0]
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	0699      	lsls	r1, r3, #26
 800b632:	bf42      	ittt	mi
 800b634:	6833      	ldrmi	r3, [r6, #0]
 800b636:	3302      	addmi	r3, #2
 800b638:	6033      	strmi	r3, [r6, #0]
 800b63a:	6825      	ldr	r5, [r4, #0]
 800b63c:	f015 0506 	ands.w	r5, r5, #6
 800b640:	d106      	bne.n	800b650 <_printf_common+0x48>
 800b642:	f104 0a19 	add.w	sl, r4, #25
 800b646:	68e3      	ldr	r3, [r4, #12]
 800b648:	6832      	ldr	r2, [r6, #0]
 800b64a:	1a9b      	subs	r3, r3, r2
 800b64c:	42ab      	cmp	r3, r5
 800b64e:	dc26      	bgt.n	800b69e <_printf_common+0x96>
 800b650:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b654:	6822      	ldr	r2, [r4, #0]
 800b656:	3b00      	subs	r3, #0
 800b658:	bf18      	it	ne
 800b65a:	2301      	movne	r3, #1
 800b65c:	0692      	lsls	r2, r2, #26
 800b65e:	d42b      	bmi.n	800b6b8 <_printf_common+0xb0>
 800b660:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b664:	4641      	mov	r1, r8
 800b666:	4638      	mov	r0, r7
 800b668:	47c8      	blx	r9
 800b66a:	3001      	adds	r0, #1
 800b66c:	d01e      	beq.n	800b6ac <_printf_common+0xa4>
 800b66e:	6823      	ldr	r3, [r4, #0]
 800b670:	6922      	ldr	r2, [r4, #16]
 800b672:	f003 0306 	and.w	r3, r3, #6
 800b676:	2b04      	cmp	r3, #4
 800b678:	bf02      	ittt	eq
 800b67a:	68e5      	ldreq	r5, [r4, #12]
 800b67c:	6833      	ldreq	r3, [r6, #0]
 800b67e:	1aed      	subeq	r5, r5, r3
 800b680:	68a3      	ldr	r3, [r4, #8]
 800b682:	bf0c      	ite	eq
 800b684:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b688:	2500      	movne	r5, #0
 800b68a:	4293      	cmp	r3, r2
 800b68c:	bfc4      	itt	gt
 800b68e:	1a9b      	subgt	r3, r3, r2
 800b690:	18ed      	addgt	r5, r5, r3
 800b692:	2600      	movs	r6, #0
 800b694:	341a      	adds	r4, #26
 800b696:	42b5      	cmp	r5, r6
 800b698:	d11a      	bne.n	800b6d0 <_printf_common+0xc8>
 800b69a:	2000      	movs	r0, #0
 800b69c:	e008      	b.n	800b6b0 <_printf_common+0xa8>
 800b69e:	2301      	movs	r3, #1
 800b6a0:	4652      	mov	r2, sl
 800b6a2:	4641      	mov	r1, r8
 800b6a4:	4638      	mov	r0, r7
 800b6a6:	47c8      	blx	r9
 800b6a8:	3001      	adds	r0, #1
 800b6aa:	d103      	bne.n	800b6b4 <_printf_common+0xac>
 800b6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800b6b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6b4:	3501      	adds	r5, #1
 800b6b6:	e7c6      	b.n	800b646 <_printf_common+0x3e>
 800b6b8:	18e1      	adds	r1, r4, r3
 800b6ba:	1c5a      	adds	r2, r3, #1
 800b6bc:	2030      	movs	r0, #48	@ 0x30
 800b6be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6c2:	4422      	add	r2, r4
 800b6c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6cc:	3302      	adds	r3, #2
 800b6ce:	e7c7      	b.n	800b660 <_printf_common+0x58>
 800b6d0:	2301      	movs	r3, #1
 800b6d2:	4622      	mov	r2, r4
 800b6d4:	4641      	mov	r1, r8
 800b6d6:	4638      	mov	r0, r7
 800b6d8:	47c8      	blx	r9
 800b6da:	3001      	adds	r0, #1
 800b6dc:	d0e6      	beq.n	800b6ac <_printf_common+0xa4>
 800b6de:	3601      	adds	r6, #1
 800b6e0:	e7d9      	b.n	800b696 <_printf_common+0x8e>
	...

0800b6e4 <_printf_i>:
 800b6e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6e8:	7e0f      	ldrb	r7, [r1, #24]
 800b6ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6ec:	2f78      	cmp	r7, #120	@ 0x78
 800b6ee:	4691      	mov	r9, r2
 800b6f0:	4680      	mov	r8, r0
 800b6f2:	460c      	mov	r4, r1
 800b6f4:	469a      	mov	sl, r3
 800b6f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b6fa:	d807      	bhi.n	800b70c <_printf_i+0x28>
 800b6fc:	2f62      	cmp	r7, #98	@ 0x62
 800b6fe:	d80a      	bhi.n	800b716 <_printf_i+0x32>
 800b700:	2f00      	cmp	r7, #0
 800b702:	f000 80d1 	beq.w	800b8a8 <_printf_i+0x1c4>
 800b706:	2f58      	cmp	r7, #88	@ 0x58
 800b708:	f000 80b8 	beq.w	800b87c <_printf_i+0x198>
 800b70c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b710:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b714:	e03a      	b.n	800b78c <_printf_i+0xa8>
 800b716:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b71a:	2b15      	cmp	r3, #21
 800b71c:	d8f6      	bhi.n	800b70c <_printf_i+0x28>
 800b71e:	a101      	add	r1, pc, #4	@ (adr r1, 800b724 <_printf_i+0x40>)
 800b720:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b724:	0800b77d 	.word	0x0800b77d
 800b728:	0800b791 	.word	0x0800b791
 800b72c:	0800b70d 	.word	0x0800b70d
 800b730:	0800b70d 	.word	0x0800b70d
 800b734:	0800b70d 	.word	0x0800b70d
 800b738:	0800b70d 	.word	0x0800b70d
 800b73c:	0800b791 	.word	0x0800b791
 800b740:	0800b70d 	.word	0x0800b70d
 800b744:	0800b70d 	.word	0x0800b70d
 800b748:	0800b70d 	.word	0x0800b70d
 800b74c:	0800b70d 	.word	0x0800b70d
 800b750:	0800b88f 	.word	0x0800b88f
 800b754:	0800b7bb 	.word	0x0800b7bb
 800b758:	0800b849 	.word	0x0800b849
 800b75c:	0800b70d 	.word	0x0800b70d
 800b760:	0800b70d 	.word	0x0800b70d
 800b764:	0800b8b1 	.word	0x0800b8b1
 800b768:	0800b70d 	.word	0x0800b70d
 800b76c:	0800b7bb 	.word	0x0800b7bb
 800b770:	0800b70d 	.word	0x0800b70d
 800b774:	0800b70d 	.word	0x0800b70d
 800b778:	0800b851 	.word	0x0800b851
 800b77c:	6833      	ldr	r3, [r6, #0]
 800b77e:	1d1a      	adds	r2, r3, #4
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	6032      	str	r2, [r6, #0]
 800b784:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b788:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b78c:	2301      	movs	r3, #1
 800b78e:	e09c      	b.n	800b8ca <_printf_i+0x1e6>
 800b790:	6833      	ldr	r3, [r6, #0]
 800b792:	6820      	ldr	r0, [r4, #0]
 800b794:	1d19      	adds	r1, r3, #4
 800b796:	6031      	str	r1, [r6, #0]
 800b798:	0606      	lsls	r6, r0, #24
 800b79a:	d501      	bpl.n	800b7a0 <_printf_i+0xbc>
 800b79c:	681d      	ldr	r5, [r3, #0]
 800b79e:	e003      	b.n	800b7a8 <_printf_i+0xc4>
 800b7a0:	0645      	lsls	r5, r0, #25
 800b7a2:	d5fb      	bpl.n	800b79c <_printf_i+0xb8>
 800b7a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7a8:	2d00      	cmp	r5, #0
 800b7aa:	da03      	bge.n	800b7b4 <_printf_i+0xd0>
 800b7ac:	232d      	movs	r3, #45	@ 0x2d
 800b7ae:	426d      	negs	r5, r5
 800b7b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7b4:	4858      	ldr	r0, [pc, #352]	@ (800b918 <_printf_i+0x234>)
 800b7b6:	230a      	movs	r3, #10
 800b7b8:	e011      	b.n	800b7de <_printf_i+0xfa>
 800b7ba:	6821      	ldr	r1, [r4, #0]
 800b7bc:	6833      	ldr	r3, [r6, #0]
 800b7be:	0608      	lsls	r0, r1, #24
 800b7c0:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7c4:	d402      	bmi.n	800b7cc <_printf_i+0xe8>
 800b7c6:	0649      	lsls	r1, r1, #25
 800b7c8:	bf48      	it	mi
 800b7ca:	b2ad      	uxthmi	r5, r5
 800b7cc:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7ce:	4852      	ldr	r0, [pc, #328]	@ (800b918 <_printf_i+0x234>)
 800b7d0:	6033      	str	r3, [r6, #0]
 800b7d2:	bf14      	ite	ne
 800b7d4:	230a      	movne	r3, #10
 800b7d6:	2308      	moveq	r3, #8
 800b7d8:	2100      	movs	r1, #0
 800b7da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7de:	6866      	ldr	r6, [r4, #4]
 800b7e0:	60a6      	str	r6, [r4, #8]
 800b7e2:	2e00      	cmp	r6, #0
 800b7e4:	db05      	blt.n	800b7f2 <_printf_i+0x10e>
 800b7e6:	6821      	ldr	r1, [r4, #0]
 800b7e8:	432e      	orrs	r6, r5
 800b7ea:	f021 0104 	bic.w	r1, r1, #4
 800b7ee:	6021      	str	r1, [r4, #0]
 800b7f0:	d04b      	beq.n	800b88a <_printf_i+0x1a6>
 800b7f2:	4616      	mov	r6, r2
 800b7f4:	fbb5 f1f3 	udiv	r1, r5, r3
 800b7f8:	fb03 5711 	mls	r7, r3, r1, r5
 800b7fc:	5dc7      	ldrb	r7, [r0, r7]
 800b7fe:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b802:	462f      	mov	r7, r5
 800b804:	42bb      	cmp	r3, r7
 800b806:	460d      	mov	r5, r1
 800b808:	d9f4      	bls.n	800b7f4 <_printf_i+0x110>
 800b80a:	2b08      	cmp	r3, #8
 800b80c:	d10b      	bne.n	800b826 <_printf_i+0x142>
 800b80e:	6823      	ldr	r3, [r4, #0]
 800b810:	07df      	lsls	r7, r3, #31
 800b812:	d508      	bpl.n	800b826 <_printf_i+0x142>
 800b814:	6923      	ldr	r3, [r4, #16]
 800b816:	6861      	ldr	r1, [r4, #4]
 800b818:	4299      	cmp	r1, r3
 800b81a:	bfde      	ittt	le
 800b81c:	2330      	movle	r3, #48	@ 0x30
 800b81e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b822:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b826:	1b92      	subs	r2, r2, r6
 800b828:	6122      	str	r2, [r4, #16]
 800b82a:	f8cd a000 	str.w	sl, [sp]
 800b82e:	464b      	mov	r3, r9
 800b830:	aa03      	add	r2, sp, #12
 800b832:	4621      	mov	r1, r4
 800b834:	4640      	mov	r0, r8
 800b836:	f7ff fee7 	bl	800b608 <_printf_common>
 800b83a:	3001      	adds	r0, #1
 800b83c:	d14a      	bne.n	800b8d4 <_printf_i+0x1f0>
 800b83e:	f04f 30ff 	mov.w	r0, #4294967295
 800b842:	b004      	add	sp, #16
 800b844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b848:	6823      	ldr	r3, [r4, #0]
 800b84a:	f043 0320 	orr.w	r3, r3, #32
 800b84e:	6023      	str	r3, [r4, #0]
 800b850:	4832      	ldr	r0, [pc, #200]	@ (800b91c <_printf_i+0x238>)
 800b852:	2778      	movs	r7, #120	@ 0x78
 800b854:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b858:	6823      	ldr	r3, [r4, #0]
 800b85a:	6831      	ldr	r1, [r6, #0]
 800b85c:	061f      	lsls	r7, r3, #24
 800b85e:	f851 5b04 	ldr.w	r5, [r1], #4
 800b862:	d402      	bmi.n	800b86a <_printf_i+0x186>
 800b864:	065f      	lsls	r7, r3, #25
 800b866:	bf48      	it	mi
 800b868:	b2ad      	uxthmi	r5, r5
 800b86a:	6031      	str	r1, [r6, #0]
 800b86c:	07d9      	lsls	r1, r3, #31
 800b86e:	bf44      	itt	mi
 800b870:	f043 0320 	orrmi.w	r3, r3, #32
 800b874:	6023      	strmi	r3, [r4, #0]
 800b876:	b11d      	cbz	r5, 800b880 <_printf_i+0x19c>
 800b878:	2310      	movs	r3, #16
 800b87a:	e7ad      	b.n	800b7d8 <_printf_i+0xf4>
 800b87c:	4826      	ldr	r0, [pc, #152]	@ (800b918 <_printf_i+0x234>)
 800b87e:	e7e9      	b.n	800b854 <_printf_i+0x170>
 800b880:	6823      	ldr	r3, [r4, #0]
 800b882:	f023 0320 	bic.w	r3, r3, #32
 800b886:	6023      	str	r3, [r4, #0]
 800b888:	e7f6      	b.n	800b878 <_printf_i+0x194>
 800b88a:	4616      	mov	r6, r2
 800b88c:	e7bd      	b.n	800b80a <_printf_i+0x126>
 800b88e:	6833      	ldr	r3, [r6, #0]
 800b890:	6825      	ldr	r5, [r4, #0]
 800b892:	6961      	ldr	r1, [r4, #20]
 800b894:	1d18      	adds	r0, r3, #4
 800b896:	6030      	str	r0, [r6, #0]
 800b898:	062e      	lsls	r6, r5, #24
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	d501      	bpl.n	800b8a2 <_printf_i+0x1be>
 800b89e:	6019      	str	r1, [r3, #0]
 800b8a0:	e002      	b.n	800b8a8 <_printf_i+0x1c4>
 800b8a2:	0668      	lsls	r0, r5, #25
 800b8a4:	d5fb      	bpl.n	800b89e <_printf_i+0x1ba>
 800b8a6:	8019      	strh	r1, [r3, #0]
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	6123      	str	r3, [r4, #16]
 800b8ac:	4616      	mov	r6, r2
 800b8ae:	e7bc      	b.n	800b82a <_printf_i+0x146>
 800b8b0:	6833      	ldr	r3, [r6, #0]
 800b8b2:	1d1a      	adds	r2, r3, #4
 800b8b4:	6032      	str	r2, [r6, #0]
 800b8b6:	681e      	ldr	r6, [r3, #0]
 800b8b8:	6862      	ldr	r2, [r4, #4]
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	4630      	mov	r0, r6
 800b8be:	f7f4 fcaf 	bl	8000220 <memchr>
 800b8c2:	b108      	cbz	r0, 800b8c8 <_printf_i+0x1e4>
 800b8c4:	1b80      	subs	r0, r0, r6
 800b8c6:	6060      	str	r0, [r4, #4]
 800b8c8:	6863      	ldr	r3, [r4, #4]
 800b8ca:	6123      	str	r3, [r4, #16]
 800b8cc:	2300      	movs	r3, #0
 800b8ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8d2:	e7aa      	b.n	800b82a <_printf_i+0x146>
 800b8d4:	6923      	ldr	r3, [r4, #16]
 800b8d6:	4632      	mov	r2, r6
 800b8d8:	4649      	mov	r1, r9
 800b8da:	4640      	mov	r0, r8
 800b8dc:	47d0      	blx	sl
 800b8de:	3001      	adds	r0, #1
 800b8e0:	d0ad      	beq.n	800b83e <_printf_i+0x15a>
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	079b      	lsls	r3, r3, #30
 800b8e6:	d413      	bmi.n	800b910 <_printf_i+0x22c>
 800b8e8:	68e0      	ldr	r0, [r4, #12]
 800b8ea:	9b03      	ldr	r3, [sp, #12]
 800b8ec:	4298      	cmp	r0, r3
 800b8ee:	bfb8      	it	lt
 800b8f0:	4618      	movlt	r0, r3
 800b8f2:	e7a6      	b.n	800b842 <_printf_i+0x15e>
 800b8f4:	2301      	movs	r3, #1
 800b8f6:	4632      	mov	r2, r6
 800b8f8:	4649      	mov	r1, r9
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	47d0      	blx	sl
 800b8fe:	3001      	adds	r0, #1
 800b900:	d09d      	beq.n	800b83e <_printf_i+0x15a>
 800b902:	3501      	adds	r5, #1
 800b904:	68e3      	ldr	r3, [r4, #12]
 800b906:	9903      	ldr	r1, [sp, #12]
 800b908:	1a5b      	subs	r3, r3, r1
 800b90a:	42ab      	cmp	r3, r5
 800b90c:	dcf2      	bgt.n	800b8f4 <_printf_i+0x210>
 800b90e:	e7eb      	b.n	800b8e8 <_printf_i+0x204>
 800b910:	2500      	movs	r5, #0
 800b912:	f104 0619 	add.w	r6, r4, #25
 800b916:	e7f5      	b.n	800b904 <_printf_i+0x220>
 800b918:	0800c205 	.word	0x0800c205
 800b91c:	0800c216 	.word	0x0800c216

0800b920 <memmove>:
 800b920:	4288      	cmp	r0, r1
 800b922:	b510      	push	{r4, lr}
 800b924:	eb01 0402 	add.w	r4, r1, r2
 800b928:	d902      	bls.n	800b930 <memmove+0x10>
 800b92a:	4284      	cmp	r4, r0
 800b92c:	4623      	mov	r3, r4
 800b92e:	d807      	bhi.n	800b940 <memmove+0x20>
 800b930:	1e43      	subs	r3, r0, #1
 800b932:	42a1      	cmp	r1, r4
 800b934:	d008      	beq.n	800b948 <memmove+0x28>
 800b936:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b93a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b93e:	e7f8      	b.n	800b932 <memmove+0x12>
 800b940:	4402      	add	r2, r0
 800b942:	4601      	mov	r1, r0
 800b944:	428a      	cmp	r2, r1
 800b946:	d100      	bne.n	800b94a <memmove+0x2a>
 800b948:	bd10      	pop	{r4, pc}
 800b94a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b94e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b952:	e7f7      	b.n	800b944 <memmove+0x24>

0800b954 <_sbrk_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d06      	ldr	r5, [pc, #24]	@ (800b970 <_sbrk_r+0x1c>)
 800b958:	2300      	movs	r3, #0
 800b95a:	4604      	mov	r4, r0
 800b95c:	4608      	mov	r0, r1
 800b95e:	602b      	str	r3, [r5, #0]
 800b960:	f7f9 fbb0 	bl	80050c4 <_sbrk>
 800b964:	1c43      	adds	r3, r0, #1
 800b966:	d102      	bne.n	800b96e <_sbrk_r+0x1a>
 800b968:	682b      	ldr	r3, [r5, #0]
 800b96a:	b103      	cbz	r3, 800b96e <_sbrk_r+0x1a>
 800b96c:	6023      	str	r3, [r4, #0]
 800b96e:	bd38      	pop	{r3, r4, r5, pc}
 800b970:	20001d4c 	.word	0x20001d4c

0800b974 <_realloc_r>:
 800b974:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b978:	4607      	mov	r7, r0
 800b97a:	4614      	mov	r4, r2
 800b97c:	460d      	mov	r5, r1
 800b97e:	b921      	cbnz	r1, 800b98a <_realloc_r+0x16>
 800b980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b984:	4611      	mov	r1, r2
 800b986:	f7ff bc5b 	b.w	800b240 <_malloc_r>
 800b98a:	b92a      	cbnz	r2, 800b998 <_realloc_r+0x24>
 800b98c:	f7ff fbec 	bl	800b168 <_free_r>
 800b990:	4625      	mov	r5, r4
 800b992:	4628      	mov	r0, r5
 800b994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b998:	f000 f81a 	bl	800b9d0 <_malloc_usable_size_r>
 800b99c:	4284      	cmp	r4, r0
 800b99e:	4606      	mov	r6, r0
 800b9a0:	d802      	bhi.n	800b9a8 <_realloc_r+0x34>
 800b9a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b9a6:	d8f4      	bhi.n	800b992 <_realloc_r+0x1e>
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4638      	mov	r0, r7
 800b9ac:	f7ff fc48 	bl	800b240 <_malloc_r>
 800b9b0:	4680      	mov	r8, r0
 800b9b2:	b908      	cbnz	r0, 800b9b8 <_realloc_r+0x44>
 800b9b4:	4645      	mov	r5, r8
 800b9b6:	e7ec      	b.n	800b992 <_realloc_r+0x1e>
 800b9b8:	42b4      	cmp	r4, r6
 800b9ba:	4622      	mov	r2, r4
 800b9bc:	4629      	mov	r1, r5
 800b9be:	bf28      	it	cs
 800b9c0:	4632      	movcs	r2, r6
 800b9c2:	f7ff fbc3 	bl	800b14c <memcpy>
 800b9c6:	4629      	mov	r1, r5
 800b9c8:	4638      	mov	r0, r7
 800b9ca:	f7ff fbcd 	bl	800b168 <_free_r>
 800b9ce:	e7f1      	b.n	800b9b4 <_realloc_r+0x40>

0800b9d0 <_malloc_usable_size_r>:
 800b9d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9d4:	1f18      	subs	r0, r3, #4
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	bfbc      	itt	lt
 800b9da:	580b      	ldrlt	r3, [r1, r0]
 800b9dc:	18c0      	addlt	r0, r0, r3
 800b9de:	4770      	bx	lr

0800b9e0 <_init>:
 800b9e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9e2:	bf00      	nop
 800b9e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9e6:	bc08      	pop	{r3}
 800b9e8:	469e      	mov	lr, r3
 800b9ea:	4770      	bx	lr

0800b9ec <_fini>:
 800b9ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9ee:	bf00      	nop
 800b9f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9f2:	bc08      	pop	{r3}
 800b9f4:	469e      	mov	lr, r3
 800b9f6:	4770      	bx	lr

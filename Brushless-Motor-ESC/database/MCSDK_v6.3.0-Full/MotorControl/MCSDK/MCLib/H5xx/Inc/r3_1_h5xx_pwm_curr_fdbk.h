/**
  ******************************************************************************
  * @file    r3_1_h5xx_pwm_curr_fdbk.h
  * @author  Motor Control SDK Team, ST Microelectronics
  * @brief   This file contains all definitions and functions prototypes for the
  *          r3_1_H5xx_pwm_curr_fdbk component of the Motor Control SDK.
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under Ultimate Liberty license
  * SLA0044, the "License"; You may not use this file except in compliance with
  * the License. You may obtain a copy of the License at:
  *                             www.st.com/SLA0044
  *
  ******************************************************************************
  */

/* Define to prevent recursive inclusion -------------------------------------*/
#ifndef __R3_1_PWM_CURR_FDBK_H
#define __R3_1_PWM_CURR_FDBK_H

#ifdef __cplusplus
 extern "C" {
#endif /* __cplusplus */

/* Includes ------------------------------------------------------------------*/
#include "pwm_curr_fdbk.h"

/** @addtogroup MCSDK
  * @{
  */

/** @addtogroup pwm_curr_fdbk
  * @{
  */

/** @addtogroup R3_1_pwm_curr_fdbk
  * @{
  */

#define NONE    ((uint8_t)(0x00))
#define EXT_MODE  ((uint8_t)(0x01))
#define INT_MODE  ((uint8_t)(0x02))


/* Exported constants --------------------------------------------------------*/



/* Exported types ------------------------------------------------------------*/

/*
  * @brief  R3_1_H5XX_pwm_curr_fdbk component parameters definition
  */
typedef struct
{
  ADC_TypeDef * ADCx;                  /* ADC peripheral to be used. */
  TIM_TypeDef * TIMx;                  /* Timer used for PWM generation. */
  uint32_t ADCConfig[6];               /*!< store ADC sequence for the 6 sectors */
  uint16_t Tw;                    /*!< Used for switching the context
                                       in dual MC. It contains biggest delay
                                       (expressed in counter ticks) between
                                       the counter crest and ADC latest trigger. Specific to F4XX and F7XX.
                                            expresses the maximum dead time
                                            generated by driving network */
  uint16_t hTafter;                    /*!< It is the sum of dead time plus max
                                            value between rise time and noise time
                                            express in number of TIM clocks.*/
  uint16_t hTbefore;                   /*!< It is the sampling time express in
                                            number of TIM clocks.*/
  uint16_t hDeadTime;                /*!< Dead time in number of TIM clock
                                          cycles. If CHxN are enabled, it must
                                          contain the dead time to be generated
                                          by the microcontroller, otherwise it
                                          expresses the maximum dead time
                                          generated by driving network. Specific to F4XX and F7XX. */

  uint16_t Tsampling;                 /* Sampling time expressed in
                                          number of TIM clocks.*/
  uint16_t Tbefore;                   /* Sampling time expressed in
                                          number of TIM clocks.*/
  uint16_t Tcase2;                    /* Sampling time expressed in
                                          number of TIM clocks.*/
  uint16_t Tcase3;                    /* Sampling time expressed in
                                          number of TIM clocks.*/

  /* Dual MC parameters --------------------------------------------------------*/
  uint8_t  bFreqRatio;              /* Used in case of dual MC to
                                        synchronize TIM1 and TIM8. It has
                                        effect only on the second instanced
                                        object and must be equal to the
                                        ratio between the two PWM frequencies
                                        (higher/lower). Supported values are
                                        1, 2 or 3 */
  uint8_t  bIsHigherFreqTim;        /* When bFreqRatio is greater than 1
                                        this param is used to indicate if this
                                        instance is the one with the highest
                                        frequency. Allowed values are: HIGHER_FREQ
                                        or LOWER_FREQ */

  uint8_t  RepetitionCounter;         /*!< It expresses the number of PWM
                                            periods to be elapsed before compare
                                            registers are updated again. In
                                            particular:
                                            RepetitionCounter= (2* PWM periods)-1*/

}R3_1_Params_t;

/*
  * @brief  This structure is used to handle an instance of the
  *         PWM and current feedback component.
  */
typedef struct
{
  PWMC_Handle_t _Super;         /*!< Offset of current sensing network  */
  uint32_t PhaseAOffset;       /*!< Offset of Phase A current sensing network  */
  uint32_t PhaseBOffset;       /*!< Offset of Phase B current sensing network  */
  uint32_t PhaseCOffset;       /*!< Offset of Phase C current sensing network  */
  volatile uint32_t ADCTriggerEdge; /*!< edge trigger selection for ADC peripheral.*/
  uint16_t Half_PWMPeriod;      /*!< Half PWM Period in timer clock counts */
  uint16_t ADC_ExternalTriggerInjected; /*!< External ADC trigger source. */
  uint16_t ADC_ExternalPolarityInjected;
  volatile uint8_t PolarizationCounter;               /*!< Number of conversions performed during the
                                                           calibration phase*/
  uint8_t PolarizationSector; /* Sector selected during calibration phase.*/
  bool ADCRegularLocked;        /*!< When it's true, we do not allow usage of ADC to do regular conversion on systick*/
  R3_1_Params_t const * pParams_str;

}PWMC_R3_1_Handle_t;

/* Exported functions ------------------------------------------------------- */

/*
  * It initializes TIM1, ADC1, GPIO, DMA1 and NVIC for three shunt current
  * reading configuration using STM32H5x.
  */
void R3_1_Init(PWMC_R3_1_Handle_t *pHandle);

/*
  * Stores into the handle the voltage present on Ia and
  * Ib current feedback analog channels when no current is flowing into the
  * motor.
  */
void R3_1_CurrentReadingPolarization( PWMC_Handle_t * pHdl );

/*
 * It computes and return latest converted motor phase currents
 */
void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents);

/*
  * It computes and return latest converted motor phase currents motor
  *
  */
void R3_1_GetPhaseCurrents_OVM( PWMC_Handle_t * pHdl, ab_t * Iab );

/*
  * Configure the ADC for the current sampling related to sector 1.
  * It means set the sampling point via TIM1_Ch4 value and polarity
  * ADC sequence length and channels.
  */
uint16_t R3_1_SetADCSampPointSectX(PWMC_Handle_t * pHdl );

/*
  * Configure the ADC for the current sampling 
  * It means set the sampling point via TIMx_Ch4 value and polarity
  * ADC sequence length and channels.
  * And call the WriteTIMRegisters method.
  */
uint16_t R3_1_SetADCSampPointSectX_OVM( PWMC_Handle_t * pHdl );


/*
  * Configure the ADC for the current sampling during calibration.
  * It means set the sampling point via TIMx_Ch4 value and polarity
  * ADC sequence length and channels.
  */
uint16_t R3_1_SetADCSampPointCalibration(PWMC_Handle_t *pHdl);

/*
  * Turns on low sides switches.
  */
void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl, uint32_t ticks);

/*
  * This function enables the PWM outputs
  */
void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl);

/*
  * It disables PWM generation on the proper Timer peripheral acting on
  * MOE bit and reset the TIM status
  */
void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl);

/*
  * It contains the TIMx Update event interrupt
  */
void * R3_1_TIMx_UP_IRQHandler( PWMC_R3_1_Handle_t * pHandle );

/*
  * Sets the calibrated offset.
  */
void R3_1_SetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets);

/*
  * Reads the calibrated offsets.
  */
void R3_1_GetOffsetCalib(PWMC_Handle_t *pHdl, PolarizationOffsets_t *offsets);

/*
  * Sets the PWM mode for R/L detection.
  */
void R3_1_RLDetectionModeEnable( PWMC_Handle_t * pHdl );

/*
  * Disables the PWM mode for R/L detection.
  */
void R3_1_RLDetectionModeDisable( PWMC_Handle_t * pHdl );

/*
  * Sets the PWM dutycycle for R/L detection.
  */
uint16_t R3_1_RLDetectionModeSetDuty( PWMC_Handle_t * pHdl, uint16_t hDuty );

/*
 * This function is specific for MP phase.
 */
void R3_1_RLTurnOnLowSidesAndStart( PWMC_Handle_t * pHdl );
/**
  * @}
  */

/**
  * @}
  */
/**
  * @}
  */
#ifdef __cplusplus
}
#endif /* __cpluplus */

#endif /*__R3_1_H5XX_PWMNCURRFDBK_H*/

 /************************ (C) COPYRIGHT 2024 STMicroelectronics *****END OF FILE****/
